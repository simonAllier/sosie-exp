{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":327,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":567,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":157,"com.google.gson.functional.StringTest.testStringValueDeserialization":565,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":124,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":399,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":456,"com.google.gson.stream.JsonWriterTest.testRepeatedName":178,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":361,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":11,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":322,"com.google.gson.MixedStreamTest.testWriteLenient":113,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":505,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":302,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":82,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":1,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":57,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":239,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":301,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":405,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":504,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":583,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":64,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":370,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":166,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":481,"com.google.gson.functional.ObjectTest.testSingletonLists":182,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":245,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":457,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":355,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":568,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":170,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":601,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":256,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":562,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":469,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":310,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":144,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":408,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":233,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":588,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":581,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":86,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":158,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":400,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":66,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":347,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":640,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":90,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":623,"com.google.gson.functional.EnumTest.testEnumCaseMapping":503,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":566,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":633,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":346,"com.google.gson.functional.JsonTreeTest.testToJsonTree":434,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":162,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":470,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":29,"com.google.gson.JsonObjectTest.testEqualsNonEmptyObject":655,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":54,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":81,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":230,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":529,"com.google.gson.internal.LinkedHashTreeMapTest.testAvlBuilder":101,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":356,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":453,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":484,"com.google.gson.internal.LinkedTreeMapTest.testLargeSetOfRandomKeys":649,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":554,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":69,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":578,"com.google.gson.internal.bind.JsonElementReaderTest.testNestedObjects":645,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":307,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":276,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":417,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":362,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":85,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":544,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":213,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":314,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":275,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":603,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":437,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":471,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":225,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":422,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":421,"com.google.gson.JsonParserTest.testParseString":657,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":468,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":115,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":231,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":385,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":427,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":443,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":187,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":525,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":152,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":383,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":397,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":506,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":619,"com.google.gson.functional.StreamingTypeAdaptersTest.testFromJsonTree":653,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":214,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":450,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":202,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":60,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":273,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":116,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":512,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":398,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":186,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":519,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":18,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":277,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":305,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":16,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":366,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":625,"com.google.gson.internal.LinkedHashTreeMapTest.testEmptyStringValues":664,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":586,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":205,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":220,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":339,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":595,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":604,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":629,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":209,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":335,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":10,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":452,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":132,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":72,"com.google.gson.functional.CollectionTest.testSetDeserialization":58,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":65,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":6,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":297,"com.google.gson.functional.EnumTest.testEnumSet":496,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":390,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":221,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":594,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithNestedWildcards":283,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":96,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":259,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":129,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":94,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":140,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":402,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":338,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":410,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":257,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":541,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":411,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":359,"com.google.gson.functional.MapTest.testHashMapDeserialization":613,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":550,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":461,"com.google.gson.MixedStreamTest.testReadNulls":290,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":328,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":342,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":42,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":195,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":200,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":609,"com.google.gson.functional.MapTest.testSortedMap":624,"com.google.gson.functional.MapTest.testMapSerialization":264,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":196,"com.google.gson.internal.bind.JsonElementReaderTest.testObject":646,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":333,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":395,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":531,"com.google.gson.functional.MapTest.testSerializeMaps":165,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":243,"com.google.gson.functional.MapTest.testComplexKeysSerialization":67,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":296,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":628,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":659,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":537,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":71,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":501,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":136,"com.google.gson.internal.LinkedTreeMapTest.testRemoveRootDoesNotDoubleUnlink":652,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":51,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":108,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":500,"com.google.gson.internal.LinkedHashTreeMapTest.testDoubleCapacity":102,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":125,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":12,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":316,"com.google.gson.functional.MapTest.testStringKeyDeserialization":627,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithBasicWildcards":285,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":534,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":250,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":118,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":274,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":365,"com.google.gson.functional.PrettyPrintingTest.testMap":159,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":360,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":492,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":547,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":197,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":440,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":607,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":232,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":287,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":536,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":571,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":575,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":154,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":448,"com.google.gson.functional.CollectionTest.testQueueSerialization":551,"com.google.gson.functional.MapTest.testMapSerializationEmpty":626,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":391,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnName":180,"com.google.gson.functional.MapTest.testMapOfMapSerialization":263,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":382,"com.google.gson.JavaSerializationTest.testMapIsSerializable":637,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":454,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":556,"com.google.gson.stream.JsonWriterTest.testNameWithoutValue":176,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":78,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":114,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":602,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictBoxedNansAndInfinities":660,"com.google.gson.functional.FieldNamingTest.testIdentity":244,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":569,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":596,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":189,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":317,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":15,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":104,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":120,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":126,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":349,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":641,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":474,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":570,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":388,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":539,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":465,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":169,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":447,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":77,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":106,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":449,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":610,"com.google.gson.functional.MapTest.testMapSubclassSerialization":258,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":420,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":193,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":490,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":299,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":55,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":155,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":380,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":587,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":432,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":439,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":507,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":606,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":139,"com.google.gson.functional.EnumTest.testEnumSubclass":498,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":401,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":145,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":308,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":348,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":212,"com.google.gson.GsonBuilderTest.testRegisterTypeAdapterForCoreType":286,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":404,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":61,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":49,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":351,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":236,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":386,"com.google.gson.stream.JsonWriterTest.testTwoNames":175,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":540,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":23,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":168,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":528,"com.google.gson.internal.LinkedTreeMapTest.testEqualsAndHashCode":651,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":306,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":392,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":14,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":384,"com.google.gson.stream.JsonWriterTest.testObjectsInArrays":148,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":466,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":300,"com.google.gson.MixedStreamTest.testWriteNulls":103,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":612,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":527,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":510,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":521,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":70,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":488,"com.google.gson.CommentsTest.testParseComments":643,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":127,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":253,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":485,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":39,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":403,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":532,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":332,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":266,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":573,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":88,"com.google.gson.MixedStreamTest.testReadInvalidState":288,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":62,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":53,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":419,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":467,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":198,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":358,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":100,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":538,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithTypeParameters":284,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":36,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":375,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":76,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":415,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":455,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":524,"com.google.gson.functional.MapTest.testMapDeserialization":618,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":451,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":163,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":611,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":480,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":28,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":260,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":135,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":482,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":52,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeMap":654,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":22,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":499,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":31,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":7,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":309,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":44,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":494,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":122,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":444,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":167,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":215,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":235,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":160,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":265,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":631,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":84,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":345,"com.google.gson.functional.PrimitiveTest.testShortSerialization":418,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":600,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":217,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":407,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":92,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":381,"com.google.gson.internal.LinkedTreeMapTest.testIterationOrder":650,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":406,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":32,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":357,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":240,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":89,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":237,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":192,"com.google.gson.internal.LinkedTreeMapTest.testPutOverrides":647,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":615,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":374,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":425,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":563,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":508,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":463,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":487,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":171,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":294,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":430,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":426,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":228,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":341,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":8,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":27,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":597,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":173,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":246,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":435,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":413,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":473,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":251,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":387,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":320,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":304,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":502,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":46,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":298,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":238,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":445,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":222,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":598,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":133,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":151,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":216,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":364,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":149,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":201,"com.google.gson.stream.JsonWriterTest.testNullStringValue":177,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":218,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":459,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":25,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":548,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":352,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":414,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":389,"com.google.gson.JsonArrayTest.testSet":666,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":119,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":19,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":134,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":497,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":331,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":334,"com.google.gson.functional.MapTest.testGeneralMapField":270,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":303,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":518,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":429,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":234,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":475,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":491,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":464,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":268,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":21,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":79,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":514,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":409,"com.google.gson.MixedStreamTest.testReadMixedStreamed":293,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":376,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":446,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":620,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":344,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":559,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":642,"com.google.gson.stream.JsonWriterTest.testNonFiniteDoubles":661,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":585,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":393,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":91,"com.google.gson.JavaSerializationTest.testNumberIsSerializable":636,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":337,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":34,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":621,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":478,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":614,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":279,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":599,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":181,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":248,"com.google.gson.stream.JsonWriterTest.testArraysInObjects":147,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":377,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":172,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":150,"com.google.gson.internal.LinkedHashTreeMapTest.testEqualsAndHashCode":665,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":511,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":190,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":95,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":555,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":486,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":255,"com.google.gson.functional.ObjectTest.testNestedDeserialization":321,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":87,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":312,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":329,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":121,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":545,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":428,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":38,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":340,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":572,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":622,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":138,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":117,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":45,"com.google.gson.JavaSerializationTest.testListIsSerializable":638,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":4,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":509,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":561,"com.google.gson.functional.ObjectTest.testNullSerialization":105,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":48,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":477,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":616,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":269,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":350,"com.google.gson.functional.MapTest.testInterfaceTypeMap":267,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":530,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":493,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":206,"com.google.gson.JsonObjectTest.testAddingNullOrEmptyPropertyName":153,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":353,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":223,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":227,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":479,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":495,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":436,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":543,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":368,"com.google.gson.MixedStreamTest.testWriteClosed":292,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":330,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":553,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":26,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":183,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":472,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":141,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":24,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":41,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":37,"com.google.gson.stream.JsonWriterTest.testLongs":146,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":188,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":35,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":184,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":207,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":552,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":590,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":396,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":249,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":50,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":557,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":460,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":324,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":74,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":431,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":373,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":433,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":442,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":73,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":515,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":40,"com.google.gson.functional.CollectionTest.testQueueDeserialization":564,"com.google.gson.internal.LinkedHashTreeMapTest.testPutOverrides":662,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":379,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":394,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":577,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":326,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":97,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":591,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":261,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":315,"com.google.gson.stream.JsonWriterTest.testDeepNestingObjects":179,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":112,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":226,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":319,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":546,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":174,"com.google.gson.functional.MapTest.testRawMapSerialization":272,"com.google.gson.JsonParserTest.testParseReader":656,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":560,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":458,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":229,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":43,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":130,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":9,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":107,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":630,"com.google.gson.functional.PrimitiveTest.testByteSerialization":416,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":520,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":605,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":632,"com.google.gson.ObjectTypeAdapterTest.testSerialize":0,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":203,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":224,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":363,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromRawTypes":658,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":2,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":282,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":241,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":142,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":574,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":639,"com.google.gson.functional.MapTest.testMapWithQuotes":262,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":371,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":441,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":576,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":593,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":343,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":93,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":56,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":423,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":438,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":63,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":483,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":137,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":318,"com.google.gson.internal.LinkedHashTreeMapTest.testDoubleCapacityAllNodesOnLeft":99,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":164,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":110,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":278,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":5,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":535,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":210,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":80,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":3,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":111,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":247,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":412,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":109,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":558,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":523,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":83,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":219,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":516,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":47,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":191,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":592,"com.google.gson.internal.LinkedHashTreeMapTest.testContainsNonComparableKeyReturnsFalse":663,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":194,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":608,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":354,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":489,"com.google.gson.internal.LinkedHashTreeMapTest.testRemoveRootDoesNotDoubleUnlink":98,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":254,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":280,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":311,"com.google.gson.functional.ObjectTest.testNestedSerialization":185,"com.google.gson.internal.LinkedTreeMapTest.testClear":648,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":20,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":367,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":513,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":580,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":295,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":271,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":199,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":211,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":291,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":635,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":128,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":323,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":424,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":123,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":584,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":33,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":369,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":634,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":30,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":313,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":589,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":281,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":579,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":526,"com.google.gson.functional.CollectionTest.testSetSerialization":59,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":476,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":161,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":252,"com.google.gson.functional.StringTest.testStringValueSerialization":582,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":131,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":13,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":75,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":549,"com.google.gson.MixedStreamTest.testWriteInvalidState":289,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":517,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":372,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":378,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":533,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":17,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":208,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":242,"com.google.gson.ObjectTypeAdapterTest.testDeserialize":644,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":68,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":325,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":542,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":143,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":462,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":204,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":617,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":156,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":336,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":522},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:188","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"289246a6-3f05-11e6-9243-f35aa1fa11fe","method":{"position":"com.google.gson.internal.$Gson$Types:151","type":"CtMethodImpl","sourcecode":"static boolean equal(java.lang.Object a, java.lang.Object b) {\n    return (a == b) || ((a != null) && (a.equals(b)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:136","type":"CtBinaryOperatorImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78],"tindex":"289309f7-3f05-11e6-9243-3319030828de","method":{"position":"com.google.gson.internal.ConstructorConstructor:200","type":"CtMethodImpl","sourcecode":"private <T>com.google.gson.internal.ObjectConstructor<T> newUnsafeAllocator(final java.lang.reflect.Type type, final java.lang.Class<? super T> rawType) {\n    if (type instanceof java.lang.Class<?>) {\n        {\n            if (type instanceof java.lang.reflect.TypeVariable) {\n                {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        private final com.google.gson.internal.UnsafeAllocator unsafeAllocator = com.google.gson.internal.UnsafeAllocator.create();\n\n                        @java.lang.SuppressWarnings(value = \"unchecked\")\n                        public T construct() {\n                            try {\n                                java.lang.Object java.lang.Object = com.google.gson.internal.UnsafeAllocator.newInstance(rawType);\n                                return ((T)(newInstance));\n                            } catch (java.lang.Exception e) {\n                                throw new java.lang.RuntimeException((((\"Unable to invoke no-args constructor for \" + type) + \". \") + \"Register an InstanceCreator with Gson for this type may fix this problem.\") , e);\n                            }\n                        }\n                    };\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:554","type":"CtBinaryOperatorImpl"},"failures":[79,80,81,82,83,84],"tindex":"28933108-3f05-11e6-9243-37484a033f5e","method":{"position":"com.google.gson.GsonBuilder:551","type":"CtMethodImpl","sourcecode":"private void addTypeAdaptersForDate(java.lang.String datePattern, int dateStyle, int timeStyle, java.util.List<com.google.gson.TypeAdapterFactory> factories) {\n    if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    com.google.gson.DefaultDateTypeAdapter com.google.gson.DefaultDateTypeAdapter;\n                    if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n                        dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(datePattern);\n                    } else if ((dateStyle != (java.text.DateFormat.java.text.DateFormat.int)) && (timeStyle != (java.text.DateFormat.java.text.DateFormat.int))) {\n                        dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(dateStyle , timeStyle);\n                    } else {\n                        return ;\n                    }\n                    factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.util.Date.java.util.Date.java.lang.Class), dateTypeAdapter));\n                    factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Timestamp.java.sql.Timestamp.java.lang.Class), dateTypeAdapter));\n                    factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Date.java.sql.Date.java.lang.Class), dateTypeAdapter));\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"datePattern":"datePattern"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:455","type":"CtBinaryOperatorImpl"},"failures":[85,86,87,88,89,90,91,92,93,94],"tindex":"28937f29-3f05-11e6-9243-956c2f78a8b2","method":{"position":"com.google.gson.GsonBuilder:493","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\npublic com.google.gson.GsonBuilder registerTypeHierarchyAdapter(java.lang.Class<?> baseType, java.lang.Object typeAdapter) {\n    if ((typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    com.google.gson.internal.$Gson$Preconditions.checkArgument((((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) || (typeAdapter instanceof com.google.gson.TypeAdapter<?>)));\n                    if ((typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)) {\n                        java.util.List<com.google.gson.TypeAdapterFactory>.add(0, com.google.gson.TreeTypeAdapter.newTypeHierarchyFactory(baseType, typeAdapter));\n                    } \n                    if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                        java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.internal.bind.TypeAdapters.newTypeHierarchyFactory(baseType, ((com.google.gson.TypeAdapter)(typeAdapter))));\n                    } \n                    return com.google.gson.GsonBuilder.this;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl"},"failures":[95,96,97],"tindex":"2894698a-3f05-11e6-9243-0bccb191b3c0","method":{"position":"com.google.gson.internal.bind.DateTypeAdapter:69","type":"CtMethodImpl","sourcecode":"private synchronized java.util.Date deserializeToDate(java.lang.String json) {\n    if (json == null) {\n        {\n            try {\n                return java.text.DateFormat.parse(json);\n            } catch (java.text.ParseException ignored) {\n            }\n            try {\n                return java.text.DateFormat.parse(json);\n            } catch (java.text.ParseException ignored) {\n            }\n            try {\n                return java.text.DateFormat.parse(json);\n            } catch (java.text.ParseException e) {\n                throw new com.google.gson.JsonSyntaxException(json , e);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:384","type":"CtVariableReadImpl"},"failures":[98],"tindex":"2894909b-3f05-11e6-9243-91450c28e69c","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:338","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (insert) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (insert) {\n                {\n                    for (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) {\n                        com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                        com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                        int int = left != null ? left.int : 0;\n                        int int = right != null ? right.int : 0;\n                        int int = leftHeight - rightHeight;\n                        if (delta == (-2)) {\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            int int = rightRight != null ? rightRight.int : 0;\n                            int int = rightLeft != null ? rightLeft.int : 0;\n                            int int = rightLeftHeight - rightRightHeight;\n                            if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                                rotateLeft(node);\n                            } else {\n                                assert rightDelta == 1;\n                                rotateRight(right);\n                                rotateLeft(node);\n                            }\n                            if (insert) {\n                                break;\n                            } \n                        } else if (delta == 2) {\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            int int = leftRight != null ? leftRight.int : 0;\n                            int int = leftLeft != null ? leftLeft.int : 0;\n                            int int = leftLeftHeight - leftRightHeight;\n                            if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                                rotateRight(node);\n                            } else {\n                                assert leftDelta == (-1);\n                                rotateLeft(left);\n                                rotateRight(node);\n                            }\n                            if (insert) {\n                                break;\n                            } \n                        } else if (delta == 0) {\n                            node.int = leftHeight + 1;\n                            if (insert) {\n                                break;\n                            } \n                        } else {\n                            assert (delta == (-1)) || (delta == 1);\n                            node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                            if (!insert) {\n                                break;\n                            } \n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"insert"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:120","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"2894debc-3f05-11e6-9243-49d82db4fa25","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:512","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"rawtypes\")\n@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof java.util.Iterator) {\n        {\n            if (o instanceof com.google.gson.JsonNull) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (o instanceof java.util.Map.Entry) {\n                        java.util.Map.Entry java.util.Map.Entry = ((java.util.Map.Entry)(o));\n                        return ((K) == null ? (other.getKey()) == null : K.equals(other.getKey())) && ((V) == null ? (other.getValue()) == null : V.equals(other.getValue()));\n                    } \n                    return false;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:79","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"2894debd-3f05-11e6-9243-7deab3a22340","method":{"position":"com.google.gson.Gson:871","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            if (!(json instanceof com.google.gson.JsonPrimitive)) {\n                {\n                    if (json == null) {\n                        return null;\n                    } \n                    return ((T)(fromJson(new com.google.gson.internal.bind.JsonTreeReader(json), typeOfT)));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"289505ce-3f05-11e6-9243-03c7385d9e9b","method":{"position":"com.google.gson.DefaultDateTypeAdapter:94","type":"CtMethodImpl","sourcecode":"private java.util.Date deserializeToDate(com.google.gson.JsonElement json) {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            synchronized(java.text.DateFormat) {\n                try {\n                    return java.text.DateFormat.parse(json.getAsString());\n                } catch (java.text.ParseException ignored) {\n                }\n                try {\n                    return java.text.DateFormat.parse(json.getAsString());\n                } catch (java.text.ParseException ignored) {\n                }\n                try {\n                    return java.text.DateFormat.parse(json.getAsString());\n                } catch (java.text.ParseException e) {\n                    throw new com.google.gson.JsonSyntaxException(json.getAsString() , e);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:79","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"289505cf-3f05-11e6-9243-951978667a9d","method":{"position":"com.google.gson.Gson:127","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonParseException {\n    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n        {\n            return ((T)(fromJson(json, typeOfT)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:305","type":"CtBinaryOperatorImpl"},"failures":[99,100,101,102],"tindex":"289505d0-3f05-11e6-9243-8ba4c17b1a5a","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:686","type":"CtMethodImpl","sourcecode":"void add(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node) {\n    if (node != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            node.int = 1;\n            if (((int) > 0) && (((int) & 1) == 0)) {\n                (int)++;\n                (int)--;\n                (int)++;\n            } \n            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node;\n            (int)++;\n            if (((int) > 0) && (((int) & 1) == 0)) {\n                (int)++;\n                (int)--;\n                (int)++;\n            } \n            for (int int = 4 ; ((int) & (scale - 1)) == (scale - 1) ; scale *= 2) {\n                if ((int) == 0) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                    center.int = (right.int) + 1;\n                    left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                } else if ((int) == 1) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                    center.int = (right.int) + 1;\n                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    int = 0;\n                } else if ((int) == 2) {\n                    int = 0;\n                } \n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"node"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.JsonObject:54","type":"CtBinaryOperatorImpl"},"failures":[103,104,105,106,107,108,109],"tindex":"289553f1-3f05-11e6-9243-151df50b753d","method":{"position":"com.google.gson.internal.bind.TypeAdapters:680","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, com.google.gson.JsonElement value) throws java.io.IOException {\n    if (value.isJsonNull()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if ((value == null) || (value.isJsonNull())) {\n                        out.nullValue();\n                    } else if (value.isJsonPrimitive()) {\n                        com.google.gson.JsonPrimitive com.google.gson.JsonPrimitive = value.getAsJsonPrimitive();\n                        if (primitive.isNumber()) {\n                            out.value(primitive.getAsNumber());\n                        } else if (primitive.isBoolean()) {\n                            out.value(primitive.getAsBoolean());\n                        } else {\n                            out.value(primitive.getAsString());\n                        }\n                    } else if (value.isJsonArray()) {\n                        out.beginArray();\n                        for (com.google.gson.JsonElement com.google.gson.JsonElement : value.getAsJsonArray()) {\n                            write(out, e);\n                        }\n                        out.endArray();\n                    } else if (value.isJsonObject()) {\n                        out.beginObject();\n                        for (java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> : value.getAsJsonObject().entrySet()) {\n                            out.name(e.getKey());\n                            write(out, e.getValue());\n                        }\n                        out.endObject();\n                    } else {\n                        throw new java.lang.IllegalArgumentException((\"Couldn't write \" + (value.getClass())));\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"28957b02-3f05-11e6-9243-6795ed1962b3","method":{"position":"com.google.gson.Gson:591","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            if (src == null) {\n                {\n                    if (src != null) {\n                        {\n                            com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = getAdapter(com.google.gson.reflect.TypeToken.get(typeOfSrc));\n                            boolean boolean = writer.isLenient();\n                            writer.setLenient(true);\n                            boolean boolean = writer.isHtmlSafe();\n                            writer.setHtmlSafe(boolean);\n                            boolean boolean = writer.getSerializeNulls();\n                            writer.setSerializeNulls(boolean);\n                            try {\n                                ((com.google.gson.TypeAdapter<java.lang.Object>)(adapter)).write(writer, src);\n                            } catch (java.io.IOException e) {\n                                throw new com.google.gson.JsonIOException(e);\n                            } finally {\n                                writer.setLenient(oldLenient);\n                                writer.setHtmlSafe(oldHtmlSafe);\n                                writer.setSerializeNulls(oldSerializeNulls);\n                            }\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new com.google.gson.JsonIOException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.DateTypeAdapter:86","type":"CtBinaryOperatorImpl"},"failures":[8,110,111,112,97],"tindex":"28957b03-3f05-11e6-9243-d1c344122a0f","method":{"position":"com.google.gson.internal.bind.DateTypeAdapter:85","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized void write(com.google.gson.stream.JsonWriter out, java.util.Date value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            java.lang.String java.lang.String = java.text.DateFormat.format(value);\n            out.value(dateFormatAsString);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:497","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"28957b04-3f05-11e6-9243-a76ba9363533","method":{"position":"com.google.gson.TreeTypeAdapter:103","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newTypeHierarchyFactory(java.lang.Class<?> hierarchyType, java.lang.Object typeAdapter) {\n    if ((typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)) {\n        {\n            if ((typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)) {\n                {\n                    return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , null , false , hierarchyType);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:250","type":"CtVariableReadImpl"},"failures":[113,114,115,116,117,118,119],"tindex":"2895a215-3f05-11e6-9243-413e0cb154df","method":{"position":"com.google.gson.Gson:249","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> doubleAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                {\n                    if (serializeSpecialFloatingPointValues) {\n                        {\n                            if (serializeSpecialFloatingPointValues) {\n                                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                throw new java.lang.RuntimeException();\n                            } else {\n                                {\n                                    if (serializeSpecialFloatingPointValues) {\n                                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                        throw new java.lang.RuntimeException();\n                                    } else {\n                                        {\n                                            if (serializeSpecialFloatingPointValues) {\n                                                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                                throw new java.lang.RuntimeException();\n                                            } else {\n                                                {\n                                                    if (serializeSpecialFloatingPointValues) {\n                                                        return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n                                                    } \n                                                    return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                                                        @java.lang.Override\n                                                        public java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                                                            if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                                                                in.nextNull();\n                                                                return null;\n                                                            } \n                                                            return in.nextDouble();\n                                                        }\n\n                                                        @java.lang.Override\n                                                        public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                                                            if (value == null) {\n                                                                out.nullValue();\n                                                                return ;\n                                                            } \n                                                            double double = value.doubleValue();\n                                                            checkValidFloatingPoint(doubleValue);\n                                                            out.value(value);\n                                                        }\n                                                    };\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"2895c926-3f05-11e6-9243-174b6fb95f65","method":{"position":"com.google.gson.Gson:576","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            if (src == null) {\n                {\n                    if (src == null) {\n                        {\n                            try {\n                                com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                                toJson(src, typeOfSrc, jsonWriter);\n                            } catch (java.io.IOException e) {\n                                throw new com.google.gson.JsonIOException(e);\n                            }\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new com.google.gson.JsonIOException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[32],"tindex":"2895c927-3f05-11e6-9243-6f4db0d78c9e","method":{"position":"com.google.gson.Gson:285","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (value == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.io.IOException();\n                    } else {\n                        {\n                            if (value == null) {\n                                out.nullValue();\n                                return ;\n                            } \n                            float float = value.floatValue();\n                            checkValidFloatingPoint(floatValue);\n                            out.value(value);\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl"},"failures":[120,121,23,122,25,123,29,124],"tindex":"2895f038-3f05-11e6-9243-a350d3d72200","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:144","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"2895f039-3f05-11e6-9243-e9cb8f7b68af","method":{"position":"com.google.gson.Gson:591","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            if (src == null) {\n                {\n                    if (src != null) {\n                        {\n                            com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = getAdapter(com.google.gson.reflect.TypeToken.get(typeOfSrc));\n                            boolean boolean = writer.isLenient();\n                            writer.setLenient(true);\n                            boolean boolean = writer.isHtmlSafe();\n                            writer.setHtmlSafe(boolean);\n                            boolean boolean = writer.getSerializeNulls();\n                            writer.setSerializeNulls(boolean);\n                            try {\n                                ((com.google.gson.TypeAdapter<java.lang.Object>)(adapter)).write(writer, src);\n                            } catch (java.io.IOException e) {\n                                throw new com.google.gson.JsonIOException(e);\n                            } finally {\n                                writer.setLenient(oldLenient);\n                                writer.setHtmlSafe(oldHtmlSafe);\n                                writer.setSerializeNulls(oldSerializeNulls);\n                            }\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new com.google.gson.JsonIOException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:105","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"2895f03a-3f05-11e6-9243-effab2d4c4b2","method":{"position":"com.google.gson.internal.$Gson$Types:213","type":"CtMethodImpl","sourcecode":"private static int hashCodeOrZero(java.lang.Object o) {\n    return o != null ? o.hashCode() : 0;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:250","type":"CtVariableReadImpl"},"failures":[],"tindex":"2896174b-3f05-11e6-9243-9b4bbf75f66e","method":{"position":"com.google.gson.Gson:249","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> doubleAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                {\n                    if (serializeSpecialFloatingPointValues) {\n                        {\n                            if (serializeSpecialFloatingPointValues) {\n                                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                throw new java.lang.RuntimeException();\n                            } else {\n                                {\n                                    if (serializeSpecialFloatingPointValues) {\n                                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                        throw new java.lang.RuntimeException();\n                                    } else {\n                                        {\n                                            if (serializeSpecialFloatingPointValues) {\n                                                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                                throw new java.lang.RuntimeException();\n                                            } else {\n                                                {\n                                                    if (serializeSpecialFloatingPointValues) {\n                                                        return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n                                                    } \n                                                    return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                                                        @java.lang.Override\n                                                        public java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                                                            if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                                                                in.nextNull();\n                                                                return null;\n                                                            } \n                                                            return in.nextDouble();\n                                                        }\n\n                                                        @java.lang.Override\n                                                        public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                                                            if (value == null) {\n                                                                out.nullValue();\n                                                                return ;\n                                                            } \n                                                            double double = value.doubleValue();\n                                                            checkValidFloatingPoint(doubleValue);\n                                                            out.value(value);\n                                                        }\n                                                    };\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"2896174c-3f05-11e6-9243-67bb6e62fd0d","method":{"position":"com.google.gson.Gson:591","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            if (src == null) {\n                {\n                    if (src != null) {\n                        {\n                            com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = getAdapter(com.google.gson.reflect.TypeToken.get(typeOfSrc));\n                            boolean boolean = writer.isLenient();\n                            writer.setLenient(true);\n                            boolean boolean = writer.isHtmlSafe();\n                            writer.setHtmlSafe(boolean);\n                            boolean boolean = writer.getSerializeNulls();\n                            writer.setSerializeNulls(boolean);\n                            try {\n                                ((com.google.gson.TypeAdapter<java.lang.Object>)(adapter)).write(writer, src);\n                            } catch (java.io.IOException e) {\n                                throw new com.google.gson.JsonIOException(e);\n                            } finally {\n                                writer.setLenient(oldLenient);\n                                writer.setHtmlSafe(oldHtmlSafe);\n                                writer.setSerializeNulls(oldSerializeNulls);\n                            }\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new com.google.gson.JsonIOException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:298","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"28963e5d-3f05-11e6-9243-b9314e3cebbb","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:162","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(double value) throws java.io.IOException {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        {\n            if ((!(isLenient())) && ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value)))) {\n                throw new java.lang.IllegalArgumentException((\"JSON forbids NaN and infinities: \" + value));\n            } \n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:188","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"28963e5e-3f05-11e6-9243-2771d8870123","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:223","type":"CtMethodImpl","sourcecode":"private boolean equal(java.lang.Object a, java.lang.Object b) {\n    if (a instanceof java.lang.reflect.ParameterizedType) {\n        {\n            if (a instanceof java.lang.reflect.WildcardType) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return (a == b) || ((a != null) && (a.equals(b)));\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:455","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"2896656f-3f05-11e6-9243-f58af6444d0f","method":{"position":"com.google.gson.TreeTypeAdapter:92","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newFactoryWithMatchRawType(com.google.gson.reflect.TypeToken<?> exactType, java.lang.Object typeAdapter) {\n    if ((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) {\n        {\n            boolean boolean = (exactType.getType()) == (exactType.getRawType());\n            return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , exactType , matchRawType , null);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:103","type":"CtBinaryOperatorImpl"},"failures":[125,1,126,127,128,129,130,131,25,132,133,134,135,136,137,138,139,140,141,142,143,74,75,76,77,78],"tindex":"28966570-3f05-11e6-9243-a9ad758793fa","method":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:74","type":"CtMethodImpl","sourcecode":"private java.lang.reflect.Type getRuntimeTypeIfMoreSpecific(java.lang.reflect.Type type, java.lang.Object value) {\n    if (value instanceof java.lang.Class) {\n        {\n            if (type instanceof java.lang.reflect.GenericArrayType) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if ((value != null) && (((type == (java.lang.Object.java.lang.Object.java.lang.Class)) || (type instanceof java.lang.reflect.TypeVariable<?>)) || (type instanceof java.lang.Class<?>))) {\n                        type = value.getClass();\n                    } \n                    return type;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:726","type":"CtBinaryOperatorImpl"},"failures":[144,145,146,147,148,149,150,151,152],"tindex":"28966571-3f05-11e6-9243-b3601af9e308","method":{"position":"com.google.gson.stream.JsonWriter:476","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(long value) throws java.io.IOException {\n    if (value == 0) {\n        {\n            writeDeferredName();\n            beforeValue(false);\n            java.io.Writer.write(java.lang.Long.toString(value));\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:92","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"28968c82-3f05-11e6-9243-053809422730","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:512","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"rawtypes\")\n@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof java.util.Iterator) {\n        {\n            if (o instanceof com.google.gson.JsonNull) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (o instanceof java.util.Map.Entry) {\n                        java.util.Map.Entry java.util.Map.Entry = ((java.util.Map.Entry)(o));\n                        return ((K) == null ? (other.getKey()) == null : K.equals(other.getKey())) && ((V) == null ? (other.getValue()) == null : V.equals(other.getValue()));\n                    } \n                    return false;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"28968c83-3f05-11e6-9243-71b72729f7a7","method":{"position":"com.google.gson.Gson:261","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            double double = value.doubleValue();\n            checkValidFloatingPoint(doubleValue);\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:122","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"28968c84-3f05-11e6-9243-671239439e2a","method":{"position":"com.google.gson.internal.$Gson$Types:217","type":"CtMethodImpl","sourcecode":"public static java.lang.String typeToString(java.lang.reflect.Type type) {\n    return type instanceof java.lang.Class ? ((java.lang.Class<?>)(type)).getName() : type.toString();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:79","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"2896b395-3f05-11e6-9243-51b4fce2dd6a","method":{"position":"com.google.gson.Gson:847","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(com.google.gson.JsonElement json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n        {\n            if (!(json instanceof com.google.gson.JsonPrimitive)) {\n                {\n                    java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n                    return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"2896b396-3f05-11e6-9243-f3204ab48287","method":{"position":"com.google.gson.Gson:552","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            if (src != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            } else {\n                {\n                    if (src != null) {\n                        toJson(src, src.getClass(), writer);\n                    } else {\n                        toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull, writer);\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:136","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"2896b397-3f05-11e6-9243-01ada105e687","method":{"position":"com.google.gson.internal.ConstructorConstructor:128","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nprivate <T>com.google.gson.internal.ObjectConstructor<T> newDefaultImplementationConstructor(final java.lang.reflect.Type type, java.lang.Class<? super T> rawType) {\n    if (type instanceof java.lang.reflect.GenericArrayType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (java.util.Collection.java.util.Collection.java.lang.Class.isAssignableFrom(rawType)) {\n                if (java.util.SortedSet.java.util.SortedSet.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.TreeSet<java.lang.Object>()));\n                        }\n                    };\n                } else if (java.util.EnumSet.java.util.EnumSet.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        @java.lang.SuppressWarnings(value = \"rawtypes\")\n                        public T construct() {\n                            if (type instanceof java.lang.reflect.ParameterizedType) {\n                                java.lang.reflect.Type java.lang.reflect.Type = ((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0];\n                                if (elementType instanceof java.lang.Class) {\n                                    return ((T)(java.util.EnumSet.noneOf(((java.lang.Class)(elementType)))));\n                                } else {\n                                    throw new com.google.gson.JsonIOException((\"Invalid EnumSet type: \" + (type.toString())));\n                                }\n                            } else {\n                                throw new com.google.gson.JsonIOException((\"Invalid EnumSet type: \" + (type.toString())));\n                            }\n                        }\n                    };\n                } else if (java.util.Set.java.util.Set.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedHashSet<java.lang.Object>()));\n                        }\n                    };\n                } else if (java.util.Queue.java.util.Queue.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedList<java.lang.Object>()));\n                        }\n                    };\n                } else {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.ArrayList<java.lang.Object>()));\n                        }\n                    };\n                }\n            } \n            if (java.util.Map.java.util.Map.java.lang.Class.isAssignableFrom(rawType)) {\n                if (java.util.SortedMap.java.util.SortedMap.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.TreeMap<java.lang.Object, java.lang.Object>()));\n                        }\n                    };\n                } else if ((type instanceof java.lang.reflect.ParameterizedType) && (!(java.lang.String.java.lang.String.java.lang.Class.isAssignableFrom(com.google.gson.reflect.TypeToken.get(((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0]).getRawType())))) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedHashMap<java.lang.Object, java.lang.Object>()));\n                        }\n                    };\n                } else {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new com.google.gson.internal.LinkedTreeMap<java.lang.String, java.lang.Object>()));\n                        }\n                    };\n                }\n            } \n            return null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:127","type":"CtInvocationImpl"},"failures":[13,16,19,21],"tindex":"2896daa8-3f05-11e6-9243-c56a8fed1b67","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:125","type":"CtMethodImpl","sourcecode":"private java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> getBoundFields(com.google.gson.Gson context, com.google.gson.reflect.TypeToken<?> type, java.lang.Class<?> raw) {\n    if (raw.isInterface()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> = new java.util.LinkedHashMap<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField>();\n            if (raw.isInterface()) {\n                return result;\n            } \n            java.lang.reflect.Type java.lang.reflect.Type = type.getType();\n            while (raw != (java.lang.Object.java.lang.Object.java.lang.Class)) {\n                java.lang.reflect.Field[] java.lang.reflect.Field[] = raw.getDeclaredFields();\n                for (java.lang.reflect.Field java.lang.reflect.Field : fields) {\n                    boolean boolean = excludeField(field, true);\n                    boolean boolean = excludeField(field, false);\n                    if ((!serialize) && (!deserialize)) {\n                        continue;\n                    } \n                    field.setAccessible(true);\n                    java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, field.getGenericType());\n                    com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = createBoundField(context, field, getFieldName(field), com.google.gson.reflect.TypeToken.get(fieldType), serialize, deserialize);\n                    com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = result.put(boundField.java.lang.String, boundField);\n                    if (previous != null) {\n                        throw new java.lang.IllegalArgumentException(((declaredType + \" declares multiple JSON fields named \") + (previous.java.lang.String)));\n                    } \n                }\n                type = com.google.gson.reflect.TypeToken.get(com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, raw.getGenericSuperclass()));\n                raw = type.getRawType();\n            }\n            return result;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"raw"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl"},"failures":[153],"tindex":"289701b9-3f05-11e6-9243-1bd37ad23d2d","method":{"position":"com.google.gson.JsonObject:53","type":"CtMethodImpl","sourcecode":"public void add(java.lang.String property, com.google.gson.JsonElement value) {\n    if (property == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (value == null) {\n                value = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.put(property, value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:378","type":"CtVariableReadImpl"},"failures":[],"tindex":"289728ca-3f05-11e6-9243-f5486356a63e","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:338","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (insert) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (insert) {\n                {\n                    for (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) {\n                        com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                        com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                        int int = left != null ? left.int : 0;\n                        int int = right != null ? right.int : 0;\n                        int int = leftHeight - rightHeight;\n                        if (delta == (-2)) {\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            int int = rightRight != null ? rightRight.int : 0;\n                            int int = rightLeft != null ? rightLeft.int : 0;\n                            int int = rightLeftHeight - rightRightHeight;\n                            if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                                rotateLeft(node);\n                            } else {\n                                assert rightDelta == 1;\n                                rotateRight(right);\n                                rotateLeft(node);\n                            }\n                            if (insert) {\n                                break;\n                            } \n                        } else if (delta == 2) {\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            int int = leftRight != null ? leftRight.int : 0;\n                            int int = leftLeft != null ? leftLeft.int : 0;\n                            int int = leftLeftHeight - leftRightHeight;\n                            if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                                rotateRight(node);\n                            } else {\n                                assert leftDelta == (-1);\n                                rotateLeft(left);\n                                rotateRight(node);\n                            }\n                            if (insert) {\n                                break;\n                            } \n                        } else if (delta == 0) {\n                            node.int = leftHeight + 1;\n                            if (insert) {\n                                break;\n                            } \n                        } else {\n                            assert (delta == (-1)) || (delta == 1);\n                            node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                            if (!insert) {\n                                break;\n                            } \n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"insert"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:554","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"28974fdb-3f05-11e6-9243-1353e68e485b","method":{"position":"com.google.gson.GsonBuilder:551","type":"CtMethodImpl","sourcecode":"private void addTypeAdaptersForDate(java.lang.String datePattern, int dateStyle, int timeStyle, java.util.List<com.google.gson.TypeAdapterFactory> factories) {\n    if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    com.google.gson.DefaultDateTypeAdapter com.google.gson.DefaultDateTypeAdapter;\n                    if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n                        dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(datePattern);\n                    } else if ((dateStyle != (java.text.DateFormat.java.text.DateFormat.int)) && (timeStyle != (java.text.DateFormat.java.text.DateFormat.int))) {\n                        dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(dateStyle , timeStyle);\n                    } else {\n                        return ;\n                    }\n                    factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.util.Date.java.util.Date.java.lang.Class), dateTypeAdapter));\n                    factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Timestamp.java.sql.Timestamp.java.lang.Class), dateTypeAdapter));\n                    factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Date.java.sql.Date.java.lang.Class), dateTypeAdapter));\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"datePattern":"datePattern"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.TreeTypeAdapter:55","type":"CtInvocationImpl"},"failures":[],"tindex":"289776ec-3f05-11e6-9243-77373afe3c88","method":{"position":"com.google.gson.internal.bind.TypeAdapters:680","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, com.google.gson.JsonElement value) throws java.io.IOException {\n    if (value.isJsonNull()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if ((value == null) || (value.isJsonNull())) {\n                        out.nullValue();\n                    } else if (value.isJsonPrimitive()) {\n                        com.google.gson.JsonPrimitive com.google.gson.JsonPrimitive = value.getAsJsonPrimitive();\n                        if (primitive.isNumber()) {\n                            out.value(primitive.getAsNumber());\n                        } else if (primitive.isBoolean()) {\n                            out.value(primitive.getAsBoolean());\n                        } else {\n                            out.value(primitive.getAsString());\n                        }\n                    } else if (value.isJsonArray()) {\n                        out.beginArray();\n                        for (com.google.gson.JsonElement com.google.gson.JsonElement : value.getAsJsonArray()) {\n                            write(out, e);\n                        }\n                        out.endArray();\n                    } else if (value.isJsonObject()) {\n                        out.beginObject();\n                        for (java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> : value.getAsJsonObject().entrySet()) {\n                            out.name(e.getKey());\n                            write(out, e.getValue());\n                        }\n                        out.endObject();\n                    } else {\n                        throw new java.lang.IllegalArgumentException((\"Couldn't write \" + (value.getClass())));\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl"},"failures":[154],"tindex":"289776ed-3f05-11e6-9243-a3f2bf038779","method":{"position":"com.google.gson.JsonObject:100","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Boolean value) {\n    if (property == null) {\n        {\n            add(property, createJsonElement(value));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:213","type":"CtBinaryOperatorImpl"},"failures":[155,156,157,158,159,160,125,161,162,163,164,86,165],"tindex":"289776ee-3f05-11e6-9243-fd33149454ab","method":{"position":"com.google.gson.stream.JsonWriter:212","type":"CtMethodImpl","sourcecode":"public final void setIndent(java.lang.String indent) {\n    if ((indent.length()) == 0) {\n        {\n            if ((indent.length()) == 0) {\n                com.google.gson.stream.JsonWriter.this.java.lang.String = null;\n                com.google.gson.stream.JsonWriter.this.java.lang.String = \":\";\n            } else {\n                com.google.gson.stream.JsonWriter.this.java.lang.String = indent;\n                com.google.gson.stream.JsonWriter.this.java.lang.String = \": \";\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"indent"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:122","type":"CtBinaryOperatorImpl"},"failures":[166,167,53,54],"tindex":"28979dff-3f05-11e6-9243-9df6f8d16042","method":{"position":"com.google.gson.internal.Primitives:79","type":"CtMethodImpl","sourcecode":"public static boolean isWrapperType(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.ParameterizedType) {\n        {\n            return com.google.gson.internal.Primitives.com.google.gson.internal.Primitives.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.containsKey(com.google.gson.internal.$Gson$Preconditions.checkNotNull(type));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"28979e00-3f05-11e6-9243-fb9ef02cd797","method":{"position":"com.google.gson.Gson:552","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            if (src != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            } else {\n                {\n                    if (src != null) {\n                        toJson(src, src.getClass(), writer);\n                    } else {\n                        toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull, writer);\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:107","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"28979e01-3f05-11e6-9243-572f874f3d92","method":{"position":"com.google.gson.internal.LinkedTreeMap:605","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonArray) {\n        {\n            return containsKey(o);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"2897c512-3f05-11e6-9243-4db4c71b9e4e","method":{"position":"com.google.gson.Gson:285","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (value == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.io.IOException();\n                    } else {\n                        {\n                            if (value == null) {\n                                out.nullValue();\n                                return ;\n                            } \n                            float float = value.floatValue();\n                            checkValidFloatingPoint(floatValue);\n                            out.value(value);\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:94","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"2897c513-3f05-11e6-9243-67dce1f7ea0d","method":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:74","type":"CtMethodImpl","sourcecode":"private java.lang.reflect.Type getRuntimeTypeIfMoreSpecific(java.lang.reflect.Type type, java.lang.Object value) {\n    if (value instanceof java.lang.Class) {\n        {\n            if (type instanceof java.lang.reflect.GenericArrayType) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if ((value != null) && (((type == (java.lang.Object.java.lang.Object.java.lang.Class)) || (type instanceof java.lang.reflect.TypeVariable<?>)) || (type instanceof java.lang.Class<?>))) {\n                        type = value.getClass();\n                    } \n                    return type;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:92","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"2897c514-3f05-11e6-9243-051c1314ba35","method":{"position":"com.google.gson.internal.LinkedTreeMap:570","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof java.util.Iterator) {\n        {\n            return (o instanceof java.util.Map.Entry) && ((findByEntry(((java.util.Map.Entry<?, ?>)(o)))) != null);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:167","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"2897ec25-3f05-11e6-9243-db9480779dec","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:223","type":"CtMethodImpl","sourcecode":"private boolean equal(java.lang.Object a, java.lang.Object b) {\n    if (a instanceof java.lang.reflect.ParameterizedType) {\n        {\n            if (a instanceof java.lang.reflect.WildcardType) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return (a == b) || ((a != null) && (a.equals(b)));\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl"},"failures":[168,169,0,170,171,172,173,174,155,175,176,177,147,178,148,156,157,179,180,159,160,125,164,181,126,182,127,183,184,6,128,129,130,185,186,187,7,8,188,189,190,191,192,193,194,195,196,197,198,199,11,12,15,16,17,18,200,201,202,131,203,204,19,20,22,86,205,24,206,28,207,208,150,34,151,209,210,35,211,212,132,213,36,37,38,39,42,43,44,46,47,48,214,215,133,134,135,216,217,218,136,137,219,138,139,140,220,221,141,142,143,53,54,222,55,223,224,225,226,227,228,229,230,231,232,233,56,234,235,236,57,237,238,239,59,240,241,242,243,244,245,246,247,248,249,61,250,251,252,253,254,255,62,63,64,65,256,257,258,165,259,260,261,262,263,264,265,266,267,268,269,270,271,272,67,273,274,124,68,69,70,71,73,74,75,76,77,78,275,276,277,94],"tindex":"2897ec26-3f05-11e6-9243-f3bced71a8aa","method":{"position":"com.google.gson.stream.JsonWriter:385","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter name(java.lang.String name) throws java.io.IOException {\n    if (name == null) {\n        {\n            if (name == null) {\n                throw new java.lang.NullPointerException(\"name == null\");\n            } \n            if ((java.lang.String) != null) {\n                throw new java.lang.IllegalStateException();\n            } \n            if ((int) == 0) {\n                throw new java.lang.IllegalStateException(\"JsonWriter is closed.\");\n            } \n            java.lang.String = name;\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:298","type":"CtBinaryOperatorImpl"},"failures":[11,12,15,278,279,22,24,221,280,227,228,229,281,230,231,232,282],"tindex":"28981337-3f05-11e6-9243-3982f537e5f7","method":{"position":"com.google.gson.Gson:297","type":"CtMethodImpl","sourcecode":"private void checkValidFloatingPoint(double value) {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                {\n                    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                        throw new java.lang.IllegalArgumentException(((value + \" is not a valid double value as per JSON specification. To override this\") + \" behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.\"));\n                    } \n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:199","type":"CtBinaryOperatorImpl"},"failures":[283,284,285],"tindex":"28981338-3f05-11e6-9243-ad00de508d74","method":{"position":"com.google.gson.reflect.TypeToken:185","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.ParameterizedType to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeVarMap) {\n    if (from instanceof java.lang.reflect.ParameterizedType) {\n        {\n            if (from == null) {\n                return false;\n            } \n            if (to.equals(from)) {\n                return true;\n            } \n            java.lang.Class<?> java.lang.Class<?> = com.google.gson.internal.$Gson$Types.getRawType(from);\n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = null;\n            if (from instanceof java.lang.reflect.ParameterizedType) {\n                ptype = ((java.lang.reflect.ParameterizedType)(from));\n            } \n            if (ptype != null) {\n                java.lang.reflect.Type[] java.lang.reflect.Type[] = ptype.getActualTypeArguments();\n                java.lang.reflect.TypeVariable<?>[] java.lang.reflect.TypeVariable<?>[] = clazz.getTypeParameters();\n                for (int int = 0 ; i < (tArgs.int) ; i++) {\n                    java.lang.reflect.Type java.lang.reflect.Type = tArgs[i];\n                    java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = tParams[i];\n                    while (arg instanceof java.lang.reflect.TypeVariable<?>) {\n                        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(arg));\n                        arg = typeVarMap.get(v.getName());\n                    }\n                    typeVarMap.put(var.getName(), arg);\n                }\n                if (com.google.gson.reflect.TypeToken.typeEquals(ptype, to, typeVarMap)) {\n                    return true;\n                } \n            } \n            for (java.lang.reflect.Type java.lang.reflect.Type : clazz.getGenericInterfaces()) {\n                if (com.google.gson.reflect.TypeToken.isAssignableFrom(itype, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap))) {\n                    return true;\n                } \n            }\n            java.lang.reflect.Type java.lang.reflect.Type = clazz.getGenericSuperclass();\n            return com.google.gson.reflect.TypeToken.isAssignableFrom(sType, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:103","type":"CtBinaryOperatorImpl"},"failures":[168,169,286,0,170,287,144,145,174,288,155,289,113,290,291,292,293,294,158,159,160,125,161,162,163,164,295,181,296,297,298,299,1,2,104,3,4,126,182,300,301,127,302,303,183,304,305,184,5,306,6,307,128,308,309,310,85,129,311,130,185,312,313,186,314,315,316,187,317,7,8,318,188,319,320,321,322,323,189,190,324,191,325,192,193,194,195,326,327,196,328,329,197,330,331,332,333,198,334,199,335,9,336,10,337,338,339,11,340,12,13,341,14,15,16,17,18,342,200,343,344,201,202,131,19,20,345,346,347,348,349,350,351,352,353,354,355,21,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,114,393,394,395,396,397,398,399,400,401,402,278,403,115,116,404,405,406,407,408,409,410,411,412,413,414,415,416,117,417,418,419,420,421,422,423,118,424,425,426,427,428,119,279,429,430,431,432,433,22,120,434,86,87,121,23,122,205,24,206,25,123,26,27,28,207,29,95,435,79,436,437,30,31,438,439,440,441,442,80,443,81,444,445,446,208,96,32,447,110,149,111,112,448,33,449,450,451,452,453,150,454,34,455,151,152,456,457,458,459,460,461,462,209,463,82,464,465,210,83,466,97,467,35,468,469,84,106,470,471,472,211,473,212,474,475,476,132,213,477,478,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,214,479,215,51,52,133,480,481,482,483,484,134,135,485,216,217,218,107,486,136,487,137,488,219,138,139,140,220,221,166,141,142,143,167,53,489,490,54,222,491,492,493,55,494,495,496,497,89,498,499,500,223,501,502,503,504,505,506,507,508,509,510,511,512,224,513,514,225,226,56,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,282,531,234,532,533,534,535,536,537,538,235,539,540,236,541,542,543,544,545,90,91,92,57,546,237,547,548,549,550,551,552,553,554,238,555,556,557,558,58,239,559,560,59,561,562,563,564,240,241,242,243,244,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,245,586,587,246,588,589,247,248,590,591,249,592,593,60,594,595,596,597,61,250,251,598,252,253,599,600,254,601,602,93,255,62,603,63,64,65,604,605,606,256,607,608,609,257,610,611,612,613,614,258,165,615,616,259,617,260,618,261,619,620,621,622,262,263,264,623,66,265,266,624,267,268,269,270,271,272,625,67,626,627,273,628,629,274,124,68,69,70,71,72,73,74,75,76,77,78,277,630,631,632,633,634,635,283,284,285,636,637,638,639,94,640,641,642,643],"tindex":"28983a49-3f05-11e6-9243-83201188bb16","method":{"position":"com.google.gson.reflect.TypeToken:295","type":"CtMethodImpl","sourcecode":"public static com.google.gson.reflect.TypeToken<?> get(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.GenericArrayType) {\n        {\n            return new com.google.gson.reflect.TypeToken<java.lang.Object>(type);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:363","type":"CtUnaryOperatorImpl"},"failures":[644,645,646,171,172,647,648,649,650,651,652,193,327,331,334,335,9,200,201,202,203,204,433,22,120,434,86,23,122,25,123,29,437,208,40,41,505,506,507,508,509,653,654,56,562,595,254,256,618,621,623,627,655,153,656,657,277,637],"tindex":"2898886a-3f05-11e6-9243-ff3fa9c0e3b5","method":{"position":"com.google.gson.internal.LinkedTreeMap:310","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (!insert) {\n        {\n            for (com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>) {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                int int = left != null ? left.int : 0;\n                int int = right != null ? right.int : 0;\n                int int = leftHeight - rightHeight;\n                if (delta == (-2)) {\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    int int = rightRight != null ? rightRight.int : 0;\n                    int int = rightLeft != null ? rightLeft.int : 0;\n                    int int = rightLeftHeight - rightRightHeight;\n                    if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                        rotateLeft(node);\n                    } else {\n                        assert rightDelta == 1;\n                        rotateRight(right);\n                        rotateLeft(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 2) {\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    int int = leftRight != null ? leftRight.int : 0;\n                    int int = leftLeft != null ? leftLeft.int : 0;\n                    int int = leftLeftHeight - leftRightHeight;\n                    if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                        rotateRight(node);\n                    } else {\n                        assert leftDelta == (-1);\n                        rotateLeft(left);\n                        rotateRight(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 0) {\n                    node.int = leftHeight + 1;\n                    if (insert) {\n                        break;\n                    } \n                } else {\n                    assert (delta == (-1)) || (delta == 1);\n                    node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                    if (!insert) {\n                        break;\n                    } \n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"insert"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:497","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"2898af7b-3f05-11e6-9243-bb8867a3b2c8","method":{"position":"com.google.gson.TreeTypeAdapter:103","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newTypeHierarchyFactory(java.lang.Class<?> hierarchyType, java.lang.Object typeAdapter) {\n    if ((typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)) {\n        {\n            if ((typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)) {\n                {\n                    return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , null , false , hierarchyType);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:198","type":"CtBinaryOperatorImpl"},"failures":[133,134,135,136,137,139,140,142,143],"tindex":"2898d68c-3f05-11e6-9243-975e6e156bd3","method":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:84","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Object array) throws java.io.IOException {\n    if (array == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (array == null) {\n                out.nullValue();\n                return ;\n            } \n            out.beginArray();\n            for (int int = 0, int int = java.lang.reflect.Array.getLength(array) ; i < length ; i++) {\n                E E = ((E)(java.lang.reflect.Array.get(array, i)));\n                com.google.gson.TypeAdapter<E>.write(out, value);\n            }\n            out.endArray();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl"},"failures":[1,2,104,3,4,327,433,22,120,434,86,121,23,122,25,123,29,474,40,41,219,124,630,631,632],"tindex":"2898d68d-3f05-11e6-9243-4b787581e01f","method":{"position":"com.google.gson.Gson:491","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        {\n            com.google.gson.internal.bind.JsonTreeWriter com.google.gson.internal.bind.JsonTreeWriter = new com.google.gson.internal.bind.JsonTreeWriter();\n            toJson(src, typeOfSrc, writer);\n            return writer.get();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[32],"tindex":"2898d68e-3f05-11e6-9243-2da28a07f73e","method":{"position":"com.google.gson.internal.bind.TypeAdapters:201","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:199","type":"CtBinaryOperatorImpl"},"failures":[658],"tindex":"2898fd9f-3f05-11e6-9243-ddc1e3185acc","method":{"position":"com.google.gson.reflect.TypeToken:122","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic boolean isAssignableFrom(java.lang.reflect.Type from) {\n    if (from instanceof java.lang.reflect.ParameterizedType) {\n        {\n            if (from == null) {\n                return false;\n            } \n            if (java.lang.reflect.Type.equals(from)) {\n                return true;\n            } \n            if ((java.lang.reflect.Type) instanceof java.lang.Class<?>) {\n                return java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from));\n            } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.ParameterizedType) {\n                return com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n            } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.GenericArrayType) {\n                return (java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from))) && (com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.GenericArrayType)(java.lang.reflect.Type))));\n            } else {\n                throw com.google.gson.reflect.TypeToken.buildUnexpectedTypeError(java.lang.reflect.Type, java.lang.Class.java.lang.Class.java.lang.Class, java.lang.reflect.ParameterizedType.java.lang.reflect.ParameterizedType.java.lang.Class, java.lang.reflect.GenericArrayType.java.lang.reflect.GenericArrayType.java.lang.Class);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Preconditions:41","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"2898fda0-3f05-11e6-9243-0d05cfd5d003","method":{"position":"com.google.gson.internal.$Gson$Preconditions:40","type":"CtMethodImpl","sourcecode":"public static void checkArgument(boolean condition) {\n    if (!condition) {\n        throw new java.lang.IllegalArgumentException();\n    } \n}"},"series":0,"name":"addParameterCondition","variableMap":{"condition":"condition"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:163","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"2898fda1-3f05-11e6-9243-23a8ce24364e","method":{"position":"com.google.gson.internal.$Gson$Types:151","type":"CtMethodImpl","sourcecode":"static boolean equal(java.lang.Object a, java.lang.Object b) {\n    return (a == b) || ((a != null) && (a.equals(b)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.FieldNamingPolicy:155","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"2898fda2-3f05-11e6-9243-dfefe4ef39c7","method":{"position":"com.google.gson.FieldNamingPolicy:163","type":"CtMethodImpl","sourcecode":"private static java.lang.String modifyString(char firstCharacter, java.lang.String srcString, int indexOfSubstring) {\n    if (!(java.lang.Character.isUpperCase(firstCharacter))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return indexOfSubstring < (srcString.length()) ? firstCharacter + (srcString.substring(indexOfSubstring)) : java.lang.String.valueOf(firstCharacter);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"firstCharacter":"firstCharacter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:98","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"289924b3-3f05-11e6-9243-a9d5bde1ee7b","method":{"position":"com.google.gson.internal.Primitives:69","type":"CtMethodImpl","sourcecode":"public static boolean isPrimitive(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return com.google.gson.internal.Primitives.com.google.gson.internal.Primitives.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.containsKey(type);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:137","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"289924b4-3f05-11e6-9243-5994a5f7a8b6","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:86","type":"CtMethodImpl","sourcecode":"private com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField createBoundField(final com.google.gson.Gson context, final java.lang.reflect.Field field, final java.lang.String name, final com.google.gson.reflect.TypeToken<?> fieldType, boolean serialize, boolean deserialize) {\n    if ((!serialize) && (!deserialize)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final boolean boolean = com.google.gson.internal.Primitives.isPrimitive(fieldType.getRawType());\n            return new com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField(name, serialize, deserialize) {\n                final com.google.gson.TypeAdapter<?> typeAdapter = getFieldAdapter(context, field, fieldType);\n\n                @java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n                @java.lang.Override\n                void write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                    java.lang.Object java.lang.Object = field.get(value);\n                    com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n                    t.write(writer, fieldValue);\n                }\n\n                @java.lang.Override\n                void read(com.google.gson.stream.JsonReader reader, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                    java.lang.Object java.lang.Object = com.google.gson.TypeAdapter<?>.read(reader);\n                    if ((fieldValue != null) || (!isPrimitive)) {\n                        field.set(value, fieldValue);\n                    } \n                }\n\n                public boolean writeField(java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                    if (!(boolean))\n                        return false;\n                    \n                    java.lang.Object java.lang.Object = field.get(value);\n                    return fieldValue != value;\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serialize":"serialize","deserialize":"deserialize"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"28994bc5-3f05-11e6-9243-cdbed36d877c","method":{"position":"com.google.gson.Gson:285","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (value == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.io.IOException();\n                    } else {\n                        {\n                            if (value == null) {\n                                out.nullValue();\n                                return ;\n                            } \n                            float float = value.floatValue();\n                            checkValidFloatingPoint(floatValue);\n                            out.value(value);\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl"},"failures":[474,219],"tindex":"28994bc6-3f05-11e6-9243-132da2a93195","method":{"position":"com.google.gson.Gson:133","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src) {\n    if (src == null) {\n        {\n            return toJsonTree(src);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:103","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"28994bc7-3f05-11e6-9243-bd1ffd8284ac","method":{"position":"com.google.gson.internal.$Gson$Types:117","type":"CtMethodImpl","sourcecode":"public static java.lang.Class<?> getRawType(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class<?>) {\n        return ((java.lang.Class<?>)(type));\n    } else if (type instanceof java.lang.reflect.ParameterizedType) {\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(type));\n        java.lang.reflect.Type java.lang.reflect.Type = parameterizedType.getRawType();\n        com.google.gson.internal.$Gson$Preconditions.checkArgument((rawType instanceof java.lang.Class));\n        return ((java.lang.Class<?>)(rawType));\n    } else if (type instanceof java.lang.reflect.GenericArrayType) {\n        java.lang.reflect.Type java.lang.reflect.Type = ((java.lang.reflect.GenericArrayType)(type)).getGenericComponentType();\n        return java.lang.reflect.Array.newInstance(com.google.gson.internal.$Gson$Types.getRawType(componentType), 0).getClass();\n    } else if (type instanceof java.lang.reflect.TypeVariable) {\n        return java.lang.Object.java.lang.Object.java.lang.Class;\n    } else if (type instanceof java.lang.reflect.WildcardType) {\n        return com.google.gson.internal.$Gson$Types.getRawType(((java.lang.reflect.WildcardType)(type)).getUpperBounds()[0]);\n    } else {\n        java.lang.String java.lang.String = type == null ? \"null\" : type.getClass().getName();\n        throw new java.lang.IllegalArgumentException(((((\"Expected a Class, ParameterizedType, or \" + \"GenericArrayType, but <\") + type) + \"> is of type \") + className));\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:240","type":"CtInvocationImpl"},"failures":[],"tindex":"289972d8-3f05-11e6-9243-21d09c2706eb","method":{"position":"com.google.gson.reflect.TypeToken:272","type":"CtMethodImpl","sourcecode":"private static boolean matches(java.lang.reflect.Type from, java.lang.reflect.Type to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeMap) {\n    if (from.getRawType().equals(to.getRawType())) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (to.equals(from)) || ((from instanceof java.lang.reflect.TypeVariable) && (to.equals(typeMap.get(((java.lang.reflect.TypeVariable<?>)(from)).getName()))));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from","to":"to"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:578","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"289972d9-3f05-11e6-9243-911452511865","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:429","type":"CtMethodImpl","sourcecode":"private void rotateRight(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivotRight;\n            if (pivotRight != null) {\n                pivotRight.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            } \n            replaceInParent(root, pivot);\n            pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot;\n            root.int = (java.lang.Math.max((right != null ? right.int : 0), (pivotRight != null ? pivotRight.int : 0))) + 1;\n            pivot.int = (java.lang.Math.max(root.int, (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"289999ea-3f05-11e6-9243-1b5946b6ffd7","method":{"position":"com.google.gson.Gson:576","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            if (src == null) {\n                {\n                    if (src == null) {\n                        {\n                            try {\n                                com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                                toJson(src, typeOfSrc, jsonWriter);\n                            } catch (java.io.IOException e) {\n                                throw new com.google.gson.JsonIOException(e);\n                            }\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new com.google.gson.JsonIOException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"289999eb-3f05-11e6-9243-135a9f05bf87","method":{"position":"com.google.gson.Gson:576","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            if (src == null) {\n                {\n                    if (src == null) {\n                        {\n                            try {\n                                com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                                toJson(src, typeOfSrc, jsonWriter);\n                            } catch (java.io.IOException e) {\n                                throw new com.google.gson.JsonIOException(e);\n                            }\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new com.google.gson.JsonIOException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl"},"failures":[168,169,0,174,155,289,292,293,294,160,125,164,181,1,2,3,4,126,182,300,301,127,302,303,183,304,305,184,5,6,307,128,308,310,129,311,130,185,313,186,314,315,187,317,7,8,318,188,319,320,321,322,189,190,191,325,192,193,194,195,327,196,329,197,330,331,333,198,334,199,9,10,337,338,11,12,13,14,15,16,17,18,200,344,201,202,131,19,20,413,433,22,120,434,86,121,23,122,205,24,206,25,123,26,27,28,207,29,30,31,445,32,33,34,210,35,211,473,212,475,476,132,213,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,214,479,215,51,52,133,480,481,134,135,485,216,218,136,487,137,488,138,139,140,220,221,166,141,142,143,167,53,490,54,55,223,501,505,506,507,508,509,224,225,226,56,234,532,533,235,539,540,236,57,237,238,58,239,59,240,241,242,243,244,584,585,245,586,246,588,589,247,248,590,591,249,60,597,61,251,252,62,63,64,65,606,256,257,261,66,267,269,270,67,124,68,69,70,71,72,73,74,75,76,77,78,277,94],"tindex":"2899c0fc-3f05-11e6-9243-15937d2ee9e9","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:116","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<?> getFieldAdapter(com.google.gson.Gson gson, java.lang.reflect.Field field, com.google.gson.reflect.TypeToken<?> fieldType) {\n    if (field.isSynthetic()) {\n        {\n            com.google.gson.annotations.JsonAdapter com.google.gson.annotations.JsonAdapter = field.getAnnotation(com.google.gson.annotations.JsonAdapter.com.google.gson.annotations.JsonAdapter.java.lang.Class);\n            if (annotation != null) {\n                com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory.getTypeAdapter(com.google.gson.internal.ConstructorConstructor, gson, fieldType, annotation);\n                if (adapter != null)\n                    return adapter;\n                \n            } \n            return gson.getAdapter(fieldType);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"field"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"2899e80d-3f05-11e6-9243-5fd4e0b2b551","method":{"position":"com.google.gson.JsonObject:89","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Number value) {\n    if (value == null) {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    add(property, createJsonElement(value));\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:250","type":"CtVariableReadImpl"},"failures":[],"tindex":"2899e80e-3f05-11e6-9243-3bf750e9f74e","method":{"position":"com.google.gson.Gson:249","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> doubleAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                {\n                    if (serializeSpecialFloatingPointValues) {\n                        {\n                            if (serializeSpecialFloatingPointValues) {\n                                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                throw new java.lang.RuntimeException();\n                            } else {\n                                {\n                                    if (serializeSpecialFloatingPointValues) {\n                                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                        throw new java.lang.RuntimeException();\n                                    } else {\n                                        {\n                                            if (serializeSpecialFloatingPointValues) {\n                                                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                                throw new java.lang.RuntimeException();\n                                            } else {\n                                                {\n                                                    if (serializeSpecialFloatingPointValues) {\n                                                        return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n                                                    } \n                                                    return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                                                        @java.lang.Override\n                                                        public java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                                                            if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                                                                in.nextNull();\n                                                                return null;\n                                                            } \n                                                            return in.nextDouble();\n                                                        }\n\n                                                        @java.lang.Override\n                                                        public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                                                            if (value == null) {\n                                                                out.nullValue();\n                                                                return ;\n                                                            } \n                                                            double double = value.doubleValue();\n                                                            checkValidFloatingPoint(doubleValue);\n                                                            out.value(value);\n                                                        }\n                                                    };\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:578","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"289a0f1f-3f05-11e6-9243-b7a32b5d227c","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:401","type":"CtMethodImpl","sourcecode":"private void rotateLeft(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivotLeft;\n            if (pivotLeft != null) {\n                pivotLeft.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            } \n            replaceInParent(root, pivot);\n            pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot;\n            root.int = (java.lang.Math.max((left != null ? left.int : 0), (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n            pivot.int = (java.lang.Math.max(root.int, (pivotRight != null ? pivotRight.int : 0))) + 1;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"289a3630-3f05-11e6-9243-97be82c93239","method":{"position":"com.google.gson.DefaultDateTypeAdapter:77","type":"CtMethodImpl","sourcecode":"public java.util.Date deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT, com.google.gson.JsonDeserializationContext context) throws com.google.gson.JsonParseException {\n    if (json == null) {\n        {\n            if (!(json instanceof com.google.gson.JsonPrimitive)) {\n                throw new com.google.gson.JsonParseException(\"The date should be a string value\");\n            } \n            java.util.Date java.util.Date = deserializeToDate(json);\n            if (typeOfT == (java.util.Date.java.util.Date.java.lang.Class)) {\n                return date;\n            } else if (typeOfT == (java.sql.Timestamp.java.sql.Timestamp.java.lang.Class)) {\n                return new java.sql.Timestamp(date.getTime());\n            } else if (typeOfT == (java.sql.Date.java.sql.Date.java.lang.Class)) {\n                return new java.sql.Date(date.getTime());\n            } else {\n                throw new java.lang.IllegalArgumentException((((getClass()) + \" cannot deserialize to \") + typeOfT));\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"289a3631-3f05-11e6-9243-df212b3591f4","method":{"position":"com.google.gson.TypeAdapter:254","type":"CtMethodImpl","sourcecode":"public final T fromJson(java.io.Reader in) throws java.io.IOException {\n    if (in == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(in);\n            return read(reader);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:109","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"289a5d42-3f05-11e6-9243-a7ccf63aa370","method":{"position":"com.google.gson.internal.LinkedTreeMap:574","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonPrimitive) {\n        {\n            if (!(o instanceof java.util.Map.Entry)) {\n                return false;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n            if (node == null) {\n                return false;\n            } \n            removeInternal(node, true);\n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:250","type":"CtVariableReadImpl"},"failures":[],"tindex":"289a5d43-3f05-11e6-9243-f982ad6482f2","method":{"position":"com.google.gson.Gson:249","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> doubleAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                {\n                    if (serializeSpecialFloatingPointValues) {\n                        {\n                            if (serializeSpecialFloatingPointValues) {\n                                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                throw new java.lang.RuntimeException();\n                            } else {\n                                {\n                                    if (serializeSpecialFloatingPointValues) {\n                                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                        throw new java.lang.RuntimeException();\n                                    } else {\n                                        {\n                                            if (serializeSpecialFloatingPointValues) {\n                                                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                                throw new java.lang.RuntimeException();\n                                            } else {\n                                                {\n                                                    if (serializeSpecialFloatingPointValues) {\n                                                        return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n                                                    } \n                                                    return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                                                        @java.lang.Override\n                                                        public java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                                                            if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                                                                in.nextNull();\n                                                                return null;\n                                                            } \n                                                            return in.nextDouble();\n                                                        }\n\n                                                        @java.lang.Override\n                                                        public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                                                            if (value == null) {\n                                                                out.nullValue();\n                                                                return ;\n                                                            } \n                                                            double double = value.doubleValue();\n                                                            checkValidFloatingPoint(doubleValue);\n                                                            out.value(value);\n                                                        }\n                                                    };\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:232","type":"CtInvocationImpl"},"failures":[],"tindex":"289a8454-3f05-11e6-9243-0bd19c04742c","method":{"position":"com.google.gson.internal.$Gson$Types:322","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type resolve(java.lang.reflect.Type context, java.lang.Class<?> contextRawType, java.lang.reflect.Type toResolve) {\n    while (true) {\n        if (toResolve instanceof java.lang.reflect.TypeVariable) {\n            java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(toResolve));\n            toResolve = com.google.gson.internal.$Gson$Types.resolveTypeVariable(context, contextRawType, typeVariable);\n            if (toResolve == typeVariable) {\n                return toResolve;\n            } \n        } else if ((toResolve instanceof java.lang.Class) && (((java.lang.Class<?>)(toResolve)).isArray())) {\n            java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getComponentType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, componentType);\n            return componentType == newComponentType ? original : com.google.gson.internal.$Gson$Types.arrayOf(newComponentType);\n        } else if (toResolve instanceof java.lang.reflect.GenericArrayType) {\n            java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getGenericComponentType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, componentType);\n            return componentType == newComponentType ? original : com.google.gson.internal.$Gson$Types.arrayOf(newComponentType);\n        } else if (toResolve instanceof java.lang.reflect.ParameterizedType) {\n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getOwnerType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, ownerType);\n            boolean boolean = newOwnerType != ownerType;\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getActualTypeArguments();\n            for (int int = 0, int int = args.int ; t < length ; t++) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, args[t]);\n                if (resolvedTypeArgument != (args[t])) {\n                    if (!changed) {\n                        args = args.clone();\n                        changed = true;\n                    } \n                    args[t] = resolvedTypeArgument;\n                } \n            }\n            return changed ? com.google.gson.internal.$Gson$Types.newParameterizedTypeWithOwner(newOwnerType, original.getRawType(), args) : original;\n        } else if (toResolve instanceof java.lang.reflect.WildcardType) {\n            java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(toResolve));\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getLowerBounds();\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getUpperBounds();\n            if ((originalLowerBound.int) == 1) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, originalLowerBound[0]);\n                if (lowerBound != (originalLowerBound[0])) {\n                    return com.google.gson.internal.$Gson$Types.supertypeOf(lowerBound);\n                } \n            } else if ((originalUpperBound.int) == 1) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, originalUpperBound[0]);\n                if (upperBound != (originalUpperBound[0])) {\n                    return com.google.gson.internal.$Gson$Types.subtypeOf(upperBound);\n                } \n            } \n            return original;\n        } else {\n            return toResolve;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"contextRawType"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:136","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"289aab65-3f05-11e6-9243-770c64b74342","method":{"position":"com.google.gson.internal.$Gson$Types:431","type":"CtMethodImpl","sourcecode":"private static void checkNotPrimitive(java.lang.reflect.Type type) {\n    com.google.gson.internal.$Gson$Preconditions.checkArgument(((!(type instanceof java.lang.Class<?>)) || (!(((java.lang.Class<?>)(type)).isPrimitive()))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:131","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"289aab66-3f05-11e6-9243-ab578f0d0275","method":{"position":"com.google.gson.internal.ConstructorConstructor:200","type":"CtMethodImpl","sourcecode":"private <T>com.google.gson.internal.ObjectConstructor<T> newUnsafeAllocator(final java.lang.reflect.Type type, final java.lang.Class<? super T> rawType) {\n    if (type instanceof java.lang.Class<?>) {\n        {\n            if (type instanceof java.lang.reflect.TypeVariable) {\n                {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        private final com.google.gson.internal.UnsafeAllocator unsafeAllocator = com.google.gson.internal.UnsafeAllocator.create();\n\n                        @java.lang.SuppressWarnings(value = \"unchecked\")\n                        public T construct() {\n                            try {\n                                java.lang.Object java.lang.Object = com.google.gson.internal.UnsafeAllocator.newInstance(rawType);\n                                return ((T)(newInstance));\n                            } catch (java.lang.Exception e) {\n                                throw new java.lang.RuntimeException((((\"Unable to invoke no-args constructor for \" + type) + \". \") + \"Register an InstanceCreator with Gson for this type may fix this problem.\") , e);\n                            }\n                        }\n                    };\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"289ad277-3f05-11e6-9243-2fb2dd62cc9f","method":{"position":"com.google.gson.JsonObject:89","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Number value) {\n    if (value == null) {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    add(property, createJsonElement(value));\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl"},"failures":[659,171,172,173,1,2,3,4,327,200,201,202,433,22,120,434,86,121,23,122,25,123,29,40,41,124,630],"tindex":"289ad278-3f05-11e6-9243-475adb1b678b","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:132","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter name(java.lang.String name) throws java.io.IOException {\n    if (name == null) {\n        {\n            if ((java.util.List<com.google.gson.JsonElement>.isEmpty()) || ((java.lang.String) != null)) {\n                throw new java.lang.IllegalStateException();\n            } \n            com.google.gson.JsonElement com.google.gson.JsonElement = peek();\n            if (element instanceof com.google.gson.JsonObject) {\n                java.lang.String = name;\n                return com.google.gson.internal.bind.JsonTreeWriter.this;\n            } \n            throw new java.lang.IllegalStateException();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:497","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"289af989-3f05-11e6-9243-99dec6367c5d","method":{"position":"com.google.gson.GsonBuilder:493","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\npublic com.google.gson.GsonBuilder registerTypeHierarchyAdapter(java.lang.Class<?> baseType, java.lang.Object typeAdapter) {\n    if ((typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    com.google.gson.internal.$Gson$Preconditions.checkArgument((((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) || (typeAdapter instanceof com.google.gson.TypeAdapter<?>)));\n                    if ((typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)) {\n                        java.util.List<com.google.gson.TypeAdapterFactory>.add(0, com.google.gson.TreeTypeAdapter.newTypeHierarchyFactory(baseType, typeAdapter));\n                    } \n                    if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                        java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.internal.bind.TypeAdapters.newTypeHierarchyFactory(baseType, ((com.google.gson.TypeAdapter)(typeAdapter))));\n                    } \n                    return com.google.gson.GsonBuilder.this;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.TreeTypeAdapter:55","type":"CtInvocationImpl"},"failures":[659,173,104,120,121,23,122,25,123,29,40,41,124],"tindex":"289af98a-3f05-11e6-9243-53865a4e2310","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:75","type":"CtMethodImpl","sourcecode":"private void put(com.google.gson.JsonElement value) {\n    if (value.isJsonNull()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((java.lang.String) != null) {\n                if ((!(value.isJsonNull())) || (getSerializeNulls())) {\n                    com.google.gson.JsonObject com.google.gson.JsonObject = ((com.google.gson.JsonObject)(peek()));\n                    object.add(java.lang.String, value);\n                } \n                java.lang.String = null;\n            } else if (java.util.List<com.google.gson.JsonElement>.isEmpty()) {\n                com.google.gson.JsonElement = value;\n            } else {\n                com.google.gson.JsonElement com.google.gson.JsonElement = peek();\n                if (element instanceof com.google.gson.JsonArray) {\n                    ((com.google.gson.JsonArray)(element)).add(value);\n                } else {\n                    throw new java.lang.IllegalStateException();\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[660,327,200,201,202,433,22,120,434,86,41,219],"tindex":"289b209b-3f05-11e6-9243-71f751340aab","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:175","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            if (!(isLenient())) {\n                double double = value.doubleValue();\n                if ((java.lang.Double.isNaN(d)) || (java.lang.Double.isInfinite(d))) {\n                    throw new java.lang.IllegalArgumentException((\"JSON forbids NaN and infinities: \" + value));\n                } \n            } \n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:274","type":"CtVariableReadImpl"},"failures":[],"tindex":"289b209c-3f05-11e6-9243-ff48faeaef85","method":{"position":"com.google.gson.Gson:249","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> doubleAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                {\n                    if (serializeSpecialFloatingPointValues) {\n                        {\n                            if (serializeSpecialFloatingPointValues) {\n                                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                throw new java.lang.RuntimeException();\n                            } else {\n                                {\n                                    if (serializeSpecialFloatingPointValues) {\n                                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                        throw new java.lang.RuntimeException();\n                                    } else {\n                                        {\n                                            if (serializeSpecialFloatingPointValues) {\n                                                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                                throw new java.lang.RuntimeException();\n                                            } else {\n                                                {\n                                                    if (serializeSpecialFloatingPointValues) {\n                                                        return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n                                                    } \n                                                    return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                                                        @java.lang.Override\n                                                        public java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                                                            if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                                                                in.nextNull();\n                                                                return null;\n                                                            } \n                                                            return in.nextDouble();\n                                                        }\n\n                                                        @java.lang.Override\n                                                        public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                                                            if (value == null) {\n                                                                out.nullValue();\n                                                                return ;\n                                                            } \n                                                            double double = value.doubleValue();\n                                                            checkValidFloatingPoint(doubleValue);\n                                                            out.value(value);\n                                                        }\n                                                    };\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:298","type":"CtBinaryOperatorImpl"},"failures":[661],"tindex":"289b47ad-3f05-11e6-9243-d7c93f2fe6d9","method":{"position":"com.google.gson.stream.JsonWriter:461","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(double value) throws java.io.IOException {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                throw new java.lang.IllegalArgumentException((\"Numeric values must be finite, but was \" + value));\n            } \n            writeDeferredName();\n            beforeValue(false);\n            java.io.Writer.append(java.lang.Double.toString(value));\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:298","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"289b47ae-3f05-11e6-9243-f78ae274b6d9","method":{"position":"com.google.gson.Gson:297","type":"CtMethodImpl","sourcecode":"private void checkValidFloatingPoint(double value) {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                {\n                    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                        throw new java.lang.IllegalArgumentException(((value + \" is not a valid double value as per JSON specification. To override this\") + \" behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.\"));\n                    } \n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"289b47af-3f05-11e6-9243-1fca22bb6fd8","method":{"position":"com.google.gson.Gson:695","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.lang.String json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:167","type":"CtUnaryOperatorImpl"},"failures":[100,662,663,664,665],"tindex":"289b6dc0-3f05-11e6-9243-3dbfe4c83c08","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:131","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedHashTreeMap.Node<K, V> find(K key, boolean create) {\n    if (!create) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.util.Comparator<? super K> java.util.Comparator<? super K> = com.google.gson.internal.LinkedHashTreeMap.this.java.util.Comparator<? super K>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[] com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[] = com.google.gson.internal.LinkedHashTreeMap.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[];\n            int int = com.google.gson.internal.LinkedHashTreeMap.secondaryHash(key.hashCode());\n            int int = hash & ((table.int) - 1);\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = table[index];\n            int int = 0;\n            if (nearest != null) {\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                java.lang.Comparable<java.lang.Object> java.lang.Comparable<java.lang.Object> = comparator == (com.google.gson.internal.LinkedHashTreeMap.com.google.gson.internal.LinkedHashTreeMap.java.util.Comparator<java.lang.Comparable>) ? ((java.lang.Comparable<java.lang.Object>)(key)) : null;\n                while (true) {\n                    comparison = comparableKey != null ? comparableKey.compareTo(nearest.K) : comparator.compare(key, nearest.K);\n                    if (comparison == 0) {\n                        return nearest;\n                    } \n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = comparison < 0 ? nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> : nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    if (child == null) {\n                        break;\n                    } \n                    nearest = child;\n                }\n            } \n            if (!create) {\n                return null;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            if (nearest == null) {\n                if ((comparator == (com.google.gson.internal.LinkedHashTreeMap.com.google.gson.internal.LinkedHashTreeMap.java.util.Comparator<java.lang.Comparable>)) && (!(key instanceof java.lang.Comparable))) {\n                    throw new java.lang.ClassCastException(((key.getClass().getName()) + \" is not Comparable\"));\n                } \n                created = new com.google.gson.internal.LinkedHashTreeMap.Node<K, V>(nearest , key , hash , header , header.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>);\n                table[index] = created;\n            } else {\n                created = new com.google.gson.internal.LinkedHashTreeMap.Node<K, V>(nearest , key , hash , header , header.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>);\n                if (comparison < 0) {\n                    nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = created;\n                } else {\n                    nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = created;\n                }\n                rebalance(nearest, true);\n            }\n            if (((int)++) > (int)) {\n                doubleCapacity();\n            } \n            (int)++;\n            return created;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"create":"create"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"289b94d1-3f05-11e6-9243-b9bdb77d32b0","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:108","type":"CtMethodImpl","sourcecode":"public boolean writeField(java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    } else {\n        {\n            if (!(boolean))\n                return false;\n            \n            java.lang.Object java.lang.Object = field.get(value);\n            return fieldValue != value;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:137","type":"CtBinaryOperatorImpl"},"failures":[666],"tindex":"289b94d2-3f05-11e6-9243-fd9019ed206f","method":{"position":"com.google.gson.JsonArray:81","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement set(int index, com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonObject) {\n        {\n            return java.util.List<com.google.gson.JsonElement>.set(index, element);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:250","type":"CtVariableReadImpl"},"failures":[],"tindex":"289bbbe3-3f05-11e6-9243-d19659095f52","method":{"position":"com.google.gson.Gson:249","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> doubleAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                {\n                    if (serializeSpecialFloatingPointValues) {\n                        {\n                            if (serializeSpecialFloatingPointValues) {\n                                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                throw new java.lang.RuntimeException();\n                            } else {\n                                {\n                                    if (serializeSpecialFloatingPointValues) {\n                                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                        throw new java.lang.RuntimeException();\n                                    } else {\n                                        {\n                                            if (serializeSpecialFloatingPointValues) {\n                                                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                                throw new java.lang.RuntimeException();\n                                            } else {\n                                                {\n                                                    if (serializeSpecialFloatingPointValues) {\n                                                        return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n                                                    } \n                                                    return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                                                        @java.lang.Override\n                                                        public java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                                                            if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                                                                in.nextNull();\n                                                                return null;\n                                                            } \n                                                            return in.nextDouble();\n                                                        }\n\n                                                        @java.lang.Override\n                                                        public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                                                            if (value == null) {\n                                                                out.nullValue();\n                                                                return ;\n                                                            } \n                                                            double double = value.doubleValue();\n                                                            checkValidFloatingPoint(doubleValue);\n                                                            out.value(value);\n                                                        }\n                                                    };\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:136","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"289bbbe4-3f05-11e6-9243-3bd8e4040667","method":{"position":"com.google.gson.GsonBuilder:447","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\npublic com.google.gson.GsonBuilder registerTypeAdapter(java.lang.reflect.Type type, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof java.lang.reflect.GenericArrayType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.$Gson$Preconditions.checkArgument(((((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) || (typeAdapter instanceof com.google.gson.InstanceCreator<?>)) || (typeAdapter instanceof com.google.gson.TypeAdapter<?>)));\n            if (typeAdapter instanceof com.google.gson.InstanceCreator<?>) {\n                java.util.Map<java.lang.reflect.Type, com.google.gson.InstanceCreator<?>>.put(type, ((com.google.gson.InstanceCreator)(typeAdapter)));\n            } \n            if ((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) {\n                com.google.gson.reflect.TypeToken<?> com.google.gson.reflect.TypeToken<?> = com.google.gson.reflect.TypeToken.get(type);\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.TreeTypeAdapter.newFactoryWithMatchRawType(typeToken, typeAdapter));\n            } \n            if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.internal.bind.TypeAdapters.newFactory(com.google.gson.reflect.TypeToken.get(type), ((com.google.gson.TypeAdapter)(typeAdapter))));\n            } \n            return com.google.gson.GsonBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[411,633],"tindex":"289be2f5-3f05-11e6-9243-3775d82d6857","method":{"position":"com.google.gson.Gson:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            out.value(value.toString());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"289be2f6-3f05-11e6-9243-a92d966be971","method":{"position":"com.google.gson.JsonParser:44","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement parse(java.lang.String json) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            return parse(new java.io.StringReader(json));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:79","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"289be2f7-3f05-11e6-9243-4175ae22c0ae","method":{"position":"com.google.gson.Gson:847","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(com.google.gson.JsonElement json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n        {\n            if (!(json instanceof com.google.gson.JsonPrimitive)) {\n                {\n                    java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n                    return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:314","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"289c0a08-3f05-11e6-9243-0f73929c8b5d","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:311","type":"CtMethodImpl","sourcecode":"private void replaceInParent(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node, com.google.gson.internal.LinkedHashTreeMap.Node<K, V> replacement) {\n    if (node != null) {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            if (replacement != null) {\n                replacement.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = parent;\n            } \n            if (parent != null) {\n                if ((parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) == node) {\n                    parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = replacement;\n                } else {\n                    assert (parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) == node;\n                    parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = replacement;\n                }\n            } else {\n                int int = (node.int) & ((com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[].int) - 1);\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[][index] = replacement;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"replacement":"node"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"289c3119-3f05-11e6-9243-9d5818fb0325","method":{"position":"com.google.gson.Gson:871","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            if (!(json instanceof com.google.gson.JsonPrimitive)) {\n                {\n                    if (json == null) {\n                        return null;\n                    } \n                    return ((T)(fromJson(new com.google.gson.internal.bind.JsonTreeReader(json), typeOfT)));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318093385/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0}],"header":{"groupId":"com.google.code.gson","transformationCount":100,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":42,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":511,"com.google.gson.functional.StringTest.testStringValueDeserialization":509,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":3,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":467,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":361,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":428,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":22,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":156,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":166,"com.google.gson.MixedStreamTest.testWriteLenient":600,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":127,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":370,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":162,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":226,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":125,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":230,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":476,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":559,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":562,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":96,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":437,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":186,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":196,"com.google.gson.functional.ObjectTest.testSingletonLists":123,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":215,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":362,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":421,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":512,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":633,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":398,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":105,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":583,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":378,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":138,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":609,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":479,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":206,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":525,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":235,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":468,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":532,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":38,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":413,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":604,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":545,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":284,"com.google.gson.functional.EnumTest.testEnumCaseMapping":558,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":260,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":510,"com.google.gson.functional.JsonTreeTest.testToJsonTree":71,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":412,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":535,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":380,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":81,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":202,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":340,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":618,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":319,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":355,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":423,"com.google.gson.internal.LinkedHashTreeMapTest.testAvlBuilder":630,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":253,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":18,"com.google.gson.functional.ObjectTest.testNullDeserialization":410,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":108,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":522,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":135,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":488,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":612,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":429,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":407,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":543,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":240,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":145,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":611,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":327,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":332,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":381,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":224,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":493,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":492,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":377,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":473,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":619,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":452,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":339,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":499,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":147,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":316,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":360,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":450,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":167,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":277,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":465,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":62,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":352,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":161,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":625,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":113,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":292,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":474,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":529,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":466,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":144,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":310,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":131,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":234,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":244,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":52,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":289,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":433,"com.google.gson.metrics.PerformanceTest.testDummy":258,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":216,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":4,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":194,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":565,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":392,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":294,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":383,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":263,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":368,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":220,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":354,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":239,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":111,"com.google.gson.functional.CollectionTest.testSetDeserialization":229,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":97,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":134,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":301,"com.google.gson.functional.EnumTest.testEnumSet":551,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":457,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":195,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":391,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":273,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":344,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":139,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":25,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":251,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":470,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":222,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":481,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":106,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":540,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":482,"com.google.gson.functional.MapTest.testHashMapDeserialization":267,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":426,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":572,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":366,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":297,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":592,"com.google.gson.MixedStreamTest.testReadNulls":601,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":41,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":53,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":158,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":388,"com.google.gson.functional.MapTest.testSortedMap":286,"com.google.gson.functional.MapTest.testMapSerialization":283,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":43,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":33,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":463,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":322,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":88,"com.google.gson.functional.MapTest.testSerializeMaps":270,"com.google.gson.functional.MapTest.testComplexKeysSerialization":40,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":300,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":293,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":325,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":110,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":204,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":17,"com.google.gson.internal.LinkedTreeMapTest.testRemoveRootDoesNotDoubleUnlink":30,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":65,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":385,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":556,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":29,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":183,"com.google.gson.internal.LinkedHashTreeMapTest.testDoubleCapacity":631,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":49,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":409,"com.google.gson.functional.MapTest.testStringKeyDeserialization":291,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":323,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":254,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":495,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":295,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":432,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":427,"com.google.gson.functional.PrettyPrintingTest.testMap":533,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":588,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":569,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":45,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":335,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":386,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":324,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":608,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":620,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":515,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":519,"com.google.gson.functional.MapTest.testMapSerializationEmpty":290,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":350,"com.google.gson.functional.CollectionTest.testQueueSerialization":573,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":458,"com.google.gson.functional.MapTest.testMapOfMapSerialization":282,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":449,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":357,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":577,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":93,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":460,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":399,"com.google.gson.functional.FieldNamingTest.testIdentity":89,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":513,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":393,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":172,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":148,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":23,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":70,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":122,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":508,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":415,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":605,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":514,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":595,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":119,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":455,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":372,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":32,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":345,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":92,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":257,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":351,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":264,"com.google.gson.functional.MapTest.testMapSubclassSerialization":269,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":491,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":201,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":242,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":303,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":232,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":246,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":447,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":560,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":168,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":334,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":506,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":104,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":193,"com.google.gson.functional.EnumTest.testEnumSubclass":554,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":469,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":137,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":610,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":414,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":236,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":475,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":115,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":60,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":417,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":121,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":453,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":120,"com.google.gson.stream.JsonWriterTest.testNullName":628,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":73,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":31,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":318,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":403,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":459,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":51,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":451,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":374,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":124,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":266,"com.google.gson.MixedStreamTest.testWriteNulls":599,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":317,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":527,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":312,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":109,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":191,"com.google.gson.CommentsTest.testParseComments":607,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":126,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":187,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":395,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":83,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":179,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":472,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":262,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":285,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":517,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":594,"com.google.gson.MixedStreamTest.testReadInvalidState":597,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":94,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":199,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":376,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":490,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":34,"com.google.gson.ObjectTypeAdapterTest.testSerializeObject":632,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":425,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":256,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":326,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":176,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":442,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":91,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":358,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":485,"com.google.gson.functional.MapTest.testMapDeserialization":276,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":315,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":353,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":536,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":265,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":185,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":622,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":80,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":275,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":15,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":13,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":66,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":69,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":555,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":99,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":149,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":406,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":55,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":590,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":74,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":341,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":198,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":64,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":118,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":20,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":182,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":379,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":411,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":397,"com.google.gson.functional.PrimitiveTest.testShortSerialization":489,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":538,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":478,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":547,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":448,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":477,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":10,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":424,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":85,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":553,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":227,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":241,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":271,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":441,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":497,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":584,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":28,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":190,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":369,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":250,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":627,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":504,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":498,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":615,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":305,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":79,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":114,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":150,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":205,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":329,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":157,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":171,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":116,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":454,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":154,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":130,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":557,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":57,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":302,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":100,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":228,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":586,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":394,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":12,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":188,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":359,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":431,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":160,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":347,"com.google.gson.stream.JsonWriterTest.testNullStringValue":19,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":189,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":364,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":76,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":570,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":418,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":484,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":456,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":501,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":218,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":14,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":552,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":47,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":35,"com.google.gson.functional.MapTest.testGeneralMapField":39,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":128,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":309,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":503,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":82,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":237,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":587,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":371,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":287,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":330,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":422,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":567,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":480,"com.google.gson.MixedStreamTest.testReadMixedStreamed":249,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":278,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":342,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":443,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":159,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":580,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":606,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":214,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":461,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":546,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":221,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":102,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":279,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":549,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":268,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":396,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":502,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":217,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":209,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":444,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":356,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":528,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":173,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":328,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":576,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":539,"com.google.gson.functional.ObjectTest.testNestedDeserialization":155,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":401,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":408,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":593,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":44,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":72,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":544,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":500,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":178,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":280,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":304,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":516,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":192,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":487,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":56,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":165,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":169,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":582,"com.google.gson.functional.ObjectTest.testNullSerialization":404,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":59,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":548,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":272,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":2,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":416,"com.google.gson.functional.MapTest.testInterfaceTypeMap":1,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":320,"com.google.gson.stream.JsonWriterTest.testNonFiniteBoxedDoubles":623,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":589,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":5,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":419,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":203,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":614,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":63,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":591,"com.google.gson.MixedStreamTest.testReadClosed":598,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":331,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":542,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":435,"com.google.gson.MixedStreamTest.testWriteClosed":248,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":46,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":575,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":78,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":129,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":382,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":197,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":75,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":181,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":152,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":177,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":103,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":6,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":132,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":574,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":210,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":464,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":212,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":61,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":578,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":365,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":531,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":90,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":505,"com.google.gson.stream.JsonWriterTest.testNumbers":624,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":440,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":68,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":337,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":112,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":306,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":180,"com.google.gson.functional.CollectionTest.testQueueDeserialization":585,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":446,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":462,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":521,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":296,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":211,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":375,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":0,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":146,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":349,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":153,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":225,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":568,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":245,"com.google.gson.functional.MapTest.testRawMapSerialization":288,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":581,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":363,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":616,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":54,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":141,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":37,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":16,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":311,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":384,"com.google.gson.functional.PrimitiveTest.testByteSerialization":486,"com.google.gson.ObjectTypeAdapterTest.testSerialize":252,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":298,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":223,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":430,"com.google.gson.JsonPrimitiveTest.testEqualsIntegerAndBigInteger":621,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":163,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":321,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":86,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":26,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":518,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":603,"com.google.gson.functional.MapTest.testMapWithQuotes":281,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":336,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":438,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":520,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":390,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":507,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":400,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":67,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":494,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":333,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":95,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":537,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":24,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":151,"com.google.gson.internal.LinkedHashTreeMapTest.testDoubleCapacityAllNodesOnLeft":629,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":184,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":346,"com.google.gson.functional.ObjectTest.testEmptyStringDeserialization":405,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":471,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":8,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":133,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":11,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":338,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":164,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":208,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":348,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":483,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":389,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":579,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":314,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":307,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":373,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":550,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":58,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":174,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":561,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":243,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":387,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":200,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":420,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":255,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":613,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":140,"com.google.gson.functional.ObjectTest.testNestedSerialization":142,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":219,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":434,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":524,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":566,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":563,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":21,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":36,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":170,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":596,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":602,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":136,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":530,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":496,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":77,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":213,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":101,"com.google.gson.GsonBuilderTest.testCreatingMoreThanOnce":259,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":261,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":436,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":98,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":143,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":207,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":617,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":523,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":7,"com.google.gson.functional.CollectionTest.testSetSerialization":231,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":238,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":117,"com.google.gson.functional.StringTest.testStringValueSerialization":526,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":534,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":48,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":9,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":50,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":571,"com.google.gson.MixedStreamTest.testWriteInvalidState":247,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":308,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":402,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":439,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":84,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":445,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":233,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":343,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":87,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":107,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":175,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":541,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":626,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":27,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":367,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":299,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":274,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":313,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":564},"transformations":[{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19],"tindex":"7587fae9-3e8f-11e6-b040-d987129cb4a6","method":{"position":"com.google.gson.stream.JsonWriter:413","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268864327/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            writeDeferredName();\n            beforeValue(false);\n            string(value);\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:452","type":"CtBinaryOperatorImpl","sourcecode":"typeAdapter instanceof com.google.gson.InstanceCreator<?>"},"failures":[],"tindex":"7588490a-3e8f-11e6-b040-51cc4ad88d4b","method":{"position":"com.google.gson.TreeTypeAdapter:103","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newTypeHierarchyFactory(java.lang.Class<?> hierarchyType, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof com.google.gson.InstanceCreator<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268864327/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , null , false , hierarchyType);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:167","type":"CtBinaryOperatorImpl","sourcecode":"a instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"7588701b-3e8f-11e6-b040-c1ac700bded0","method":{"position":"com.google.gson.internal.$Gson$Types:158","type":"CtMethodImpl","sourcecode":"public static boolean equals(java.lang.reflect.Type a, java.lang.reflect.Type b) {\n    if (a == b) {\n        return true;\n    } else if (a instanceof java.lang.Class) {\n        return a.equals(b);\n    } else if (a instanceof java.lang.reflect.ParameterizedType) {\n        if (!(b instanceof java.lang.reflect.ParameterizedType)) {\n            return false;\n        } \n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(a));\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(b));\n        return ((com.google.gson.internal.$Gson$Types.equal(pa.getOwnerType(), pb.getOwnerType())) && (pa.getRawType().equals(pb.getRawType()))) && (java.util.Arrays.equals(pa.getActualTypeArguments(), pb.getActualTypeArguments()));\n    } else if (a instanceof java.lang.reflect.GenericArrayType) {\n        if (!(b instanceof java.lang.reflect.GenericArrayType)) {\n            return false;\n        } \n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(a));\n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(b));\n        return com.google.gson.internal.$Gson$Types.equals(ga.getGenericComponentType(), gb.getGenericComponentType());\n    } else if (a instanceof java.lang.reflect.WildcardType) {\n        if (!(b instanceof java.lang.reflect.WildcardType)) {\n            return false;\n        } \n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(a));\n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(b));\n        return (java.util.Arrays.equals(wa.getUpperBounds(), wb.getUpperBounds())) && (java.util.Arrays.equals(wa.getLowerBounds(), wb.getLowerBounds()));\n    } else if (a instanceof java.lang.reflect.TypeVariable) {\n        if (!(b instanceof java.lang.reflect.TypeVariable)) {\n            return false;\n        } \n        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(a));\n        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(b));\n        return ((va.getGenericDeclaration()) == (vb.getGenericDeclaration())) && (va.getName().equals(vb.getName()));\n    } else {\n        return false;\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[20,21,22,23,10,24,25,26,27],"tindex":"7588701c-3e8f-11e6-b040-e300b9e9bab2","method":{"position":"com.google.gson.internal.bind.TypeAdapters:245","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268864327/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"7588972d-3e8f-11e6-b040-af7d24a346ef","method":{"position":"com.google.gson.stream.JsonWriter:532","type":"CtMethodImpl","sourcecode":"private void string(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268864327/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            java.lang.String[] java.lang.String[] = boolean ? com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[] : com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[];\n            java.io.Writer.write(\"\\\"\");\n            int int = 0;\n            int int = value.length();\n            for (int int = 0 ; i < length ; i++) {\n                char char = value.charAt(i);\n                java.lang.String java.lang.String;\n                if (c < 128) {\n                    replacement = replacements[c];\n                    if (replacement == null) {\n                        continue;\n                    } \n                } else if (c == '\\u2028') {\n                    replacement = \"\\\\u2028\";\n                } else if (c == '\\u2029') {\n                    replacement = \"\\\\u2029\";\n                } else {\n                    continue;\n                }\n                if (last < i) {\n                    java.io.Writer.write(value, last, (i - last));\n                } \n                java.io.Writer.write(replacement);\n                last = i + 1;\n            }\n            if (last < length) {\n                java.io.Writer.write(value, last, (length - last));\n            } \n            java.io.Writer.write(\"\\\"\");\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:287","type":"CtBinaryOperatorImpl","sourcecode":"replacement != null"},"failures":[28,29,30],"tindex":"7588972e-3e8f-11e6-b040-ed116495f6b5","method":{"position":"com.google.gson.internal.LinkedTreeMap:284","type":"CtMethodImpl","sourcecode":"private void replaceInParent(com.google.gson.internal.LinkedTreeMap.Node<K, V> node, com.google.gson.internal.LinkedTreeMap.Node<K, V> replacement) {\n    if (replacement != null) {\n        {\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n            if (replacement != null) {\n                replacement.com.google.gson.internal.LinkedTreeMap.Node<K, V> = parent;\n            } \n            if (parent != null) {\n                if ((parent.com.google.gson.internal.LinkedTreeMap.Node<K, V>) == node) {\n                    parent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                } else {\n                    assert (parent.com.google.gson.internal.LinkedTreeMap.Node<K, V>) == node;\n                    parent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                }\n            } else {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268864327/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"replacement":"replacement"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:122","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.ParameterizedType"},"failures":[31,32,33,34,35,36,37,0,38,1,2,39,40,3,41,42,43,44,45,46,47,48,22,49,50,51,23,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,4,75,5,76,77,78,79,80,6,81,82,83,84,85,86,87,88,89,90,9,91,92,93,94,95,96,97,98,99,100,10,101,102,11,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,28,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,12,185,186,14,15,187,188,189,17,190,24,191,192,193,25,194,195,196,197,26,27,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252],"tindex":"7588be3f-3e8f-11e6-b040-e9aebefa1e02","method":{"position":"com.google.gson.internal.Primitives:69","type":"CtMethodImpl","sourcecode":"public static boolean isPrimitive(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class) {\n        {\n            if (type instanceof java.lang.reflect.ParameterizedType) {\n                {\n                    return com.google.gson.internal.Primitives.com.google.gson.internal.Primitives.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.containsKey(type);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268864327/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268864327/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[253],"tindex":"7588e550-3e8f-11e6-b040-a3d26d5cf186","method":{"position":"com.google.gson.Gson:468","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src) {\n    if (src != null) {\n        {\n            if (src == null) {\n                return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            return toJsonTree(src, src.getClass());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268864327/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:79","type":"CtUnaryOperatorImpl","sourcecode":"!(json instanceof com.google.gson.JsonPrimitive)"},"failures":[],"tindex":"7588e551-3e8f-11e6-b040-33e67f68e8ef","method":{"position":"com.google.gson.Gson:127","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonParseException {\n    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n        {\n            return ((T)(fromJson(json, typeOfT)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268864327/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[254,116,255,166,167,168,169],"tindex":"7588e552-3e8f-11e6-b040-932b7ccbf7b6","method":{"position":"com.google.gson.JsonObject:89","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Number value) {\n    if (property == null) {\n        {\n            add(property, createJsonElement(value));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268864327/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:363","type":"CtUnaryOperatorImpl","sourcecode":"!insert"},"failures":[256],"tindex":"7588e553-3e8f-11e6-b040-fb8af3706a73","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:338","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (!insert) {\n        {\n            for (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) {\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                int int = left != null ? left.int : 0;\n                int int = right != null ? right.int : 0;\n                int int = leftHeight - rightHeight;\n                if (delta == (-2)) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    int int = rightRight != null ? rightRight.int : 0;\n                    int int = rightLeft != null ? rightLeft.int : 0;\n                    int int = rightLeftHeight - rightRightHeight;\n                    if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                        rotateLeft(node);\n                    } else {\n                        assert rightDelta == 1;\n                        rotateRight(right);\n                        rotateLeft(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 2) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    int int = leftRight != null ? leftRight.int : 0;\n                    int int = leftLeft != null ? leftLeft.int : 0;\n                    int int = leftLeftHeight - leftRightHeight;\n                    if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                        rotateRight(node);\n                    } else {\n                        assert leftDelta == (-1);\n                        rotateLeft(left);\n                        rotateRight(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 0) {\n                    node.int = leftHeight + 1;\n                    if (insert) {\n                        break;\n                    } \n                } else {\n                    assert (delta == (-1)) || (delta == 1);\n                    node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                    if (!insert) {\n                        break;\n                    } \n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268864327/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"insert"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:233","type":"CtBinaryOperatorImpl","sourcecode":"annotation != null"},"failures":[205,206,207,208,209,210,211,212],"tindex":"75895a84-3e8f-11e6-b040-2d1abe7cfcc3","method":{"position":"com.google.gson.internal.Excluder:232","type":"CtMethodImpl","sourcecode":"private boolean isValidSince(com.google.gson.annotations.Since annotation) {\n    if (annotation != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268864327/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (annotation != null) {\n                {\n                    if (annotation != null) {\n                        double double = annotation.value();\n                        if (annotationVersion > (double)) {\n                            return false;\n                        } \n                    } \n                    return true;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268864327/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:103","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.GenericArrayType"},"failures":[196,198,199,202],"tindex":"75895a85-3e8f-11e6-b040-d7551a299706","method":{"position":"com.google.gson.internal.Primitives:79","type":"CtMethodImpl","sourcecode":"public static boolean isWrapperType(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.GenericArrayType) {\n        {\n            return com.google.gson.internal.Primitives.com.google.gson.internal.Primitives.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.containsKey(com.google.gson.internal.$Gson$Preconditions.checkNotNull(type));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268864327/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[10,257,16],"tindex":"75895a86-3e8f-11e6-b040-49b32f9f9ffd","method":{"position":"com.google.gson.Gson:532","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        {\n            if (src != null) {\n                {\n                    java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n                    toJson(src, typeOfSrc, writer);\n                    return writer.toString();\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268864327/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268864327/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:94","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.Class"},"failures":[],"tindex":"75895a87-3e8f-11e6-b040-f3cd6618d06f","method":{"position":"com.google.gson.internal.Primitives:69","type":"CtMethodImpl","sourcecode":"public static boolean isPrimitive(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class) {\n        {\n            if (type instanceof java.lang.reflect.ParameterizedType) {\n                {\n                    return com.google.gson.internal.Primitives.com.google.gson.internal.Primitives.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.containsKey(type);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268864327/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268864327/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:340","type":"CtBinaryOperatorImpl","sourcecode":"toResolve instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"75895a88-3e8f-11e6-b040-050a773b59a1","method":{"position":"com.google.gson.internal.$Gson$Types:322","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type resolve(java.lang.reflect.Type context, java.lang.Class<?> contextRawType, java.lang.reflect.Type toResolve) {\n    while (true) {\n        if (toResolve instanceof java.lang.reflect.TypeVariable) {\n            java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(toResolve));\n            toResolve = com.google.gson.internal.$Gson$Types.resolveTypeVariable(context, contextRawType, typeVariable);\n            if (toResolve == typeVariable) {\n                return toResolve;\n            } \n        } else if ((toResolve instanceof java.lang.Class) && (((java.lang.Class<?>)(toResolve)).isArray())) {\n            java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getComponentType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, componentType);\n            return componentType == newComponentType ? original : com.google.gson.internal.$Gson$Types.arrayOf(newComponentType);\n        } else if (toResolve instanceof java.lang.reflect.GenericArrayType) {\n            java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getGenericComponentType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, componentType);\n            return componentType == newComponentType ? original : com.google.gson.internal.$Gson$Types.arrayOf(newComponentType);\n        } else if (toResolve instanceof java.lang.reflect.ParameterizedType) {\n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getOwnerType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, ownerType);\n            boolean boolean = newOwnerType != ownerType;\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getActualTypeArguments();\n            for (int int = 0, int int = args.int ; t < length ; t++) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, args[t]);\n                if (resolvedTypeArgument != (args[t])) {\n                    if (!changed) {\n                        args = args.clone();\n                        changed = true;\n                    } \n                    args[t] = resolvedTypeArgument;\n                } \n            }\n            return changed ? com.google.gson.internal.$Gson$Types.newParameterizedTypeWithOwner(newOwnerType, original.getRawType(), args) : original;\n        } else if (toResolve instanceof java.lang.reflect.WildcardType) {\n            java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(toResolve));\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getLowerBounds();\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getUpperBounds();\n            if ((originalLowerBound.int) == 1) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, originalLowerBound[0]);\n                if (lowerBound != (originalLowerBound[0])) {\n                    return com.google.gson.internal.$Gson$Types.supertypeOf(lowerBound);\n                } \n            } else if ((originalUpperBound.int) == 1) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, originalUpperBound[0]);\n                if (upperBound != (originalUpperBound[0])) {\n                    return com.google.gson.internal.$Gson$Types.subtypeOf(upperBound);\n                } \n            } \n            return original;\n        } else {\n            return toResolve;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"toResolve"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:578","type":"CtBinaryOperatorImpl","sourcecode":"root == null"},"failures":[],"tindex":"75898199-3e8f-11e6-b040-2164c330e9e1","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:626","type":"CtMethodImpl","sourcecode":"void reset(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268864327/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            for (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root ; n != null ; n = n.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) {\n                n.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = stackTop;\n                stackTop = n;\n            }\n            com.google.gson.internal.LinkedHashTreeMap.AvlIterator.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = stackTop;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonArray:58","type":"CtBinaryOperatorImpl","sourcecode":"element == null"},"failures":[],"tindex":"7589819a-3e8f-11e6-b040-89c3f772a68c","method":{"position":"com.google.gson.JsonArray:57","type":"CtMethodImpl","sourcecode":"public void add(com.google.gson.JsonElement element) {\n    if (element == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268864327/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (element == null) {\n                element = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            java.util.List<com.google.gson.JsonElement>.add(element);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"7589a8ab-3e8f-11e6-b040-e31d6c93efe6","method":{"position":"com.google.gson.Gson:532","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        {\n            if (src != null) {\n                {\n                    java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n                    toJson(src, typeOfSrc, writer);\n                    return writer.toString();\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268864327/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268864327/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"7589a8ac-3e8f-11e6-b040-3163263ae915","method":{"position":"com.google.gson.JsonObject:111","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Character value) {\n    if (property == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268864327/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            add(property, createJsonElement(value));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:133","type":"CtBinaryOperatorImpl","sourcecode":"(type) instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"7589a8ad-3e8f-11e6-b040-15005cb607e4","method":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:74","type":"CtMethodImpl","sourcecode":"private java.lang.reflect.Type getRuntimeTypeIfMoreSpecific(java.lang.reflect.Type type, java.lang.Object value) {\n    if (value instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268864327/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((value != null) && (((type == (java.lang.Object.java.lang.Object.java.lang.Class)) || (type instanceof java.lang.reflect.TypeVariable<?>)) || (type instanceof java.lang.Class<?>))) {\n                type = value.getClass();\n            } \n            return type;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"7589a8ae-3e8f-11e6-b040-8ff5065f0715","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n@java.lang.Override\nvoid write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268864327/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    } else {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268864327/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.IllegalAccessException();\n            } else {\n                {\n                    java.lang.Object java.lang.Object = field.get(value);\n                    com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n                    t.write(writer, fieldValue);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"7589a8af-3e8f-11e6-b040-e78ca63f81b3","method":{"position":"com.google.gson.Gson:510","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268864327/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src == null) {\n                {\n                    if (src != null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268864327/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            if (src == null) {\n                                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268864327/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                throw new java.lang.RuntimeException();\n                            } else {\n                                {\n                                    if (src == null) {\n                                        return toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull);\n                                    } \n                                    return toJson(src, src.getClass());\n                                }\n                            }\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268864327/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"7589cfc0-3e8f-11e6-b040-4d2e36e7bb9a","method":{"position":"com.google.gson.Gson:847","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(com.google.gson.JsonElement json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268864327/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:85","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[12,14,15,17,24,193,25,26,27],"tindex":"7589cfc1-3e8f-11e6-b040-17ef03faf461","method":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:84","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Object array) throws java.io.IOException {\n    if (array == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268864327/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (array == null) {\n                out.nullValue();\n                return ;\n            } \n            out.beginArray();\n            for (int int = 0, int int = java.lang.reflect.Array.getLength(array) ; i < length ; i++) {\n                E E = ((E)(java.lang.reflect.Array.get(array, i)));\n                com.google.gson.TypeAdapter<E>.write(out, value);\n            }\n            out.endArray();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:233","type":"CtBinaryOperatorImpl","sourcecode":"annotation != null"},"failures":[],"tindex":"7589cfc2-3e8f-11e6-b040-39947b6ffc1e","method":{"position":"com.google.gson.internal.Excluder:232","type":"CtMethodImpl","sourcecode":"private boolean isValidSince(com.google.gson.annotations.Since annotation) {\n    if (annotation != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268864327/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (annotation != null) {\n                {\n                    if (annotation != null) {\n                        double double = annotation.value();\n                        if (annotationVersion > (double)) {\n                            return false;\n                        } \n                    } \n                    return true;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268864327/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:274","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[258,31,32,259,260,261,262,33,34,35,36,263,37,264,265,266,267,268,269,270,271,272,273,274,275,276,0,277,278,279,280,281,282,283,284,38,20,285,286,1,287,2,39,21,288,289,40,290,291,292,293,294,295,3,41,296,42,43,297,44,45,46,47,48,298,299,300,301,302,303,22,304,49,50,305,51,23,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,68,69,70,71,72,73,74,4,75,5,76,77,78,79,80,6,81,306,307,308,309,310,311,312,313,314,315,316,7,317,318,319,320,321,322,82,83,84,323,8,324,325,326,85,86,87,88,89,94,327,95,96,97,328,329,330,331,332,98,99,333,334,335,336,337,338,339,340,341,100,342,343,344,10,345,346,347,348,349,350,101,351,352,353,354,355,356,357,102,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,11,373,374,375,376,103,377,378,379,257,380,381,382,383,384,104,105,385,386,387,388,389,106,107,108,109,110,111,112,390,113,391,392,393,114,115,254,116,394,117,395,396,397,255,398,399,400,401,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,402,133,403,134,135,404,136,405,137,406,138,407,139,140,141,142,408,143,144,145,146,409,410,147,148,149,150,151,152,153,154,155,156,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,157,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,158,507,159,160,161,162,163,508,164,165,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,166,167,168,28,169,527,528,529,170,171,530,172,173,531,174,175,176,177,178,179,180,181,532,533,182,183,534,535,536,184,12,185,186,13,537,253,14,15,187,188,538,189,16,539,17,190,540,541,542,543,544,545,546,547,548,549,24,191,550,192,193,25,194,195,196,197,26,27,198,199,200,201,202,551,552,553,554,555,556,203,204,557,558,559,560,205,206,207,208,209,210,211,212,561,562,213,214,215,216,563,217,218,219,564,220,221,222,565,223,566,567,224,225,226,568,227,569,570,571,572,573,574,575,18,228,576,577,578,579,229,230,580,581,231,582,583,584,585,586,587,588,589,232,590,591,233,234,592,235,593,594,236,595,237,238,239,240,241,242,243,244,596,245,597,598,246,599,247,600,601,602,248,249,250,603,251,604,605,606,607,608,609,610,611,612],"tindex":"7589f6d3-3e8f-11e6-b040-3b49816985ad","method":{"position":"com.google.gson.Gson:249","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> doubleAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return in.nextDouble();\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    double double = value.doubleValue();\n                    checkValidFloatingPoint(doubleValue);\n                    out.value(value);\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268864327/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"7589f6d4-3e8f-11e6-b040-3b66ba841da5","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n@java.lang.Override\nvoid write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268864327/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    } else {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268864327/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.IllegalAccessException();\n            } else {\n                {\n                    java.lang.Object java.lang.Object = field.get(value);\n                    com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n                    t.write(writer, fieldValue);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:92","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof java.util.Iterator"},"failures":[],"tindex":"758a1de5-3e8f-11e6-b040-9bc7d05c63dc","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:808","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (o instanceof java.util.Iterator) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268864327/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (!(o instanceof java.util.Map.Entry)) {\n                return false;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n            if (node == null) {\n                return false;\n            } \n            removeInternal(node, true);\n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[],"tindex":"758a1de6-3e8f-11e6-b040-27d7b097e80d","method":{"position":"com.google.gson.Gson:510","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268864327/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src == null) {\n                {\n                    if (src != null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268864327/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            if (src == null) {\n                                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268864327/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                throw new java.lang.RuntimeException();\n                            } else {\n                                {\n                                    if (src == null) {\n                                        return toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull);\n                                    } \n                                    return toJson(src, src.getClass());\n                                }\n                            }\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268864327/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:105","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonObject"},"failures":[],"tindex":"758a1de7-3e8f-11e6-b040-19ec08647e4a","method":{"position":"com.google.gson.internal.LinkedTreeMap:605","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268864327/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return containsKey(o);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[460,474,487],"tindex":"758a1de8-3e8f-11e6-b040-c36dea6c5bd7","method":{"position":"com.google.gson.internal.bind.TypeAdapters:282","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268864327/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[261,265,270,283,39,288,295,41,43,45,48,22,49,23,54,59,64,67,69,75,80,307,313,317,321,82,325,85,86,87,88,89,94,327,95,96,97,333,336,343,102,103,105,106,254,116,117,255,399,400,118,121,122,126,134,136,139,141,142,147,149,152,414,434,451,455,456,460,469,471,473,474,477,480,482,485,486,487,488,489,490,495,497,501,502,504,158,160,161,170,172,173,178,179,532,533,182,183,534,535,536,184,24,550,192,193,25,194,195,197,26,27,199,202,205,208,209,212,215,217,223,224,225,613,614,615,616,617,618,619,620,226,227,569,574,228,230,231,582,235,242,243,244,621,622,623,624,245,246,600,605,252,625,626,627],"tindex":"758a1de9-3e8f-11e6-b040-3becab3f0e84","method":{"position":"com.google.gson.stream.JsonWriter:490","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                {\n                    if (value == null) {\n                        return nullValue();\n                    } \n                    writeDeferredName();\n                    java.lang.String java.lang.String = value.toString();\n                    if ((!(boolean)) && (((string.equals(\"-Infinity\")) || (string.equals(\"Infinity\"))) || (string.equals(\"NaN\")))) {\n                        throw new java.lang.IllegalArgumentException((\"Numeric values must be finite, but was \" + value));\n                    } \n                    beforeValue(false);\n                    java.io.Writer.append(string);\n                    return com.google.gson.stream.JsonWriter.this;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268864327/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268864327/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"758a44fa-3e8f-11e6-b040-378d9075b76c","method":{"position":"com.google.gson.stream.JsonWriter:490","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                {\n                    if (value == null) {\n                        return nullValue();\n                    } \n                    writeDeferredName();\n                    java.lang.String java.lang.String = value.toString();\n                    if ((!(boolean)) && (((string.equals(\"-Infinity\")) || (string.equals(\"Infinity\"))) || (string.equals(\"NaN\")))) {\n                        throw new java.lang.IllegalArgumentException((\"Numeric values must be finite, but was \" + value));\n                    } \n                    beforeValue(false);\n                    java.io.Writer.append(string);\n                    return com.google.gson.stream.JsonWriter.this;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268864327/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268864327/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"758a44fb-3e8f-11e6-b040-650e08df8a6f","method":{"position":"com.google.gson.Gson:136","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268864327/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268864327/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return toJsonTree(src, typeOfSrc);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[90,9,91,92,93,134,150,156,233,234,252],"tindex":"758a44fc-3e8f-11e6-b040-c949214c4bc1","method":{"position":"com.google.gson.internal.Excluder:149","type":"CtMethodImpl","sourcecode":"public boolean excludeField(java.lang.reflect.Field field, boolean serialize) {\n    if (field.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268864327/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (((int) & (field.getModifiers())) != 0) {\n                return true;\n            } \n            if (((double) != (com.google.gson.internal.Excluder.com.google.gson.internal.Excluder.double)) && (!(isValidVersion(field.getAnnotation(com.google.gson.annotations.Since.com.google.gson.annotations.Since.java.lang.Class), field.getAnnotation(com.google.gson.annotations.Until.com.google.gson.annotations.Until.java.lang.Class))))) {\n                return true;\n            } \n            if (field.isSynthetic()) {\n                return true;\n            } \n            if (boolean) {\n                com.google.gson.annotations.Expose com.google.gson.annotations.Expose = field.getAnnotation(com.google.gson.annotations.Expose.com.google.gson.annotations.Expose.java.lang.Class);\n                if ((annotation == null) || (serialize ? !(annotation.serialize()) : !(annotation.deserialize()))) {\n                    return true;\n                } \n            } \n            if ((!(boolean)) && (isInnerClass(field.getType()))) {\n                return true;\n            } \n            if (isAnonymousOrLocal(field.getType())) {\n                return true;\n            } \n            java.util.List<com.google.gson.ExclusionStrategy> java.util.List<com.google.gson.ExclusionStrategy> = serialize ? java.util.List<com.google.gson.ExclusionStrategy> : java.util.List<com.google.gson.ExclusionStrategy>;\n            if (!(list.isEmpty())) {\n                com.google.gson.FieldAttributes com.google.gson.FieldAttributes = new com.google.gson.FieldAttributes(field);\n                for (com.google.gson.ExclusionStrategy com.google.gson.ExclusionStrategy : list) {\n                    if (exclusionStrategy.shouldSkipField(fieldAttributes)) {\n                        return true;\n                    } \n                }\n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"field"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[628],"tindex":"758a6c0d-3e8f-11e6-b040-5fb831e9ca10","method":{"position":"com.google.gson.stream.JsonWriter:385","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter name(java.lang.String name) throws java.io.IOException {\n    if (name == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268864327/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (name == null) {\n                throw new java.lang.NullPointerException(\"name == null\");\n            } \n            if ((java.lang.String) != null) {\n                throw new java.lang.IllegalStateException();\n            } \n            if ((int) == 0) {\n                throw new java.lang.IllegalStateException(\"JsonWriter is closed.\");\n            } \n            java.lang.String = name;\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"758a6c0e-3e8f-11e6-b040-d54da0a830fc","method":{"position":"com.google.gson.Gson:510","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268864327/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src == null) {\n                {\n                    if (src != null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268864327/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            if (src == null) {\n                                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268864327/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                throw new java.lang.RuntimeException();\n                            } else {\n                                {\n                                    if (src == null) {\n                                        return toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull);\n                                    } \n                                    return toJson(src, src.getClass());\n                                }\n                            }\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268864327/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:305","type":"CtBinaryOperatorImpl","sourcecode":"node != null"},"failures":[629,256,630,631],"tindex":"758a6c0f-3e8f-11e6-b040-e3e73221ff1c","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:686","type":"CtMethodImpl","sourcecode":"void add(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node) {\n    if (node != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268864327/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            node.int = 1;\n            if (((int) > 0) && (((int) & 1) == 0)) {\n                (int)++;\n                (int)--;\n                (int)++;\n            } \n            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node;\n            (int)++;\n            if (((int) > 0) && (((int) & 1) == 0)) {\n                (int)++;\n                (int)--;\n                (int)++;\n            } \n            for (int int = 4 ; ((int) & (scale - 1)) == (scale - 1) ; scale *= 2) {\n                if ((int) == 0) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                    center.int = (right.int) + 1;\n                    left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                } else if ((int) == 1) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                    center.int = (right.int) + 1;\n                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    int = 0;\n                } else if ((int) == 2) {\n                    int = 0;\n                } \n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"node"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:120","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonNull"},"failures":[],"tindex":"758a9320-3e8f-11e6-b040-99e87b37f9b0","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:839","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonNull) {\n        {\n            return containsKey(o);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268864327/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"758a9321-3e8f-11e6-b040-05a62b7d2a5d","method":{"position":"com.google.gson.Gson:510","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268864327/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src == null) {\n                {\n                    if (src != null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268864327/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            if (src == null) {\n                                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268864327/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                throw new java.lang.RuntimeException();\n                            } else {\n                                {\n                                    if (src == null) {\n                                        return toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull);\n                                    } \n                                    return toJson(src, src.getClass());\n                                }\n                            }\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268864327/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[48,82,94,95,96,97,136,228,230,231,632,252,633],"tindex":"758aba32-3e8f-11e6-b040-8fc730bb7720","method":{"position":"com.google.gson.internal.bind.ObjectTypeAdapter:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Object value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            com.google.gson.TypeAdapter<java.lang.Object> com.google.gson.TypeAdapter<java.lang.Object> = ((com.google.gson.TypeAdapter<java.lang.Object>)(com.google.gson.Gson.getAdapter(value.getClass())));\n            if (typeAdapter instanceof com.google.gson.internal.bind.ObjectTypeAdapter) {\n                out.beginObject();\n                out.endObject();\n                return ;\n            } \n            typeAdapter.write(out, value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268864327/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:554","type":"CtBinaryOperatorImpl","sourcecode":"(datePattern != null) && (!(\"\".equals(datePattern.trim())))"},"failures":[330,338,340,370,373,379],"tindex":"758aba33-3e8f-11e6-b040-8bc17b2c1f9a","method":{"position":"com.google.gson.GsonBuilder:551","type":"CtMethodImpl","sourcecode":"private void addTypeAdaptersForDate(java.lang.String datePattern, int dateStyle, int timeStyle, java.util.List<com.google.gson.TypeAdapterFactory> factories) {\n    if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268864327/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.DefaultDateTypeAdapter com.google.gson.DefaultDateTypeAdapter;\n            if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n                dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(datePattern);\n            } else if ((dateStyle != (java.text.DateFormat.java.text.DateFormat.int)) && (timeStyle != (java.text.DateFormat.java.text.DateFormat.int))) {\n                dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(dateStyle , timeStyle);\n            } else {\n                return ;\n            }\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.util.Date.java.util.Date.java.lang.Class), dateTypeAdapter));\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Timestamp.java.sql.Timestamp.java.lang.Class), dateTypeAdapter));\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Date.java.sql.Date.java.lang.Class), dateTypeAdapter));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"datePattern":"datePattern"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:188","type":"CtBinaryOperatorImpl","sourcecode":"from == null"},"failures":[],"tindex":"758aba34-3e8f-11e6-b040-d730abd2ef72","method":{"position":"com.google.gson.reflect.TypeToken:160","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.GenericArrayType to) {\n    if (from == null) {\n        {\n            java.lang.reflect.Type java.lang.reflect.Type = to.getGenericComponentType();\n            if (toGenericComponentType instanceof java.lang.reflect.ParameterizedType) {\n                java.lang.reflect.Type java.lang.reflect.Type = from;\n                if (from instanceof java.lang.reflect.GenericArrayType) {\n                    t = ((java.lang.reflect.GenericArrayType)(from)).getGenericComponentType();\n                } else if (from instanceof java.lang.Class<?>) {\n                    java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(from));\n                    while (classType.isArray()) {\n                        classType = classType.getComponentType();\n                    }\n                    t = classType;\n                } \n                return com.google.gson.reflect.TypeToken.isAssignableFrom(t, ((java.lang.reflect.ParameterizedType)(toGenericComponentType)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n            } \n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268864327/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"758aba35-3e8f-11e6-b040-e143d38cd0d0","method":{"position":"com.google.gson.Gson:136","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268864327/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268864327/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return toJsonTree(src, typeOfSrc);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1422","type":"CtUnaryOperatorImpl","sourcecode":"!(lenient)"},"failures":[],"tindex":"758ae146-3e8f-11e6-b040-bd9816dda424","method":{"position":"com.google.gson.stream.JsonReader:325","type":"CtMethodImpl","sourcecode":"public final void setLenient(boolean lenient) {\n    if (!lenient) {\n        {\n            com.google.gson.stream.JsonReader.this.boolean = lenient;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268864327/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"lenient"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:125","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonObject"},"failures":[],"tindex":"758ae147-3e8f-11e6-b040-2932189195a6","method":{"position":"com.google.gson.internal.Streams:67","type":"CtMethodImpl","sourcecode":"public static void write(com.google.gson.JsonElement element, com.google.gson.stream.JsonWriter writer) throws java.io.IOException {\n    if (element instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268864327/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<com.google.gson.JsonElement>.write(writer, element);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:240","type":"CtInvocationImpl","sourcecode":"from.getRawType().equals(to.getRawType())"},"failures":[],"tindex":"758ae148-3e8f-11e6-b040-abfdf17219d5","method":{"position":"com.google.gson.reflect.TypeToken:238","type":"CtMethodImpl","sourcecode":"private static boolean typeEquals(java.lang.reflect.ParameterizedType from, java.lang.reflect.ParameterizedType to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeVarMap) {\n    if (from.getRawType().equals(to.getRawType())) {\n        {\n            if (from.getRawType().equals(to.getRawType())) {\n                java.lang.reflect.Type[] java.lang.reflect.Type[] = from.getActualTypeArguments();\n                java.lang.reflect.Type[] java.lang.reflect.Type[] = to.getActualTypeArguments();\n                for (int int = 0 ; i < (fromArgs.int) ; i++) {\n                    if (!(com.google.gson.reflect.TypeToken.matches(fromArgs[i], toArgs[i], typeVarMap))) {\n                        return false;\n                    } \n                }\n                return true;\n            } \n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268864327/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from","to":"to"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":48,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
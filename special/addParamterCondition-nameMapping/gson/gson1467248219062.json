{"failureDictionary":{"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":105,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":82,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":94,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":176,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":104,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":2,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":187,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":171,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":127,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":129,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":113,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":135,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":79,"com.google.gson.functional.ObjectTest.testSingletonLists":53,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":38,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":201,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":66,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":33,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":64,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":37,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":39,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":81,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":190,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":109,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":133,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":178,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":182,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":1,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":165,"com.google.gson.functional.JsonTreeTest.testToJsonTree":76,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":183,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":11,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":15,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":35,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":147,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":180,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":186,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":132,"com.google.gson.functional.MapTest.testGeneralMapField":99,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":153,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":47,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":161,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":71,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":97,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":118,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":169,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":170,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":136,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":119,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":36,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":62,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":157,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":45,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":112,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":41,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":166,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":22,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":5,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":103,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":143,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":61,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":150,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":199,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":4,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":24,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":8,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":174,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":111,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":70,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":98,"com.google.gson.functional.MapTest.testInterfaceTypeMap":96,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":168,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":10,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":80,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":32,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":189,"com.google.gson.functional.EnumTest.testEnumSet":185,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":27,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":18,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":89,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":58,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":26,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":192,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":67,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":131,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":0,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":55,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":28,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":9,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":146,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":65,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":142,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":107,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":175,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":164,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":14,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":56,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":177,"com.google.gson.functional.MapTest.testSerializeMaps":88,"com.google.gson.functional.MapTest.testComplexKeysSerialization":102,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":134,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":122,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":49,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":184,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":73,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":50,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":151,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":145,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":83,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":91,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":120,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":128,"com.google.gson.functional.MapTest.testRawMapSerialization":101,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":196,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":34,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":59,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":69,"com.google.gson.functional.CollectionTest.testQueueSerialization":130,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":195,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":154,"com.google.gson.functional.MapTest.testMapOfMapSerialization":93,"com.google.gson.ObjectTypeAdapterTest.testSerialize":200,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":116,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":172,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":126,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":160,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":29,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":40,"com.google.gson.functional.MapTest.testMapWithQuotes":92,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":3,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":52,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":75,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":17,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":43,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":78,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":194,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":125,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":23,"com.google.gson.functional.MapTest.testMapSubclassSerialization":87,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":86,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":114,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":163,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":140,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":197,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":72,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":25,"com.google.gson.functional.EnumTest.testEnumSubclass":188,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":68,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":167,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":173,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":191,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":19,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":152,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":110,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":42,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":106,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":115,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":6,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":31,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":193,"com.google.gson.functional.ObjectTest.testNestedSerialization":60,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":148,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":117,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":44,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":100,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":139,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":16,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":159,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":198,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":155,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":57,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":48,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":21,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":54,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":12,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":144,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":95,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":121,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":77,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":158,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":138,"com.google.gson.functional.CollectionTest.testSetSerialization":137,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":20,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":84,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":51,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":123,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":141,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":124,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":162,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":149,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":46,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":85,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":13,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":90,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":181,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":179,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":74,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":30,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":63,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":108,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":7,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":156},"transformations":[{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[0,1],"tindex":"8c75a692-3e5d-11e6-b8d5-c520eea5c12d","method":{"position":"com.google.gson.Gson:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            out.value(value.toString());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247968992/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"8c75f4b3-3e5d-11e6-b8d5-5b571ebd49c9","method":{"position":"com.google.gson.Gson:552","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247968992/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            if (src != null) {\n                toJson(src, src.getClass(), writer);\n            } else {\n                toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull, writer);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:297","type":"CtBinaryOperatorImpl","sourcecode":"(value) instanceof java.lang.Number"},"failures":[2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201],"tindex":"8c761bc4-3e5d-11e6-b8d5-0d128c3ccbf6","method":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:74","type":"CtMethodImpl","sourcecode":"private java.lang.reflect.Type getRuntimeTypeIfMoreSpecific(java.lang.reflect.Type type, java.lang.Object value) {\n    if (value instanceof java.lang.Number) {\n        {\n            if ((value != null) && (((type == (java.lang.Object.java.lang.Object.java.lang.Class)) || (type instanceof java.lang.reflect.TypeVariable<?>)) || (type instanceof java.lang.Class<?>))) {\n                type = value.getClass();\n            } \n            return type;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247968992/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1413","type":"CtVariableReadImpl","sourcecode":"throwOnEof"},"failures":[],"tindex":"8c761bc5-3e5d-11e6-b8d5-bd33ef1a0376","method":{"position":"com.google.gson.stream.JsonReader:1331","type":"CtMethodImpl","sourcecode":"private int nextNonWhitespace(boolean throwOnEof) throws java.io.IOException {\n    if (throwOnEof) {\n        {\n            char[] char[] = com.google.gson.stream.JsonReader.this.char[];\n            int int = int;\n            int int = int;\n            while (true) {\n                if (p == l) {\n                    int = p;\n                    if (!(fillBuffer(1))) {\n                        break;\n                    } \n                    p = int;\n                    l = int;\n                } \n                int int = buffer[(p++)];\n                if (c == '\\n') {\n                    (int)++;\n                    int = p;\n                    continue;\n                } else if (((c == ' ') || (c == '\\r')) || (c == '\\t')) {\n                    continue;\n                } \n                if (c == '/') {\n                    int = p;\n                    if (p == l) {\n                        (int)--;\n                        boolean boolean = fillBuffer(2);\n                        (int)++;\n                        if (!charsLoaded) {\n                            return c;\n                        } \n                    } \n                    checkLenient();\n                    char char = buffer[int];\n                    switch (peek) {\n                        case '*' :\n                            (int)++;\n                            if (!(skipTo(\"*/\"))) {\n                                throw syntaxError(\"Unterminated comment\");\n                            } \n                            p = (int) + 2;\n                            l = int;\n                            continue;\n                        case '/' :\n                            (int)++;\n                            skipToEndOfLine();\n                            p = int;\n                            l = int;\n                            continue;\n                        default :\n                            return c;\n                    }\n                } else if (c == '#') {\n                    int = p;\n                    checkLenient();\n                    skipToEndOfLine();\n                    p = int;\n                    l = int;\n                } else {\n                    int = p;\n                    return c;\n                }\n            }\n            if (throwOnEof) {\n                throw new java.io.EOFException(((((\"End of input\" + \" at line \") + (getLineNumber())) + \" column \") + (getColumnNumber())));\n            } else {\n                return -1;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247968992/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"throwOnEof":"throwOnEof"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"8c770626-3e5d-11e6-b8d5-3184cef98ca8","method":{"position":"com.google.gson.Gson:127","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonParseException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247968992/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    } else {\n        {\n            return ((T)(fromJson(json, typeOfT)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"8c772d37-3e5d-11e6-b8d5-4381ed31f43c","method":{"position":"com.google.gson.Gson:591","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        {\n            com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = getAdapter(com.google.gson.reflect.TypeToken.get(typeOfSrc));\n            boolean boolean = writer.isLenient();\n            writer.setLenient(true);\n            boolean boolean = writer.isHtmlSafe();\n            writer.setHtmlSafe(boolean);\n            boolean boolean = writer.getSerializeNulls();\n            writer.setSerializeNulls(boolean);\n            try {\n                ((com.google.gson.TypeAdapter<java.lang.Object>)(adapter)).write(writer, src);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            } finally {\n                writer.setLenient(oldLenient);\n                writer.setHtmlSafe(oldHtmlSafe);\n                writer.setSerializeNulls(oldSerializeNulls);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247968992/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"8c772d38-3e5d-11e6-b8d5-75d873690a81","method":{"position":"com.google.gson.Gson:576","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247968992/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            try {\n                com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                toJson(src, typeOfSrc, jsonWriter);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:154","type":"CtUnaryOperatorImpl","sourcecode":"!create"},"failures":[],"tindex":"8c775449-3e5d-11e6-b8d5-699a2ced84e9","method":{"position":"com.google.gson.internal.LinkedTreeMap:121","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedTreeMap.Node<K, V> find(K key, boolean create) {\n    if (!create) {\n        {\n            java.util.Comparator<? super K> java.util.Comparator<? super K> = com.google.gson.internal.LinkedTreeMap.this.java.util.Comparator<? super K>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            int int = 0;\n            if (nearest != null) {\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                java.lang.Comparable<java.lang.Object> java.lang.Comparable<java.lang.Object> = comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>) ? ((java.lang.Comparable<java.lang.Object>)(key)) : null;\n                while (true) {\n                    comparison = comparableKey != null ? comparableKey.compareTo(nearest.K) : comparator.compare(key, nearest.K);\n                    if (comparison == 0) {\n                        return nearest;\n                    } \n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = comparison < 0 ? nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> : nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    if (child == null) {\n                        break;\n                    } \n                    nearest = child;\n                }\n            } \n            if (!create) {\n                return null;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.this.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            if (nearest == null) {\n                if ((comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>)) && (!(key instanceof java.lang.Comparable))) {\n                    throw new java.lang.ClassCastException(((key.getClass().getName()) + \" is not Comparable\"));\n                } \n                created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n            } else {\n                created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                if (comparison < 0) {\n                    nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                } else {\n                    nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                }\n                rebalance(nearest, true);\n            }\n            (int)++;\n            (int)++;\n            return created;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247968992/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"create":"create"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"8c777b5a-3e5d-11e6-b8d5-f19c996d3e18","method":{"position":"com.google.gson.Gson:285","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247968992/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            float float = value.floatValue();\n            checkValidFloatingPoint(floatValue);\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:356","type":"CtVariableReadImpl","sourcecode":"insert"},"failures":[],"tindex":"8c777b5b-3e5d-11e6-b8d5-9be6c954103b","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:338","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (insert) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247968992/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            for (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) {\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                int int = left != null ? left.int : 0;\n                int int = right != null ? right.int : 0;\n                int int = leftHeight - rightHeight;\n                if (delta == (-2)) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    int int = rightRight != null ? rightRight.int : 0;\n                    int int = rightLeft != null ? rightLeft.int : 0;\n                    int int = rightLeftHeight - rightRightHeight;\n                    if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                        rotateLeft(node);\n                    } else {\n                        assert rightDelta == 1;\n                        rotateRight(right);\n                        rotateLeft(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 2) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    int int = leftRight != null ? leftRight.int : 0;\n                    int int = leftLeft != null ? leftLeft.int : 0;\n                    int int = leftLeftHeight - leftRightHeight;\n                    if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                        rotateRight(node);\n                    } else {\n                        assert leftDelta == (-1);\n                        rotateLeft(left);\n                        rotateRight(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 0) {\n                    node.int = leftHeight + 1;\n                    if (insert) {\n                        break;\n                    } \n                } else {\n                    assert (delta == (-1)) || (delta == 1);\n                    node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                    if (!insert) {\n                        break;\n                    } \n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"insert"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:86","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonArray"},"failures":[],"tindex":"8c77a26c-3e5d-11e6-b8d5-7523117ca19e","method":{"position":"com.google.gson.JsonArray:57","type":"CtMethodImpl","sourcecode":"public void add(com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonArray) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247968992/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (element == null) {\n                element = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            java.util.List<com.google.gson.JsonElement>.add(element);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"8c77a26d-3e5d-11e6-b8d5-fb6a416a6930","method":{"position":"com.google.gson.Gson:510","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247968992/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src == null) {\n                return toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull);\n            } \n            return toJson(src, src.getClass());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonObject:54","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"8c77a26e-3e5d-11e6-b8d5-e7cfc4852c63","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:75","type":"CtMethodImpl","sourcecode":"private void put(com.google.gson.JsonElement value) {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247968992/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((java.lang.String) != null) {\n                if ((!(value.isJsonNull())) || (getSerializeNulls())) {\n                    com.google.gson.JsonObject com.google.gson.JsonObject = ((com.google.gson.JsonObject)(peek()));\n                    object.add(java.lang.String, value);\n                } \n                java.lang.String = null;\n            } else if (java.util.List<com.google.gson.JsonElement>.isEmpty()) {\n                com.google.gson.JsonElement = value;\n            } else {\n                com.google.gson.JsonElement com.google.gson.JsonElement = peek();\n                if (element instanceof com.google.gson.JsonArray) {\n                    ((com.google.gson.JsonArray)(element)).add(value);\n                } else {\n                    throw new java.lang.IllegalStateException();\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":13,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
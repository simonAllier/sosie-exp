{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":32,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":412,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":262,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":153,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":27,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":77,"com.google.gson.MixedStreamTest.testWriteLenient":124,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":10,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":347,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":135,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":93,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":9,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":407,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":228,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":380,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":423,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":64,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":70,"com.google.gson.functional.ObjectTest.testSingletonLists":7,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":229,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":344,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":413,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":249,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":106,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":185,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":17,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":122,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":99,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":49,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":126,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":165,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":267,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":219,"com.google.gson.functional.EnumTest.testEnumCaseMapping":379,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":263,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":411,"com.google.gson.functional.JsonTreeTest.testToJsonTree":444,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":131,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":447,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":332,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":198,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":404,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":108,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":15,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":312,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":141,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":217,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":358,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":20,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":421,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":354,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":445,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":82,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":184,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":168,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":303,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":446,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":283,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":390,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":343,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":78,"com.google.gson.functional.StreamingTypeAdaptersTest.testFromJsonTree":88,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":364,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":47,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":103,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":439,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":169,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":282,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":386,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":13,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":117,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":160,"com.google.gson.JsonPrimitiveTest.testEqualsAcrossTypes":464,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":158,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":296,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":98,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":320,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":367,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":152,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":238,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":150,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":346,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":40,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":341,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":357,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":111,"com.google.gson.functional.CollectionTest.testSetDeserialization":95,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":424,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":275,"com.google.gson.functional.EnumTest.testEnumSet":374,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":368,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":237,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithNestedWildcards":465,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":427,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":278,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":266,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":366,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":42,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":214,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":170,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":146,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":161,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":143,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":188,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":162,"com.google.gson.functional.MapTest.testMapSerialization":431,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":145,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":36,"com.google.gson.JsonPrimitiveTest.testByteEqualsShort":463,"com.google.gson.JsonPrimitiveTest.testByteEqualsBigInteger":454,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":226,"com.google.gson.functional.MapTest.testSerializeMaps":257,"com.google.gson.functional.MapTest.testComplexKeysSerialization":437,"com.google.gson.JsonPrimitiveTest.testLongEqualsBigInteger":456,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":396,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":76,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":110,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":206,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":61,"com.google.gson.internal.LinkedHashTreeMapTest.testDoubleCapacity":3,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":129,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":155,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithBasicWildcards":467,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":241,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":172,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":440,"com.google.gson.functional.PrettyPrintingTest.testMap":127,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":210,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":400,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":147,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":253,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":329,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":121,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":417,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":338,"com.google.gson.functional.CollectionTest.testQueueSerialization":401,"com.google.gson.functional.MapTest.testMapSerializationEmpty":438,"com.google.gson.functional.MapTest.testMapOfMapSerialization":430,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":301,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":116,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":167,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":250,"com.google.gson.functional.FieldNamingTest.testIdentity":227,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":414,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":239,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":28,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":22,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":137,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":157,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":271,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":268,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":187,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":415,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":91,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":304,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":119,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":115,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":339,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":315,"com.google.gson.functional.MapTest.testMapSubclassSerialization":426,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":30,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":75,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":230,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":371,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":79,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":105,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":69,"com.google.gson.functional.EnumTest.testEnumSubclass":376,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":306,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":16,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":123,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":292,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":355,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":240,"com.google.gson.JsonPrimitiveTest.testShortEqualsInteger":460,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":58,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":398,"com.google.gson.JsonPrimitiveTest.testByteEqualsLong":450,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":92,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":118,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":44,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":302,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":351,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":8,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":256,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":391,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":388,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":68,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":109,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":65,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":245,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":272,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":363,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":148,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":416,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":433,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":175,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":420,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":369,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":183,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":314,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":37,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":295,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":1,"com.google.gson.JsonPrimitiveTest.testDoubleEqualsBigDecimal":452,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithTypeParameters":466,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":360,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":298,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":114,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":178,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":310,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":340,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":132,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":255,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":63,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":323,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":428,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":200,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":196,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":62,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":319,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":53,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":277,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":284,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":189,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":372,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":333,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":74,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":194,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":397,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":128,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":432,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":353,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":247,"com.google.gson.functional.PrimitiveTest.testShortSerialization":313,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":202,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":221,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":308,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":223,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":212,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":94,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":29,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":222,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":316,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":80,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":66,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":181,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":5,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":318,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":156,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":51,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":104,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":285,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":231,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":325,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":48,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":55,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":242,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":25,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":12,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":378,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":191,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":270,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":405,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":370,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":243,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":195,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":179,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":201,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":46,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":335,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":203,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":305,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":173,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":290,"com.google.gson.JsonPrimitiveTest.testEquals":462,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":199,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":375,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":35,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":38,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":11,"com.google.gson.functional.MapTest.testGeneralMapField":260,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":385,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":209,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":356,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":393,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":348,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":434,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":294,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":326,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":382,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":309,"com.google.gson.MixedStreamTest.testReadMixedStreamed":4,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":299,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":45,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":269,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":408,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":97,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":220,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":41,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":342,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":359,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":246,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":317,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":6,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":233,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":177,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeNullField":86,"com.google.gson.JsonPrimitiveTest.testEqualsDoesNotEquateStringAndNonStringTypes":461,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":287,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":205,"com.google.gson.JsonPrimitiveTest.testFloatEqualsDouble":455,"com.google.gson.functional.ObjectTest.testNestedDeserialization":26,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":252,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":174,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":281,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":33,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":218,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":362,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":154,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":365,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":171,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":190,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":139,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":410,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":193,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":293,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":435,"com.google.gson.functional.MapTest.testInterfaceTypeMap":259,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":211,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":322,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":84,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":377,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":60,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":373,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":327,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":216,"com.google.gson.JsonPrimitiveTest.testIntegerEqualsLong":458,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":34,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":403,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":50,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":273,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":71,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":321,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":286,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":361,"com.google.gson.JsonPrimitiveTest.testShortEqualsLong":453,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":352,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":274,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":324,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":402,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":101,"com.google.gson.JsonPrimitiveTest.testShortEqualsBigInteger":449,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeWithCustomTypeAdapter":85,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":234,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":59,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":406,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":180,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":142,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":113,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":166,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":443,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":112,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":383,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":300,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserialize":89,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":144,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":102,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":182,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":21,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":258,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":337,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":24,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":83,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":399,"com.google.gson.functional.MapTest.testRawMapSerialization":436,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":57,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":279,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":39,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":204,"com.google.gson.functional.PrimitiveTest.testByteSerialization":311,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":387,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":425,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":164,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":81,"com.google.gson.JsonPrimitiveTest.testEqualsIntegerAndBigInteger":451,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":136,"com.google.gson.JsonPrimitiveTest.testFloatEqualsBigDecimal":448,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":392,"com.google.gson.JsonPrimitiveTest.testByteEqualsInteger":457,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":224,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":72,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":265,"com.google.gson.functional.MapTest.testMapWithQuotes":429,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":330,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":236,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":163,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":251,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":90,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":328,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":422,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":197,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":67,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":23,"com.google.gson.internal.LinkedHashTreeMapTest.testDoubleCapacityAllNodesOnLeft":0,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":133,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":176,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":307,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":14,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":395,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":349,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":331,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":138,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":232,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":336,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":254,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":207,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":350,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":384,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":192,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":288,"com.google.gson.JsonPrimitiveTest.testIntegerEqualsBigInteger":459,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":235,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":31,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":208,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":248,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":18,"com.google.gson.functional.ObjectTest.testNestedSerialization":280,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":291,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":297,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":381,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":134,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":261,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":149,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":186,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":125,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":442,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":276,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":96,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":54,"com.google.gson.GsonBuilderTest.testCreatingMoreThanOnce":120,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":264,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":19,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":52,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":100,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":418,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":213,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":56,"com.google.gson.functional.CollectionTest.testSetSerialization":409,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":130,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":244,"com.google.gson.functional.StringTest.testStringValueSerialization":419,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":289,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":43,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":441,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":140,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":394,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":159,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":334,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":225,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":107,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeNullObject":87,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":215,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":73,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":345,"com.google.gson.internal.LinkedHashTreeMapTest.testAvlWalker":2,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":151,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":389},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:578","type":"CtBinaryOperatorImpl"},"failures":[0,1,2,3],"tindex":"fd217cc6-3f2c-11e6-a48f-85d9f388a373","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:626","type":"CtMethodImpl","sourcecode":"void reset(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root == null) {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            for (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root ; n != null ; n = n.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) {\n                n.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = stackTop;\n                stackTop = n;\n            }\n            com.google.gson.internal.LinkedHashTreeMap.AvlIterator.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = stackTop;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467336841101/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"root"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.internal.bind.DateTypeAdapter:86","type":"CtBinaryOperatorImpl"},"failures":[4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117],"tindex":"fd226727-3f2c-11e6-a48f-879585a11f45","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:101","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nvoid read(com.google.gson.stream.JsonReader reader, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value == null) {\n        {\n            java.lang.Object java.lang.Object = com.google.gson.TypeAdapter<?>.read(reader);\n            if ((fieldValue != null) || (!isPrimitive)) {\n                field.set(value, fieldValue);\n            } \n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467336841101/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:92","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"fd228e38-3f2c-11e6-a48f-3f2a6c16f719","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:804","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof java.util.Iterator) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467336841101/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (o instanceof java.util.Map.Entry) && ((findByEntry(((java.util.Map.Entry<?, ?>)(o)))) != null);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"fd22b549-3f2c-11e6-a48f-290375406fe1","method":{"position":"com.google.gson.Gson:127","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonParseException {\n    if (json == null) {\n        {\n            return ((T)(fromJson(json, typeOfT)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467336841101/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:554","type":"CtBinaryOperatorImpl"},"failures":[118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,6,135,136,137,138,139,140,141,27,142,143,144,32,145,146,33,147,34,35,148,36,37,38,149,150,39,151,40,41,42,152,153,154,155,43,156,44,157,158,159,160,161,162,163,45,46,47,164,165,166,167,168,169,170,171,172,173,49,174,175,176,177,178,179,180,181,182,183,184,185,186,55,187,188,189,190,191,192,193,58,59,60,194,61,62,195,63,196,197,198,199,200,201,202,203,204,205,206,66,207,70,74,208,209,210,211,212,81,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,96,97,229,98,230,231,99,100,232,233,101,102,234,235,236,103,237,238,239,104,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,107,109,263,264,265,266,267,268,269],"tindex":"fd22dc5a-3f2c-11e6-a48f-a333f4e20cc4","method":{"position":"com.google.gson.GsonBuilder:551","type":"CtMethodImpl","sourcecode":"private void addTypeAdaptersForDate(java.lang.String datePattern, int dateStyle, int timeStyle, java.util.List<com.google.gson.TypeAdapterFactory> factories) {\n    if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n        {\n            com.google.gson.DefaultDateTypeAdapter com.google.gson.DefaultDateTypeAdapter;\n            if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n                dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(datePattern);\n            } else if ((dateStyle != (java.text.DateFormat.java.text.DateFormat.int)) && (timeStyle != (java.text.DateFormat.java.text.DateFormat.int))) {\n                dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(dateStyle , timeStyle);\n            } else {\n                return ;\n            }\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.util.Date.java.util.Date.java.lang.Class), dateTypeAdapter));\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Timestamp.java.sql.Timestamp.java.lang.Class), dateTypeAdapter));\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Date.java.sql.Date.java.lang.Class), dateTypeAdapter));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467336841101/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"datePattern":"datePattern"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"fd23036b-3f2c-11e6-a48f-e1caf258f1bf","method":{"position":"com.google.gson.DefaultDateTypeAdapter:77","type":"CtMethodImpl","sourcecode":"public java.util.Date deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT, com.google.gson.JsonDeserializationContext context) throws com.google.gson.JsonParseException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467336841101/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    } else {\n        {\n            if (!(json instanceof com.google.gson.JsonPrimitive)) {\n                throw new com.google.gson.JsonParseException(\"The date should be a string value\");\n            } \n            java.util.Date java.util.Date = deserializeToDate(json);\n            if (typeOfT == (java.util.Date.java.util.Date.java.lang.Class)) {\n                return date;\n            } else if (typeOfT == (java.sql.Timestamp.java.sql.Timestamp.java.lang.Class)) {\n                return new java.sql.Timestamp(date.getTime());\n            } else if (typeOfT == (java.sql.Date.java.sql.Date.java.lang.Class)) {\n                return new java.sql.Date(date.getTime());\n            } else {\n                throw new java.lang.IllegalArgumentException((((getClass()) + \" cannot deserialize to \") + typeOfT));\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"fd232a7c-3f2c-11e6-a48f-6f76fcb8e6a0","method":{"position":"com.google.gson.Gson:871","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467336841101/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (json == null) {\n                return null;\n            } \n            return ((T)(fromJson(new com.google.gson.internal.bind.JsonTreeReader(json), typeOfT)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.JsonPrimitive:297","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"fd232a7d-3f2c-11e6-a48f-41a20002b4c8","method":{"position":"com.google.gson.internal.bind.ObjectTypeAdapter:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Object value) throws java.io.IOException {\n    if (value instanceof java.lang.Number) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467336841101/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            com.google.gson.TypeAdapter<java.lang.Object> com.google.gson.TypeAdapter<java.lang.Object> = ((com.google.gson.TypeAdapter<java.lang.Object>)(com.google.gson.Gson.getAdapter(value.getClass())));\n            if (typeAdapter instanceof com.google.gson.internal.bind.ObjectTypeAdapter) {\n                out.beginObject();\n                out.endObject();\n                return ;\n            } \n            typeAdapter.write(out, value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"fd23518e-3f2c-11e6-a48f-6f6175104121","method":{"position":"com.google.gson.Gson:576","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467336841101/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            try {\n                com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                toJson(src, typeOfSrc, jsonWriter);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"fd23789f-3f2c-11e6-a48f-4d9d2ad0ada4","method":{"position":"com.google.gson.internal.$Gson$Types:151","type":"CtMethodImpl","sourcecode":"static boolean equal(java.lang.Object a, java.lang.Object b) {\n    return (a == b) || ((a != null) && (a.equals(b)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl"},"failures":[118,119,121,122,123,126,127,128,129,130,131,132,133,134,6,270,271,7,272,273,274,275,276,277,141,278,279,280,281,282,283,284,285,286,28,287,288,29,30,31,143,144,145,147,37,149,153,155,156,157,158,159,160,161,162,46,47,289,290,291,292,293,294,295,296,297,166,298,299,300,301,302,303,304,305,167,306,307,168,169,308,309,170,310,311,171,312,313,314,315,172,316,173,317,318,319,49,174,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,176,335,336,337,338,339,340,341,177,342,178,179,343,344,180,345,346,347,348,349,350,351,182,183,352,353,354,186,355,187,356,357,358,359,360,361,362,363,188,57,189,190,191,192,193,364,194,195,196,198,199,200,201,202,203,206,67,207,365,69,366,367,368,71,72,73,369,370,209,210,211,371,372,373,374,375,212,376,377,378,379,380,81,381,382,82,83,84,90,383,384,385,386,387,388,389,390,213,391,392,393,394,395,396,397,398,214,215,216,217,218,219,220,221,93,399,94,400,401,402,403,404,405,406,407,408,409,410,222,223,224,225,226,227,411,412,413,414,415,416,417,418,419,228,229,230,231,232,233,234,236,237,240,241,242,244,245,246,248,250,251,252,420,421,422,423,424,425,106,255,426,257,427,428,258,429,430,431,432,433,259,434,435,260,261,436,437,438,439,440,262,107,108,109,110,112,113,441,114,115,116,117,263,264,442,266,267,268,269],"tindex":"fd2378a0-3f2c-11e6-a48f-1555859a77fe","method":{"position":"com.google.gson.Gson:532","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467336841101/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src == null) {\n                {\n                    java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n                    toJson(src, typeOfSrc, writer);\n                    return writer.toString();\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467336841101/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl"},"failures":[198],"tindex":"fd23c6c1-3f2c-11e6-a48f-899631924634","method":{"position":"com.google.gson.Gson:468","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467336841101/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src == null) {\n                return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            return toJsonTree(src, src.getClass());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[167,169,171],"tindex":"fd23c6c2-3f2c-11e6-a48f-ef661891a259","method":{"position":"com.google.gson.internal.bind.TypeAdapters:282","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467336841101/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:113","type":"CtInvocationImpl"},"failures":[443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464],"tindex":"fd23edd3-3f2c-11e6-a48f-7d3852672d8a","method":{"position":"com.google.gson.JsonPrimitive:333","type":"CtMethodImpl","sourcecode":"private static boolean isIntegral(com.google.gson.JsonPrimitive primitive) {\n    if (primitive.isBoolean()) {\n        {\n            if ((primitive.java.lang.Object) instanceof java.lang.Number) {\n                java.lang.Number java.lang.Number = ((java.lang.Number)(primitive.java.lang.Object));\n                return ((((number instanceof java.math.BigInteger) || (number instanceof java.lang.Long)) || (number instanceof java.lang.Integer)) || (number instanceof java.lang.Short)) || (number instanceof java.lang.Byte);\n            } \n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467336841101/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"primitive"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:164","type":"CtBinaryOperatorImpl"},"failures":[465,466,467],"tindex":"fd23edd4-3f2c-11e6-a48f-9334bb0c9968","method":{"position":"com.google.gson.reflect.TypeToken:272","type":"CtMethodImpl","sourcecode":"private static boolean matches(java.lang.reflect.Type from, java.lang.reflect.Type to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeMap) {\n    if (to instanceof java.lang.reflect.GenericArrayType) {\n        {\n            return (to.equals(from)) || ((from instanceof java.lang.reflect.TypeVariable) && (to.equals(typeMap.get(((java.lang.reflect.TypeVariable<?>)(from)).getName()))));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467336841101/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"to"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:232","type":"CtInvocationImpl"},"failures":[],"tindex":"fd23edd5-3f2c-11e6-a48f-1f3723e8e89a","method":{"position":"com.google.gson.internal.$Gson$Types:226","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type getGenericSupertype(java.lang.reflect.Type context, java.lang.Class<?> rawType, java.lang.Class<?> toResolve) {\n    if (toResolve == rawType) {\n        return context;\n    } \n    if (toResolve.isInterface()) {\n        java.lang.Class<?>[] java.lang.Class<?>[] = rawType.getInterfaces();\n        for (int int = 0, int int = interfaces.int ; i < length ; i++) {\n            if ((interfaces[i]) == toResolve) {\n                return rawType.getGenericInterfaces()[i];\n            } else if (toResolve.isAssignableFrom(interfaces[i])) {\n                return com.google.gson.internal.$Gson$Types.getGenericSupertype(rawType.getGenericInterfaces()[i], interfaces[i], toResolve);\n            } \n        }\n    } \n    if (!(rawType.isInterface())) {\n        while (rawType != (java.lang.Object.java.lang.Object.java.lang.Class)) {\n            java.lang.Class<?> java.lang.Class<?> = rawType.getSuperclass();\n            if (rawSupertype == toResolve) {\n                return rawType.getGenericSuperclass();\n            } else if (toResolve.isAssignableFrom(rawSupertype)) {\n                return com.google.gson.internal.$Gson$Types.getGenericSupertype(rawType.getGenericSuperclass(), rawSupertype, toResolve);\n            } \n            rawType = rawSupertype;\n        }\n    } \n    return toResolve;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"rawType"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:92","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"fd2414e6-3f2c-11e6-a48f-7ff0360f90e7","method":{"position":"com.google.gson.internal.LinkedTreeMap:574","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (o instanceof java.util.Iterator) {\n        {\n            if (!(o instanceof java.util.Map.Entry)) {\n                return false;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n            if (node == null) {\n                return false;\n            } \n            removeInternal(node, true);\n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467336841101/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl"},"failures":[198],"tindex":"fd2414e7-3f2c-11e6-a48f-6f75708c8d7f","method":{"position":"com.google.gson.Gson:133","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467336841101/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return toJsonTree(src);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:250","type":"CtVariableReadImpl"},"failures":[124,167,168,169,171,172,173],"tindex":"fd243bf8-3f2c-11e6-a48f-cbde94ce0cdb","method":{"position":"com.google.gson.Gson:249","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> doubleAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467336841101/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return in.nextDouble();\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    double double = value.doubleValue();\n                    checkValidFloatingPoint(doubleValue);\n                    out.value(value);\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:125","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"fd243bf9-3f2c-11e6-a48f-1fede98fcca1","method":{"position":"com.google.gson.JsonArray:81","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement set(int index, com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467336841101/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return java.util.List<com.google.gson.JsonElement>.set(index, element);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1422","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"fd24630a-3f2c-11e6-a48f-351f4e5e7de3","method":{"position":"com.google.gson.stream.JsonReader:325","type":"CtMethodImpl","sourcecode":"public final void setLenient(boolean lenient) {\n    if (!lenient) {\n        {\n            com.google.gson.stream.JsonReader.this.boolean = lenient;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467336841101/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"lenient"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"fd24630b-3f2c-11e6-a48f-3523f9a0cae1","method":{"position":"com.google.gson.Gson:136","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        {\n            return toJsonTree(src, typeOfSrc);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467336841101/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"fd24630c-3f2c-11e6-a48f-815db7a7b619","method":{"position":"com.google.gson.Gson:532","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467336841101/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src == null) {\n                {\n                    java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n                    toJson(src, typeOfSrc, writer);\n                    return writer.toString();\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467336841101/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":23,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
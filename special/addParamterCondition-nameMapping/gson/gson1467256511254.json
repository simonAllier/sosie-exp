{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":55,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":470,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":343,"com.google.gson.functional.StringTest.testStringValueDeserialization":468,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":206,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":596,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":427,"com.google.gson.stream.JsonWriterTest.testRepeatedName":340,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":558,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":93,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":181,"com.google.gson.MixedStreamTest.testWriteLenient":92,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":226,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":152,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":434,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":51,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":238,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":150,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":242,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":602,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":372,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":640,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":195,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":567,"com.google.gson.JsonObjectTest.testAddingNullPropertyValue":68,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":123,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":277,"com.google.gson.functional.ObjectTest.testSingletonLists":148,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":133,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":428,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":471,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":551,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":84,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":369,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":183,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":503,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":442,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":163,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":656,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":605,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":288,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":316,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":484,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":29,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":447,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":597,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":201,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":543,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":644,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":381,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":39,"com.google.gson.functional.EnumTest.testEnumCaseMapping":639,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":79,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":469,"com.google.gson.functional.JsonTreeTest.testToJsonTree":2,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":542,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":449,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":0,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":24,"com.google.gson.JsonObjectTest.testEqualsNonEmptyObject":69,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":130,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":409,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":313,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":531,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":423,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":553,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":14,"com.google.gson.internal.LinkedTreeMapTest.testLargeSetOfRandomKeys":62,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":495,"com.google.gson.functional.ObjectTest.testNullDeserialization":392,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":141,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":481,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":160,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":349,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":612,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":559,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":389,"com.google.gson.internal.LinkedTreeMapTest.testContainsNonComparableKeyReturnsFalse":63,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":379,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":270,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":170,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":348,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":446,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":32,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":444,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":231,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":617,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":616,"com.google.gson.JsonParserTest.testParseString":58,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":441,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":87,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":314,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":582,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":408,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":622,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":172,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":527,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":426,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":580,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":227,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":456,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":594,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":220,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":420,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":50,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":111,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":333,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":88,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":465,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":595,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":169,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":521,"com.google.gson.JsonPrimitiveTest.testEqualsAcrossTypes":5,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":156,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":259,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":304,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":40,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":98,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":563,"com.google.gson.metrics.PerformanceTest.testDummy":653,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":134,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":99,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":121,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":363,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":25,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":393,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":462,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":320,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":511,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":108,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":422,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":269,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":144,"com.google.gson.functional.CollectionTest.testSetDeserialization":241,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":196,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":159,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":507,"com.google.gson.functional.EnumTest.testEnumSet":632,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":587,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":122,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":365,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":323,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":412,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":164,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":120,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":295,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":599,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":110,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":607,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":184,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":376,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":78,"com.google.gson.functional.MapTest.testHashMapDeserialization":454,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":556,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":491,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":432,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":517,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":628,"com.google.gson.MixedStreamTest.testReadNulls":651,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":211,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":272,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":263,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":397,"com.google.gson.functional.MapTest.testSortedMap":459,"com.google.gson.functional.MapTest.testMapSerialization":327,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":273,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":249,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":592,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":533,"com.google.gson.functional.MapTest.testSerializeMaps":80,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":247,"com.google.gson.functional.MapTest.testComplexKeysSerialization":205,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":506,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":461,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":537,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":143,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":286,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":283,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":223,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":9,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":637,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":70,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":198,"com.google.gson.internal.LinkedHashTreeMapTest.testDoubleCapacity":359,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":94,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":391,"com.google.gson.functional.MapTest.testStringKeyDeserialization":41,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":534,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":305,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":90,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":334,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":562,"com.google.gson.functional.PrettyPrintingTest.testMap":321,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":513,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":557,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":488,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":76,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":395,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":404,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":315,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":536,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":655,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":474,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":478,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":71,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":418,"com.google.gson.functional.MapTest.testMapSerializationEmpty":460,"com.google.gson.functional.CollectionTest.testQueueSerialization":492,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":588,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnName":345,"com.google.gson.functional.MapTest.testMapOfMapSerialization":326,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":579,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":424,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":497,"com.google.gson.stream.JsonWriterTest.testNameWithoutValue":337,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":86,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":237,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":370,"com.google.gson.functional.FieldNamingTest.testIdentity":248,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":472,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":26,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":135,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":173,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":13,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":33,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":97,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":147,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":545,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":645,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":473,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":540,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":208,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":585,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":436,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":297,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":413,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":12,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":236,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":419,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":451,"com.google.gson.functional.MapTest.testMapSubclassSerialization":322,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":615,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":42,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":129,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":509,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":251,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":299,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":577,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":641,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":228,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":403,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":627,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":182,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":119,"com.google.gson.functional.EnumTest.testEnumSubclass":635,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":598,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":162,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":657,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":544,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":266,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":601,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":113,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":218,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":547,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":210,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":583,"com.google.gson.stream.JsonWriterTest.testTwoNames":336,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":209,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":20,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":296,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":530,"com.google.gson.internal.LinkedTreeMapTest.testEqualsAndHashCode":65,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":386,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":589,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":96,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":581,"com.google.gson.stream.JsonWriterTest.testObjectsInArrays":341,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":438,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":149,"com.google.gson.MixedStreamTest.testWriteNulls":17,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":453,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":529,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":463,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":523,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":117,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":142,"com.google.gson.CommentsTest.testParseComments":648,"com.google.gson.JsonObjectTest.testReadPropertyWithEmptyStringName":66,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":151,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":280,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":306,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":255,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":261,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":600,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":510,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":329,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":476,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":374,"com.google.gson.MixedStreamTest.testReadInvalidState":649,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":193,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":128,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":440,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":614,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":45,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":555,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":356,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":538,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":252,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":572,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":235,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":425,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":610,"com.google.gson.functional.MapTest.testMapDeserialization":37,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":526,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":421,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":450,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":452,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":276,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":104,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":324,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":279,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":629,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeMap":28,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":224,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":192,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":636,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":186,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":174,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":388,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":213,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":515,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":21,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":410,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":127,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":207,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":222,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":197,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":328,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":443,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":541,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":368,"com.google.gson.functional.PrimitiveTest.testShortSerialization":613,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":15,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":604,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":383,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":578,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":603,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":85,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":554,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":244,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":634,"com.google.gson.internal.LinkedTreeMapTest.testEmptyStringValues":64,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":239,"com.google.gson.internal.LinkedTreeMapTest.testPutOverrides":61,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":225,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":35,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":571,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":504,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":620,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":44,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":284,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":433,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":303,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":346,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":625,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":621,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":311,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":361,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":103,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":112,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":175,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":18,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":287,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":399,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":271,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":107,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":114,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":584,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":179,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":155,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":638,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":215,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":508,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":187,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":240,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":335,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":366,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":275,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":281,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":319,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":561,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":265,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":415,"com.google.gson.stream.JsonWriterTest.testNullStringValue":338,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":282,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":430,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":22,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":489,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":548,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":609,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":586,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":91,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":256,"com.google.gson.JsonPrimitiveTest.testEquals":4,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":278,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":633,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":274,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":46,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":153,"com.google.gson.functional.MapTest.testGeneralMapField":204,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":82,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":624,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":260,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":267,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":512,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":435,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":330,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":400,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":467,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":552,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":606,"com.google.gson.ObjectTypeAdapterTest.testDeserializeNullValue":59,"com.google.gson.MixedStreamTest.testReadMixedStreamed":302,"com.google.gson.JsonObjectTest.testDeepCopy":72,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":411,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":457,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":573,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":264,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":500,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":646,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":132,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":590,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":382,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":109,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":189,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":38,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":487,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":34,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":355,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":367,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":139,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":291,"com.google.gson.stream.JsonWriterTest.testArraysInObjects":339,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":574,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":347,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":318,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":464,"com.google.gson.JsonPrimitiveTest.testEqualsDoesNotEquateStringAndNonStringTypes":3,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":136,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":398,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":496,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":631,"com.google.gson.functional.ObjectTest.testNestedDeserialization":180,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":308,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":373,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":390,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":75,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":19,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":380,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":623,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":254,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":360,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":458,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":475,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":118,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":89,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":214,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":54,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":229,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":502,"com.google.gson.functional.ObjectTest.testNullSerialization":8,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":217,"com.google.gson.stream.JsonWriterTest.testDoubles":350,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":486,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":36,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":203,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":546,"com.google.gson.functional.MapTest.testInterfaceTypeMap":202,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":532,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":514,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":101,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":549,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":285,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":310,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":221,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":516,"com.google.gson.MixedStreamTest.testReadClosed":650,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":401,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":378,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":565,"com.google.gson.MixedStreamTest.testWriteClosed":301,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":77,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":494,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":102,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":154,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":445,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":124,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":100,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":49,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":177,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":253,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":191,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":105,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":157,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":493,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":292,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":593,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":294,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":219,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":498,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":431,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":30,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":233,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":626,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":570,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":1,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":406,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":145,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":518,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":48,"com.google.gson.functional.CollectionTest.testQueueDeserialization":505,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":576,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":591,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":480,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":74,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":293,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":439,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":171,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":200,"com.google.gson.stream.JsonWriterTest.testDeepNestingObjects":344,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":417,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":178,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":232,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":81,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":298,"com.google.gson.functional.MapTest.testRawMapSerialization":332,"com.google.gson.JsonParserTest.testParseReader":57,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":501,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":429,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":312,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":166,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":212,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":250,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":16,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":56,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":394,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":522,"com.google.gson.functional.PrimitiveTest.testByteSerialization":611,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":6,"com.google.gson.ObjectTypeAdapterTest.testSerialize":83,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":230,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":560,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":52,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":353,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":245,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":125,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":477,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":643,"com.google.gson.functional.MapTest.testMapWithQuotes":325,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":405,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":568,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":479,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":364,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":539,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":371,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":31,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":618,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":402,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":194,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":630,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":116,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":176,"com.google.gson.internal.LinkedHashTreeMapTest.testDoubleCapacityAllNodesOnLeft":357,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":199,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":354,"com.google.gson.functional.ObjectTest.testEmptyStringDeserialization":387,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":414,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":158,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":535,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":190,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":407,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":53,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":290,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":416,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":608,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":10,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":499,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":525,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":309,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":437,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":519,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":216,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":137,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":642,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":43,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":396,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":27,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":550,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":307,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":351,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":165,"com.google.gson.JsonObjectTest.testAddingStringProperties":73,"com.google.gson.functional.ObjectTest.testNestedSerialization":167,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":257,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":466,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":483,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":564,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":384,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":331,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":47,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":106,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":652,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":658,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":161,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":375,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":619,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":23,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":131,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":188,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":566,"com.google.gson.GsonBuilderTest.testCreatingMoreThanOnce":647,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":654,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":168,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":185,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":289,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":352,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":482,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":528,"com.google.gson.functional.CollectionTest.testSetSerialization":243,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":268,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":115,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":448,"com.google.gson.functional.StringTest.testStringValueSerialization":485,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":146,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":95,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":234,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":490,"com.google.gson.MixedStreamTest.testWriteInvalidState":300,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":520,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":385,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":569,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":262,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":575,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":258,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":317,"com.google.gson.ObjectTypeAdapterTest.testDeserialize":60,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":246,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":140,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":67,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":138,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":377,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":126,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":11,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":7,"com.google.gson.internal.LinkedHashTreeMapTest.testAvlWalker":358,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":455,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":342,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":362,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":524},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:111","type":"CtInvocationImpl","sourcecode":"primitive.isString()"},"failures":[0,1,2,3,4,5],"tindex":"dafde37b-3e70-11e6-a87b-4f01089963b0","method":{"position":"com.google.gson.JsonPrimitive:333","type":"CtMethodImpl","sourcecode":"private static boolean isIntegral(com.google.gson.JsonPrimitive primitive) {\n    if (primitive.isString()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255664477/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((primitive.java.lang.Object) instanceof java.lang.Number) {\n                java.lang.Number java.lang.Number = ((java.lang.Number)(primitive.java.lang.Object));\n                return ((((number instanceof java.math.BigInteger) || (number instanceof java.lang.Long)) || (number instanceof java.lang.Integer)) || (number instanceof java.lang.Short)) || (number instanceof java.lang.Byte);\n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"primitive"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:92","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof java.util.Iterator"},"failures":[],"tindex":"dafe319c-3e70-11e6-a87b-7d316a6a3dc8","method":{"position":"com.google.gson.internal.LinkedTreeMap:481","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"rawtypes\")\n@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof java.util.Iterator) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255664477/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof java.util.Map.Entry) {\n                java.util.Map.Entry java.util.Map.Entry = ((java.util.Map.Entry)(o));\n                return ((K) == null ? (other.getKey()) == null : K.equals(other.getKey())) && ((V) == null ? (other.getValue()) == null : V.equals(other.getValue()));\n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.TreeTypeAdapter:55","type":"CtInvocationImpl","sourcecode":"value.isJsonNull()"},"failures":[6,7,8,9,10,11,12,13,14,15,16,17,18],"tindex":"dafe58ad-3e70-11e6-a87b-bda7956cbc7e","method":{"position":"com.google.gson.internal.bind.TypeAdapters:680","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, com.google.gson.JsonElement value) throws java.io.IOException {\n    if (value.isJsonNull()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255664477/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if ((value == null) || (value.isJsonNull())) {\n                out.nullValue();\n            } else if (value.isJsonPrimitive()) {\n                com.google.gson.JsonPrimitive com.google.gson.JsonPrimitive = value.getAsJsonPrimitive();\n                if (primitive.isNumber()) {\n                    out.value(primitive.getAsNumber());\n                } else if (primitive.isBoolean()) {\n                    out.value(primitive.getAsBoolean());\n                } else {\n                    out.value(primitive.getAsString());\n                }\n            } else if (value.isJsonArray()) {\n                out.beginArray();\n                for (com.google.gson.JsonElement com.google.gson.JsonElement : value.getAsJsonArray()) {\n                    write(out, e);\n                }\n                out.endArray();\n            } else if (value.isJsonObject()) {\n                out.beginObject();\n                for (java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> : value.getAsJsonObject().entrySet()) {\n                    out.name(e.getKey());\n                    write(out, e.getValue());\n                }\n                out.endObject();\n            } else {\n                throw new java.lang.IllegalArgumentException((\"Couldn't write \" + (value.getClass())));\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:167","type":"CtUnaryOperatorImpl","sourcecode":"!create"},"failures":[19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73],"tindex":"dafe58ae-3e70-11e6-a87b-1bc7b2c20048","method":{"position":"com.google.gson.internal.LinkedTreeMap:121","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedTreeMap.Node<K, V> find(K key, boolean create) {\n    if (!create) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255664477/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (!create) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255664477/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    java.util.Comparator<? super K> java.util.Comparator<? super K> = com.google.gson.internal.LinkedTreeMap.this.java.util.Comparator<? super K>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    int int = 0;\n                    if (nearest != null) {\n                        @java.lang.SuppressWarnings(value = \"unchecked\")\n                        java.lang.Comparable<java.lang.Object> java.lang.Comparable<java.lang.Object> = comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>) ? ((java.lang.Comparable<java.lang.Object>)(key)) : null;\n                        while (true) {\n                            comparison = comparableKey != null ? comparableKey.compareTo(nearest.K) : comparator.compare(key, nearest.K);\n                            if (comparison == 0) {\n                                return nearest;\n                            } \n                            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = comparison < 0 ? nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> : nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                            if (child == null) {\n                                break;\n                            } \n                            nearest = child;\n                        }\n                    } \n                    if (!create) {\n                        return null;\n                    } \n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.this.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    if (nearest == null) {\n                        if ((comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>)) && (!(key instanceof java.lang.Comparable))) {\n                            throw new java.lang.ClassCastException(((key.getClass().getName()) + \" is not Comparable\"));\n                        } \n                        created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                        com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                    } else {\n                        created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                        if (comparison < 0) {\n                            nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                        } else {\n                            nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                        }\n                        rebalance(nearest, true);\n                    }\n                    (int)++;\n                    (int)++;\n                    return created;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"create":"create"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:107","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonArray"},"failures":[],"tindex":"dafea6cf-3e70-11e6-a87b-d77fd1cb0d87","method":{"position":"com.google.gson.internal.$Gson$Types:213","type":"CtMethodImpl","sourcecode":"private static int hashCodeOrZero(java.lang.Object o) {\n    return o != null ? o.hashCode() : 0;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:103","type":"CtVariableReadImpl","sourcecode":"deserialization"},"failures":[74,75,76,77],"tindex":"dafea6d0-3e70-11e6-a87b-851ed0e5b1da","method":{"position":"com.google.gson.internal.Excluder:96","type":"CtMethodImpl","sourcecode":"public com.google.gson.internal.Excluder withExclusionStrategy(com.google.gson.ExclusionStrategy exclusionStrategy, boolean serialization, boolean deserialization) {\n    if (deserialization) {\n        {\n            com.google.gson.internal.Excluder com.google.gson.internal.Excluder = clone();\n            if (serialization) {\n                result.java.util.List<com.google.gson.ExclusionStrategy> = new java.util.ArrayList<com.google.gson.ExclusionStrategy>(java.util.List<com.google.gson.ExclusionStrategy>);\n                result.java.util.List<com.google.gson.ExclusionStrategy>.add(exclusionStrategy);\n            } \n            if (deserialization) {\n                result.java.util.List<com.google.gson.ExclusionStrategy> = new java.util.ArrayList<com.google.gson.ExclusionStrategy>(java.util.List<com.google.gson.ExclusionStrategy>);\n                result.java.util.List<com.google.gson.ExclusionStrategy>.add(exclusionStrategy);\n            } \n            return result;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255664477/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deserialization":"deserialization"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[14],"tindex":"dafea6d1-3e70-11e6-a87b-c96a3b76757b","method":{"position":"com.google.gson.Gson:133","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255664477/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return toJsonTree(src);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[78,79],"tindex":"dafecde2-3e70-11e6-a87b-f544a1a79877","method":{"position":"com.google.gson.Gson:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    out.value(value.toString());\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255664477/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255664477/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:213","type":"CtBinaryOperatorImpl","sourcecode":"(indent.length()) == 0"},"failures":[],"tindex":"dafecde3-3e70-11e6-a87b-e3bbd2700397","method":{"position":"com.google.gson.stream.JsonWriter:212","type":"CtMethodImpl","sourcecode":"public final void setIndent(java.lang.String indent) {\n    if ((indent.length()) == 0) {\n        {\n            if ((indent.length()) == 0) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255664477/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if ((indent.length()) == 0) {\n                        com.google.gson.stream.JsonWriter.this.java.lang.String = null;\n                        com.google.gson.stream.JsonWriter.this.java.lang.String = \":\";\n                    } else {\n                        com.google.gson.stream.JsonWriter.this.java.lang.String = indent;\n                        com.google.gson.stream.JsonWriter.this.java.lang.String = \": \";\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255664477/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"indent"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[80,81,82,83,84],"tindex":"dafecde4-3e70-11e6-a87b-c78ea698039e","method":{"position":"com.google.gson.internal.bind.ObjectTypeAdapter:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Object value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255664477/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            com.google.gson.TypeAdapter<java.lang.Object> com.google.gson.TypeAdapter<java.lang.Object> = ((com.google.gson.TypeAdapter<java.lang.Object>)(com.google.gson.Gson.getAdapter(value.getClass())));\n            if (typeAdapter instanceof com.google.gson.internal.bind.ObjectTypeAdapter) {\n                out.beginObject();\n                out.endObject();\n                return ;\n            } \n            typeAdapter.write(out, value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:213","type":"CtBinaryOperatorImpl","sourcecode":"(indent.length()) == 0"},"failures":[],"tindex":"dafef4f5-3e70-11e6-a87b-c96bb0cd9b4f","method":{"position":"com.google.gson.stream.JsonWriter:212","type":"CtMethodImpl","sourcecode":"public final void setIndent(java.lang.String indent) {\n    if ((indent.length()) == 0) {\n        {\n            if ((indent.length()) == 0) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255664477/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if ((indent.length()) == 0) {\n                        com.google.gson.stream.JsonWriter.this.java.lang.String = null;\n                        com.google.gson.stream.JsonWriter.this.java.lang.String = \":\";\n                    } else {\n                        com.google.gson.stream.JsonWriter.this.java.lang.String = indent;\n                        com.google.gson.stream.JsonWriter.this.java.lang.String = \": \";\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255664477/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"indent"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[85],"tindex":"dafef4f6-3e70-11e6-a87b-59ca6db9d6c4","method":{"position":"com.google.gson.internal.bind.TypeAdapters:223","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255664477/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:250","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[86,87,88,89,90,91,92],"tindex":"dafef4f7-3e70-11e6-a87b-5d0a838570ab","method":{"position":"com.google.gson.Gson:273","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> floatAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255664477/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (serializeSpecialFloatingPointValues) {\n                        return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n                    } \n                    return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                        @java.lang.Override\n                        public java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                            if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                                in.nextNull();\n                                return null;\n                            } \n                            return ((float)(in.nextDouble()));\n                        }\n\n                        @java.lang.Override\n                        public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                            if (value == null) {\n                                out.nullValue();\n                                return ;\n                            } \n                            float float = value.floatValue();\n                            checkValidFloatingPoint(floatValue);\n                            out.value(value);\n                        }\n                    };\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255664477/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:462","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[],"tindex":"daff1c08-3e70-11e6-a87b-41c40b3c6c31","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:162","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(double value) throws java.io.IOException {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        {\n            if ((!(isLenient())) && ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value)))) {\n                throw new java.lang.IllegalArgumentException((\"JSON forbids NaN and infinities: \" + value));\n            } \n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255664477/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[93,94,95,96,97,98,19,20,21,99,100,101,22,23,102,103,104,105,24,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,29,135,136,137,138,31,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,85,188,189,190,191,1,192,33,2,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,42,43,226,227,228,44,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,45,46,47,250,251,252,253,254,255,48,49,256,257,258,259,260,261,262,263,264,265,50,266,267,268,269,270,271,51,52,53,54,272,55,273,75,76,77,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,83],"tindex":"daff1c09-3e70-11e6-a87b-c53984c39587","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:86","type":"CtMethodImpl","sourcecode":"private com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField createBoundField(final com.google.gson.Gson context, final java.lang.reflect.Field field, final java.lang.String name, final com.google.gson.reflect.TypeToken<?> fieldType, boolean serialize, boolean deserialize) {\n    if (field.isSynthetic()) {\n        {\n            final boolean boolean = com.google.gson.internal.Primitives.isPrimitive(fieldType.getRawType());\n            return new com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField(name, serialize, deserialize) {\n                final com.google.gson.TypeAdapter<?> typeAdapter = getFieldAdapter(context, field, fieldType);\n\n                @java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n                @java.lang.Override\n                void write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                    java.lang.Object java.lang.Object = field.get(value);\n                    com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n                    t.write(writer, fieldValue);\n                }\n\n                @java.lang.Override\n                void read(com.google.gson.stream.JsonReader reader, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                    java.lang.Object java.lang.Object = com.google.gson.TypeAdapter<?>.read(reader);\n                    if ((fieldValue != null) || (!isPrimitive)) {\n                        field.set(value, fieldValue);\n                    } \n                }\n\n                public boolean writeField(java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                    if (!(boolean))\n                        return false;\n                    \n                    java.lang.Object java.lang.Object = field.get(value);\n                    return fieldValue != value;\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255664477/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"field"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[93,94,97,98,99,100,101,104,105,106,113,305,114,115,306,307,308,116,309,118,119,120,121,122,124,125,126,128,130,310,311,312,313,314,315,316,133,29,135,136,137,31,139,140,141,142,143,145,146,6,7,147,148,151,154,157,159,161,164,166,167,169,172,174,175,177,183,184,317,318,189,319,320,190,191,192,193,194,195,196,321,197,198,199,322,80,323,324,200,325,326,327,328,329,202,330,203,204,331,332,205,333,334,206,207,210,211,212,213,215,216,217,220,222,225,42,43,230,231,232,233,234,235,236,237,238,239,240,242,243,244,245,246,247,248,45,47,335,251,252,253,254,255,256,257,258,259,260,263,265,50,266,269,270,272,273,76,275,278,279,281,15,282,283,285,287,290,291,294,295,296,297,298,299,336,337,338,339,340,341,342,343,344,345,304,83,84,346,347,18,348,349],"tindex":"daff431a-3e70-11e6-a87b-4959bfb5d91a","method":{"position":"com.google.gson.stream.JsonWriter:385","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter name(java.lang.String name) throws java.io.IOException {\n    if (name == null) {\n        {\n            if (name == null) {\n                {\n                    if (name == null) {\n                        throw new java.lang.NullPointerException(\"name == null\");\n                    } \n                    if ((java.lang.String) != null) {\n                        throw new java.lang.IllegalStateException();\n                    } \n                    if ((int) == 0) {\n                        throw new java.lang.IllegalStateException(\"JsonWriter is closed.\");\n                    } \n                    java.lang.String = name;\n                    return com.google.gson.stream.JsonWriter.this;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255664477/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255664477/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:298","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[342,343,350],"tindex":"daff6a2b-3e70-11e6-a87b-193bc285cc74","method":{"position":"com.google.gson.stream.JsonWriter:461","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(double value) throws java.io.IOException {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                {\n                    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                        throw new java.lang.IllegalArgumentException((\"Numeric values must be finite, but was \" + value));\n                    } \n                    writeDeferredName();\n                    beforeValue(false);\n                    java.io.Writer.append(java.lang.Double.toString(value));\n                    return com.google.gson.stream.JsonWriter.this;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255664477/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255664477/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:462","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[],"tindex":"daff6a2c-3e70-11e6-a87b-e5ed640a737d","method":{"position":"com.google.gson.stream.JsonWriter:461","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(double value) throws java.io.IOException {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                {\n                    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                        throw new java.lang.IllegalArgumentException((\"Numeric values must be finite, but was \" + value));\n                    } \n                    writeDeferredName();\n                    beforeValue(false);\n                    java.io.Writer.append(java.lang.Double.toString(value));\n                    return com.google.gson.stream.JsonWriter.this;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255664477/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255664477/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:298","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[93,94,97,100,122,351,310,311,312,352,313,314,315,192,353,354,355],"tindex":"daff6a2d-3e70-11e6-a87b-69c7275311b0","method":{"position":"com.google.gson.Gson:297","type":"CtMethodImpl","sourcecode":"private void checkValidFloatingPoint(double value) {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                throw new java.lang.IllegalArgumentException(((value + \" is not a valid double value as per JSON specification. To override this\") + \" behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.\"));\n            } \n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255664477/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:274","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[],"tindex":"daff913e-3e70-11e6-a87b-a7f62be3b363","method":{"position":"com.google.gson.Gson:273","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> floatAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255664477/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (serializeSpecialFloatingPointValues) {\n                        return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n                    } \n                    return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                        @java.lang.Override\n                        public java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                            if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                                in.nextNull();\n                                return null;\n                            } \n                            return ((float)(in.nextDouble()));\n                        }\n\n                        @java.lang.Override\n                        public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                            if (value == null) {\n                                out.nullValue();\n                                return ;\n                            } \n                            float float = value.floatValue();\n                            checkValidFloatingPoint(floatValue);\n                            out.value(value);\n                        }\n                    };\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255664477/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[29],"tindex":"daff913f-3e70-11e6-a87b-1125fc48e315","method":{"position":"com.google.gson.Gson:136","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        {\n            return toJsonTree(src, typeOfSrc);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255664477/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"daff9140-3e70-11e6-a87b-fffe3402ba23","method":{"position":"com.google.gson.DefaultDateTypeAdapter:94","type":"CtMethodImpl","sourcecode":"private java.util.Date deserializeToDate(com.google.gson.JsonElement json) {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255664477/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (json == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255664477/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    synchronized(java.text.DateFormat) {\n                        try {\n                            return java.text.DateFormat.parse(json.getAsString());\n                        } catch (java.text.ParseException ignored) {\n                        }\n                        try {\n                            return java.text.DateFormat.parse(json.getAsString());\n                        } catch (java.text.ParseException ignored) {\n                        }\n                        try {\n                            return java.text.DateFormat.parse(json.getAsString());\n                        } catch (java.text.ParseException e) {\n                            throw new com.google.gson.JsonSyntaxException(json.getAsString() , e);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:305","type":"CtBinaryOperatorImpl","sourcecode":"node != null"},"failures":[356],"tindex":"daff9141-3e70-11e6-a87b-d5782f4caf07","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:311","type":"CtMethodImpl","sourcecode":"private void replaceInParent(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node, com.google.gson.internal.LinkedHashTreeMap.Node<K, V> replacement) {\n    if (replacement != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255664477/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            if (replacement != null) {\n                replacement.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = parent;\n            } \n            if (parent != null) {\n                if ((parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) == node) {\n                    parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = replacement;\n                } else {\n                    assert (parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) == node;\n                    parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = replacement;\n                }\n            } else {\n                int int = (node.int) & ((com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[].int) - 1);\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[][index] = replacement;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"replacement"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.JsonObject:54","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"daffb852-3e70-11e6-a87b-d5785553500c","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n@java.lang.Override\nvoid write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value == null) {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255664477/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.IllegalAccessException();\n            } else {\n                {\n                    java.lang.Object java.lang.Object = field.get(value);\n                    com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n                    t.write(writer, fieldValue);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255664477/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"daffb853-3e70-11e6-a87b-4d68b52488eb","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n@java.lang.Override\nvoid write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value == null) {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255664477/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.IllegalAccessException();\n            } else {\n                {\n                    java.lang.Object java.lang.Object = field.get(value);\n                    com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n                    t.write(writer, fieldValue);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255664477/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:164","type":"CtBinaryOperatorImpl","sourcecode":"from instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"daffb854-3e70-11e6-a87b-5918d437c0f7","method":{"position":"com.google.gson.reflect.TypeToken:122","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic boolean isAssignableFrom(java.lang.reflect.Type from) {\n    if (from == null) {\n        {\n            if (from == null) {\n                {\n                    if (from instanceof java.lang.reflect.GenericArrayType) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255664477/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            if (from == null) {\n                                return false;\n                            } \n                            if (java.lang.reflect.Type.equals(from)) {\n                                return true;\n                            } \n                            if ((java.lang.reflect.Type) instanceof java.lang.Class<?>) {\n                                return java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from));\n                            } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.ParameterizedType) {\n                                return com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n                            } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.GenericArrayType) {\n                                return (java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from))) && (com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.GenericArrayType)(java.lang.reflect.Type))));\n                            } else {\n                                throw com.google.gson.reflect.TypeToken.buildUnexpectedTypeError(java.lang.reflect.Type, java.lang.Class.java.lang.Class.java.lang.Class, java.lang.reflect.ParameterizedType.java.lang.reflect.ParameterizedType.java.lang.Class, java.lang.reflect.GenericArrayType.java.lang.reflect.GenericArrayType.java.lang.Class);\n                            }\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255664477/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255664477/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:120","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonNull"},"failures":[],"tindex":"daffdf65-3e70-11e6-a87b-6727d1c24d65","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:808","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonNull) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255664477/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (!(o instanceof java.util.Map.Entry)) {\n                return false;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n            if (node == null) {\n                return false;\n            } \n            removeInternal(node, true);\n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:243","type":"CtBinaryOperatorImpl","sourcecode":"annotation != null"},"failures":[287,288,289,291,292,294],"tindex":"daffdf66-3e70-11e6-a87b-5b8311bcc588","method":{"position":"com.google.gson.internal.Excluder:242","type":"CtMethodImpl","sourcecode":"private boolean isValidUntil(com.google.gson.annotations.Until annotation) {\n    if (annotation != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255664477/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (annotation != null) {\n                double double = annotation.value();\n                if (annotationVersion <= (double)) {\n                    return false;\n                } \n            } \n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"daffdf67-3e70-11e6-a87b-7b727f40208a","method":{"position":"com.google.gson.Gson:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    out.value(value.toString());\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255664477/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255664477/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:578","type":"CtBinaryOperatorImpl","sourcecode":"root == null"},"failures":[357,356,358,359],"tindex":"db000678-3e70-11e6-a87b-7ba9da3561ac","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:626","type":"CtMethodImpl","sourcecode":"void reset(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root == null) {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            for (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root ; n != null ; n = n.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) {\n                n.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = stackTop;\n                stackTop = n;\n            }\n            com.google.gson.internal.LinkedHashTreeMap.AvlIterator.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = stackTop;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255664477/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"root"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:340","type":"CtBinaryOperatorImpl","sourcecode":"toResolve instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"db000679-3e70-11e6-a87b-112194a9b3fc","method":{"position":"com.google.gson.internal.$Gson$Types:322","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type resolve(java.lang.reflect.Type context, java.lang.Class<?> contextRawType, java.lang.reflect.Type toResolve) {\n    while (true) {\n        if (toResolve instanceof java.lang.reflect.TypeVariable) {\n            java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(toResolve));\n            toResolve = com.google.gson.internal.$Gson$Types.resolveTypeVariable(context, contextRawType, typeVariable);\n            if (toResolve == typeVariable) {\n                return toResolve;\n            } \n        } else if ((toResolve instanceof java.lang.Class) && (((java.lang.Class<?>)(toResolve)).isArray())) {\n            java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getComponentType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, componentType);\n            return componentType == newComponentType ? original : com.google.gson.internal.$Gson$Types.arrayOf(newComponentType);\n        } else if (toResolve instanceof java.lang.reflect.GenericArrayType) {\n            java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getGenericComponentType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, componentType);\n            return componentType == newComponentType ? original : com.google.gson.internal.$Gson$Types.arrayOf(newComponentType);\n        } else if (toResolve instanceof java.lang.reflect.ParameterizedType) {\n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getOwnerType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, ownerType);\n            boolean boolean = newOwnerType != ownerType;\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getActualTypeArguments();\n            for (int int = 0, int int = args.int ; t < length ; t++) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, args[t]);\n                if (resolvedTypeArgument != (args[t])) {\n                    if (!changed) {\n                        args = args.clone();\n                        changed = true;\n                    } \n                    args[t] = resolvedTypeArgument;\n                } \n            }\n            return changed ? com.google.gson.internal.$Gson$Types.newParameterizedTypeWithOwner(newOwnerType, original.getRawType(), args) : original;\n        } else if (toResolve instanceof java.lang.reflect.WildcardType) {\n            java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(toResolve));\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getLowerBounds();\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getUpperBounds();\n            if ((originalLowerBound.int) == 1) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, originalLowerBound[0]);\n                if (lowerBound != (originalLowerBound[0])) {\n                    return com.google.gson.internal.$Gson$Types.supertypeOf(lowerBound);\n                } \n            } else if ((originalUpperBound.int) == 1) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, originalUpperBound[0]);\n                if (upperBound != (originalUpperBound[0])) {\n                    return com.google.gson.internal.$Gson$Types.subtypeOf(upperBound);\n                } \n            } \n            return original;\n        } else {\n            return toResolve;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"toResolve"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"db00067a-3e70-11e6-a87b-6f993da8f7c7","method":{"position":"com.google.gson.Gson:695","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.lang.String json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255664477/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:250","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[93,360,94,95,361,96,97,98,19,20,21,99,100,101,22,23,102,103,104,105,24,106,107,362,108,109,110,363,364,111,365,25,26,112,113,305,114,366,115,306,367,368,307,369,370,371,308,116,117,309,118,119,120,121,122,123,124,125,126,127,128,27,129,130,372,131,132,133,134,29,373,374,375,135,136,30,137,138,376,377,378,379,380,381,382,383,384,139,140,141,142,143,144,145,146,6,7,147,148,149,150,151,152,153,154,155,156,157,385,158,386,159,160,8,161,387,162,388,163,389,164,165,166,167,390,168,169,170,171,391,392,172,173,174,175,176,177,178,179,180,181,393,394,182,183,9,395,396,397,10,184,398,399,400,401,32,185,186,402,403,404,405,406,407,408,409,410,187,411,317,412,85,413,414,415,416,417,418,188,419,420,421,422,423,318,424,189,425,319,426,427,428,429,430,431,432,11,320,433,434,435,436,190,437,438,439,440,191,441,442,443,12,0,444,445,1,192,33,2,193,446,194,195,196,447,321,197,198,448,449,450,199,451,452,453,454,34,322,80,35,36,323,455,324,37,200,456,457,38,458,325,326,327,39,201,328,329,459,202,330,203,204,331,332,40,205,460,41,333,461,462,334,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,42,43,226,227,228,44,229,463,464,465,230,466,467,231,232,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,238,81,239,488,489,490,491,492,493,494,495,240,496,497,498,499,241,242,500,501,243,502,503,504,505,506,507,508,509,244,245,246,247,248,510,249,45,46,47,511,250,335,512,513,514,251,515,516,252,253,254,255,48,49,256,257,258,259,517,518,519,520,82,521,522,523,524,525,526,527,528,529,530,531,532,353,533,260,261,262,534,535,536,537,538,263,539,264,265,50,266,540,267,268,269,270,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,86,590,591,592,593,594,595,596,597,598,599,354,600,87,88,601,602,603,604,605,606,607,78,608,271,609,610,611,89,612,613,614,615,616,617,618,90,619,620,621,622,623,91,355,624,625,626,627,51,52,13,53,54,272,74,55,273,628,75,76,77,274,275,276,277,629,630,14,278,279,280,281,15,282,16,631,283,284,632,633,634,635,636,637,285,286,638,639,640,641,287,288,289,290,291,292,293,294,642,643,295,644,645,646,296,297,647,648,298,649,650,299,17,300,92,651,652,301,302,303,653,79,654,304,655,656,657,348,349,658],"tindex":"db002d8b-3e70-11e6-a87b-4d1b66a7a0de","method":{"position":"com.google.gson.Gson:249","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> doubleAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255664477/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                {\n                    if (serializeSpecialFloatingPointValues) {\n                        return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n                    } \n                    return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                        @java.lang.Override\n                        public java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                            if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                                in.nextNull();\n                                return null;\n                            } \n                            return in.nextDouble();\n                        }\n\n                        @java.lang.Override\n                        public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                            if (value == null) {\n                                out.nullValue();\n                                return ;\n                            } \n                            double double = value.doubleValue();\n                            checkValidFloatingPoint(doubleValue);\n                            out.value(value);\n                        }\n                    };\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255664477/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:154","type":"CtUnaryOperatorImpl","sourcecode":"!create"},"failures":[],"tindex":"db00549c-3e70-11e6-a87b-27862a0dbd85","method":{"position":"com.google.gson.internal.LinkedTreeMap:121","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedTreeMap.Node<K, V> find(K key, boolean create) {\n    if (!create) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255664477/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (!create) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255664477/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    java.util.Comparator<? super K> java.util.Comparator<? super K> = com.google.gson.internal.LinkedTreeMap.this.java.util.Comparator<? super K>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    int int = 0;\n                    if (nearest != null) {\n                        @java.lang.SuppressWarnings(value = \"unchecked\")\n                        java.lang.Comparable<java.lang.Object> java.lang.Comparable<java.lang.Object> = comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>) ? ((java.lang.Comparable<java.lang.Object>)(key)) : null;\n                        while (true) {\n                            comparison = comparableKey != null ? comparableKey.compareTo(nearest.K) : comparator.compare(key, nearest.K);\n                            if (comparison == 0) {\n                                return nearest;\n                            } \n                            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = comparison < 0 ? nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> : nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                            if (child == null) {\n                                break;\n                            } \n                            nearest = child;\n                        }\n                    } \n                    if (!create) {\n                        return null;\n                    } \n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.this.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    if (nearest == null) {\n                        if ((comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>)) && (!(key instanceof java.lang.Comparable))) {\n                            throw new java.lang.ClassCastException(((key.getClass().getName()) + \" is not Comparable\"));\n                        } \n                        created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                        com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                    } else {\n                        created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                        if (comparison < 0) {\n                            nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                        } else {\n                            nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                        }\n                        rebalance(nearest, true);\n                    }\n                    (int)++;\n                    (int)++;\n                    return created;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"create":"create"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:118","type":"CtBinaryOperatorImpl","sourcecode":"annotation != null"},"failures":[],"tindex":"db007bad-3e70-11e6-a87b-b746474655d4","method":{"position":"com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory:50","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nstatic com.google.gson.TypeAdapter<?> getTypeAdapter(com.google.gson.internal.ConstructorConstructor constructorConstructor, com.google.gson.Gson gson, com.google.gson.reflect.TypeToken<?> fieldType, com.google.gson.annotations.JsonAdapter annotation) {\n    if (annotation != null) {\n        {\n            java.lang.Class<?> java.lang.Class<?> = annotation.value();\n            if (com.google.gson.TypeAdapter.com.google.gson.TypeAdapter.java.lang.Class.isAssignableFrom(value)) {\n                java.lang.Class<com.google.gson.TypeAdapter<?>> java.lang.Class<com.google.gson.TypeAdapter<?>> = ((java.lang.Class<com.google.gson.TypeAdapter<?>>)(value));\n                return constructorConstructor.get(com.google.gson.reflect.TypeToken.get(typeAdapter)).construct();\n            } \n            if (com.google.gson.TypeAdapterFactory.com.google.gson.TypeAdapterFactory.java.lang.Class.isAssignableFrom(value)) {\n                java.lang.Class<com.google.gson.TypeAdapterFactory> java.lang.Class<com.google.gson.TypeAdapterFactory> = ((java.lang.Class<com.google.gson.TypeAdapterFactory>)(value));\n                return constructorConstructor.get(com.google.gson.reflect.TypeToken.get(typeAdapterFactory)).construct().create(gson, fieldType);\n            } \n            throw new java.lang.IllegalArgumentException(\"@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.\");\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255664477/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"db007bae-3e70-11e6-a87b-e3850ac634a0","method":{"position":"com.google.gson.Gson:552","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255664477/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            if (src != null) {\n                toJson(src, src.getClass(), writer);\n            } else {\n                toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull, writer);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1531","type":"CtBinaryOperatorImpl","sourcecode":"(c >= 'A') && (c <= 'F')"},"failures":[],"tindex":"db007baf-3e70-11e6-a87b-7193a4196661","method":{"position":"com.google.gson.stream.JsonReader:755","type":"CtMethodImpl","sourcecode":"private boolean isLiteral(char c) throws java.io.IOException {\n    if ((c >= 'A') && (c <= 'F')) {\n        {\n            switch (c) {\n                case '/' :\n                case '\\\\' :\n                case ';' :\n                case '#' :\n                case '=' :\n                    checkLenient();\n                case '{' :\n                case '}' :\n                case '[' :\n                case ']' :\n                case ':' :\n                case ',' :\n                case ' ' :\n                case '\\t' :\n                case '\\f' :\n                case '\\r' :\n                case '\\n' :\n                    return false;\n                default :\n                    return true;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255664477/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"c"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[],"tindex":"db007bb0-3e70-11e6-a87b-0fbc39ac7f84","method":{"position":"com.google.gson.stream.JsonWriter:385","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter name(java.lang.String name) throws java.io.IOException {\n    if (name == null) {\n        {\n            if (name == null) {\n                {\n                    if (name == null) {\n                        throw new java.lang.NullPointerException(\"name == null\");\n                    } \n                    if ((java.lang.String) != null) {\n                        throw new java.lang.IllegalStateException();\n                    } \n                    if ((int) == 0) {\n                        throw new java.lang.IllegalStateException(\"JsonWriter is closed.\");\n                    } \n                    java.lang.String = name;\n                    return com.google.gson.stream.JsonWriter.this;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255664477/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255664477/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[],"tindex":"db00a2c1-3e70-11e6-a87b-2f194e3f7773","method":{"position":"com.google.gson.Gson:491","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255664477/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.bind.JsonTreeWriter com.google.gson.internal.bind.JsonTreeWriter = new com.google.gson.internal.bind.JsonTreeWriter();\n            toJson(src, typeOfSrc, writer);\n            return writer.get();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:250","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[],"tindex":"db00a2c2-3e70-11e6-a87b-d9ee9f2a4d65","method":{"position":"com.google.gson.Gson:249","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> doubleAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255664477/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                {\n                    if (serializeSpecialFloatingPointValues) {\n                        return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n                    } \n                    return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                        @java.lang.Override\n                        public java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                            if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                                in.nextNull();\n                                return null;\n                            } \n                            return in.nextDouble();\n                        }\n\n                        @java.lang.Override\n                        public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                            if (value == null) {\n                                out.nullValue();\n                                return ;\n                            } \n                            double double = value.doubleValue();\n                            checkValidFloatingPoint(doubleValue);\n                            out.value(value);\n                        }\n                    };\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255664477/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl","sourcecode":"in == null"},"failures":[],"tindex":"db00a2c3-3e70-11e6-a87b-0981c6e3cc75","method":{"position":"com.google.gson.TypeAdapter:254","type":"CtMethodImpl","sourcecode":"public final T fromJson(java.io.Reader in) throws java.io.IOException {\n    if (in == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255664477/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(in);\n            return read(reader);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"db00a2c4-3e70-11e6-a87b-414c3e5535af","method":{"position":"com.google.gson.Gson:532","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255664477/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n            toJson(src, typeOfSrc, writer);\n            return writer.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"db00c9d5-3e70-11e6-a87b-3fdbdf46fa72","method":{"position":"com.google.gson.DefaultDateTypeAdapter:94","type":"CtMethodImpl","sourcecode":"private java.util.Date deserializeToDate(com.google.gson.JsonElement json) {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255664477/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (json == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255664477/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    synchronized(java.text.DateFormat) {\n                        try {\n                            return java.text.DateFormat.parse(json.getAsString());\n                        } catch (java.text.ParseException ignored) {\n                        }\n                        try {\n                            return java.text.DateFormat.parse(json.getAsString());\n                        } catch (java.text.ParseException ignored) {\n                        }\n                        try {\n                            return java.text.DateFormat.parse(json.getAsString());\n                        } catch (java.text.ParseException e) {\n                            throw new com.google.gson.JsonSyntaxException(json.getAsString() , e);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:79","type":"CtUnaryOperatorImpl","sourcecode":"!(json instanceof com.google.gson.JsonPrimitive)"},"failures":[],"tindex":"db00c9d6-3e70-11e6-a87b-5f711443c4b8","method":{"position":"com.google.gson.Gson:871","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n        {\n            if (json == null) {\n                return null;\n            } \n            return ((T)(fromJson(new com.google.gson.internal.bind.JsonTreeReader(json), typeOfT)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255664477/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:240","type":"CtInvocationImpl","sourcecode":"from.getRawType().equals(to.getRawType())"},"failures":[],"tindex":"db00c9d7-3e70-11e6-a87b-75e4bdefdd26","method":{"position":"com.google.gson.reflect.TypeToken:185","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.ParameterizedType to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeVarMap) {\n    if (from == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255664477/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (from.getRawType().equals(from.getRawType())) {\n                {\n                    if (from == null) {\n                        return false;\n                    } \n                    if (to.equals(from)) {\n                        return true;\n                    } \n                    java.lang.Class<?> java.lang.Class<?> = com.google.gson.internal.$Gson$Types.getRawType(from);\n                    java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = null;\n                    if (from instanceof java.lang.reflect.ParameterizedType) {\n                        ptype = ((java.lang.reflect.ParameterizedType)(from));\n                    } \n                    if (ptype != null) {\n                        java.lang.reflect.Type[] java.lang.reflect.Type[] = ptype.getActualTypeArguments();\n                        java.lang.reflect.TypeVariable<?>[] java.lang.reflect.TypeVariable<?>[] = clazz.getTypeParameters();\n                        for (int int = 0 ; i < (tArgs.int) ; i++) {\n                            java.lang.reflect.Type java.lang.reflect.Type = tArgs[i];\n                            java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = tParams[i];\n                            while (arg instanceof java.lang.reflect.TypeVariable<?>) {\n                                java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(arg));\n                                arg = typeVarMap.get(v.getName());\n                            }\n                            typeVarMap.put(var.getName(), arg);\n                        }\n                        if (com.google.gson.reflect.TypeToken.typeEquals(ptype, to, typeVarMap)) {\n                            return true;\n                        } \n                    } \n                    for (java.lang.reflect.Type java.lang.reflect.Type : clazz.getGenericInterfaces()) {\n                        if (com.google.gson.reflect.TypeToken.isAssignableFrom(itype, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap))) {\n                            return true;\n                        } \n                    }\n                    java.lang.reflect.Type java.lang.reflect.Type = clazz.getGenericSuperclass();\n                    return com.google.gson.reflect.TypeToken.isAssignableFrom(sType, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255664477/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from","to":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"db00c9d8-3e70-11e6-a87b-252a94d9be3a","method":{"position":"com.google.gson.stream.JsonWriter:413","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            writeDeferredName();\n            beforeValue(false);\n            string(value);\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255664477/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[],"tindex":"db00f0e9-3e70-11e6-a87b-65d625a95a0c","method":{"position":"com.google.gson.Gson:510","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src) {\n    if (src != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255664477/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src == null) {\n                return toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull);\n            } \n            return toJson(src, src.getClass());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:188","type":"CtBinaryOperatorImpl","sourcecode":"from == null"},"failures":[],"tindex":"db00f0ea-3e70-11e6-a87b-89ffe8b14848","method":{"position":"com.google.gson.reflect.TypeToken:122","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic boolean isAssignableFrom(java.lang.reflect.Type from) {\n    if (from == null) {\n        {\n            if (from == null) {\n                {\n                    if (from instanceof java.lang.reflect.GenericArrayType) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255664477/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            if (from == null) {\n                                return false;\n                            } \n                            if (java.lang.reflect.Type.equals(from)) {\n                                return true;\n                            } \n                            if ((java.lang.reflect.Type) instanceof java.lang.Class<?>) {\n                                return java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from));\n                            } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.ParameterizedType) {\n                                return com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n                            } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.GenericArrayType) {\n                                return (java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from))) && (com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.GenericArrayType)(java.lang.reflect.Type))));\n                            } else {\n                                throw com.google.gson.reflect.TypeToken.buildUnexpectedTypeError(java.lang.reflect.Type, java.lang.Class.java.lang.Class.java.lang.Class, java.lang.reflect.ParameterizedType.java.lang.reflect.ParameterizedType.java.lang.Class, java.lang.reflect.GenericArrayType.java.lang.reflect.GenericArrayType.java.lang.Class);\n                            }\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255664477/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255664477/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:305","type":"CtBinaryOperatorImpl","sourcecode":"node != null"},"failures":[],"tindex":"db00f0eb-3e70-11e6-a87b-afe7ed3c4c93","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:686","type":"CtMethodImpl","sourcecode":"void add(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node) {\n    if (node != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255664477/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            node.int = 1;\n            if (((int) > 0) && (((int) & 1) == 0)) {\n                (int)++;\n                (int)--;\n                (int)++;\n            } \n            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node;\n            (int)++;\n            if (((int) > 0) && (((int) & 1) == 0)) {\n                (int)++;\n                (int)--;\n                (int)++;\n            } \n            for (int int = 4 ; ((int) & (scale - 1)) == (scale - 1) ; scale *= 2) {\n                if ((int) == 0) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                    center.int = (right.int) + 1;\n                    left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                } else if ((int) == 1) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                    center.int = (right.int) + 1;\n                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    int = 0;\n                } else if ((int) == 2) {\n                    int = 0;\n                } \n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"node"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.DateTypeAdapter:86","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"db0117fc-3e70-11e6-a87b-e9214e730cfa","method":{"position":"com.google.gson.internal.bind.DateTypeAdapter:85","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized void write(com.google.gson.stream.JsonWriter out, java.util.Date value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            java.lang.String java.lang.String = java.text.DateFormat.format(value);\n            out.value(dateFormatAsString);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255664477/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:391","type":"CtUnaryOperatorImpl","sourcecode":"!insert"},"failures":[],"tindex":"db013f0d-3e70-11e6-a87b-818f08ff00ef","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:338","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (!insert) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255664477/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            for (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) {\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                int int = left != null ? left.int : 0;\n                int int = right != null ? right.int : 0;\n                int int = leftHeight - rightHeight;\n                if (delta == (-2)) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    int int = rightRight != null ? rightRight.int : 0;\n                    int int = rightLeft != null ? rightLeft.int : 0;\n                    int int = rightLeftHeight - rightRightHeight;\n                    if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                        rotateLeft(node);\n                    } else {\n                        assert rightDelta == 1;\n                        rotateRight(right);\n                        rotateLeft(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 2) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    int int = leftRight != null ? leftRight.int : 0;\n                    int int = leftLeft != null ? leftLeft.int : 0;\n                    int int = leftLeftHeight - leftRightHeight;\n                    if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                        rotateRight(node);\n                    } else {\n                        assert leftDelta == (-1);\n                        rotateLeft(left);\n                        rotateRight(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 0) {\n                    node.int = leftHeight + 1;\n                    if (insert) {\n                        break;\n                    } \n                } else {\n                    assert (delta == (-1)) || (delta == 1);\n                    node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                    if (!insert) {\n                        break;\n                    } \n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"insert"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:188","type":"CtBinaryOperatorImpl","sourcecode":"from == null"},"failures":[],"tindex":"db013f0e-3e70-11e6-a87b-612e23978f55","method":{"position":"com.google.gson.reflect.TypeToken:122","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic boolean isAssignableFrom(java.lang.reflect.Type from) {\n    if (from == null) {\n        {\n            if (from == null) {\n                {\n                    if (from instanceof java.lang.reflect.GenericArrayType) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255664477/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            if (from == null) {\n                                return false;\n                            } \n                            if (java.lang.reflect.Type.equals(from)) {\n                                return true;\n                            } \n                            if ((java.lang.reflect.Type) instanceof java.lang.Class<?>) {\n                                return java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from));\n                            } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.ParameterizedType) {\n                                return com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n                            } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.GenericArrayType) {\n                                return (java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from))) && (com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.GenericArrayType)(java.lang.reflect.Type))));\n                            } else {\n                                throw com.google.gson.reflect.TypeToken.buildUnexpectedTypeError(java.lang.reflect.Type, java.lang.Class.java.lang.Class.java.lang.Class, java.lang.reflect.ParameterizedType.java.lang.reflect.ParameterizedType.java.lang.Class, java.lang.reflect.GenericArrayType.java.lang.reflect.GenericArrayType.java.lang.Class);\n                            }\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255664477/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255664477/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:123","type":"CtBinaryOperatorImpl","sourcecode":"from == null"},"failures":[],"tindex":"db01661f-3e70-11e6-a87b-edcaf38568df","method":{"position":"com.google.gson.reflect.TypeToken:185","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.ParameterizedType to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeVarMap) {\n    if (from == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255664477/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (from.getRawType().equals(from.getRawType())) {\n                {\n                    if (from == null) {\n                        return false;\n                    } \n                    if (to.equals(from)) {\n                        return true;\n                    } \n                    java.lang.Class<?> java.lang.Class<?> = com.google.gson.internal.$Gson$Types.getRawType(from);\n                    java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = null;\n                    if (from instanceof java.lang.reflect.ParameterizedType) {\n                        ptype = ((java.lang.reflect.ParameterizedType)(from));\n                    } \n                    if (ptype != null) {\n                        java.lang.reflect.Type[] java.lang.reflect.Type[] = ptype.getActualTypeArguments();\n                        java.lang.reflect.TypeVariable<?>[] java.lang.reflect.TypeVariable<?>[] = clazz.getTypeParameters();\n                        for (int int = 0 ; i < (tArgs.int) ; i++) {\n                            java.lang.reflect.Type java.lang.reflect.Type = tArgs[i];\n                            java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = tParams[i];\n                            while (arg instanceof java.lang.reflect.TypeVariable<?>) {\n                                java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(arg));\n                                arg = typeVarMap.get(v.getName());\n                            }\n                            typeVarMap.put(var.getName(), arg);\n                        }\n                        if (com.google.gson.reflect.TypeToken.typeEquals(ptype, to, typeVarMap)) {\n                            return true;\n                        } \n                    } \n                    for (java.lang.reflect.Type java.lang.reflect.Type : clazz.getGenericInterfaces()) {\n                        if (com.google.gson.reflect.TypeToken.isAssignableFrom(itype, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap))) {\n                            return true;\n                        } \n                    }\n                    java.lang.reflect.Type java.lang.reflect.Type = clazz.getGenericSuperclass();\n                    return com.google.gson.reflect.TypeToken.isAssignableFrom(sType, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255664477/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"db016620-3e70-11e6-a87b-d3e2ef3433ed","method":{"position":"com.google.gson.internal.bind.TypeAdapters:297","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255664477/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":54,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
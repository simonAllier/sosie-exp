{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":108,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":265,"com.google.gson.functional.StringTest.testStringValueDeserialization":558,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":660,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":27,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":523,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":607,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":497,"com.google.gson.stream.JsonWriterTest.testRepeatedName":657,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":9,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":49,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":286,"com.google.gson.MixedStreamTest.testWriteLenient":454,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":252,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":318,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":28,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":273,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":95,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":250,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":528,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":342,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":349,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":99,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":504,"com.google.gson.internal.bind.JsonElementReaderTest.testStrictNansAndInfinities":637,"com.google.gson.JsonObjectTest.testAddingNullPropertyValue":689,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":34,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":301,"com.google.gson.functional.ObjectTest.testSingletonLists":248,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":343,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":445,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":222,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":408,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":90,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":85,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":271,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":578,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":612,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":256,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":1,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":530,"com.google.gson.internal.bind.JsonElementReaderTest.testNulls":635,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":296,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":667,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":565,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":179,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":208,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":524,"com.google.gson.internal.LinkedTreeMapTest.testContainsNullKeyIsAlwaysFalse":682,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":172,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":5,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":488,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":23,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":171,"com.google.gson.functional.EnumTest.testEnumCaseMapping":123,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":110,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":407,"com.google.gson.functional.JsonTreeTest.testToJsonTree":101,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":487,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":213,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":322,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":105,"com.google.gson.JsonObjectTest.testEqualsNonEmptyObject":690,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":313,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":374,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":664,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":147,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":223,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":605,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":57,"com.google.gson.internal.LinkedTreeMapTest.testLargeSetOfRandomKeys":677,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":418,"com.google.gson.functional.ObjectTest.testNullDeserialization":619,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":281,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":563,"com.google.gson.internal.bind.JsonElementReaderTest.testNestedObjects":685,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":547,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":341,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":387,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":498,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":397,"com.google.gson.internal.bind.JsonElementReaderTest.testLenientNansAndInfinities":633,"com.google.gson.internal.LinkedTreeMapTest.testContainsNonComparableKeyReturnsFalse":678,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":21,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":328,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":260,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":340,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":323,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":451,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":594,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":195,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":535,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":534,"com.google.gson.JsonParserTest.testParseString":674,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":611,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":235,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":665,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":232,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":538,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":599,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":143,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":261,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":315,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":511,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":168,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":521,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":581,"com.google.gson.functional.StreamingTypeAdaptersTest.testFromJsonTree":694,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":371,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":604,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":309,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":644,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":71,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":178,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":236,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":289,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":522,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":137,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":399,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":114,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":345,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":544,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":16,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":225,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":478,"com.google.gson.metrics.PerformanceTest.testDummy":615,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":465,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":183,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":372,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":63,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":73,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":269,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":480,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":47,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":317,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":60,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":441,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":327,"com.google.gson.JsonArrayTest.testEqualsNonEmptyArray":627,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":580,"com.google.gson.functional.CollectionTest.testSetDeserialization":576,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":100,"com.google.gson.functional.EnumTest.testEnumSet":347,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":394,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":567,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":514,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":201,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":72,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":353,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":601,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":257,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":4,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":200,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":525,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":62,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":531,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":18,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":416,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":384,"com.google.gson.functional.MapTest.testHashMapDeserialization":470,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":495,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":574,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":316,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":346,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":554,"com.google.gson.MixedStreamTest.testReadNulls":622,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":366,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":403,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":272,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":306,"com.google.gson.functional.MapTest.testSortedMap":477,"com.google.gson.functional.MapTest.testMapSerialization":355,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":405,"com.google.gson.internal.bind.JsonElementReaderTest.testObject":686,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":43,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":519,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":150,"com.google.gson.functional.MapTest.testSerializeMaps":165,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":293,"com.google.gson.functional.MapTest.testComplexKeysSerialization":176,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":566,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":479,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":156,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":121,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":282,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":305,"com.google.gson.internal.LinkedTreeMapTest.testRemoveRootDoesNotDoubleUnlink":684,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":484,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":414,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":467,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":211,"com.google.gson.internal.bind.JsonElementReaderTest.testWrongType":638,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":691,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":11,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":551,"com.google.gson.functional.MapTest.testStringKeyDeserialization":177,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":153,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":77,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":242,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":362,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":501,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":54,"com.google.gson.functional.PrettyPrintingTest.testMap":209,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":496,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":276,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":406,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":431,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":570,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":0,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":155,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":666,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":410,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":559,"com.google.gson.functional.MapTest.testMapSerializationEmpty":361,"com.google.gson.functional.CollectionTest.testQueueSerialization":417,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":438,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":692,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":515,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnName":662,"com.google.gson.functional.MapTest.testMapOfMapSerialization":170,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":231,"com.google.gson.JavaSerializationTest.testMapIsSerializable":460,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":606,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":575,"com.google.gson.stream.JsonWriterTest.testNameWithoutValue":654,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":128,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":233,"com.google.gson.internal.LinkedTreeMapTest.testPutNonComparableKeyFails":681,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":86,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictBoxedNansAndInfinities":339,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":266,"com.google.gson.functional.FieldNamingTest.testIdentity":294,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":74,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":158,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":262,"com.google.gson.internal.bind.JsonElementReaderTest.testNestedArrays":641,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":15,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":30,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":247,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":352,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":489,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":6,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":69,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":409,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":130,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":380,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":610,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":337,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":602,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":127,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":439,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":450,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":469,"com.google.gson.functional.MapTest.testMapSubclassSerialization":164,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":241,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":116,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":205,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":568,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":331,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":421,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":423,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":509,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":542,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":582,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":597,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":569,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":199,"com.google.gson.functional.EnumTest.testEnumSubclass":119,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":382,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":2,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":255,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":376,"com.google.gson.GsonBuilderTest.testRegisterTypeAdapterForCoreType":8,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":324,"com.google.gson.internal.bind.JsonElementReaderTest.testArray":634,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":527,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":76,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":457,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":490,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":132,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":512,"com.google.gson.stream.JsonWriterTest.testTwoNames":653,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":131,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":102,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":146,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":336,"com.google.gson.internal.LinkedTreeMapTest.testEqualsAndHashCode":683,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":516,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":546,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":14,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":379,"com.google.gson.stream.JsonWriterTest.testObjectsInArrays":658,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":448,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":249,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":26,"com.google.gson.MixedStreamTest.testWriteNulls":452,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":145,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":287,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":139,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":52,"com.google.gson.CommentsTest.testParseComments":462,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":485,"com.google.gson.JsonObjectTest.testReadPropertyWithEmptyStringName":687,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":81,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":251,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":589,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":151,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":218,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":526,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":42,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":267,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":357,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":617,"com.google.gson.MixedStreamTest.testReadInvalidState":614,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":97,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":373,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":67,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":240,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":44,"com.google.gson.ObjectTypeAdapterTest.testSerializeObject":88,"com.google.gson.internal.bind.JsonElementReaderTest.testEarlyClose":636,"com.google.gson.JsonParserTest.testParseMixedArray":628,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":224,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":649,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":157,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":216,"com.google.gson.internal.bind.JsonTreeWriterTest.testWriteAfterClose":646,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":227,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":126,"com.google.gson.JsonArrayTest.testRemove":626,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":64,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":385,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":142,"com.google.gson.functional.MapTest.testMapDeserialization":474,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":440,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":214,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":25,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":588,"com.google.gson.internal.bind.JsonElementReaderTest.testStringsFromNumbers":640,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":166,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":186,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":304,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":302,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":458,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeMap":695,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":162,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":466,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":596,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":396,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":400,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":367,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":285,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":182,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":432,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":35,"com.google.gson.internal.bind.JsonElementReaderTest.testNumbersFromStrings":639,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":129,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":191,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":210,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":356,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":113,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":68,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":486,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":83,"com.google.gson.functional.PrimitiveTest.testShortSerialization":388,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":58,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":529,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":24,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictNansAndInfinities":338,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":510,"com.google.gson.internal.LinkedTreeMapTest.testIterationOrder":680,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":237,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":109,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":494,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":290,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":118,"com.google.gson.internal.LinkedTreeMapTest.testEmptyStringValues":679,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":275,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":115,"com.google.gson.internal.LinkedTreeMapTest.testPutOverrides":675,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":471,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":507,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":50,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":244,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":583,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":647,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":66,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":591,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":333,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":650,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":389,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":537,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":40,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":13,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":75,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":185,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":401,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":295,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":428,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":652,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":533,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":38,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":78,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":513,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":553,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":543,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":122,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":368,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":413,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":94,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":600,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":284,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":79,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":300,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":425,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":444,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":500,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":308,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":435,"com.google.gson.stream.JsonWriterTest.testNullStringValue":655,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":426,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":609,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":103,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":572,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":491,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":238,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":381,"com.google.gson.JsonArrayTest.testSet":624,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":245,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":363,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":303,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":348,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":557,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":45,"com.google.gson.functional.MapTest.testGeneralMapField":175,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":253,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":136,"com.google.gson.internal.bind.JsonElementReaderTest.testNumbers":642,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":540,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":53,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":91,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":325,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":319,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":358,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":194,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":310,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":377,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":383,"com.google.gson.MixedStreamTest.testReadMixedStreamed":332,"com.google.gson.ObjectTypeAdapterTest.testDeserializeNullValue":671,"com.google.gson.JsonObjectTest.testDeepCopy":648,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":228,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":314,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":475,"com.google.gson.internal.bind.JsonElementReaderTest.testBooleans":631,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":7,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":307,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":419,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":464,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":517,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":161,"com.google.gson.JavaSerializationTest.testNumberIsSerializable":459,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":61,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":443,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":169,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":207,"com.google.gson.JsonArrayTest.testDeepCopy":625,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":163,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":82,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":246,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":220,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":298,"com.google.gson.stream.JsonWriterTest.testArraysInObjects":656,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":508,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":651,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":442,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":288,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":350,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":593,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":620,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":590,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":87,"com.google.gson.functional.ObjectTest.testNestedDeserialization":264,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":180,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":398,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":555,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":181,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":22,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":539,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":217,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":10,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":476,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":560,"com.google.gson.JsonParserTest.testParseUnquotedStringArrayFails":629,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":198,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":239,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":482,"com.google.gson.JavaSerializationTest.testListIsSerializable":461,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":32,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":584,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":420,"com.google.gson.functional.ObjectTest.testNullSerialization":395,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":370,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":206,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":472,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":174,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":221,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":148,"com.google.gson.functional.MapTest.testInterfaceTypeMap":173,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":55,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":184,"com.google.gson.JsonObjectTest.testAddingNullOrEmptyPropertyName":693,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":492,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":39,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":120,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":190,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":422,"com.google.gson.MixedStreamTest.testReadClosed":621,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":429,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":20,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":502,"com.google.gson.MixedStreamTest.testWriteClosed":456,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":278,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":556,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":392,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":481,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":613,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":202,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":365,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":107,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":375,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":402,"com.google.gson.stream.JsonWriterTest.testLongs":623,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":449,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":187,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":254,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":277,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":585,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeWithCustomTypeAdapter":41,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":520,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":299,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":483,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":279,"com.google.gson.internal.bind.JsonElementReaderTest.testSkipValue":632,"com.google.gson.internal.bind.JsonElementReaderTest.testStrings":643,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":65,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":17,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":124,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":541,"com.google.gson.JsonParserTest.testParseInvalidJson":630,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":378,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":351,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":598,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":133,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":283,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":106,"com.google.gson.functional.CollectionTest.testQueueDeserialization":579,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":230,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":518,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":562,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":404,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":321,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":586,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":167,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":550,"com.google.gson.stream.JsonWriterTest.testDeepNestingObjects":661,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":437,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":196,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":552,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":274,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":330,"com.google.gson.functional.MapTest.testRawMapSerialization":360,"com.google.gson.JsonParserTest.testParseReader":673,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":577,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":608,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":663,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":189,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":258,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":48,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":427,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":112,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":138,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":270,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":335,"com.google.gson.functional.PrimitiveTest.testByteSerialization":386,"com.google.gson.ObjectTypeAdapterTest.testSerialize":89,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":390,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":192,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":499,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":29,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":149,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":291,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":3,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":203,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":268,"com.google.gson.functional.MapTest.testMapWithQuotes":354,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":311,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":505,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":561,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":70,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":592,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":329,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":188,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":536,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":430,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":98,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":56,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":197,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":263,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":215,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":234,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":434,"com.google.gson.functional.ObjectTest.testEmptyStringDeserialization":618,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":154,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":545,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":447,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":312,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":31,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":424,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":436,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":532,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":415,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":280,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":141,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":33,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":134,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":320,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":369,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":159,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":587,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":117,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":571,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":36,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":493,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":84,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":669,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":548,"com.google.gson.functional.ObjectTest.testNestedSerialization":259,"com.google.gson.JsonObjectTest.testAddingStringProperties":668,"com.google.gson.internal.LinkedTreeMapTest.testClear":676,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":364,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":193,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":226,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":564,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":219,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":359,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":46,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":37,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":334,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":455,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":93,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":468,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":243,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":104,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":463,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":603,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":111,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":503,"com.google.gson.GsonBuilderTest.testCreatingMoreThanOnce":616,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":549,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":595,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":297,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":670,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":411,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":144,"com.google.gson.functional.CollectionTest.testSetSerialization":96,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":326,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":80,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":212,"com.google.gson.functional.StringTest.testStringValueSerialization":412,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":92,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":12,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":125,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":573,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":135,"com.google.gson.MixedStreamTest.testWriteInvalidState":453,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":393,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":506,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":152,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":229,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":344,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":433,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":292,"com.google.gson.ObjectTypeAdapterTest.testDeserialize":672,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":51,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":688,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":160,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":19,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":645,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":204,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":446,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":391,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":473,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":659,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":59,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":140},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:578","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"c035698c-3f53-11e6-bd1a-6bee00a9f106","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:401","type":"CtMethodImpl","sourcecode":"private void rotateLeft(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root == null) {\n        {\n            if (root == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352206198/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivotLeft;\n                    if (pivotLeft != null) {\n                        pivotLeft.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n                    } \n                    replaceInParent(root, pivot);\n                    pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n                    root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot;\n                    root.int = (java.lang.Math.max((left != null ? left.int : 0), (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n                    pivot.int = (java.lang.Math.max(root.int, (pivotRight != null ? pivotRight.int : 0))) + 1;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352206198/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:107","type":"CtBinaryOperatorImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87],"tindex":"c03605cd-3f53-11e6-bd1a-2f601d1341f1","method":{"position":"com.google.gson.GsonBuilder:447","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\npublic com.google.gson.GsonBuilder registerTypeAdapter(java.lang.reflect.Type type, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof java.lang.reflect.WildcardType) {\n        {\n            if (type instanceof java.lang.reflect.WildcardType) {\n                {\n                    com.google.gson.internal.$Gson$Preconditions.checkArgument(((((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) || (typeAdapter instanceof com.google.gson.InstanceCreator<?>)) || (typeAdapter instanceof com.google.gson.TypeAdapter<?>)));\n                    if (typeAdapter instanceof com.google.gson.InstanceCreator<?>) {\n                        java.util.Map<java.lang.reflect.Type, com.google.gson.InstanceCreator<?>>.put(type, ((com.google.gson.InstanceCreator)(typeAdapter)));\n                    } \n                    if ((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) {\n                        com.google.gson.reflect.TypeToken<?> com.google.gson.reflect.TypeToken<?> = com.google.gson.reflect.TypeToken.get(type);\n                        java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.TreeTypeAdapter.newFactoryWithMatchRawType(typeToken, typeAdapter));\n                    } \n                    if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                        java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.internal.bind.TypeAdapters.newFactory(com.google.gson.reflect.TypeToken.get(type), ((com.google.gson.TypeAdapter)(typeAdapter))));\n                    } \n                    return com.google.gson.GsonBuilder.this;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352206198/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352206198/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:131","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"c0362cde-3f53-11e6-bd1a-c70eeaffcc5a","method":{"position":"com.google.gson.internal.$Gson$Types:117","type":"CtMethodImpl","sourcecode":"public static java.lang.Class<?> getRawType(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class<?>) {\n        return ((java.lang.Class<?>)(type));\n    } else if (type instanceof java.lang.reflect.ParameterizedType) {\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(type));\n        java.lang.reflect.Type java.lang.reflect.Type = parameterizedType.getRawType();\n        com.google.gson.internal.$Gson$Preconditions.checkArgument((rawType instanceof java.lang.Class));\n        return ((java.lang.Class<?>)(rawType));\n    } else if (type instanceof java.lang.reflect.GenericArrayType) {\n        java.lang.reflect.Type java.lang.reflect.Type = ((java.lang.reflect.GenericArrayType)(type)).getGenericComponentType();\n        return java.lang.reflect.Array.newInstance(com.google.gson.internal.$Gson$Types.getRawType(componentType), 0).getClass();\n    } else if (type instanceof java.lang.reflect.TypeVariable) {\n        return java.lang.Object.java.lang.Object.java.lang.Class;\n    } else if (type instanceof java.lang.reflect.WildcardType) {\n        return com.google.gson.internal.$Gson$Types.getRawType(((java.lang.reflect.WildcardType)(type)).getUpperBounds()[0]);\n    } else {\n        java.lang.String java.lang.String = type == null ? \"null\" : type.getClass().getName();\n        throw new java.lang.IllegalArgumentException(((((\"Expected a Class, ParameterizedType, or \" + \"GenericArrayType, but <\") + type) + \"> is of type \") + className));\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:107","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"c03653ef-3f53-11e6-bd1a-b7f8b18d97e6","method":{"position":"com.google.gson.GsonBuilder:447","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\npublic com.google.gson.GsonBuilder registerTypeAdapter(java.lang.reflect.Type type, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof java.lang.reflect.WildcardType) {\n        {\n            if (type instanceof java.lang.reflect.WildcardType) {\n                {\n                    com.google.gson.internal.$Gson$Preconditions.checkArgument(((((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) || (typeAdapter instanceof com.google.gson.InstanceCreator<?>)) || (typeAdapter instanceof com.google.gson.TypeAdapter<?>)));\n                    if (typeAdapter instanceof com.google.gson.InstanceCreator<?>) {\n                        java.util.Map<java.lang.reflect.Type, com.google.gson.InstanceCreator<?>>.put(type, ((com.google.gson.InstanceCreator)(typeAdapter)));\n                    } \n                    if ((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) {\n                        com.google.gson.reflect.TypeToken<?> com.google.gson.reflect.TypeToken<?> = com.google.gson.reflect.TypeToken.get(type);\n                        java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.TreeTypeAdapter.newFactoryWithMatchRawType(typeToken, typeAdapter));\n                    } \n                    if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                        java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.internal.bind.TypeAdapters.newFactory(com.google.gson.reflect.TypeToken.get(type), ((com.google.gson.TypeAdapter)(typeAdapter))));\n                    } \n                    return com.google.gson.GsonBuilder.this;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352206198/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352206198/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:198","type":"CtBinaryOperatorImpl"},"failures":[88,89,90,91,92,93,94,95,96,97,98,99,100],"tindex":"c03653f0-3f53-11e6-bd1a-6b0d60b023f9","method":{"position":"com.google.gson.internal.bind.ObjectTypeAdapter:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Object value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            com.google.gson.TypeAdapter<java.lang.Object> com.google.gson.TypeAdapter<java.lang.Object> = ((com.google.gson.TypeAdapter<java.lang.Object>)(com.google.gson.Gson.getAdapter(value.getClass())));\n            if (typeAdapter instanceof com.google.gson.internal.bind.ObjectTypeAdapter) {\n                out.beginObject();\n                out.endObject();\n                return ;\n            } \n            typeAdapter.write(out, value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352206198/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"c0367b01-3f53-11e6-bd1a-83582021004f","method":{"position":"com.google.gson.Gson:695","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.lang.String json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352206198/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:232","type":"CtInvocationImpl"},"failures":[],"tindex":"c0367b02-3f53-11e6-bd1a-d36f68985bf7","method":{"position":"com.google.gson.internal.$Gson$Types:322","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type resolve(java.lang.reflect.Type context, java.lang.Class<?> contextRawType, java.lang.reflect.Type toResolve) {\n    while (true) {\n        if (toResolve instanceof java.lang.reflect.TypeVariable) {\n            java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(toResolve));\n            toResolve = com.google.gson.internal.$Gson$Types.resolveTypeVariable(context, contextRawType, typeVariable);\n            if (toResolve == typeVariable) {\n                return toResolve;\n            } \n        } else if ((toResolve instanceof java.lang.Class) && (((java.lang.Class<?>)(toResolve)).isArray())) {\n            java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getComponentType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, componentType);\n            return componentType == newComponentType ? original : com.google.gson.internal.$Gson$Types.arrayOf(newComponentType);\n        } else if (toResolve instanceof java.lang.reflect.GenericArrayType) {\n            java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getGenericComponentType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, componentType);\n            return componentType == newComponentType ? original : com.google.gson.internal.$Gson$Types.arrayOf(newComponentType);\n        } else if (toResolve instanceof java.lang.reflect.ParameterizedType) {\n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getOwnerType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, ownerType);\n            boolean boolean = newOwnerType != ownerType;\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getActualTypeArguments();\n            for (int int = 0, int int = args.int ; t < length ; t++) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, args[t]);\n                if (resolvedTypeArgument != (args[t])) {\n                    if (!changed) {\n                        args = args.clone();\n                        changed = true;\n                    } \n                    args[t] = resolvedTypeArgument;\n                } \n            }\n            return changed ? com.google.gson.internal.$Gson$Types.newParameterizedTypeWithOwner(newOwnerType, original.getRawType(), args) : original;\n        } else if (toResolve instanceof java.lang.reflect.WildcardType) {\n            java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(toResolve));\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getLowerBounds();\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getUpperBounds();\n            if ((originalLowerBound.int) == 1) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, originalLowerBound[0]);\n                if (lowerBound != (originalLowerBound[0])) {\n                    return com.google.gson.internal.$Gson$Types.supertypeOf(lowerBound);\n                } \n            } else if ((originalUpperBound.int) == 1) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, originalUpperBound[0]);\n                if (upperBound != (originalUpperBound[0])) {\n                    return com.google.gson.internal.$Gson$Types.subtypeOf(upperBound);\n                } \n            } \n            return original;\n        } else {\n            return toResolve;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"contextRawType"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:103","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"c036c923-3f53-11e6-bd1a-efd67ac1805e","method":{"position":"com.google.gson.internal.$Gson$Types:93","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type canonicalize(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class) {\n        java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(type));\n        return c.isArray() ? new com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl(com.google.gson.internal.$Gson$Types.canonicalize(c.getComponentType())) : c;\n    } else if (type instanceof java.lang.reflect.ParameterizedType) {\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(type));\n        return new com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl(p.getOwnerType() , p.getRawType() , p.getActualTypeArguments());\n    } else if (type instanceof java.lang.reflect.GenericArrayType) {\n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(type));\n        return new com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl(g.getGenericComponentType());\n    } else if (type instanceof java.lang.reflect.WildcardType) {\n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(type));\n        return new com.google.gson.internal.$Gson$Types.WildcardTypeImpl(w.getUpperBounds() , w.getLowerBounds());\n    } else {\n        return type;\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:107","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"c036c924-3f53-11e6-bd1a-55a165c200c7","method":{"position":"com.google.gson.JsonObject:186","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonNull) {\n        {\n            if (o instanceof com.google.gson.JsonArray) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352206198/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return (o == (com.google.gson.JsonObject.this)) || ((o instanceof com.google.gson.JsonObject) && (((com.google.gson.JsonObject)(o)).com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.equals(com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>)));\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352206198/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl"},"failures":[101,102,103,104,105,28,29,30,31,32,33,106,107,108,69],"tindex":"c036f035-3f53-11e6-bd1a-291005914dd0","method":{"position":"com.google.gson.Gson:468","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src) {\n    if (src == null) {\n        {\n            if (src == null) {\n                return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            return toJsonTree(src, src.getClass());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352206198/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[109],"tindex":"c036f036-3f53-11e6-bd1a-df20885fc2bf","method":{"position":"com.google.gson.Gson:285","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352206198/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (value == null) {\n                        {\n                            if (value == null) {\n                                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352206198/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                throw new java.io.IOException();\n                            } else {\n                                {\n                                    if (value == null) {\n                                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352206198/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                        throw new java.io.IOException();\n                                    } else {\n                                        {\n                                            if (value == null) {\n                                                out.nullValue();\n                                                return ;\n                                            } \n                                            float float = value.floatValue();\n                                            checkValidFloatingPoint(floatValue);\n                                            out.value(value);\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352206198/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.io.IOException();\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352206198/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:107","type":"CtBinaryOperatorImpl"},"failures":[110,111,0,1,2,3,4,5,6,7,112,113,88,89,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,15,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,91,151,152,153,154,155,156,157,158,17,159,160,18,19,20,21,22,23,161,24,162,25,26,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,27,179,180,181,102,182,183,184,103,104,185,186,187,105,188,189,190,191,192,193,194,195,196,28,29,30,31,32,197,33,198,199,200,201,202,203,204,36,205,37,38,206,207,208,209,210,211,212,213,214,215,216,217,218,106,107,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,42,43,44,45,46,47,48,92,247,248,249,250,251,252,253,254,93,255,256,257,258,259,260,261,262,263,264,108,265,266,267,268,269,270,271,272,273,274,275,276,277,278,94,279,280,95,96,50,51,281,52,282,283,284,53,54,55,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,56,57,303,304,58,305,306,307,308,309,60,61,62,310,311,312,313,314,109,64,315,65,316,317,66,318,319,320,321,67,68,322,97,323,98,99,100,324,69,325,326,327,328,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,329,87,330,331,332,333],"tindex":"c0371747-3f53-11e6-bd1a-b3b898fb916a","method":{"position":"com.google.gson.reflect.TypeToken:283","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic final boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonArray) {\n        {\n            return (o instanceof com.google.gson.reflect.TypeToken<?>) && (com.google.gson.internal.$Gson$Types.equals(java.lang.reflect.Type, ((com.google.gson.reflect.TypeToken<?>)(o)).java.lang.reflect.Type));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352206198/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:164","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"c0373e58-3f53-11e6-bd1a-c92a6dc365fd","method":{"position":"com.google.gson.reflect.TypeToken:160","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.GenericArrayType to) {\n    if (from instanceof java.lang.reflect.GenericArrayType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352206198/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.reflect.Type java.lang.reflect.Type = to.getGenericComponentType();\n            if (toGenericComponentType instanceof java.lang.reflect.ParameterizedType) {\n                java.lang.reflect.Type java.lang.reflect.Type = from;\n                if (from instanceof java.lang.reflect.GenericArrayType) {\n                    t = ((java.lang.reflect.GenericArrayType)(from)).getGenericComponentType();\n                } else if (from instanceof java.lang.Class<?>) {\n                    java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(from));\n                    while (classType.isArray()) {\n                        classType = classType.getComponentType();\n                    }\n                    t = classType;\n                } \n                return com.google.gson.reflect.TypeToken.isAssignableFrom(t, ((java.lang.reflect.ParameterizedType)(toGenericComponentType)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n            } \n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"c0373e59-3f53-11e6-bd1a-d7198fd256e0","method":{"position":"com.google.gson.Gson:285","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352206198/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (value == null) {\n                        {\n                            if (value == null) {\n                                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352206198/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                throw new java.io.IOException();\n                            } else {\n                                {\n                                    if (value == null) {\n                                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352206198/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                        throw new java.io.IOException();\n                                    } else {\n                                        {\n                                            if (value == null) {\n                                                out.nullValue();\n                                                return ;\n                                            } \n                                            float float = value.floatValue();\n                                            checkValidFloatingPoint(floatValue);\n                                            out.value(value);\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352206198/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.io.IOException();\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352206198/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:602","type":"CtUnaryOperatorImpl"},"failures":[110,111,0,1,2,4,5,6,7,334,112,113,335,336,337,114,338,339,340,341,342,343,344,345,346,115,116,117,347,348,118,119,120,122,123,349,124,125,126,127,128,129,132,9,11,13,15,16,133,134,136,137,138,139,140,143,144,145,149,91,152,154,156,158,350,159,18,19,20,21,22,23,161,24,351,162,352,101,25,164,165,353,166,167,354,170,355,356,357,173,358,174,175,359,360,176,361,178,362,27,179,180,363,364,181,102,182,183,365,184,103,104,186,187,105,188,366,189,367,368,369,370,371,191,192,193,194,195,196,28,29,30,31,32,197,33,198,199,200,372,201,202,203,204,373,374,37,207,208,209,210,211,212,213,214,215,216,375,217,218,106,107,219,220,376,221,377,224,225,226,378,227,228,230,231,379,232,380,381,233,382,234,235,236,237,383,384,385,386,239,387,388,240,241,242,244,245,246,389,39,44,46,92,390,391,247,248,251,392,254,393,394,395,93,396,397,257,258,259,398,399,261,400,401,402,403,404,108,405,406,407,265,408,266,409,267,410,411,412,413,270,271,414,415,416,273,274,275,276,417,277,278,418,94,279,95,419,96,420,50,51,281,52,282,283,284,53,54,55,421,285,422,290,291,292,293,294,423,295,424,298,299,300,302,57,303,304,425,58,426,427,305,306,308,309,428,310,429,430,431,311,312,313,432,433,109,434,435,436,437,438,439,440,441,442,443,64,444,315,445,65,446,317,318,319,447,320,448,321,67,449,68,450,451,97,323,98,99,100,324,69,325,327,328,70,72,76,77,78,80,81,82,84,86,329,87,330,331,452,453,454,455,456],"tindex":"c037656a-3f53-11e6-bd1a-61385d848649","method":{"position":"com.google.gson.stream.JsonWriter:234","type":"CtMethodImpl","sourcecode":"public final void setLenient(boolean lenient) {\n    if (!lenient) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352206198/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = lenient;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"lenient"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl"},"failures":[366,369,457,458,290,293],"tindex":"c0378c7b-3f53-11e6-bd1a-354561dc93fa","method":{"position":"com.google.gson.FieldNamingPolicy:137","type":"CtMethodImpl","sourcecode":"private static java.lang.String upperCaseFirstLetter(java.lang.String name) {\n    if (name == null) {\n        {\n            if (name == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352206198/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (name == null) {\n                        {\n                            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n                            int int = 0;\n                            char char = name.charAt(index);\n                            while (index < ((name.length()) - 1)) {\n                                if (java.lang.Character.isLetter(firstCharacter)) {\n                                    break;\n                                } \n                                fieldNameBuilder.append(firstCharacter);\n                                firstCharacter = name.charAt((++index));\n                            }\n                            if (index == (name.length())) {\n                                return fieldNameBuilder.toString();\n                            } \n                            if (!(java.lang.Character.isUpperCase(firstCharacter))) {\n                                java.lang.String java.lang.String = com.google.gson.FieldNamingPolicy.modifyString(java.lang.Character.toUpperCase(firstCharacter), name, (++index));\n                                return fieldNameBuilder.append(modifiedTarget).toString();\n                            } else {\n                                return name;\n                            }\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352206198/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352206198/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"c0378c7c-3f53-11e6-bd1a-5d7463d3edbb","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:101","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nvoid read(com.google.gson.stream.JsonReader reader, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352206198/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    } else {\n        {\n            java.lang.Object java.lang.Object = com.google.gson.TypeAdapter<?>.read(reader);\n            if ((fieldValue != null) || (!isPrimitive)) {\n                field.set(value, fieldValue);\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:92","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"c037b38d-3f53-11e6-bd1a-55e40bf5f306","method":{"position":"com.google.gson.internal.$Gson$Types:213","type":"CtMethodImpl","sourcecode":"private static int hashCodeOrZero(java.lang.Object o) {\n    return o != null ? o.hashCode() : 0;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"c037b38e-3f53-11e6-bd1a-5934ac233393","method":{"position":"com.google.gson.FieldNamingPolicy:137","type":"CtMethodImpl","sourcecode":"private static java.lang.String upperCaseFirstLetter(java.lang.String name) {\n    if (name == null) {\n        {\n            if (name == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352206198/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (name == null) {\n                        {\n                            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n                            int int = 0;\n                            char char = name.charAt(index);\n                            while (index < ((name.length()) - 1)) {\n                                if (java.lang.Character.isLetter(firstCharacter)) {\n                                    break;\n                                } \n                                fieldNameBuilder.append(firstCharacter);\n                                firstCharacter = name.charAt((++index));\n                            }\n                            if (index == (name.length())) {\n                                return fieldNameBuilder.toString();\n                            } \n                            if (!(java.lang.Character.isUpperCase(firstCharacter))) {\n                                java.lang.String java.lang.String = com.google.gson.FieldNamingPolicy.modifyString(java.lang.Character.toUpperCase(firstCharacter), name, (++index));\n                                return fieldNameBuilder.append(modifiedTarget).toString();\n                            } else {\n                                return name;\n                            }\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352206198/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352206198/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:131","type":"CtBinaryOperatorImpl"},"failures":[110,111,459,460,461,0,1,2,462,3,4,5,6,7,334,112,113,335,89,336,337,8,114,342,463,464,343,465,344,345,346,115,116,117,347,348,118,119,466,467,120,121,122,123,349,124,125,126,127,128,129,130,131,132,9,10,11,12,13,14,15,16,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,91,151,152,153,154,155,156,157,468,158,350,17,159,160,18,19,20,21,22,23,161,24,351,162,352,101,469,26,470,163,164,165,471,472,353,473,166,474,167,168,475,169,476,354,170,355,171,172,356,357,477,173,358,174,175,359,360,478,176,361,177,178,479,480,362,27,179,180,363,364,181,102,182,183,365,184,103,104,481,185,186,187,105,188,366,189,367,482,368,369,370,457,483,371,190,191,484,458,192,193,194,195,196,28,29,30,31,32,197,485,33,198,199,200,372,201,34,202,203,204,35,373,205,374,37,38,206,207,208,209,210,211,212,213,214,215,216,375,217,218,106,107,219,220,486,487,488,376,489,221,490,491,492,493,222,377,223,494,224,495,496,497,498,499,500,501,225,226,502,503,504,505,506,378,507,227,228,508,229,230,509,510,231,511,379,232,512,513,380,381,514,515,516,233,517,518,519,520,521,522,523,524,382,525,234,526,235,236,527,528,237,529,530,383,531,384,532,533,238,385,386,239,387,388,240,241,534,535,536,242,243,244,537,538,539,245,246,540,389,541,542,42,43,44,45,46,47,48,92,247,248,249,250,251,252,253,392,543,544,254,545,546,394,547,93,255,396,256,397,257,548,258,259,398,549,399,260,550,551,261,262,400,401,263,402,552,553,264,49,403,404,108,405,554,555,406,556,557,558,407,265,408,266,409,559,560,267,268,410,561,562,563,411,564,565,412,566,567,413,568,269,270,569,271,570,571,272,416,273,274,275,276,572,573,574,417,277,278,418,94,575,279,280,576,95,419,577,96,420,578,579,51,281,52,282,580,283,284,53,54,55,421,285,422,286,581,582,583,584,287,288,289,290,291,292,293,294,423,295,296,297,424,298,585,586,299,587,300,588,301,302,56,57,303,304,589,425,58,426,427,590,305,591,306,592,307,308,309,59,60,61,62,63,593,428,310,429,594,595,596,430,597,431,311,598,312,599,313,432,600,314,433,601,109,602,434,435,436,437,438,603,439,604,440,441,605,442,606,443,64,444,315,607,445,608,609,65,316,446,317,66,318,319,610,447,320,448,321,67,449,611,612,68,450,322,451,613,97,323,98,99,100,324,69,325,326,327,328,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,329,87,330,614,331,453,454,455,456,332,333],"tindex":"c037da9f-3f53-11e6-bd1a-655ee3e7deaf","method":{"position":"com.google.gson.reflect.TypeToken:295","type":"CtMethodImpl","sourcecode":"public static com.google.gson.reflect.TypeToken<?> get(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352206198/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new com.google.gson.reflect.TypeToken<java.lang.Object>(type);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"c03801b0-3f53-11e6-bd1a-c9b37ac6c39d","method":{"position":"com.google.gson.Gson:552","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352206198/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            if (src != null) {\n                toJson(src, src.getClass(), writer);\n            } else {\n                toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull, writer);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:109","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"c03801b1-3f53-11e6-bd1a-d9b23c0ba149","method":{"position":"com.google.gson.internal.LinkedTreeMap:570","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonPrimitive) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352206198/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (o instanceof java.util.Map.Entry) && ((findByEntry(((java.util.Map.Entry<?, ?>)(o)))) != null);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:250","type":"CtVariableReadImpl"},"failures":[110,111,0,1,2,462,3,4,5,6,7,334,615,336,337,616,114,340,341,342,463,464,343,465,344,345,346,115,116,117,347,348,118,119,466,467,120,121,122,123,349,129,130,131,132,9,10,11,12,13,14,15,16,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,91,151,152,153,154,155,156,157,468,158,350,17,159,160,18,19,20,21,22,23,161,24,351,162,352,101,469,25,26,470,163,164,165,471,472,353,473,166,474,167,168,475,169,476,354,170,355,171,172,356,357,477,173,358,174,175,359,360,478,176,361,177,178,479,480,362,27,179,180,617,363,364,181,102,182,183,365,184,103,104,481,185,186,187,105,366,189,367,482,368,369,370,457,483,371,190,191,484,458,192,193,194,195,196,28,29,30,31,32,197,485,33,198,199,200,372,201,34,202,203,204,35,373,36,205,374,37,38,206,207,208,209,210,211,212,213,214,215,216,375,217,218,106,107,219,220,486,487,488,376,489,221,490,491,492,493,222,377,223,494,224,495,496,497,498,499,500,501,225,226,502,503,504,505,506,378,507,227,228,508,229,230,509,510,231,511,379,232,512,513,380,381,514,515,516,233,517,518,519,520,521,522,523,524,382,525,234,526,235,236,527,528,237,529,530,383,531,384,532,533,238,385,386,239,387,388,240,241,534,535,536,242,243,244,537,538,539,245,246,540,389,541,542,42,43,44,45,46,47,48,92,390,391,247,248,249,250,251,252,253,392,543,544,254,393,545,546,394,547,395,93,618,255,396,256,397,257,548,258,259,398,549,399,260,550,551,619,261,262,400,401,263,402,552,553,264,49,403,404,108,405,554,555,406,556,557,558,407,265,408,266,409,559,560,267,268,410,561,562,563,411,564,565,412,566,567,413,568,269,270,569,271,414,570,571,272,415,416,273,274,275,276,572,573,574,417,277,278,418,94,620,575,279,280,576,95,419,577,96,420,578,50,579,51,281,52,282,580,283,284,53,54,55,421,285,422,286,581,582,583,584,287,288,289,290,291,292,293,294,423,295,296,297,424,298,585,586,299,587,300,588,301,302,56,57,303,304,589,425,58,426,427,590,305,591,306,592,307,308,309,59,60,61,62,63,593,428,310,429,594,595,596,430,597,431,311,598,312,599,313,432,600,314,433,601,109,602,434,435,436,437,438,603,439,604,440,441,605,442,606,443,64,444,315,607,445,608,609,65,316,446,317,66,318,319,610,447,320,448,321,67,449,611,612,68,450,322,451,613,97,323,98,99,100,324,69,325,326,327,328,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,329,87,330,614,621,331,452,453,454,622,455,456,332,333],"tindex":"c03828c2-3f53-11e6-bd1a-65d21f06a594","method":{"position":"com.google.gson.Gson:249","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> doubleAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return in.nextDouble();\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    double double = value.doubleValue();\n                    checkValidFloatingPoint(doubleValue);\n                    out.value(value);\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352206198/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:111","type":"CtInvocationImpl"},"failures":[],"tindex":"c0384fd3-3f53-11e6-bd1a-65a4535f2849","method":{"position":"com.google.gson.JsonPrimitive:93","type":"CtMethodImpl","sourcecode":"void setValue(java.lang.Object primitive) {\n    if (primitive.isString()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352206198/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (primitive instanceof java.lang.Character) {\n                char char = ((java.lang.Character)(primitive)).charValue();\n                com.google.gson.JsonPrimitive.this.java.lang.Object = java.lang.String.valueOf(c);\n            } else {\n                com.google.gson.internal.$Gson$Preconditions.checkArgument(((primitive instanceof java.lang.Number) || (com.google.gson.JsonPrimitive.isPrimitiveOrString(primitive))));\n                com.google.gson.JsonPrimitive.this.java.lang.Object = primitive;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"primitive"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:578","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"c03876e4-3f53-11e6-bd1a-2bae3b91f036","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:401","type":"CtMethodImpl","sourcecode":"private void rotateLeft(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root == null) {\n        {\n            if (root == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352206198/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivotLeft;\n                    if (pivotLeft != null) {\n                        pivotLeft.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n                    } \n                    replaceInParent(root, pivot);\n                    pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n                    root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot;\n                    root.int = (java.lang.Math.max((left != null ? left.int : 0), (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n                    pivot.int = (java.lang.Math.max(root.int, (pivotRight != null ? pivotRight.int : 0))) + 1;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352206198/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.JsonObject:54","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"c03876e5-3f53-11e6-bd1a-a101c81c3711","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n@java.lang.Override\nvoid write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value instanceof java.lang.Number) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352206198/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352206198/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    java.lang.Object java.lang.Object = field.get(value);\n                    com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n                    t.write(writer, fieldValue);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[386],"tindex":"c0389df6-3f53-11e6-bd1a-df58179391bf","method":{"position":"com.google.gson.internal.bind.TypeAdapters:201","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                {\n                    out.value(value);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352206198/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352206198/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[233,236,239],"tindex":"c0389df7-3f53-11e6-bd1a-5f87e56bc589","method":{"position":"com.google.gson.internal.bind.TypeAdapters:282","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352206198/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"c0389df8-3f53-11e6-bd1a-fb283469e770","method":{"position":"com.google.gson.Gson:591","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352206198/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = getAdapter(com.google.gson.reflect.TypeToken.get(typeOfSrc));\n            boolean boolean = writer.isLenient();\n            writer.setLenient(true);\n            boolean boolean = writer.isHtmlSafe();\n            writer.setHtmlSafe(boolean);\n            boolean boolean = writer.getSerializeNulls();\n            writer.setSerializeNulls(boolean);\n            try {\n                ((com.google.gson.TypeAdapter<java.lang.Object>)(adapter)).write(writer, src);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            } finally {\n                writer.setLenient(oldLenient);\n                writer.setHtmlSafe(oldHtmlSafe);\n                writer.setSerializeNulls(oldSerializeNulls);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:192","type":"CtInvocationImpl"},"failures":[],"tindex":"c038c509-3f53-11e6-bd1a-4bdde2afaab9","method":{"position":"com.google.gson.reflect.TypeToken:185","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.ParameterizedType to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeVarMap) {\n    if (to.equals(from)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352206198/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (from == null) {\n                return false;\n            } \n            if (to.equals(from)) {\n                return true;\n            } \n            java.lang.Class<?> java.lang.Class<?> = com.google.gson.internal.$Gson$Types.getRawType(from);\n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = null;\n            if (from instanceof java.lang.reflect.ParameterizedType) {\n                ptype = ((java.lang.reflect.ParameterizedType)(from));\n            } \n            if (ptype != null) {\n                java.lang.reflect.Type[] java.lang.reflect.Type[] = ptype.getActualTypeArguments();\n                java.lang.reflect.TypeVariable<?>[] java.lang.reflect.TypeVariable<?>[] = clazz.getTypeParameters();\n                for (int int = 0 ; i < (tArgs.int) ; i++) {\n                    java.lang.reflect.Type java.lang.reflect.Type = tArgs[i];\n                    java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = tParams[i];\n                    while (arg instanceof java.lang.reflect.TypeVariable<?>) {\n                        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(arg));\n                        arg = typeVarMap.get(v.getName());\n                    }\n                    typeVarMap.put(var.getName(), arg);\n                }\n                if (com.google.gson.reflect.TypeToken.typeEquals(ptype, to, typeVarMap)) {\n                    return true;\n                } \n            } \n            for (java.lang.reflect.Type java.lang.reflect.Type : clazz.getGenericInterfaces()) {\n                if (com.google.gson.reflect.TypeToken.isAssignableFrom(itype, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap))) {\n                    return true;\n                } \n            }\n            java.lang.reflect.Type java.lang.reflect.Type = clazz.getGenericSuperclass();\n            return com.google.gson.reflect.TypeToken.isAssignableFrom(sType, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from","to":"to"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"c038c50a-3f53-11e6-bd1a-596eb4d17949","method":{"position":"com.google.gson.Gson:285","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352206198/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (value == null) {\n                        {\n                            if (value == null) {\n                                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352206198/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                throw new java.io.IOException();\n                            } else {\n                                {\n                                    if (value == null) {\n                                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352206198/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                        throw new java.io.IOException();\n                                    } else {\n                                        {\n                                            if (value == null) {\n                                                out.nullValue();\n                                                return ;\n                                            } \n                                            float float = value.floatValue();\n                                            checkValidFloatingPoint(floatValue);\n                                            out.value(value);\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352206198/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.io.IOException();\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352206198/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:726","type":"CtBinaryOperatorImpl"},"failures":[1,623,435,315],"tindex":"c038ec1b-3f53-11e6-bd1a-076eefaade7f","method":{"position":"com.google.gson.stream.JsonWriter:476","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(long value) throws java.io.IOException {\n    if (value == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352206198/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            writeDeferredName();\n            beforeValue(false);\n            java.io.Writer.write(java.lang.Long.toString(value));\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:125","type":"CtBinaryOperatorImpl"},"failures":[624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,25,286,582,430,599],"tindex":"c038ec1c-3f53-11e6-bd1a-73042035db90","method":{"position":"com.google.gson.JsonArray:57","type":"CtMethodImpl","sourcecode":"public void add(com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonObject) {\n        {\n            if (element == null) {\n                element = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            java.util.List<com.google.gson.JsonElement>.add(element);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352206198/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:105","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"c038ec1d-3f53-11e6-bd1a-ad1f4b7e4fde","method":{"position":"com.google.gson.internal.LinkedTreeMap:605","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352206198/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return containsKey(o);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl"},"failures":[4,89,336,337,114,463,464,343,465,344,345,115,116,117,120,121,124,125,126,127,128,129,130,131,132,9,11,12,14,15,16,91,151,152,158,350,159,160,351,162,352,101,167,172,173,174,175,176,27,179,363,364,181,102,182,183,365,184,103,104,481,185,186,187,105,188,366,189,367,482,368,369,370,457,483,371,190,191,484,458,192,195,196,28,29,31,32,197,485,198,199,200,372,201,34,202,203,204,35,373,205,374,37,38,210,211,215,216,375,217,218,106,107,220,533,43,44,45,46,48,92,247,248,249,250,251,252,253,392,543,544,254,545,394,547,93,255,256,257,548,258,259,549,399,260,550,261,262,400,401,263,402,552,553,264,49,403,108,405,555,406,556,557,569,271,416,273,275,94,576,95,96,51,281,52,282,580,283,421,286,581,582,583,584,290,291,292,293,294,295,296,297,424,298,585,586,299,300,588,301,303,304,589,425,426,305,591,306,307,308,309,60,61,62,595,596,600,109,603,443,447,449,97,98,99,100,324,325,326,327,328,71,75,76,78,80,330,331,453,456,332,333],"tindex":"c039132e-3f53-11e6-bd1a-59993f02164f","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:116","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<?> getFieldAdapter(com.google.gson.Gson gson, java.lang.reflect.Field field, com.google.gson.reflect.TypeToken<?> fieldType) {\n    if (field.isSynthetic()) {\n        {\n            com.google.gson.annotations.JsonAdapter com.google.gson.annotations.JsonAdapter = field.getAnnotation(com.google.gson.annotations.JsonAdapter.com.google.gson.annotations.JsonAdapter.java.lang.Class);\n            if (annotation != null) {\n                com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory.getTypeAdapter(com.google.gson.internal.ConstructorConstructor, gson, fieldType, annotation);\n                if (adapter != null)\n                    return adapter;\n                \n            } \n            return gson.getAdapter(fieldType);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352206198/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"field"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"c039132f-3f53-11e6-bd1a-2d7edf711e2a","method":{"position":"com.google.gson.JsonObject:89","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Number value) {\n    if (property == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352206198/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            add(property, createJsonElement(value));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:118","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"c0391330-3f53-11e6-bd1a-9be251c80341","method":{"position":"com.google.gson.internal.Primitives:79","type":"CtMethodImpl","sourcecode":"public static boolean isWrapperType(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.WildcardType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352206198/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (type instanceof java.lang.reflect.WildcardType) {\n                {\n                    if (type instanceof java.lang.Class<?>) {\n                        {\n                            return com.google.gson.internal.Primitives.com.google.gson.internal.Primitives.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.containsKey(com.google.gson.internal.$Gson$Preconditions.checkNotNull(type));\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352206198/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352206198/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:578","type":"CtBinaryOperatorImpl"},"failures":[649],"tindex":"c0393a41-3f53-11e6-bd1a-d9f3b51612fd","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:429","type":"CtMethodImpl","sourcecode":"private void rotateRight(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root == null) {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivotRight;\n            if (pivotRight != null) {\n                pivotRight.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            } \n            replaceInParent(root, pivot);\n            pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot;\n            root.int = (java.lang.Math.max((right != null ? right.int : 0), (pivotRight != null ? pivotRight.int : 0))) + 1;\n            pivot.int = (java.lang.Math.max(root.int, (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352206198/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"root"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"c0393a42-3f53-11e6-bd1a-f3170d48511d","method":{"position":"com.google.gson.FieldNamingPolicy:137","type":"CtMethodImpl","sourcecode":"private static java.lang.String upperCaseFirstLetter(java.lang.String name) {\n    if (name == null) {\n        {\n            if (name == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352206198/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (name == null) {\n                        {\n                            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n                            int int = 0;\n                            char char = name.charAt(index);\n                            while (index < ((name.length()) - 1)) {\n                                if (java.lang.Character.isLetter(firstCharacter)) {\n                                    break;\n                                } \n                                fieldNameBuilder.append(firstCharacter);\n                                firstCharacter = name.charAt((++index));\n                            }\n                            if (index == (name.length())) {\n                                return fieldNameBuilder.toString();\n                            } \n                            if (!(java.lang.Character.isUpperCase(firstCharacter))) {\n                                java.lang.String java.lang.String = com.google.gson.FieldNamingPolicy.modifyString(java.lang.Character.toUpperCase(firstCharacter), name, (++index));\n                                return fieldNameBuilder.append(modifiedTarget).toString();\n                            } else {\n                                return name;\n                            }\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352206198/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352206198/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:120","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"c0396153-3f53-11e6-bd1a-f13548b15c1b","method":{"position":"com.google.gson.internal.$Gson$Types:511","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    return (o instanceof java.lang.reflect.GenericArrayType) && (com.google.gson.internal.$Gson$Types.equals(com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl.this, ((java.lang.reflect.GenericArrayType)(o))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:554","type":"CtBinaryOperatorImpl"},"failures":[310,312,313,318,320,68],"tindex":"c0396154-3f53-11e6-bd1a-adb7c2b5be21","method":{"position":"com.google.gson.GsonBuilder:551","type":"CtMethodImpl","sourcecode":"private void addTypeAdaptersForDate(java.lang.String datePattern, int dateStyle, int timeStyle, java.util.List<com.google.gson.TypeAdapterFactory> factories) {\n    if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352206198/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352206198/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    com.google.gson.DefaultDateTypeAdapter com.google.gson.DefaultDateTypeAdapter;\n                    if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n                        dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(datePattern);\n                    } else if ((dateStyle != (java.text.DateFormat.java.text.DateFormat.int)) && (timeStyle != (java.text.DateFormat.java.text.DateFormat.int))) {\n                        dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(dateStyle , timeStyle);\n                    } else {\n                        return ;\n                    }\n                    factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.util.Date.java.util.Date.java.lang.Class), dateTypeAdapter));\n                    factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Timestamp.java.sql.Timestamp.java.lang.Class), dateTypeAdapter));\n                    factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Date.java.sql.Date.java.lang.Class), dateTypeAdapter));\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"datePattern":"datePattern"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl"},"failures":[4,89,90,336,337,114,650,651,652,340,341,653,654,655,656,657,658,659,660,661,662,343,344,345,115,116,117,120,124,125,126,127,128,129,132,9,11,15,16,91,158,350,159,162,164,165,353,166,167,354,170,355,356,357,173,358,174,175,359,360,176,178,362,27,179,363,364,183,365,184,186,187,188,366,189,367,368,369,370,371,191,192,195,196,197,33,198,199,200,372,201,202,203,204,373,374,37,209,210,211,215,216,375,217,218,220,39,40,663,664,665,666,667,44,46,92,390,391,247,248,251,392,254,394,93,257,258,259,399,261,400,401,402,403,405,406,271,416,273,275,94,95,96,51,281,52,282,283,284,421,290,291,292,293,294,295,424,298,299,300,303,304,425,58,426,305,306,308,309,433,442,443,444,317,447,449,97,98,99,100,324,327,328,76,77,78,80,81,84,87,330,331],"tindex":"c0398865-3f53-11e6-bd1a-0ff5fc94f011","method":{"position":"com.google.gson.stream.JsonWriter:385","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter name(java.lang.String name) throws java.io.IOException {\n    if (name == null) {\n        {\n            if (name == null) {\n                throw new java.lang.NullPointerException(\"name == null\");\n            } \n            if ((java.lang.String) != null) {\n                throw new java.lang.IllegalStateException();\n            } \n            if ((int) == 0) {\n                throw new java.lang.IllegalStateException(\"JsonWriter is closed.\");\n            } \n            java.lang.String = name;\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352206198/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"c0398866-3f53-11e6-bd1a-53ed3bdd3a31","method":{"position":"com.google.gson.internal.bind.TypeAdapters:201","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                {\n                    out.value(value);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352206198/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352206198/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:141","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"c0398867-3f53-11e6-bd1a-1f5751ff605c","method":{"position":"com.google.gson.internal.Primitives:79","type":"CtMethodImpl","sourcecode":"public static boolean isWrapperType(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.WildcardType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352206198/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (type instanceof java.lang.reflect.WildcardType) {\n                {\n                    if (type instanceof java.lang.Class<?>) {\n                        {\n                            return com.google.gson.internal.Primitives.com.google.gson.internal.Primitives.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.containsKey(com.google.gson.internal.$Gson$Preconditions.checkNotNull(type));\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352206198/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352206198/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:243","type":"CtBinaryOperatorImpl"},"failures":[295,296,297,298,585,299],"tindex":"c039af78-3f53-11e6-bd1a-750425b5a81b","method":{"position":"com.google.gson.internal.Excluder:242","type":"CtMethodImpl","sourcecode":"private boolean isValidUntil(com.google.gson.annotations.Until annotation) {\n    if (annotation != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352206198/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (annotation != null) {\n                double double = annotation.value();\n                if (annotationVersion <= (double)) {\n                    return false;\n                } \n            } \n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl"},"failures":[668,28,29,31,32,390,391,286,581,582,583,584,69,76],"tindex":"c039af79-3f53-11e6-bd1a-73f80f7cca69","method":{"position":"com.google.gson.JsonObject:78","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.String value) {\n    if (value == null) {\n        {\n            add(property, createJsonElement(value));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352206198/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:99","type":"CtVariableReadImpl"},"failures":[404,555,406,556],"tindex":"c039af7a-3f53-11e6-bd1a-f711da8d521c","method":{"position":"com.google.gson.internal.Excluder:96","type":"CtMethodImpl","sourcecode":"public com.google.gson.internal.Excluder withExclusionStrategy(com.google.gson.ExclusionStrategy exclusionStrategy, boolean serialization, boolean deserialization) {\n    if (serialization) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352206198/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.Excluder com.google.gson.internal.Excluder = clone();\n            if (serialization) {\n                result.java.util.List<com.google.gson.ExclusionStrategy> = new java.util.ArrayList<com.google.gson.ExclusionStrategy>(java.util.List<com.google.gson.ExclusionStrategy>);\n                result.java.util.List<com.google.gson.ExclusionStrategy>.add(exclusionStrategy);\n            } \n            if (deserialization) {\n                result.java.util.List<com.google.gson.ExclusionStrategy> = new java.util.ArrayList<com.google.gson.ExclusionStrategy>(java.util.List<com.google.gson.ExclusionStrategy>);\n                result.java.util.List<com.google.gson.ExclusionStrategy>.add(exclusionStrategy);\n            } \n            return result;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serialization":"serialization"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:120","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"c039d68b-3f53-11e6-bd1a-5d9547daa4be","method":{"position":"com.google.gson.JsonObject:186","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonNull) {\n        {\n            if (o instanceof com.google.gson.JsonArray) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352206198/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return (o == (com.google.gson.JsonObject.this)) || ((o instanceof com.google.gson.JsonObject) && (((com.google.gson.JsonObject)(o)).com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.equals(com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>)));\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352206198/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:118","type":"CtBinaryOperatorImpl"},"failures":[188,281,52,282,580,283,284,53,55,285,422],"tindex":"c039d68c-3f53-11e6-bd1a-47eea669ace2","method":{"position":"com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory:50","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nstatic com.google.gson.TypeAdapter<?> getTypeAdapter(com.google.gson.internal.ConstructorConstructor constructorConstructor, com.google.gson.Gson gson, com.google.gson.reflect.TypeToken<?> fieldType, com.google.gson.annotations.JsonAdapter annotation) {\n    if (annotation != null) {\n        {\n            if (annotation != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352206198/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    java.lang.Class<?> java.lang.Class<?> = annotation.value();\n                    if (com.google.gson.TypeAdapter.com.google.gson.TypeAdapter.java.lang.Class.isAssignableFrom(value)) {\n                        java.lang.Class<com.google.gson.TypeAdapter<?>> java.lang.Class<com.google.gson.TypeAdapter<?>> = ((java.lang.Class<com.google.gson.TypeAdapter<?>>)(value));\n                        return constructorConstructor.get(com.google.gson.reflect.TypeToken.get(typeAdapter)).construct();\n                    } \n                    if (com.google.gson.TypeAdapterFactory.com.google.gson.TypeAdapterFactory.java.lang.Class.isAssignableFrom(value)) {\n                        java.lang.Class<com.google.gson.TypeAdapterFactory> java.lang.Class<com.google.gson.TypeAdapterFactory> = ((java.lang.Class<com.google.gson.TypeAdapterFactory>)(value));\n                        return constructorConstructor.get(com.google.gson.reflect.TypeToken.get(typeAdapterFactory)).construct().create(gson, fieldType);\n                    } \n                    throw new java.lang.IllegalArgumentException(\"@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.\");\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352206198/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:85","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"c039d68d-3f53-11e6-bd1a-c928649c0d91","method":{"position":"com.google.gson.internal.$Gson$Types:411","type":"CtMethodImpl","sourcecode":"private static int indexOf(java.lang.Object[] array, java.lang.Object toFind) {\n    for (int int = 0 ; i < (array.int) ; i++) {\n        if (toFind.equals(array[i])) {\n            return i;\n        } \n    }\n    throw new java.util.NoSuchElementException();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"toFind"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:554","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"c039fd9e-3f53-11e6-bd1a-f3ce68230118","method":{"position":"com.google.gson.GsonBuilder:551","type":"CtMethodImpl","sourcecode":"private void addTypeAdaptersForDate(java.lang.String datePattern, int dateStyle, int timeStyle, java.util.List<com.google.gson.TypeAdapterFactory> factories) {\n    if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352206198/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352206198/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    com.google.gson.DefaultDateTypeAdapter com.google.gson.DefaultDateTypeAdapter;\n                    if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n                        dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(datePattern);\n                    } else if ((dateStyle != (java.text.DateFormat.java.text.DateFormat.int)) && (timeStyle != (java.text.DateFormat.java.text.DateFormat.int))) {\n                        dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(dateStyle , timeStyle);\n                    } else {\n                        return ;\n                    }\n                    factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.util.Date.java.util.Date.java.lang.Class), dateTypeAdapter));\n                    factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Timestamp.java.sql.Timestamp.java.lang.Class), dateTypeAdapter));\n                    factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Date.java.sql.Date.java.lang.Class), dateTypeAdapter));\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"datePattern":"datePattern"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:118","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"c039fd9f-3f53-11e6-bd1a-1335f6e2fe52","method":{"position":"com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory:50","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nstatic com.google.gson.TypeAdapter<?> getTypeAdapter(com.google.gson.internal.ConstructorConstructor constructorConstructor, com.google.gson.Gson gson, com.google.gson.reflect.TypeToken<?> fieldType, com.google.gson.annotations.JsonAdapter annotation) {\n    if (annotation != null) {\n        {\n            if (annotation != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352206198/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    java.lang.Class<?> java.lang.Class<?> = annotation.value();\n                    if (com.google.gson.TypeAdapter.com.google.gson.TypeAdapter.java.lang.Class.isAssignableFrom(value)) {\n                        java.lang.Class<com.google.gson.TypeAdapter<?>> java.lang.Class<com.google.gson.TypeAdapter<?>> = ((java.lang.Class<com.google.gson.TypeAdapter<?>>)(value));\n                        return constructorConstructor.get(com.google.gson.reflect.TypeToken.get(typeAdapter)).construct();\n                    } \n                    if (com.google.gson.TypeAdapterFactory.com.google.gson.TypeAdapterFactory.java.lang.Class.isAssignableFrom(value)) {\n                        java.lang.Class<com.google.gson.TypeAdapterFactory> java.lang.Class<com.google.gson.TypeAdapterFactory> = ((java.lang.Class<com.google.gson.TypeAdapterFactory>)(value));\n                        return constructorConstructor.get(com.google.gson.reflect.TypeToken.get(typeAdapterFactory)).construct().create(gson, fieldType);\n                    } \n                    throw new java.lang.IllegalArgumentException(\"@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.\");\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352206198/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:233","type":"CtBinaryOperatorImpl"},"failures":[295,296,297,424,298,585,586,299],"tindex":"c039fda0-3f53-11e6-bd1a-bd1161e53a67","method":{"position":"com.google.gson.internal.Excluder:232","type":"CtMethodImpl","sourcecode":"private boolean isValidSince(com.google.gson.annotations.Since annotation) {\n    if (annotation != null) {\n        {\n            if (annotation != null) {\n                double double = annotation.value();\n                if (annotationVersion > (double)) {\n                    return false;\n                } \n            } \n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352206198/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:109","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"c03a24b1-3f53-11e6-bd1a-953e1fbbad7d","method":{"position":"com.google.gson.internal.$Gson$Types:213","type":"CtMethodImpl","sourcecode":"private static int hashCodeOrZero(java.lang.Object o) {\n    return o != null ? o.hashCode() : 0;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl"},"failures":[593,601,321],"tindex":"c03a24b2-3f53-11e6-bd1a-a7a87bb38f07","method":{"position":"com.google.gson.internal.bind.DateTypeAdapter:69","type":"CtMethodImpl","sourcecode":"private synchronized java.util.Date deserializeToDate(java.lang.String json) {\n    if (json == null) {\n        {\n            try {\n                return java.text.DateFormat.parse(json);\n            } catch (java.text.ParseException ignored) {\n            }\n            try {\n                return java.text.DateFormat.parse(json);\n            } catch (java.text.ParseException ignored) {\n            }\n            try {\n                return java.text.DateFormat.parse(json);\n            } catch (java.text.ParseException e) {\n                throw new com.google.gson.JsonSyntaxException(json , e);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352206198/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:189","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"c03a24b3-3f53-11e6-bd1a-d3393f71023d","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:223","type":"CtMethodImpl","sourcecode":"private boolean equal(java.lang.Object a, java.lang.Object b) {\n    if (!(a instanceof java.lang.reflect.WildcardType)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352206198/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (a == b) || ((a != null) && (a.equals(b)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"c03a24b4-3f53-11e6-bd1a-5b424d5f225d","method":{"position":"com.google.gson.Gson:285","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352206198/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (value == null) {\n                        {\n                            if (value == null) {\n                                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352206198/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                throw new java.io.IOException();\n                            } else {\n                                {\n                                    if (value == null) {\n                                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352206198/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                        throw new java.io.IOException();\n                                    } else {\n                                        {\n                                            if (value == null) {\n                                                out.nullValue();\n                                                return ;\n                                            } \n                                            float float = value.floatValue();\n                                            checkValidFloatingPoint(floatValue);\n                                            out.value(value);\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352206198/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.io.IOException();\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352206198/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:141","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"c03a4bc5-3f53-11e6-bd1a-85fc8f05a2ec","method":{"position":"com.google.gson.internal.Primitives:79","type":"CtMethodImpl","sourcecode":"public static boolean isWrapperType(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.WildcardType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352206198/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (type instanceof java.lang.reflect.WildcardType) {\n                {\n                    if (type instanceof java.lang.Class<?>) {\n                        {\n                            return com.google.gson.internal.Primitives.com.google.gson.internal.Primitives.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.containsKey(com.google.gson.internal.$Gson$Preconditions.checkNotNull(type));\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352206198/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352206198/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl"},"failures":[367,368,369,457,483,484,291,292,293],"tindex":"c03a4bc6-3f53-11e6-bd1a-7f5682d7b074","method":{"position":"com.google.gson.FieldNamingPolicy:122","type":"CtMethodImpl","sourcecode":"private static java.lang.String separateCamelCase(java.lang.String name, java.lang.String separator) {\n    if (separator == null) {\n        {\n            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            for (int int = 0 ; i < (name.length()) ; i++) {\n                char char = name.charAt(i);\n                if ((java.lang.Character.isUpperCase(character)) && ((translation.length()) != 0)) {\n                    translation.append(separator);\n                } \n                translation.append(character);\n            }\n            return translation.toString();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352206198/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"separator"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:107","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"c03a4bc7-3f53-11e6-bd1a-47ded8490b9c","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:512","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"rawtypes\")\n@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonArray) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352206198/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof java.util.Map.Entry) {\n                java.util.Map.Entry java.util.Map.Entry = ((java.util.Map.Entry)(o));\n                return ((K) == null ? (other.getKey()) == null : K.equals(other.getKey())) && ((V) == null ? (other.getValue()) == null : V.equals(other.getValue()));\n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"c03a72d8-3f53-11e6-bd1a-e16b97a77bab","method":{"position":"com.google.gson.Gson:136","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352206198/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return toJsonTree(src, typeOfSrc);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:120","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"c03a72d9-3f53-11e6-bd1a-63ed8bfd4d72","method":{"position":"com.google.gson.internal.LinkedTreeMap:481","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"rawtypes\")\n@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonNull) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352206198/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof java.util.Map.Entry) {\n                java.util.Map.Entry java.util.Map.Entry = ((java.util.Map.Entry)(o));\n                return ((K) == null ? (other.getKey()) == null : K.equals(other.getKey())) && ((V) == null ? (other.getValue()) == null : V.equals(other.getValue()));\n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:131","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"c03a72da-3f53-11e6-bd1a-192a49a4b3b7","method":{"position":"com.google.gson.internal.$Gson$Types:93","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type canonicalize(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class) {\n        java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(type));\n        return c.isArray() ? new com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl(com.google.gson.internal.$Gson$Types.canonicalize(c.getComponentType())) : c;\n    } else if (type instanceof java.lang.reflect.ParameterizedType) {\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(type));\n        return new com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl(p.getOwnerType() , p.getRawType() , p.getActualTypeArguments());\n    } else if (type instanceof java.lang.reflect.GenericArrayType) {\n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(type));\n        return new com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl(g.getGenericComponentType());\n    } else if (type instanceof java.lang.reflect.WildcardType) {\n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(type));\n        return new com.google.gson.internal.$Gson$Types.WildcardTypeImpl(w.getUpperBounds() , w.getLowerBounds());\n    } else {\n        return type;\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.JsonPrimitive:297","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"c03a72db-3f53-11e6-bd1a-79acb660b686","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n@java.lang.Override\nvoid write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value instanceof java.lang.Number) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352206198/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352206198/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    java.lang.Object java.lang.Object = field.get(value);\n                    com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n                    t.write(writer, fieldValue);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl"},"failures":[33,69],"tindex":"c03a99ec-3f53-11e6-bd1a-7550de51ab4d","method":{"position":"com.google.gson.Gson:133","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src) {\n    if (src == null) {\n        {\n            return toJsonTree(src);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352206198/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:462","type":"CtBinaryOperatorImpl"},"failures":[221,225,227,231,232,241,454],"tindex":"c03a99ed-3f53-11e6-bd1a-cf90ff2d09be","method":{"position":"com.google.gson.Gson:297","type":"CtMethodImpl","sourcecode":"private void checkValidFloatingPoint(double value) {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352206198/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                throw new java.lang.IllegalArgumentException(((value + \" is not a valid double value as per JSON specification. To override this\") + \" behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.\"));\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:198","type":"CtBinaryOperatorImpl"},"failures":[110,111,124,125,126,127,128,15,133,134,136,137,138,139,140,143,144,145,149,91,152,154,156,165,175,179,103,194,28,197,198,200,202,203,208,211,212,213,214,219,226,228,237,240,244,246,669,670,92,247,251,93,257,258,267,302,327],"tindex":"c03ac0fe-3f53-11e6-bd1a-f349182b98ed","method":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:84","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Object array) throws java.io.IOException {\n    if (array == null) {\n        {\n            if (array == null) {\n                out.nullValue();\n                return ;\n            } \n            out.beginArray();\n            for (int int = 0, int int = java.lang.reflect.Array.getLength(array) ; i < length ; i++) {\n                E E = ((E)(java.lang.reflect.Array.get(array, i)));\n                com.google.gson.TypeAdapter<E>.write(out, value);\n            }\n            out.endArray();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352206198/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:154","type":"CtUnaryOperatorImpl"},"failures":[460,112,671,672,673,674,114,675,676,677,678,679,680,681,682,683,684,685,632,686,650,651,652,687,340,688,689,690,691,692,648,668,341,693,116,117,17,351,162,352,101,163,471,472,473,474,169,171,478,177,479,27,179,181,102,182,103,104,105,188,28,29,31,32,33,36,106,107,694,695,42,43,44,45,46,47,48,390,391,108,557,271,578,286,581,582,583,584,287,56,58,306,308,309,594,433,69,73,74,76,77,78,84],"tindex":"c03ac0ff-3f53-11e6-bd1a-191910ab7723","method":{"position":"com.google.gson.internal.LinkedTreeMap:121","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedTreeMap.Node<K, V> find(K key, boolean create) {\n    if (!create) {\n        {\n            java.util.Comparator<? super K> java.util.Comparator<? super K> = com.google.gson.internal.LinkedTreeMap.this.java.util.Comparator<? super K>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            int int = 0;\n            if (nearest != null) {\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                java.lang.Comparable<java.lang.Object> java.lang.Comparable<java.lang.Object> = comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>) ? ((java.lang.Comparable<java.lang.Object>)(key)) : null;\n                while (true) {\n                    comparison = comparableKey != null ? comparableKey.compareTo(nearest.K) : comparator.compare(key, nearest.K);\n                    if (comparison == 0) {\n                        return nearest;\n                    } \n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = comparison < 0 ? nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> : nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    if (child == null) {\n                        break;\n                    } \n                    nearest = child;\n                }\n            } \n            if (!create) {\n                return null;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.this.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            if (nearest == null) {\n                if ((comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>)) && (!(key instanceof java.lang.Comparable))) {\n                    throw new java.lang.ClassCastException(((key.getClass().getName()) + \" is not Comparable\"));\n                } \n                created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n            } else {\n                created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                if (comparison < 0) {\n                    nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                } else {\n                    nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                }\n                rebalance(nearest, true);\n            }\n            (int)++;\n            (int)++;\n            return created;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352206198/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"create":"create"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1531","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"c03ae810-3f53-11e6-bd1a-131e32f8630d","method":{"position":"com.google.gson.stream.JsonReader:755","type":"CtMethodImpl","sourcecode":"private boolean isLiteral(char c) throws java.io.IOException {\n    if ((c >= 'A') && (c <= 'F')) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352206198/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            switch (c) {\n                case '/' :\n                case '\\\\' :\n                case ';' :\n                case '#' :\n                case '=' :\n                    checkLenient();\n                case '{' :\n                case '}' :\n                case '[' :\n                case ']' :\n                case ':' :\n                case ',' :\n                case ' ' :\n                case '\\t' :\n                case '\\f' :\n                case '\\r' :\n                case '\\n' :\n                    return false;\n                default :\n                    return true;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"c"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:103","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"c03ae811-3f53-11e6-bd1a-37908c65a992","method":{"position":"com.google.gson.internal.ConstructorConstructor:200","type":"CtMethodImpl","sourcecode":"private <T>com.google.gson.internal.ObjectConstructor<T> newUnsafeAllocator(final java.lang.reflect.Type type, final java.lang.Class<? super T> rawType) {\n    if (type instanceof java.lang.reflect.GenericArrayType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352206198/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new com.google.gson.internal.ObjectConstructor<T>() {\n                private final com.google.gson.internal.UnsafeAllocator unsafeAllocator = com.google.gson.internal.UnsafeAllocator.create();\n\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                public T construct() {\n                    try {\n                        java.lang.Object java.lang.Object = com.google.gson.internal.UnsafeAllocator.newInstance(rawType);\n                        return ((T)(newInstance));\n                    } catch (java.lang.Exception e) {\n                        throw new java.lang.RuntimeException((((\"Unable to invoke no-args constructor for \" + type) + \". \") + \"Register an InstanceCreator with Gson for this type may fix this problem.\") , e);\n                    }\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:127","type":"CtInvocationImpl"},"failures":[],"tindex":"c03b0f22-3f53-11e6-bd1a-d9785773747b","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:125","type":"CtMethodImpl","sourcecode":"private java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> getBoundFields(com.google.gson.Gson context, com.google.gson.reflect.TypeToken<?> type, java.lang.Class<?> raw) {\n    if (raw.isInterface()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352206198/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> = new java.util.LinkedHashMap<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField>();\n            if (raw.isInterface()) {\n                return result;\n            } \n            java.lang.reflect.Type java.lang.reflect.Type = type.getType();\n            while (raw != (java.lang.Object.java.lang.Object.java.lang.Class)) {\n                java.lang.reflect.Field[] java.lang.reflect.Field[] = raw.getDeclaredFields();\n                for (java.lang.reflect.Field java.lang.reflect.Field : fields) {\n                    boolean boolean = excludeField(field, true);\n                    boolean boolean = excludeField(field, false);\n                    if ((!serialize) && (!deserialize)) {\n                        continue;\n                    } \n                    field.setAccessible(true);\n                    java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, field.getGenericType());\n                    com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = createBoundField(context, field, getFieldName(field), com.google.gson.reflect.TypeToken.get(fieldType), serialize, deserialize);\n                    com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = result.put(boundField.java.lang.String, boundField);\n                    if (previous != null) {\n                        throw new java.lang.IllegalArgumentException(((declaredType + \" declares multiple JSON fields named \") + (previous.java.lang.String)));\n                    } \n                }\n                type = com.google.gson.reflect.TypeToken.get(com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, raw.getGenericSuperclass()));\n                raw = type.getRawType();\n            }\n            return result;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"raw"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"c03b3633-3f53-11e6-bd1a-b3969b8108bf","method":{"position":"com.google.gson.Gson:285","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352206198/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (value == null) {\n                        {\n                            if (value == null) {\n                                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352206198/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                throw new java.io.IOException();\n                            } else {\n                                {\n                                    if (value == null) {\n                                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352206198/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                        throw new java.io.IOException();\n                                    } else {\n                                        {\n                                            if (value == null) {\n                                                out.nullValue();\n                                                return ;\n                                            } \n                                            float float = value.floatValue();\n                                            checkValidFloatingPoint(floatValue);\n                                            out.value(value);\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352206198/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.io.IOException();\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352206198/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:86","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"c03b3634-3f53-11e6-bd1a-5f08fbfc1f9b","method":{"position":"com.google.gson.JsonArray:115","type":"CtMethodImpl","sourcecode":"public boolean contains(com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonArray) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352206198/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return java.util.List<com.google.gson.JsonElement>.contains(element);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"c03b3635-3f53-11e6-bd1a-01189807ee7e","method":{"position":"com.google.gson.TypeAdapter:254","type":"CtMethodImpl","sourcecode":"public final T fromJson(java.io.Reader in) throws java.io.IOException {\n    if (in == null) {\n        {\n            com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(in);\n            return read(reader);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352206198/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"c03b3636-3f53-11e6-bd1a-c1d807e99a27","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:175","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            if (!(isLenient())) {\n                double double = value.doubleValue();\n                if ((java.lang.Double.isNaN(d)) || (java.lang.Double.isInfinite(d))) {\n                    throw new java.lang.IllegalArgumentException((\"JSON forbids NaN and infinities: \" + value));\n                } \n            } \n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352206198/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":75,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
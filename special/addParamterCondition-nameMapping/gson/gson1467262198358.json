{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":254,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":131,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":214,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":115,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":273,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":6,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":237,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":313,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":91,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":250,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":140,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":147,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":312,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":35,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":188,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":345,"com.google.gson.JsonObjectTest.testAddingNullPropertyValue":266,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":296,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":384,"com.google.gson.functional.ObjectTest.testSingletonLists":60,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":36,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":88,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":132,"com.google.gson.stream.JsonWriterTest.testStrings":201,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":70,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":320,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":34,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":394,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":37,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":348,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":47,"com.google.gson.functional.EnumTest.testEnumCaseMapping":187,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":130,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":198,"com.google.gson.functional.JsonTreeTest.testToJsonTree":235,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":223,"com.google.gson.JsonObjectTest.testEqualsNonEmptyObject":267,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":78,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":303,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":144,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":53,"com.google.gson.internal.bind.JsonElementReaderTest.testNestedObjects":260,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":318,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":272,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":212,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":45,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":377,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":326,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":205,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":98,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":231,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":128,"com.google.gson.JsonParserTest.testParseString":259,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":67,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":167,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":238,"com.google.gson.functional.StreamingTypeAdaptersTest.testFromJsonTree":229,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":122,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":173,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":287,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":114,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":325,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":13,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":203,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":316,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":280,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":306,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":17,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":295,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":224,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":90,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":245,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":86,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":284,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":376,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":309,"com.google.gson.functional.CollectionTest.testSetDeserialization":361,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":346,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":4,"com.google.gson.functional.EnumTest.testEnumSet":181,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":30,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":24,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":104,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":209,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":65,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":190,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":294,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":286,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":42,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":71,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":177,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":118,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":178,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":249,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":179,"com.google.gson.internal.bind.JsonElementReaderTest.testObject":262,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":243,"com.google.gson.functional.MapTest.testSerializeMaps":103,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":366,"com.google.gson.functional.MapTest.testComplexKeysSerialization":113,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":236,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":55,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":392,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":390,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":357,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":100,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":268,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":275,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":328,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":225,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":155,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":75,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":380,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":204,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":136,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":83,"com.google.gson.functional.CollectionTest.testQueueSerialization":142,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":269,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnValue":199,"com.google.gson.functional.MapTest.testMapOfMapSerialization":108,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":11,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":133,"com.google.gson.functional.FieldNamingTest.testIdentity":367,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":39,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":329,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":234,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":279,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":310,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":134,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":207,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":349,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":193,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":10,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":84,"com.google.gson.functional.MapTest.testMapSubclassSerialization":102,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":123,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":302,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":157,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":195,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":239,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":335,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":293,"com.google.gson.functional.EnumTest.testEnumSubclass":184,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":319,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":373,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":25,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":353,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":117,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":350,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":219,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":192,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":278,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":94,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":311,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":166,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":54,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":291,"com.google.gson.JsonObjectTest.testReadPropertyWithEmptyStringName":264,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":26,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":61,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":387,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":369,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":370,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":242,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":135,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":211,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":343,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":301,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":96,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":151,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":175,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":159,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":9,"com.google.gson.JsonArrayTest.testRemove":15,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":87,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":85,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":197,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":383,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":20,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":105,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":386,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":180,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":358,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":99,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":337,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":330,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":119,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":158,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":220,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":79,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":300,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":116,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":356,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":347,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":97,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":49,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":1,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":363,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":183,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":360,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":359,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":149,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":240,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":391,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":217,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":403,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":32,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":277,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":5,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":282,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":288,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":72,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":393,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":378,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":283,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":226,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":333,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":315,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":186,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":120,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":150,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":145,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":338,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":153,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":382,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":388,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":172,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":389,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":221,"com.google.gson.JsonArrayTest.testSet":0,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":161,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":182,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":385,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":255,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":244,"com.google.gson.functional.MapTest.testGeneralMapField":111,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":314,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":154,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":170,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":374,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":92,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":73,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":127,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":174,"com.google.gson.MixedStreamTest.testReadMixedStreamed":402,"com.google.gson.JsonObjectTest.testDeepCopy":270,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":148,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":191,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":372,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":305,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":48,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":285,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":340,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":139,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":27,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":51,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":396,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":263,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":40,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":208,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":28,"com.google.gson.functional.ObjectTest.testNestedDeserialization":334,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":38,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":323,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":379,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":218,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":46,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":368,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":274,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":292,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":352,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":241,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":253,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":3,"com.google.gson.stream.JsonWriterTest.testDoubles":215,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":110,"com.google.gson.functional.MapTest.testInterfaceTypeMap":109,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":156,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":19,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":31,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":185,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":355,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":74,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":44,"com.google.gson.MixedStreamTest.testWriteClosed":401,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":143,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":381,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":62,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":281,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":297,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":18,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":248,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":68,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":160,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":342,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":21,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":63,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":397,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":399,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":354,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":146,"com.google.gson.internal.bind.JsonElementReaderTest.testSkipValue":261,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":89,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":230,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":7,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":176,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":233,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":56,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":163,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":247,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":95,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":398,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":106,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":327,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":82,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":129,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":332,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":141,"com.google.gson.functional.MapTest.testRawMapSerialization":112,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":194,"com.google.gson.JsonParserTest.testParseReader":258,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":33,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":322,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":351,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":246,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":257,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":69,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":165,"com.google.gson.ObjectTypeAdapterTest.testSerialize":14,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":58,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":125,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromRawTypes":16,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":251,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":169,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":364,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":298,"com.google.gson.functional.MapTest.testMapWithQuotes":107,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":76,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":23,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":210,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":41,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":344,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":256,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":290,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":331,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":101,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":80,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":171,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":317,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":341,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":77,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":81,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":189,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":252,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":29,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":93,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":164,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":121,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":307,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":124,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":228,"com.google.gson.internal.LinkedHashTreeMapTest.testRemoveRootDoesNotDoubleUnlink":2,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":227,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":321,"com.google.gson.functional.ObjectTest.testNestedSerialization":66,"com.google.gson.JsonObjectTest.testAddingStringProperties":271,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":162,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":126,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":50,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":152,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":22,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":196,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":206,"com.google.gson.stream.JsonWriterTest.testUnicodeLineBreaksEscaped":202,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":64,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":222,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":304,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":339,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":324,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":336,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":395,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":137,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":168,"com.google.gson.functional.CollectionTest.testSetSerialization":362,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":375,"com.google.gson.functional.StringTest.testStringValueSerialization":138,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":289,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":57,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":8,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":276,"com.google.gson.MixedStreamTest.testWriteInvalidState":400,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":371,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":12,"com.google.gson.stream.JsonWriterTest.testWrongTopLevelType":200,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":232,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":365,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":52,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":265,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":308,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":43,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":216,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":299,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":59,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":213},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:120","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonNull"},"failures":[],"tindex":"18c4c994-3e7e-11e6-8dd0-f3a88ea1e6a2","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:804","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonNull) {\n        {\n            return (o instanceof java.util.Map.Entry) && ((findByEntry(((java.util.Map.Entry<?, ?>)(o)))) != null);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649268/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"18c4f0a5-3e7e-11e6-8dd0-a5f3b97cafaf","method":{"position":"com.google.gson.Gson:871","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n        {\n            if (json == null) {\n                {\n                    if (json == null) {\n                        return null;\n                    } \n                    return ((T)(fromJson(new com.google.gson.internal.bind.JsonTreeReader(json), typeOfT)));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649268/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649268/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:159","type":"CtBinaryOperatorImpl","sourcecode":"a == b"},"failures":[],"tindex":"18c517b6-3e7e-11e6-8dd0-712c459d4d66","method":{"position":"com.google.gson.internal.$Gson$Types:151","type":"CtMethodImpl","sourcecode":"static boolean equal(java.lang.Object a, java.lang.Object b) {\n    return (a == b) || ((a != null) && (a.equals(b)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"b","b":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonArray:58","type":"CtBinaryOperatorImpl","sourcecode":"element == null"},"failures":[0],"tindex":"18c517b7-3e7e-11e6-8dd0-17be2f051ccb","method":{"position":"com.google.gson.JsonArray:81","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement set(int index, com.google.gson.JsonElement element) {\n    if (element == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649268/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return java.util.List<com.google.gson.JsonElement>.set(index, element);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:340","type":"CtBinaryOperatorImpl","sourcecode":"toResolve instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"18c517b8-3e7e-11e6-8dd0-4f78fee455ca","method":{"position":"com.google.gson.internal.$Gson$Types:226","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type getGenericSupertype(java.lang.reflect.Type context, java.lang.Class<?> rawType, java.lang.Class<?> toResolve) {\n    if (toResolve == rawType) {\n        return context;\n    } \n    if (toResolve.isInterface()) {\n        java.lang.Class<?>[] java.lang.Class<?>[] = rawType.getInterfaces();\n        for (int int = 0, int int = interfaces.int ; i < length ; i++) {\n            if ((interfaces[i]) == toResolve) {\n                return rawType.getGenericInterfaces()[i];\n            } else if (toResolve.isAssignableFrom(interfaces[i])) {\n                return com.google.gson.internal.$Gson$Types.getGenericSupertype(rawType.getGenericInterfaces()[i], interfaces[i], toResolve);\n            } \n        }\n    } \n    if (!(rawType.isInterface())) {\n        while (rawType != (java.lang.Object.java.lang.Object.java.lang.Class)) {\n            java.lang.Class<?> java.lang.Class<?> = rawType.getSuperclass();\n            if (rawSupertype == toResolve) {\n                return rawType.getGenericSuperclass();\n            } else if (toResolve.isAssignableFrom(rawSupertype)) {\n                return com.google.gson.internal.$Gson$Types.getGenericSupertype(rawType.getGenericSuperclass(), rawSupertype, toResolve);\n            } \n            rawType = rawSupertype;\n        }\n    } \n    return toResolve;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"context"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[1],"tindex":"18c53ec9-3e7e-11e6-8dd0-bbc2ff6caa12","method":{"position":"com.google.gson.internal.bind.TypeAdapters:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649268/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:305","type":"CtBinaryOperatorImpl","sourcecode":"node != null"},"failures":[2],"tindex":"18c53eca-3e7e-11e6-8dd0-477fd5f1e7d8","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:311","type":"CtMethodImpl","sourcecode":"private void replaceInParent(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node, com.google.gson.internal.LinkedHashTreeMap.Node<K, V> replacement) {\n    if (replacement != null) {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            if (replacement != null) {\n                replacement.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = parent;\n            } \n            if (parent != null) {\n                if ((parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) == node) {\n                    parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = replacement;\n                } else {\n                    assert (parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) == node;\n                    parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = replacement;\n                }\n            } else {\n                int int = (node.int) & ((com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[].int) - 1);\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[][index] = replacement;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649268/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"replacement"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[1,3],"tindex":"18c565db-3e7e-11e6-8dd0-630f86f76bcc","method":{"position":"com.google.gson.Gson:261","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649268/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            double double = value.doubleValue();\n            checkValidFloatingPoint(doubleValue);\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[4,5,6,7,8,9,10,11,12,13,14],"tindex":"18c565dc-3e7e-11e6-8dd0-11ceb24fcc83","method":{"position":"com.google.gson.internal.Excluder:149","type":"CtMethodImpl","sourcecode":"public boolean excludeField(java.lang.reflect.Field field, boolean serialize) {\n    if (field.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649268/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (((int) & (field.getModifiers())) != 0) {\n                return true;\n            } \n            if (((double) != (com.google.gson.internal.Excluder.com.google.gson.internal.Excluder.double)) && (!(isValidVersion(field.getAnnotation(com.google.gson.annotations.Since.com.google.gson.annotations.Since.java.lang.Class), field.getAnnotation(com.google.gson.annotations.Until.com.google.gson.annotations.Until.java.lang.Class))))) {\n                return true;\n            } \n            if (field.isSynthetic()) {\n                return true;\n            } \n            if (boolean) {\n                com.google.gson.annotations.Expose com.google.gson.annotations.Expose = field.getAnnotation(com.google.gson.annotations.Expose.com.google.gson.annotations.Expose.java.lang.Class);\n                if ((annotation == null) || (serialize ? !(annotation.serialize()) : !(annotation.deserialize()))) {\n                    return true;\n                } \n            } \n            if ((!(boolean)) && (isInnerClass(field.getType()))) {\n                return true;\n            } \n            if (isAnonymousOrLocal(field.getType())) {\n                return true;\n            } \n            java.util.List<com.google.gson.ExclusionStrategy> java.util.List<com.google.gson.ExclusionStrategy> = serialize ? java.util.List<com.google.gson.ExclusionStrategy> : java.util.List<com.google.gson.ExclusionStrategy>;\n            if (!(list.isEmpty())) {\n                com.google.gson.FieldAttributes com.google.gson.FieldAttributes = new com.google.gson.FieldAttributes(field);\n                for (com.google.gson.ExclusionStrategy com.google.gson.ExclusionStrategy : list) {\n                    if (exclusionStrategy.shouldSkipField(fieldAttributes)) {\n                        return true;\n                    } \n                }\n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"field"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:125","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonObject"},"failures":[15],"tindex":"18c58ced-3e7e-11e6-8dd0-155a974c7fb7","method":{"position":"com.google.gson.JsonArray:115","type":"CtMethodImpl","sourcecode":"public boolean contains(com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonObject) {\n        {\n            return java.util.List<com.google.gson.JsonElement>.contains(element);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649268/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:166","type":"CtBinaryOperatorImpl","sourcecode":"from instanceof java.lang.Class<?>"},"failures":[16],"tindex":"18c58cee-3e7e-11e6-8dd0-1f4cd0cd8282","method":{"position":"com.google.gson.reflect.TypeToken:122","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic boolean isAssignableFrom(java.lang.reflect.Type from) {\n    if (from instanceof java.lang.Class<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649268/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (from == null) {\n                return false;\n            } \n            if (java.lang.reflect.Type.equals(from)) {\n                return true;\n            } \n            if ((java.lang.reflect.Type) instanceof java.lang.Class<?>) {\n                return java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from));\n            } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.ParameterizedType) {\n                return com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n            } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.GenericArrayType) {\n                return (java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from))) && (com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.GenericArrayType)(java.lang.reflect.Type))));\n            } else {\n                throw com.google.gson.reflect.TypeToken.buildUnexpectedTypeError(java.lang.reflect.Type, java.lang.Class.java.lang.Class.java.lang.Class, java.lang.reflect.ParameterizedType.java.lang.reflect.ParameterizedType.java.lang.Class, java.lang.reflect.GenericArrayType.java.lang.reflect.GenericArrayType.java.lang.Class);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,5,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,7,8,9,10,11,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,12,13,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206],"tindex":"18c5b3ff-3e7e-11e6-8dd0-4fb26963a9d3","method":{"position":"com.google.gson.stream.JsonWriter:413","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            writeDeferredName();\n            beforeValue(false);\n            string(value);\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649268/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[29,207],"tindex":"18c5b400-3e7e-11e6-8dd0-5b00f5cb83d0","method":{"position":"com.google.gson.Gson:133","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src) {\n    if (src == null) {\n        {\n            return toJsonTree(src);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649268/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:136","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.TypeVariable"},"failures":[],"tindex":"18c5b401-3e7e-11e6-8dd0-8fc467c9ce41","method":{"position":"com.google.gson.internal.Primitives:79","type":"CtMethodImpl","sourcecode":"public static boolean isWrapperType(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.TypeVariable) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649268/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return com.google.gson.internal.Primitives.com.google.gson.internal.Primitives.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.containsKey(com.google.gson.internal.$Gson$Preconditions.checkNotNull(type));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[208,209,95],"tindex":"18c5db12-3e7e-11e6-8dd0-59b70530df0e","method":{"position":"com.google.gson.internal.bind.DateTypeAdapter:69","type":"CtMethodImpl","sourcecode":"private synchronized java.util.Date deserializeToDate(java.lang.String json) {\n    if (json == null) {\n        {\n            try {\n                return java.text.DateFormat.parse(json);\n            } catch (java.text.ParseException ignored) {\n            }\n            try {\n                return java.text.DateFormat.parse(json);\n            } catch (java.text.ParseException ignored) {\n            }\n            try {\n                return java.text.DateFormat.parse(json);\n            } catch (java.text.ParseException e) {\n                throw new com.google.gson.JsonSyntaxException(json , e);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649268/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:118","type":"CtBinaryOperatorImpl","sourcecode":"annotation != null"},"failures":[],"tindex":"18c5db13-3e7e-11e6-8dd0-33564c7839ca","method":{"position":"com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory:50","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nstatic com.google.gson.TypeAdapter<?> getTypeAdapter(com.google.gson.internal.ConstructorConstructor constructorConstructor, com.google.gson.Gson gson, com.google.gson.reflect.TypeToken<?> fieldType, com.google.gson.annotations.JsonAdapter annotation) {\n    if (annotation != null) {\n        {\n            java.lang.Class<?> java.lang.Class<?> = annotation.value();\n            if (com.google.gson.TypeAdapter.com.google.gson.TypeAdapter.java.lang.Class.isAssignableFrom(value)) {\n                java.lang.Class<com.google.gson.TypeAdapter<?>> java.lang.Class<com.google.gson.TypeAdapter<?>> = ((java.lang.Class<com.google.gson.TypeAdapter<?>>)(value));\n                return constructorConstructor.get(com.google.gson.reflect.TypeToken.get(typeAdapter)).construct();\n            } \n            if (com.google.gson.TypeAdapterFactory.com.google.gson.TypeAdapterFactory.java.lang.Class.isAssignableFrom(value)) {\n                java.lang.Class<com.google.gson.TypeAdapterFactory> java.lang.Class<com.google.gson.TypeAdapterFactory> = ((java.lang.Class<com.google.gson.TypeAdapterFactory>)(value));\n                return constructorConstructor.get(com.google.gson.reflect.TypeToken.get(typeAdapterFactory)).construct().create(gson, fieldType);\n            } \n            throw new java.lang.IllegalArgumentException(\"@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.\");\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649268/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"18c5db14-3e7e-11e6-8dd0-7fcd1c604778","method":{"position":"com.google.gson.internal.bind.TypeAdapters:282","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649268/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    out.value(value);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649268/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[],"tindex":"18c5db15-3e7e-11e6-8dd0-fbeca069fe96","method":{"position":"com.google.gson.Gson:591","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    if (src != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649268/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = getAdapter(com.google.gson.reflect.TypeToken.get(typeOfSrc));\n            boolean boolean = writer.isLenient();\n            writer.setLenient(true);\n            boolean boolean = writer.isHtmlSafe();\n            writer.setHtmlSafe(boolean);\n            boolean boolean = writer.getSerializeNulls();\n            writer.setSerializeNulls(boolean);\n            try {\n                ((com.google.gson.TypeAdapter<java.lang.Object>)(adapter)).write(writer, src);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            } finally {\n                writer.setLenient(oldLenient);\n                writer.setHtmlSafe(oldHtmlSafe);\n                writer.setSerializeNulls(oldSerializeNulls);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:120","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonNull"},"failures":[],"tindex":"18c60226-3e7e-11e6-8dd0-77d79f983a20","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:839","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonNull) {\n        {\n            return containsKey(o);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649268/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:111","type":"CtInvocationImpl","sourcecode":"primitive.isString()"},"failures":[],"tindex":"18c60227-3e7e-11e6-8dd0-5185d7817019","method":{"position":"com.google.gson.JsonPrimitive:93","type":"CtMethodImpl","sourcecode":"void setValue(java.lang.Object primitive) {\n    if (primitive.isString()) {\n        {\n            if (primitive instanceof java.lang.Character) {\n                char char = ((java.lang.Character)(primitive)).charValue();\n                com.google.gson.JsonPrimitive.this.java.lang.Object = java.lang.String.valueOf(c);\n            } else {\n                com.google.gson.internal.$Gson$Preconditions.checkArgument(((primitive instanceof java.lang.Number) || (com.google.gson.JsonPrimitive.isPrimitiveOrString(primitive))));\n                com.google.gson.JsonPrimitive.this.java.lang.Object = primitive;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649268/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"primitive"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:452","type":"CtBinaryOperatorImpl","sourcecode":"typeAdapter instanceof com.google.gson.InstanceCreator<?>"},"failures":[210,37,38,211,47,48,49,212,183,190],"tindex":"18c60228-3e7e-11e6-8dd0-1f11a05ad48b","method":{"position":"com.google.gson.TreeTypeAdapter:103","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newTypeHierarchyFactory(java.lang.Class<?> hierarchyType, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof com.google.gson.InstanceCreator<?>) {\n        {\n            return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , null , false , hierarchyType);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649268/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:79","type":"CtUnaryOperatorImpl","sourcecode":"!(json instanceof com.google.gson.JsonPrimitive)"},"failures":[],"tindex":"18c60229-3e7e-11e6-8dd0-93c2a64bf58b","method":{"position":"com.google.gson.Gson:871","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n        {\n            if (json == null) {\n                {\n                    if (json == null) {\n                        return null;\n                    } \n                    return ((T)(fromJson(new com.google.gson.internal.bind.JsonTreeReader(json), typeOfT)));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649268/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649268/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:298","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[213,214,215],"tindex":"18c6293a-3e7e-11e6-8dd0-7d6c0a5e2b8e","method":{"position":"com.google.gson.stream.JsonWriter:461","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(double value) throws java.io.IOException {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                throw new java.lang.IllegalArgumentException((\"Numeric values must be finite, but was \" + value));\n            } \n            writeDeferredName();\n            beforeValue(false);\n            java.io.Writer.append(java.lang.Double.toString(value));\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649268/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:726","type":"CtBinaryOperatorImpl","sourcecode":"value == 0"},"failures":[216,217],"tindex":"18c6293b-3e7e-11e6-8dd0-474e01a28216","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:170","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(long value) throws java.io.IOException {\n    if (value == 0) {\n        {\n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649268/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"18c6293c-3e7e-11e6-8dd0-df7ffa2e2e52","method":{"position":"com.google.gson.internal.bind.TypeAdapters:282","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649268/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    out.value(value);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649268/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:107","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.WildcardType"},"failures":[],"tindex":"18c6293d-3e7e-11e6-8dd0-4d16d5dac8e2","method":{"position":"com.google.gson.internal.$Gson$Types:93","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type canonicalize(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class) {\n        java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(type));\n        return c.isArray() ? new com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl(com.google.gson.internal.$Gson$Types.canonicalize(c.getComponentType())) : c;\n    } else if (type instanceof java.lang.reflect.ParameterizedType) {\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(type));\n        return new com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl(p.getOwnerType() , p.getRawType() , p.getActualTypeArguments());\n    } else if (type instanceof java.lang.reflect.GenericArrayType) {\n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(type));\n        return new com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl(g.getGenericComponentType());\n    } else if (type instanceof java.lang.reflect.WildcardType) {\n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(type));\n        return new com.google.gson.internal.$Gson$Types.WildcardTypeImpl(w.getUpperBounds() , w.getLowerBounds());\n    } else {\n        return type;\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:131","type":"CtBinaryOperatorImpl","sourcecode":"(type) instanceof java.lang.Class<?>"},"failures":[],"tindex":"18c6504e-3e7e-11e6-8dd0-c31b925132e1","method":{"position":"com.google.gson.internal.$Gson$Types:117","type":"CtMethodImpl","sourcecode":"public static java.lang.Class<?> getRawType(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class<?>) {\n        return ((java.lang.Class<?>)(type));\n    } else if (type instanceof java.lang.reflect.ParameterizedType) {\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(type));\n        java.lang.reflect.Type java.lang.reflect.Type = parameterizedType.getRawType();\n        com.google.gson.internal.$Gson$Preconditions.checkArgument((rawType instanceof java.lang.Class));\n        return ((java.lang.Class<?>)(rawType));\n    } else if (type instanceof java.lang.reflect.GenericArrayType) {\n        java.lang.reflect.Type java.lang.reflect.Type = ((java.lang.reflect.GenericArrayType)(type)).getGenericComponentType();\n        return java.lang.reflect.Array.newInstance(com.google.gson.internal.$Gson$Types.getRawType(componentType), 0).getClass();\n    } else if (type instanceof java.lang.reflect.TypeVariable) {\n        return java.lang.Object.java.lang.Object.java.lang.Class;\n    } else if (type instanceof java.lang.reflect.WildcardType) {\n        return com.google.gson.internal.$Gson$Types.getRawType(((java.lang.reflect.WildcardType)(type)).getUpperBounds()[0]);\n    } else {\n        java.lang.String java.lang.String = type == null ? \"null\" : type.getClass().getName();\n        throw new java.lang.IllegalArgumentException(((((\"Expected a Class, ParameterizedType, or \" + \"GenericArrayType, but <\") + type) + \"> is of type \") + className));\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.TreeTypeAdapter:55","type":"CtInvocationImpl","sourcecode":"value.isJsonNull()"},"failures":[218,219,220,221,222,223,224,25,225,226,227,29,228,229,37,230,41,58,59,70,231,232,233,99,234,235,236,115,237,238,239,240,241,242,243,151,244,152,245,246,247,248,249,172,173,207,250,251,252,253,254,255,256,257,258,259,203,260,261,262,217,263,264,205,265,266,267,268,269,270,271,272],"tindex":"18c6504f-3e7e-11e6-8dd0-d9d21eff5b6f","method":{"position":"com.google.gson.JsonObject:53","type":"CtMethodImpl","sourcecode":"public void add(java.lang.String property, com.google.gson.JsonElement value) {\n    if (value.isJsonNull()) {\n        {\n            if (value == null) {\n                value = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.put(property, value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649268/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:127","type":"CtInvocationImpl","sourcecode":"raw.isInterface()"},"failures":[273,274,275,276,277,278,279,280,218,219,220,17,18,19,221,222,281,282,20,21,223,22,283,284,285,286,287,288,25,226,289,290,291,292,293,294,295,30,296,297,298,299,300,301,302,303,304,305,36,306,37,39,40,307,308,41,51,52,53,54,55,309,56,57,310,60,311,312,61,313,314,62,315,316,63,317,4,318,64,319,320,65,321,322,66,323,324,325,326,327,328,67,329,330,5,331,68,332,333,334,6,335,70,71,336,337,338,1,339,340,341,342,233,99,234,235,343,344,345,346,347,100,101,106,348,109,110,111,113,115,116,349,350,117,118,351,119,352,120,121,3,353,354,122,355,356,357,358,359,123,124,237,238,239,240,241,125,128,129,7,8,9,10,11,140,360,145,361,147,362,363,364,365,366,367,243,151,244,152,246,157,159,160,368,369,247,248,161,162,12,13,170,370,371,249,372,172,173,373,374,375,376,377,378,250,251,252,253,178,254,179,379,380,381,255,382,383,384,385,386,387,388,389,390,391,185,392,393,394,395,189,396,397,398,399,190,192,193,194,195,400,401,402,403,203,14],"tindex":"18c65050-3e7e-11e6-8dd0-7b242e9fd73d","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:125","type":"CtMethodImpl","sourcecode":"private java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> getBoundFields(com.google.gson.Gson context, com.google.gson.reflect.TypeToken<?> type, java.lang.Class<?> raw) {\n    if (raw.isInterface()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649268/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (raw.isInterface()) {\n                {\n                    java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> = new java.util.LinkedHashMap<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField>();\n                    if (raw.isInterface()) {\n                        return result;\n                    } \n                    java.lang.reflect.Type java.lang.reflect.Type = type.getType();\n                    while (raw != (java.lang.Object.java.lang.Object.java.lang.Class)) {\n                        java.lang.reflect.Field[] java.lang.reflect.Field[] = raw.getDeclaredFields();\n                        for (java.lang.reflect.Field java.lang.reflect.Field : fields) {\n                            boolean boolean = excludeField(field, true);\n                            boolean boolean = excludeField(field, false);\n                            if ((!serialize) && (!deserialize)) {\n                                continue;\n                            } \n                            field.setAccessible(true);\n                            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, field.getGenericType());\n                            com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = createBoundField(context, field, getFieldName(field), com.google.gson.reflect.TypeToken.get(fieldType), serialize, deserialize);\n                            com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = result.put(boundField.java.lang.String, boundField);\n                            if (previous != null) {\n                                throw new java.lang.IllegalArgumentException(((declaredType + \" declares multiple JSON fields named \") + (previous.java.lang.String)));\n                            } \n                        }\n                        type = com.google.gson.reflect.TypeToken.get(com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, raw.getGenericSuperclass()));\n                        raw = type.getRawType();\n                    }\n                    return result;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649268/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"raw"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:127","type":"CtInvocationImpl","sourcecode":"raw.isInterface()"},"failures":[],"tindex":"18c67761-3e7e-11e6-8dd0-d5ba1250f24f","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:125","type":"CtMethodImpl","sourcecode":"private java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> getBoundFields(com.google.gson.Gson context, com.google.gson.reflect.TypeToken<?> type, java.lang.Class<?> raw) {\n    if (raw.isInterface()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649268/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (raw.isInterface()) {\n                {\n                    java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> = new java.util.LinkedHashMap<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField>();\n                    if (raw.isInterface()) {\n                        return result;\n                    } \n                    java.lang.reflect.Type java.lang.reflect.Type = type.getType();\n                    while (raw != (java.lang.Object.java.lang.Object.java.lang.Class)) {\n                        java.lang.reflect.Field[] java.lang.reflect.Field[] = raw.getDeclaredFields();\n                        for (java.lang.reflect.Field java.lang.reflect.Field : fields) {\n                            boolean boolean = excludeField(field, true);\n                            boolean boolean = excludeField(field, false);\n                            if ((!serialize) && (!deserialize)) {\n                                continue;\n                            } \n                            field.setAccessible(true);\n                            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, field.getGenericType());\n                            com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = createBoundField(context, field, getFieldName(field), com.google.gson.reflect.TypeToken.get(fieldType), serialize, deserialize);\n                            com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = result.put(boundField.java.lang.String, boundField);\n                            if (previous != null) {\n                                throw new java.lang.IllegalArgumentException(((declaredType + \" declares multiple JSON fields named \") + (previous.java.lang.String)));\n                            } \n                        }\n                        type = com.google.gson.reflect.TypeToken.get(com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, raw.getGenericSuperclass()));\n                        raw = type.getRawType();\n                    }\n                    return result;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649268/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"raw"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:120","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonNull"},"failures":[],"tindex":"18c69e72-3e7e-11e6-8dd0-6db8be7e6e49","method":{"position":"com.google.gson.internal.LinkedTreeMap:481","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"rawtypes\")\n@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonNull) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649268/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof java.util.Map.Entry) {\n                java.util.Map.Entry java.util.Map.Entry = ((java.util.Map.Entry)(o));\n                return ((K) == null ? (other.getKey()) == null : K.equals(other.getKey())) && ((V) == null ? (other.getValue()) == null : V.equals(other.getValue()));\n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:131","type":"CtBinaryOperatorImpl","sourcecode":"(type) instanceof java.lang.Class<?>"},"failures":[],"tindex":"18c69e73-3e7e-11e6-8dd0-8b1ccf1857cc","method":{"position":"com.google.gson.internal.$Gson$Types:431","type":"CtMethodImpl","sourcecode":"private static void checkNotPrimitive(java.lang.reflect.Type type) {\n    com.google.gson.internal.$Gson$Preconditions.checkArgument(((!(type instanceof java.lang.Class<?>)) || (!(((java.lang.Class<?>)(type)).isPrimitive()))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:120","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonNull"},"failures":[],"tindex":"18c69e74-3e7e-11e6-8dd0-e30ee0048cd3","method":{"position":"com.google.gson.internal.$Gson$Types:511","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    return (o instanceof java.lang.reflect.GenericArrayType) && (com.google.gson.internal.$Gson$Types.equals(com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl.this, ((java.lang.reflect.GenericArrayType)(o))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[1],"tindex":"18c69e75-3e7e-11e6-8dd0-99f25145db2b","method":{"position":"com.google.gson.internal.bind.TypeAdapters:201","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649268/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1413","type":"CtVariableReadImpl","sourcecode":"throwOnEof"},"failures":[],"tindex":"18c69e76-3e7e-11e6-8dd0-25b9d9dbc689","method":{"position":"com.google.gson.stream.JsonReader:1331","type":"CtMethodImpl","sourcecode":"private int nextNonWhitespace(boolean throwOnEof) throws java.io.IOException {\n    if (throwOnEof) {\n        {\n            char[] char[] = com.google.gson.stream.JsonReader.this.char[];\n            int int = int;\n            int int = int;\n            while (true) {\n                if (p == l) {\n                    int = p;\n                    if (!(fillBuffer(1))) {\n                        break;\n                    } \n                    p = int;\n                    l = int;\n                } \n                int int = buffer[(p++)];\n                if (c == '\\n') {\n                    (int)++;\n                    int = p;\n                    continue;\n                } else if (((c == ' ') || (c == '\\r')) || (c == '\\t')) {\n                    continue;\n                } \n                if (c == '/') {\n                    int = p;\n                    if (p == l) {\n                        (int)--;\n                        boolean boolean = fillBuffer(2);\n                        (int)++;\n                        if (!charsLoaded) {\n                            return c;\n                        } \n                    } \n                    checkLenient();\n                    char char = buffer[int];\n                    switch (peek) {\n                        case '*' :\n                            (int)++;\n                            if (!(skipTo(\"*/\"))) {\n                                throw syntaxError(\"Unterminated comment\");\n                            } \n                            p = (int) + 2;\n                            l = int;\n                            continue;\n                        case '/' :\n                            (int)++;\n                            skipToEndOfLine();\n                            p = int;\n                            l = int;\n                            continue;\n                        default :\n                            return c;\n                    }\n                } else if (c == '#') {\n                    int = p;\n                    checkLenient();\n                    skipToEndOfLine();\n                    p = int;\n                    l = int;\n                } else {\n                    int = p;\n                    return c;\n                }\n            }\n            if (throwOnEof) {\n                throw new java.io.EOFException(((((\"End of input\" + \" at line \") + (getLineNumber())) + \" column \") + (getColumnNumber())));\n            } else {\n                return -1;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649268/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"throwOnEof":"throwOnEof"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":35,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
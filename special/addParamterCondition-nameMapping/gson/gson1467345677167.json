{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":184,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":354,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":374,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":75,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":50,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":182,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":206,"com.google.gson.internal.bind.JsonTreeWriterTest.testPrematureClose":266,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":153,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":315,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":110,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":193,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":151,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":197,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":330,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":245,"com.google.gson.internal.bind.JsonElementReaderTest.testStrictNansAndInfinities":392,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":121,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":220,"com.google.gson.functional.ObjectTest.testSingletonLists":149,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":32,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":355,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":191,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":164,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":295,"com.google.gson.internal.bind.JsonElementReaderTest.testNulls":390,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":12,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":352,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":76,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":375,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":70,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":310,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":353,"com.google.gson.functional.JsonTreeTest.testToJsonTree":68,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":378,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":91,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreBehindInVersion":9,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":5,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":128,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":284,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":293,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":200,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":161,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":303,"com.google.gson.internal.bind.JsonElementReaderTest.testLenientNansAndInfinities":388,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":309,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":251,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":171,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":302,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":108,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testDifferentSerializeAndDeserializeField":26,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":402,"com.google.gson.DefaultDateTypeAdapterTest.testFormatUsesDefaultTimezone":1,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":173,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":335,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":298,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":207,"com.google.gson.functional.StreamingTypeAdaptersTest.testFromJsonTree":400,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":102,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":231,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":268,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":252,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":344,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":170,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":24,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":35,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":157,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":57,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":33,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":82,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":119,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":370,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":232,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":250,"com.google.gson.JsonArrayTest.testEqualsNonEmptyArray":384,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":203,"com.google.gson.functional.CollectionTest.testSetDeserialization":196,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":246,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":160,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":120,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":318,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithNestedWildcards":326,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":339,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":165,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":20,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":118,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":234,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":192,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":307,"com.google.gson.DefaultDateTypeAdapterTest.testParsingDatesFormattedWithSystemLocale":0,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":93,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":183,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":228,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":185,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":142,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":214,"com.google.gson.functional.MapTest.testSerializeMaps":338,"com.google.gson.functional.MapTest.testComplexKeysSerialization":74,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":267,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":40,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":202,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":226,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":105,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":282,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":132,"com.google.gson.internal.bind.JsonElementReaderTest.testWrongType":393,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":52,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithBasicWildcards":328,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":319,"com.google.gson.functional.PrettyPrintingTest.testMap":376,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":187,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":359,"com.google.gson.functional.CollectionTest.testQueueSerialization":365,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":369,"com.google.gson.functional.MapTest.testMapOfMapSerialization":342,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":45,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":323,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictBoxedNansAndInfinities":271,"com.google.gson.functional.FieldNamingTest.testIdentity":215,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":356,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":61,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":174,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":56,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":67,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":148,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":277,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":300,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testSkipNonAnnotatedFields":25,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":357,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":47,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":23,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":44,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":288,"com.google.gson.functional.MapTest.testMapSubclassSerialization":337,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":37,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":127,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":10,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":205,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":258,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":208,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":190,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":117,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":163,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":247,"com.google.gson.internal.bind.JsonElementReaderTest.testArray":389,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":254,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":100,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":49,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":48,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":80,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":22,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":55,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":150,"com.google.gson.MixedStreamTest.testWriteNulls":289,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":334,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":115,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":201,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":152,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":223,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":320,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":59,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":137,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":358,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":243,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":126,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":143,"com.google.gson.internal.bind.JsonElementReaderTest.testEarlyClose":391,"com.google.gson.JsonParserTest.testParseMixedArray":301,"com.google.gson.DefaultDateTypeAdapterTest.testParsingDatesFormattedWithUsLocale":2,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":349,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithTypeParameters":327,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAheadInVersion":7,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":134,"com.google.gson.internal.bind.JsonTreeWriterTest.testWriteAfterClose":272,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":43,"com.google.gson.JsonArrayTest.testRemove":383,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":379,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":399,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":219,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":305,"com.google.gson.internal.bind.JsonElementReaderTest.testStringsFromNumbers":395,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":89,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":340,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":222,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":294,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":106,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":66,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":236,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":175,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":95,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":81,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":125,"com.google.gson.internal.bind.JsonElementReaderTest.testNumbersFromStrings":394,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":46,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":104,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":131,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":264,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":316,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":285,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictNansAndInfinities":270,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":238,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":211,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":306,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":194,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":36,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":313,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":209,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":275,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":227,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":262,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":273,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":54,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":88,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":176,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":253,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":11,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":276,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":141,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":130,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":255,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":180,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":156,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":97,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":362,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":195,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":237,"com.google.gson.InnerClassExclusionStrategyTest.testExcludeInnerClassField":18,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":218,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":224,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":230,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":297,"com.google.gson.stream.JsonWriterTest.testNullStringValue":290,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":225,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":85,"com.google.gson.JsonArrayTest.testSet":381,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":77,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":221,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":189,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":144,"com.google.gson.functional.MapTest.testGeneralMapField":73,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":154,"com.google.gson.internal.bind.JsonElementReaderTest.testNumbers":396,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":58,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":248,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testSkipExplicitlySkippedFields":29,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":371,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":3,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":346,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":348,"com.google.gson.MixedStreamTest.testReadMixedStreamed":261,"com.google.gson.JsonObjectTest.testDeepCopy":398,"com.google.gson.internal.bind.JsonElementReaderTest.testBooleans":386,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":229,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":329,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":368,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":31,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":380,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":233,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":240,"com.google.gson.JsonArrayTest.testDeepCopy":382,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":321,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":140,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":14,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":274,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":62,"com.google.gson.functional.ObjectTest.testNestedDeserialization":181,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":325,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":311,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":186,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":79,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":136,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":51,"com.google.gson.JsonParserTest.testParseUnquotedStringArrayFails":385,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":116,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":96,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":113,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":210,"com.google.gson.functional.ObjectTest.testNullSerialization":281,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":99,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":72,"com.google.gson.functional.MapTest.testInterfaceTypeMap":71,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":314,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":84,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":39,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testNeverSkipExplicitlyExposedAnnotatedFields":28,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":103,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":308,"com.google.gson.MixedStreamTest.testWriteClosed":260,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":188,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":366,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":87,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":155,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":122,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":83,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":139,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":135,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":178,"com.google.gson.stream.JsonWriterTest.testLongs":296,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":242,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":90,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":158,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":15,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":16,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":101,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":367,"com.google.gson.internal.bind.JsonElementReaderTest.testSkipValue":387,"com.google.gson.internal.bind.JsonElementReaderTest.testStrings":397,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":41,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":350,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":65,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":204,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":331,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":138,"com.google.gson.InnerClassExclusionStrategyTest.testIncludeStaticNestedClassField":19,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":217,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":69,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":172,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":109,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":179,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":364,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":257,"com.google.gson.functional.MapTest.testRawMapSerialization":343,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":351,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":94,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":167,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":146,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":286,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":263,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":265,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":333,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":363,"com.google.gson.ObjectTypeAdapterTest.testSerialize":21,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":279,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":107,"com.google.gson.JsonPrimitiveTest.testEqualsIntegerAndBigInteger":304,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":111,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":336,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":212,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":123,"com.google.gson.functional.MapTest.testMapWithQuotes":341,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":317,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":324,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":92,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":401,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":244,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":114,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":177,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":133,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":159,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":292,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":241,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":4,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":112,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":216,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":283,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":6,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":278,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":332,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":98,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":63,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":17,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAtSameVersion":8,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":38,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testNeverSkipExposedAnnotatedFields":27,"com.google.gson.internal.LinkedHashTreeMapTest.testRemoveRootDoesNotDoubleUnlink":299,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":322,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":166,"com.google.gson.functional.ObjectTest.testNestedSerialization":168,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":78,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":345,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":347,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":145,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":129,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":372,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":162,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":86,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":30,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":239,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":169,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":235,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":13,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":360,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":291,"com.google.gson.functional.CollectionTest.testSetSerialization":198,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":249,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":256,"com.google.gson.functional.StringTest.testStringValueSerialization":361,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":377,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":147,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":42,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":53,"com.google.gson.MixedStreamTest.testWriteInvalidState":259,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":312,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":60,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":34,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":213,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":199,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":64,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":269,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":124,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":287,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":280,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":373},"transformations":[{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"760589d9-3f40-11e6-8a57-cbce3d55b11a","method":{"position":"com.google.gson.Gson:591","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    if (src != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344896222/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = getAdapter(com.google.gson.reflect.TypeToken.get(typeOfSrc));\n            boolean boolean = writer.isLenient();\n            writer.setLenient(true);\n            boolean boolean = writer.isHtmlSafe();\n            writer.setHtmlSafe(boolean);\n            boolean boolean = writer.getSerializeNulls();\n            writer.setSerializeNulls(boolean);\n            try {\n                ((com.google.gson.TypeAdapter<java.lang.Object>)(adapter)).write(writer, src);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            } finally {\n                writer.setLenient(oldLenient);\n                writer.setHtmlSafe(oldHtmlSafe);\n                writer.setSerializeNulls(oldSerializeNulls);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.TreeTypeAdapter:55","type":"CtInvocationImpl"},"failures":[],"tindex":"7605ff0a-3f40-11e6-8a57-e7d2ca5d1ef7","method":{"position":"com.google.gson.internal.bind.ObjectTypeAdapter:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Object value) throws java.io.IOException {\n    if (value.isJsonNull()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344896222/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            com.google.gson.TypeAdapter<java.lang.Object> com.google.gson.TypeAdapter<java.lang.Object> = ((com.google.gson.TypeAdapter<java.lang.Object>)(com.google.gson.Gson.getAdapter(value.getClass())));\n            if (typeAdapter instanceof com.google.gson.internal.bind.ObjectTypeAdapter) {\n                out.beginObject();\n                out.endObject();\n                return ;\n            } \n            typeAdapter.write(out, value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl"},"failures":[0,1,2,3,4,5,6],"tindex":"7605ff0b-3f40-11e6-8a57-1dca81c28c75","method":{"position":"com.google.gson.DefaultDateTypeAdapter:94","type":"CtMethodImpl","sourcecode":"private java.util.Date deserializeToDate(com.google.gson.JsonElement json) {\n    if (json == null) {\n        {\n            synchronized(java.text.DateFormat) {\n                try {\n                    return java.text.DateFormat.parse(json.getAsString());\n                } catch (java.text.ParseException ignored) {\n                }\n                try {\n                    return java.text.DateFormat.parse(json.getAsString());\n                } catch (java.text.ParseException ignored) {\n                }\n                try {\n                    return java.text.DateFormat.parse(json.getAsString());\n                } catch (java.text.ParseException e) {\n                    throw new com.google.gson.JsonSyntaxException(json.getAsString() , e);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344896222/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:233","type":"CtBinaryOperatorImpl"},"failures":[7,8,9,10,11,12,13,14,15,16,17],"tindex":"7606261c-3f40-11e6-8a57-9369a05a920e","method":{"position":"com.google.gson.internal.Excluder:232","type":"CtMethodImpl","sourcecode":"private boolean isValidSince(com.google.gson.annotations.Since annotation) {\n    if (annotation != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344896222/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (annotation != null) {\n                double double = annotation.value();\n                if (annotationVersion > (double)) {\n                    return false;\n                } \n            } \n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl"},"failures":[18,19,7,8,9,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,11,12,13,216,14,15,217,16,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262],"tindex":"76064d2d-3f40-11e6-8a57-e7a62b610e57","method":{"position":"com.google.gson.internal.Excluder:149","type":"CtMethodImpl","sourcecode":"public boolean excludeField(java.lang.reflect.Field field, boolean serialize) {\n    if (field.isSynthetic()) {\n        {\n            if (((int) & (field.getModifiers())) != 0) {\n                return true;\n            } \n            if (((double) != (com.google.gson.internal.Excluder.com.google.gson.internal.Excluder.double)) && (!(isValidVersion(field.getAnnotation(com.google.gson.annotations.Since.com.google.gson.annotations.Since.java.lang.Class), field.getAnnotation(com.google.gson.annotations.Until.com.google.gson.annotations.Until.java.lang.Class))))) {\n                return true;\n            } \n            if (field.isSynthetic()) {\n                return true;\n            } \n            if (boolean) {\n                com.google.gson.annotations.Expose com.google.gson.annotations.Expose = field.getAnnotation(com.google.gson.annotations.Expose.com.google.gson.annotations.Expose.java.lang.Class);\n                if ((annotation == null) || (serialize ? !(annotation.serialize()) : !(annotation.deserialize()))) {\n                    return true;\n                } \n            } \n            if ((!(boolean)) && (isInnerClass(field.getType()))) {\n                return true;\n            } \n            if (isAnonymousOrLocal(field.getType())) {\n                return true;\n            } \n            java.util.List<com.google.gson.ExclusionStrategy> java.util.List<com.google.gson.ExclusionStrategy> = serialize ? java.util.List<com.google.gson.ExclusionStrategy> : java.util.List<com.google.gson.ExclusionStrategy>;\n            if (!(list.isEmpty())) {\n                com.google.gson.FieldAttributes com.google.gson.FieldAttributes = new com.google.gson.FieldAttributes(field);\n                for (com.google.gson.ExclusionStrategy com.google.gson.ExclusionStrategy : list) {\n                    if (exclusionStrategy.shouldSkipField(fieldAttributes)) {\n                        return true;\n                    } \n                }\n            } \n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344896222/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"field"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:111","type":"CtInvocationImpl"},"failures":[],"tindex":"7606743e-3f40-11e6-8a57-1b1d188cb022","method":{"position":"com.google.gson.JsonPrimitive:93","type":"CtMethodImpl","sourcecode":"void setValue(java.lang.Object primitive) {\n    if (primitive.isString()) {\n        {\n            if (primitive.isString()) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344896222/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (primitive instanceof java.lang.Character) {\n                        char char = ((java.lang.Character)(primitive)).charValue();\n                        com.google.gson.JsonPrimitive.this.java.lang.Object = java.lang.String.valueOf(c);\n                    } else {\n                        com.google.gson.internal.$Gson$Preconditions.checkArgument(((primitive instanceof java.lang.Number) || (com.google.gson.JsonPrimitive.isPrimitiveOrString(primitive))));\n                        com.google.gson.JsonPrimitive.this.java.lang.Object = primitive;\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344896222/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"primitive"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonObject:54","type":"CtBinaryOperatorImpl"},"failures":[263,264,265,266,267,268,269,270,271,272,273,274,275,276,65,66,67,68,71,73,75,76,79,80,81,85,86,91,110,111,277,112,113,278,138,139,184,228,230,231],"tindex":"76069b4f-3f40-11e6-8a57-912056e14a9c","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:75","type":"CtMethodImpl","sourcecode":"private void put(com.google.gson.JsonElement value) {\n    if (value == null) {\n        {\n            if ((java.lang.String) != null) {\n                if ((!(value.isJsonNull())) || (getSerializeNulls())) {\n                    com.google.gson.JsonObject com.google.gson.JsonObject = ((com.google.gson.JsonObject)(peek()));\n                    object.add(java.lang.String, value);\n                } \n                java.lang.String = null;\n            } else if (java.util.List<com.google.gson.JsonElement>.isEmpty()) {\n                com.google.gson.JsonElement = value;\n            } else {\n                com.google.gson.JsonElement com.google.gson.JsonElement = peek();\n                if (element instanceof com.google.gson.JsonArray) {\n                    ((com.google.gson.JsonArray)(element)).add(value);\n                } else {\n                    throw new java.lang.IllegalStateException();\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344896222/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.TreeTypeAdapter:55","type":"CtInvocationImpl"},"failures":[276,277,279,280,281,282,283,284,285,286,287,288,289],"tindex":"76069b50-3f40-11e6-8a57-919cf0bf73d2","method":{"position":"com.google.gson.internal.bind.TypeAdapters:680","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, com.google.gson.JsonElement value) throws java.io.IOException {\n    if (value.isJsonNull()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344896222/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if ((value == null) || (value.isJsonNull())) {\n                out.nullValue();\n            } else if (value.isJsonPrimitive()) {\n                com.google.gson.JsonPrimitive com.google.gson.JsonPrimitive = value.getAsJsonPrimitive();\n                if (primitive.isNumber()) {\n                    out.value(primitive.getAsNumber());\n                } else if (primitive.isBoolean()) {\n                    out.value(primitive.getAsBoolean());\n                } else {\n                    out.value(primitive.getAsString());\n                }\n            } else if (value.isJsonArray()) {\n                out.beginArray();\n                for (com.google.gson.JsonElement com.google.gson.JsonElement : value.getAsJsonArray()) {\n                    write(out, e);\n                }\n                out.endArray();\n            } else if (value.isJsonObject()) {\n                out.beginObject();\n                for (java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> : value.getAsJsonObject().entrySet()) {\n                    out.name(e.getKey());\n                    write(out, e.getValue());\n                }\n                out.endObject();\n            } else {\n                throw new java.lang.IllegalArgumentException((\"Couldn't write \" + (value.getClass())));\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl"},"failures":[290,42,291,292,69,71,72,75,82,84,90,293,218,294,221,222,286,226,238,241],"tindex":"7606c261-3f40-11e6-8a57-f53086526b7f","method":{"position":"com.google.gson.stream.JsonWriter:413","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344896222/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344896222/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (value == null) {\n                        return nullValue();\n                    } \n                    writeDeferredName();\n                    beforeValue(false);\n                    string(value);\n                    return com.google.gson.stream.JsonWriter.this;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:726","type":"CtBinaryOperatorImpl"},"failures":[295,296,297,298],"tindex":"7606e972-3f40-11e6-8a57-35b6d184c80f","method":{"position":"com.google.gson.stream.JsonWriter:476","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(long value) throws java.io.IOException {\n    if (value == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344896222/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == 0) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344896222/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    writeDeferredName();\n                    beforeValue(false);\n                    java.io.Writer.write(java.lang.Long.toString(value));\n                    return com.google.gson.stream.JsonWriter.this;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:305","type":"CtBinaryOperatorImpl"},"failures":[299],"tindex":"76071083-3f40-11e6-8a57-0d5267619cd5","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:245","type":"CtMethodImpl","sourcecode":"void removeInternal(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node, boolean unlink) {\n    if (node != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344896222/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (unlink) {\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            if ((left != null) && (right != null)) {\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = (left.int) > (right.int) ? left.last() : right.first();\n                removeInternal(adjacent, false);\n                int int = 0;\n                left = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                if (left != null) {\n                    leftHeight = left.int;\n                    adjacent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left;\n                    left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                } \n                int int = 0;\n                right = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                if (right != null) {\n                    rightHeight = right.int;\n                    adjacent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                } \n                adjacent.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                replaceInParent(node, adjacent);\n                return ;\n            } else if (left != null) {\n                replaceInParent(node, left);\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } else if (right != null) {\n                replaceInParent(node, right);\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } else {\n                replaceInParent(node, null);\n            }\n            rebalance(originalParent, false);\n            (int)--;\n            (int)++;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"node"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:726","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"76073794-3f40-11e6-8a57-d1cb0fa3c49d","method":{"position":"com.google.gson.stream.JsonWriter:476","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(long value) throws java.io.IOException {\n    if (value == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344896222/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == 0) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344896222/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    writeDeferredName();\n                    beforeValue(false);\n                    java.io.Writer.write(java.lang.Long.toString(value));\n                    return com.google.gson.stream.JsonWriter.this;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"76073795-3f40-11e6-8a57-d15acb22e84d","method":{"position":"com.google.gson.Gson:127","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonParseException {\n    if (json == null) {\n        {\n            return ((T)(fromJson(json, typeOfT)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344896222/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"76075ea6-3f40-11e6-8a57-65c45d3d4349","method":{"position":"com.google.gson.stream.JsonWriter:413","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344896222/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344896222/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (value == null) {\n                        return nullValue();\n                    } \n                    writeDeferredName();\n                    beforeValue(false);\n                    string(value);\n                    return com.google.gson.stream.JsonWriter.this;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:578","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"76075ea7-3f40-11e6-8a57-4747bb46deab","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:626","type":"CtMethodImpl","sourcecode":"void reset(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344896222/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            for (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root ; n != null ; n = n.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) {\n                n.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = stackTop;\n                stackTop = n;\n            }\n            com.google.gson.internal.LinkedHashTreeMap.AvlIterator.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = stackTop;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:86","type":"CtBinaryOperatorImpl"},"failures":[300,301,267,273,274,276,302,303,304,305,306,307,308,309,310,66,75,76,311,110,111,277,112,113,278,129,279,280,312,281,282,283,313,314,284,285,286,228,230,231,3,4,5,315,6,316,317,318,254,319,255,256,320,321,322,323,324,325,289],"tindex":"760785b8-3f40-11e6-8a57-d5b522136910","method":{"position":"com.google.gson.internal.Streams:67","type":"CtMethodImpl","sourcecode":"public static void write(com.google.gson.JsonElement element, com.google.gson.stream.JsonWriter writer) throws java.io.IOException {\n    if (element instanceof com.google.gson.JsonArray) {\n        {\n            com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<com.google.gson.JsonElement>.write(writer, element);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344896222/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:199","type":"CtBinaryOperatorImpl"},"failures":[326,327,328],"tindex":"760785b9-3f40-11e6-8a57-b94f21d70901","method":{"position":"com.google.gson.reflect.TypeToken:185","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.ParameterizedType to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeVarMap) {\n    if (from instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344896222/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (from == null) {\n                return false;\n            } \n            if (to.equals(from)) {\n                return true;\n            } \n            java.lang.Class<?> java.lang.Class<?> = com.google.gson.internal.$Gson$Types.getRawType(from);\n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = null;\n            if (from instanceof java.lang.reflect.ParameterizedType) {\n                ptype = ((java.lang.reflect.ParameterizedType)(from));\n            } \n            if (ptype != null) {\n                java.lang.reflect.Type[] java.lang.reflect.Type[] = ptype.getActualTypeArguments();\n                java.lang.reflect.TypeVariable<?>[] java.lang.reflect.TypeVariable<?>[] = clazz.getTypeParameters();\n                for (int int = 0 ; i < (tArgs.int) ; i++) {\n                    java.lang.reflect.Type java.lang.reflect.Type = tArgs[i];\n                    java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = tParams[i];\n                    while (arg instanceof java.lang.reflect.TypeVariable<?>) {\n                        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(arg));\n                        arg = typeVarMap.get(v.getName());\n                    }\n                    typeVarMap.put(var.getName(), arg);\n                }\n                if (com.google.gson.reflect.TypeToken.typeEquals(ptype, to, typeVarMap)) {\n                    return true;\n                } \n            } \n            for (java.lang.reflect.Type java.lang.reflect.Type : clazz.getGenericInterfaces()) {\n                if (com.google.gson.reflect.TypeToken.isAssignableFrom(itype, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap))) {\n                    return true;\n                } \n            }\n            java.lang.reflect.Type java.lang.reflect.Type = clazz.getGenericSuperclass();\n            return com.google.gson.reflect.TypeToken.isAssignableFrom(sType, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl"},"failures":[20,329,263,22,23,24,330,32,34,35,37,38,41,42,43,44,45,46,49,331,332,333,334,335,291,336,58,292,61,62,65,66,68,337,338,339,340,69,341,342,71,72,73,343,74,344,75,76,77,78,79,80,81,82,84,85,86,89,90,91,93,95,97,98,102,107,345,346,108,109,278,120,129,132,133,134,135,138,347,140,348,349,350,351,352,143,145,147,149,152,155,158,162,165,168,173,178,183,184,185,353,354,355,356,357,358,359,360,361,362,363,191,192,193,364,365,366,293,195,367,197,368,205,216,294,230,231,369,370,371,257,258,372],"tindex":"7607acca-3f40-11e6-8a57-293897767a90","method":{"position":"com.google.gson.internal.bind.TypeAdapters:361","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344896222/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:213","type":"CtBinaryOperatorImpl"},"failures":[373,374,338,76,375,376,131,132,377,378,379,133,258],"tindex":"7607accb-3f40-11e6-8a57-d579716f7bcc","method":{"position":"com.google.gson.stream.JsonWriter:212","type":"CtMethodImpl","sourcecode":"public final void setIndent(java.lang.String indent) {\n    if ((indent.length()) == 0) {\n        {\n            if ((indent.length()) == 0) {\n                com.google.gson.stream.JsonWriter.this.java.lang.String = null;\n                com.google.gson.stream.JsonWriter.this.java.lang.String = \":\";\n            } else {\n                com.google.gson.stream.JsonWriter.this.java.lang.String = indent;\n                com.google.gson.stream.JsonWriter.this.java.lang.String = \": \";\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344896222/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"indent"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:455","type":"CtBinaryOperatorImpl"},"failures":[309,380],"tindex":"7607d3dc-3f40-11e6-8a57-939723b320f2","method":{"position":"com.google.gson.GsonBuilder:493","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\npublic com.google.gson.GsonBuilder registerTypeHierarchyAdapter(java.lang.Class<?> baseType, java.lang.Object typeAdapter) {\n    if ((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) {\n        {\n            com.google.gson.internal.$Gson$Preconditions.checkArgument((((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) || (typeAdapter instanceof com.google.gson.TypeAdapter<?>)));\n            if ((typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)) {\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(0, com.google.gson.TreeTypeAdapter.newTypeHierarchyFactory(baseType, typeAdapter));\n            } \n            if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.internal.bind.TypeAdapters.newTypeHierarchyFactory(baseType, ((com.google.gson.TypeAdapter)(typeAdapter))));\n            } \n            return com.google.gson.GsonBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344896222/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:106","type":"CtBinaryOperatorImpl"},"failures":[381,382,383,384,301,385,386,387,388,389,390,391,392,393,394,395,396,397,268,269,272,398,399,76,80,85,110,400,206,208,210,401,402],"tindex":"7607d3dd-3f40-11e6-8a57-8d2a5286097f","method":{"position":"com.google.gson.JsonArray:57","type":"CtMethodImpl","sourcecode":"public void add(com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonArray) {\n        {\n            if (element == null) {\n                element = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            java.util.List<com.google.gson.JsonElement>.add(element);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344896222/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:105","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"7607faee-3f40-11e6-8a57-fd6448938eab","method":{"position":"com.google.gson.internal.LinkedTreeMap:574","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344896222/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (!(o instanceof java.util.Map.Entry)) {\n                return false;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n            if (node == null) {\n                return false;\n            } \n            removeInternal(node, true);\n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1422","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"7607faef-3f40-11e6-8a57-a91c907bca2f","method":{"position":"com.google.gson.stream.JsonReader:325","type":"CtMethodImpl","sourcecode":"public final void setLenient(boolean lenient) {\n    if (!lenient) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344896222/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (!lenient) {\n                {\n                    com.google.gson.stream.JsonReader.this.boolean = lenient;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344896222/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"lenient"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:111","type":"CtInvocationImpl"},"failures":[],"tindex":"7607faf0-3f40-11e6-8a57-737d466cd76d","method":{"position":"com.google.gson.JsonPrimitive:93","type":"CtMethodImpl","sourcecode":"void setValue(java.lang.Object primitive) {\n    if (primitive.isString()) {\n        {\n            if (primitive.isString()) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344896222/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (primitive instanceof java.lang.Character) {\n                        char char = ((java.lang.Character)(primitive)).charValue();\n                        com.google.gson.JsonPrimitive.this.java.lang.Object = java.lang.String.valueOf(c);\n                    } else {\n                        com.google.gson.internal.$Gson$Preconditions.checkArgument(((primitive instanceof java.lang.Number) || (com.google.gson.JsonPrimitive.isPrimitiveOrString(primitive))));\n                        com.google.gson.JsonPrimitive.this.java.lang.Object = primitive;\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344896222/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"primitive"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:106","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"76082201-3f40-11e6-8a57-efcf93d27e50","method":{"position":"com.google.gson.JsonArray:92","type":"CtMethodImpl","sourcecode":"public boolean remove(com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonArray) {\n        {\n            return java.util.List<com.google.gson.JsonElement>.remove(element);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344896222/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1422","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"76082202-3f40-11e6-8a57-3b15ad02efb6","method":{"position":"com.google.gson.stream.JsonReader:325","type":"CtMethodImpl","sourcecode":"public final void setLenient(boolean lenient) {\n    if (!lenient) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344896222/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (!lenient) {\n                {\n                    com.google.gson.stream.JsonReader.this.boolean = lenient;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344896222/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"lenient"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"76082203-3f40-11e6-8a57-1d021611890f","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:132","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter name(java.lang.String name) throws java.io.IOException {\n    if (name == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344896222/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if ((java.util.List<com.google.gson.JsonElement>.isEmpty()) || ((java.lang.String) != null)) {\n                throw new java.lang.IllegalStateException();\n            } \n            com.google.gson.JsonElement com.google.gson.JsonElement = peek();\n            if (element instanceof com.google.gson.JsonObject) {\n                java.lang.String = name;\n                return com.google.gson.internal.bind.JsonTreeWriter.this;\n            } \n            throw new java.lang.IllegalStateException();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.JsonPrimitive:289","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"76084914-3f40-11e6-8a57-3d1c2ca1875e","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:101","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nvoid read(com.google.gson.stream.JsonReader reader, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value == null) {\n        {\n            java.lang.Object java.lang.Object = com.google.gson.TypeAdapter<?>.read(reader);\n            if ((fieldValue != null) || (!isPrimitive)) {\n                field.set(value, fieldValue);\n            } \n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344896222/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:103","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"76084915-3f40-11e6-8a57-87f07f03f79d","method":{"position":"com.google.gson.internal.ConstructorConstructor:200","type":"CtMethodImpl","sourcecode":"private <T>com.google.gson.internal.ObjectConstructor<T> newUnsafeAllocator(final java.lang.reflect.Type type, final java.lang.Class<? super T> rawType) {\n    if (type instanceof java.lang.reflect.GenericArrayType) {\n        {\n            return new com.google.gson.internal.ObjectConstructor<T>() {\n                private final com.google.gson.internal.UnsafeAllocator unsafeAllocator = com.google.gson.internal.UnsafeAllocator.create();\n\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                public T construct() {\n                    try {\n                        java.lang.Object java.lang.Object = com.google.gson.internal.UnsafeAllocator.newInstance(rawType);\n                        return ((T)(newInstance));\n                    } catch (java.lang.Exception e) {\n                        throw new java.lang.RuntimeException((((\"Unable to invoke no-args constructor for \" + type) + \". \") + \"Register an InstanceCreator with Gson for this type may fix this problem.\") , e);\n                    }\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344896222/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:105","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"76084916-3f40-11e6-8a57-4d16684f51ae","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:804","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344896222/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (o instanceof java.util.Map.Entry) && ((findByEntry(((java.util.Map.Entry<?, ?>)(o)))) != null);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:497","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"76087027-3f40-11e6-8a57-2746a670b83f","method":{"position":"com.google.gson.TreeTypeAdapter:84","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newFactory(com.google.gson.reflect.TypeToken<?> exactType, java.lang.Object typeAdapter) {\n    if ((typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)) {\n        {\n            return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , exactType , false , null);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344896222/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonObject:54","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"76087028-3f40-11e6-8a57-65f84a1c81f8","method":{"position":"com.google.gson.JsonObject:53","type":"CtMethodImpl","sourcecode":"public void add(java.lang.String property, com.google.gson.JsonElement value) {\n    if (value == null) {\n        {\n            if (value == null) {\n                value = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.put(property, value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344896222/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"76087029-3f40-11e6-8a57-abbbc1a62c35","method":{"position":"com.google.gson.FieldNamingPolicy:122","type":"CtMethodImpl","sourcecode":"private static java.lang.String separateCamelCase(java.lang.String name, java.lang.String separator) {\n    if (name == null) {\n        {\n            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            for (int int = 0 ; i < (name.length()) ; i++) {\n                char char = name.charAt(i);\n                if ((java.lang.Character.isUpperCase(character)) && ((translation.length()) != 0)) {\n                    translation.append(separator);\n                } \n                translation.append(character);\n            }\n            return translation.toString();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344896222/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"7608973a-3f40-11e6-8a57-bf9eda422a92","method":{"position":"com.google.gson.Gson:491","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        {\n            com.google.gson.internal.bind.JsonTreeWriter com.google.gson.internal.bind.JsonTreeWriter = new com.google.gson.internal.bind.JsonTreeWriter();\n            toJson(src, typeOfSrc, writer);\n            return writer.get();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344896222/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:430","type":"CtFieldReadImpl"},"failures":[],"tindex":"7608973b-3f40-11e6-8a57-4fa4d18e2118","method":{"position":"com.google.gson.stream.JsonWriter:268","type":"CtMethodImpl","sourcecode":"public final void setSerializeNulls(boolean serializeNulls) {\n    if (serializeNulls) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344896222/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = serializeNulls;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeNulls":"serializeNulls"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":35,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
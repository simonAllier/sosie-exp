{"failureDictionary":{"com.google.gson.JsonStreamParserTest.testNoSideEffectForHasNext":161,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":36,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":426,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":89,"com.google.gson.JsonPrimitiveTest.testDeepCopy":180,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":239,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":551,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":131,"com.google.gson.internal.bind.JsonTreeWriterTest.testPrematureClose":204,"com.google.gson.MixedStreamTest.testWriteLenient":234,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":534,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":84,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":32,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":303,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":308,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":533,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":358,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":486,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":282,"com.google.gson.JsonObjectTest.testAddingNullPropertyValue":49,"com.google.gson.internal.bind.JsonElementReaderTest.testStrictNansAndInfinities":197,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":521,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":567,"com.google.gson.JsonParserTest.testParseUnquotedMultiWordStringFails":187,"com.google.gson.functional.ObjectTest.testSingletonLists":370,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":261,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":397,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":427,"com.google.gson.stream.JsonWriterTest.testStrings":502,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":120,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":123,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":541,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":495,"com.google.gson.internal.bind.JsonElementReaderTest.testNulls":576,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":499,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":508,"com.google.gson.DefaultDateTypeAdapterTest.testDatePattern":152,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":10,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":284,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":145,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":73,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":20,"com.google.gson.functional.EnumTest.testEnumCaseMapping":485,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":425,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":492,"com.google.gson.functional.JsonTreeTest.testToJsonTree":127,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":289,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":125,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":5,"com.google.gson.JsonObjectTest.testEqualsNonEmptyObject":50,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreBehindInVersion":581,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":81,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":252,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":258,"com.google.gson.internal.LinkedHashTreeMapTest.testAvlBuilder":506,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":94,"com.google.gson.internal.LinkedTreeMapTest.testLargeSetOfRandomKeys":43,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":443,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":366,"com.google.gson.JsonPrimitiveTest.testParsingStringAsBoolean":169,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":539,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":109,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":336,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":375,"com.google.gson.internal.bind.JsonElementReaderTest.testLenientNansAndInfinities":194,"com.google.gson.internal.LinkedTreeMapTest.testContainsNonComparableKeyReturnsFalse":44,"com.google.gson.JsonArrayTest.testEqualsOnEmptyArray":577,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":72,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":470,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":544,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":108,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":280,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":13,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":406,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":301,"com.google.gson.JsonParserTest.testParseString":39,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":259,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":329,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":478,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":124,"com.google.gson.DefaultDateTypeAdapterTest.testFormatUsesDefaultTimezone":156,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":273,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":464,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":396,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":132,"com.google.gson.functional.StreamingTypeAdaptersTest.testFromJsonTree":121,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":421,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":31,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":102,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":519,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":418,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":330,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":377,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":461,"com.google.gson.JsonPrimitiveTest.testEqualsAcrossTypes":184,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":188,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":457,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":537,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":21,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":214,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":354,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":530,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":355,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":247,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":6,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":137,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":399,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":392,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":516,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":469,"com.google.gson.JsonArrayTest.testEqualsNonEmptyArray":575,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":531,"com.google.gson.functional.CollectionTest.testSetDeserialization":560,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":283,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":268,"com.google.gson.functional.EnumTest.testEnumSet":480,"com.google.gson.JsonStreamParserTest.testIterator":162,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":211,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":57,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithNestedWildcards":582,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":408,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":270,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":246,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":488,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":518,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":70,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":276,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":333,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":458,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":110,"com.google.gson.DefaultDateTypeAdapterTest.testParsingDatesFormattedWithSystemLocale":154,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":221,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":92,"com.google.gson.functional.MapTest.testMapSerialization":292,"com.google.gson.internal.bind.JsonElementReaderTest.testObject":201,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":344,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":136,"com.google.gson.JsonPrimitiveTest.testByteEqualsShort":181,"com.google.gson.JsonPrimitiveTest.testByteEqualsBigInteger":170,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":115,"com.google.gson.functional.MapTest.testSerializeMaps":217,"com.google.gson.functional.MapTest.testComplexKeysSerialization":416,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":101,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":130,"com.google.gson.JsonPrimitiveTest.testLongEqualsBigInteger":172,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":320,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":368,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":570,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":230,"com.google.gson.internal.LinkedTreeMapTest.testRemoveRootDoesNotDoubleUnlink":498,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":559,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":379,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":51,"com.google.gson.internal.bind.JsonElementReaderTest.testWrongType":198,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":287,"com.google.gson.internal.LinkedHashTreeMapTest.testDoubleCapacity":507,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":240,"com.google.gson.functional.MapTest.testStringKeyDeserialization":22,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithBasicWildcards":584,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":59,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":339,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":294,"com.google.gson.functional.PrettyPrintingTest.testMap":285,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":448,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":305,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":222,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":382,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":260,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":494,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":431,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":52,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":389,"com.google.gson.functional.MapTest.testMapSerializationEmpty":417,"com.google.gson.functional.CollectionTest.testQueueSerialization":441,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnValue":500,"com.google.gson.functional.MapTest.testMapOfMapSerialization":411,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":477,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":326,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":438,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":65,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictBoxedNansAndInfinities":207,"com.google.gson.functional.FieldNamingTest.testIdentity":313,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":428,"com.google.gson.JsonStreamParserTest.testCallingNextBeyondAvailableInput":159,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":7,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":262,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":546,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":14,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":142,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":241,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":266,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":97,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":140,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":429,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":324,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":555,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":491,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":390,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":405,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":437,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":215,"com.google.gson.functional.MapTest.testMapSubclassSerialization":407,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":23,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":523,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":232,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":449,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":487,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":133,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":552,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":245,"com.google.gson.functional.EnumTest.testEnumSubclass":482,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":327,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":496,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":540,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":321,"com.google.gson.internal.bind.JsonElementReaderTest.testArray":195,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":467,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":58,"com.google.gson.JsonPrimitiveTest.testShortEqualsInteger":176,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":112,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":296,"com.google.gson.JsonPrimitiveTest.testByteEqualsLong":165,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":556,"com.google.gson.stream.JsonWriterTest.testNullName":209,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":1,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":490,"com.google.gson.internal.LinkedTreeMapTest.testEqualsAndHashCode":46,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":323,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":513,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":402,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":532,"com.google.gson.MixedStreamTest.testWriteNulls":158,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":318,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":463,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":367,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":520,"com.google.gson.JsonObjectTest.testReadPropertyWithEmptyStringName":47,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":62,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":267,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":568,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":315,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":135,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":413,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":430,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":279,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":251,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":338,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":404,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":26,"com.google.gson.internal.bind.JsonElementReaderTest.testEarlyClose":196,"com.google.gson.JsonParserTest.testParseMixedArray":100,"com.google.gson.DefaultDateTypeAdapterTest.testParsingDatesFormattedWithUsLocale":157,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":472,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":505,"com.google.gson.JsonPrimitiveTest.testDoubleEqualsBigDecimal":166,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithTypeParameters":583,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":452,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAheadInVersion":579,"com.google.gson.internal.bind.JsonTreeWriterTest.testWriteAfterClose":208,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":474,"com.google.gson.JsonArrayTest.testRemove":150,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":436,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":334,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":394,"com.google.gson.functional.MapTest.testMapDeserialization":18,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":391,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":290,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":88,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":99,"com.google.gson.internal.bind.JsonElementReaderTest.testStringsFromNumbers":200,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":566,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":242,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":409,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":226,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":224,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeMap":9,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":113,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":87,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":274,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":374,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":419,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":450,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":2,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":383,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":522,"com.google.gson.internal.bind.JsonElementReaderTest.testNumbersFromStrings":199,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":295,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":299,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":286,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":412,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":146,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":86,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":119,"com.google.gson.functional.PrimitiveTest.testShortSerialization":337,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":95,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictNansAndInfinities":205,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":363,"com.google.gson.JsonParserTest.testParseEmptyString":190,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":331,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":384,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":114,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":96,"com.google.gson.internal.LinkedTreeMapTest.testEmptyStringValues":45,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":304,"com.google.gson.internal.LinkedTreeMapTest.testPutOverrides":42,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":422,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":16,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":90,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":340,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":25,"com.google.gson.DefaultDateTypeAdapterTest.testFormattingInFr":155,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":106,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":569,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":104,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":573,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":343,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":255,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":353,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":117,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":378,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":515,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":107,"com.google.gson.JsonPrimitiveTest.testStringsAndChar":177,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":345,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":380,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":563,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":116,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":60,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":549,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":536,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":484,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":420,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":446,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":307,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":447,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":118,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":223,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":227,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":395,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":93,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":386,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":228,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":3,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":141,"com.google.gson.JsonArrayTest.testSet":148,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":325,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":341,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":454,"com.google.gson.JsonPrimitiveTest.testEquals":179,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":225,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":481,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":143,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":27,"com.google.gson.functional.MapTest.testGeneralMapField":129,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":535,"com.google.gson.internal.bind.JsonElementReaderTest.testNumbers":202,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":460,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":139,"com.google.gson.DefaultDateTypeAdapterTest.testDateSerialization":151,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":319,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":468,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":400,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":414,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":77,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":424,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":471,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":332,"com.google.gson.ObjectTypeAdapterTest.testDeserializeNullValue":40,"com.google.gson.MixedStreamTest.testReadMixedStreamed":572,"com.google.gson.JsonObjectTest.testDeepCopy":53,"com.google.gson.internal.bind.JsonElementReaderTest.testBooleans":192,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":475,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":445,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":489,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":561,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":529,"com.google.gson.internal.bind.JsonTreeWriterTest.testEmptyWriter":206,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":362,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":517,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":277,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":19,"com.google.gson.JsonArrayTest.testDeepCopy":149,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":439,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":15,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":63,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":342,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":264,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":347,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":105,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":393,"com.google.gson.JsonPrimitiveTest.testEqualsDoesNotEquateStringAndNonStringTypes":178,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeNullField":525,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":263,"com.google.gson.JsonPrimitiveTest.testFloatEqualsDouble":171,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":67,"com.google.gson.functional.ObjectTest.testNestedDeserialization":550,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":69,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":376,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":564,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":0,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":361,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":314,"com.google.gson.JsonParserTest.testParseUnquotedStringArrayFails":191,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":244,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":335,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":35,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":134,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":310,"com.google.gson.functional.ObjectTest.testNullSerialization":373,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerialization":186,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":298,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":17,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":213,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":415,"com.google.gson.functional.MapTest.testInterfaceTypeMap":128,"com.google.gson.stream.JsonWriterTest.testNonFiniteBoxedDoubles":350,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":91,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":356,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":254,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":483,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":451,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":558,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":381,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":71,"com.google.gson.JsonPrimitiveTest.testIntegerEqualsLong":174,"com.google.gson.MixedStreamTest.testWriteClosed":236,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":442,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":565,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":371,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":514,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":248,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":210,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":30,"com.google.gson.LongSerializationPolicyTest.testStringLongSerialization":185,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":275,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":453,"com.google.gson.JsonPrimitiveTest.testShortEqualsLong":168,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":278,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":357,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":372,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":306,"com.google.gson.JsonPrimitiveTest.testShortEqualsBigInteger":164,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":510,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeWithCustomTypeAdapter":524,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":348,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":557,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":444,"com.google.gson.DefaultDateTypeAdapterTest.testFormattingInEnUs":153,"com.google.gson.internal.bind.JsonElementReaderTest.testSkipValue":193,"com.google.gson.internal.bind.JsonElementReaderTest.testStrings":203,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":398,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":11,"com.google.gson.JsonPrimitiveTest.testParsingStringAsNumber":183,"com.google.gson.stream.JsonWriterTest.testNumbers":351,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":434,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":473,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":126,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":369,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":459,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":29,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":476,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":479,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserialize":527,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":403,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":571,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":218,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":545,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":388,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":302,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":548,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":440,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":231,"com.google.gson.functional.MapTest.testRawMapSerialization":293,"com.google.gson.JsonParserTest.testParseReader":38,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":256,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":271,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":297,"com.google.gson.JsonPrimitiveTest.testExponential":182,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":138,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":229,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":37,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":122,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":147,"com.google.gson.functional.PrimitiveTest.testByteSerialization":238,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":462,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":74,"com.google.gson.ObjectTypeAdapterTest.testSerialize":352,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":300,"com.google.gson.JsonPrimitiveTest.testEqualsIntegerAndBigInteger":98,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":33,"com.google.gson.JsonPrimitiveTest.testFloatEqualsBigDecimal":163,"com.google.gson.JsonPrimitiveTest.testByteEqualsInteger":173,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":212,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":311,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":249,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":574,"com.google.gson.functional.MapTest.testMapWithQuotes":410,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":79,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":56,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":66,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":12,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":78,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":281,"com.google.gson.stream.JsonWriterTest.testLenientWriterPermitsMultipleTopLevelValues":493,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":144,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":243,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":547,"com.google.gson.internal.LinkedHashTreeMapTest.testDoubleCapacityAllNodesOnLeft":504,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":291,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":328,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":385,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":466,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":538,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":401,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":80,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":34,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":346,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":387,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":216,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":68,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":85,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":316,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":111,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":359,"com.google.gson.JsonPrimitiveTest.testIntegerEqualsBigInteger":175,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":578,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":24,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAtSameVersion":580,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":8,"com.google.gson.internal.LinkedHashTreeMapTest.testRemoveRootDoesNotDoubleUnlink":237,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":64,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":253,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":542,"com.google.gson.JsonObjectTest.testAddingStringProperties":54,"com.google.gson.functional.ObjectTest.testNestedSerialization":272,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":455,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":322,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":423,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":364,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":219,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":28,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":55,"com.google.gson.JsonParserTest.testParseUnquotedSingleWordStringFails":189,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":235,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":497,"com.google.gson.stream.JsonWriterTest.testUnicodeLineBreaksEscaped":503,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":269,"com.google.gson.JsonPrimitiveTest.testBoolean":167,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":4,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":528,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":554,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":349,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":543,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":553,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":509,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":257,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":432,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":220,"com.google.gson.functional.CollectionTest.testSetSerialization":309,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":562,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":61,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":288,"com.google.gson.functional.StringTest.testStringValueSerialization":433,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":265,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":435,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":512,"com.google.gson.MixedStreamTest.testWriteInvalidState":233,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":76,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":465,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":456,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":82,"com.google.gson.stream.JsonWriterTest.testWrongTopLevelType":501,"com.google.gson.ObjectTypeAdapterTest.testDeserialize":41,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":312,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":365,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":48,"com.google.gson.JsonStreamParserTest.testParseTwoStrings":160,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":103,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":360,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeNullObject":526,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":250,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":83,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":75,"com.google.gson.internal.LinkedHashTreeMapTest.testAvlWalker":511,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":317},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:136","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.TypeVariable"},"failures":[],"tindex":"22b3cfd8-3e64-11e6-a699-b5f8b2d81ead","method":{"position":"com.google.gson.GsonBuilder:447","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\npublic com.google.gson.GsonBuilder registerTypeAdapter(java.lang.reflect.Type type, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (typeAdapter instanceof java.lang.reflect.TypeVariable) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    com.google.gson.internal.$Gson$Preconditions.checkArgument(((((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) || (typeAdapter instanceof com.google.gson.InstanceCreator<?>)) || (typeAdapter instanceof com.google.gson.TypeAdapter<?>)));\n                    if (typeAdapter instanceof com.google.gson.InstanceCreator<?>) {\n                        java.util.Map<java.lang.reflect.Type, com.google.gson.InstanceCreator<?>>.put(type, ((com.google.gson.InstanceCreator)(typeAdapter)));\n                    } \n                    if ((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) {\n                        com.google.gson.reflect.TypeToken<?> com.google.gson.reflect.TypeToken<?> = com.google.gson.reflect.TypeToken.get(type);\n                        java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.TreeTypeAdapter.newFactoryWithMatchRawType(typeToken, typeAdapter));\n                    } \n                    if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                        java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.internal.bind.TypeAdapters.newFactory(com.google.gson.reflect.TypeToken.get(type), ((com.google.gson.TypeAdapter)(typeAdapter))));\n                    } \n                    return com.google.gson.GsonBuilder.this;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:154","type":"CtUnaryOperatorImpl","sourcecode":"!create"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54],"tindex":"22b41df9-3e64-11e6-a699-ed5a5416af44","method":{"position":"com.google.gson.internal.LinkedTreeMap:121","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedTreeMap.Node<K, V> find(K key, boolean create) {\n    if (!create) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.util.Comparator<? super K> java.util.Comparator<? super K> = com.google.gson.internal.LinkedTreeMap.this.java.util.Comparator<? super K>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            int int = 0;\n            if (nearest != null) {\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                java.lang.Comparable<java.lang.Object> java.lang.Comparable<java.lang.Object> = comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>) ? ((java.lang.Comparable<java.lang.Object>)(key)) : null;\n                while (true) {\n                    comparison = comparableKey != null ? comparableKey.compareTo(nearest.K) : comparator.compare(key, nearest.K);\n                    if (comparison == 0) {\n                        return nearest;\n                    } \n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = comparison < 0 ? nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> : nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    if (child == null) {\n                        break;\n                    } \n                    nearest = child;\n                }\n            } \n            if (!create) {\n                return null;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.this.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            if (nearest == null) {\n                if ((comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>)) && (!(key instanceof java.lang.Comparable))) {\n                    throw new java.lang.ClassCastException(((key.getClass().getName()) + \" is not Comparable\"));\n                } \n                created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n            } else {\n                created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                if (comparison < 0) {\n                    nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                } else {\n                    nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                }\n                rebalance(nearest, true);\n            }\n            (int)++;\n            (int)++;\n            return created;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"create":"create"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.JsonObject:54","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[55,56,57,58,59,60,61,62,63,64,65,66,67,68,10,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,31,32,33,34,35,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109],"tindex":"22b4450a-3e64-11e6-a699-d9ed05ba112c","method":{"position":"com.google.gson.internal.bind.TypeAdapters:680","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, com.google.gson.JsonElement value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if ((value == null) || (value.isJsonNull())) {\n                out.nullValue();\n            } else if (value.isJsonPrimitive()) {\n                com.google.gson.JsonPrimitive com.google.gson.JsonPrimitive = value.getAsJsonPrimitive();\n                if (primitive.isNumber()) {\n                    out.value(primitive.getAsNumber());\n                } else if (primitive.isBoolean()) {\n                    out.value(primitive.getAsBoolean());\n                } else {\n                    out.value(primitive.getAsString());\n                }\n            } else if (value.isJsonArray()) {\n                out.beginArray();\n                for (com.google.gson.JsonElement com.google.gson.JsonElement : value.getAsJsonArray()) {\n                    write(out, e);\n                }\n                out.endArray();\n            } else if (value.isJsonObject()) {\n                out.beginObject();\n                for (java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> : value.getAsJsonObject().entrySet()) {\n                    out.name(e.getKey());\n                    write(out, e.getValue());\n                }\n                out.endObject();\n            } else {\n                throw new java.lang.IllegalArgumentException((\"Couldn't write \" + (value.getClass())));\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:103","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"22b46c1b-3e64-11e6-a699-2bffcd109139","method":{"position":"com.google.gson.internal.ConstructorConstructor:128","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nprivate <T>com.google.gson.internal.ObjectConstructor<T> newDefaultImplementationConstructor(final java.lang.reflect.Type type, java.lang.Class<? super T> rawType) {\n    if (type instanceof java.lang.reflect.GenericArrayType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (java.util.Collection.java.util.Collection.java.lang.Class.isAssignableFrom(rawType)) {\n                if (java.util.SortedSet.java.util.SortedSet.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.TreeSet<java.lang.Object>()));\n                        }\n                    };\n                } else if (java.util.EnumSet.java.util.EnumSet.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        @java.lang.SuppressWarnings(value = \"rawtypes\")\n                        public T construct() {\n                            if (type instanceof java.lang.reflect.ParameterizedType) {\n                                java.lang.reflect.Type java.lang.reflect.Type = ((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0];\n                                if (elementType instanceof java.lang.Class) {\n                                    return ((T)(java.util.EnumSet.noneOf(((java.lang.Class)(elementType)))));\n                                } else {\n                                    throw new com.google.gson.JsonIOException((\"Invalid EnumSet type: \" + (type.toString())));\n                                }\n                            } else {\n                                throw new com.google.gson.JsonIOException((\"Invalid EnumSet type: \" + (type.toString())));\n                            }\n                        }\n                    };\n                } else if (java.util.Set.java.util.Set.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedHashSet<java.lang.Object>()));\n                        }\n                    };\n                } else if (java.util.Queue.java.util.Queue.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedList<java.lang.Object>()));\n                        }\n                    };\n                } else {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.ArrayList<java.lang.Object>()));\n                        }\n                    };\n                }\n            } \n            if (java.util.Map.java.util.Map.java.lang.Class.isAssignableFrom(rawType)) {\n                if (java.util.SortedMap.java.util.SortedMap.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.TreeMap<java.lang.Object, java.lang.Object>()));\n                        }\n                    };\n                } else if ((type instanceof java.lang.reflect.ParameterizedType) && (!(java.lang.String.java.lang.String.java.lang.Class.isAssignableFrom(com.google.gson.reflect.TypeToken.get(((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0]).getRawType())))) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedHashMap<java.lang.Object, java.lang.Object>()));\n                        }\n                    };\n                } else {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new com.google.gson.internal.LinkedTreeMap<java.lang.String, java.lang.Object>()));\n                        }\n                    };\n                }\n            } \n            return null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[52],"tindex":"22b4932c-3e64-11e6-a699-b58fc6f0d418","method":{"position":"com.google.gson.JsonObject:100","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Boolean value) {\n    if (property == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (property == null) {\n                {\n                    add(property, createJsonElement(value));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"22b4932d-3e64-11e6-a699-111c70cbcb06","method":{"position":"com.google.gson.Gson:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (value == null) {\n                        {\n                            if (value == null) {\n                                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                throw new java.io.IOException();\n                            } else {\n                                {\n                                    if (value == null) {\n                                        out.nullValue();\n                                        return ;\n                                    } \n                                    out.value(value.toString());\n                                }\n                            }\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.io.IOException();\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[],"tindex":"22b4ba3e-3e64-11e6-a699-ede3d3c4298c","method":{"position":"com.google.gson.FieldNamingPolicy:122","type":"CtMethodImpl","sourcecode":"private static java.lang.String separateCamelCase(java.lang.String name, java.lang.String separator) {\n    if (separator == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (name == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n                    for (int int = 0 ; i < (name.length()) ; i++) {\n                        char char = name.charAt(i);\n                        if ((java.lang.Character.isUpperCase(character)) && ((translation.length()) != 0)) {\n                            translation.append(separator);\n                        } \n                        translation.append(character);\n                    }\n                    return translation.toString();\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.FieldNamingPolicy:155","type":"CtUnaryOperatorImpl","sourcecode":"!(java.lang.Character.isUpperCase(firstCharacter))"},"failures":[110,111,112,113,114,115],"tindex":"22b4ba3f-3e64-11e6-a699-fdd0540021d3","method":{"position":"com.google.gson.FieldNamingPolicy:163","type":"CtMethodImpl","sourcecode":"private static java.lang.String modifyString(char firstCharacter, java.lang.String srcString, int indexOfSubstring) {\n    if (!(java.lang.Character.isUpperCase(firstCharacter))) {\n        {\n            if (!(java.lang.Character.isUpperCase(firstCharacter))) {\n                {\n                    return indexOfSubstring < (srcString.length()) ? firstCharacter + (srcString.substring(indexOfSubstring)) : java.lang.String.valueOf(firstCharacter);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"firstCharacter":"firstCharacter"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[],"tindex":"22b4e150-3e64-11e6-a699-93f74bbe403a","method":{"position":"com.google.gson.FieldNamingPolicy:122","type":"CtMethodImpl","sourcecode":"private static java.lang.String separateCamelCase(java.lang.String name, java.lang.String separator) {\n    if (separator == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (name == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n                    for (int int = 0 ; i < (name.length()) ; i++) {\n                        char char = name.charAt(i);\n                        if ((java.lang.Character.isUpperCase(character)) && ((translation.length()) != 0)) {\n                            translation.append(separator);\n                        } \n                        translation.append(character);\n                    }\n                    return translation.toString();\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"separator"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:94","type":"CtBinaryOperatorImpl","sourcecode":"primitive instanceof java.lang.Character"},"failures":[0,1,2,3,4,5,55,116,56,57,6,7,117,58,59,60,118,61,62,63,119,64,120,65,66,67,68,8,121,10,69,11,12,70,71,72,73,74,75,122,123,77,13,78,79,80,124,81,82,84,85,86,125,126,87,14,127,88,128,129,130,89,131,132,133,25,134,90,135,136,26,27,28,137,138,139,91,29,30,92,93,31,140,141,32,33,142,34,35,36,143,144,96,145,97,37,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,98,166,167,168,99,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,38,39,188,189,100,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,101,102,103,205,206,207,208,104,105,106,107,47,108,51,52,53,54,109],"tindex":"22b4e151-3e64-11e6-a699-5372f4913971","method":{"position":"com.google.gson.JsonPrimitive:93","type":"CtMethodImpl","sourcecode":"void setValue(java.lang.Object primitive) {\n    if (primitive.isString()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (primitive instanceof java.lang.Character) {\n                {\n                    if (primitive instanceof java.lang.Character) {\n                        char char = ((java.lang.Character)(primitive)).charValue();\n                        com.google.gson.JsonPrimitive.this.java.lang.Object = java.lang.String.valueOf(c);\n                    } else {\n                        com.google.gson.internal.$Gson$Preconditions.checkArgument(((primitive instanceof java.lang.Number) || (com.google.gson.JsonPrimitive.isPrimitiveOrString(primitive))));\n                        com.google.gson.JsonPrimitive.this.java.lang.Object = primitive;\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"primitive"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[94],"tindex":"22b50862-3e64-11e6-a699-4f84176b937e","method":{"position":"com.google.gson.Gson:468","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src == null) {\n                return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            return toJsonTree(src, src.getClass());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"22b50863-3e64-11e6-a699-a98c047700de","method":{"position":"com.google.gson.Gson:127","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonParseException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    } else {\n        {\n            if (json == null) {\n                {\n                    return ((T)(fromJson(json, typeOfT)));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonParseException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:122","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"22b50864-3e64-11e6-a699-9dba5438136c","method":{"position":"com.google.gson.internal.$Gson$Types:431","type":"CtMethodImpl","sourcecode":"private static void checkNotPrimitive(java.lang.reflect.Type type) {\n    com.google.gson.internal.$Gson$Preconditions.checkArgument(((!(type instanceof java.lang.Class<?>)) || (!(((java.lang.Class<?>)(type)).isPrimitive()))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[209],"tindex":"22b52f75-3e64-11e6-a699-717e7deed2c2","method":{"position":"com.google.gson.stream.JsonWriter:385","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter name(java.lang.String name) throws java.io.IOException {\n    if (name == null) {\n        {\n            if (name == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (name == null) {\n                        throw new java.lang.NullPointerException(\"name == null\");\n                    } \n                    if ((java.lang.String) != null) {\n                        throw new java.lang.IllegalStateException();\n                    } \n                    if ((int) == 0) {\n                        throw new java.lang.IllegalStateException(\"JsonWriter is closed.\");\n                    } \n                    java.lang.String = name;\n                    return com.google.gson.stream.JsonWriter.this;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[210,211,87,212,213,214,215],"tindex":"22b52f76-3e64-11e6-a699-e95e5b4411cd","method":{"position":"com.google.gson.Gson:285","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            float float = value.floatValue();\n            checkValidFloatingPoint(floatValue);\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonObject:54","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[58,59,60,64,74,75,131,132,133,25,134,140,32,33,34,35,48,52,54],"tindex":"22b52f77-3e64-11e6-a699-a762b282d869","method":{"position":"com.google.gson.JsonObject:121","type":"CtMethodImpl","sourcecode":"private com.google.gson.JsonElement createJsonElement(java.lang.Object value) {\n    if (value == null) {\n        {\n            return value == null ? com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull : new com.google.gson.JsonPrimitive(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:430","type":"CtFieldReadImpl","sourcecode":"serializeNulls"},"failures":[0,1,2,3,4,5,68,10,74,76,216,126,87,14,127,217,218,219,89,29,30,220,140,32,33,142,34,35,221,36,222,223,224,225,226,227,95,228,229,230,37,146,147,231,232,158,233,234,235,236,107],"tindex":"22b52f78-3e64-11e6-a699-cb5e969ef897","method":{"position":"com.google.gson.stream.JsonWriter:268","type":"CtMethodImpl","sourcecode":"public final void setSerializeNulls(boolean serializeNulls) {\n    if (serializeNulls) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = serializeNulls;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeNulls":"serializeNulls"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:314","type":"CtBinaryOperatorImpl","sourcecode":"replacement != null"},"failures":[237],"tindex":"22b52f79-3e64-11e6-a699-93e44a23a9e5","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:311","type":"CtMethodImpl","sourcecode":"private void replaceInParent(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node, com.google.gson.internal.LinkedHashTreeMap.Node<K, V> replacement) {\n    if (replacement != null) {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            if (replacement != null) {\n                replacement.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = parent;\n            } \n            if (parent != null) {\n                if ((parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) == node) {\n                    parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = replacement;\n                } else {\n                    assert (parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) == node;\n                    parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = replacement;\n                }\n            } else {\n                int int = (node.int) & ((com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[].int) - 1);\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[][index] = replacement;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"replacement":"replacement"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:120","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonNull"},"failures":[],"tindex":"22b5568a-3e64-11e6-a699-01da039094ed","method":{"position":"com.google.gson.internal.LinkedTreeMap:574","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof com.google.gson.JsonNull) {\n                {\n                    if (!(o instanceof java.util.Map.Entry)) {\n                        return false;\n                    } \n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n                    if (node == null) {\n                        return false;\n                    } \n                    removeInternal(node, true);\n                    return true;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[238],"tindex":"22b5568b-3e64-11e6-a699-19cacc3e54fc","method":{"position":"com.google.gson.internal.bind.TypeAdapters:201","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"22b5568c-3e64-11e6-a699-3737146b83b4","method":{"position":"com.google.gson.Gson:127","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonParseException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    } else {\n        {\n            if (json == null) {\n                {\n                    return ((T)(fromJson(json, typeOfT)));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonParseException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[239,240,241,210,242,55,59,60,61,64,65,66,243,68,244,245,246,247,211,248,249,250,251,252,253,254,255,256,257,258,259,260,261,10,262,263,12,264,265,266,267,268,269,270,271,272,273,274,275,123,276,78,79,82,277,278,87,279,280,281,282,283,284,285,286,287,288,289,290,291,88,217,292,129,293,294,295,296,297,298,299,23,24,300,301,302,303,304,305,306,307,308,309,310,114,311,312,115,313,314,315,316,317,318,212,319,320,92,93,31,321,322,323,324,325,326,327,328,329,330,331,332,333,334,238,335,336,337,338,339,340,341,342,343,221,344,222,345,346,347,348,97,231,232,234,98,99,349,350,351,188,352,102,103,104],"tindex":"22b5568d-3e64-11e6-a699-91758bec9882","method":{"position":"com.google.gson.stream.JsonWriter:490","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                {\n                    if (value == null) {\n                        return nullValue();\n                    } \n                    writeDeferredName();\n                    java.lang.String java.lang.String = value.toString();\n                    if ((!(boolean)) && (((string.equals(\"-Infinity\")) || (string.equals(\"Infinity\"))) || (string.equals(\"NaN\")))) {\n                        throw new java.lang.IllegalArgumentException((\"Numeric values must be finite, but was \" + value));\n                    } \n                    beforeValue(false);\n                    java.io.Writer.append(string);\n                    return com.google.gson.stream.JsonWriter.this;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1422","type":"CtUnaryOperatorImpl","sourcecode":"!(lenient)"},"failures":[239,240,353,241,354,0,1,2,355,210,356,3,4,242,357,5,55,56,57,58,59,60,61,62,63,64,65,66,67,243,68,244,245,246,247,211,248,249,250,251,252,254,358,261,10,69,262,263,359,12,70,360,71,72,361,73,362,363,364,264,365,366,367,368,369,265,74,75,266,370,267,371,372,76,268,373,269,374,375,270,271,272,376,377,273,274,378,275,122,123,379,216,276,380,77,381,78,382,79,80,81,383,82,384,385,386,387,388,389,390,391,392,393,277,394,395,396,397,398,83,399,84,400,401,85,402,403,404,278,86,405,406,126,87,14,127,279,280,281,282,283,284,285,286,287,288,289,290,291,88,407,217,408,409,218,410,411,292,412,413,128,414,415,129,219,293,416,417,418,294,89,295,296,110,297,419,420,111,298,421,299,422,23,24,300,423,424,301,302,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,303,440,304,305,441,306,442,443,307,444,308,445,309,310,90,446,114,311,312,115,313,26,28,447,139,448,91,449,450,451,452,453,314,315,29,30,454,455,456,457,458,459,316,460,461,462,463,317,464,220,318,212,319,465,466,320,92,93,31,467,140,468,469,470,321,213,471,472,214,322,473,474,475,476,477,323,478,324,325,326,327,328,329,330,331,332,333,334,238,335,336,337,338,215,339,340,341,342,343,32,33,142,34,35,221,479,36,344,222,223,224,94,225,226,227,95,228,229,230,480,481,96,482,483,484,485,486,487,345,346,347,348,488,145,97,489,490,491,37,146,147,231,232,158,233,234,235,236,98,99,492,349,493,188,100,494,495,496,204,101,102,103,208,104,105,106,107,108,109,497],"tindex":"22b57d9e-3e64-11e6-a699-e3ae3d4eeb4b","method":{"position":"com.google.gson.stream.JsonWriter:234","type":"CtMethodImpl","sourcecode":"public final void setLenient(boolean lenient) {\n    if (!lenient) {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = lenient;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"lenient"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[0,1,2,3,4,5,68,10,126,87,14,127,89,29,30,140,32,33,142,34,35,36,37,146,147],"tindex":"22b57d9f-3e64-11e6-a699-5fed89035aa3","method":{"position":"com.google.gson.Gson:491","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (src == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            if (src != null) {\n                                {\n                                    if (src == null) {\n                                        {\n                                            com.google.gson.internal.bind.JsonTreeWriter com.google.gson.internal.bind.JsonTreeWriter = new com.google.gson.internal.bind.JsonTreeWriter();\n                                            toJson(src, typeOfSrc, writer);\n                                            return writer.get();\n                                        }\n                                    } else {\n                                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                        throw new java.lang.RuntimeException();\n                                    }\n                                }\n                            } else {\n                                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                throw new java.lang.RuntimeException();\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:137","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonObject"},"failures":[150],"tindex":"22b5a4b0-3e64-11e6-a699-1fc619e0b7f9","method":{"position":"com.google.gson.JsonArray:115","type":"CtMethodImpl","sourcecode":"public boolean contains(com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonObject) {\n        {\n            return java.util.List<com.google.gson.JsonElement>.contains(element);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:133","type":"CtBinaryOperatorImpl","sourcecode":"(type) instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"22b5a4b1-3e64-11e6-a699-d305cb061cda","method":{"position":"com.google.gson.GsonBuilder:447","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\npublic com.google.gson.GsonBuilder registerTypeAdapter(java.lang.reflect.Type type, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (typeAdapter instanceof java.lang.reflect.TypeVariable) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    com.google.gson.internal.$Gson$Preconditions.checkArgument(((((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) || (typeAdapter instanceof com.google.gson.InstanceCreator<?>)) || (typeAdapter instanceof com.google.gson.TypeAdapter<?>)));\n                    if (typeAdapter instanceof com.google.gson.InstanceCreator<?>) {\n                        java.util.Map<java.lang.reflect.Type, com.google.gson.InstanceCreator<?>>.put(type, ((com.google.gson.InstanceCreator)(typeAdapter)));\n                    } \n                    if ((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) {\n                        com.google.gson.reflect.TypeToken<?> com.google.gson.reflect.TypeToken<?> = com.google.gson.reflect.TypeToken.get(type);\n                        java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.TreeTypeAdapter.newFactoryWithMatchRawType(typeToken, typeAdapter));\n                    } \n                    if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                        java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.internal.bind.TypeAdapters.newFactory(com.google.gson.reflect.TypeToken.get(type), ((com.google.gson.TypeAdapter)(typeAdapter))));\n                    } \n                    return com.google.gson.GsonBuilder.this;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[384],"tindex":"22b5a4b2-3e64-11e6-a699-533559fabb28","method":{"position":"com.google.gson.internal.bind.TypeAdapters:223","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (value == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.io.IOException();\n                    } else {\n                        {\n                            out.value(value);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:278","type":"CtBinaryOperatorImpl","sourcecode":"node != null"},"failures":[25,498,51],"tindex":"22b5a4b3-3e64-11e6-a699-af6411326ecd","method":{"position":"com.google.gson.internal.LinkedTreeMap:217","type":"CtMethodImpl","sourcecode":"void removeInternal(com.google.gson.internal.LinkedTreeMap.Node<K, V> node, boolean unlink) {\n    if (node != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (unlink) {\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            if ((left != null) && (right != null)) {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = (left.int) > (right.int) ? left.last() : right.first();\n                removeInternal(adjacent, false);\n                int int = 0;\n                left = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                if (left != null) {\n                    leftHeight = left.int;\n                    adjacent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = left;\n                    left.com.google.gson.internal.LinkedTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                } \n                int int = 0;\n                right = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                if (right != null) {\n                    rightHeight = right.int;\n                    adjacent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = right;\n                    right.com.google.gson.internal.LinkedTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                } \n                adjacent.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                replaceInParent(node, adjacent);\n                return ;\n            } else if (left != null) {\n                replaceInParent(node, left);\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n            } else if (right != null) {\n                replaceInParent(node, right);\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n            } else {\n                replaceInParent(node, null);\n            }\n            rebalance(originalParent, false);\n            (int)--;\n            (int)++;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"node"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Preconditions:41","type":"CtUnaryOperatorImpl","sourcecode":"!condition"},"failures":[],"tindex":"22b5cbc4-3e64-11e6-a699-0362e6da8ae7","method":{"position":"com.google.gson.internal.$Gson$Preconditions:40","type":"CtMethodImpl","sourcecode":"public static void checkArgument(boolean condition) {\n    if (!condition) {\n        throw new java.lang.IllegalArgumentException();\n    } \n}"},"series":0,"name":"addParameterCondition","variableMap":{"condition":"condition"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[],"tindex":"22b5cbc5-3e64-11e6-a699-2bfed4899916","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:116","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<?> getFieldAdapter(com.google.gson.Gson gson, java.lang.reflect.Field field, com.google.gson.reflect.TypeToken<?> fieldType) {\n    if (field.isSynthetic()) {\n        {\n            if (field.isSynthetic()) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    com.google.gson.annotations.JsonAdapter com.google.gson.annotations.JsonAdapter = field.getAnnotation(com.google.gson.annotations.JsonAdapter.com.google.gson.annotations.JsonAdapter.java.lang.Class);\n                    if (annotation != null) {\n                        com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory.getTypeAdapter(com.google.gson.internal.ConstructorConstructor, gson, fieldType, annotation);\n                        if (adapter != null)\n                            return adapter;\n                        \n                    } \n                    return gson.getAdapter(fieldType);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"field"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[355,210,356,242,357,55,56,57,58,62,63,67,68,211,254,255,256,499,358,261,10,69,262,263,12,70,360,71,72,361,73,362,363,364,264,365,366,367,368,369,265,74,75,370,267,371,372,269,270,272,273,378,275,122,123,276,380,77,381,382,79,80,81,383,385,387,388,389,390,391,392,394,397,398,399,84,400,85,402,403,404,86,406,87,287,291,407,217,408,409,218,410,411,128,415,129,293,416,418,89,295,296,110,419,420,111,421,23,24,300,423,424,301,302,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,303,440,441,442,443,307,444,308,445,90,446,26,28,447,139,448,91,449,450,452,453,454,455,456,457,459,316,462,463,464,220,212,319,466,93,31,471,472,473,333,221,344,224,480,481,96,482,483,484,485,486,346,488,489,490,491,231,232,235,99,492,500,501,502,503,188,494,108,497],"tindex":"22b5f2d6-3e64-11e6-a699-6722bae2228b","method":{"position":"com.google.gson.stream.JsonWriter:413","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                {\n                    if (value == null) {\n                        return nullValue();\n                    } \n                    writeDeferredName();\n                    beforeValue(false);\n                    string(value);\n                    return com.google.gson.stream.JsonWriter.this;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:109","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonPrimitive"},"failures":[],"tindex":"22b5f2d7-3e64-11e6-a699-951afcc1133b","method":{"position":"com.google.gson.internal.$Gson$Types:213","type":"CtMethodImpl","sourcecode":"private static int hashCodeOrZero(java.lang.Object o) {\n    return o != null ? o.hashCode() : 0;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:120","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonNull"},"failures":[],"tindex":"22b5f2d8-3e64-11e6-a699-6da7c20d3ca9","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:839","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonNull) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return containsKey(o);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[],"tindex":"22b5f2d9-3e64-11e6-a699-5b866da37f41","method":{"position":"com.google.gson.Gson:491","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (src == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            if (src != null) {\n                                {\n                                    if (src == null) {\n                                        {\n                                            com.google.gson.internal.bind.JsonTreeWriter com.google.gson.internal.bind.JsonTreeWriter = new com.google.gson.internal.bind.JsonTreeWriter();\n                                            toJson(src, typeOfSrc, writer);\n                                            return writer.get();\n                                        }\n                                    } else {\n                                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                        throw new java.lang.RuntimeException();\n                                    }\n                                }\n                            } else {\n                                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                throw new java.lang.RuntimeException();\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"22b5f2da-3e64-11e6-a699-1bf4488d8e59","method":{"position":"com.google.gson.Gson:695","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.lang.String json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.JsonPrimitive:313","type":"CtBinaryOperatorImpl","sourcecode":"(value) == null"},"failures":[239,240,241,354,0,1,2,355,210,356,3,4,242,357,5,55,58,60,61,243,244,245,246,247,211,248,249,250,251,252,254,255,256,258,259,499,261,10,262,263,359,12,264,365,366,367,368,369,265,266,370,267,371,372,268,269,270,271,272,377,273,274,378,275,123,276,277,401,278,126,87,14,127,279,281,282,283,286,287,291,218,128,415,129,89,295,296,110,297,419,420,111,298,421,299,422,23,24,300,301,302,434,435,436,437,438,303,304,307,308,309,114,311,312,115,313,26,28,449,452,453,314,315,29,30,454,455,456,457,319,92,93,31,467,468,469,470,32,33,34,35,221,36,344,222,223,225,226,227,228,230,483,345,346,347,348,488,490,491,231,232,188,352],"tindex":"22b619eb-3e64-11e6-a699-73269b4cc6eb","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:108","type":"CtMethodImpl","sourcecode":"public boolean writeField(java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value == null) {\n        {\n            if (value == null) {\n                {\n                    if (!(boolean))\n                        return false;\n                    \n                    java.lang.Object java.lang.Object = field.get(value);\n                    return fieldValue != value;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[68,140],"tindex":"22b619ec-3e64-11e6-a699-b5b47adac6c4","method":{"position":"com.google.gson.Gson:133","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src != null) {\n                {\n                    if (src == null) {\n                        {\n                            return toJsonTree(src);\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:133","type":"CtBinaryOperatorImpl","sourcecode":"(type) instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"22b619ed-3e64-11e6-a699-ed3b335f1623","method":{"position":"com.google.gson.internal.$Gson$Types:431","type":"CtMethodImpl","sourcecode":"private static void checkNotPrimitive(java.lang.reflect.Type type) {\n    com.google.gson.internal.$Gson$Preconditions.checkArgument(((!(type instanceof java.lang.Class<?>)) || (!(((java.lang.Class<?>)(type)).isPrimitive()))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:107","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonArray"},"failures":[],"tindex":"22b619ee-3e64-11e6-a699-e9d96b3e90ad","method":{"position":"com.google.gson.internal.LinkedTreeMap:605","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonArray) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof com.google.gson.JsonArray) {\n                {\n                    return containsKey(o);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:305","type":"CtBinaryOperatorImpl","sourcecode":"node != null"},"failures":[504,505,506,507],"tindex":"22b640ff-3e64-11e6-a699-bd156bd4fdd3","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:686","type":"CtMethodImpl","sourcecode":"void add(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node) {\n    if (node != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            node.int = 1;\n            if (((int) > 0) && (((int) & 1) == 0)) {\n                (int)++;\n                (int)--;\n                (int)++;\n            } \n            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node;\n            (int)++;\n            if (((int) > 0) && (((int) & 1) == 0)) {\n                (int)++;\n                (int)--;\n                (int)++;\n            } \n            for (int int = 4 ; ((int) & (scale - 1)) == (scale - 1) ; scale *= 2) {\n                if ((int) == 0) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                    center.int = (right.int) + 1;\n                    left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                } else if ((int) == 1) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                    center.int = (right.int) + 1;\n                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    int = 0;\n                } else if ((int) == 2) {\n                    int = 0;\n                } \n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"node"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"22b64100-3e64-11e6-a699-f70f035f74c1","method":{"position":"com.google.gson.Gson:491","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (src == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            if (src != null) {\n                                {\n                                    if (src == null) {\n                                        {\n                                            com.google.gson.internal.bind.JsonTreeWriter com.google.gson.internal.bind.JsonTreeWriter = new com.google.gson.internal.bind.JsonTreeWriter();\n                                            toJson(src, typeOfSrc, writer);\n                                            return writer.get();\n                                        }\n                                    } else {\n                                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                        throw new java.lang.RuntimeException();\n                                    }\n                                }\n                            } else {\n                                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                throw new java.lang.RuntimeException();\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[],"tindex":"22b66811-3e64-11e6-a699-5f04a0514bb6","method":{"position":"com.google.gson.stream.JsonWriter:385","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter name(java.lang.String name) throws java.io.IOException {\n    if (name == null) {\n        {\n            if (name == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (name == null) {\n                        throw new java.lang.NullPointerException(\"name == null\");\n                    } \n                    if ((java.lang.String) != null) {\n                        throw new java.lang.IllegalStateException();\n                    } \n                    if ((int) == 0) {\n                        throw new java.lang.IllegalStateException(\"JsonWriter is closed.\");\n                    } \n                    java.lang.String = name;\n                    return com.google.gson.stream.JsonWriter.this;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:107","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonArray"},"failures":[],"tindex":"22b66812-3e64-11e6-a699-1f17e026e818","method":{"position":"com.google.gson.internal.LinkedTreeMap:605","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonArray) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof com.google.gson.JsonArray) {\n                {\n                    return containsKey(o);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[384,227],"tindex":"22b66813-3e64-11e6-a699-6f7a7cfca885","method":{"position":"com.google.gson.internal.bind.TypeAdapters:267","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.JsonPrimitive:313","type":"CtBinaryOperatorImpl","sourcecode":"(value) == null"},"failures":[],"tindex":"22b66814-3e64-11e6-a699-f77392ff8846","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:108","type":"CtMethodImpl","sourcecode":"public boolean writeField(java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value == null) {\n        {\n            if (value == null) {\n                {\n                    if (!(boolean))\n                        return false;\n                    \n                    java.lang.Object java.lang.Object = field.get(value);\n                    return fieldValue != value;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:86","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonArray"},"failures":[150],"tindex":"22b68f25-3e64-11e6-a699-23a59e2d4fd1","method":{"position":"com.google.gson.JsonArray:92","type":"CtMethodImpl","sourcecode":"public boolean remove(com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonArray) {\n        {\n            return java.util.List<com.google.gson.JsonElement>.remove(element);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:726","type":"CtBinaryOperatorImpl","sourcecode":"value == 0"},"failures":[103,104],"tindex":"22b68f26-3e64-11e6-a699-eda03262ddc3","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:170","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(long value) throws java.io.IOException {\n    if (value == 0) {\n        {\n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[59,60,64,131,132,133,134],"tindex":"22b68f27-3e64-11e6-a699-13924fa3bfc2","method":{"position":"com.google.gson.JsonObject:89","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Number value) {\n    if (property == null) {\n        {\n            if (value == null) {\n                {\n                    add(property, createJsonElement(value));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:107","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.WildcardType"},"failures":[],"tindex":"22b68f28-3e64-11e6-a699-55795eed9b11","method":{"position":"com.google.gson.internal.$Gson$Types:93","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type canonicalize(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class) {\n        java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(type));\n        return c.isArray() ? new com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl(com.google.gson.internal.$Gson$Types.canonicalize(c.getComponentType())) : c;\n    } else if (type instanceof java.lang.reflect.ParameterizedType) {\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(type));\n        return new com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl(p.getOwnerType() , p.getRawType() , p.getActualTypeArguments());\n    } else if (type instanceof java.lang.reflect.GenericArrayType) {\n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(type));\n        return new com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl(g.getGenericComponentType());\n    } else if (type instanceof java.lang.reflect.WildcardType) {\n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(type));\n        return new com.google.gson.internal.$Gson$Types.WildcardTypeImpl(w.getUpperBounds() , w.getLowerBounds());\n    } else {\n        return type;\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:243","type":"CtBinaryOperatorImpl","sourcecode":"annotation != null"},"failures":[345,508,509,347,510,348],"tindex":"22b68f29-3e64-11e6-a699-9532f54989b0","method":{"position":"com.google.gson.internal.Excluder:242","type":"CtMethodImpl","sourcecode":"private boolean isValidUntil(com.google.gson.annotations.Until annotation) {\n    if (annotation != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (annotation != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (annotation != null) {\n                        double double = annotation.value();\n                        if (annotationVersion <= (double)) {\n                            return false;\n                        } \n                    } \n                    return true;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"22b6b63a-3e64-11e6-a699-9d7d7c778ab7","method":{"position":"com.google.gson.Gson:576","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        {\n            try {\n                com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                toJson(src, typeOfSrc, jsonWriter);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:578","type":"CtBinaryOperatorImpl","sourcecode":"root == null"},"failures":[504,505,511,507],"tindex":"22b6b63b-3e64-11e6-a699-d77d9e3765ec","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:626","type":"CtMethodImpl","sourcecode":"void reset(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root == null) {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            for (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root ; n != null ; n = n.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) {\n                n.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = stackTop;\n                stackTop = n;\n            }\n            com.google.gson.internal.LinkedHashTreeMap.AvlIterator.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = stackTop;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"root"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:109","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonPrimitive"},"failures":[],"tindex":"22b6b63c-3e64-11e6-a699-95c2be65f377","method":{"position":"com.google.gson.JsonObject:186","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonPrimitive) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (o == (com.google.gson.JsonObject.this)) || ((o instanceof com.google.gson.JsonObject) && (((com.google.gson.JsonObject)(o)).com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.equals(com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[512,513,514,515,116,516,517,518,519,117,243,520,245,521,248,249,250,522,523,254,524,525,526,121,527,528,529,530,10,262,12,264,365,366,367,368,531,369,370,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,123,553,554,555,556,297,112,557,558,559,113,422,23,24,132,25,300,301,302,434,436,437,438,303,304,560,136,26,27,138,561,93,31,562,563,36,564,565,143,566,567,568,569,570,508,509,510,571,572,573,188],"tindex":"22b6b63d-3e64-11e6-a699-43c2ba60ed95","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:101","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nvoid read(com.google.gson.stream.JsonReader reader, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value == null) {\n        {\n            java.lang.Object java.lang.Object = com.google.gson.TypeAdapter<?>.read(reader);\n            if ((fieldValue != null) || (!isPrimitive)) {\n                field.set(value, fieldValue);\n            } \n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:501","type":"CtBinaryOperatorImpl","sourcecode":"typeAdapter instanceof com.google.gson.TypeAdapter<?>"},"failures":[55,116,56,519,57,6,7,117,58,59,60,118,61,62,63,119,64,120,65,67,68,8,11,70,360,71,72,73,86,88,89,90,135,136,26,27,28,137,138,139,91,140,32,33,142,34,35,144,94,95,574,488,145,97,489],"tindex":"22b6dd4e-3e64-11e6-a699-7988c8b3fd1a","method":{"position":"com.google.gson.TreeTypeAdapter:92","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newFactoryWithMatchRawType(com.google.gson.reflect.TypeToken<?> exactType, java.lang.Object typeAdapter) {\n    if ((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) {\n        {\n            if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                {\n                    boolean boolean = (exactType.getType()) == (exactType.getRawType());\n                    return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , exactType , matchRawType , null);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:111","type":"CtInvocationImpl","sourcecode":"primitive.isString()"},"failures":[],"tindex":"22b6dd4f-3e64-11e6-a699-bf64529a634e","method":{"position":"com.google.gson.JsonPrimitive:93","type":"CtMethodImpl","sourcecode":"void setValue(java.lang.Object primitive) {\n    if (primitive.isString()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (primitive instanceof java.lang.Character) {\n                {\n                    if (primitive instanceof java.lang.Character) {\n                        char char = ((java.lang.Character)(primitive)).charValue();\n                        com.google.gson.JsonPrimitive.this.java.lang.Object = java.lang.String.valueOf(c);\n                    } else {\n                        com.google.gson.internal.$Gson$Preconditions.checkArgument(((primitive instanceof java.lang.Number) || (com.google.gson.JsonPrimitive.isPrimitiveOrString(primitive))));\n                        com.google.gson.JsonPrimitive.this.java.lang.Object = primitive;\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"primitive"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.FieldNamingPolicy:155","type":"CtUnaryOperatorImpl","sourcecode":"!(java.lang.Character.isUpperCase(firstCharacter))"},"failures":[],"tindex":"22b70460-3e64-11e6-a699-59c09b2690c4","method":{"position":"com.google.gson.FieldNamingPolicy:163","type":"CtMethodImpl","sourcecode":"private static java.lang.String modifyString(char firstCharacter, java.lang.String srcString, int indexOfSubstring) {\n    if (!(java.lang.Character.isUpperCase(firstCharacter))) {\n        {\n            if (!(java.lang.Character.isUpperCase(firstCharacter))) {\n                {\n                    return indexOfSubstring < (srcString.length()) ? firstCharacter + (srcString.substring(indexOfSubstring)) : java.lang.String.valueOf(firstCharacter);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"firstCharacter":"firstCharacter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:106","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonArray"},"failures":[1,3,121,10,78,124,88,131,133,134,32,148,149,150,575,100,191,192,193,194,195,576,196,197,198,199,200,202,203,102,103,208,53],"tindex":"22b70461-3e64-11e6-a699-8b0d32c08294","method":{"position":"com.google.gson.JsonArray:57","type":"CtMethodImpl","sourcecode":"public void add(com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonArray) {\n        {\n            if (element == null) {\n                element = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            java.util.List<com.google.gson.JsonElement>.add(element);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:123","type":"CtBinaryOperatorImpl","sourcecode":"from == null"},"failures":[],"tindex":"22b70462-3e64-11e6-a699-ebc55e89d960","method":{"position":"com.google.gson.reflect.TypeToken:160","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.GenericArrayType to) {\n    if (from == null) {\n        {\n            if (from == null) {\n                {\n                    java.lang.reflect.Type java.lang.reflect.Type = to.getGenericComponentType();\n                    if (toGenericComponentType instanceof java.lang.reflect.ParameterizedType) {\n                        java.lang.reflect.Type java.lang.reflect.Type = from;\n                        if (from instanceof java.lang.reflect.GenericArrayType) {\n                            t = ((java.lang.reflect.GenericArrayType)(from)).getGenericComponentType();\n                        } else if (from instanceof java.lang.Class<?>) {\n                            java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(from));\n                            while (classType.isArray()) {\n                                classType = classType.getComponentType();\n                            }\n                            t = classType;\n                        } \n                        return com.google.gson.reflect.TypeToken.isAssignableFrom(t, ((java.lang.reflect.ParameterizedType)(toGenericComponentType)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n                    } \n                    return true;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:92","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof java.util.Iterator"},"failures":[124,577,575],"tindex":"22b70463-3e64-11e6-a699-93b359a75310","method":{"position":"com.google.gson.JsonArray:329","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof java.util.Iterator) {\n        {\n            return (o == (com.google.gson.JsonArray.this)) || ((o instanceof com.google.gson.JsonArray) && (((com.google.gson.JsonArray)(o)).java.util.List<com.google.gson.JsonElement>.equals(java.util.List<com.google.gson.JsonElement>)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:243","type":"CtBinaryOperatorImpl","sourcecode":"annotation != null"},"failures":[],"tindex":"22b70464-3e64-11e6-a699-619e13fa9a53","method":{"position":"com.google.gson.internal.Excluder:242","type":"CtMethodImpl","sourcecode":"private boolean isValidUntil(com.google.gson.annotations.Until annotation) {\n    if (annotation != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (annotation != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (annotation != null) {\n                        double double = annotation.value();\n                        if (annotationVersion <= (double)) {\n                            return false;\n                        } \n                    } \n                    return true;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"22b70465-3e64-11e6-a699-5d30d335e3c5","method":{"position":"com.google.gson.stream.JsonWriter:490","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                {\n                    if (value == null) {\n                        return nullValue();\n                    } \n                    writeDeferredName();\n                    java.lang.String java.lang.String = value.toString();\n                    if ((!(boolean)) && (((string.equals(\"-Infinity\")) || (string.equals(\"Infinity\"))) || (string.equals(\"NaN\")))) {\n                        throw new java.lang.IllegalArgumentException((\"Numeric values must be finite, but was \" + value));\n                    } \n                    beforeValue(false);\n                    java.io.Writer.append(string);\n                    return com.google.gson.stream.JsonWriter.this;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[0,1,2,3,4,5,68,10,126,87,127,128,129,89,29,31,32,33,34,35,36,37,208],"tindex":"22b72b76-3e64-11e6-a699-6dd945139a30","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:144","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:233","type":"CtBinaryOperatorImpl","sourcecode":"annotation != null"},"failures":[487,345,508,509,347,510,348,578,579,580,581],"tindex":"22b72b77-3e64-11e6-a699-7db84e494587","method":{"position":"com.google.gson.internal.Excluder:232","type":"CtMethodImpl","sourcecode":"private boolean isValidSince(com.google.gson.annotations.Since annotation) {\n    if (annotation != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (annotation != null) {\n                double double = annotation.value();\n                if (annotationVersion > (double)) {\n                    return false;\n                } \n            } \n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:188","type":"CtBinaryOperatorImpl","sourcecode":"from == null"},"failures":[],"tindex":"22b72b78-3e64-11e6-a699-d36a12374702","method":{"position":"com.google.gson.reflect.TypeToken:160","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.GenericArrayType to) {\n    if (from == null) {\n        {\n            if (from == null) {\n                {\n                    java.lang.reflect.Type java.lang.reflect.Type = to.getGenericComponentType();\n                    if (toGenericComponentType instanceof java.lang.reflect.ParameterizedType) {\n                        java.lang.reflect.Type java.lang.reflect.Type = from;\n                        if (from instanceof java.lang.reflect.GenericArrayType) {\n                            t = ((java.lang.reflect.GenericArrayType)(from)).getGenericComponentType();\n                        } else if (from instanceof java.lang.Class<?>) {\n                            java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(from));\n                            while (classType.isArray()) {\n                                classType = classType.getComponentType();\n                            }\n                            t = classType;\n                        } \n                        return com.google.gson.reflect.TypeToken.isAssignableFrom(t, ((java.lang.reflect.ParameterizedType)(toGenericComponentType)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n                    } \n                    return true;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:298","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[],"tindex":"22b72b79-3e64-11e6-a699-75ad36c53d28","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:162","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(double value) throws java.io.IOException {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                {\n                    if ((!(isLenient())) && ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value)))) {\n                        throw new java.lang.IllegalArgumentException((\"JSON forbids NaN and infinities: \" + value));\n                    } \n                    put(new com.google.gson.JsonPrimitive(value));\n                    return com.google.gson.internal.bind.JsonTreeWriter.this;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:250","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[326,329,330,335,339,341,234],"tindex":"22b7528a-3e64-11e6-a699-d5726e4e1c8c","method":{"position":"com.google.gson.Gson:249","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> doubleAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return in.nextDouble();\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    double double = value.doubleValue();\n                    checkValidFloatingPoint(doubleValue);\n                    out.value(value);\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:325","type":"CtBinaryOperatorImpl","sourcecode":"toResolve instanceof java.lang.reflect.TypeVariable"},"failures":[],"tindex":"22b7528b-3e64-11e6-a699-8ddfee110497","method":{"position":"com.google.gson.internal.$Gson$Types:322","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type resolve(java.lang.reflect.Type context, java.lang.Class<?> contextRawType, java.lang.reflect.Type toResolve) {\n    while (true) {\n        if (toResolve instanceof java.lang.reflect.TypeVariable) {\n            java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(toResolve));\n            toResolve = com.google.gson.internal.$Gson$Types.resolveTypeVariable(context, contextRawType, typeVariable);\n            if (toResolve == typeVariable) {\n                return toResolve;\n            } \n        } else if ((toResolve instanceof java.lang.Class) && (((java.lang.Class<?>)(toResolve)).isArray())) {\n            java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getComponentType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, componentType);\n            return componentType == newComponentType ? original : com.google.gson.internal.$Gson$Types.arrayOf(newComponentType);\n        } else if (toResolve instanceof java.lang.reflect.GenericArrayType) {\n            java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getGenericComponentType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, componentType);\n            return componentType == newComponentType ? original : com.google.gson.internal.$Gson$Types.arrayOf(newComponentType);\n        } else if (toResolve instanceof java.lang.reflect.ParameterizedType) {\n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getOwnerType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, ownerType);\n            boolean boolean = newOwnerType != ownerType;\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getActualTypeArguments();\n            for (int int = 0, int int = args.int ; t < length ; t++) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, args[t]);\n                if (resolvedTypeArgument != (args[t])) {\n                    if (!changed) {\n                        args = args.clone();\n                        changed = true;\n                    } \n                    args[t] = resolvedTypeArgument;\n                } \n            }\n            return changed ? com.google.gson.internal.$Gson$Types.newParameterizedTypeWithOwner(newOwnerType, original.getRawType(), args) : original;\n        } else if (toResolve instanceof java.lang.reflect.WildcardType) {\n            java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(toResolve));\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getLowerBounds();\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getUpperBounds();\n            if ((originalLowerBound.int) == 1) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, originalLowerBound[0]);\n                if (lowerBound != (originalLowerBound[0])) {\n                    return com.google.gson.internal.$Gson$Types.supertypeOf(lowerBound);\n                } \n            } else if ((originalUpperBound.int) == 1) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, originalUpperBound[0]);\n                if (upperBound != (originalUpperBound[0])) {\n                    return com.google.gson.internal.$Gson$Types.subtypeOf(upperBound);\n                } \n            } \n            return original;\n        } else {\n            return toResolve;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"toResolve"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"22b7528c-3e64-11e6-a699-d50207df550c","method":{"position":"com.google.gson.Gson:510","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src == null) {\n                return toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull);\n            } \n            return toJson(src, src.getClass());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"22b7799d-3e64-11e6-a699-299d9ba439cf","method":{"position":"com.google.gson.JsonObject:89","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Number value) {\n    if (property == null) {\n        {\n            if (value == null) {\n                {\n                    add(property, createJsonElement(value));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"22b7799e-3e64-11e6-a699-95b5c8dec170","method":{"position":"com.google.gson.stream.JsonWriter:413","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                {\n                    if (value == null) {\n                        return nullValue();\n                    } \n                    writeDeferredName();\n                    beforeValue(false);\n                    string(value);\n                    return com.google.gson.stream.JsonWriter.this;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:166","type":"CtBinaryOperatorImpl","sourcecode":"from instanceof java.lang.Class<?>"},"failures":[582,583,584],"tindex":"22b7799f-3e64-11e6-a699-d7e70bd970af","method":{"position":"com.google.gson.reflect.TypeToken:185","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.ParameterizedType to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeVarMap) {\n    if (from instanceof java.lang.Class<?>) {\n        {\n            if (from == null) {\n                return false;\n            } \n            if (to.equals(from)) {\n                return true;\n            } \n            java.lang.Class<?> java.lang.Class<?> = com.google.gson.internal.$Gson$Types.getRawType(from);\n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = null;\n            if (from instanceof java.lang.reflect.ParameterizedType) {\n                ptype = ((java.lang.reflect.ParameterizedType)(from));\n            } \n            if (ptype != null) {\n                java.lang.reflect.Type[] java.lang.reflect.Type[] = ptype.getActualTypeArguments();\n                java.lang.reflect.TypeVariable<?>[] java.lang.reflect.TypeVariable<?>[] = clazz.getTypeParameters();\n                for (int int = 0 ; i < (tArgs.int) ; i++) {\n                    java.lang.reflect.Type java.lang.reflect.Type = tArgs[i];\n                    java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = tParams[i];\n                    while (arg instanceof java.lang.reflect.TypeVariable<?>) {\n                        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(arg));\n                        arg = typeVarMap.get(v.getName());\n                    }\n                    typeVarMap.put(var.getName(), arg);\n                }\n                if (com.google.gson.reflect.TypeToken.typeEquals(ptype, to, typeVarMap)) {\n                    return true;\n                } \n            } \n            for (java.lang.reflect.Type java.lang.reflect.Type : clazz.getGenericInterfaces()) {\n                if (com.google.gson.reflect.TypeToken.isAssignableFrom(itype, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap))) {\n                    return true;\n                } \n            }\n            java.lang.reflect.Type java.lang.reflect.Type = clazz.getGenericSuperclass();\n            return com.google.gson.reflect.TypeToken.isAssignableFrom(sType, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[],"tindex":"22b779a0-3e64-11e6-a699-9feac775764c","method":{"position":"com.google.gson.Gson:552","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            if (src != null) {\n                toJson(src, src.getClass(), writer);\n            } else {\n                toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull, writer);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[48],"tindex":"22b7a0b1-3e64-11e6-a699-e15629f951d9","method":{"position":"com.google.gson.JsonObject:111","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Character value) {\n    if (property == null) {\n        {\n            if (property == null) {\n                {\n                    add(property, createJsonElement(value));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[],"tindex":"22b7a0b2-3e64-11e6-a699-5dec9644906a","method":{"position":"com.google.gson.Gson:491","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (src == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            if (src != null) {\n                                {\n                                    if (src == null) {\n                                        {\n                                            com.google.gson.internal.bind.JsonTreeWriter com.google.gson.internal.bind.JsonTreeWriter = new com.google.gson.internal.bind.JsonTreeWriter();\n                                            toJson(src, typeOfSrc, writer);\n                                            return writer.get();\n                                        }\n                                    } else {\n                                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                        throw new java.lang.RuntimeException();\n                                    }\n                                }\n                            } else {\n                                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                throw new java.lang.RuntimeException();\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:118","type":"CtBinaryOperatorImpl","sourcecode":"annotation != null"},"failures":[12,366,367,368,531,369,447,139,91,450,451],"tindex":"22b7a0b3-3e64-11e6-a699-0fad64765311","method":{"position":"com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory:50","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nstatic com.google.gson.TypeAdapter<?> getTypeAdapter(com.google.gson.internal.ConstructorConstructor constructorConstructor, com.google.gson.Gson gson, com.google.gson.reflect.TypeToken<?> fieldType, com.google.gson.annotations.JsonAdapter annotation) {\n    if (annotation != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.Class<?> java.lang.Class<?> = annotation.value();\n            if (com.google.gson.TypeAdapter.com.google.gson.TypeAdapter.java.lang.Class.isAssignableFrom(value)) {\n                java.lang.Class<com.google.gson.TypeAdapter<?>> java.lang.Class<com.google.gson.TypeAdapter<?>> = ((java.lang.Class<com.google.gson.TypeAdapter<?>>)(value));\n                return constructorConstructor.get(com.google.gson.reflect.TypeToken.get(typeAdapter)).construct();\n            } \n            if (com.google.gson.TypeAdapterFactory.com.google.gson.TypeAdapterFactory.java.lang.Class.isAssignableFrom(value)) {\n                java.lang.Class<com.google.gson.TypeAdapterFactory> java.lang.Class<com.google.gson.TypeAdapterFactory> = ((java.lang.Class<com.google.gson.TypeAdapterFactory>)(value));\n                return constructorConstructor.get(com.google.gson.reflect.TypeToken.get(typeAdapterFactory)).construct().create(gson, fieldType);\n            } \n            throw new java.lang.IllegalArgumentException(\"@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.\");\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[],"tindex":"22b7a0b4-3e64-11e6-a699-6f9062dc48b9","method":{"position":"com.google.gson.Gson:133","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src != null) {\n                {\n                    if (src == null) {\n                        {\n                            return toJsonTree(src);\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"22b7a0b5-3e64-11e6-a699-5dffdb3af008","method":{"position":"com.google.gson.Gson:871","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (json == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            } else {\n                {\n                    if (json == null) {\n                        return null;\n                    } \n                    return ((T)(fromJson(new com.google.gson.internal.bind.JsonTreeReader(json), typeOfT)));\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:79","type":"CtUnaryOperatorImpl","sourcecode":"!(json instanceof com.google.gson.JsonPrimitive)"},"failures":[],"tindex":"22b7a0b6-3e64-11e6-a699-c5238f450622","method":{"position":"com.google.gson.Gson:847","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(com.google.gson.JsonElement json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n        {\n            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:384","type":"CtVariableReadImpl","sourcecode":"insert"},"failures":[505],"tindex":"22b7c7c7-3e64-11e6-a699-b1e4bc3ec6fe","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:338","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (insert) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            for (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) {\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                int int = left != null ? left.int : 0;\n                int int = right != null ? right.int : 0;\n                int int = leftHeight - rightHeight;\n                if (delta == (-2)) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    int int = rightRight != null ? rightRight.int : 0;\n                    int int = rightLeft != null ? rightLeft.int : 0;\n                    int int = rightLeftHeight - rightRightHeight;\n                    if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                        rotateLeft(node);\n                    } else {\n                        assert rightDelta == 1;\n                        rotateRight(right);\n                        rotateLeft(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 2) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    int int = leftRight != null ? leftRight.int : 0;\n                    int int = leftLeft != null ? leftLeft.int : 0;\n                    int int = leftLeftHeight - leftRightHeight;\n                    if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                        rotateRight(node);\n                    } else {\n                        assert leftDelta == (-1);\n                        rotateLeft(left);\n                        rotateRight(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 0) {\n                    node.int = leftHeight + 1;\n                    if (insert) {\n                        break;\n                    } \n                } else {\n                    assert (delta == (-1)) || (delta == 1);\n                    node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                    if (!insert) {\n                        break;\n                    } \n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"insert"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:115","type":"CtInvocationImpl","sourcecode":"primitive.isNumber()"},"failures":[13,124,125,126,127,163,164,165,98,166,168,170,171,172,173,174,175,176,179,181,184],"tindex":"22b7c7c8-3e64-11e6-a699-7d6283720995","method":{"position":"com.google.gson.JsonPrimitive:333","type":"CtMethodImpl","sourcecode":"private static boolean isIntegral(com.google.gson.JsonPrimitive primitive) {\n    if (primitive.isNumber()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((primitive.java.lang.Object) instanceof java.lang.Number) {\n                java.lang.Number java.lang.Number = ((java.lang.Number)(primitive.java.lang.Object));\n                return ((((number instanceof java.math.BigInteger) || (number instanceof java.lang.Long)) || (number instanceof java.lang.Integer)) || (number instanceof java.lang.Short)) || (number instanceof java.lang.Byte);\n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"primitive"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"22b7c7c9-3e64-11e6-a699-3727860a5c71","method":{"position":"com.google.gson.JsonObject:100","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Boolean value) {\n    if (property == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (property == null) {\n                {\n                    add(property, createJsonElement(value));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"22b7eeda-3e64-11e6-a699-a16974c80f80","method":{"position":"com.google.gson.internal.bind.TypeAdapters:223","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (value == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.io.IOException();\n                    } else {\n                        {\n                            out.value(value);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"22b7eedb-3e64-11e6-a699-d7072e3b178f","method":{"position":"com.google.gson.Gson:871","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (json == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            } else {\n                {\n                    if (json == null) {\n                        return null;\n                    } \n                    return ((T)(fromJson(new com.google.gson.internal.bind.JsonTreeReader(json), typeOfT)));\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:274","type":"CtBinaryOperatorImpl","sourcecode":"target instanceof java.lang.String"},"failures":[0,1,2,3,4,5,55,56,57,7,58,62,63,119,120,67,68,8,121,10,69,11,12,70,71,72,73,74,75,122,123,77,79,80,81,84,85,86,125,126,87,14,127,128,129,130,89,131,132,133,25,134,90,135,136,26,27,28,137,138,139,91,29,30,92,93,31,140,32,33,142,34,35,36,143,144,96,37,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,167,99,169,177,178,179,180,182,183,184,185,187,38,39,188,189,100,190,191,193,194,197,198,199,203,204,101,102,103,205,206,207,208,104,105,106,107,108,51,53,54],"tindex":"22b7eedc-3e64-11e6-a699-f72fbdda8578","method":{"position":"com.google.gson.JsonPrimitive:273","type":"CtMethodImpl","sourcecode":"private static boolean isPrimitiveOrString(java.lang.Object target) {\n    if (target instanceof java.lang.String) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (target instanceof java.lang.String) {\n                return true;\n            } \n            java.lang.Class<?> java.lang.Class<?> = target.getClass();\n            for (java.lang.Class<?> java.lang.Class<?> : com.google.gson.JsonPrimitive.com.google.gson.JsonPrimitive.java.lang.Class<?>[]) {\n                if (standardPrimitive.isAssignableFrom(classOfPrimitive)) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"target":"target"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:86","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonArray"},"failures":[55,56,57,58,59,60,61,62,63,64,65,66,67,68,10,69,70,71,72,73,74,75,76,373,379,216,77,80,81,84,85,86,87,89,90,91,92,93,31,32,33,142,34,35,94,95,229,96,97,158,98,99,100,101,104,105,107,108,109],"tindex":"22b7eedd-3e64-11e6-a699-0b7499a13715","method":{"position":"com.google.gson.internal.Streams:67","type":"CtMethodImpl","sourcecode":"public static void write(com.google.gson.JsonElement element, com.google.gson.stream.JsonWriter writer) throws java.io.IOException {\n    if (element instanceof com.google.gson.JsonArray) {\n        {\n            com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<com.google.gson.JsonElement>.write(writer, element);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[],"tindex":"22b7eede-3e64-11e6-a699-c53f8c1f68db","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:116","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<?> getFieldAdapter(com.google.gson.Gson gson, java.lang.reflect.Field field, com.google.gson.reflect.TypeToken<?> fieldType) {\n    if (field.isSynthetic()) {\n        {\n            if (field.isSynthetic()) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    com.google.gson.annotations.JsonAdapter com.google.gson.annotations.JsonAdapter = field.getAnnotation(com.google.gson.annotations.JsonAdapter.com.google.gson.annotations.JsonAdapter.java.lang.Class);\n                    if (annotation != null) {\n                        com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory.getTypeAdapter(com.google.gson.internal.ConstructorConstructor, gson, fieldType, annotation);\n                        if (adapter != null)\n                            return adapter;\n                        \n                    } \n                    return gson.getAdapter(fieldType);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"field"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"22b815ef-3e64-11e6-a699-a18c184d8f67","method":{"position":"com.google.gson.Gson:491","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (src == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            if (src != null) {\n                                {\n                                    if (src == null) {\n                                        {\n                                            com.google.gson.internal.bind.JsonTreeWriter com.google.gson.internal.bind.JsonTreeWriter = new com.google.gson.internal.bind.JsonTreeWriter();\n                                            toJson(src, typeOfSrc, writer);\n                                            return writer.get();\n                                        }\n                                    } else {\n                                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                        throw new java.lang.RuntimeException();\n                                    }\n                                }\n                            } else {\n                                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                throw new java.lang.RuntimeException();\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"22b815f0-3e64-11e6-a699-115806d020ef","method":{"position":"com.google.gson.JsonObject:111","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Character value) {\n    if (property == null) {\n        {\n            if (property == null) {\n                {\n                    add(property, createJsonElement(value));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:578","type":"CtBinaryOperatorImpl","sourcecode":"root == null"},"failures":[505],"tindex":"22b815f1-3e64-11e6-a699-af078ded0b09","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:401","type":"CtMethodImpl","sourcecode":"private void rotateLeft(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root == null) {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivotLeft;\n            if (pivotLeft != null) {\n                pivotLeft.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            } \n            replaceInParent(root, pivot);\n            pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot;\n            root.int = (java.lang.Math.max((left != null ? left.int : 0), (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n            pivot.int = (java.lang.Math.max(root.int, (pivotRight != null ? pivotRight.int : 0))) + 1;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"root"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"22b815f2-3e64-11e6-a699-35e377f64ae4","method":{"position":"com.google.gson.Gson:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (value == null) {\n                        {\n                            if (value == null) {\n                                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                throw new java.io.IOException();\n                            } else {\n                                {\n                                    if (value == null) {\n                                        out.nullValue();\n                                        return ;\n                                    } \n                                    out.value(value.toString());\n                                }\n                            }\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.io.IOException();\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"22b83d03-3e64-11e6-a699-c9196d29a0dd","method":{"position":"com.google.gson.Gson:133","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src != null) {\n                {\n                    if (src == null) {\n                        {\n                            return toJsonTree(src);\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"22b83d04-3e64-11e6-a699-d94018470132","method":{"position":"com.google.gson.Gson:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (value == null) {\n                        {\n                            if (value == null) {\n                                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                throw new java.io.IOException();\n                            } else {\n                                {\n                                    if (value == null) {\n                                        out.nullValue();\n                                        return ;\n                                    } \n                                    out.value(value.toString());\n                                }\n                            }\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.io.IOException();\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:455","type":"CtBinaryOperatorImpl","sourcecode":"(typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)"},"failures":[],"tindex":"22b83d05-3e64-11e6-a699-c322c920ac3e","method":{"position":"com.google.gson.TreeTypeAdapter:92","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newFactoryWithMatchRawType(com.google.gson.reflect.TypeToken<?> exactType, java.lang.Object typeAdapter) {\n    if ((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) {\n        {\n            if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                {\n                    boolean boolean = (exactType.getType()) == (exactType.getRawType());\n                    return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , exactType , matchRawType , null);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:92","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof java.util.Iterator"},"failures":[],"tindex":"22b83d06-3e64-11e6-a699-b99e08710c8c","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:512","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"rawtypes\")\n@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof java.util.Iterator) {\n        {\n            if (o instanceof java.util.Map.Entry) {\n                java.util.Map.Entry java.util.Map.Entry = ((java.util.Map.Entry)(o));\n                return ((K) == null ? (other.getKey()) == null : K.equals(other.getKey())) && ((V) == null ? (other.getValue()) == null : V.equals(other.getValue()));\n            } \n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:103","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"22b83d07-3e64-11e6-a699-33bc9ed2e3d5","method":{"position":"com.google.gson.internal.ConstructorConstructor:200","type":"CtMethodImpl","sourcecode":"private <T>com.google.gson.internal.ObjectConstructor<T> newUnsafeAllocator(final java.lang.reflect.Type type, final java.lang.Class<? super T> rawType) {\n    if (type instanceof java.lang.reflect.GenericArrayType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new com.google.gson.internal.ObjectConstructor<T>() {\n                private final com.google.gson.internal.UnsafeAllocator unsafeAllocator = com.google.gson.internal.UnsafeAllocator.create();\n\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                public T construct() {\n                    try {\n                        java.lang.Object java.lang.Object = com.google.gson.internal.UnsafeAllocator.newInstance(rawType);\n                        return ((T)(newInstance));\n                    } catch (java.lang.Exception e) {\n                        throw new java.lang.RuntimeException((((\"Unable to invoke no-args constructor for \" + type) + \". \") + \"Register an InstanceCreator with Gson for this type may fix this problem.\") , e);\n                    }\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:298","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[],"tindex":"22b86418-3e64-11e6-a699-61d1f78de073","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:162","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(double value) throws java.io.IOException {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                {\n                    if ((!(isLenient())) && ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value)))) {\n                        throw new java.lang.IllegalArgumentException((\"JSON forbids NaN and infinities: \" + value));\n                    } \n                    put(new com.google.gson.JsonPrimitive(value));\n                    return com.google.gson.internal.bind.JsonTreeWriter.this;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:105","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonObject"},"failures":[],"tindex":"22b86419-3e64-11e6-a699-3b5dceaa3cea","method":{"position":"com.google.gson.internal.LinkedTreeMap:574","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof com.google.gson.JsonNull) {\n                {\n                    if (!(o instanceof java.util.Map.Entry)) {\n                        return false;\n                    } \n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n                    if (node == null) {\n                        return false;\n                    } \n                    removeInternal(node, true);\n                    return true;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"22b8641a-3e64-11e6-a699-7552012a8dc7","method":{"position":"com.google.gson.internal.bind.TypeAdapters:223","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (value == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.io.IOException();\n                    } else {\n                        {\n                            out.value(value);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"22b8641b-3e64-11e6-a699-8188459384d5","method":{"position":"com.google.gson.Gson:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (value == null) {\n                        {\n                            if (value == null) {\n                                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                throw new java.io.IOException();\n                            } else {\n                                {\n                                    if (value == null) {\n                                        out.nullValue();\n                                        return ;\n                                    } \n                                    out.value(value.toString());\n                                }\n                            }\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.io.IOException();\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249490400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0}],"header":{"groupId":"com.google.code.gson","transformationCount":100,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
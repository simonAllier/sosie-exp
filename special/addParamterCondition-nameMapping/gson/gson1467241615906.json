{"failureDictionary":{"com.google.gson.JsonStreamParserTest.testNoSideEffectForHasNext":282,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":199,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":370,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":437,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":113,"com.google.gson.JsonPrimitiveTest.testDeepCopy":290,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":0,"com.google.gson.MixedStreamTest.testWriteLenient":219,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":250,"com.google.gson.internal.bind.JsonTreeWriterTest.testPrematureClose":308,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":245,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":194,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":138,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":148,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":330,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":427,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":87,"com.google.gson.internal.bind.JsonElementReaderTest.testStrictNansAndInfinities":304,"com.google.gson.JsonParserTest.testParseUnquotedMultiWordStringFails":295,"com.google.gson.functional.ObjectTest.testSingletonLists":58,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":43,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":355,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":371,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":229,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":72,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":433,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":42,"com.google.gson.DefaultDateTypeAdapterTest.testDatePattern":273,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":44,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":89,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":429,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":238,"com.google.gson.functional.EnumTest.testEnumCaseMapping":426,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":221,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":369,"com.google.gson.functional.JsonTreeTest.testToJsonTree":83,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":94,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":248,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":14,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":33,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":244,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":39,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":419,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":145,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":52,"com.google.gson.JsonPrimitiveTest.testParsingStringAsBoolean":286,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":411,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":336,"com.google.gson.internal.bind.JsonElementReaderTest.testLenientNansAndInfinities":303,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":237,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":187,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":320,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":85,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":362,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":130,"com.google.gson.JsonParserTest.testParseString":297,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":40,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":404,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":398,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":68,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":175,"com.google.gson.DefaultDateTypeAdapterTest.testFormatUsesDefaultTimezone":277,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":354,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":251,"com.google.gson.functional.StreamingTypeAdaptersTest.testFromJsonTree":232,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":122,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":184,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":310,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":111,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":405,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":67,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":385,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":169,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":223,"com.google.gson.JsonPrimitiveTest.testEqualsAcrossTypes":293,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":3,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":392,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":7,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":27,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":77,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":259,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":350,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":186,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":88,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":62,"com.google.gson.functional.EnumTest.testEnumSet":203,"com.google.gson.JsonStreamParserTest.testIterator":283,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":28,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":17,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":99,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":64,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":26,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":213,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":73,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":235,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":407,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":383,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":116,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":198,"com.google.gson.DefaultDateTypeAdapterTest.testParsingDatesFormattedWithSystemLocale":275,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":182,"com.google.gson.functional.MapTest.testMapSerialization":104,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":200,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":257,"com.google.gson.functional.MapTest.testSerializeMaps":98,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":155,"com.google.gson.functional.MapTest.testComplexKeysSerialization":110,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":249,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":309,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":181,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":54,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":425,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":92,"com.google.gson.internal.bind.JsonElementReaderTest.testWrongType":305,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":321,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":1,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":326,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":414,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":112,"com.google.gson.functional.PrettyPrintingTest.testMap":90,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":380,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":141,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":201,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":341,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":41,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":432,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":374,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":75,"com.google.gson.functional.CollectionTest.testQueueSerialization":142,"com.google.gson.functional.MapTest.testMapSerializationEmpty":367,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":438,"com.google.gson.functional.MapTest.testMapOfMapSerialization":103,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":396,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":137,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":401,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":328,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictBoxedNansAndInfinities":314,"com.google.gson.functional.FieldNamingTest.testIdentity":156,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":372,"com.google.gson.JsonStreamParserTest.testCallingNextBeyondAvailableInput":280,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":226,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":45,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":2,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":57,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":82,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":264,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":430,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":263,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":373,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":399,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":215,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":136,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":348,"com.google.gson.functional.MapTest.testMapSubclassSerialization":97,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":413,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":125,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":159,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":218,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":428,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":252,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":25,"com.google.gson.functional.EnumTest.testEnumSubclass":206,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":402,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":434,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":388,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":185,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":18,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":115,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":5,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":214,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":397,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":359,"com.google.gson.MixedStreamTest.testWriteNulls":279,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":177,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":173,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":53,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":21,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":59,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":163,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":256,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":105,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":132,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":84,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":32,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":191,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":361,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":157,"com.google.gson.JsonParserTest.testParseMixedArray":299,"com.google.gson.DefaultDateTypeAdapterTest.testParsingDatesFormattedWithUsLocale":278,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":391,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":160,"com.google.gson.internal.bind.JsonTreeWriterTest.testWriteAfterClose":315,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":394,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":135,"com.google.gson.JsonArrayTest.testRemove":271,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":352,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":408,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":349,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":95,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":363,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":285,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":12,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":100,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":421,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":202,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":81,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":69,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":335,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":118,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":381,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":6,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":342,"com.google.gson.internal.bind.JsonElementReaderTest.testNumbersFromStrings":306,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":114,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":123,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":91,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":364,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":267,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":247,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":228,"com.google.gson.functional.PrimitiveTest.testShortSerialization":412,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":423,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictNansAndInfinities":312,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":334,"com.google.gson.JsonParserTest.testParseEmptyString":300,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":190,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":225,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":152,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":205,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":140,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":124,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":192,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":255,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":253,"com.google.gson.DefaultDateTypeAdapterTest.testFormattingInFr":276,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":318,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":316,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":416,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":36,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":325,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":70,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":209,"com.google.gson.JsonPrimitiveTest.testStringsAndChar":287,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":319,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":338,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":19,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":208,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":119,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":378,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":146,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":379,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":418,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":353,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":422,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":183,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":345,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":424,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":10,"com.google.gson.JsonArrayTest.testSet":269,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":400,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":415,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":166,"com.google.gson.JsonPrimitiveTest.testEquals":289,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":204,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":420,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":265,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":258,"com.google.gson.functional.MapTest.testGeneralMapField":108,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":384,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":179,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":261,"com.google.gson.DefaultDateTypeAdapterTest.testDateSerialization":272,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":387,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":78,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":365,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":129,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":242,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":390,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":406,"com.google.gson.JsonObjectTest.testDeepCopy":322,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":189,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":149,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":431,"com.google.gson.internal.bind.JsonTreeWriterTest.testEmptyWriter":313,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":333,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":76,"com.google.gson.JsonArrayTest.testDeepCopy":270,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":377,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":193,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":227,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":50,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":211,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":317,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":351,"com.google.gson.JsonPrimitiveTest.testEqualsDoesNotEquateStringAndNonStringTypes":288,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":46,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":22,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":233,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":337,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":4,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":332,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":162,"com.google.gson.JsonParserTest.testParseUnquotedStringArrayFails":301,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":24,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":410,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":368,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":197,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":254,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":151,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":121,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":107,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":389,"com.google.gson.functional.MapTest.testInterfaceTypeMap":106,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":262,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":9,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":35,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":207,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":382,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":339,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":236,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":144,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":60,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":29,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":8,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":165,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":71,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":161,"com.google.gson.LongSerializationPolicyTest.testStringLongSerialization":294,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":79,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":13,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":61,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":143,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":212,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":147,"com.google.gson.DefaultDateTypeAdapterTest.testFormattingInEnUs":274,"com.google.gson.internal.bind.JsonElementReaderTest.testSkipValue":302,"com.google.gson.internal.bind.JsonElementReaderTest.testStrings":307,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":356,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":234,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":133,"com.google.gson.JsonPrimitiveTest.testParsingStringAsNumber":292,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":393,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":80,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":55,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":170,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":164,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":395,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":417,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":360,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":101,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":347,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":131,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":139,"com.google.gson.functional.MapTest.testRawMapSerialization":109,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":217,"com.google.gson.JsonParserTest.testParseReader":296,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":37,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":65,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":117,"com.google.gson.JsonPrimitiveTest.testExponential":291,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":260,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":216,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":172,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":241,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":268,"com.google.gson.functional.PrimitiveTest.testByteSerialization":409,"com.google.gson.ObjectTypeAdapterTest.testSerialize":224,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":239,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":127,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":195,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":178,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":153,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":30,"com.google.gson.functional.MapTest.testMapWithQuotes":102,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":243,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":16,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":329,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":48,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":340,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":86,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":266,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":23,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":96,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":344,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":403,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":180,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":358,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":74,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":196,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":210,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":346,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":171,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":230,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":246,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":120,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":47,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":126,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":231,"com.google.gson.internal.LinkedHashTreeMapTest.testRemoveRootDoesNotDoubleUnlink":324,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":34,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":327,"com.google.gson.functional.ObjectTest.testNestedSerialization":66,"com.google.gson.JsonObjectTest.testAddingStringProperties":323,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":167,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":128,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":188,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":49,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":366,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":158,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":15,"com.google.gson.JsonParserTest.testParseUnquotedSingleWordStringFails":298,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":220,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":435,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":63,"com.google.gson.JsonPrimitiveTest.testBoolean":284,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":11,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":222,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":38,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":375,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":176,"com.google.gson.functional.CollectionTest.testSetSerialization":150,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":20,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":93,"com.google.gson.functional.StringTest.testStringValueSerialization":376,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":56,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":134,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":386,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":168,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":343,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":154,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":51,"com.google.gson.JsonStreamParserTest.testParseTwoStrings":281,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":311,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":331,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":31,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":357,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":240,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":436,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":174},"transformations":[{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"2cac0219-3e4e-11e6-a5ff-8d8f88deb3bf","method":{"position":"com.google.gson.Gson:719","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.lang.String json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467241198769/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (json == null) {\n                return null;\n            } \n            java.io.StringReader java.io.StringReader = new java.io.StringReader(json);\n            T T = ((T)(fromJson(reader, typeOfT)));\n            return target;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:313","type":"CtBinaryOperatorImpl","sourcecode":"(value) == null"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224],"tindex":"2cac503a-3e4e-11e6-a5ff-7598df4378f6","method":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:74","type":"CtMethodImpl","sourcecode":"private java.lang.reflect.Type getRuntimeTypeIfMoreSpecific(java.lang.reflect.Type type, java.lang.Object value) {\n    if (value == null) {\n        {\n            if ((value != null) && (((type == (java.lang.Object.java.lang.Object.java.lang.Class)) || (type instanceof java.lang.reflect.TypeVariable<?>)) || (type instanceof java.lang.Class<?>))) {\n                type = value.getClass();\n            } \n            return type;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467241198769/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[225],"tindex":"2cac774b-3e4e-11e6-a5ff-db18f6249f19","method":{"position":"com.google.gson.internal.bind.TypeAdapters:201","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467241198769/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:120","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonNull"},"failures":[],"tindex":"2cac774c-3e4e-11e6-a5ff-9364ee026b2c","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:808","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonNull) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467241198769/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (!(o instanceof java.util.Map.Entry)) {\n                return false;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n            if (node == null) {\n                return false;\n            } \n            removeInternal(node, true);\n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:274","type":"CtBinaryOperatorImpl","sourcecode":"target instanceof java.lang.String"},"failures":[4,5,6,10,11,14,15,16,17,226,18,21,227,228,229,22,230,231,232,44,233,234,48,235,236,237,238,239,240,241,72,242,243,74,244,245,246,247,248,80,81,82,83,106,108,249,113,250,251,252,253,254,255,256,257,157,258,158,259,260,261,262,164,165,182,183,184,263,194,195,264,196,197,199,265,266,205,216,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,223,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323],"tindex":"2cac9e5d-3e4e-11e6-a5ff-7bb5de196b16","method":{"position":"com.google.gson.JsonPrimitive:273","type":"CtMethodImpl","sourcecode":"private static boolean isPrimitiveOrString(java.lang.Object target) {\n    if (target instanceof java.lang.String) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467241198769/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (target instanceof java.lang.String) {\n                return true;\n            } \n            java.lang.Class<?> java.lang.Class<?> = target.getClass();\n            for (java.lang.Class<?> java.lang.Class<?> : com.google.gson.JsonPrimitive.com.google.gson.JsonPrimitive.java.lang.Class<?>[]) {\n                if (standardPrimitive.isAssignableFrom(classOfPrimitive)) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"target":"target"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:246","type":"CtVariableReadImpl","sourcecode":"unlink"},"failures":[324],"tindex":"2cac9e5e-3e4e-11e6-a5ff-5710e91c9d0f","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:245","type":"CtMethodImpl","sourcecode":"void removeInternal(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node, boolean unlink) {\n    if (unlink) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467241198769/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (unlink) {\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            if ((left != null) && (right != null)) {\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = (left.int) > (right.int) ? left.last() : right.first();\n                removeInternal(adjacent, false);\n                int int = 0;\n                left = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                if (left != null) {\n                    leftHeight = left.int;\n                    adjacent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left;\n                    left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                } \n                int int = 0;\n                right = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                if (right != null) {\n                    rightHeight = right.int;\n                    adjacent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                } \n                adjacent.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                replaceInParent(node, adjacent);\n                return ;\n            } else if (left != null) {\n                replaceInParent(node, left);\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } else if (right != null) {\n                replaceInParent(node, right);\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } else {\n                replaceInParent(node, null);\n            }\n            rebalance(originalParent, false);\n            (int)--;\n            (int)++;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"unlink":"unlink"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[0,1,325,2,3,7,8,9,12,13,15,16,17,18,326,19,20,21,227,327,328,329,22,23,230,24,25,26,27,28,29,30,31,32,35,330,43,44,233,45,46,47,48,235,331,236,237,332,238,333,334,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,335,336,64,65,66,337,67,68,69,70,71,241,72,338,242,339,340,341,243,74,244,342,343,344,345,346,347,75,348,349,350,351,76,352,353,354,355,356,357,77,245,78,358,246,359,360,361,79,247,362,81,84,85,86,87,88,89,90,91,92,93,94,95,96,363,97,98,99,100,101,102,103,104,364,105,106,365,107,108,366,109,110,367,111,112,113,114,115,116,117,118,368,119,120,121,122,123,124,125,126,127,128,129,130,131,369,370,371,372,373,132,374,375,376,133,134,135,136,137,377,138,139,140,141,142,143,144,145,146,147,148,149,150,151,255,378,152,153,154,155,156,157,158,379,261,380,262,159,381,382,160,161,162,163,166,167,168,169,383,170,171,384,385,172,173,174,175,176,177,178,179,386,180,181,182,183,184,185,263,387,186,187,388,389,390,391,392,188,393,394,189,395,396,397,398,399,400,401,402,403,404,405,190,406,407,408,409,410,411,412,191,413,414,192,415,193,416,198,417,200,201,418,202,419,420,421,422,423,424,425,203,204,205,206,207,208,426,427,428,209,210,211,212,213,429,430,431,214,215,221,222,223,432,433,434,435],"tindex":"2cacec7f-3e4e-11e6-a5ff-c168df495f6b","method":{"position":"com.google.gson.Gson:532","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467241198769/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467241198769/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (src == null) {\n                        {\n                            if (src == null) {\n                                {\n                                    java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n                                    toJson(src, typeOfSrc, writer);\n                                    return writer.toString();\n                                }\n                            } else {\n                                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467241198769/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                throw new java.lang.RuntimeException();\n                            }\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467241198769/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[239,240],"tindex":"2cad1290-3e4e-11e6-a5ff-9521bb7714ca","method":{"position":"com.google.gson.JsonObject:78","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.String value) {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467241198769/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            add(property, createJsonElement(value));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"2cad1291-3e4e-11e6-a5ff-73f92be580de","method":{"position":"com.google.gson.Gson:591","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        {\n            com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = getAdapter(com.google.gson.reflect.TypeToken.get(typeOfSrc));\n            boolean boolean = writer.isLenient();\n            writer.setLenient(true);\n            boolean boolean = writer.isHtmlSafe();\n            writer.setHtmlSafe(boolean);\n            boolean boolean = writer.getSerializeNulls();\n            writer.setSerializeNulls(boolean);\n            try {\n                ((com.google.gson.TypeAdapter<java.lang.Object>)(adapter)).write(writer, src);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            } finally {\n                writer.setLenient(oldLenient);\n                writer.setHtmlSafe(oldHtmlSafe);\n                writer.setSerializeNulls(oldSerializeNulls);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467241198769/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[0,2,23,26,30,31,225,364,366,422],"tindex":"2cad39a2-3e4e-11e6-a5ff-9fb1fb1e8918","method":{"position":"com.google.gson.stream.JsonWriter:490","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467241198769/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            writeDeferredName();\n            java.lang.String java.lang.String = value.toString();\n            if ((!(boolean)) && (((string.equals(\"-Infinity\")) || (string.equals(\"Infinity\"))) || (string.equals(\"NaN\")))) {\n                throw new java.lang.IllegalArgumentException((\"Numeric values must be finite, but was \" + value));\n            } \n            beforeValue(false);\n            java.io.Writer.append(string);\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:565","type":"CtBinaryOperatorImpl","sourcecode":"(indent) == null"},"failures":[44,89,90,91,92,93,94,95,96,98,218,436,437],"tindex":"2cad39a3-3e4e-11e6-a5ff-05c693a23d31","method":{"position":"com.google.gson.stream.JsonWriter:212","type":"CtMethodImpl","sourcecode":"public final void setIndent(java.lang.String indent) {\n    if (indent == null) {\n        {\n            if ((indent.length()) == 0) {\n                com.google.gson.stream.JsonWriter.this.java.lang.String = null;\n                com.google.gson.stream.JsonWriter.this.java.lang.String = \":\";\n            } else {\n                com.google.gson.stream.JsonWriter.this.java.lang.String = indent;\n                com.google.gson.stream.JsonWriter.this.java.lang.String = \": \";\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467241198769/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"indent"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[438],"tindex":"2cad39a4-3e4e-11e6-a5ff-550a47ddcbec","method":{"position":"com.google.gson.JsonObject:100","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Boolean value) {\n    if (property == null) {\n        {\n            add(property, createJsonElement(value));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467241198769/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1413","type":"CtVariableReadImpl","sourcecode":"throwOnEof"},"failures":[],"tindex":"2cad60b5-3e4e-11e6-a5ff-571c9d70b99b","method":{"position":"com.google.gson.stream.JsonReader:1331","type":"CtMethodImpl","sourcecode":"private int nextNonWhitespace(boolean throwOnEof) throws java.io.IOException {\n    if (throwOnEof) {\n        {\n            char[] char[] = com.google.gson.stream.JsonReader.this.char[];\n            int int = int;\n            int int = int;\n            while (true) {\n                if (p == l) {\n                    int = p;\n                    if (!(fillBuffer(1))) {\n                        break;\n                    } \n                    p = int;\n                    l = int;\n                } \n                int int = buffer[(p++)];\n                if (c == '\\n') {\n                    (int)++;\n                    int = p;\n                    continue;\n                } else if (((c == ' ') || (c == '\\r')) || (c == '\\t')) {\n                    continue;\n                } \n                if (c == '/') {\n                    int = p;\n                    if (p == l) {\n                        (int)--;\n                        boolean boolean = fillBuffer(2);\n                        (int)++;\n                        if (!charsLoaded) {\n                            return c;\n                        } \n                    } \n                    checkLenient();\n                    char char = buffer[int];\n                    switch (peek) {\n                        case '*' :\n                            (int)++;\n                            if (!(skipTo(\"*/\"))) {\n                                throw syntaxError(\"Unterminated comment\");\n                            } \n                            p = (int) + 2;\n                            l = int;\n                            continue;\n                        case '/' :\n                            (int)++;\n                            skipToEndOfLine();\n                            p = int;\n                            l = int;\n                            continue;\n                        default :\n                            return c;\n                    }\n                } else if (c == '#') {\n                    int = p;\n                    checkLenient();\n                    skipToEndOfLine();\n                    p = int;\n                    l = int;\n                } else {\n                    int = p;\n                    return c;\n                }\n            }\n            if (throwOnEof) {\n                throw new java.io.EOFException(((((\"End of input\" + \" at line \") + (getLineNumber())) + \" column \") + (getColumnNumber())));\n            } else {\n                return -1;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467241198769/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"throwOnEof":"throwOnEof"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"2cad60b6-3e4e-11e6-a5ff-ebc08d97aa4e","method":{"position":"com.google.gson.Gson:532","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467241198769/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467241198769/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (src == null) {\n                        {\n                            if (src == null) {\n                                {\n                                    java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n                                    toJson(src, typeOfSrc, writer);\n                                    return writer.toString();\n                                }\n                            } else {\n                                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467241198769/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                throw new java.lang.RuntimeException();\n                            }\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467241198769/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:233","type":"CtBinaryOperatorImpl","sourcecode":"annotation != null"},"failures":[],"tindex":"2cad87c7-3e4e-11e6-a5ff-5d4554186d08","method":{"position":"com.google.gson.internal.Excluder:232","type":"CtMethodImpl","sourcecode":"private boolean isValidSince(com.google.gson.annotations.Since annotation) {\n    if (annotation != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467241198769/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (annotation != null) {\n                double double = annotation.value();\n                if (annotationVersion > (double)) {\n                    return false;\n                } \n            } \n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"2cad87c8-3e4e-11e6-a5ff-c715bb31c1a6","method":{"position":"com.google.gson.JsonParser:44","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement parse(java.lang.String json) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467241198769/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            return parse(new java.io.StringReader(json));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:127","type":"CtInvocationImpl","sourcecode":"raw.isInterface()"},"failures":[],"tindex":"2cad87c9-3e4e-11e6-a5ff-4370576a9206","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:125","type":"CtMethodImpl","sourcecode":"private java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> getBoundFields(com.google.gson.Gson context, com.google.gson.reflect.TypeToken<?> type, java.lang.Class<?> raw) {\n    if (raw.isInterface()) {\n        {\n            java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> = new java.util.LinkedHashMap<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField>();\n            if (raw.isInterface()) {\n                return result;\n            } \n            java.lang.reflect.Type java.lang.reflect.Type = type.getType();\n            while (raw != (java.lang.Object.java.lang.Object.java.lang.Class)) {\n                java.lang.reflect.Field[] java.lang.reflect.Field[] = raw.getDeclaredFields();\n                for (java.lang.reflect.Field java.lang.reflect.Field : fields) {\n                    boolean boolean = excludeField(field, true);\n                    boolean boolean = excludeField(field, false);\n                    if ((!serialize) && (!deserialize)) {\n                        continue;\n                    } \n                    field.setAccessible(true);\n                    java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, field.getGenericType());\n                    com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = createBoundField(context, field, getFieldName(field), com.google.gson.reflect.TypeToken.get(fieldType), serialize, deserialize);\n                    com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = result.put(boundField.java.lang.String, boundField);\n                    if (previous != null) {\n                        throw new java.lang.IllegalArgumentException(((declaredType + \" declares multiple JSON fields named \") + (previous.java.lang.String)));\n                    } \n                }\n                type = com.google.gson.reflect.TypeToken.get(com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, raw.getGenericSuperclass()));\n                raw = type.getRawType();\n            }\n            return result;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467241198769/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"raw"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[],"tindex":"2cad87ca-3e4e-11e6-a5ff-2f3b7ee3ee41","method":{"position":"com.google.gson.Gson:532","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467241198769/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467241198769/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (src == null) {\n                        {\n                            if (src == null) {\n                                {\n                                    java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n                                    toJson(src, typeOfSrc, writer);\n                                    return writer.toString();\n                                }\n                            } else {\n                                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467241198769/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                throw new java.lang.RuntimeException();\n                            }\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467241198769/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:94","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.Class"},"failures":[],"tindex":"2cadaedb-3e4e-11e6-a5ff-df93b1ce1cc1","method":{"position":"com.google.gson.internal.ConstructorConstructor:128","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nprivate <T>com.google.gson.internal.ObjectConstructor<T> newDefaultImplementationConstructor(final java.lang.reflect.Type type, java.lang.Class<? super T> rawType) {\n    if (type instanceof java.lang.Class) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467241198769/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (java.util.Collection.java.util.Collection.java.lang.Class.isAssignableFrom(rawType)) {\n                if (java.util.SortedSet.java.util.SortedSet.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.TreeSet<java.lang.Object>()));\n                        }\n                    };\n                } else if (java.util.EnumSet.java.util.EnumSet.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        @java.lang.SuppressWarnings(value = \"rawtypes\")\n                        public T construct() {\n                            if (type instanceof java.lang.reflect.ParameterizedType) {\n                                java.lang.reflect.Type java.lang.reflect.Type = ((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0];\n                                if (elementType instanceof java.lang.Class) {\n                                    return ((T)(java.util.EnumSet.noneOf(((java.lang.Class)(elementType)))));\n                                } else {\n                                    throw new com.google.gson.JsonIOException((\"Invalid EnumSet type: \" + (type.toString())));\n                                }\n                            } else {\n                                throw new com.google.gson.JsonIOException((\"Invalid EnumSet type: \" + (type.toString())));\n                            }\n                        }\n                    };\n                } else if (java.util.Set.java.util.Set.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedHashSet<java.lang.Object>()));\n                        }\n                    };\n                } else if (java.util.Queue.java.util.Queue.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedList<java.lang.Object>()));\n                        }\n                    };\n                } else {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.ArrayList<java.lang.Object>()));\n                        }\n                    };\n                }\n            } \n            if (java.util.Map.java.util.Map.java.lang.Class.isAssignableFrom(rawType)) {\n                if (java.util.SortedMap.java.util.SortedMap.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.TreeMap<java.lang.Object, java.lang.Object>()));\n                        }\n                    };\n                } else if ((type instanceof java.lang.reflect.ParameterizedType) && (!(java.lang.String.java.lang.String.java.lang.Class.isAssignableFrom(com.google.gson.reflect.TypeToken.get(((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0]).getRawType())))) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedHashMap<java.lang.Object, java.lang.Object>()));\n                        }\n                    };\n                } else {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new com.google.gson.internal.LinkedTreeMap<java.lang.String, java.lang.Object>()));\n                        }\n                    };\n                }\n            } \n            return null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"2cadd5ec-3e4e-11e6-a5ff-372591dcf306","method":{"position":"com.google.gson.Gson:871","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467241198769/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (json == null) {\n                return null;\n            } \n            return ((T)(fromJson(new com.google.gson.internal.bind.JsonTreeReader(json), typeOfT)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"2cadd5ed-3e4e-11e6-a5ff-4b94031f68f0","method":{"position":"com.google.gson.Gson:285","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            float float = value.floatValue();\n            checkValidFloatingPoint(floatValue);\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467241198769/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:109","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonPrimitive"},"failures":[],"tindex":"2cadd5ee-3e4e-11e6-a5ff-d37ae2c5e5da","method":{"position":"com.google.gson.reflect.TypeToken:283","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic final boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonPrimitive) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467241198769/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (o instanceof com.google.gson.reflect.TypeToken<?>) && (com.google.gson.internal.$Gson$Types.equals(java.lang.reflect.Type, ((com.google.gson.reflect.TypeToken<?>)(o)).java.lang.reflect.Type));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:115","type":"CtInvocationImpl","sourcecode":"primitive.isNumber()"},"failures":[],"tindex":"2cadfcff-3e4e-11e6-a5ff-a7121b5e2583","method":{"position":"com.google.gson.JsonPrimitive:93","type":"CtMethodImpl","sourcecode":"void setValue(java.lang.Object primitive) {\n    if (primitive.isNumber()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467241198769/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (primitive instanceof java.lang.Character) {\n                char char = ((java.lang.Character)(primitive)).charValue();\n                com.google.gson.JsonPrimitive.this.java.lang.Object = java.lang.String.valueOf(c);\n            } else {\n                com.google.gson.internal.$Gson$Preconditions.checkArgument(((primitive instanceof java.lang.Number) || (com.google.gson.JsonPrimitive.isPrimitiveOrString(primitive))));\n                com.google.gson.JsonPrimitive.this.java.lang.Object = primitive;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"primitive"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:554","type":"CtBinaryOperatorImpl","sourcecode":"(datePattern != null) && (!(\"\".equals(datePattern.trim())))"},"failures":[],"tindex":"2cadfd00-3e4e-11e6-a5ff-3b0adef818b3","method":{"position":"com.google.gson.GsonBuilder:551","type":"CtMethodImpl","sourcecode":"private void addTypeAdaptersForDate(java.lang.String datePattern, int dateStyle, int timeStyle, java.util.List<com.google.gson.TypeAdapterFactory> factories) {\n    if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n        {\n            com.google.gson.DefaultDateTypeAdapter com.google.gson.DefaultDateTypeAdapter;\n            if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n                dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(datePattern);\n            } else if ((dateStyle != (java.text.DateFormat.java.text.DateFormat.int)) && (timeStyle != (java.text.DateFormat.java.text.DateFormat.int))) {\n                dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(dateStyle , timeStyle);\n            } else {\n                return ;\n            }\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.util.Date.java.util.Date.java.lang.Class), dateTypeAdapter));\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Timestamp.java.sql.Timestamp.java.lang.Class), dateTypeAdapter));\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Date.java.sql.Date.java.lang.Class), dateTypeAdapter));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467241198769/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"datePattern":"datePattern"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"2cadfd01-3e4e-11e6-a5ff-8fd354d65c09","method":{"position":"com.google.gson.Gson:532","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467241198769/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467241198769/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (src == null) {\n                        {\n                            if (src == null) {\n                                {\n                                    java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n                                    toJson(src, typeOfSrc, writer);\n                                    return writer.toString();\n                                }\n                            } else {\n                                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467241198769/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                throw new java.lang.RuntimeException();\n                            }\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467241198769/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":25,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
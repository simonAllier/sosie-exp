{"failureDictionary":{"com.google.gson.JsonStreamParserTest.testNoSideEffectForHasNext":112,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":90,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":358,"com.google.gson.functional.StringTest.testStringValueDeserialization":586,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":62,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":663,"com.google.gson.JsonPrimitiveTest.testDeepCopy":133,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":549,"com.google.gson.internal.LinkedHashTreeMapTest.testIterationOrder":479,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":636,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":260,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":530,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":63,"com.google.gson.internal.bind.JsonTreeWriterTest.testPrematureClose":160,"com.google.gson.MixedStreamTest.testWriteLenient":456,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":509,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":50,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":85,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":230,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":238,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":508,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":668,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":273,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":443,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":207,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":643,"com.google.gson.internal.bind.JsonElementReaderTest.testStrictNansAndInfinities":153,"com.google.gson.JsonObjectTest.testAddingNullPropertyValue":728,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":497,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":688,"com.google.gson.JsonParserTest.testParseUnquotedMultiWordStringFails":140,"com.google.gson.functional.ObjectTest.testSingletonLists":195,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":274,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":318,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":359,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":631,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":256,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":23,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":41,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":604,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":556,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":518,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":462,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":670,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":695,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":594,"com.google.gson.DefaultDateTypeAdapterTest.testDatePattern":103,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":30,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":329,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":664,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":571,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":94,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":625,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":37,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":570,"com.google.gson.functional.EnumTest.testEnumCaseMapping":442,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":357,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":459,"com.google.gson.functional.JsonTreeTest.testToJsonTree":57,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":624,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":331,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":53,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":6,"com.google.gson.JsonObjectTest.testEqualsNonEmptyObject":259,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreBehindInVersion":731,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":48,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":272,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":190,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":613,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":547,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":632,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":440,"com.google.gson.internal.LinkedTreeMapTest.testLargeSetOfRandomKeys":723,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":368,"com.google.gson.functional.ObjectTest.testNullDeserialization":524,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":284,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":592,"com.google.gson.JsonPrimitiveTest.testParsingStringAsBoolean":122,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":515,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":178,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":428,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":637,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":293,"com.google.gson.internal.bind.JsonElementReaderTest.testLenientNansAndInfinities":150,"com.google.gson.internal.LinkedTreeMapTest.testContainsNonComparableKeyReturnsFalse":724,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":36,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":246,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":521,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":173,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":205,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":43,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":328,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":355,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":675,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":674,"com.google.gson.JsonParserTest.testParseString":142,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":555,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":191,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":420,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":414,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":47,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":679,"com.google.gson.DefaultDateTypeAdapterTest.testFormatUsesDefaultTimezone":107,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":296,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":395,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":317,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":651,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":64,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":566,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":661,"com.google.gson.functional.StreamingTypeAdaptersTest.testFromJsonTree":29,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":350,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":546,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":82,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":162,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":495,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":221,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":421,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":585,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":662,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":200,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":391,"com.google.gson.JsonPrimitiveTest.testEqualsAcrossTypes":137,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":143,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":386,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":512,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":264,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":406,"com.google.gson.internal.LinkedHashTreeMapTest.testEmptyStringValues":478,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":573,"com.google.gson.metrics.PerformanceTest.testDummy":708,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":502,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":265,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":269,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":494,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":11,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":531,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":575,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":74,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":321,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":312,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":491,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":245,"com.google.gson.JsonArrayTest.testEqualsNonEmptyArray":257,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":506,"com.google.gson.functional.CollectionTest.testSetDeserialization":602,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":208,"com.google.gson.functional.EnumTest.testEnumSet":251,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":290,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":607,"com.google.gson.JsonStreamParserTest.testIterator":113,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":654,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":270,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":10,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithNestedWildcards":712,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":334,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":543,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":198,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":183,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":449,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":665,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":493,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":671,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":34,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":300,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":424,"com.google.gson.internal.LinkedHashTreeMapTest.testContainsNullKeyIsAlwaysFalse":481,"com.google.gson.functional.MapTest.testHashMapDeserialization":560,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":634,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":598,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":552,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":387,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":684,"com.google.gson.MixedStreamTest.testReadNulls":705,"com.google.gson.DefaultDateTypeAdapterTest.testParsingDatesFormattedWithSystemLocale":105,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":343,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":469,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":80,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":535,"com.google.gson.functional.MapTest.testSortedMap":572,"com.google.gson.functional.MapTest.testMapSerialization":336,"com.google.gson.internal.bind.JsonElementReaderTest.testObject":157,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":438,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":70,"com.google.gson.JsonPrimitiveTest.testByteEqualsShort":134,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":659,"com.google.gson.JsonPrimitiveTest.testByteEqualsBigInteger":123,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":615,"com.google.gson.functional.MapTest.testSerializeMaps":213,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":375,"com.google.gson.functional.MapTest.testComplexKeysSerialization":338,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":606,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":61,"com.google.gson.JsonPrimitiveTest.testLongEqualsBigInteger":125,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":161,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":400,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":286,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":694,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":250,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":581,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":299,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":693,"com.google.gson.internal.bind.JsonElementReaderTest.testWrongType":154,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":174,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":211,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":261,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":523,"com.google.gson.functional.MapTest.testStringKeyDeserialization":574,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithBasicWildcards":714,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":617,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":15,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":432,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":340,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":640,"com.google.gson.functional.PrettyPrintingTest.testMap":209,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":378,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":635,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":233,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":303,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":470,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":533,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":461,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":618,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":363,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":587,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":175,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":202,"com.google.gson.functional.MapTest.testMapSerializationEmpty":339,"com.google.gson.functional.CollectionTest.testQueueSerialization":367,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":655,"com.google.gson.functional.MapTest.testMapOfMapSerialization":216,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":412,"com.google.gson.JavaSerializationTest.testMapIsSerializable":719,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":548,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":600,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":229,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":417,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":24,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictBoxedNansAndInfinities":166,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":360,"com.google.gson.functional.FieldNamingTest.testIdentity":376,"com.google.gson.JsonStreamParserTest.testCallingNextBeyondAvailableInput":110,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":12,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":275,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":525,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":56,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":87,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":194,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":263,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":626,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":95,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":83,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":361,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":415,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":576,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":554,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":452,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":544,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":228,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":310,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":327,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":558,"com.google.gson.functional.MapTest.testMapSubclassSerialization":333,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":431,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":222,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":499,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":608,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":379,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":444,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":454,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":649,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":65,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":539,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":683,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":532,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":182,"com.google.gson.functional.EnumTest.testEnumSubclass":253,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":418,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":463,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":517,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":402,"com.google.gson.internal.bind.JsonElementReaderTest.testArray":151,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":244,"com.google.gson.GsonBuilderTest.testRegisterTypeAdapterForCoreType":717,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":667,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":14,"com.google.gson.JsonPrimitiveTest.testShortEqualsInteger":129,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":578,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":627,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":342,"com.google.gson.JsonPrimitiveTest.testByteEqualsLong":116,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":652,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":577,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":2,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":451,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":612,"com.google.gson.internal.LinkedTreeMapTest.testEqualsAndHashCode":726,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":514,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":656,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":413,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":487,"com.google.gson.stream.JsonWriterTest.testObjectsInArrays":711,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":323,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":507,"com.google.gson.MixedStreamTest.testWriteNulls":109,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":559,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":243,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":583,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":393,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":285,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":496,"com.google.gson.CommentsTest.testParseComments":702,"com.google.gson.JsonObjectTest.testReadPropertyWithEmptyStringName":172,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":19,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":196,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":689,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":242,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":616,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":666,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":69,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":217,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":362,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":503,"com.google.gson.MixedStreamTest.testReadInvalidState":703,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":204,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":271,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":325,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":430,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":71,"com.google.gson.internal.bind.JsonElementReaderTest.testEarlyClose":152,"com.google.gson.JsonParserTest.testParseMixedArray":145,"com.google.gson.DefaultDateTypeAdapterTest.testParsingDatesFormattedWithUsLocale":108,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":405,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":0,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":619,"com.google.gson.JsonPrimitiveTest.testDoubleEqualsBigDecimal":118,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithTypeParameters":713,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":240,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAheadInVersion":729,"com.google.gson.internal.bind.JsonTreeWriterTest.testWriteAfterClose":167,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":409,"com.google.gson.JsonArrayTest.testRemove":101,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":227,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":315,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":425,"com.google.gson.functional.MapTest.testMapDeserialization":565,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":611,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":311,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":212,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":58,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":121,"com.google.gson.internal.bind.JsonElementReaderTest.testStringsFromNumbers":156,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":687,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":267,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":335,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":249,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":439,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":582,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeMap":721,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":55,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":692,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":538,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":292,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":297,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":345,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":380,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":3,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":304,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":498,"com.google.gson.internal.bind.JsonElementReaderTest.testNumbersFromStrings":155,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":341,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":351,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":210,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":337,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":97,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":52,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":623,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":21,"com.google.gson.functional.PrimitiveTest.testShortSerialization":429,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":472,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":669,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictNansAndInfinities":164,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":281,"com.google.gson.JsonParserTest.testParseEmptyString":146,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":650,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":422,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":305,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":633,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":372,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":93,"com.google.gson.internal.LinkedTreeMapTest.testEmptyStringValues":725,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":232,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":352,"com.google.gson.internal.LinkedTreeMapTest.testPutOverrides":722,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":562,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":646,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":68,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":433,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":66,"com.google.gson.DefaultDateTypeAdapterTest.testFormattingInFr":106,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":170,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":553,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":691,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":168,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":707,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":436,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":678,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":188,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":262,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":13,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":201,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":489,"com.google.gson.JsonPrimitiveTest.testStringsAndChar":130,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":171,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":301,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":445,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":673,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":8,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":16,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":653,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":528,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":511,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":254,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":347,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":371,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":236,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":541,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":377,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":17,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":247,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":316,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":471,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":639,"com.google.gson.internal.LinkedHashTreeMapTest.testClear":476,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":81,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":307,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":473,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":551,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":4,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":596,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":628,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":84,"com.google.gson.JsonArrayTest.testSet":99,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":416,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":434,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":383,"com.google.gson.JsonPrimitiveTest.testEquals":132,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":248,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":252,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":91,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":72,"com.google.gson.functional.MapTest.testGeneralMapField":60,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":510,"com.google.gson.internal.bind.JsonElementReaderTest.testNumbers":158,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":390,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":681,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":76,"com.google.gson.DefaultDateTypeAdapterTest.testDateSerialization":102,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":397,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":401,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":203,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":218,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":42,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":354,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":404,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":423,"com.google.gson.MixedStreamTest.testReadMixedStreamed":706,"com.google.gson.ObjectTypeAdapterTest.testDeserializeNullValue":715,"com.google.gson.JsonObjectTest.testDeepCopy":176,"com.google.gson.internal.bind.JsonElementReaderTest.testBooleans":148,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":410,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":542,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":567,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":369,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":450,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":621,"com.google.gson.stream.JsonWriterTest.testNonFiniteDoubles":484,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":501,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":657,"com.google.gson.internal.bind.JsonTreeWriterTest.testEmptyWriter":165,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":280,"com.google.gson.JavaSerializationTest.testNumberIsSerializable":718,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":492,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":314,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":568,"com.google.gson.JsonArrayTest.testDeepCopy":100,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":366,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":561,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":20,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":435,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":192,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":447,"com.google.gson.stream.JsonWriterTest.testArraysInObjects":710,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":647,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":169,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":313,"com.google.gson.internal.LinkedHashTreeMapTest.testEqualsAndHashCode":482,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":584,"com.google.gson.JsonPrimitiveTest.testEqualsDoesNotEquateStringAndNonStringTypes":131,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":276,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":536,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":599,"com.google.gson.JsonPrimitiveTest.testFloatEqualsDouble":124,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":690,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":26,"com.google.gson.functional.ObjectTest.testNestedDeserialization":529,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":31,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":295,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":685,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":1,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":279,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":680,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":382,"com.google.gson.JsonParserTest.testParseUnquotedStringArrayFails":147,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":485,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":569,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":588,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":181,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":427,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":346,"com.google.gson.JavaSerializationTest.testListIsSerializable":720,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":67,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":89,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":370,"com.google.gson.functional.ObjectTest.testNullSerialization":291,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerialization":139,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":349,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":595,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":563,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":219,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":403,"com.google.gson.functional.MapTest.testInterfaceTypeMap":59,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":614,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":77,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":266,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":629,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":187,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":441,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":381,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":580,"com.google.gson.MixedStreamTest.testReadClosed":704,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":302,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":35,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":641,"com.google.gson.JsonPrimitiveTest.testIntegerEqualsLong":127,"com.google.gson.MixedStreamTest.testWriteClosed":458,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":235,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":686,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":288,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":488,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":557,"com.google.gson.internal.LinkedHashTreeMapTest.testPutNonComparableKeyFails":480,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":184,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":179,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":79,"com.google.gson.LongSerializationPolicyTest.testStringLongSerialization":138,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":241,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":298,"com.google.gson.stream.JsonWriterTest.testLongs":709,"com.google.gson.JsonPrimitiveTest.testShortEqualsLong":120,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":326,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":268,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":289,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":234,"com.google.gson.JsonPrimitiveTest.testShortEqualsBigInteger":115,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":697,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":660,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":448,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":579,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":237,"com.google.gson.DefaultDateTypeAdapterTest.testFormattingInEnUs":104,"com.google.gson.internal.bind.JsonElementReaderTest.testSkipValue":149,"com.google.gson.internal.bind.JsonElementReaderTest.testStrings":159,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":319,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":32,"com.google.gson.JsonPrimitiveTest.testParsingStringAsNumber":136,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":225,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":682,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":408,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":54,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":540,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":287,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":388,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":78,"com.google.gson.internal.LinkedHashTreeMapTest.testPutOverrides":475,"com.google.gson.functional.CollectionTest.testQueueDeserialization":605,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":411,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":658,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":591,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":437,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":324,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":698,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":214,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":522,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":309,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":356,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":527,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":231,"com.google.gson.functional.MapTest.testRawMapSerialization":220,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":453,"com.google.gson.JsonParserTest.testParseReader":141,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":603,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":550,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":189,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":199,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":344,"com.google.gson.JsonPrimitiveTest.testExponential":135,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":75,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":474,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":96,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":40,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":98,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":392,"com.google.gson.functional.PrimitiveTest.testByteSerialization":426,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":38,"com.google.gson.ObjectTypeAdapterTest.testSerialize":255,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":353,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":638,"com.google.gson.JsonPrimitiveTest.testEqualsIntegerAndBigInteger":117,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":86,"com.google.gson.JsonPrimitiveTest.testFloatEqualsBigDecimal":114,"com.google.gson.JsonPrimitiveTest.testByteEqualsInteger":126,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":396,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":373,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":185,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":589,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":700,"com.google.gson.functional.MapTest.testMapWithQuotes":215,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":45,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":644,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":590,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":9,"com.google.gson.JsonObjectTest.testEqualsOnEmptyObject":258,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":620,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":25,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":33,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":676,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":44,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":206,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":92,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":180,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":526,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":332,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":306,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":419,"com.google.gson.functional.ObjectTest.testEmptyStringDeserialization":516,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":399,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":513,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":322,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":46,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":88,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":308,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":446,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":672,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":466,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":601,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":610,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":27,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":51,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":389,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":348,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":277,"com.google.gson.JsonPrimitiveTest.testIntegerEqualsBigInteger":128,"com.google.gson.internal.LinkedHashTreeMapTest.testContainsNonComparableKeyReturnsFalse":477,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":699,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":223,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAtSameVersion":730,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":534,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":28,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":630,"com.google.gson.internal.LinkedHashTreeMapTest.testRemoveRootDoesNotDoubleUnlink":483,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":22,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":519,"com.google.gson.JsonObjectTest.testAddingStringProperties":177,"com.google.gson.functional.ObjectTest.testNestedSerialization":294,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":384,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":224,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":407,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":593,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":282,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":467,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":73,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":7,"com.google.gson.JsonParserTest.testParseUnquotedSingleWordStringFails":144,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":457,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":464,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":197,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":504,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":677,"com.google.gson.JsonPrimitiveTest.testBoolean":119,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":5,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":500,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":545,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":460,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":642,"com.google.gson.GsonBuilderTest.testCreatingMoreThanOnce":701,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":520,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":537,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":696,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":364,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":468,"com.google.gson.functional.CollectionTest.testSetSerialization":239,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":622,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":18,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":330,"com.google.gson.functional.StringTest.testStringValueSerialization":365,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":193,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":226,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":486,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":597,"com.google.gson.MixedStreamTest.testWriteInvalidState":455,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":609,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":465,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":645,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":398,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":648,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":385,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":49,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":374,"com.google.gson.ObjectTypeAdapterTest.testDeserialize":716,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":283,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":727,"com.google.gson.JsonStreamParserTest.testParseTwoStrings":111,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":505,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":163,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":278,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":186,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":320,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":39,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":564,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":394,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":490},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:578","type":"CtBinaryOperatorImpl","sourcecode":"root == null"},"failures":[0],"tindex":"7ece59f7-3e7f-11e6-b913-9b41d8349685","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:401","type":"CtMethodImpl","sourcecode":"private void rotateLeft(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root == null) {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivotLeft;\n            if (pivotLeft != null) {\n                pivotLeft.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            } \n            replaceInParent(root, pivot);\n            pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot;\n            root.int = (java.lang.Math.max((left != null ? left.int : 0), (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n            pivot.int = (java.lang.Math.max(root.int, (pivotRight != null ? pivotRight.int : 0))) + 1;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649231/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"root"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:94","type":"CtBinaryOperatorImpl","sourcecode":"primitive instanceof java.lang.Character"},"failures":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178],"tindex":"7ecea818-3e7f-11e6-b913-5931ebec92a1","method":{"position":"com.google.gson.JsonPrimitive:93","type":"CtMethodImpl","sourcecode":"void setValue(java.lang.Object primitive) {\n    if (primitive instanceof java.lang.Character) {\n        {\n            if (primitive instanceof java.lang.Character) {\n                char char = ((java.lang.Character)(primitive)).charValue();\n                com.google.gson.JsonPrimitive.this.java.lang.Object = java.lang.String.valueOf(c);\n            } else {\n                com.google.gson.internal.$Gson$Preconditions.checkArgument(((primitive instanceof java.lang.Number) || (com.google.gson.JsonPrimitive.isPrimitiveOrString(primitive))));\n                com.google.gson.JsonPrimitive.this.java.lang.Object = primitive;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649231/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"primitive"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:94","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.Class"},"failures":[2,179,4,7,9,19,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,59,218,219,60,220,221,62,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,78,79,243,80,244,245,246,85,247,248,249,250,251,252,93,253,254,255,256],"tindex":"7ececf29-3e7f-11e6-b913-69aef57355bc","method":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:74","type":"CtMethodImpl","sourcecode":"private java.lang.reflect.Type getRuntimeTypeIfMoreSpecific(java.lang.reflect.Type type, java.lang.Object value) {\n    if (value instanceof java.lang.Class<?>) {\n        {\n            if (type instanceof java.lang.Class) {\n                {\n                    if ((value != null) && (((type == (java.lang.Object.java.lang.Object.java.lang.Class)) || (type instanceof java.lang.reflect.TypeVariable<?>)) || (type instanceof java.lang.Class<?>))) {\n                        type = value.getClass();\n                    } \n                    return type;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649231/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649231/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:109","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonPrimitive"},"failures":[43,257,258,259],"tindex":"7ececf2a-3e7f-11e6-b913-d11b85e51a3c","method":{"position":"com.google.gson.JsonObject:186","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonPrimitive) {\n        {\n            return (o == (com.google.gson.JsonObject.this)) || ((o instanceof com.google.gson.JsonObject) && (((com.google.gson.JsonObject)(o)).com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.equals(com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649231/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.TreeTypeAdapter:55","type":"CtInvocationImpl","sourcecode":"value.isJsonNull()"},"failures":[1,2,3,4,5,6,27,30,54,55,56,57,59,60,62,78,79,80,81,82,85,86,88,89,90,96,97,98,160,161,162,163,164,166,167,168,169,170,171],"tindex":"7ecef63b-3e7f-11e6-b913-4b6200478015","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:75","type":"CtMethodImpl","sourcecode":"private void put(com.google.gson.JsonElement value) {\n    if (value.isJsonNull()) {\n        {\n            if ((java.lang.String) != null) {\n                if ((!(value.isJsonNull())) || (getSerializeNulls())) {\n                    com.google.gson.JsonObject com.google.gson.JsonObject = ((com.google.gson.JsonObject)(peek()));\n                    object.add(java.lang.String, value);\n                } \n                java.lang.String = null;\n            } else if (java.util.List<com.google.gson.JsonElement>.isEmpty()) {\n                com.google.gson.JsonElement = value;\n            } else {\n                com.google.gson.JsonElement com.google.gson.JsonElement = peek();\n                if (element instanceof com.google.gson.JsonArray) {\n                    ((com.google.gson.JsonArray)(element)).add(value);\n                } else {\n                    throw new java.lang.IllegalStateException();\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649231/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:430","type":"CtFieldReadImpl","sourcecode":"serializeNulls"},"failures":[260,261,262,263,264,1,2,3,265,179,266,4,5,267,268,6,7,9,10,14,15,16,18,19,20,22,24,25,26,180,27,181,182,183,269,270,184,185,186,271,272,187,273,274,30,31,275,276,277,33,34,278,35,36,279,37,280,281,282,192,283,284,285,286,287,193,39,194,195,196,288,289,290,291,197,292,293,198,199,294,295,200,296,297,201,298,40,41,299,300,301,42,302,44,303,45,46,48,304,49,305,306,307,308,309,202,310,311,312,313,314,315,316,317,318,319,320,321,50,203,322,51,323,324,325,326,52,327,328,54,55,56,57,204,205,206,207,208,329,209,210,211,330,331,212,332,58,333,213,334,335,215,216,336,337,217,59,218,219,60,220,338,339,221,340,62,341,342,343,344,345,346,347,348,349,350,351,352,222,223,353,224,354,355,356,357,358,359,360,361,362,363,364,365,225,226,227,228,229,366,230,231,232,233,367,234,235,368,236,237,238,369,239,370,68,371,372,373,374,375,376,71,73,377,76,378,77,379,380,381,240,241,382,242,78,79,383,384,385,386,387,388,389,390,391,392,393,394,395,243,396,397,398,399,400,80,81,82,244,83,401,245,246,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,85,86,87,88,89,437,438,439,440,250,251,252,93,253,441,254,442,443,444,445,446,447,448,449,94,95,450,451,452,96,97,98,453,454,109,455,456,457,458,459,460,143,461,462,463,161,173,178,464],"tindex":"7ecef63c-3e7f-11e6-b913-474e8e459563","method":{"position":"com.google.gson.stream.JsonWriter:268","type":"CtMethodImpl","sourcecode":"public final void setSerializeNulls(boolean serializeNulls) {\n    if (serializeNulls) {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = serializeNulls;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649231/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeNulls":"serializeNulls"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:537","type":"CtFieldReadImpl","sourcecode":"lenient"},"failures":[260,261,262,263,264,1,2,3,265,179,266,4,5,267,268,6,7,9,10,14,15,16,18,19,20,22,24,25,26,180,27,181,182,183,269,270,184,185,186,271,272,187,273,274,30,31,275,276,277,33,34,278,35,36,279,37,280,281,282,192,283,284,285,286,287,193,38,39,194,195,196,288,289,465,290,291,197,292,293,198,199,294,295,200,296,297,201,298,40,41,299,466,300,301,42,302,44,303,45,46,48,304,49,305,306,307,308,309,202,310,311,312,313,314,315,316,317,318,319,320,321,50,203,322,51,323,324,325,326,52,327,328,54,55,56,57,204,205,206,207,208,329,209,210,211,330,331,212,332,58,333,213,334,335,214,215,216,336,337,217,59,218,219,60,467,220,338,339,221,340,62,341,342,343,344,345,347,348,349,350,351,352,222,223,353,224,354,355,356,357,358,359,360,361,362,363,364,365,225,226,227,228,229,366,230,231,232,233,367,234,235,368,236,237,238,369,239,370,68,371,372,373,374,375,376,71,73,377,76,378,77,379,380,381,240,241,382,242,78,79,383,384,385,386,387,388,389,390,391,392,393,394,395,468,243,396,397,398,399,400,80,81,82,244,83,401,245,246,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,85,86,87,88,89,469,437,90,438,470,247,439,440,248,249,471,472,473,474,250,251,252,93,253,441,254,442,443,444,445,446,447,448,449,94,95,450,451,452,96,97,98,453,454,109,455,456,457,458,459,460,143,461,462,463,164,166,173,178,464],"tindex":"7ecf1d4d-3e7f-11e6-b913-61ebe1863540","method":{"position":"com.google.gson.stream.JsonWriter:234","type":"CtMethodImpl","sourcecode":"public final void setLenient(boolean lenient) {\n    if (lenient) {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = lenient;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649231/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"lenient"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:154","type":"CtUnaryOperatorImpl","sourcecode":"!create"},"failures":[0,475,476,477,478,479,480,481,482,483],"tindex":"7ecf1d4e-3e7f-11e6-b913-4fa32c7fc1ae","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:131","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedHashTreeMap.Node<K, V> find(K key, boolean create) {\n    if (!create) {\n        {\n            java.util.Comparator<? super K> java.util.Comparator<? super K> = com.google.gson.internal.LinkedHashTreeMap.this.java.util.Comparator<? super K>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[] com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[] = com.google.gson.internal.LinkedHashTreeMap.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[];\n            int int = com.google.gson.internal.LinkedHashTreeMap.secondaryHash(key.hashCode());\n            int int = hash & ((table.int) - 1);\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = table[index];\n            int int = 0;\n            if (nearest != null) {\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                java.lang.Comparable<java.lang.Object> java.lang.Comparable<java.lang.Object> = comparator == (com.google.gson.internal.LinkedHashTreeMap.com.google.gson.internal.LinkedHashTreeMap.java.util.Comparator<java.lang.Comparable>) ? ((java.lang.Comparable<java.lang.Object>)(key)) : null;\n                while (true) {\n                    comparison = comparableKey != null ? comparableKey.compareTo(nearest.K) : comparator.compare(key, nearest.K);\n                    if (comparison == 0) {\n                        return nearest;\n                    } \n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = comparison < 0 ? nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> : nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    if (child == null) {\n                        break;\n                    } \n                    nearest = child;\n                }\n            } \n            if (!create) {\n                return null;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            if (nearest == null) {\n                if ((comparator == (com.google.gson.internal.LinkedHashTreeMap.com.google.gson.internal.LinkedHashTreeMap.java.util.Comparator<java.lang.Comparable>)) && (!(key instanceof java.lang.Comparable))) {\n                    throw new java.lang.ClassCastException(((key.getClass().getName()) + \" is not Comparable\"));\n                } \n                created = new com.google.gson.internal.LinkedHashTreeMap.Node<K, V>(nearest , key , hash , header , header.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>);\n                table[index] = created;\n            } else {\n                created = new com.google.gson.internal.LinkedHashTreeMap.Node<K, V>(nearest , key , hash , header , header.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>);\n                if (comparison < 0) {\n                    nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = created;\n                } else {\n                    nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = created;\n                }\n                rebalance(nearest, true);\n            }\n            if (((int)++) > (int)) {\n                doubleCapacity();\n            } \n            (int)++;\n            return created;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649231/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"create":"create"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:125","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonObject"},"failures":[7,9,10,18,19,20,24,25,26,31,34,35,36,37,291,299,466,42,46,48,50,51,52,58,68,77,87,440,474,93,95,109,117,121,162,163,170],"tindex":"7ecf6b6f-3e7f-11e6-b913-77677e08c59f","method":{"position":"com.google.gson.internal.Streams:67","type":"CtMethodImpl","sourcecode":"public static void write(com.google.gson.JsonElement element, com.google.gson.stream.JsonWriter writer) throws java.io.IOException {\n    if (element instanceof com.google.gson.JsonObject) {\n        {\n            com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<com.google.gson.JsonElement>.write(writer, element);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649231/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:131","type":"CtBinaryOperatorImpl","sourcecode":"(type) instanceof java.lang.Class<?>"},"failures":[],"tindex":"7ecf6b70-3e7f-11e6-b913-8f8bf5a0918b","method":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:74","type":"CtMethodImpl","sourcecode":"private java.lang.reflect.Type getRuntimeTypeIfMoreSpecific(java.lang.reflect.Type type, java.lang.Object value) {\n    if (value instanceof java.lang.Class<?>) {\n        {\n            if (type instanceof java.lang.Class) {\n                {\n                    if ((value != null) && (((type == (java.lang.Object.java.lang.Object.java.lang.Class)) || (type instanceof java.lang.reflect.TypeVariable<?>)) || (type instanceof java.lang.Class<?>))) {\n                        type = value.getClass();\n                    } \n                    return type;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649231/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649231/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:107","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonArray"},"failures":[],"tindex":"7ecf6b71-3e7f-11e6-b913-f339bf66f667","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:804","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonArray) {\n        {\n            return (o instanceof java.util.Map.Entry) && ((findByEntry(((java.util.Map.Entry<?, ?>)(o)))) != null);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649231/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[15,16,22,63,64,65,67],"tindex":"7ecf6b72-3e7f-11e6-b913-c31402689dac","method":{"position":"com.google.gson.JsonObject:89","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Number value) {\n    if (property == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649231/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (property == null) {\n                {\n                    add(property, createJsonElement(value));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649231/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:578","type":"CtBinaryOperatorImpl","sourcecode":"root == null"},"failures":[0],"tindex":"7ecf6b73-3e7f-11e6-b913-554410c3008f","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:429","type":"CtMethodImpl","sourcecode":"private void rotateRight(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root == null) {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivotRight;\n            if (pivotRight != null) {\n                pivotRight.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            } \n            replaceInParent(root, pivot);\n            pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot;\n            root.int = (java.lang.Math.max((right != null ? right.int : 0), (pivotRight != null ? pivotRight.int : 0))) + 1;\n            pivot.int = (java.lang.Math.max(root.int, (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649231/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"root"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"7ecf9284-3e7f-11e6-b913-037ee6bb7cf2","method":{"position":"com.google.gson.JsonObject:89","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Number value) {\n    if (property == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649231/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (property == null) {\n                {\n                    add(property, createJsonElement(value));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649231/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:122","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"7ecf9285-3e7f-11e6-b913-97fa5ce406a3","method":{"position":"com.google.gson.internal.$Gson$Types:217","type":"CtMethodImpl","sourcecode":"public static java.lang.String typeToString(java.lang.reflect.Type type) {\n    return type instanceof java.lang.Class ? ((java.lang.Class<?>)(type)).getName() : type.toString();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"7ecf9286-3e7f-11e6-b913-edfe1ca68e84","method":{"position":"com.google.gson.Gson:719","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.lang.String json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649231/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (json == null) {\n                return null;\n            } \n            java.io.StringReader java.io.StringReader = new java.io.StringReader(json);\n            T T = ((T)(fromJson(reader, typeOfT)));\n            return target;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"7ecfb997-3e7f-11e6-b913-77ce81f44553","method":{"position":"com.google.gson.Gson:491","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        {\n            if (src == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649231/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    com.google.gson.internal.bind.JsonTreeWriter com.google.gson.internal.bind.JsonTreeWriter = new com.google.gson.internal.bind.JsonTreeWriter();\n                    toJson(src, typeOfSrc, writer);\n                    return writer.get();\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649231/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[],"tindex":"7ecfb998-3e7f-11e6-b913-53af3008153a","method":{"position":"com.google.gson.FieldNamingPolicy:137","type":"CtMethodImpl","sourcecode":"private static java.lang.String upperCaseFirstLetter(java.lang.String name) {\n    if (name == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649231/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            int int = 0;\n            char char = name.charAt(index);\n            while (index < ((name.length()) - 1)) {\n                if (java.lang.Character.isLetter(firstCharacter)) {\n                    break;\n                } \n                fieldNameBuilder.append(firstCharacter);\n                firstCharacter = name.charAt((++index));\n            }\n            if (index == (name.length())) {\n                return fieldNameBuilder.toString();\n            } \n            if (!(java.lang.Character.isUpperCase(firstCharacter))) {\n                java.lang.String java.lang.String = com.google.gson.FieldNamingPolicy.modifyString(java.lang.Character.toUpperCase(firstCharacter), name, (++index));\n                return fieldNameBuilder.append(modifiedTarget).toString();\n            } else {\n                return name;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:109","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonPrimitive"},"failures":[],"tindex":"7ecfb999-3e7f-11e6-b913-41e955618287","method":{"position":"com.google.gson.internal.$Gson$Types:213","type":"CtMethodImpl","sourcecode":"private static int hashCodeOrZero(java.lang.Object o) {\n    return o != null ? o.hashCode() : 0;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:462","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[484],"tindex":"7ecfb99a-3e7f-11e6-b913-0b3f5a09b64d","method":{"position":"com.google.gson.stream.JsonWriter:461","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(double value) throws java.io.IOException {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649231/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                throw new java.lang.IllegalArgumentException((\"Numeric values must be finite, but was \" + value));\n            } \n            writeDeferredName();\n            beforeValue(false);\n            java.io.Writer.append(java.lang.Double.toString(value));\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:274","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[260,485,261,486,262,487,263,264,1,2,3,265,179,266,4,5,488,489,267,268,6,7,8,490,491,492,493,494,9,495,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,180,496,27,181,182,183,269,270,497,184,185,186,498,271,28,499,272,273,500,501,274,502,30,31,503,504,275,276,32,277,505,34,278,35,36,279,37,280,281,282,192,283,284,285,286,506,287,193,38,39,194,195,507,508,196,509,510,288,511,512,289,465,513,514,290,515,291,197,516,517,292,518,293,198,519,199,294,295,520,200,521,522,523,524,296,525,297,201,526,298,527,528,529,530,531,40,532,41,299,533,534,535,466,300,536,301,42,302,43,537,538,44,539,303,45,540,46,47,48,304,541,542,49,543,305,544,306,307,308,309,202,545,310,546,311,312,547,313,548,314,315,316,317,549,318,550,551,319,552,320,321,553,50,203,554,322,51,323,324,325,326,555,556,52,327,53,328,557,54,55,56,57,204,205,206,207,208,329,209,210,211,330,331,212,332,558,58,559,560,561,333,213,562,563,334,564,335,565,214,566,567,568,569,215,216,336,570,571,337,217,572,59,218,219,60,467,220,573,338,339,574,221,61,575,340,62,341,576,577,342,343,344,345,346,347,348,349,578,579,350,580,351,581,582,352,222,223,63,64,65,66,67,583,584,585,353,224,354,355,356,586,357,358,359,360,361,587,588,362,589,363,590,591,592,364,593,594,365,595,366,230,231,232,233,596,597,598,367,234,235,368,236,599,600,237,601,602,238,369,603,239,370,604,68,605,606,607,371,608,372,373,374,375,376,69,70,71,72,73,74,75,377,76,378,77,379,380,381,240,241,382,242,78,79,383,384,385,386,387,388,389,609,390,391,392,393,394,610,611,395,468,243,612,613,614,396,615,397,616,398,617,399,618,400,619,80,620,621,81,82,244,83,401,622,245,246,623,624,625,402,626,403,627,628,629,630,631,404,632,633,405,634,635,636,637,638,639,640,406,407,641,642,643,644,645,408,646,409,410,647,648,411,649,650,412,651,413,414,652,653,415,416,654,655,656,417,657,658,659,660,661,662,663,664,418,665,419,666,420,421,667,668,422,669,670,423,671,424,672,673,84,425,426,427,428,429,430,431,674,675,676,432,677,433,678,679,680,434,435,681,436,682,683,85,86,87,88,89,469,437,90,438,684,685,470,686,91,247,687,688,439,92,440,248,249,689,471,472,473,474,690,250,691,251,252,93,253,692,693,441,694,254,442,443,444,445,695,696,446,447,697,698,448,699,700,449,94,95,450,451,452,701,702,453,703,704,454,109,455,456,705,457,458,706,707,708,459,460,143,461,462,463,173,178,464],"tindex":"7ecfb99b-3e7f-11e6-b913-07cc33d32ba8","method":{"position":"com.google.gson.Gson:249","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> doubleAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                {\n                    if (serializeSpecialFloatingPointValues) {\n                        return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n                    } \n                    return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                        @java.lang.Override\n                        public java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                            if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                                in.nextNull();\n                                return null;\n                            } \n                            return in.nextDouble();\n                        }\n\n                        @java.lang.Override\n                        public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                            if (value == null) {\n                                out.nullValue();\n                                return ;\n                            } \n                            double double = value.doubleValue();\n                            checkValidFloatingPoint(doubleValue);\n                            out.value(value);\n                        }\n                    };\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649231/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649231/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:462","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[403,406,409,412,414,431,456],"tindex":"7ecfe0ac-3e7f-11e6-b913-035540d2a3fa","method":{"position":"com.google.gson.Gson:297","type":"CtMethodImpl","sourcecode":"private void checkValidFloatingPoint(double value) {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649231/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649231/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                        throw new java.lang.IllegalArgumentException(((value + \" is not a valid double value as per JSON specification. To override this\") + \" behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.\"));\n                    } \n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:726","type":"CtBinaryOperatorImpl","sourcecode":"value == 0"},"failures":[307,313,316,317,709,710,711,462,463],"tindex":"7ecfe0ad-3e7f-11e6-b913-550814af65b6","method":{"position":"com.google.gson.stream.JsonWriter:476","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(long value) throws java.io.IOException {\n    if (value == 0) {\n        {\n            writeDeferredName();\n            beforeValue(false);\n            java.io.Writer.write(java.lang.Long.toString(value));\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649231/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:452","type":"CtBinaryOperatorImpl","sourcecode":"typeAdapter instanceof com.google.gson.InstanceCreator<?>"},"failures":[],"tindex":"7ecfe0ae-3e7f-11e6-b913-2573e34e3aaf","method":{"position":"com.google.gson.TreeTypeAdapter:103","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newTypeHierarchyFactory(java.lang.Class<?> hierarchyType, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof com.google.gson.InstanceCreator<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649231/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , null , false , hierarchyType);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:106","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonArray"},"failures":[99],"tindex":"7ed007bf-3e7f-11e6-b913-a9ac096cb5f1","method":{"position":"com.google.gson.JsonArray:81","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement set(int index, com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649231/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (element instanceof com.google.gson.JsonArray) {\n                {\n                    return java.util.List<com.google.gson.JsonElement>.set(index, element);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649231/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonArray:58","type":"CtBinaryOperatorImpl","sourcecode":"element == null"},"failures":[],"tindex":"7ed007c0-3e7f-11e6-b913-ef63022793ad","method":{"position":"com.google.gson.JsonArray:92","type":"CtMethodImpl","sourcecode":"public boolean remove(com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonArray) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649231/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (element instanceof com.google.gson.JsonObject) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649231/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (element == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649231/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            return java.util.List<com.google.gson.JsonElement>.remove(element);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"7ed007c1-3e7f-11e6-b913-73f8d785803a","method":{"position":"com.google.gson.Gson:127","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonParseException {\n    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n        {\n            if (json == null) {\n                {\n                    return ((T)(fromJson(json, typeOfT)));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649231/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonParseException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649231/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[424,459],"tindex":"7ed007c2-3e7f-11e6-b913-d772ad8999cd","method":{"position":"com.google.gson.Gson:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649231/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    out.value(value.toString());\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649231/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:192","type":"CtInvocationImpl","sourcecode":"to.equals(from)"},"failures":[712,713,714],"tindex":"7ed007c3-3e7f-11e6-b913-6f84e6af2b16","method":{"position":"com.google.gson.reflect.TypeToken:272","type":"CtMethodImpl","sourcecode":"private static boolean matches(java.lang.reflect.Type from, java.lang.reflect.Type to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeMap) {\n    if (to.equals(from)) {\n        {\n            return (to.equals(from)) || ((from instanceof java.lang.reflect.TypeVariable) && (to.equals(typeMap.get(((java.lang.reflect.TypeVariable<?>)(from)).getName()))));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649231/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from","to":"to"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[305],"tindex":"7ed02ed4-3e7f-11e6-b913-95df31cb5b56","method":{"position":"com.google.gson.internal.bind.TypeAdapters:201","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649231/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:240","type":"CtInvocationImpl","sourcecode":"from.getRawType().equals(to.getRawType())"},"failures":[712,713,714],"tindex":"7ed02ed5-3e7f-11e6-b913-ab3f78d894a0","method":{"position":"com.google.gson.reflect.TypeToken:238","type":"CtMethodImpl","sourcecode":"private static boolean typeEquals(java.lang.reflect.ParameterizedType from, java.lang.reflect.ParameterizedType to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeVarMap) {\n    if (to.getRawType().equals(from.getRawType())) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649231/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (from.getRawType().equals(to.getRawType())) {\n                java.lang.reflect.Type[] java.lang.reflect.Type[] = from.getActualTypeArguments();\n                java.lang.reflect.Type[] java.lang.reflect.Type[] = to.getActualTypeArguments();\n                for (int int = 0 ; i < (fromArgs.int) ; i++) {\n                    if (!(com.google.gson.reflect.TypeToken.matches(fromArgs[i], toArgs[i], typeVarMap))) {\n                        return false;\n                    } \n                }\n                return true;\n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"to","to":"from"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[715,716],"tindex":"7ed02ed6-3e7f-11e6-b913-c99210d914a5","method":{"position":"com.google.gson.TypeAdapter:268","type":"CtMethodImpl","sourcecode":"public final T fromJson(java.lang.String json) throws java.io.IOException {\n    if (json == null) {\n        {\n            return fromJson(new java.io.StringReader(json));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649231/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"7ed02ed7-3e7f-11e6-b913-497944947418","method":{"position":"com.google.gson.Gson:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649231/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    out.value(value.toString());\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649231/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.TreeTypeAdapter:55","type":"CtInvocationImpl","sourcecode":"value.isJsonNull()"},"failures":[7,9,10,14,15,16,18,19,20,22,24,25,26,27,30,31,34,35,36,37,38,39,465,291,299,466,42,44,45,46,48,49,50,51,52,327,55,58,62,68,77,80,81,82,85,86,87,88,89,472,474,93,95,109,117,121,145,161,162,163,168,169,170,171,173,178],"tindex":"7ed02ed8-3e7f-11e6-b913-a9da3762b144","method":{"position":"com.google.gson.internal.bind.TypeAdapters:680","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, com.google.gson.JsonElement value) throws java.io.IOException {\n    if (value.isJsonNull()) {\n        {\n            if (value == null) {\n                {\n                    if (value.isJsonNull()) {\n                        {\n                            if ((value == null) || (value.isJsonNull())) {\n                                out.nullValue();\n                            } else if (value.isJsonPrimitive()) {\n                                com.google.gson.JsonPrimitive com.google.gson.JsonPrimitive = value.getAsJsonPrimitive();\n                                if (primitive.isNumber()) {\n                                    out.value(primitive.getAsNumber());\n                                } else if (primitive.isBoolean()) {\n                                    out.value(primitive.getAsBoolean());\n                                } else {\n                                    out.value(primitive.getAsString());\n                                }\n                            } else if (value.isJsonArray()) {\n                                out.beginArray();\n                                for (com.google.gson.JsonElement com.google.gson.JsonElement : value.getAsJsonArray()) {\n                                    write(out, e);\n                                }\n                                out.endArray();\n                            } else if (value.isJsonObject()) {\n                                out.beginObject();\n                                for (java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> : value.getAsJsonObject().entrySet()) {\n                                    out.name(e.getKey());\n                                    write(out, e.getValue());\n                                }\n                                out.endObject();\n                            } else {\n                                throw new java.lang.IllegalArgumentException((\"Couldn't write \" + (value.getClass())));\n                            }\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649231/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.io.IOException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649231/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649231/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.JsonObject:54","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[213,231,390,255,256],"tindex":"7ed055e9-3e7f-11e6-b913-65bf142a3ec2","method":{"position":"com.google.gson.internal.bind.ObjectTypeAdapter:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Object value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649231/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            com.google.gson.TypeAdapter<java.lang.Object> com.google.gson.TypeAdapter<java.lang.Object> = ((com.google.gson.TypeAdapter<java.lang.Object>)(com.google.gson.Gson.getAdapter(value.getClass())));\n            if (typeAdapter instanceof com.google.gson.internal.bind.ObjectTypeAdapter) {\n                out.beginObject();\n                out.endObject();\n                return ;\n            } \n            typeAdapter.write(out, value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:159","type":"CtBinaryOperatorImpl","sourcecode":"a == b"},"failures":[],"tindex":"7ed055ea-3e7f-11e6-b913-db1cfdb3178d","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:223","type":"CtMethodImpl","sourcecode":"private boolean equal(java.lang.Object a, java.lang.Object b) {\n    if (b == a) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649231/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (a == b) || ((a != null) && (a.equals(b)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"b","b":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"7ed055eb-3e7f-11e6-b913-1975f751ebd0","method":{"position":"com.google.gson.Gson:847","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(com.google.gson.JsonElement json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649231/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:125","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonObject"},"failures":[],"tindex":"7ed055ec-3e7f-11e6-b913-273e469afb7d","method":{"position":"com.google.gson.JsonArray:92","type":"CtMethodImpl","sourcecode":"public boolean remove(com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonArray) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649231/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (element instanceof com.google.gson.JsonObject) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649231/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (element == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649231/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            return java.util.List<com.google.gson.JsonElement>.remove(element);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:131","type":"CtBinaryOperatorImpl","sourcecode":"(type) instanceof java.lang.Class<?>"},"failures":[260,485,261,486,262,487,263,264,1,2,3,265,179,266,4,5,488,489,267,268,6,7,8,490,491,492,493,494,9,495,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,180,496,27,181,182,183,269,270,497,184,185,186,498,271,499,272,273,500,501,274,502,30,31,504,275,276,32,277,505,33,34,278,35,36,279,37,280,281,282,192,283,284,285,286,506,287,193,194,195,507,508,196,509,510,288,511,512,289,513,514,290,515,197,517,292,518,293,198,519,199,294,295,520,200,521,522,523,296,525,297,201,526,298,527,528,529,530,531,40,532,41,533,534,535,300,536,301,42,302,43,537,538,44,539,303,45,540,46,47,48,304,541,542,49,543,305,544,306,307,308,309,202,545,310,546,311,312,547,313,548,314,315,316,317,549,318,550,551,319,552,320,321,553,50,203,554,322,51,323,324,325,326,555,556,52,327,53,328,557,54,55,56,57,204,205,206,207,208,329,209,210,211,330,331,212,332,558,559,560,561,333,213,562,563,334,564,335,565,214,566,567,568,569,215,216,336,570,571,337,217,572,59,218,219,60,467,220,573,338,339,574,221,61,575,340,62,341,576,577,342,343,344,345,346,347,348,349,578,579,350,580,351,581,582,352,222,223,63,64,65,66,67,583,584,585,353,224,354,355,356,586,357,358,359,360,361,587,588,362,589,363,590,591,592,364,593,594,365,225,226,227,228,229,595,366,230,231,232,233,596,597,598,367,234,235,368,236,600,237,601,602,238,369,603,239,370,604,605,606,607,371,608,372,373,374,375,376,69,70,71,72,73,74,75,377,76,378,77,379,380,381,240,241,382,242,78,79,383,384,385,386,387,388,389,609,390,391,392,393,394,610,611,395,468,243,612,613,614,396,615,397,616,398,617,399,618,400,619,80,620,621,81,82,244,83,401,622,245,246,623,624,625,402,626,403,627,628,629,630,631,404,632,633,405,634,635,636,637,638,639,640,406,407,641,642,643,644,645,408,646,409,410,647,648,411,649,650,412,651,413,414,652,653,415,416,654,655,656,417,657,658,659,660,661,662,663,664,418,665,419,666,420,421,667,668,422,669,670,423,671,424,672,673,84,425,426,427,428,429,430,431,674,675,676,432,677,433,678,679,680,434,435,681,436,682,683,85,86,87,88,89,469,437,90,438,684,685,470,686,91,247,687,688,439,92,440,248,249,689,471,472,473,474,690,250,691,251,252,93,253,692,693,441,694,254,442,443,444,445,695,696,446,447,697,698,448,699,700,449,94,95,450,451,452,717,96,97,98,702,453,703,454,455,456,457,458,706,707,459,460,718,719,720,143,255,461,462,463,464],"tindex":"7ed07cfd-3e7f-11e6-b913-a1e5126375e5","method":{"position":"com.google.gson.reflect.TypeToken:295","type":"CtMethodImpl","sourcecode":"public static com.google.gson.reflect.TypeToken<?> get(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649231/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new com.google.gson.reflect.TypeToken<java.lang.Object>(type);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:452","type":"CtBinaryOperatorImpl","sourcecode":"typeAdapter instanceof com.google.gson.InstanceCreator<?>"},"failures":[7,8,495,11,13,14,15,16,17,18,20,22,23,24,27,28,32,34,278,35,36,37,52,58,62,68,69,70,71,72,73,74,75,76,77,83,85,86,87,88,89,92,440,472,700,449,94,95,450],"tindex":"7ed07cfe-3e7f-11e6-b913-ad65097e4b4d","method":{"position":"com.google.gson.TreeTypeAdapter:92","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newFactoryWithMatchRawType(com.google.gson.reflect.TypeToken<?> exactType, java.lang.Object typeAdapter) {\n    if ((typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649231/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649231/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (typeAdapter instanceof com.google.gson.InstanceCreator<?>) {\n                        {\n                            boolean boolean = (exactType.getType()) == (exactType.getRawType());\n                            return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , exactType , matchRawType , null);\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649231/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:120","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonNull"},"failures":[],"tindex":"7ed07cff-3e7f-11e6-b913-03119f5ad3de","method":{"position":"com.google.gson.internal.LinkedTreeMap:570","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonPrimitive) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649231/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof com.google.gson.JsonNull) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649231/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return (o instanceof java.util.Map.Entry) && ((findByEntry(((java.util.Map.Entry<?, ?>)(o)))) != null);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"7ed0a410-3e7f-11e6-b913-6dc50fef7734","method":{"position":"com.google.gson.Gson:491","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        {\n            if (src == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649231/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    com.google.gson.internal.bind.JsonTreeWriter com.google.gson.internal.bind.JsonTreeWriter = new com.google.gson.internal.bind.JsonTreeWriter();\n                    toJson(src, typeOfSrc, writer);\n                    return writer.get();\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649231/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.JsonObject:54","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"7ed0a411-3e7f-11e6-b913-6b814bf17f12","method":{"position":"com.google.gson.internal.bind.TypeAdapters:680","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, com.google.gson.JsonElement value) throws java.io.IOException {\n    if (value.isJsonNull()) {\n        {\n            if (value == null) {\n                {\n                    if (value.isJsonNull()) {\n                        {\n                            if ((value == null) || (value.isJsonNull())) {\n                                out.nullValue();\n                            } else if (value.isJsonPrimitive()) {\n                                com.google.gson.JsonPrimitive com.google.gson.JsonPrimitive = value.getAsJsonPrimitive();\n                                if (primitive.isNumber()) {\n                                    out.value(primitive.getAsNumber());\n                                } else if (primitive.isBoolean()) {\n                                    out.value(primitive.getAsBoolean());\n                                } else {\n                                    out.value(primitive.getAsString());\n                                }\n                            } else if (value.isJsonArray()) {\n                                out.beginArray();\n                                for (com.google.gson.JsonElement com.google.gson.JsonElement : value.getAsJsonArray()) {\n                                    write(out, e);\n                                }\n                                out.endArray();\n                            } else if (value.isJsonObject()) {\n                                out.beginObject();\n                                for (java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> : value.getAsJsonObject().entrySet()) {\n                                    out.name(e.getKey());\n                                    write(out, e.getValue());\n                                }\n                                out.endObject();\n                            } else {\n                                throw new java.lang.IllegalArgumentException((\"Couldn't write \" + (value.getClass())));\n                            }\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649231/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.io.IOException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649231/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649231/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[1,2,3,4,5,6,30,54,55,56,57,62,78,79,80,81,82,85,86,88,89,90,96,161,168,169,171],"tindex":"7ed0a412-3e7f-11e6-b913-a56addbb2f5e","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:132","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter name(java.lang.String name) throws java.io.IOException {\n    if (name == null) {\n        {\n            if ((java.util.List<com.google.gson.JsonElement>.isEmpty()) || ((java.lang.String) != null)) {\n                throw new java.lang.IllegalStateException();\n            } \n            com.google.gson.JsonElement com.google.gson.JsonElement = peek();\n            if (element instanceof com.google.gson.JsonObject) {\n                java.lang.String = name;\n                return com.google.gson.internal.bind.JsonTreeWriter.this;\n            } \n            throw new java.lang.IllegalStateException();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649231/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:106","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonArray"},"failures":[],"tindex":"7ed0a413-3e7f-11e6-b913-ed0c6755026f","method":{"position":"com.google.gson.JsonArray:92","type":"CtMethodImpl","sourcecode":"public boolean remove(com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonArray) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649231/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (element instanceof com.google.gson.JsonObject) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649231/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (element == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649231/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            return java.util.List<com.google.gson.JsonElement>.remove(element);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:325","type":"CtBinaryOperatorImpl","sourcecode":"toResolve instanceof java.lang.reflect.TypeVariable"},"failures":[],"tindex":"7ed0cb24-3e7f-11e6-b913-b924a27ecd88","method":{"position":"com.google.gson.internal.$Gson$Types:226","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type getGenericSupertype(java.lang.reflect.Type context, java.lang.Class<?> rawType, java.lang.Class<?> toResolve) {\n    if (toResolve == rawType) {\n        return context;\n    } \n    if (toResolve.isInterface()) {\n        java.lang.Class<?>[] java.lang.Class<?>[] = rawType.getInterfaces();\n        for (int int = 0, int int = interfaces.int ; i < length ; i++) {\n            if ((interfaces[i]) == toResolve) {\n                return rawType.getGenericInterfaces()[i];\n            } else if (toResolve.isAssignableFrom(interfaces[i])) {\n                return com.google.gson.internal.$Gson$Types.getGenericSupertype(rawType.getGenericInterfaces()[i], interfaces[i], toResolve);\n            } \n        }\n    } \n    if (!(rawType.isInterface())) {\n        while (rawType != (java.lang.Object.java.lang.Object.java.lang.Class)) {\n            java.lang.Class<?> java.lang.Class<?> = rawType.getSuperclass();\n            if (rawSupertype == toResolve) {\n                return rawType.getGenericSuperclass();\n            } else if (toResolve.isAssignableFrom(rawSupertype)) {\n                return com.google.gson.internal.$Gson$Types.getGenericSupertype(rawType.getGenericSuperclass(), rawSupertype, toResolve);\n            } \n            rawType = rawSupertype;\n        }\n    } \n    return toResolve;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"context"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[305],"tindex":"7ed0cb25-3e7f-11e6-b913-b180fdb23eae","method":{"position":"com.google.gson.internal.bind.TypeAdapters:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649231/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"7ed0cb26-3e7f-11e6-b913-6355cbaf2730","method":{"position":"com.google.gson.JsonObject:100","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Boolean value) {\n    if (property == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649231/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            add(property, createJsonElement(value));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.TreeTypeAdapter:55","type":"CtInvocationImpl","sourcecode":"value.isJsonNull()"},"failures":[],"tindex":"7ed0cb27-3e7f-11e6-b913-530942462b72","method":{"position":"com.google.gson.internal.bind.TypeAdapters:680","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, com.google.gson.JsonElement value) throws java.io.IOException {\n    if (value.isJsonNull()) {\n        {\n            if (value == null) {\n                {\n                    if (value.isJsonNull()) {\n                        {\n                            if ((value == null) || (value.isJsonNull())) {\n                                out.nullValue();\n                            } else if (value.isJsonPrimitive()) {\n                                com.google.gson.JsonPrimitive com.google.gson.JsonPrimitive = value.getAsJsonPrimitive();\n                                if (primitive.isNumber()) {\n                                    out.value(primitive.getAsNumber());\n                                } else if (primitive.isBoolean()) {\n                                    out.value(primitive.getAsBoolean());\n                                } else {\n                                    out.value(primitive.getAsString());\n                                }\n                            } else if (value.isJsonArray()) {\n                                out.beginArray();\n                                for (com.google.gson.JsonElement com.google.gson.JsonElement : value.getAsJsonArray()) {\n                                    write(out, e);\n                                }\n                                out.endArray();\n                            } else if (value.isJsonObject()) {\n                                out.beginObject();\n                                for (java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> : value.getAsJsonObject().entrySet()) {\n                                    out.name(e.getKey());\n                                    write(out, e.getValue());\n                                }\n                                out.endObject();\n                            } else {\n                                throw new java.lang.IllegalArgumentException((\"Couldn't write \" + (value.getClass())));\n                            }\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649231/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.io.IOException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649231/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649231/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:98","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"7ed0cb28-3e7f-11e6-b913-954a37be5719","method":{"position":"com.google.gson.GsonBuilder:447","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\npublic com.google.gson.GsonBuilder registerTypeAdapter(java.lang.reflect.Type type, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649231/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.$Gson$Preconditions.checkArgument(((((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) || (typeAdapter instanceof com.google.gson.InstanceCreator<?>)) || (typeAdapter instanceof com.google.gson.TypeAdapter<?>)));\n            if (typeAdapter instanceof com.google.gson.InstanceCreator<?>) {\n                java.util.Map<java.lang.reflect.Type, com.google.gson.InstanceCreator<?>>.put(type, ((com.google.gson.InstanceCreator)(typeAdapter)));\n            } \n            if ((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) {\n                com.google.gson.reflect.TypeToken<?> com.google.gson.reflect.TypeToken<?> = com.google.gson.reflect.TypeToken.get(type);\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.TreeTypeAdapter.newFactoryWithMatchRawType(typeToken, typeAdapter));\n            } \n            if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.internal.bind.TypeAdapters.newFactory(com.google.gson.reflect.TypeToken.get(type), ((com.google.gson.TypeAdapter)(typeAdapter))));\n            } \n            return com.google.gson.GsonBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl","sourcecode":"in == null"},"failures":[],"tindex":"7ed0f239-3e7f-11e6-b913-a755946a5378","method":{"position":"com.google.gson.TypeAdapter:254","type":"CtMethodImpl","sourcecode":"public final T fromJson(java.io.Reader in) throws java.io.IOException {\n    if (in == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649231/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(in);\n            return read(reader);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:455","type":"CtBinaryOperatorImpl","sourcecode":"(typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)"},"failures":[],"tindex":"7ed0f23a-3e7f-11e6-b913-c14eb41b8e90","method":{"position":"com.google.gson.TreeTypeAdapter:92","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newFactoryWithMatchRawType(com.google.gson.reflect.TypeToken<?> exactType, java.lang.Object typeAdapter) {\n    if ((typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649231/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649231/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (typeAdapter instanceof com.google.gson.InstanceCreator<?>) {\n                        {\n                            boolean boolean = (exactType.getType()) == (exactType.getRawType());\n                            return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , exactType , matchRawType , null);\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649231/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:167","type":"CtUnaryOperatorImpl","sourcecode":"!create"},"failures":[1,2,3,4,5,6,11,12,28,721,30,32,33,43,56,561,562,563,565,568,570,573,574,222,223,66,71,72,73,78,79,82,85,86,88,89,90,96,141,142,715,716,722,723,724,725,726,172,727,728,259,174,175,176,177],"tindex":"7ed0f23b-3e7f-11e6-b913-536c3acc0c8d","method":{"position":"com.google.gson.internal.LinkedTreeMap:121","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedTreeMap.Node<K, V> find(K key, boolean create) {\n    if (!create) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649231/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.util.Comparator<? super K> java.util.Comparator<? super K> = com.google.gson.internal.LinkedTreeMap.this.java.util.Comparator<? super K>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            int int = 0;\n            if (nearest != null) {\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                java.lang.Comparable<java.lang.Object> java.lang.Comparable<java.lang.Object> = comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>) ? ((java.lang.Comparable<java.lang.Object>)(key)) : null;\n                while (true) {\n                    comparison = comparableKey != null ? comparableKey.compareTo(nearest.K) : comparator.compare(key, nearest.K);\n                    if (comparison == 0) {\n                        return nearest;\n                    } \n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = comparison < 0 ? nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> : nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    if (child == null) {\n                        break;\n                    } \n                    nearest = child;\n                }\n            } \n            if (!create) {\n                return null;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.this.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            if (nearest == null) {\n                if ((comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>)) && (!(key instanceof java.lang.Comparable))) {\n                    throw new java.lang.ClassCastException(((key.getClass().getName()) + \" is not Comparable\"));\n                } \n                created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n            } else {\n                created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                if (comparison < 0) {\n                    nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                } else {\n                    nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                }\n                rebalance(nearest, true);\n            }\n            (int)++;\n            (int)++;\n            return created;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"create":"create"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:233","type":"CtBinaryOperatorImpl","sourcecode":"annotation != null"},"failures":[444,445,695,696,447,697,448,699,729,730,731],"tindex":"7ed1194c-3e7f-11e6-b913-2958ada93fcb","method":{"position":"com.google.gson.internal.Excluder:232","type":"CtMethodImpl","sourcecode":"private boolean isValidSince(com.google.gson.annotations.Since annotation) {\n    if (annotation != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649231/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (annotation != null) {\n                double double = annotation.value();\n                if (annotationVersion > (double)) {\n                    return false;\n                } \n            } \n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:250","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[],"tindex":"7ed1194d-3e7f-11e6-b913-3f6795260f73","method":{"position":"com.google.gson.Gson:249","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> doubleAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                {\n                    if (serializeSpecialFloatingPointValues) {\n                        return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n                    } \n                    return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                        @java.lang.Override\n                        public java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                            if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                                in.nextNull();\n                                return null;\n                            } \n                            return in.nextDouble();\n                        }\n\n                        @java.lang.Override\n                        public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                            if (value == null) {\n                                out.nullValue();\n                                return ;\n                            } \n                            double double = value.doubleValue();\n                            checkValidFloatingPoint(doubleValue);\n                            out.value(value);\n                        }\n                    };\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649231/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649231/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:298","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[162,164],"tindex":"7ed1194e-3e7f-11e6-b913-3330f106b326","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:162","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(double value) throws java.io.IOException {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649231/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if ((!(isLenient())) && ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value)))) {\n                throw new java.lang.IllegalArgumentException((\"JSON forbids NaN and infinities: \" + value));\n            } \n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:602","type":"CtUnaryOperatorImpl","sourcecode":"!(lenient)"},"failures":[],"tindex":"7ed1405f-3e7f-11e6-b913-c183112b8553","method":{"position":"com.google.gson.stream.JsonReader:325","type":"CtMethodImpl","sourcecode":"public final void setLenient(boolean lenient) {\n    if (!lenient) {\n        {\n            com.google.gson.stream.JsonReader.this.boolean = lenient;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649231/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"lenient"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.JsonObject:54","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"7ed14060-3e7f-11e6-b913-398a6b401cd8","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:108","type":"CtMethodImpl","sourcecode":"public boolean writeField(java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649231/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (!(boolean))\n                return false;\n            \n            java.lang.Object java.lang.Object = field.get(value);\n            return fieldValue != value;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:92","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof java.util.Iterator"},"failures":[],"tindex":"7ed14061-3e7f-11e6-b913-d78bc69858bf","method":{"position":"com.google.gson.reflect.TypeToken:283","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic final boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonPrimitive) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649231/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof java.util.Iterator) {\n                {\n                    return (o instanceof com.google.gson.reflect.TypeToken<?>) && (com.google.gson.internal.$Gson$Types.equals(java.lang.reflect.Type, ((com.google.gson.reflect.TypeToken<?>)(o)).java.lang.reflect.Type));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649231/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"7ed14062-3e7f-11e6-b913-2b29f5b501fe","method":{"position":"com.google.gson.internal.bind.DateTypeAdapter:69","type":"CtMethodImpl","sourcecode":"private synchronized java.util.Date deserializeToDate(java.lang.String json) {\n    if (json == null) {\n        {\n            try {\n                return java.text.DateFormat.parse(json);\n            } catch (java.text.ParseException ignored) {\n            }\n            try {\n                return java.text.DateFormat.parse(json);\n            } catch (java.text.ParseException ignored) {\n            }\n            try {\n                return java.text.DateFormat.parse(json);\n            } catch (java.text.ParseException e) {\n                throw new com.google.gson.JsonSyntaxException(json , e);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649231/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:462","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[],"tindex":"7ed14063-3e7f-11e6-b913-bd9f57bc5e40","method":{"position":"com.google.gson.Gson:297","type":"CtMethodImpl","sourcecode":"private void checkValidFloatingPoint(double value) {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649231/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649231/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                        throw new java.lang.IllegalArgumentException(((value + \" is not a valid double value as per JSON specification. To override this\") + \" behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.\"));\n                    } \n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"7ed14064-3e7f-11e6-b913-bb5ce8a1240a","method":{"position":"com.google.gson.internal.bind.TypeAdapters:245","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649231/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                {\n                    out.value(value);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649231/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:109","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonPrimitive"},"failures":[],"tindex":"7ed16775-3e7f-11e6-b913-893f6c975ea9","method":{"position":"com.google.gson.reflect.TypeToken:283","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic final boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonPrimitive) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649231/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof java.util.Iterator) {\n                {\n                    return (o instanceof com.google.gson.reflect.TypeToken<?>) && (com.google.gson.internal.$Gson$Types.equals(java.lang.reflect.Type, ((com.google.gson.reflect.TypeToken<?>)(o)).java.lang.reflect.Type));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649231/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:109","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonPrimitive"},"failures":[],"tindex":"7ed16776-3e7f-11e6-b913-233f3cdaf964","method":{"position":"com.google.gson.internal.LinkedTreeMap:570","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonPrimitive) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649231/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof com.google.gson.JsonNull) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649231/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return (o instanceof java.util.Map.Entry) && ((findByEntry(((java.util.Map.Entry<?, ?>)(o)))) != null);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:554","type":"CtBinaryOperatorImpl","sourcecode":"(datePattern != null) && (!(\"\".equals(datePattern.trim())))"},"failures":[],"tindex":"7ed16777-3e7f-11e6-b913-eff283d4dae7","method":{"position":"com.google.gson.GsonBuilder:551","type":"CtMethodImpl","sourcecode":"private void addTypeAdaptersForDate(java.lang.String datePattern, int dateStyle, int timeStyle, java.util.List<com.google.gson.TypeAdapterFactory> factories) {\n    if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649231/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.DefaultDateTypeAdapter com.google.gson.DefaultDateTypeAdapter;\n            if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n                dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(datePattern);\n            } else if ((dateStyle != (java.text.DateFormat.java.text.DateFormat.int)) && (timeStyle != (java.text.DateFormat.java.text.DateFormat.int))) {\n                dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(dateStyle , timeStyle);\n            } else {\n                return ;\n            }\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.util.Date.java.util.Date.java.lang.Class), dateTypeAdapter));\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Timestamp.java.sql.Timestamp.java.lang.Class), dateTypeAdapter));\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Date.java.sql.Date.java.lang.Class), dateTypeAdapter));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"datePattern":"datePattern"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:118","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.Class<?>"},"failures":[],"tindex":"7ed16778-3e7f-11e6-b913-9d3015a44cd9","method":{"position":"com.google.gson.internal.Primitives:79","type":"CtMethodImpl","sourcecode":"public static boolean isWrapperType(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class<?>) {\n        {\n            return com.google.gson.internal.Primitives.com.google.gson.internal.Primitives.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.containsKey(com.google.gson.internal.$Gson$Preconditions.checkNotNull(type));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649231/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:287","type":"CtBinaryOperatorImpl","sourcecode":"replacement != null"},"failures":[],"tindex":"7ed16779-3e7f-11e6-b913-275cbc4b27be","method":{"position":"com.google.gson.internal.LinkedTreeMap:284","type":"CtMethodImpl","sourcecode":"private void replaceInParent(com.google.gson.internal.LinkedTreeMap.Node<K, V> node, com.google.gson.internal.LinkedTreeMap.Node<K, V> replacement) {\n    if (replacement != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649231/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n            if (replacement != null) {\n                replacement.com.google.gson.internal.LinkedTreeMap.Node<K, V> = parent;\n            } \n            if (parent != null) {\n                if ((parent.com.google.gson.internal.LinkedTreeMap.Node<K, V>) == node) {\n                    parent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                } else {\n                    assert (parent.com.google.gson.internal.LinkedTreeMap.Node<K, V>) == node;\n                    parent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                }\n            } else {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"replacement":"replacement"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:497","type":"CtBinaryOperatorImpl","sourcecode":"(typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)"},"failures":[],"tindex":"7ed18e8a-3e7f-11e6-b913-1bc7f4fa8eb6","method":{"position":"com.google.gson.TreeTypeAdapter:92","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newFactoryWithMatchRawType(com.google.gson.reflect.TypeToken<?> exactType, java.lang.Object typeAdapter) {\n    if ((typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649231/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649231/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (typeAdapter instanceof com.google.gson.InstanceCreator<?>) {\n                        {\n                            boolean boolean = (exactType.getType()) == (exactType.getRawType());\n                            return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , exactType , matchRawType , null);\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649231/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:137","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonObject"},"failures":[],"tindex":"7ed18e8b-3e7f-11e6-b913-d16ed4b4edc0","method":{"position":"com.google.gson.JsonArray:81","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement set(int index, com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649231/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (element instanceof com.google.gson.JsonArray) {\n                {\n                    return java.util.List<com.google.gson.JsonElement>.set(index, element);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649231/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"7ed18e8c-3e7f-11e6-b913-4d33bf1c22f3","method":{"position":"com.google.gson.internal.bind.TypeAdapters:245","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649231/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                {\n                    out.value(value);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649231/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:240","type":"CtInvocationImpl","sourcecode":"from.getRawType().equals(to.getRawType())"},"failures":[],"tindex":"7ed18e8d-3e7f-11e6-b913-3bd0bbdb4d5e","method":{"position":"com.google.gson.reflect.TypeToken:160","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.GenericArrayType to) {\n    if (from.getRawType().equals(from.getRawType())) {\n        {\n            java.lang.reflect.Type java.lang.reflect.Type = to.getGenericComponentType();\n            if (toGenericComponentType instanceof java.lang.reflect.ParameterizedType) {\n                java.lang.reflect.Type java.lang.reflect.Type = from;\n                if (from instanceof java.lang.reflect.GenericArrayType) {\n                    t = ((java.lang.reflect.GenericArrayType)(from)).getGenericComponentType();\n                } else if (from instanceof java.lang.Class<?>) {\n                    java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(from));\n                    while (classType.isArray()) {\n                        classType = classType.getComponentType();\n                    }\n                    t = classType;\n                } \n                return com.google.gson.reflect.TypeToken.isAssignableFrom(t, ((java.lang.reflect.ParameterizedType)(toGenericComponentType)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n            } \n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649231/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from","to":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"7ed1b59e-3e7f-11e6-b913-73005cf308ad","method":{"position":"com.google.gson.Gson:695","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.lang.String json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649231/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"7ed1b59f-3e7f-11e6-b913-e3091127a615","method":{"position":"com.google.gson.JsonParser:44","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement parse(java.lang.String json) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649231/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            return parse(new java.io.StringReader(json));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"7ed1b5a0-3e7f-11e6-b913-7f8565b42dd6","method":{"position":"com.google.gson.Gson:261","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649231/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            double double = value.doubleValue();\n            checkValidFloatingPoint(doubleValue);\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:79","type":"CtUnaryOperatorImpl","sourcecode":"!(json instanceof com.google.gson.JsonPrimitive)"},"failures":[],"tindex":"7ed1b5a1-3e7f-11e6-b913-057eeee5e1ca","method":{"position":"com.google.gson.Gson:127","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonParseException {\n    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n        {\n            if (json == null) {\n                {\n                    return ((T)(fromJson(json, typeOfT)));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649231/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonParseException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261649231/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":75,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
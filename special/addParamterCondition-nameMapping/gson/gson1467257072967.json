{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":10,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":224,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":335,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":9,"com.google.gson.stream.JsonWriterTest.testRepeatedName":332,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":118,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":423,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":40,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":406,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":180,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":36,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":301,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":309,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":405,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":278,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":283,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":156,"com.google.gson.JsonObjectTest.testAddingNullPropertyValue":61,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":429,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":433,"com.google.gson.functional.ObjectTest.testSingletonLists":205,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":177,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":284,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":225,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":346,"com.google.gson.stream.JsonWriterTest.testStrings":337,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":27,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":359,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":413,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":300,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":437,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":53,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":379,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":256,"com.google.gson.functional.EnumTest.testEnumCaseMapping":277,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":95,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":223,"com.google.gson.functional.JsonTreeTest.testToJsonTree":18,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":76,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":24,"com.google.gson.JsonObjectTest.testEqualsNonEmptyObject":62,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":164,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":270,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":297,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":353,"com.google.gson.internal.LinkedTreeMapTest.testLargeSetOfRandomKeys":363,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":306,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":192,"com.google.gson.internal.bind.JsonElementReaderTest.testNestedObjects":72,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":411,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":67,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":254,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":324,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":416,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":60,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":25,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":188,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":292,"com.google.gson.JsonParserTest.testParseString":56,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":298,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":75,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":139,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":215,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":41,"com.google.gson.functional.StreamingTypeAdaptersTest.testFromJsonTree":52,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":128,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":35,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":400,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":111,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":377,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":214,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":57,"com.google.gson.JsonPrimitiveTest.testEqualsAcrossTypes":92,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":320,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":409,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":121,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":443,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":130,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":264,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":28,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":6,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":179,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":172,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":444,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":323,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":399,"com.google.gson.functional.CollectionTest.testSetDeserialization":447,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":157,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":209,"com.google.gson.functional.EnumTest.testEnumSet":271,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":265,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":197,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithNestedWildcards":367,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":98,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":211,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":263,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":342,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":446,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":190,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":251,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":222,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":113,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":122,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":33,"com.google.gson.functional.MapTest.testMapSerialization":103,"com.google.gson.internal.bind.JsonElementReaderTest.testObject":74,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":114,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":2,"com.google.gson.JsonPrimitiveTest.testByteEqualsShort":91,"com.google.gson.JsonPrimitiveTest.testByteEqualsBigInteger":83,"com.google.gson.functional.MapTest.testSerializeMaps":97,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":147,"com.google.gson.functional.MapTest.testComplexKeysSerialization":110,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":8,"com.google.gson.JsonPrimitiveTest.testLongEqualsBigInteger":85,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":194,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":436,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":250,"com.google.gson.internal.LinkedTreeMapTest.testRemoveRootDoesNotDoubleUnlink":366,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":388,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":349,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":63,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":242,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":119,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithBasicWildcards":369,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":30,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":112,"com.google.gson.functional.PrettyPrintingTest.testMap":240,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":315,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":115,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":161,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":299,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":344,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":229,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":64,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":169,"com.google.gson.functional.CollectionTest.testQueueSerialization":304,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnName":375,"com.google.gson.functional.MapTest.testMapOfMapSerialization":102,"com.google.gson.stream.JsonWriterTest.testNameWithoutValue":374,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":153,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":376,"com.google.gson.functional.FieldNamingTest.testIdentity":148,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":226,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":233,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":418,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":17,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":120,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":204,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":352,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":54,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":227,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":402,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":94,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":152,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":170,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":348,"com.google.gson.functional.MapTest.testMapSubclassSerialization":96,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":326,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":435,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":317,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":340,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":42,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":398,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":262,"com.google.gson.functional.EnumTest.testEnumSubclass":274,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":412,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":322,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":29,"com.google.gson.JsonPrimitiveTest.testShortEqualsInteger":89,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":385,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":203,"com.google.gson.JsonPrimitiveTest.testByteEqualsLong":79,"com.google.gson.stream.JsonWriterTest.testTwoNames":373,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":403,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":20,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":93,"com.google.gson.internal.LinkedTreeMapTest.testEqualsAndHashCode":365,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":383,"com.google.gson.stream.JsonWriterTest.testObjectsInArrays":333,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":183,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":404,"com.google.gson.MixedStreamTest.testWriteNulls":355,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":138,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":193,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":432,"com.google.gson.JsonObjectTest.testReadPropertyWithEmptyStringName":59,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":199,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":206,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":430,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":239,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":392,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":1,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":104,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":228,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":154,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":269,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":185,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":3,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":220,"com.google.gson.JsonPrimitiveTest.testDoubleEqualsBigDecimal":81,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithTypeParameters":368,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":236,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":151,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":175,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":171,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":328,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":428,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":99,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":133,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":247,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":245,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":389,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":16,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":395,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":216,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":124,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":318,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":21,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":165,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":434,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":129,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":202,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":241,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":371,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":187,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":49,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":258,"com.google.gson.internal.LinkedTreeMapTest.testIterationOrder":364,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":358,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":144,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":273,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":303,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":325,"com.google.gson.internal.LinkedTreeMapTest.testPutOverrides":361,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":312,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":43,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":431,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":69,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":452,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":295,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":217,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":391,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":401,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":71,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":158,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":279,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":424,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":426,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":31,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":421,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":408,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":276,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":117,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":125,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":307,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":396,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":313,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":244,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":176,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":248,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":34,"com.google.gson.stream.JsonWriterTest.testNullStringValue":330,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":249,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":22,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":287,"com.google.gson.JsonPrimitiveTest.testEquals":90,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":246,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":272,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":11,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":4,"com.google.gson.functional.MapTest.testGeneralMapField":107,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":407,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":142,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":314,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":357,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":181,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":372,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":159,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":219,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":291,"com.google.gson.MixedStreamTest.testReadMixedStreamed":451,"com.google.gson.JsonObjectTest.testDeepCopy":65,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":310,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":343,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":425,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":442,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":257,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":445,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":174,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":259,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":200,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":286,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":281,"com.google.gson.stream.JsonWriterTest.testArraysInObjects":331,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":70,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":173,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":234,"com.google.gson.JsonPrimitiveTest.testFloatEqualsDouble":84,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":201,"com.google.gson.functional.ObjectTest.testNestedDeserialization":422,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":321,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":380,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":19,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":255,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":238,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":261,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":378,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":384,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":39,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":44,"com.google.gson.functional.ObjectTest.testNullSerialization":351,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":127,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":106,"com.google.gson.functional.MapTest.testInterfaceTypeMap":105,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":316,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":132,"com.google.gson.JsonObjectTest.testAddingNullOrEmptyPropertyName":68,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":275,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":294,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":387,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":160,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":253,"com.google.gson.JsonPrimitiveTest.testIntegerEqualsLong":87,"com.google.gson.MixedStreamTest.testWriteClosed":450,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":305,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":381,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":207,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":390,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":266,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":131,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":47,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":218,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":237,"com.google.gson.JsonPrimitiveTest.testShortEqualsLong":82,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":186,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":134,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":208,"com.google.gson.JsonPrimitiveTest.testShortEqualsBigInteger":78,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":439,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":282,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":386,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":308,"com.google.gson.internal.bind.JsonElementReaderTest.testSkipValue":73,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":178,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":45,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":149,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":221,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":15,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":135,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":195,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":46,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":184,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":440,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":100,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":417,"com.google.gson.stream.JsonWriterTest.testDeepNestingObjects":336,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":168,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":293,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":420,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":302,"com.google.gson.functional.MapTest.testRawMapSerialization":109,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":339,"com.google.gson.JsonParserTest.testParseReader":55,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":296,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":123,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":212,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":7,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":354,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":58,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":137,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":189,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":12,"com.google.gson.ObjectTypeAdapterTest.testSerialize":345,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":289,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromRawTypes":370,"com.google.gson.JsonPrimitiveTest.testEqualsIntegerAndBigInteger":80,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":37,"com.google.gson.JsonPrimitiveTest.testFloatEqualsBigDecimal":77,"com.google.gson.JsonPrimitiveTest.testByteEqualsInteger":86,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":141,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":145,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":267,"com.google.gson.functional.MapTest.testMapWithQuotes":101,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":162,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":196,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":14,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":155,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":48,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":260,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":419,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":243,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":166,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":143,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":410,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":356,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":163,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":38,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":167,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":280,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":350,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":50,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":136,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":182,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":126,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":235,"com.google.gson.JsonPrimitiveTest.testIntegerEqualsBigInteger":88,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":327,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":51,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":32,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":414,"com.google.gson.JsonObjectTest.testAddingStringProperties":66,"com.google.gson.functional.ObjectTest.testNestedSerialization":213,"com.google.gson.internal.LinkedTreeMapTest.testClear":362,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":288,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":290,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":285,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":108,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":5,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":232,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":329,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":341,"com.google.gson.stream.JsonWriterTest.testUnicodeLineBreaksEscaped":338,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":210,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":23,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":441,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":397,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":394,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":415,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":438,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":230,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":140,"com.google.gson.functional.CollectionTest.testSetSerialization":311,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":448,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":198,"com.google.gson.functional.StringTest.testStringValueSerialization":231,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":116,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":150,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":382,"com.google.gson.MixedStreamTest.testWriteInvalidState":449,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":393,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":319,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":26,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":146,"com.google.gson.ObjectTypeAdapterTest.testDeserialize":360,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":191,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":0,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":427,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":252,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":268,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":347,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":13,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":334},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[0],"tindex":"29cc56ae-3e72-11e6-8e61-25114df3a7ac","method":{"position":"com.google.gson.JsonObject:111","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Character value) {\n    if (property == null) {\n        {\n            add(property, createJsonElement(value));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256409526/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,0,61,62,63,64,65,66,67,68,69,70,71,72,73,74],"tindex":"29cca4cf-3e72-11e6-8e61-edd3700be3d2","method":{"position":"com.google.gson.JsonObject:53","type":"CtMethodImpl","sourcecode":"public void add(java.lang.String property, com.google.gson.JsonElement value) {\n    if (property == null) {\n        {\n            if (value == null) {\n                value = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.put(property, value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256409526/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:122","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"29cccbe0-3e72-11e6-8e61-ff53777b7402","method":{"position":"com.google.gson.internal.$Gson$Types:431","type":"CtMethodImpl","sourcecode":"private static void checkNotPrimitive(java.lang.reflect.Type type) {\n    com.google.gson.internal.$Gson$Preconditions.checkArgument(((!(type instanceof java.lang.Class<?>)) || (!(((java.lang.Class<?>)(type)).isPrimitive()))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"29cccbe1-3e72-11e6-8e61-d3a11fd15f11","method":{"position":"com.google.gson.Gson:695","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.lang.String json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256409526/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (json == null) {\n                {\n                    java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n                    return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256409526/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:111","type":"CtInvocationImpl","sourcecode":"primitive.isString()"},"failures":[15,18,25,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92],"tindex":"29cccbe2-3e72-11e6-8e61-5fbd9ab25496","method":{"position":"com.google.gson.JsonPrimitive:333","type":"CtMethodImpl","sourcecode":"private static boolean isIntegral(com.google.gson.JsonPrimitive primitive) {\n    if (primitive.isString()) {\n        {\n            if (primitive.isString()) {\n                {\n                    if ((primitive.java.lang.Object) instanceof java.lang.Number) {\n                        java.lang.Number java.lang.Number = ((java.lang.Number)(primitive.java.lang.Object));\n                        return ((((number instanceof java.math.BigInteger) || (number instanceof java.lang.Long)) || (number instanceof java.lang.Integer)) || (number instanceof java.lang.Short)) || (number instanceof java.lang.Byte);\n                    } \n                    return false;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256409526/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256409526/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"primitive"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[93,94,95,3,5,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,9,113,114,115,116,12,13,117,118,119,120,121,122,123,124,125,126,127,128,129,14,16,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,26,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,27,190,191,192,193,194,195,196,197,29,30,31,198,199,200,32,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,33,34,35,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,49,249,250,251,252,253,254,255,256,257,258,259,260,50,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,53,321,322,323,324,325,326,327,57,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,60,67,345,346,69,70,71],"tindex":"29ccf2f3-3e72-11e6-8e61-3b6035cfcdaa","method":{"position":"com.google.gson.stream.JsonWriter:532","type":"CtMethodImpl","sourcecode":"private void string(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                {\n                    java.lang.String[] java.lang.String[] = boolean ? com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[] : com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[];\n                    java.io.Writer.write(\"\\\"\");\n                    int int = 0;\n                    int int = value.length();\n                    for (int int = 0 ; i < length ; i++) {\n                        char char = value.charAt(i);\n                        java.lang.String java.lang.String;\n                        if (c < 128) {\n                            replacement = replacements[c];\n                            if (replacement == null) {\n                                continue;\n                            } \n                        } else if (c == '\\u2028') {\n                            replacement = \"\\\\u2028\";\n                        } else if (c == '\\u2029') {\n                            replacement = \"\\\\u2029\";\n                        } else {\n                            continue;\n                        }\n                        if (last < i) {\n                            java.io.Writer.write(value, last, (i - last));\n                        } \n                        java.io.Writer.write(replacement);\n                        last = i + 1;\n                    }\n                    if (last < length) {\n                        java.io.Writer.write(value, last, (length - last));\n                    } \n                    java.io.Writer.write(\"\\\"\");\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256409526/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256409526/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.TreeTypeAdapter:55","type":"CtInvocationImpl","sourcecode":"value.isJsonNull()"},"failures":[12,13,347,348,349,350,351,352,353,49,354,355,71],"tindex":"29cd1a04-3e72-11e6-8e61-0fb058dc5d4a","method":{"position":"com.google.gson.internal.bind.TypeAdapters:680","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, com.google.gson.JsonElement value) throws java.io.IOException {\n    if (value.isJsonNull()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256409526/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if ((value == null) || (value.isJsonNull())) {\n                out.nullValue();\n            } else if (value.isJsonPrimitive()) {\n                com.google.gson.JsonPrimitive com.google.gson.JsonPrimitive = value.getAsJsonPrimitive();\n                if (primitive.isNumber()) {\n                    out.value(primitive.getAsNumber());\n                } else if (primitive.isBoolean()) {\n                    out.value(primitive.getAsBoolean());\n                } else {\n                    out.value(primitive.getAsString());\n                }\n            } else if (value.isJsonArray()) {\n                out.beginArray();\n                for (com.google.gson.JsonElement com.google.gson.JsonElement : value.getAsJsonArray()) {\n                    write(out, e);\n                }\n                out.endArray();\n            } else if (value.isJsonObject()) {\n                out.beginObject();\n                for (java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> : value.getAsJsonObject().entrySet()) {\n                    out.name(e.getKey());\n                    write(out, e.getValue());\n                }\n                out.endObject();\n            } else {\n                throw new java.lang.IllegalArgumentException((\"Couldn't write \" + (value.getClass())));\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:105","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonObject"},"failures":[],"tindex":"29cd4115-3e72-11e6-8e61-ff8c095ed8fc","method":{"position":"com.google.gson.internal.$Gson$Types:511","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    return (o instanceof java.lang.reflect.GenericArrayType) && (com.google.gson.internal.$Gson$Types.equals(com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl.this, ((java.lang.reflect.GenericArrayType)(o))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:109","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonPrimitive"},"failures":[],"tindex":"29cd4116-3e72-11e6-8e61-1f9378564ef3","method":{"position":"com.google.gson.internal.LinkedTreeMap:481","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"rawtypes\")\n@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonPrimitive) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256409526/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof java.util.Map.Entry) {\n                java.util.Map.Entry java.util.Map.Entry = ((java.util.Map.Entry)(o));\n                return ((K) == null ? (other.getKey()) == null : K.equals(other.getKey())) && ((V) == null ? (other.getValue()) == null : V.equals(other.getValue()));\n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[93,94,3,5,100,105,106,107,9,113,10,114,115,116,118,119,120,121,122,123,124,125,126,127,128,129,14,15,16,17,18,19,20,21,130,131,132,22,23,133,134,24,142,144,145,146,147,148,149,150,151,152,153,154,155,156,157,174,356,186,27,190,191,192,193,194,195,29,31,198,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,33,34,35,36,37,38,39,232,233,234,235,236,237,238,239,46,47,241,242,243,244,246,247,248,249,250,260,261,262,263,264,265,266,267,268,269,270,275,279,280,281,282,284,286,287,288,289,292,293,294,295,296,297,298,300,301,303,307,309,311,317,319,320,53,322,357,323,324,325,326,327,57,339,340,342,345],"tindex":"29cd4117-3e72-11e6-8e61-e30d3617e648","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:108","type":"CtMethodImpl","sourcecode":"public boolean writeField(java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value == null) {\n        {\n            if (!(boolean))\n                return false;\n            \n            java.lang.Object java.lang.Object = field.get(value);\n            return fieldValue != value;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256409526/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[127,358],"tindex":"29cd6828-3e72-11e6-8e61-cd05ff87e275","method":{"position":"com.google.gson.Gson:261","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256409526/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            double double = value.doubleValue();\n            checkValidFloatingPoint(doubleValue);\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:105","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonObject"},"failures":[],"tindex":"29cd6829-3e72-11e6-8e61-3b07151903c7","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:804","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonObject) {\n        {\n            return (o instanceof java.util.Map.Entry) && ((findByEntry(((java.util.Map.Entry<?, ?>)(o)))) != null);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256409526/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:189","type":"CtUnaryOperatorImpl","sourcecode":"!(b instanceof java.lang.reflect.WildcardType)"},"failures":[],"tindex":"29cd682a-3e72-11e6-8e61-652d26e8486f","method":{"position":"com.google.gson.internal.LinkedTreeMap:207","type":"CtMethodImpl","sourcecode":"private boolean equal(java.lang.Object a, java.lang.Object b) {\n    if (!(b instanceof java.lang.reflect.WildcardType)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256409526/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (a == b) || ((a != null) && (a.equals(b)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"29cd8f3b-3e72-11e6-8e61-b5392f123ca2","method":{"position":"com.google.gson.Gson:695","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.lang.String json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256409526/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (json == null) {\n                {\n                    java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n                    return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256409526/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:105","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonObject"},"failures":[],"tindex":"29cd8f3c-3e72-11e6-8e61-5138fe5b5df5","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:512","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"rawtypes\")\n@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256409526/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof java.util.Map.Entry) {\n                java.util.Map.Entry java.util.Map.Entry = ((java.util.Map.Entry)(o));\n                return ((K) == null ? (other.getKey()) == null : K.equals(other.getKey())) && ((V) == null ? (other.getValue()) == null : V.equals(other.getValue()));\n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:278","type":"CtBinaryOperatorImpl","sourcecode":"node != null"},"failures":[10,11,15,16,17,18,27,42,43,359,53,57,63,360,361,362,363,364,365,366],"tindex":"29cd8f3d-3e72-11e6-8e61-99c5d193573d","method":{"position":"com.google.gson.internal.LinkedTreeMap:284","type":"CtMethodImpl","sourcecode":"private void replaceInParent(com.google.gson.internal.LinkedTreeMap.Node<K, V> node, com.google.gson.internal.LinkedTreeMap.Node<K, V> replacement) {\n    if (node != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256409526/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n            if (replacement != null) {\n                replacement.com.google.gson.internal.LinkedTreeMap.Node<K, V> = parent;\n            } \n            if (parent != null) {\n                if ((parent.com.google.gson.internal.LinkedTreeMap.Node<K, V>) == node) {\n                    parent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                } else {\n                    assert (parent.com.google.gson.internal.LinkedTreeMap.Node<K, V>) == node;\n                    parent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                }\n            } else {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"node"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:123","type":"CtBinaryOperatorImpl","sourcecode":"from == null"},"failures":[],"tindex":"29cdb64e-3e72-11e6-8e61-b975efcc1110","method":{"position":"com.google.gson.reflect.TypeToken:160","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.GenericArrayType to) {\n    if (from == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256409526/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.reflect.Type java.lang.reflect.Type = to.getGenericComponentType();\n            if (toGenericComponentType instanceof java.lang.reflect.ParameterizedType) {\n                java.lang.reflect.Type java.lang.reflect.Type = from;\n                if (from instanceof java.lang.reflect.GenericArrayType) {\n                    t = ((java.lang.reflect.GenericArrayType)(from)).getGenericComponentType();\n                } else if (from instanceof java.lang.Class<?>) {\n                    java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(from));\n                    while (classType.isArray()) {\n                        classType = classType.getComponentType();\n                    }\n                    t = classType;\n                } \n                return com.google.gson.reflect.TypeToken.isAssignableFrom(t, ((java.lang.reflect.ParameterizedType)(toGenericComponentType)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n            } \n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:141","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.WildcardType"},"failures":[],"tindex":"29cdb64f-3e72-11e6-8e61-35372cba76b4","method":{"position":"com.google.gson.internal.$Gson$Types:431","type":"CtMethodImpl","sourcecode":"private static void checkNotPrimitive(java.lang.reflect.Type type) {\n    com.google.gson.internal.$Gson$Preconditions.checkArgument(((!(type instanceof java.lang.Class<?>)) || (!(((java.lang.Class<?>)(type)).isPrimitive()))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"29cdb650-3e72-11e6-8e61-331de818ffc9","method":{"position":"com.google.gson.Gson:591","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    if (src != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256409526/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            if (src == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256409526/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            } else {\n                {\n                    com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = getAdapter(com.google.gson.reflect.TypeToken.get(typeOfSrc));\n                    boolean boolean = writer.isLenient();\n                    writer.setLenient(true);\n                    boolean boolean = writer.isHtmlSafe();\n                    writer.setHtmlSafe(boolean);\n                    boolean boolean = writer.getSerializeNulls();\n                    writer.setSerializeNulls(boolean);\n                    try {\n                        ((com.google.gson.TypeAdapter<java.lang.Object>)(adapter)).write(writer, src);\n                    } catch (java.io.IOException e) {\n                        throw new com.google.gson.JsonIOException(e);\n                    } finally {\n                        writer.setLenient(oldLenient);\n                        writer.setHtmlSafe(oldHtmlSafe);\n                        writer.setSerializeNulls(oldSerializeNulls);\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:188","type":"CtBinaryOperatorImpl","sourcecode":"from == null"},"failures":[367,368,369,370],"tindex":"29cdb651-3e72-11e6-8e61-f7c58fa9badc","method":{"position":"com.google.gson.reflect.TypeToken:122","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic boolean isAssignableFrom(java.lang.reflect.Type from) {\n    if (from == null) {\n        {\n            if (from == null) {\n                return false;\n            } \n            if (java.lang.reflect.Type.equals(from)) {\n                return true;\n            } \n            if ((java.lang.reflect.Type) instanceof java.lang.Class<?>) {\n                return java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from));\n            } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.ParameterizedType) {\n                return com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n            } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.GenericArrayType) {\n                return (java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from))) && (com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.GenericArrayType)(java.lang.reflect.Type))));\n            } else {\n                throw com.google.gson.reflect.TypeToken.buildUnexpectedTypeError(java.lang.reflect.Type, java.lang.Class.java.lang.Class.java.lang.Class, java.lang.reflect.ParameterizedType.java.lang.reflect.ParameterizedType.java.lang.Class, java.lang.reflect.GenericArrayType.java.lang.reflect.GenericArrayType.java.lang.Class);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256409526/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:107","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonArray"},"failures":[],"tindex":"29cddd62-3e72-11e6-8e61-4f0f3b487391","method":{"position":"com.google.gson.internal.$Gson$Types:511","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    return (o instanceof java.lang.reflect.GenericArrayType) && (com.google.gson.internal.$Gson$Types.equals(com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl.this, ((java.lang.reflect.GenericArrayType)(o))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[93,94,3,5,96,97,98,99,100,101,102,103,371,104,105,372,106,107,108,109,110,111,112,9,113,114,115,116,12,13,118,119,120,121,122,123,124,125,126,127,128,129,14,16,130,131,132,133,134,142,144,145,146,147,148,149,150,151,152,153,154,155,156,157,26,173,174,176,179,356,186,27,190,191,192,193,194,195,29,30,31,198,199,32,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,33,34,35,232,233,234,235,236,237,238,239,240,241,242,243,244,246,247,248,49,249,250,260,50,261,262,263,264,265,266,267,268,269,270,275,279,280,281,282,284,286,287,288,289,292,293,294,295,296,297,298,299,300,301,303,307,309,311,313,317,319,320,53,322,323,324,325,326,327,57,373,374,330,331,332,333,334,335,336,375,339,340,342,60,67,345,346,69,70,71],"tindex":"29cddd63-3e72-11e6-8e61-953ed231885f","method":{"position":"com.google.gson.stream.JsonWriter:385","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter name(java.lang.String name) throws java.io.IOException {\n    if (name == null) {\n        {\n            if (name == null) {\n                {\n                    if (name == null) {\n                        throw new java.lang.NullPointerException(\"name == null\");\n                    } \n                    if ((java.lang.String) != null) {\n                        throw new java.lang.IllegalStateException();\n                    } \n                    if ((int) == 0) {\n                        throw new java.lang.IllegalStateException(\"JsonWriter is closed.\");\n                    } \n                    java.lang.String = name;\n                    return com.google.gson.stream.JsonWriter.this;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256409526/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256409526/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[],"tindex":"29cddd64-3e72-11e6-8e61-0798487078ad","method":{"position":"com.google.gson.stream.JsonWriter:385","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter name(java.lang.String name) throws java.io.IOException {\n    if (name == null) {\n        {\n            if (name == null) {\n                {\n                    if (name == null) {\n                        throw new java.lang.NullPointerException(\"name == null\");\n                    } \n                    if ((java.lang.String) != null) {\n                        throw new java.lang.IllegalStateException();\n                    } \n                    if ((int) == 0) {\n                        throw new java.lang.IllegalStateException(\"JsonWriter is closed.\");\n                    } \n                    java.lang.String = name;\n                    return com.google.gson.stream.JsonWriter.this;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256409526/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256409526/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[376,377,378],"tindex":"29ce0475-3e72-11e6-8e61-f99eb31d8e9b","method":{"position":"com.google.gson.internal.bind.TypeAdapters:282","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256409526/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:92","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof java.util.Iterator"},"failures":[],"tindex":"29ce0476-3e72-11e6-8e61-4f6a47ffc844","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:839","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof java.util.Iterator) {\n        {\n            return containsKey(o);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256409526/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[93,94,2,3,4,5,7,100,379,105,106,107,110,9,113,10,114,380,115,381,11,116,118,119,382,383,120,121,122,123,124,384,125,126,127,385,386,128,387,129,388,389,14,15,16,17,18,19,20,21,130,131,132,22,23,390,391,133,134,24,142,392,393,144,145,146,147,148,149,150,151,152,153,154,155,156,157,394,395,396,358,397,174,356,186,398,27,190,191,192,193,194,399,195,400,401,29,31,198,202,402,403,203,204,205,404,405,206,406,407,207,408,409,208,410,209,411,210,412,413,211,414,212,213,415,214,416,417,215,418,216,217,419,218,420,421,422,423,424,33,425,34,35,36,37,38,39,40,41,42,43,44,232,426,233,234,235,427,236,237,238,239,46,47,241,242,243,244,428,429,246,247,430,248,249,250,431,260,432,261,262,263,264,265,433,266,267,268,434,269,435,270,275,436,279,437,438,280,281,439,440,282,441,442,284,443,286,287,288,444,445,446,289,292,293,301,303,307,447,309,311,317,319,320,53,322,357,448,323,324,325,326,327,57,339,340,449,450,451,452,342,345],"tindex":"29ce0477-3e72-11e6-8e61-914bc0e0004c","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:86","type":"CtMethodImpl","sourcecode":"private com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField createBoundField(final com.google.gson.Gson context, final java.lang.reflect.Field field, final java.lang.String name, final com.google.gson.reflect.TypeToken<?> fieldType, boolean serialize, boolean deserialize) {\n    if (field.isSynthetic()) {\n        {\n            final boolean boolean = com.google.gson.internal.Primitives.isPrimitive(fieldType.getRawType());\n            return new com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField(name, serialize, deserialize) {\n                final com.google.gson.TypeAdapter<?> typeAdapter = getFieldAdapter(context, field, fieldType);\n\n                @java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n                @java.lang.Override\n                void write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                    java.lang.Object java.lang.Object = field.get(value);\n                    com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n                    t.write(writer, fieldValue);\n                }\n\n                @java.lang.Override\n                void read(com.google.gson.stream.JsonReader reader, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                    java.lang.Object java.lang.Object = com.google.gson.TypeAdapter<?>.read(reader);\n                    if ((fieldValue != null) || (!isPrimitive)) {\n                        field.set(value, fieldValue);\n                    } \n                }\n\n                public boolean writeField(java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                    if (!(boolean))\n                        return false;\n                    \n                    java.lang.Object java.lang.Object = field.get(value);\n                    return fieldValue != value;\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256409526/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"field"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"29ce2b88-3e72-11e6-8e61-df43ead965b0","method":{"position":"com.google.gson.stream.JsonWriter:532","type":"CtMethodImpl","sourcecode":"private void string(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                {\n                    java.lang.String[] java.lang.String[] = boolean ? com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[] : com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[];\n                    java.io.Writer.write(\"\\\"\");\n                    int int = 0;\n                    int int = value.length();\n                    for (int int = 0 ; i < length ; i++) {\n                        char char = value.charAt(i);\n                        java.lang.String java.lang.String;\n                        if (c < 128) {\n                            replacement = replacements[c];\n                            if (replacement == null) {\n                                continue;\n                            } \n                        } else if (c == '\\u2028') {\n                            replacement = \"\\\\u2028\";\n                        } else if (c == '\\u2029') {\n                            replacement = \"\\\\u2029\";\n                        } else {\n                            continue;\n                        }\n                        if (last < i) {\n                            java.io.Writer.write(value, last, (i - last));\n                        } \n                        java.io.Writer.write(replacement);\n                        last = i + 1;\n                    }\n                    if (last < length) {\n                        java.io.Writer.write(value, last, (length - last));\n                    } \n                    java.io.Writer.write(\"\\\"\");\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256409526/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256409526/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:198","type":"CtBinaryOperatorImpl","sourcecode":"out == null"},"failures":[244,246,247,250,260,262,263,267,268],"tindex":"29ce2b89-3e72-11e6-8e61-bfc46df0f98f","method":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:84","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Object array) throws java.io.IOException {\n    if (array == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256409526/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (array == null) {\n                out.nullValue();\n                return ;\n            } \n            out.beginArray();\n            for (int int = 0, int int = java.lang.reflect.Array.getLength(array) ; i < length ; i++) {\n                E E = ((E)(java.lang.reflect.Array.get(array, i)));\n                com.google.gson.TypeAdapter<E>.write(out, value);\n            }\n            out.endArray();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:137","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonObject"},"failures":[],"tindex":"29ce2b8a-3e72-11e6-8e61-e705086d3f99","method":{"position":"com.google.gson.JsonArray:115","type":"CtMethodImpl","sourcecode":"public boolean contains(com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256409526/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return java.util.List<com.google.gson.JsonElement>.contains(element);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:79","type":"CtUnaryOperatorImpl","sourcecode":"!(json instanceof com.google.gson.JsonPrimitive)"},"failures":[],"tindex":"29ce529b-3e72-11e6-8e61-ebba567bf7d2","method":{"position":"com.google.gson.Gson:871","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n        {\n            if (json == null) {\n                return null;\n            } \n            return ((T)(fromJson(new com.google.gson.internal.bind.JsonTreeReader(json), typeOfT)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256409526/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1413","type":"CtVariableReadImpl","sourcecode":"throwOnEof"},"failures":[],"tindex":"29ce529c-3e72-11e6-8e61-a7ba21236640","method":{"position":"com.google.gson.stream.JsonReader:1331","type":"CtMethodImpl","sourcecode":"private int nextNonWhitespace(boolean throwOnEof) throws java.io.IOException {\n    if (throwOnEof) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256409526/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            char[] char[] = com.google.gson.stream.JsonReader.this.char[];\n            int int = int;\n            int int = int;\n            while (true) {\n                if (p == l) {\n                    int = p;\n                    if (!(fillBuffer(1))) {\n                        break;\n                    } \n                    p = int;\n                    l = int;\n                } \n                int int = buffer[(p++)];\n                if (c == '\\n') {\n                    (int)++;\n                    int = p;\n                    continue;\n                } else if (((c == ' ') || (c == '\\r')) || (c == '\\t')) {\n                    continue;\n                } \n                if (c == '/') {\n                    int = p;\n                    if (p == l) {\n                        (int)--;\n                        boolean boolean = fillBuffer(2);\n                        (int)++;\n                        if (!charsLoaded) {\n                            return c;\n                        } \n                    } \n                    checkLenient();\n                    char char = buffer[int];\n                    switch (peek) {\n                        case '*' :\n                            (int)++;\n                            if (!(skipTo(\"*/\"))) {\n                                throw syntaxError(\"Unterminated comment\");\n                            } \n                            p = (int) + 2;\n                            l = int;\n                            continue;\n                        case '/' :\n                            (int)++;\n                            skipToEndOfLine();\n                            p = int;\n                            l = int;\n                            continue;\n                        default :\n                            return c;\n                    }\n                } else if (c == '#') {\n                    int = p;\n                    checkLenient();\n                    skipToEndOfLine();\n                    p = int;\n                    l = int;\n                } else {\n                    int = p;\n                    return c;\n                }\n            }\n            if (throwOnEof) {\n                throw new java.io.EOFException(((((\"End of input\" + \" at line \") + (getLineNumber())) + \" column \") + (getColumnNumber())));\n            } else {\n                return -1;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"throwOnEof":"throwOnEof"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:92","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof java.util.Iterator"},"failures":[],"tindex":"29ce529d-3e72-11e6-8e61-8da3932d2c1b","method":{"position":"com.google.gson.internal.LinkedTreeMap:605","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof java.util.Iterator) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256409526/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return containsKey(o);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"29ce79ae-3e72-11e6-8e61-fd7655e982f4","method":{"position":"com.google.gson.Gson:719","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.lang.String json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256409526/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (json == null) {\n                {\n                    if (json == null) {\n                        return null;\n                    } \n                    java.io.StringReader java.io.StringReader = new java.io.StringReader(json);\n                    T T = ((T)(fromJson(reader, typeOfT)));\n                    return target;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256409526/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"29ce79af-3e72-11e6-8e61-39d2e50e14ee","method":{"position":"com.google.gson.Gson:719","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.lang.String json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256409526/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (json == null) {\n                {\n                    if (json == null) {\n                        return null;\n                    } \n                    java.io.StringReader java.io.StringReader = new java.io.StringReader(json);\n                    T T = ((T)(fromJson(reader, typeOfT)));\n                    return target;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256409526/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:430","type":"CtFieldReadImpl","sourcecode":"serializeNulls"},"failures":[],"tindex":"29ce79b0-3e72-11e6-8e61-7f6920c2f80e","method":{"position":"com.google.gson.stream.JsonWriter:268","type":"CtMethodImpl","sourcecode":"public final void setSerializeNulls(boolean serializeNulls) {\n    if (serializeNulls) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256409526/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = serializeNulls;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeNulls":"serializeNulls"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:391","type":"CtUnaryOperatorImpl","sourcecode":"!insert"},"failures":[],"tindex":"29ce79b1-3e72-11e6-8e61-1b7768eaa261","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:338","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (!insert) {\n        {\n            for (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) {\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                int int = left != null ? left.int : 0;\n                int int = right != null ? right.int : 0;\n                int int = leftHeight - rightHeight;\n                if (delta == (-2)) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    int int = rightRight != null ? rightRight.int : 0;\n                    int int = rightLeft != null ? rightLeft.int : 0;\n                    int int = rightLeftHeight - rightRightHeight;\n                    if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                        rotateLeft(node);\n                    } else {\n                        assert rightDelta == 1;\n                        rotateRight(right);\n                        rotateLeft(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 2) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    int int = leftRight != null ? leftRight.int : 0;\n                    int int = leftLeft != null ? leftLeft.int : 0;\n                    int int = leftLeftHeight - leftRightHeight;\n                    if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                        rotateRight(node);\n                    } else {\n                        assert leftDelta == (-1);\n                        rotateLeft(left);\n                        rotateRight(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 0) {\n                    node.int = leftHeight + 1;\n                    if (insert) {\n                        break;\n                    } \n                } else {\n                    assert (delta == (-1)) || (delta == 1);\n                    node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                    if (!insert) {\n                        break;\n                    } \n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256409526/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"insert"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:111","type":"CtInvocationImpl","sourcecode":"primitive.isString()"},"failures":[],"tindex":"29cea0c2-3e72-11e6-8e61-b13626766fc2","method":{"position":"com.google.gson.JsonPrimitive:333","type":"CtMethodImpl","sourcecode":"private static boolean isIntegral(com.google.gson.JsonPrimitive primitive) {\n    if (primitive.isString()) {\n        {\n            if (primitive.isString()) {\n                {\n                    if ((primitive.java.lang.Object) instanceof java.lang.Number) {\n                        java.lang.Number java.lang.Number = ((java.lang.Number)(primitive.java.lang.Object));\n                        return ((((number instanceof java.math.BigInteger) || (number instanceof java.lang.Long)) || (number instanceof java.lang.Integer)) || (number instanceof java.lang.Short)) || (number instanceof java.lang.Byte);\n                    } \n                    return false;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256409526/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256409526/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"primitive"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonArray:58","type":"CtBinaryOperatorImpl","sourcecode":"element == null"},"failures":[],"tindex":"29cea0c3-3e72-11e6-8e61-91fd43e3ece4","method":{"position":"com.google.gson.JsonArray:92","type":"CtMethodImpl","sourcecode":"public boolean remove(com.google.gson.JsonElement element) {\n    if (element == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256409526/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return java.util.List<com.google.gson.JsonElement>.remove(element);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[],"tindex":"29cea0c4-3e72-11e6-8e61-d9882536d494","method":{"position":"com.google.gson.Gson:591","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    if (src != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256409526/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            if (src == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256409526/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            } else {\n                {\n                    com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = getAdapter(com.google.gson.reflect.TypeToken.get(typeOfSrc));\n                    boolean boolean = writer.isLenient();\n                    writer.setLenient(true);\n                    boolean boolean = writer.isHtmlSafe();\n                    writer.setHtmlSafe(boolean);\n                    boolean boolean = writer.getSerializeNulls();\n                    writer.setSerializeNulls(boolean);\n                    try {\n                        ((com.google.gson.TypeAdapter<java.lang.Object>)(adapter)).write(writer, src);\n                    } catch (java.io.IOException e) {\n                        throw new com.google.gson.JsonIOException(e);\n                    } finally {\n                        writer.setLenient(oldLenient);\n                        writer.setHtmlSafe(oldHtmlSafe);\n                        writer.setSerializeNulls(oldSerializeNulls);\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:578","type":"CtBinaryOperatorImpl","sourcecode":"root == null"},"failures":[],"tindex":"29cec7d5-3e72-11e6-8e61-c7a328d41654","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:429","type":"CtMethodImpl","sourcecode":"private void rotateRight(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root == null) {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivotRight;\n            if (pivotRight != null) {\n                pivotRight.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            } \n            replaceInParent(root, pivot);\n            pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot;\n            root.int = (java.lang.Math.max((right != null ? right.int : 0), (pivotRight != null ? pivotRight.int : 0))) + 1;\n            pivot.int = (java.lang.Math.max(root.int, (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256409526/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"29cec7d6-3e72-11e6-8e61-c70f3ac00df8","method":{"position":"com.google.gson.Gson:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            out.value(value.toString());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256409526/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":41,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":348,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":172,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":151,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":0,"com.google.gson.MixedStreamTest.testWriteLenient":357,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":370,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":106,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":343,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":186,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":196,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":35,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":303,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":120,"com.google.gson.JsonObjectTest.testAddingNullPropertyValue":392,"com.google.gson.functional.ObjectTest.testSingletonLists":60,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":36,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":102,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":173,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":78,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":422,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":319,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":401,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":37,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":122,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":415,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":310,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":48,"com.google.gson.functional.EnumTest.testEnumCaseMapping":302,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":171,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":315,"com.google.gson.functional.JsonTreeTest.testToJsonTree":340,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":127,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":327,"com.google.gson.JsonObjectTest.testEqualsNonEmptyObject":393,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":86,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":328,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":289,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":193,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":54,"com.google.gson.internal.bind.JsonElementReaderTest.testNestedObjects":384,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":274,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":363,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":67,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":46,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":247,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":362,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":118,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":115,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":368,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":169,"com.google.gson.JsonParserTest.testParseString":383,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":266,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":260,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":73,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":232,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":101,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":371,"com.google.gson.functional.StreamingTypeAdaptersTest.testFromJsonTree":366,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":161,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":242,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":424,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":409,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":149,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":267,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":72,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":228,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":223,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":317,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":4,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":252,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":5,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":28,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":364,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":105,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":378,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":96,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":408,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":246,"com.google.gson.JsonArrayTest.testEqualsNonEmptyArray":399,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":410,"com.google.gson.functional.CollectionTest.testSetDeserialization":421,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":121,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":64,"com.google.gson.functional.EnumTest.testEnumSet":296,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":29,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":12,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":133,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":68,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":27,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":309,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":43,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":335,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":270,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":224,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":154,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":283,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":240,"com.google.gson.functional.MapTest.testMapSerialization":138,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":285,"com.google.gson.internal.bind.JsonElementReaderTest.testObject":386,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":376,"com.google.gson.functional.MapTest.testSerializeMaps":132,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":205,"com.google.gson.functional.MapTest.testComplexKeysSerialization":147,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":369,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":239,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":56,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":295,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":418,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":333,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":125,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":394,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":1,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":14,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":278,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":150,"com.google.gson.functional.PrettyPrintingTest.testMap":123,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":211,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":189,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":83,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":286,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":318,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":177,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":93,"com.google.gson.functional.MapTest.testMapSerializationEmpty":148,"com.google.gson.functional.CollectionTest.testQueueSerialization":190,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":395,"com.google.gson.functional.MapTest.testMapOfMapSerialization":137,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":258,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":184,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":263,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":20,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictBoxedNansAndInfinities":361,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":174,"com.google.gson.functional.FieldNamingTest.testIdentity":206,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":39,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":3,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":59,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":339,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":345,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":311,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":175,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":244,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":261,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":314,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":94,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":183,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":337,"com.google.gson.functional.MapTest.testMapSubclassSerialization":131,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":277,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":164,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":213,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":304,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":354,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":372,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":26,"com.google.gson.functional.EnumTest.testEnumSubclass":299,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":264,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":320,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":248,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":243,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":13,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":416,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":153,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":323,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":313,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":259,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":405,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":110,"com.google.gson.MixedStreamTest.testWriteNulls":355,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":234,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":230,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":55,"com.google.gson.JsonObjectTest.testReadPropertyWithEmptyStringName":390,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":17,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":61,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":219,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":375,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":140,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":176,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":117,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":33,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":112,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":276,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":207,"com.google.gson.JsonParserTest.testParseMixedArray":400,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":251,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":216,"com.google.gson.internal.bind.JsonTreeWriterTest.testWriteAfterClose":425,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":255,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":182,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":99,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":271,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":95,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":128,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":130,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":8,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":134,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":291,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":288,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":419,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":116,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":413,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":66,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":74,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":156,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":214,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":324,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":87,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":152,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":162,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":124,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":139,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":351,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":114,"com.google.gson.functional.PrimitiveTest.testShortSerialization":275,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":293,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":50,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictNansAndInfinities":360,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":268,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":336,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":202,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":298,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":188,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":163,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":200,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":279,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":373,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":387,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":282,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":2,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":75,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":407,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":79,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":305,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":389,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":15,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":301,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":158,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":201,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":194,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":209,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":287,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":100,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":292,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":90,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":241,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":294,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":325,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":262,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":280,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":220,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":290,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":297,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":380,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":377,"com.google.gson.functional.MapTest.testGeneralMapField":144,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":227,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":210,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":236,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":245,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":107,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":142,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":80,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":168,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":250,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":269,"com.google.gson.JsonObjectTest.testDeepCopy":396,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":256,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":197,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":312,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":49,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":98,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":185,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":18,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":281,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":52,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":307,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":388,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":97,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":40,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":22,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":38,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":71,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":322,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":47,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":218,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":25,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":273,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":157,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":347,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":374,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":199,"com.google.gson.functional.ObjectTest.testNullSerialization":332,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":160,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":143,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":249,"com.google.gson.functional.MapTest.testInterfaceTypeMap":141,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":212,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":7,"com.google.gson.JsonObjectTest.testAddingNullOrEmptyPropertyName":398,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":34,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":300,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":215,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":81,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":45,"com.google.gson.MixedStreamTest.testWriteClosed":359,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":192,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":62,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":406,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":30,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":6,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":342,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":76,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":217,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":113,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":9,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":63,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":191,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":403,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":308,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":417,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":195,"com.google.gson.internal.bind.JsonElementReaderTest.testSkipValue":385,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":103,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":367,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":180,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":254,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":338,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":57,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":225,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":341,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":257,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":284,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":111,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":135,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":92,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":170,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":187,"com.google.gson.functional.MapTest.testRawMapSerialization":146,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":353,"com.google.gson.JsonParserTest.testParseReader":382,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":69,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":155,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":379,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":349,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":350,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":77,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":229,"com.google.gson.functional.PrimitiveTest.testByteSerialization":272,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":352,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":329,"com.google.gson.ObjectTypeAdapterTest.testSerialize":423,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":166,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":344,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":235,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":203,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":31,"com.google.gson.functional.MapTest.testMapWithQuotes":136,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":84,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":11,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":21,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":42,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":82,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":119,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":381,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":23,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":129,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":89,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":265,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":238,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":411,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":108,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":85,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":91,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":306,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":346,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":334,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":420,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":24,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":109,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":226,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":159,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":41,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":165,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":365,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":19,"com.google.gson.functional.ObjectTest.testNestedSerialization":70,"com.google.gson.JsonObjectTest.testAddingStringProperties":397,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":221,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":167,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":253,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":51,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":145,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":208,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":10,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":321,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":358,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":65,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":326,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":414,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":316,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":412,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":402,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":178,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":233,"com.google.gson.functional.CollectionTest.testSetSerialization":198,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":16,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":126,"com.google.gson.functional.StringTest.testStringValueSerialization":179,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":58,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":181,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":404,"com.google.gson.MixedStreamTest.testWriteInvalidState":356,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":331,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":237,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":222,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":88,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":204,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":53,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":391,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":44,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":32,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":104,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":330,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":231},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321],"tindex":"1ed887e1-3e58-11e6-b66e-d55af44f3827","method":{"position":"com.google.gson.Gson:532","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245362373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n            toJson(src, typeOfSrc, writer);\n            return writer.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:537","type":"CtFieldReadImpl","sourcecode":"lenient"},"failures":[0,1,2,3,4,322,323,324,5,6,7,325,326,8,9,327,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,328,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,329,330,59,60,61,62,63,331,64,332,65,66,67,68,69,70,71,72,73,74,75,76,77,78,333,334,335,79,80,81,82,83,84,85,86,87,88,336,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,337,115,338,116,339,340,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,341,342,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,343,344,345,346,347,283,284,348,285,286,287,288,289,290,291,292,293,294,349,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,350,351,352,353,354,355,356,357,358,359,315,316,317,318,319,320,360,361,362,363,321],"tindex":"1ed8d602-3e58-11e6-b66e-d52eeb5c75ce","method":{"position":"com.google.gson.stream.JsonWriter:234","type":"CtMethodImpl","sourcecode":"public final void setLenient(boolean lenient) {\n    if (lenient) {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = lenient;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245362373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"lenient"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:79","type":"CtUnaryOperatorImpl","sourcecode":"!(json instanceof com.google.gson.JsonPrimitive)"},"failures":[],"tindex":"1ed8fd13-3e58-11e6-b66e-e3d19a11129e","method":{"position":"com.google.gson.Gson:127","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonParseException {\n    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245362373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    } else {\n        {\n            return ((T)(fromJson(json, typeOfT)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[323,325,326,327,24,340,341,342,244,343,344,345,346,347,348],"tindex":"1ed8fd14-3e58-11e6-b66e-894df8603621","method":{"position":"com.google.gson.Gson:468","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src) {\n    if (src == null) {\n        {\n            if (src == null) {\n                return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            return toJsonTree(src, src.getClass());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245362373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"1ed92425-3e58-11e6-b66e-e9b53f3dfe81","method":{"position":"com.google.gson.Gson:695","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.lang.String json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245362373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (json == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245362373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            } else {\n                {\n                    java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n                    return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:115","type":"CtInvocationImpl","sourcecode":"primitive.isNumber()"},"failures":[],"tindex":"1ed92426-3e58-11e6-b66e-c12df4c73fdf","method":{"position":"com.google.gson.JsonPrimitive:93","type":"CtMethodImpl","sourcecode":"void setValue(java.lang.Object primitive) {\n    if (primitive.isNumber()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245362373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (primitive instanceof java.lang.Character) {\n                char char = ((java.lang.Character)(primitive)).charValue();\n                com.google.gson.JsonPrimitive.this.java.lang.Object = java.lang.String.valueOf(c);\n            } else {\n                com.google.gson.internal.$Gson$Preconditions.checkArgument(((primitive instanceof java.lang.Number) || (com.google.gson.JsonPrimitive.isPrimitiveOrString(primitive))));\n                com.google.gson.JsonPrimitive.this.java.lang.Object = primitive;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"primitive"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[322,323,324,325,326,327,364,13,14,15,19,24,365,366,37,367,42,329,330,78,368,88,338,116,339,340,369,151,370,371,372,373,374,375,376,207,377,208,378,379,341,342,240,241,242,244,343,344,346,347,348,380,381,293,350,382,383,317,384,385,386,387,388,389,390,362,391,392,393,394,395,396,397,363,398],"tindex":"1ed94b37-3e58-11e6-b66e-b985a4c03032","method":{"position":"com.google.gson.JsonObject:53","type":"CtMethodImpl","sourcecode":"public void add(java.lang.String property, com.google.gson.JsonElement value) {\n    if (property == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245362373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (property == null) {\n                {\n                    if (value == null) {\n                        value = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n                    } \n                    com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.put(property, value);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245362373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:240","type":"CtInvocationImpl","sourcecode":"from.getRawType().equals(to.getRawType())"},"failures":[],"tindex":"1ed94b38-3e58-11e6-b66e-6132a7368611","method":{"position":"com.google.gson.reflect.TypeToken:272","type":"CtMethodImpl","sourcecode":"private static boolean matches(java.lang.reflect.Type from, java.lang.reflect.Type to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeMap) {\n    if (from.getRawType().equals(to.getRawType())) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245362373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (to.equals(from)) || ((from instanceof java.lang.reflect.TypeVariable) && (to.equals(typeMap.get(((java.lang.reflect.TypeVariable<?>)(from)).getName()))));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from","to":"to"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[336],"tindex":"1ed94b39-3e58-11e6-b66e-572ca36cf298","method":{"position":"com.google.gson.Gson:285","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245362373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            float float = value.floatValue();\n            checkValidFloatingPoint(floatValue);\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:125","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonObject"},"failures":[323,325,366,37,374,343,399,400,385],"tindex":"1ed9724a-3e58-11e6-b66e-4ff9bc6ac390","method":{"position":"com.google.gson.JsonArray:57","type":"CtMethodImpl","sourcecode":"public void add(com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245362373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (element == null) {\n                element = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            java.util.List<com.google.gson.JsonElement>.add(element);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:92","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof java.util.Iterator"},"failures":[],"tindex":"1ed9724b-3e58-11e6-b66e-9d32abef93df","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:808","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (o instanceof java.util.Iterator) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245362373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (!(o instanceof java.util.Map.Entry)) {\n                return false;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n            if (node == null) {\n                return false;\n            } \n            removeInternal(node, true);\n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:274","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[263,266,267,273,278,280,357],"tindex":"1ed9724c-3e58-11e6-b66e-bdff60703f1f","method":{"position":"com.google.gson.Gson:249","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> doubleAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245362373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return in.nextDouble();\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    double double = value.doubleValue();\n                    checkValidFloatingPoint(doubleValue);\n                    out.value(value);\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:243","type":"CtBinaryOperatorImpl","sourcecode":"annotation != null"},"failures":[305,401,402,307,403,308],"tindex":"1ed9995d-3e58-11e6-b66e-5b42dc0bf4f6","method":{"position":"com.google.gson.internal.Excluder:242","type":"CtMethodImpl","sourcecode":"private boolean isValidUntil(com.google.gson.annotations.Until annotation) {\n    if (annotation != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245362373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (annotation != null) {\n                double double = annotation.value();\n                if (annotationVersion <= (double)) {\n                    return false;\n                } \n            } \n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:98","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.ParameterizedType"},"failures":[0,1,404,405,3,4,323,6,325,406,407,8,327,408,409,13,42,53,54,55,56,410,57,411,64,74,75,412,413,336,414,98,107,113,116,117,118,119,120,121,128,415,142,147,154,155,156,157,158,159,160,416,417,418,419,180,181,182,183,184,186,189,191,194,420,421,198,422,379,213,216,217,218,219,341,342,220,221,222,223,242,250,343,344,346,347,296,298,299,423],"tindex":"1ed9995e-3e58-11e6-b66e-0b2e59996c9a","method":{"position":"com.google.gson.internal.ConstructorConstructor:128","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nprivate <T>com.google.gson.internal.ObjectConstructor<T> newDefaultImplementationConstructor(final java.lang.reflect.Type type, java.lang.Class<? super T> rawType) {\n    if (type instanceof java.lang.reflect.ParameterizedType) {\n        {\n            if (java.util.Collection.java.util.Collection.java.lang.Class.isAssignableFrom(rawType)) {\n                if (java.util.SortedSet.java.util.SortedSet.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.TreeSet<java.lang.Object>()));\n                        }\n                    };\n                } else if (java.util.EnumSet.java.util.EnumSet.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        @java.lang.SuppressWarnings(value = \"rawtypes\")\n                        public T construct() {\n                            if (type instanceof java.lang.reflect.ParameterizedType) {\n                                java.lang.reflect.Type java.lang.reflect.Type = ((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0];\n                                if (elementType instanceof java.lang.Class) {\n                                    return ((T)(java.util.EnumSet.noneOf(((java.lang.Class)(elementType)))));\n                                } else {\n                                    throw new com.google.gson.JsonIOException((\"Invalid EnumSet type: \" + (type.toString())));\n                                }\n                            } else {\n                                throw new com.google.gson.JsonIOException((\"Invalid EnumSet type: \" + (type.toString())));\n                            }\n                        }\n                    };\n                } else if (java.util.Set.java.util.Set.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedHashSet<java.lang.Object>()));\n                        }\n                    };\n                } else if (java.util.Queue.java.util.Queue.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedList<java.lang.Object>()));\n                        }\n                    };\n                } else {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.ArrayList<java.lang.Object>()));\n                        }\n                    };\n                }\n            } \n            if (java.util.Map.java.util.Map.java.lang.Class.isAssignableFrom(rawType)) {\n                if (java.util.SortedMap.java.util.SortedMap.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.TreeMap<java.lang.Object, java.lang.Object>()));\n                        }\n                    };\n                } else if ((type instanceof java.lang.reflect.ParameterizedType) && (!(java.lang.String.java.lang.String.java.lang.Class.isAssignableFrom(com.google.gson.reflect.TypeToken.get(((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0]).getRawType())))) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedHashMap<java.lang.Object, java.lang.Object>()));\n                        }\n                    };\n                } else {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new com.google.gson.internal.LinkedTreeMap<java.lang.String, java.lang.Object>()));\n                        }\n                    };\n                }\n            } \n            return null;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245362373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[322,323,324,325,326,327,24,37,338,116,339,340,151,341,342,244,343,344,345,346,347,348,350,351,352],"tindex":"1ed9c06f-3e58-11e6-b66e-0b0f50186e24","method":{"position":"com.google.gson.Gson:491","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        {\n            com.google.gson.internal.bind.JsonTreeWriter com.google.gson.internal.bind.JsonTreeWriter = new com.google.gson.internal.bind.JsonTreeWriter();\n            toJson(src, typeOfSrc, writer);\n            return writer.get();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245362373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"1ed9e780-3e58-11e6-b66e-b9e8cce85c5a","method":{"position":"com.google.gson.Gson:136","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245362373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return toJsonTree(src, typeOfSrc);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"1ed9e781-3e58-11e6-b66e-33c8e95ccffe","method":{"position":"com.google.gson.DefaultDateTypeAdapter:94","type":"CtMethodImpl","sourcecode":"private java.util.Date deserializeToDate(com.google.gson.JsonElement json) {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245362373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            synchronized(java.text.DateFormat) {\n                try {\n                    return java.text.DateFormat.parse(json.getAsString());\n                } catch (java.text.ParseException ignored) {\n                }\n                try {\n                    return java.text.DateFormat.parse(json.getAsString());\n                } catch (java.text.ParseException ignored) {\n                }\n                try {\n                    return java.text.DateFormat.parse(json.getAsString());\n                } catch (java.text.ParseException e) {\n                    throw new com.google.gson.JsonSyntaxException(json.getAsString() , e);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:274","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[263,266,267,273,278,280,357],"tindex":"1ed9e782-3e58-11e6-b66e-393624e0536d","method":{"position":"com.google.gson.Gson:273","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> floatAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245362373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return ((float)(in.nextDouble()));\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    float float = value.floatValue();\n                    checkValidFloatingPoint(floatValue);\n                    out.value(value);\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[],"tindex":"1ed9e783-3e58-11e6-b66e-3f513f928e50","method":{"position":"com.google.gson.Gson:576","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245362373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            try {\n                com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                toJson(src, typeOfSrc, jsonWriter);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:298","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[424,360],"tindex":"1eda0e94-3e58-11e6-b66e-b531f085fbaa","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:162","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(double value) throws java.io.IOException {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245362373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if ((!(isLenient())) && ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value)))) {\n                throw new java.lang.IllegalArgumentException((\"JSON forbids NaN and infinities: \" + value));\n            } \n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[322,323,324,325,326,327,24,37,338,116,340,141,144,151,341,242,343,344,346,347,348,350,425],"tindex":"1eda0e95-3e58-11e6-b66e-b93c61500982","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:144","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245362373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[0,3,23,27,31,32,336,139,145],"tindex":"1eda0e96-3e58-11e6-b66e-1586b866b0b3","method":{"position":"com.google.gson.internal.bind.TypeAdapters:245","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245362373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:430","type":"CtFieldReadImpl","sourcecode":"serializeNulls"},"failures":[322,323,324,325,326,327,24,37,329,331,334,338,116,339,340,132,135,145,151,341,342,233,244,343,344,345,346,347,283,348,286,287,288,290,291,292,293,294,349,295,350,351,352,353,354,355,356,357,358,359,389],"tindex":"1eda0e97-3e58-11e6-b66e-df275a6f5f5c","method":{"position":"com.google.gson.stream.JsonWriter:268","type":"CtMethodImpl","sourcecode":"public final void setSerializeNulls(boolean serializeNulls) {\n    if (serializeNulls) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245362373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = serializeNulls;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeNulls":"serializeNulls"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"1eda35a8-3e58-11e6-b66e-179f8c2cbdc8","method":{"position":"com.google.gson.JsonObject:53","type":"CtMethodImpl","sourcecode":"public void add(java.lang.String property, com.google.gson.JsonElement value) {\n    if (property == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245362373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (property == null) {\n                {\n                    if (value == null) {\n                        value = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n                    } \n                    com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.put(property, value);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245362373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"1eda35a9-3e58-11e6-b66e-e34a99c35d2e","method":{"position":"com.google.gson.Gson:719","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.lang.String json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            if (json == null) {\n                return null;\n            } \n            java.io.StringReader java.io.StringReader = new java.io.StringReader(json);\n            T T = ((T)(fromJson(reader, typeOfT)));\n            return target;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245362373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:199","type":"CtUnaryOperatorImpl","sourcecode":"!(b instanceof java.lang.reflect.TypeVariable)"},"failures":[],"tindex":"1eda35aa-3e58-11e6-b66e-a302f7e979bb","method":{"position":"com.google.gson.internal.LinkedTreeMap:207","type":"CtMethodImpl","sourcecode":"private boolean equal(java.lang.Object a, java.lang.Object b) {\n    if (!(a instanceof java.lang.reflect.WildcardType)) {\n        {\n            if (!(a instanceof java.lang.reflect.TypeVariable)) {\n                {\n                    return (a == b) || ((a != null) && (a.equals(b)));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245362373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245362373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"1eda35ab-3e58-11e6-b66e-e1cdd9d39230","method":{"position":"com.google.gson.Gson:695","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.lang.String json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245362373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (json == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245362373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            } else {\n                {\n                    java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n                    return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:189","type":"CtUnaryOperatorImpl","sourcecode":"!(b instanceof java.lang.reflect.WildcardType)"},"failures":[],"tindex":"1edaaadc-3e58-11e6-b66e-0b611fe608fa","method":{"position":"com.google.gson.internal.LinkedTreeMap:207","type":"CtMethodImpl","sourcecode":"private boolean equal(java.lang.Object a, java.lang.Object b) {\n    if (!(a instanceof java.lang.reflect.WildcardType)) {\n        {\n            if (!(a instanceof java.lang.reflect.TypeVariable)) {\n                {\n                    return (a == b) || ((a != null) && (a.equals(b)));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245362373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245362373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:455","type":"CtBinaryOperatorImpl","sourcecode":"(typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)"},"failures":[],"tindex":"1edad1ed-3e58-11e6-b66e-c939b1fcb07b","method":{"position":"com.google.gson.TreeTypeAdapter:92","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newFactoryWithMatchRawType(com.google.gson.reflect.TypeToken<?> exactType, java.lang.Object typeAdapter) {\n    if ((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) {\n        {\n            boolean boolean = (exactType.getType()) == (exactType.getRawType());\n            return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , exactType , matchRawType , null);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245362373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1413","type":"CtVariableReadImpl","sourcecode":"throwOnEof"},"failures":[],"tindex":"1edad1ee-3e58-11e6-b66e-a1e2e427833f","method":{"position":"com.google.gson.stream.JsonReader:1331","type":"CtMethodImpl","sourcecode":"private int nextNonWhitespace(boolean throwOnEof) throws java.io.IOException {\n    if (throwOnEof) {\n        {\n            char[] char[] = com.google.gson.stream.JsonReader.this.char[];\n            int int = int;\n            int int = int;\n            while (true) {\n                if (p == l) {\n                    int = p;\n                    if (!(fillBuffer(1))) {\n                        break;\n                    } \n                    p = int;\n                    l = int;\n                } \n                int int = buffer[(p++)];\n                if (c == '\\n') {\n                    (int)++;\n                    int = p;\n                    continue;\n                } else if (((c == ' ') || (c == '\\r')) || (c == '\\t')) {\n                    continue;\n                } \n                if (c == '/') {\n                    int = p;\n                    if (p == l) {\n                        (int)--;\n                        boolean boolean = fillBuffer(2);\n                        (int)++;\n                        if (!charsLoaded) {\n                            return c;\n                        } \n                    } \n                    checkLenient();\n                    char char = buffer[int];\n                    switch (peek) {\n                        case '*' :\n                            (int)++;\n                            if (!(skipTo(\"*/\"))) {\n                                throw syntaxError(\"Unterminated comment\");\n                            } \n                            p = (int) + 2;\n                            l = int;\n                            continue;\n                        case '/' :\n                            (int)++;\n                            skipToEndOfLine();\n                            p = int;\n                            l = int;\n                            continue;\n                        default :\n                            return c;\n                    }\n                } else if (c == '#') {\n                    int = p;\n                    checkLenient();\n                    skipToEndOfLine();\n                    p = int;\n                    l = int;\n                } else {\n                    int = p;\n                    return c;\n                }\n            }\n            if (throwOnEof) {\n                throw new java.io.EOFException(((((\"End of input\" + \" at line \") + (getLineNumber())) + \" column \") + (getColumnNumber())));\n            } else {\n                return -1;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245362373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"throwOnEof":"throwOnEof"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[],"tindex":"1edaf8ff-3e58-11e6-b66e-07d16a26eb5b","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:132","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter name(java.lang.String name) throws java.io.IOException {\n    if (name == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245362373/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if ((java.util.List<com.google.gson.JsonElement>.isEmpty()) || ((java.lang.String) != null)) {\n                throw new java.lang.IllegalStateException();\n            } \n            com.google.gson.JsonElement com.google.gson.JsonElement = peek();\n            if (element instanceof com.google.gson.JsonObject) {\n                java.lang.String = name;\n                return com.google.gson.internal.bind.JsonTreeWriter.this;\n            } \n            throw new java.lang.IllegalStateException();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":31,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":179,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":422,"com.google.gson.functional.StringTest.testStringValueDeserialization":420,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":625,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":16,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":561,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":340,"com.google.gson.internal.LinkedHashTreeMapTest.testIterationOrder":222,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":524,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":31,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":56,"com.google.gson.MixedStreamTest.testWriteLenient":213,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":408,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":264,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":347,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":172,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":440,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":262,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":456,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":568,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":88,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":607,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":365,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":533,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":44,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":596,"com.google.gson.functional.ObjectTest.testSingletonLists":260,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":91,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":341,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":423,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":517,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":633,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":83,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":303,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":461,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":113,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":279,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":30,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":571,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":197,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":632,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":436,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":93,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":114,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":562,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":385,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":163,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":207,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":99,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":384,"com.google.gson.functional.EnumTest.testEnumCaseMapping":606,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":215,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":421,"com.google.gson.functional.JsonTreeTest.testToJsonTree":361,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":509,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":119,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":356,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":10,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":247,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":322,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":630,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":492,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":337,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":519,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":188,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":18,"com.google.gson.functional.ObjectTest.testNullDeserialization":290,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":253,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":433,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":273,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":579,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":622,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":525,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":105,"com.google.gson.JsonArrayTest.testEqualsOnEmptyArray":0,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":98,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":507,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":287,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":621,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":363,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":312,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":357,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":418,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":584,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":583,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":112,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":166,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":631,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":547,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":321,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":589,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":291,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":489,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":28,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":545,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":377,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":409,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":559,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":404,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":334,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":161,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":69,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":395,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":167,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":415,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":560,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":286,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":483,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":155,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":268,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":620,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":38,"com.google.gson.internal.LinkedHashTreeMapTest.testEmptyStringValues":221,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":391,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":529,"com.google.gson.metrics.PerformanceTest.testDummy":619,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":92,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":5,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":240,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":43,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":71,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":300,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":397,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":150,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":346,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":40,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":336,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":506,"com.google.gson.JsonArrayTest.testEqualsNonEmptyArray":1,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":255,"com.google.gson.functional.CollectionTest.testSetDeserialization":455,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":366,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":272,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":464,"com.google.gson.functional.EnumTest.testEnumSet":598,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":552,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":241,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":70,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithNestedWildcards":228,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":327,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":373,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":280,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":206,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":239,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":564,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":42,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":573,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":50,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":307,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":168,"com.google.gson.internal.LinkedHashTreeMapTest.testContainsNullKeyIsAlwaysFalse":224,"com.google.gson.functional.MapTest.testHashMapDeserialization":368,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":522,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":446,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":344,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":156,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":181,"com.google.gson.MixedStreamTest.testReadNulls":615,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":126,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":177,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":157,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":306,"com.google.gson.functional.MapTest.testSortedMap":388,"com.google.gson.functional.MapTest.testMapSerialization":383,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":180,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":146,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":557,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":495,"com.google.gson.functional.MapTest.testSerializeMaps":123,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":143,"com.google.gson.functional.MapTest.testComplexKeysSerialization":392,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":463,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":396,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":501,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":254,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":604,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":26,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":136,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":304,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":602,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":117,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":33,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":289,"com.google.gson.functional.MapTest.testStringKeyDeserialization":394,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithBasicWildcards":230,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":499,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":75,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":170,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":398,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":528,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":62,"com.google.gson.functional.PrettyPrintingTest.testMap":115,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":523,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":443,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":106,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":183,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":317,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":64,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":500,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":426,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":430,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":331,"com.google.gson.functional.MapTest.testMapSerializationEmpty":393,"com.google.gson.functional.CollectionTest.testQueueSerialization":447,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":553,"com.google.gson.functional.MapTest.testMapOfMapSerialization":382,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":544,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":338,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":452,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":165,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":84,"com.google.gson.functional.FieldNamingTest.testIdentity":144,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":424,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":72,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":249,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":292,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":12,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":37,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":174,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":259,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":511,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":208,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":162,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":425,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":400,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":550,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":349,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":211,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":328,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":333,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":355,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":367,"com.google.gson.functional.MapTest.testMapSubclassSerialization":370,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":582,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":246,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":406,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":466,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":195,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":468,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":542,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":612,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":316,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":410,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":595,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":302,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":238,"com.google.gson.functional.EnumTest.testEnumSubclass":600,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":563,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":65,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":277,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":510,"com.google.gson.GsonBuilderTest.testRegisterTypeAdapterForCoreType":63,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":503,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":567,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":74,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":132,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":513,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":402,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":548,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":401,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":3,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":210,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":491,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":271,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":554,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":36,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":546,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":352,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":261,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":61,"com.google.gson.MixedStreamTest.testWriteNulls":613,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":490,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":413,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":485,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":55,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":236,"com.google.gson.CommentsTest.testParseComments":608,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":79,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":263,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":597,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":474,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":497,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":566,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":145,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":387,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":428,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":95,"com.google.gson.MixedStreamTest.testReadInvalidState":610,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":362,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":245,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":60,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":581,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":147,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":521,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":217,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":502,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithTypeParameters":229,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":471,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":537,"com.google.gson.JsonArrayTest.testRemove":227,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":57,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":577,"com.google.gson.functional.MapTest.testMapDeserialization":376,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":488,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":335,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":120,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":122,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":186,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":234,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":375,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":24,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":22,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":137,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":360,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":601,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":314,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":278,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":293,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":127,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":469,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":4,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":323,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":45,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":135,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":399,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":116,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":386,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":354,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":508,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":81,"com.google.gson.functional.PrimitiveTest.testShortSerialization":580,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":190,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":570,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":53,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":543,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":569,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":11,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":520,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":140,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":194,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":442,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":405,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":371,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":536,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":139,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":587,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":411,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":59,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":193,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":618,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":593,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":588,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":48,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":35,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":73,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":233,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":294,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":196,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":309,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":575,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":67,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":76,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":549,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":298,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":267,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":605,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":129,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":465,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":324,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":450,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":467,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":77,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":21,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":110,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":189,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":527,"com.google.gson.internal.LinkedHashTreeMapTest.testClear":219,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":27,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":160,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":191,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":343,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":7,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":444,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":514,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":576,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":551,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":171,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":477,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":23,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":599,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":185,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":148,"com.google.gson.functional.MapTest.testGeneralMapField":124,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":265,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":482,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":592,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":152,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":496,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":504,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":348,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":389,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":310,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":417,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":518,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":572,"com.google.gson.MixedStreamTest.testReadMixedStreamed":617,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":325,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":378,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":538,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":159,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":209,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":457,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":90,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":555,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":100,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":41,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":339,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":379,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":439,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":369,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":80,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":591,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":102,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":200,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":539,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":109,"com.google.gson.internal.LinkedHashTreeMapTest.testEqualsAndHashCode":225,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":414,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":250,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":308,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":451,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":192,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":86,"com.google.gson.functional.ObjectTest.testNestedDeserialization":299,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":94,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":284,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":182,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":2,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":52,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":590,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":473,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":32,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":380,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":427,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":237,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":169,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":128,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":176,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":412,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":460,"com.google.gson.functional.ObjectTest.testNullSerialization":274,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":131,"com.google.gson.stream.JsonWriterTest.testDoubles":626,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":438,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":372,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":15,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":512,"com.google.gson.functional.MapTest.testInterfaceTypeMap":14,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":493,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":153,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":6,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":515,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":47,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":603,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":134,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":470,"com.google.gson.MixedStreamTest.testReadClosed":611,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":311,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":97,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":531,"com.google.gson.MixedStreamTest.testWriteClosed":616,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":184,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":449,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":232,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":266,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":358,"com.google.gson.internal.LinkedHashTreeMapTest.testPutNonComparableKeyFails":223,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":242,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":231,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":476,"com.google.gson.stream.JsonWriterTest.testLongs":29,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":296,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":472,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":353,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":9,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":269,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":448,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":201,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeWithCustomTypeAdapter":49,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":558,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":203,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":133,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":453,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":58,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":96,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":594,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":164,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":359,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":319,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":256,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":479,"com.google.gson.internal.LinkedHashTreeMapTest.testPutOverrides":218,"com.google.gson.functional.CollectionTest.testQueueDeserialization":462,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":475,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":541,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":556,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":432,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":178,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":111,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":202,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":13,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":288,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":330,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":297,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":419,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":441,"com.google.gson.functional.MapTest.testRawMapSerialization":390,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":609,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":458,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":342,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":627,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":282,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":403,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":151,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":25,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":301,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":484,"com.google.gson.functional.PrimitiveTest.testByteSerialization":578,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":103,"com.google.gson.ObjectTypeAdapterTest.testSerialize":629,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":138,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":526,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":173,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":494,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":141,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":205,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":243,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":429,"com.google.gson.functional.MapTest.testMapWithQuotes":381,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":318,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":534,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":431,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":68,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":158,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":85,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":628,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":585,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":315,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":364,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":187,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":235,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":295,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":121,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":108,"com.google.gson.functional.ObjectTest.testEmptyStringDeserialization":276,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":565,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":20,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":270,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":350,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":320,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":175,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":199,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":329,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":574,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":107,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":454,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":487,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":87,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":351,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":480,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":130,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":251,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":204,"com.google.gson.internal.LinkedHashTreeMapTest.testContainsNonComparableKeyReturnsFalse":220,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":407,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":305,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":46,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":516,"com.google.gson.internal.LinkedHashTreeMapTest.testRemoveRootDoesNotDoubleUnlink":226,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":82,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":281,"com.google.gson.functional.ObjectTest.testNestedSerialization":283,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":478,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":416,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":435,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":530,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":101,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":125,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":149,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":66,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":214,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":623,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":248,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":275,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":586,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":8,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":89,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":332,"com.google.gson.GsonBuilderTest.testCreatingMoreThanOnce":212,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":216,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":532,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":285,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":313,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":198,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":434,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":19,"com.google.gson.functional.CollectionTest.testSetSerialization":459,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":505,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":78,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":118,"com.google.gson.functional.StringTest.testStringValueSerialization":437,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":257,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":17,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":34,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":445,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":481,"com.google.gson.MixedStreamTest.testWriteInvalidState":614,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":104,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":535,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":498,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":540,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":154,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":326,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":142,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":54,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":252,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":51,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":244,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":345,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":258,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":374,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":624,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":39,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":486},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:107","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonArray"},"failures":[0,1],"tindex":"8a5c0017-3e8b-11e6-9d7a-3b33536628b2","method":{"position":"com.google.gson.JsonArray:329","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonArray) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172161/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof com.google.gson.JsonArray) {\n                {\n                    return (o == (com.google.gson.JsonArray.this)) || ((o instanceof com.google.gson.JsonArray) && (((com.google.gson.JsonArray)(o)).java.util.List<com.google.gson.JsonElement>.equals(java.util.List<com.google.gson.JsonElement>)));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172161/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:79","type":"CtUnaryOperatorImpl","sourcecode":"!(json instanceof com.google.gson.JsonPrimitive)"},"failures":[],"tindex":"8a5c4e38-3e8b-11e6-9d7a-652d8f59c57d","method":{"position":"com.google.gson.Gson:127","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonParseException {\n    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n        {\n            return ((T)(fromJson(json, typeOfT)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172161/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"8a5c4e39-3e8b-11e6-9d7a-a138d0b87f43","method":{"position":"com.google.gson.Gson:847","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(com.google.gson.JsonElement json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172161/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26],"tindex":"8a5c4e3a-3e8b-11e6-9d7a-910920d38663","method":{"position":"com.google.gson.internal.bind.TypeAdapters:361","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172161/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:132","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"8a5c754b-3e8b-11e6-9d7a-eb642d5fb7f7","method":{"position":"com.google.gson.internal.ConstructorConstructor:128","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nprivate <T>com.google.gson.internal.ObjectConstructor<T> newDefaultImplementationConstructor(final java.lang.reflect.Type type, java.lang.Class<? super T> rawType) {\n    if (type instanceof java.lang.reflect.GenericArrayType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172161/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (java.util.Collection.java.util.Collection.java.lang.Class.isAssignableFrom(rawType)) {\n                if (java.util.SortedSet.java.util.SortedSet.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.TreeSet<java.lang.Object>()));\n                        }\n                    };\n                } else if (java.util.EnumSet.java.util.EnumSet.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        @java.lang.SuppressWarnings(value = \"rawtypes\")\n                        public T construct() {\n                            if (type instanceof java.lang.reflect.ParameterizedType) {\n                                java.lang.reflect.Type java.lang.reflect.Type = ((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0];\n                                if (elementType instanceof java.lang.Class) {\n                                    return ((T)(java.util.EnumSet.noneOf(((java.lang.Class)(elementType)))));\n                                } else {\n                                    throw new com.google.gson.JsonIOException((\"Invalid EnumSet type: \" + (type.toString())));\n                                }\n                            } else {\n                                throw new com.google.gson.JsonIOException((\"Invalid EnumSet type: \" + (type.toString())));\n                            }\n                        }\n                    };\n                } else if (java.util.Set.java.util.Set.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedHashSet<java.lang.Object>()));\n                        }\n                    };\n                } else if (java.util.Queue.java.util.Queue.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedList<java.lang.Object>()));\n                        }\n                    };\n                } else {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.ArrayList<java.lang.Object>()));\n                        }\n                    };\n                }\n            } \n            if (java.util.Map.java.util.Map.java.lang.Class.isAssignableFrom(rawType)) {\n                if (java.util.SortedMap.java.util.SortedMap.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.TreeMap<java.lang.Object, java.lang.Object>()));\n                        }\n                    };\n                } else if ((type instanceof java.lang.reflect.ParameterizedType) && (!(java.lang.String.java.lang.String.java.lang.Class.isAssignableFrom(com.google.gson.reflect.TypeToken.get(((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0]).getRawType())))) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedHashMap<java.lang.Object, java.lang.Object>()));\n                        }\n                    };\n                } else {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new com.google.gson.internal.LinkedTreeMap<java.lang.String, java.lang.Object>()));\n                        }\n                    };\n                }\n            } \n            return null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:726","type":"CtBinaryOperatorImpl","sourcecode":"value == 0"},"failures":[27,28,29,30],"tindex":"8a5c9c5c-3e8b-11e6-9d7a-27cb57dfed17","method":{"position":"com.google.gson.stream.JsonWriter:476","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(long value) throws java.io.IOException {\n    if (value == 0) {\n        {\n            if (value == 0) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172161/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    writeDeferredName();\n                    beforeValue(false);\n                    java.io.Writer.write(java.lang.Long.toString(value));\n                    return com.google.gson.stream.JsonWriter.this;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172161/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:305","type":"CtBinaryOperatorImpl","sourcecode":"node != null"},"failures":[],"tindex":"8a5c9c5d-3e8b-11e6-9d7a-39894ac9f5e0","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:686","type":"CtMethodImpl","sourcecode":"void add(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node) {\n    if (node != null) {\n        {\n            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            node.int = 1;\n            if (((int) > 0) && (((int) & 1) == 0)) {\n                (int)++;\n                (int)--;\n                (int)++;\n            } \n            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node;\n            (int)++;\n            if (((int) > 0) && (((int) & 1) == 0)) {\n                (int)++;\n                (int)--;\n                (int)++;\n            } \n            for (int int = 4 ; ((int) & (scale - 1)) == (scale - 1) ; scale *= 2) {\n                if ((int) == 0) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                    center.int = (right.int) + 1;\n                    left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                } else if ((int) == 1) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                    center.int = (right.int) + 1;\n                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    int = 0;\n                } else if ((int) == 2) {\n                    int = 0;\n                } \n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172161/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"node"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[],"tindex":"8a5cc36e-3e8b-11e6-9d7a-179cd618e4e1","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:86","type":"CtMethodImpl","sourcecode":"private com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField createBoundField(final com.google.gson.Gson context, final java.lang.reflect.Field field, final java.lang.String name, final com.google.gson.reflect.TypeToken<?> fieldType, boolean serialize, boolean deserialize) {\n    if (field.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172161/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final boolean boolean = com.google.gson.internal.Primitives.isPrimitive(fieldType.getRawType());\n            return new com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField(name, serialize, deserialize) {\n                final com.google.gson.TypeAdapter<?> typeAdapter = getFieldAdapter(context, field, fieldType);\n\n                @java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n                @java.lang.Override\n                void write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                    java.lang.Object java.lang.Object = field.get(value);\n                    com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n                    t.write(writer, fieldValue);\n                }\n\n                @java.lang.Override\n                void read(com.google.gson.stream.JsonReader reader, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                    java.lang.Object java.lang.Object = com.google.gson.TypeAdapter<?>.read(reader);\n                    if ((fieldValue != null) || (!isPrimitive)) {\n                        field.set(value, fieldValue);\n                    } \n                }\n\n                public boolean writeField(java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                    if (!(boolean))\n                        return false;\n                    \n                    java.lang.Object java.lang.Object = field.get(value);\n                    return fieldValue != value;\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"field"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"8a5cea7f-3e8b-11e6-9d7a-a9781be1f88f","method":{"position":"com.google.gson.DefaultDateTypeAdapter:77","type":"CtMethodImpl","sourcecode":"public java.util.Date deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT, com.google.gson.JsonDeserializationContext context) throws com.google.gson.JsonParseException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172161/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    } else {\n        {\n            if (!(json instanceof com.google.gson.JsonPrimitive)) {\n                throw new com.google.gson.JsonParseException(\"The date should be a string value\");\n            } \n            java.util.Date java.util.Date = deserializeToDate(json);\n            if (typeOfT == (java.util.Date.java.util.Date.java.lang.Class)) {\n                return date;\n            } else if (typeOfT == (java.sql.Timestamp.java.sql.Timestamp.java.lang.Class)) {\n                return new java.sql.Timestamp(date.getTime());\n            } else if (typeOfT == (java.sql.Date.java.sql.Date.java.lang.Class)) {\n                return new java.sql.Date(date.getTime());\n            } else {\n                throw new java.lang.IllegalArgumentException((((getClass()) + \" cannot deserialize to \") + typeOfT));\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:107","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.WildcardType"},"failures":[],"tindex":"8a5cea80-3e8b-11e6-9d7a-8fb78b2f96ef","method":{"position":"com.google.gson.internal.Primitives:69","type":"CtMethodImpl","sourcecode":"public static boolean isPrimitive(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.WildcardType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172161/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return com.google.gson.internal.Primitives.com.google.gson.internal.Primitives.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.containsKey(type);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:497","type":"CtBinaryOperatorImpl","sourcecode":"(typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)"},"failures":[31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,30,65],"tindex":"8a5cea81-3e8b-11e6-9d7a-67d03f1f8681","method":{"position":"com.google.gson.GsonBuilder:447","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\npublic com.google.gson.GsonBuilder registerTypeAdapter(java.lang.reflect.Type type, java.lang.Object typeAdapter) {\n    if ((typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)) {\n        {\n            com.google.gson.internal.$Gson$Preconditions.checkArgument(((((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) || (typeAdapter instanceof com.google.gson.InstanceCreator<?>)) || (typeAdapter instanceof com.google.gson.TypeAdapter<?>)));\n            if (typeAdapter instanceof com.google.gson.InstanceCreator<?>) {\n                java.util.Map<java.lang.reflect.Type, com.google.gson.InstanceCreator<?>>.put(type, ((com.google.gson.InstanceCreator)(typeAdapter)));\n            } \n            if ((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) {\n                com.google.gson.reflect.TypeToken<?> com.google.gson.reflect.TypeToken<?> = com.google.gson.reflect.TypeToken.get(type);\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.TreeTypeAdapter.newFactoryWithMatchRawType(typeToken, typeAdapter));\n            } \n            if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.internal.bind.TypeAdapters.newFactory(com.google.gson.reflect.TypeToken.get(type), ((com.google.gson.TypeAdapter)(typeAdapter))));\n            } \n            return com.google.gson.GsonBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172161/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:554","type":"CtBinaryOperatorImpl","sourcecode":"(datePattern != null) && (!(\"\".equals(datePattern.trim())))"},"failures":[31,32,33,34,35,36,37,38,66,67,39,40,41,42,43,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,44,45,46,88,89,90,91,92,93,94,95,96,50,51,97,98,52,99,100,53,101,102,54,55,103,104,105,56,106,107,108,109,57,110,58,59,111,60,112,113,114,115,116,117,118,119,120,121,122,61,123,13,14,124,125,16,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,62,153,154,155,156,19,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,21,186,22,187,188,23,24,189,190,191,25,192,26,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,64,30,65],"tindex":"8a5d1192-3e8b-11e6-9d7a-43489bd2d681","method":{"position":"com.google.gson.GsonBuilder:551","type":"CtMethodImpl","sourcecode":"private void addTypeAdaptersForDate(java.lang.String datePattern, int dateStyle, int timeStyle, java.util.List<com.google.gson.TypeAdapterFactory> factories) {\n    if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n        {\n            com.google.gson.DefaultDateTypeAdapter com.google.gson.DefaultDateTypeAdapter;\n            if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n                dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(datePattern);\n            } else if ((dateStyle != (java.text.DateFormat.java.text.DateFormat.int)) && (timeStyle != (java.text.DateFormat.java.text.DateFormat.int))) {\n                dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(dateStyle , timeStyle);\n            } else {\n                return ;\n            }\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.util.Date.java.util.Date.java.lang.Class), dateTypeAdapter));\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Timestamp.java.sql.Timestamp.java.lang.Class), dateTypeAdapter));\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Date.java.sql.Date.java.lang.Class), dateTypeAdapter));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172161/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"datePattern":"datePattern"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[11],"tindex":"8a5d1193-3e8b-11e6-9d7a-996d2c6d537f","method":{"position":"com.google.gson.internal.bind.TypeAdapters:201","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172161/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    out.value(value);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172161/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:154","type":"CtUnaryOperatorImpl","sourcecode":"!create"},"failures":[217,218,219,220,221,222,223,224,225,226],"tindex":"8a5d38a4-3e8b-11e6-9d7a-b393b73afd67","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:131","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedHashTreeMap.Node<K, V> find(K key, boolean create) {\n    if (!create) {\n        {\n            java.util.Comparator<? super K> java.util.Comparator<? super K> = com.google.gson.internal.LinkedHashTreeMap.this.java.util.Comparator<? super K>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[] com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[] = com.google.gson.internal.LinkedHashTreeMap.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[];\n            int int = com.google.gson.internal.LinkedHashTreeMap.secondaryHash(key.hashCode());\n            int int = hash & ((table.int) - 1);\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = table[index];\n            int int = 0;\n            if (nearest != null) {\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                java.lang.Comparable<java.lang.Object> java.lang.Comparable<java.lang.Object> = comparator == (com.google.gson.internal.LinkedHashTreeMap.com.google.gson.internal.LinkedHashTreeMap.java.util.Comparator<java.lang.Comparable>) ? ((java.lang.Comparable<java.lang.Object>)(key)) : null;\n                while (true) {\n                    comparison = comparableKey != null ? comparableKey.compareTo(nearest.K) : comparator.compare(key, nearest.K);\n                    if (comparison == 0) {\n                        return nearest;\n                    } \n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = comparison < 0 ? nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> : nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    if (child == null) {\n                        break;\n                    } \n                    nearest = child;\n                }\n            } \n            if (!create) {\n                return null;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            if (nearest == null) {\n                if ((comparator == (com.google.gson.internal.LinkedHashTreeMap.com.google.gson.internal.LinkedHashTreeMap.java.util.Comparator<java.lang.Comparable>)) && (!(key instanceof java.lang.Comparable))) {\n                    throw new java.lang.ClassCastException(((key.getClass().getName()) + \" is not Comparable\"));\n                } \n                created = new com.google.gson.internal.LinkedHashTreeMap.Node<K, V>(nearest , key , hash , header , header.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>);\n                table[index] = created;\n            } else {\n                created = new com.google.gson.internal.LinkedHashTreeMap.Node<K, V>(nearest , key , hash , header , header.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>);\n                if (comparison < 0) {\n                    nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = created;\n                } else {\n                    nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = created;\n                }\n                rebalance(nearest, true);\n            }\n            if (((int)++) > (int)) {\n                doubleCapacity();\n            } \n            (int)++;\n            return created;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172161/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"create":"create"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:105","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonObject"},"failures":[],"tindex":"8a5d5fb5-3e8b-11e6-9d7a-6bdf31ed2fb9","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:808","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172161/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (!(o instanceof java.util.Map.Entry)) {\n                return false;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n            if (node == null) {\n                return false;\n            } \n            removeInternal(node, true);\n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:137","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonObject"},"failures":[227],"tindex":"8a5d5fb6-3e8b-11e6-9d7a-5fd2e33de3f0","method":{"position":"com.google.gson.JsonArray:92","type":"CtMethodImpl","sourcecode":"public boolean remove(com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonObject) {\n        {\n            if (element == null) {\n                {\n                    if (element instanceof com.google.gson.JsonObject) {\n                        {\n                            return java.util.List<com.google.gson.JsonElement>.remove(element);\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172161/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172161/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172161/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:115","type":"CtInvocationImpl","sourcecode":"primitive.isNumber()"},"failures":[],"tindex":"8a5d5fb7-3e8b-11e6-9d7a-79cfb440583b","method":{"position":"com.google.gson.JsonPrimitive:93","type":"CtMethodImpl","sourcecode":"void setValue(java.lang.Object primitive) {\n    if (primitive.isNumber()) {\n        {\n            if (primitive instanceof java.lang.Character) {\n                char char = ((java.lang.Character)(primitive)).charValue();\n                com.google.gson.JsonPrimitive.this.java.lang.Object = java.lang.String.valueOf(c);\n            } else {\n                com.google.gson.internal.$Gson$Preconditions.checkArgument(((primitive instanceof java.lang.Number) || (com.google.gson.JsonPrimitive.isPrimitiveOrString(primitive))));\n                com.google.gson.JsonPrimitive.this.java.lang.Object = primitive;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172161/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"primitive"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:199","type":"CtBinaryOperatorImpl","sourcecode":"from instanceof java.lang.reflect.ParameterizedType"},"failures":[228,229,230],"tindex":"8a5d5fb8-3e8b-11e6-9d7a-47f31dc0d3fe","method":{"position":"com.google.gson.reflect.TypeToken:122","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic boolean isAssignableFrom(java.lang.reflect.Type from) {\n    if (from instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172161/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (from == null) {\n                return false;\n            } \n            if (java.lang.reflect.Type.equals(from)) {\n                return true;\n            } \n            if ((java.lang.reflect.Type) instanceof java.lang.Class<?>) {\n                return java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from));\n            } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.ParameterizedType) {\n                return com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n            } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.GenericArrayType) {\n                return (java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from))) && (com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.GenericArrayType)(java.lang.reflect.Type))));\n            } else {\n                throw com.google.gson.reflect.TypeToken.buildUnexpectedTypeError(java.lang.reflect.Type, java.lang.Class.java.lang.Class.java.lang.Class, java.lang.reflect.ParameterizedType.java.lang.reflect.ParameterizedType.java.lang.Class, java.lang.reflect.GenericArrayType.java.lang.reflect.GenericArrayType.java.lang.Class);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:305","type":"CtBinaryOperatorImpl","sourcecode":"node != null"},"failures":[217],"tindex":"8a5d86c9-3e8b-11e6-9d7a-fbf5974e5ed0","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:311","type":"CtMethodImpl","sourcecode":"private void replaceInParent(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node, com.google.gson.internal.LinkedHashTreeMap.Node<K, V> replacement) {\n    if (replacement != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172161/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            if (replacement != null) {\n                replacement.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = parent;\n            } \n            if (parent != null) {\n                if ((parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) == node) {\n                    parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = replacement;\n                } else {\n                    assert (parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) == node;\n                    parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = replacement;\n                }\n            } else {\n                int int = (node.int) & ((com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[].int) - 1);\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[][index] = replacement;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"replacement"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:240","type":"CtInvocationImpl","sourcecode":"from.getRawType().equals(to.getRawType())"},"failures":[228,229,230],"tindex":"8a5d86ca-3e8b-11e6-9d7a-1db00a56c92a","method":{"position":"com.google.gson.reflect.TypeToken:238","type":"CtMethodImpl","sourcecode":"private static boolean typeEquals(java.lang.reflect.ParameterizedType from, java.lang.reflect.ParameterizedType to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeVarMap) {\n    if (from.getRawType().equals(from.getRawType())) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172161/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (from.getRawType().equals(to.getRawType())) {\n                java.lang.reflect.Type[] java.lang.reflect.Type[] = from.getActualTypeArguments();\n                java.lang.reflect.Type[] java.lang.reflect.Type[] = to.getActualTypeArguments();\n                for (int int = 0 ; i < (fromArgs.int) ; i++) {\n                    if (!(com.google.gson.reflect.TypeToken.matches(fromArgs[i], toArgs[i], typeVarMap))) {\n                        return false;\n                    } \n                }\n                return true;\n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from","to":"from"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:250","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[31,32,33,34,35,36,37,38,2,3,4,5,231,6,7,8,232,233,234,9,10,66,67,39,40,41,42,43,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,235,236,87,237,238,239,240,241,44,242,243,244,45,245,46,246,247,88,89,90,91,92,93,94,95,248,249,250,96,251,252,50,51,97,98,52,99,100,53,101,102,54,253,55,254,255,256,257,103,258,259,260,261,262,263,264,265,266,267,268,269,104,270,271,272,273,274,275,276,277,278,279,105,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,56,300,301,302,303,304,106,305,306,107,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,11,328,108,27,329,330,331,332,333,334,335,336,337,109,338,339,57,110,28,340,341,342,343,58,344,345,346,59,347,348,349,350,351,352,111,60,353,112,113,354,355,356,357,358,359,360,12,361,362,363,364,365,366,114,115,116,117,118,119,120,121,367,122,61,368,369,370,123,371,372,373,374,375,376,13,377,378,379,380,381,382,383,384,385,386,387,388,14,389,15,124,125,390,391,392,393,394,395,396,397,398,16,399,400,401,402,126,403,127,128,129,130,131,132,133,404,134,135,136,137,405,406,407,408,409,410,411,412,413,414,415,138,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,18,450,451,452,453,454,455,456,457,458,459,460,461,139,462,463,464,465,466,140,141,142,143,144,145,146,147,148,149,150,151,467,152,62,153,468,469,470,471,472,473,474,475,476,477,478,154,155,156,479,480,481,482,483,484,485,486,487,488,489,19,490,491,492,493,494,495,496,497,498,499,20,500,501,502,157,158,159,160,161,503,162,504,505,506,507,508,509,163,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,164,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,165,555,556,557,558,559,560,561,562,563,564,565,566,166,167,567,568,569,570,571,572,573,168,574,575,576,577,578,169,579,580,581,582,583,584,585,170,586,587,588,589,590,171,591,592,593,594,595,172,173,174,175,176,177,178,179,180,181,182,183,184,185,21,186,596,22,187,188,23,24,597,189,190,191,25,192,26,193,598,599,194,600,601,602,603,604,605,606,607,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,608,609,610,611,612,613,614,213,615,214,616,617,618,619,215,216,620,64,30,65,621,622,623],"tindex":"8a5d86cb-3e8b-11e6-9d7a-7fe43b56d0a5","method":{"position":"com.google.gson.Gson:273","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> floatAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return ((float)(in.nextDouble()));\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    float float = value.floatValue();\n                    checkValidFloatingPoint(floatValue);\n                    out.value(value);\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172161/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:370","type":"CtBinaryOperatorImpl","sourcecode":"toResolve instanceof java.lang.reflect.WildcardType"},"failures":[],"tindex":"8a5daddc-3e8b-11e6-9d7a-e3011104ef0c","method":{"position":"com.google.gson.internal.$Gson$Types:322","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type resolve(java.lang.reflect.Type context, java.lang.Class<?> contextRawType, java.lang.reflect.Type toResolve) {\n    while (true) {\n        if (toResolve instanceof java.lang.reflect.TypeVariable) {\n            java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(toResolve));\n            toResolve = com.google.gson.internal.$Gson$Types.resolveTypeVariable(context, contextRawType, typeVariable);\n            if (toResolve == typeVariable) {\n                return toResolve;\n            } \n        } else if ((toResolve instanceof java.lang.Class) && (((java.lang.Class<?>)(toResolve)).isArray())) {\n            java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getComponentType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, componentType);\n            return componentType == newComponentType ? original : com.google.gson.internal.$Gson$Types.arrayOf(newComponentType);\n        } else if (toResolve instanceof java.lang.reflect.GenericArrayType) {\n            java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getGenericComponentType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, componentType);\n            return componentType == newComponentType ? original : com.google.gson.internal.$Gson$Types.arrayOf(newComponentType);\n        } else if (toResolve instanceof java.lang.reflect.ParameterizedType) {\n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getOwnerType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, ownerType);\n            boolean boolean = newOwnerType != ownerType;\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getActualTypeArguments();\n            for (int int = 0, int int = args.int ; t < length ; t++) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, args[t]);\n                if (resolvedTypeArgument != (args[t])) {\n                    if (!changed) {\n                        args = args.clone();\n                        changed = true;\n                    } \n                    args[t] = resolvedTypeArgument;\n                } \n            }\n            return changed ? com.google.gson.internal.$Gson$Types.newParameterizedTypeWithOwner(newOwnerType, original.getRawType(), args) : original;\n        } else if (toResolve instanceof java.lang.reflect.WildcardType) {\n            java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(toResolve));\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getLowerBounds();\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getUpperBounds();\n            if ((originalLowerBound.int) == 1) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, originalLowerBound[0]);\n                if (lowerBound != (originalLowerBound[0])) {\n                    return com.google.gson.internal.$Gson$Types.supertypeOf(lowerBound);\n                } \n            } else if ((originalUpperBound.int) == 1) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, originalUpperBound[0]);\n                if (upperBound != (originalUpperBound[0])) {\n                    return com.google.gson.internal.$Gson$Types.subtypeOf(upperBound);\n                } \n            } \n            return original;\n        } else {\n            return toResolve;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"toResolve"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:107","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonArray"},"failures":[],"tindex":"8a5dd4ed-3e8b-11e6-9d7a-d7d08e676804","method":{"position":"com.google.gson.JsonArray:329","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonArray) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172161/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof com.google.gson.JsonArray) {\n                {\n                    return (o == (com.google.gson.JsonArray.this)) || ((o instanceof com.google.gson.JsonArray) && (((com.google.gson.JsonArray)(o)).java.util.List<com.google.gson.JsonElement>.equals(java.util.List<com.google.gson.JsonElement>)));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172161/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[93],"tindex":"8a5dd4ee-3e8b-11e6-9d7a-b9b3a73ba154","method":{"position":"com.google.gson.Gson:136","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        {\n            return toJsonTree(src, typeOfSrc);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172161/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[11,131],"tindex":"8a5dd4ef-3e8b-11e6-9d7a-a531718c4eda","method":{"position":"com.google.gson.Gson:261","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172161/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            double double = value.doubleValue();\n            checkValidFloatingPoint(doubleValue);\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ObjectTypeAdapter:95","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[103,258],"tindex":"8a5dd4f0-3e8b-11e6-9d7a-090f3c8082db","method":{"position":"com.google.gson.JsonObject:121","type":"CtMethodImpl","sourcecode":"private com.google.gson.JsonElement createJsonElement(java.lang.Object value) {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172161/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return value == null ? com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull : new com.google.gson.JsonPrimitive(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"8a5dfc01-3e8b-11e6-9d7a-0d090315285d","method":{"position":"com.google.gson.JsonObject:111","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Character value) {\n    if (property == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172161/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            add(property, createJsonElement(value));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"8a5dfc02-3e8b-11e6-9d7a-dfcbb4fd932b","method":{"position":"com.google.gson.Gson:285","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172161/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            float float = value.floatValue();\n            checkValidFloatingPoint(floatValue);\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:298","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[624,625,626],"tindex":"8a5dfc03-3e8b-11e6-9d7a-8959442de869","method":{"position":"com.google.gson.stream.JsonWriter:461","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(double value) throws java.io.IOException {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                throw new java.lang.IllegalArgumentException((\"Numeric values must be finite, but was \" + value));\n            } \n            writeDeferredName();\n            beforeValue(false);\n            java.io.Writer.append(java.lang.Double.toString(value));\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172161/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[580],"tindex":"8a5dfc04-3e8b-11e6-9d7a-577811248c1f","method":{"position":"com.google.gson.internal.bind.TypeAdapters:223","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172161/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[33,37,231,234,66,76,78,235,87,237,238,239,240,241,242,243,244,245,247,627,91,249,250,628,102,257,263,272,275,280,283,291,293,296,303,307,359,360,12,361,362,363,364,365,366,114,115,116,117,118,119,120,121,123,383,124,390,398,399,402,131,135,406,407,138,418,419,440,443,448,450,456,459,460,140,141,142,143,144,473,474,476,480,486,490,494,496,501,157,160,161,168,579,581,177,179,180,196,199,200,203,609,612,620,629],"tindex":"8a5dfc05-3e8b-11e6-9d7a-c5dd590bc6d2","method":{"position":"com.google.gson.internal.bind.TypeAdapters:245","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172161/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:105","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonObject"},"failures":[],"tindex":"8a5e2316-3e8b-11e6-9d7a-f7b286d36bf4","method":{"position":"com.google.gson.internal.LinkedTreeMap:574","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172161/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (!(o instanceof java.util.Map.Entry)) {\n                return false;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n            if (node == null) {\n                return false;\n            } \n            removeInternal(node, true);\n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"8a5e2317-3e8b-11e6-9d7a-652100c76372","method":{"position":"com.google.gson.internal.bind.TypeAdapters:201","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172161/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    out.value(value);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172161/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:289","type":"CtBinaryOperatorImpl","sourcecode":"(value) == null"},"failures":[31,37,2,3,4,5,6,7,8,9,10,66,235,238,239,243,244,47,630,631,632,251,257,291,350,12,123,13,386,14,389,15,125,16,131,17,441,18,471,474,475,476,482,19,498,20,21,22,23,24,189,191,26,629,633],"tindex":"8a5e2318-3e8b-11e6-9d7a-49a60829efc9","method":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:74","type":"CtMethodImpl","sourcecode":"private java.lang.reflect.Type getRuntimeTypeIfMoreSpecific(java.lang.reflect.Type type, java.lang.Object value) {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172161/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((value != null) && (((type == (java.lang.Object.java.lang.Object.java.lang.Class)) || (type instanceof java.lang.reflect.TypeVariable<?>)) || (type instanceof java.lang.Class<?>))) {\n                type = value.getClass();\n            } \n            return type;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.JsonObject:54","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[274,304,107,355,174,25,613],"tindex":"8a5e2319-3e8b-11e6-9d7a-3b9a0ba26b73","method":{"position":"com.google.gson.internal.bind.TypeAdapters:680","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, com.google.gson.JsonElement value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172161/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if ((value == null) || (value.isJsonNull())) {\n                out.nullValue();\n            } else if (value.isJsonPrimitive()) {\n                com.google.gson.JsonPrimitive com.google.gson.JsonPrimitive = value.getAsJsonPrimitive();\n                if (primitive.isNumber()) {\n                    out.value(primitive.getAsNumber());\n                } else if (primitive.isBoolean()) {\n                    out.value(primitive.getAsBoolean());\n                } else {\n                    out.value(primitive.getAsString());\n                }\n            } else if (value.isJsonArray()) {\n                out.beginArray();\n                for (com.google.gson.JsonElement com.google.gson.JsonElement : value.getAsJsonArray()) {\n                    write(out, e);\n                }\n                out.endArray();\n            } else if (value.isJsonObject()) {\n                out.beginObject();\n                for (java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> : value.getAsJsonObject().entrySet()) {\n                    out.name(e.getKey());\n                    write(out, e.getValue());\n                }\n                out.endObject();\n            } else {\n                throw new java.lang.IllegalArgumentException((\"Couldn't write \" + (value.getClass())));\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:340","type":"CtBinaryOperatorImpl","sourcecode":"toResolve instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"8a5e4a2a-3e8b-11e6-9d7a-1bc2cf1f3934","method":{"position":"com.google.gson.internal.$Gson$Types:322","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type resolve(java.lang.reflect.Type context, java.lang.Class<?> contextRawType, java.lang.reflect.Type toResolve) {\n    while (true) {\n        if (toResolve instanceof java.lang.reflect.TypeVariable) {\n            java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(toResolve));\n            toResolve = com.google.gson.internal.$Gson$Types.resolveTypeVariable(context, contextRawType, typeVariable);\n            if (toResolve == typeVariable) {\n                return toResolve;\n            } \n        } else if ((toResolve instanceof java.lang.Class) && (((java.lang.Class<?>)(toResolve)).isArray())) {\n            java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getComponentType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, componentType);\n            return componentType == newComponentType ? original : com.google.gson.internal.$Gson$Types.arrayOf(newComponentType);\n        } else if (toResolve instanceof java.lang.reflect.GenericArrayType) {\n            java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getGenericComponentType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, componentType);\n            return componentType == newComponentType ? original : com.google.gson.internal.$Gson$Types.arrayOf(newComponentType);\n        } else if (toResolve instanceof java.lang.reflect.ParameterizedType) {\n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getOwnerType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, ownerType);\n            boolean boolean = newOwnerType != ownerType;\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getActualTypeArguments();\n            for (int int = 0, int int = args.int ; t < length ; t++) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, args[t]);\n                if (resolvedTypeArgument != (args[t])) {\n                    if (!changed) {\n                        args = args.clone();\n                        changed = true;\n                    } \n                    args[t] = resolvedTypeArgument;\n                } \n            }\n            return changed ? com.google.gson.internal.$Gson$Types.newParameterizedTypeWithOwner(newOwnerType, original.getRawType(), args) : original;\n        } else if (toResolve instanceof java.lang.reflect.WildcardType) {\n            java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(toResolve));\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getLowerBounds();\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getUpperBounds();\n            if ((originalLowerBound.int) == 1) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, originalLowerBound[0]);\n                if (lowerBound != (originalLowerBound[0])) {\n                    return com.google.gson.internal.$Gson$Types.supertypeOf(lowerBound);\n                } \n            } else if ((originalUpperBound.int) == 1) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, originalUpperBound[0]);\n                if (upperBound != (originalUpperBound[0])) {\n                    return com.google.gson.internal.$Gson$Types.subtypeOf(upperBound);\n                } \n            } \n            return original;\n        } else {\n            return toResolve;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"context"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:136","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.TypeVariable"},"failures":[44,45,245,247],"tindex":"8a5e4a2b-3e8b-11e6-9d7a-017f8c9fe3f1","method":{"position":"com.google.gson.internal.Primitives:79","type":"CtMethodImpl","sourcecode":"public static boolean isWrapperType(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.TypeVariable) {\n        {\n            return com.google.gson.internal.Primitives.com.google.gson.internal.Primitives.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.containsKey(com.google.gson.internal.$Gson$Preconditions.checkNotNull(type));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172161/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonArray:58","type":"CtBinaryOperatorImpl","sourcecode":"element == null"},"failures":[],"tindex":"8a5e4a2c-3e8b-11e6-9d7a-79ce2ba0c88b","method":{"position":"com.google.gson.JsonArray:92","type":"CtMethodImpl","sourcecode":"public boolean remove(com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonObject) {\n        {\n            if (element == null) {\n                {\n                    if (element instanceof com.google.gson.JsonObject) {\n                        {\n                            return java.util.List<com.google.gson.JsonElement>.remove(element);\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172161/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172161/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172161/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:537","type":"CtFieldReadImpl","sourcecode":"lenient"},"failures":[],"tindex":"8a5e4a2d-3e8b-11e6-9d7a-b3b33bc78b27","method":{"position":"com.google.gson.stream.JsonReader:325","type":"CtMethodImpl","sourcecode":"public final void setLenient(boolean lenient) {\n    if (lenient) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172161/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.stream.JsonReader.this.boolean = lenient;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"lenient"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"8a5e713e-3e8b-11e6-9d7a-b97fae9ee670","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:144","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172161/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:726","type":"CtBinaryOperatorImpl","sourcecode":"value == 0"},"failures":[],"tindex":"8a5e713f-3e8b-11e6-9d7a-71a1e7ac19b5","method":{"position":"com.google.gson.stream.JsonWriter:476","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(long value) throws java.io.IOException {\n    if (value == 0) {\n        {\n            if (value == 0) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172161/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    writeDeferredName();\n                    beforeValue(false);\n                    java.io.Writer.write(java.lang.Long.toString(value));\n                    return com.google.gson.stream.JsonWriter.this;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172161/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:92","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof java.util.Iterator"},"failures":[],"tindex":"8a5e7140-3e8b-11e6-9d7a-1986b3938b84","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:512","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"rawtypes\")\n@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof java.util.Iterator) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172161/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof java.util.Map.Entry) {\n                java.util.Map.Entry java.util.Map.Entry = ((java.util.Map.Entry)(o));\n                return ((K) == null ? (other.getKey()) == null : K.equals(other.getKey())) && ((V) == null ? (other.getValue()) == null : V.equals(other.getValue()));\n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"8a5e7141-3e8b-11e6-9d7a-efe080854e6d","method":{"position":"com.google.gson.TypeAdapter:268","type":"CtMethodImpl","sourcecode":"public final T fromJson(java.lang.String json) throws java.io.IOException {\n    if (json == null) {\n        {\n            return fromJson(new java.io.StringReader(json));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172161/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:391","type":"CtUnaryOperatorImpl","sourcecode":"!insert"},"failures":[],"tindex":"8a5e7142-3e8b-11e6-9d7a-d5b3fdfecf7d","method":{"position":"com.google.gson.internal.LinkedTreeMap:310","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (!insert) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172161/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            for (com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>) {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                int int = left != null ? left.int : 0;\n                int int = right != null ? right.int : 0;\n                int int = leftHeight - rightHeight;\n                if (delta == (-2)) {\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    int int = rightRight != null ? rightRight.int : 0;\n                    int int = rightLeft != null ? rightLeft.int : 0;\n                    int int = rightLeftHeight - rightRightHeight;\n                    if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                        rotateLeft(node);\n                    } else {\n                        assert rightDelta == 1;\n                        rotateRight(right);\n                        rotateLeft(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 2) {\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    int int = leftRight != null ? leftRight.int : 0;\n                    int int = leftLeft != null ? leftLeft.int : 0;\n                    int int = leftLeftHeight - leftRightHeight;\n                    if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                        rotateRight(node);\n                    } else {\n                        assert leftDelta == (-1);\n                        rotateLeft(left);\n                        rotateRight(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 0) {\n                    node.int = leftHeight + 1;\n                    if (insert) {\n                        break;\n                    } \n                } else {\n                    assert (delta == (-1)) || (delta == 1);\n                    node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                    if (!insert) {\n                        break;\n                    } \n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"insert"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:356","type":"CtVariableReadImpl","sourcecode":"insert"},"failures":[],"tindex":"8a5e9753-3e8b-11e6-9d7a-15b3cabd5831","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:338","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (insert) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172161/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            for (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) {\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                int int = left != null ? left.int : 0;\n                int int = right != null ? right.int : 0;\n                int int = leftHeight - rightHeight;\n                if (delta == (-2)) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    int int = rightRight != null ? rightRight.int : 0;\n                    int int = rightLeft != null ? rightLeft.int : 0;\n                    int int = rightLeftHeight - rightRightHeight;\n                    if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                        rotateLeft(node);\n                    } else {\n                        assert rightDelta == 1;\n                        rotateRight(right);\n                        rotateLeft(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 2) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    int int = leftRight != null ? leftRight.int : 0;\n                    int int = leftLeft != null ? leftLeft.int : 0;\n                    int int = leftLeftHeight - leftRightHeight;\n                    if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                        rotateRight(node);\n                    } else {\n                        assert leftDelta == (-1);\n                        rotateLeft(left);\n                        rotateRight(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 0) {\n                    node.int = leftHeight + 1;\n                    if (insert) {\n                        break;\n                    } \n                } else {\n                    assert (delta == (-1)) || (delta == 1);\n                    node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                    if (!insert) {\n                        break;\n                    } \n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"insert"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"8a5ebe64-3e8b-11e6-9d7a-ef2c34f5a81f","method":{"position":"com.google.gson.internal.bind.TypeAdapters:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172161/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"8a5ebe65-3e8b-11e6-9d7a-83eae786363d","method":{"position":"com.google.gson.Gson:695","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.lang.String json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172161/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:166","type":"CtBinaryOperatorImpl","sourcecode":"from instanceof java.lang.Class<?>"},"failures":[],"tindex":"8a5ebe66-3e8b-11e6-9d7a-97ac997dd72f","method":{"position":"com.google.gson.reflect.TypeToken:185","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.ParameterizedType to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeVarMap) {\n    if (from instanceof java.lang.Class<?>) {\n        {\n            if (from == null) {\n                return false;\n            } \n            if (to.equals(from)) {\n                return true;\n            } \n            java.lang.Class<?> java.lang.Class<?> = com.google.gson.internal.$Gson$Types.getRawType(from);\n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = null;\n            if (from instanceof java.lang.reflect.ParameterizedType) {\n                ptype = ((java.lang.reflect.ParameterizedType)(from));\n            } \n            if (ptype != null) {\n                java.lang.reflect.Type[] java.lang.reflect.Type[] = ptype.getActualTypeArguments();\n                java.lang.reflect.TypeVariable<?>[] java.lang.reflect.TypeVariable<?>[] = clazz.getTypeParameters();\n                for (int int = 0 ; i < (tArgs.int) ; i++) {\n                    java.lang.reflect.Type java.lang.reflect.Type = tArgs[i];\n                    java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = tParams[i];\n                    while (arg instanceof java.lang.reflect.TypeVariable<?>) {\n                        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(arg));\n                        arg = typeVarMap.get(v.getName());\n                    }\n                    typeVarMap.put(var.getName(), arg);\n                }\n                if (com.google.gson.reflect.TypeToken.typeEquals(ptype, to, typeVarMap)) {\n                    return true;\n                } \n            } \n            for (java.lang.reflect.Type java.lang.reflect.Type : clazz.getGenericInterfaces()) {\n                if (com.google.gson.reflect.TypeToken.isAssignableFrom(itype, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap))) {\n                    return true;\n                } \n            }\n            java.lang.reflect.Type java.lang.reflect.Type = clazz.getGenericSuperclass();\n            return com.google.gson.reflect.TypeToken.isAssignableFrom(sType, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172161/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:105","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonObject"},"failures":[],"tindex":"8a5ebe67-3e8b-11e6-9d7a-55dfb68f4e78","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:804","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonObject) {\n        {\n            return (o instanceof java.util.Map.Entry) && ((findByEntry(((java.util.Map.Entry<?, ?>)(o)))) != null);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172161/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:137","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonObject"},"failures":[],"tindex":"8a5ee578-3e8b-11e6-9d7a-ed0751ccb842","method":{"position":"com.google.gson.JsonArray:92","type":"CtMethodImpl","sourcecode":"public boolean remove(com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonObject) {\n        {\n            if (element == null) {\n                {\n                    if (element instanceof com.google.gson.JsonObject) {\n                        {\n                            return java.util.List<com.google.gson.JsonElement>.remove(element);\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172161/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172161/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172161/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":50,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
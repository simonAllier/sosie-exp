{"failureDictionary":{"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":157,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":160,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":150,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":21,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":23,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":12,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":27,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":53,"com.google.gson.MixedStreamTest.testWriteLenient":209,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":169,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":103,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":16,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":82,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":167,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":161,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":168,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":61,"com.google.gson.functional.ObjectTest.testSingletonLists":136,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":129,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":147,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":89,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":124,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":35,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":50,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":128,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":193,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":211,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":110,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":7,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":70,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":85,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":186,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":64,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":189,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":178,"com.google.gson.functional.JsonTreeTest.testToJsonTree":11,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":190,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":3,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":5,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":122,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":126,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":96,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":215,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":187,"com.google.gson.functional.MapTest.testGeneralMapField":156,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":42,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":176,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":180,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":56,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":101,"com.google.gson.ObjectTypeAdapterTest.testDeserializeNullValue":25,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":182,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":59,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":165,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":55,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":127,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":207,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":145,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":133,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":195,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":159,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":131,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":100,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":38,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":0,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":94,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":144,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":99,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":202,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":32,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":204,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":113,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":69,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":106,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":116,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":20,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":72,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":155,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":203,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":37,"com.google.gson.functional.MapTest.testInterfaceTypeMap":154,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":181,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":45,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":107,"com.google.gson.functional.CollectionTest.testSetDeserialization":87,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":62,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":123,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":192,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":48,"com.google.gson.functional.EnumTest.testEnumSet":102,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":117,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":141,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":115,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":197,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":148,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":34,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":138,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":118,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":33,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":14,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":93,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":146,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":66,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":183,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":177,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":57,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":108,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":139,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":84,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":213,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":184,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":172,"com.google.gson.functional.MapTest.testComplexKeysSerialization":65,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":196,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":74,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":77,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":44,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":191,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":8,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":46,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":75,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":13,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":151,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":214,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":28,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":153,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":166,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":200,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":125,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":67,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":83,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":142,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":185,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":90,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":22,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":24,"com.google.gson.ObjectTypeAdapterTest.testSerialize":105,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":206,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":164,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":17,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":81,"com.google.gson.functional.FieldNamingTest.testIdentity":173,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":170,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":119,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":130,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":10,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":18,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":31,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":135,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":40,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":15,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":60,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":199,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":80,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":112,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":208,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":152,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":162,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":47,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":91,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":201,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":149,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":114,"com.google.gson.functional.EnumTest.testEnumSubclass":104,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":179,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":19,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":194,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":86,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":39,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":6,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":73,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":71,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":132,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":158,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":163,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":1,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":198,"com.google.gson.functional.ObjectTest.testNestedSerialization":143,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":97,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":30,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":175,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":109,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":140,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":43,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":137,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":4,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":95,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":54,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":51,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":212,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":58,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":121,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":174,"com.google.gson.functional.CollectionTest.testSetSerialization":88,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":111,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":134,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":29,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":78,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":92,"com.google.gson.internal.bind.JsonTreeWriterTest.testWriteAfterClose":216,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":205,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":79,"com.google.gson.JsonArrayTest.testRemove":210,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":98,"com.google.gson.ObjectTypeAdapterTest.testDeserialize":26,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":171,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":41,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":63,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":36,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":188,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":76,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":9,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":52,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":120,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":49,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":68,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":2},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24],"tindex":"b62f36e5-3e72-11e6-9c2b-7d27506326ae","method":{"position":"com.google.gson.Gson:491","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        {\n            com.google.gson.internal.bind.JsonTreeWriter com.google.gson.internal.bind.JsonTreeWriter = new com.google.gson.internal.bind.JsonTreeWriter();\n            toJson(src, typeOfSrc, writer);\n            return writer.get();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256946456/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:94","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.Class"},"failures":[],"tindex":"b62fac16-3e72-11e6-9c2b-b5c9c60cfa91","method":{"position":"com.google.gson.internal.Primitives:79","type":"CtMethodImpl","sourcecode":"public static boolean isWrapperType(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.GenericArrayType) {\n        {\n            if (type instanceof java.lang.Class) {\n                {\n                    return com.google.gson.internal.Primitives.com.google.gson.internal.Primitives.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.containsKey(com.google.gson.internal.$Gson$Preconditions.checkNotNull(type));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256946456/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256946456/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl","sourcecode":"in == null"},"failures":[25,26],"tindex":"b62fac17-3e72-11e6-9c2b-690fa0ecf6ce","method":{"position":"com.google.gson.TypeAdapter:254","type":"CtMethodImpl","sourcecode":"public final T fromJson(java.io.Reader in) throws java.io.IOException {\n    if (in == null) {\n        {\n            com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(in);\n            return read(reader);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256946456/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"in"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:94","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.Class"},"failures":[27,28,29,30,31,32,1,33,3,34,35,36,5,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,9,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,13,14,96,97,98,99,100,101,16,17,19,20,102,103,104,105],"tindex":"b62fac18-3e72-11e6-9c2b-4f52355ce418","method":{"position":"com.google.gson.internal.ConstructorConstructor:128","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nprivate <T>com.google.gson.internal.ObjectConstructor<T> newDefaultImplementationConstructor(final java.lang.reflect.Type type, java.lang.Class<? super T> rawType) {\n    if (type instanceof java.lang.Class) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256946456/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (java.util.Collection.java.util.Collection.java.lang.Class.isAssignableFrom(rawType)) {\n                if (java.util.SortedSet.java.util.SortedSet.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.TreeSet<java.lang.Object>()));\n                        }\n                    };\n                } else if (java.util.EnumSet.java.util.EnumSet.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        @java.lang.SuppressWarnings(value = \"rawtypes\")\n                        public T construct() {\n                            if (type instanceof java.lang.reflect.ParameterizedType) {\n                                java.lang.reflect.Type java.lang.reflect.Type = ((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0];\n                                if (elementType instanceof java.lang.Class) {\n                                    return ((T)(java.util.EnumSet.noneOf(((java.lang.Class)(elementType)))));\n                                } else {\n                                    throw new com.google.gson.JsonIOException((\"Invalid EnumSet type: \" + (type.toString())));\n                                }\n                            } else {\n                                throw new com.google.gson.JsonIOException((\"Invalid EnumSet type: \" + (type.toString())));\n                            }\n                        }\n                    };\n                } else if (java.util.Set.java.util.Set.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedHashSet<java.lang.Object>()));\n                        }\n                    };\n                } else if (java.util.Queue.java.util.Queue.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedList<java.lang.Object>()));\n                        }\n                    };\n                } else {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.ArrayList<java.lang.Object>()));\n                        }\n                    };\n                }\n            } \n            if (java.util.Map.java.util.Map.java.lang.Class.isAssignableFrom(rawType)) {\n                if (java.util.SortedMap.java.util.SortedMap.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.TreeMap<java.lang.Object, java.lang.Object>()));\n                        }\n                    };\n                } else if ((type instanceof java.lang.reflect.ParameterizedType) && (!(java.lang.String.java.lang.String.java.lang.Class.isAssignableFrom(com.google.gson.reflect.TypeToken.get(((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0]).getRawType())))) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedHashMap<java.lang.Object, java.lang.Object>()));\n                        }\n                    };\n                } else {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new com.google.gson.internal.LinkedTreeMap<java.lang.String, java.lang.Object>()));\n                        }\n                    };\n                }\n            } \n            return null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[27,28,31,32,0,1,2,106,33,107,3,4,36,108,5,109,39,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,7,130,131,132,40,133,41,42,43,44,46,134,135,136,137,138,139,48,140,141,142,143,144,145,49,50,146,147,148,55,149,57,8,9,10,11,58,60,61,62,150,151,152,153,154,155,156,12,157,158,66,67,68,70,71,72,159,160,161,162,163,164,165,166,77,78,79,80,81,82,167,85,168,88,169,170,171,172,173,174,175,91,92,93,94,95,13,14,96,97,98,99,176,177,178,100,179,180,181,182,16,17,19,20,183,21,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,105],"tindex":"b62ffa39-3e72-11e6-9c2b-8ff1665cad9b","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:108","type":"CtMethodImpl","sourcecode":"public boolean writeField(java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value == null) {\n        {\n            if (!(boolean))\n                return false;\n            \n            java.lang.Object java.lang.Object = field.get(value);\n            return fieldValue != value;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256946456/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:105","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonObject"},"failures":[],"tindex":"b630214a-3e72-11e6-9c2b-bfb63d15a548","method":{"position":"com.google.gson.internal.LinkedTreeMap:570","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256946456/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (o instanceof java.util.Map.Entry) && ((findByEntry(((java.util.Map.Entry<?, ?>)(o)))) != null);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:298","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[203,204,205,206,207,208,209],"tindex":"b630214b-3e72-11e6-9c2b-6da4dba982e7","method":{"position":"com.google.gson.Gson:297","type":"CtMethodImpl","sourcecode":"private void checkValidFloatingPoint(double value) {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256946456/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                throw new java.lang.IllegalArgumentException(((value + \" is not a valid double value as per JSON specification. To override this\") + \" behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.\"));\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"b630214c-3e72-11e6-9c2b-078bfc70bda2","method":{"position":"com.google.gson.Gson:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256946456/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            out.value(value.toString());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:107","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonArray"},"failures":[],"tindex":"b630485d-3e72-11e6-9c2b-39116b4f1948","method":{"position":"com.google.gson.internal.$Gson$Types:511","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    return (o instanceof java.lang.reflect.GenericArrayType) && (com.google.gson.internal.$Gson$Types.equals(com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl.this, ((java.lang.reflect.GenericArrayType)(o))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:125","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonObject"},"failures":[210],"tindex":"b630485e-3e72-11e6-9c2b-8de5c800bf1f","method":{"position":"com.google.gson.JsonArray:115","type":"CtMethodImpl","sourcecode":"public boolean contains(com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonObject) {\n        {\n            return java.util.List<com.google.gson.JsonElement>.contains(element);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256946456/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[],"tindex":"b630485f-3e72-11e6-9c2b-1de05a7b38fa","method":{"position":"com.google.gson.Gson:510","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src) {\n    if (src != null) {\n        {\n            if (src == null) {\n                return toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull);\n            } \n            return toJson(src, src.getClass());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256946456/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:179","type":"CtBinaryOperatorImpl","sourcecode":"a instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"b6304860-3e72-11e6-9c2b-c9fa42f3cc7d","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:223","type":"CtMethodImpl","sourcecode":"private boolean equal(java.lang.Object a, java.lang.Object b) {\n    if (b instanceof java.lang.reflect.GenericArrayType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256946456/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (a == b) || ((a != null) && (a.equals(b)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:103","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"b6306f71-3e72-11e6-9c2b-952d2765fcc7","method":{"position":"com.google.gson.internal.Primitives:79","type":"CtMethodImpl","sourcecode":"public static boolean isWrapperType(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.GenericArrayType) {\n        {\n            if (type instanceof java.lang.Class) {\n                {\n                    return com.google.gson.internal.Primitives.com.google.gson.internal.Primitives.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.containsKey(com.google.gson.internal.$Gson$Preconditions.checkNotNull(type));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256946456/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256946456/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:163","type":"CtBinaryOperatorImpl","sourcecode":"a instanceof java.lang.Class"},"failures":[],"tindex":"b6306f72-3e72-11e6-9c2b-f731acfb7059","method":{"position":"com.google.gson.internal.LinkedTreeMap:207","type":"CtMethodImpl","sourcecode":"private boolean equal(java.lang.Object a, java.lang.Object b) {\n    if (a instanceof java.lang.Class) {\n        {\n            return (a == b) || ((a != null) && (a.equals(b)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256946456/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:233","type":"CtBinaryOperatorImpl","sourcecode":"annotation != null"},"failures":[193,211,212,194,195,213,214,196],"tindex":"b6309683-3e72-11e6-9c2b-db64329bbe39","method":{"position":"com.google.gson.internal.Excluder:232","type":"CtMethodImpl","sourcecode":"private boolean isValidSince(com.google.gson.annotations.Since annotation) {\n    if (annotation != null) {\n        {\n            if (annotation != null) {\n                double double = annotation.value();\n                if (annotationVersion > (double)) {\n                    return false;\n                } \n            } \n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256946456/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[215],"tindex":"b6309684-3e72-11e6-9c2b-4f98fd4d4119","method":{"position":"com.google.gson.Gson:133","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256946456/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return toJsonTree(src);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[0,1,2,3,4,5,6,7,8,9,11,154,156,12,13,100,16,17,19,20,21,22,216],"tindex":"b6309685-3e72-11e6-9c2b-4bc0aae4c91e","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:144","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256946456/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1413","type":"CtVariableReadImpl","sourcecode":"throwOnEof"},"failures":[],"tindex":"b630bd96-3e72-11e6-9c2b-8155511c22a6","method":{"position":"com.google.gson.stream.JsonReader:1331","type":"CtMethodImpl","sourcecode":"private int nextNonWhitespace(boolean throwOnEof) throws java.io.IOException {\n    if (throwOnEof) {\n        {\n            char[] char[] = com.google.gson.stream.JsonReader.this.char[];\n            int int = int;\n            int int = int;\n            while (true) {\n                if (p == l) {\n                    int = p;\n                    if (!(fillBuffer(1))) {\n                        break;\n                    } \n                    p = int;\n                    l = int;\n                } \n                int int = buffer[(p++)];\n                if (c == '\\n') {\n                    (int)++;\n                    int = p;\n                    continue;\n                } else if (((c == ' ') || (c == '\\r')) || (c == '\\t')) {\n                    continue;\n                } \n                if (c == '/') {\n                    int = p;\n                    if (p == l) {\n                        (int)--;\n                        boolean boolean = fillBuffer(2);\n                        (int)++;\n                        if (!charsLoaded) {\n                            return c;\n                        } \n                    } \n                    checkLenient();\n                    char char = buffer[int];\n                    switch (peek) {\n                        case '*' :\n                            (int)++;\n                            if (!(skipTo(\"*/\"))) {\n                                throw syntaxError(\"Unterminated comment\");\n                            } \n                            p = (int) + 2;\n                            l = int;\n                            continue;\n                        case '/' :\n                            (int)++;\n                            skipToEndOfLine();\n                            p = int;\n                            l = int;\n                            continue;\n                        default :\n                            return c;\n                    }\n                } else if (c == '#') {\n                    int = p;\n                    checkLenient();\n                    skipToEndOfLine();\n                    p = int;\n                    l = int;\n                } else {\n                    int = p;\n                    return c;\n                }\n            }\n            if (throwOnEof) {\n                throw new java.io.EOFException(((((\"End of input\" + \" at line \") + (getLineNumber())) + \" column \") + (getColumnNumber())));\n            } else {\n                return -1;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256946456/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"throwOnEof":"throwOnEof"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"b630bd97-3e72-11e6-9c2b-cbc2b734ff32","method":{"position":"com.google.gson.Gson:468","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256946456/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src == null) {\n                return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            return toJsonTree(src, src.getClass());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:79","type":"CtUnaryOperatorImpl","sourcecode":"!(json instanceof com.google.gson.JsonPrimitive)"},"failures":[],"tindex":"b630e4a8-3e72-11e6-9c2b-2dfa8ca451a5","method":{"position":"com.google.gson.Gson:871","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256946456/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (json == null) {\n                return null;\n            } \n            return ((T)(fromJson(new com.google.gson.internal.bind.JsonTreeReader(json), typeOfT)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:250","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[],"tindex":"b630e4a9-3e72-11e6-9c2b-9ffcf46a7244","method":{"position":"com.google.gson.Gson:249","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> doubleAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return in.nextDouble();\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    double double = value.doubleValue();\n                    checkValidFloatingPoint(doubleValue);\n                    out.value(value);\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256946456/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":21,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
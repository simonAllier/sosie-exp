{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":63,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":199,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":0,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":59,"com.google.gson.MixedStreamTest.testWriteLenient":14,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":239,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":281,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":52,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":364,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":279,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":368,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":163,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":370,"com.google.gson.JsonObjectTest.testAddingNullPropertyValue":249,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":140,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":343,"com.google.gson.functional.ObjectTest.testSingletonLists":277,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":166,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":385,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":187,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":216,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":110,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":292,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":39,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":22,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":410,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":98,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":42,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":373,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":95,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":206,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":154,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":202,"com.google.gson.functional.JsonTreeTest.testToJsonTree":213,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":47,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":215,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":235,"com.google.gson.JsonObjectTest.testEqualsNonEmptyObject":250,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":31,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":407,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":130,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":427,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":376,"com.google.gson.internal.bind.JsonElementReaderTest.testNestedObjects":224,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":289,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":219,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":58,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":152,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":338,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":299,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":247,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":432,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":236,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":355,"com.google.gson.JsonParserTest.testParseString":255,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":109,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":16,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":408,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":261,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":301,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":417,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":240,"com.google.gson.functional.StreamingTypeAdaptersTest.testFromJsonTree":244,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":342,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":93,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":173,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":442,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":17,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":298,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":87,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":220,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":285,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":11,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":258,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":167,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":320,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":348,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":81,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":175,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":75,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":394,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":78,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":337,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":378,"com.google.gson.functional.CollectionTest.testSetDeserialization":367,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":34,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":288,"com.google.gson.functional.EnumTest.testEnumSet":396,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":349,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":174,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":434,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":293,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":5,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":205,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":80,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":149,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":372,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":97,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":65,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":88,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":61,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":114,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":89,"com.google.gson.functional.MapTest.testMapSerialization":438,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":64,"com.google.gson.internal.bind.JsonElementReaderTest.testObject":226,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":71,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":161,"com.google.gson.functional.MapTest.testSerializeMaps":195,"com.google.gson.functional.MapTest.testComplexKeysSerialization":375,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":246,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":421,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":354,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":377,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":137,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":124,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":45,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":251,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":83,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":179,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":19,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":443,"com.google.gson.functional.PrettyPrintingTest.testMap":43,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":144,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":423,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":67,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":191,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":38,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":409,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":218,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":393,"com.google.gson.functional.CollectionTest.testQueueSerialization":424,"com.google.gson.functional.MapTest.testMapOfMapSerialization":437,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":260,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":15,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":384,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":188,"com.google.gson.functional.FieldNamingTest.testIdentity":162,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":176,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":310,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":302,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":1,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":54,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":212,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":276,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":207,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":113,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":361,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":36,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":383,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":262,"com.google.gson.functional.MapTest.testMapSubclassSerialization":433,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":315,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":351,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":168,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":265,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":352,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":241,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":371,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":347,"com.google.gson.functional.EnumTest.testEnumSubclass":398,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":40,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":291,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":334,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":178,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":120,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":363,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":362,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":231,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":35,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":85,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":278,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":194,"com.google.gson.MixedStreamTest.testWriteNulls":266,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":418,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":415,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":201,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":345,"com.google.gson.JsonObjectTest.testReadPropertyWithEmptyStringName":217,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":183,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":280,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":344,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":340,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":358,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":70,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":431,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":439,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":100,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":32,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":30,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":108,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":389,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":72,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":27,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":259,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":382,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":103,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":48,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":193,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":127,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":325,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":435,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":132,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":128,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":125,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":211,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":328,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":303,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":115,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":232,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":141,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":123,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":360,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":8,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":44,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":269,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":272,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":185,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":133,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":156,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":388,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":2,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":158,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":146,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":365,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":314,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":157,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":390,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":242,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":106,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":138,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":227,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":275,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":404,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":84,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":177,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":304,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":324,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":21,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":263,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":319,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":112,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":180,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":308,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":284,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":399,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":117,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":329,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":366,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":181,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":126,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":3,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":104,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":92,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":134,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":233,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":20,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":12,"com.google.gson.JsonPrimitiveTest.testEquals":223,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":131,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":397,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":69,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":73,"com.google.gson.functional.MapTest.testGeneralMapField":198,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":282,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":413,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":143,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":335,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":357,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":395,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":440,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":13,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":401,"com.google.gson.MixedStreamTest.testReadMixedStreamed":274,"com.google.gson.JsonObjectTest.testDeepCopy":252,"com.google.gson.internal.bind.JsonElementReaderTest.testBooleans":209,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":387,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":91,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":208,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":429,"com.google.gson.stream.JsonWriterTest.testNonFiniteDoubles":271,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":165,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":155,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":79,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":331,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":184,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":391,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":51,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":24,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":228,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":102,"com.google.gson.JsonPrimitiveTest.testEqualsDoesNotEquateStringAndNonStringTypes":222,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":311,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":136,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":190,"com.google.gson.functional.ObjectTest.testNestedDeserialization":309,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":99,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":66,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":230,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":153,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":339,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":82,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":346,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":18,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":116,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":56,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":243,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":430,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":119,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":257,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":374,"com.google.gson.functional.MapTest.testInterfaceTypeMap":197,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":145,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":322,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":353,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":403,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":122,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":151,"com.google.gson.MixedStreamTest.testWriteClosed":268,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":68,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":426,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":283,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":323,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":350,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":321,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":238,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":28,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":306,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":333,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":286,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":326,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":425,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":25,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":26,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":121,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":428,"com.google.gson.internal.bind.JsonElementReaderTest.testSkipValue":225,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":105,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":60,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":380,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":96,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":210,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":379,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":411,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":29,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":62,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":107,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":170,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":196,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":300,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":307,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":356,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":422,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":264,"com.google.gson.functional.MapTest.testRawMapSerialization":441,"com.google.gson.JsonParserTest.testParseReader":254,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":405,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":295,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":341,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":76,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":135,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":256,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":270,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":414,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":94,"com.google.gson.ObjectTypeAdapterTest.testSerialize":273,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":147,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":53,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":419,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":159,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":6,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":204,"com.google.gson.functional.MapTest.testMapWithQuotes":436,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":214,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":172,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":90,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":189,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":245,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":33,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":129,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":4,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":305,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":49,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":101,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":287,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":420,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":332,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":392,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":55,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":169,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":192,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":139,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":412,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":118,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":312,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":171,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":316,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":142,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":186,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":402,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":294,"com.google.gson.JsonObjectTest.testAddingStringProperties":253,"com.google.gson.functional.ObjectTest.testNestedSerialization":296,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":318,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":386,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":400,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":50,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":9,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":74,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":111,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":41,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":290,"com.google.gson.JsonPrimitiveTest.testBoolean":221,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":234,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":164,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":330,"com.google.gson.GsonBuilderTest.testCreatingMoreThanOnce":37,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":203,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":297,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":327,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":23,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":406,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":148,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":336,"com.google.gson.functional.CollectionTest.testSetSerialization":369,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":46,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":182,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":317,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":10,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":381,"com.google.gson.MixedStreamTest.testWriteInvalidState":267,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":57,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":359,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":86,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":237,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":160,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":200,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":248,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":313,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":150,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":7,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":229,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":77,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":416},"transformations":[{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[0,1,2,3,4,5,6,7,8,9],"tindex":"83e419d5-3f4b-11e6-bd35-174479d64ca3","method":{"position":"com.google.gson.stream.JsonWriter:490","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349440213/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            writeDeferredName();\n            java.lang.String java.lang.String = value.toString();\n            if ((!(boolean)) && (((string.equals(\"-Infinity\")) || (string.equals(\"Infinity\"))) || (string.equals(\"NaN\")))) {\n                throw new java.lang.IllegalArgumentException((\"Numeric values must be finite, but was \" + value));\n            } \n            beforeValue(false);\n            java.io.Writer.append(string);\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:127","type":"CtInvocationImpl"},"failures":[10,11,12,13],"tindex":"83e50436-3f4b-11e6-bd35-1d670b6ef181","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:125","type":"CtMethodImpl","sourcecode":"private java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> getBoundFields(com.google.gson.Gson context, com.google.gson.reflect.TypeToken<?> type, java.lang.Class<?> raw) {\n    if (raw.isInterface()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349440213/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> = new java.util.LinkedHashMap<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField>();\n            if (raw.isInterface()) {\n                return result;\n            } \n            java.lang.reflect.Type java.lang.reflect.Type = type.getType();\n            while (raw != (java.lang.Object.java.lang.Object.java.lang.Class)) {\n                java.lang.reflect.Field[] java.lang.reflect.Field[] = raw.getDeclaredFields();\n                for (java.lang.reflect.Field java.lang.reflect.Field : fields) {\n                    boolean boolean = excludeField(field, true);\n                    boolean boolean = excludeField(field, false);\n                    if ((!serialize) && (!deserialize)) {\n                        continue;\n                    } \n                    field.setAccessible(true);\n                    java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, field.getGenericType());\n                    com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = createBoundField(context, field, getFieldName(field), com.google.gson.reflect.TypeToken.get(fieldType), serialize, deserialize);\n                    com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = result.put(boundField.java.lang.String, boundField);\n                    if (previous != null) {\n                        throw new java.lang.IllegalArgumentException(((declaredType + \" declares multiple JSON fields named \") + (previous.java.lang.String)));\n                    } \n                }\n                type = com.google.gson.reflect.TypeToken.get(com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, raw.getGenericSuperclass()));\n                raw = type.getRawType();\n            }\n            return result;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"raw"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:274","type":"CtVariableReadImpl"},"failures":[14,15,16,17,18,19,20],"tindex":"83e55257-3f4b-11e6-bd35-2d4f48e66a15","method":{"position":"com.google.gson.Gson:273","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> floatAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349440213/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return ((float)(in.nextDouble()));\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    float float = value.floatValue();\n                    checkValidFloatingPoint(floatValue);\n                    out.value(value);\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.FieldNamingPolicy:155","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"83e57968-3f4b-11e6-bd35-f9a65ea9b3d2","method":{"position":"com.google.gson.FieldNamingPolicy:163","type":"CtMethodImpl","sourcecode":"private static java.lang.String modifyString(char firstCharacter, java.lang.String srcString, int indexOfSubstring) {\n    if (!(java.lang.Character.isUpperCase(firstCharacter))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349440213/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return indexOfSubstring < (srcString.length()) ? firstCharacter + (srcString.substring(indexOfSubstring)) : java.lang.String.valueOf(firstCharacter);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"firstCharacter":"firstCharacter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:107","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"83e57969-3f4b-11e6-bd35-837c384f8f70","method":{"position":"com.google.gson.JsonObject:186","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonArray) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349440213/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (o == (com.google.gson.JsonObject.this)) || ((o instanceof com.google.gson.JsonObject) && (((com.google.gson.JsonObject)(o)).com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.equals(com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"83e5a07a-3f4b-11e6-bd35-9f0a935e4589","method":{"position":"com.google.gson.Gson:576","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349440213/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            if (src == null) {\n                {\n                    try {\n                        com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                        toJson(src, typeOfSrc, jsonWriter);\n                    } catch (java.io.IOException e) {\n                        throw new com.google.gson.JsonIOException(e);\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349440213/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"83e5c78b-3f4b-11e6-bd35-a3c54922836c","method":{"position":"com.google.gson.Gson:576","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349440213/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            if (src == null) {\n                {\n                    try {\n                        com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                        toJson(src, typeOfSrc, jsonWriter);\n                    } catch (java.io.IOException e) {\n                        throw new com.google.gson.JsonIOException(e);\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349440213/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:243","type":"CtBinaryOperatorImpl"},"failures":[21,22,23,24,25,26],"tindex":"83e5c78c-3f4b-11e6-bd35-137d77db9beb","method":{"position":"com.google.gson.internal.Excluder:242","type":"CtMethodImpl","sourcecode":"private boolean isValidUntil(com.google.gson.annotations.Until annotation) {\n    if (annotation != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349440213/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (annotation != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349440213/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (annotation != null) {\n                        double double = annotation.value();\n                        if (annotationVersion <= (double)) {\n                            return false;\n                        } \n                    } \n                    return true;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"83e5ee9d-3f4b-11e6-bd35-8d611cc2d998","method":{"position":"com.google.gson.Gson:510","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349440213/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src == null) {\n                return toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull);\n            } \n            return toJson(src, src.getClass());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:120","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"83e5ee9e-3f4b-11e6-bd35-5f2ba6c78a37","method":{"position":"com.google.gson.internal.LinkedTreeMap:605","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonArray) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349440213/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof com.google.gson.JsonNull) {\n                {\n                    return containsKey(o);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349440213/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:94","type":"CtBinaryOperatorImpl"},"failures":[27,28,29,30,31,32,33,34],"tindex":"83e615af-3f4b-11e6-bd35-8521714b429d","method":{"position":"com.google.gson.internal.ConstructorConstructor:200","type":"CtMethodImpl","sourcecode":"private <T>com.google.gson.internal.ObjectConstructor<T> newUnsafeAllocator(final java.lang.reflect.Type type, final java.lang.Class<? super T> rawType) {\n    if (type instanceof java.lang.Class) {\n        {\n            return new com.google.gson.internal.ObjectConstructor<T>() {\n                private final com.google.gson.internal.UnsafeAllocator unsafeAllocator = com.google.gson.internal.UnsafeAllocator.create();\n\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                public T construct() {\n                    try {\n                        java.lang.Object java.lang.Object = com.google.gson.internal.UnsafeAllocator.newInstance(rawType);\n                        return ((T)(newInstance));\n                    } catch (java.lang.Exception e) {\n                        throw new java.lang.RuntimeException((((\"Unable to invoke no-args constructor for \" + type) + \". \") + \"Register an InstanceCreator with Gson for this type may fix this problem.\") , e);\n                    }\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349440213/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"83e63cc0-3f4b-11e6-bd35-d59b81acb20d","method":{"position":"com.google.gson.JsonObject:100","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Boolean value) {\n    if (property == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349440213/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            add(property, createJsonElement(value));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"83e63cc1-3f4b-11e6-bd35-d59332b7b4ec","method":{"position":"com.google.gson.Gson:695","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.lang.String json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349440213/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:554","type":"CtBinaryOperatorImpl"},"failures":[35,36,37,38,39,40,14,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,0,82,83,10,84,85,1,11,86,87,88,89,90,91,92,93,94,95,96,15,16,17,97,18,19,20,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,3,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,21,22,23,169,24,25,170,26,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,9,199,200,201,202,203,204,205,206,207,208],"tindex":"83e663d2-3f4b-11e6-bd35-ed7d875c1a6c","method":{"position":"com.google.gson.GsonBuilder:551","type":"CtMethodImpl","sourcecode":"private void addTypeAdaptersForDate(java.lang.String datePattern, int dateStyle, int timeStyle, java.util.List<com.google.gson.TypeAdapterFactory> factories) {\n    if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n        {\n            com.google.gson.DefaultDateTypeAdapter com.google.gson.DefaultDateTypeAdapter;\n            if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n                dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(datePattern);\n            } else if ((dateStyle != (java.text.DateFormat.java.text.DateFormat.int)) && (timeStyle != (java.text.DateFormat.java.text.DateFormat.int))) {\n                dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(dateStyle , timeStyle);\n            } else {\n                return ;\n            }\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.util.Date.java.util.Date.java.lang.Class), dateTypeAdapter));\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Timestamp.java.sql.Timestamp.java.lang.Class), dateTypeAdapter));\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Date.java.sql.Date.java.lang.Class), dateTypeAdapter));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349440213/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"datePattern":"datePattern"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:274","type":"CtBinaryOperatorImpl"},"failures":[209,210,211,212,213,214,215,216,217,218,219,220,221,222,223],"tindex":"83e68ae3-3f4b-11e6-bd35-d9e3b0f9d1b6","method":{"position":"com.google.gson.JsonPrimitive:273","type":"CtMethodImpl","sourcecode":"private static boolean isPrimitiveOrString(java.lang.Object target) {\n    if (target instanceof java.lang.String) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349440213/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (target instanceof java.lang.String) {\n                {\n                    if (target instanceof java.lang.String) {\n                        return true;\n                    } \n                    java.lang.Class<?> java.lang.Class<?> = target.getClass();\n                    for (java.lang.Class<?> java.lang.Class<?> : com.google.gson.JsonPrimitive.com.google.gson.JsonPrimitive.java.lang.Class<?>[]) {\n                        if (standardPrimitive.isAssignableFrom(classOfPrimitive)) {\n                            return true;\n                        } \n                    }\n                    return false;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349440213/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"target":"target"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:120","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"83e6b1f4-3f4b-11e6-bd35-dd07207ceab2","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:839","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonPrimitive) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349440213/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof com.google.gson.JsonNull) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349440213/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return containsKey(o);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"83e6b1f5-3f4b-11e6-bd35-bb47ff8a483e","method":{"position":"com.google.gson.Gson:847","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(com.google.gson.JsonElement json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            if (json == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349440213/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            } else {\n                {\n                    java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n                    return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349440213/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.TreeTypeAdapter:55","type":"CtInvocationImpl"},"failures":[224,225,226,227,228,52,53,55,56,60,63,69,70,71,72,73,74,75,76,89,92,93,94,229,210,211,212,213,98,230,231,232,233,234,235,236,237,113,29,238,129,139,142,239,240,241,242,243,244,245,175,178,179,180,186,216,246,199,217,247,248,249,250,251,218,252,253,219,254,255,220,256],"tindex":"83e6d906-3f4b-11e6-bd35-3775d528ddf7","method":{"position":"com.google.gson.JsonObject:53","type":"CtMethodImpl","sourcecode":"public void add(java.lang.String property, com.google.gson.JsonElement value) {\n    if (value.isJsonNull()) {\n        {\n            if (value == null) {\n                value = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.put(property, value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349440213/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:298","type":"CtBinaryOperatorImpl"},"failures":[14,257,258,259,260,261,262],"tindex":"83e6d907-3f4b-11e6-bd35-23a251ff987f","method":{"position":"com.google.gson.Gson:297","type":"CtMethodImpl","sourcecode":"private void checkValidFloatingPoint(double value) {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349440213/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                throw new java.lang.IllegalArgumentException(((value + \" is not a valid double value as per JSON specification. To override this\") + \" behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.\"));\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:430","type":"CtFieldReadImpl"},"failures":[263,264,265,266,267,14,41,268,52,53,54,55,56,57,61,63,67,94,210,211,212,213,98,230,231,232,233,234,235,113,29,238,126,128,131,132,3,133,134,135,137,139,148,192,195,196,9,199,256,269,270],"tindex":"83e6d908-3f4b-11e6-bd35-4bf93f2c4a0d","method":{"position":"com.google.gson.stream.JsonWriter:268","type":"CtMethodImpl","sourcecode":"public final void setSerializeNulls(boolean serializeNulls) {\n    if (serializeNulls) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349440213/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = serializeNulls;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeNulls":"serializeNulls"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:85","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"83e70019-3f4b-11e6-bd35-f1c4f3bbc469","method":{"position":"com.google.gson.internal.$Gson$Types:411","type":"CtMethodImpl","sourcecode":"private static int indexOf(java.lang.Object[] array, java.lang.Object toFind) {\n    for (int int = 0 ; i < (array.int) ; i++) {\n        if (toFind.equals(array[i])) {\n            return i;\n        } \n    }\n    throw new java.util.NoSuchElementException();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"toFind"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"83e7001a-3f4b-11e6-bd35-1904a9f26404","method":{"position":"com.google.gson.Gson:552","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349440213/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            if (src != null) {\n                toJson(src, src.getClass(), writer);\n            } else {\n                toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull, writer);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:565","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"83e7001b-3f4b-11e6-bd35-75916e6c870f","method":{"position":"com.google.gson.stream.JsonWriter:212","type":"CtMethodImpl","sourcecode":"public final void setIndent(java.lang.String indent) {\n    if (indent == null) {\n        {\n            if (indent == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349440213/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if ((indent.length()) == 0) {\n                        com.google.gson.stream.JsonWriter.this.java.lang.String = null;\n                        com.google.gson.stream.JsonWriter.this.java.lang.String = \":\";\n                    } else {\n                        com.google.gson.stream.JsonWriter.this.java.lang.String = indent;\n                        com.google.gson.stream.JsonWriter.this.java.lang.String = \": \";\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349440213/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"indent"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:298","type":"CtBinaryOperatorImpl"},"failures":[271],"tindex":"83e7272c-3f4b-11e6-bd35-41e4c2b39cba","method":{"position":"com.google.gson.stream.JsonWriter:461","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(double value) throws java.io.IOException {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349440213/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                throw new java.lang.IllegalArgumentException((\"Numeric values must be finite, but was \" + value));\n            } \n            writeDeferredName();\n            beforeValue(false);\n            java.io.Writer.append(java.lang.Double.toString(value));\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[0,1,2,4,5,6,7,8,9],"tindex":"83e7272d-3f4b-11e6-bd35-7d22dee3075e","method":{"position":"com.google.gson.internal.bind.TypeAdapters:245","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349440213/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:233","type":"CtBinaryOperatorImpl"},"failures":[21,22,23,169,24,25,170,26],"tindex":"83e74e3e-3f4b-11e6-bd35-adc437b4d888","method":{"position":"com.google.gson.internal.Excluder:232","type":"CtMethodImpl","sourcecode":"private boolean isValidSince(com.google.gson.annotations.Since annotation) {\n    if (annotation != null) {\n        {\n            if (annotation != null) {\n                double double = annotation.value();\n                if (annotationVersion > (double)) {\n                    return false;\n                } \n            } \n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349440213/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"83e74e3f-3f4b-11e6-bd35-eb5f168aa51e","method":{"position":"com.google.gson.TypeAdapter:268","type":"CtMethodImpl","sourcecode":"public final T fromJson(java.lang.String json) throws java.io.IOException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349440213/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            return fromJson(new java.io.StringReader(json));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"83e74e40-3f4b-11e6-bd35-ad6068fd6afe","method":{"position":"com.google.gson.Gson:847","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(com.google.gson.JsonElement json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            if (json == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349440213/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            } else {\n                {\n                    java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n                    return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349440213/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:726","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"83e77551-3f4b-11e6-bd35-49cc8109de8d","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:170","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(long value) throws java.io.IOException {\n    if (value == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349440213/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:565","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"83e77552-3f4b-11e6-bd35-1fae7c776b09","method":{"position":"com.google.gson.stream.JsonWriter:212","type":"CtMethodImpl","sourcecode":"public final void setIndent(java.lang.String indent) {\n    if (indent == null) {\n        {\n            if (indent == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349440213/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if ((indent.length()) == 0) {\n                        com.google.gson.stream.JsonWriter.this.java.lang.String = null;\n                        com.google.gson.stream.JsonWriter.this.java.lang.String = \":\";\n                    } else {\n                        com.google.gson.stream.JsonWriter.this.java.lang.String = indent;\n                        com.google.gson.stream.JsonWriter.this.java.lang.String = \": \";\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349440213/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"indent"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:455","type":"CtBinaryOperatorImpl"},"failures":[52,53,54,55,56,60,70,71,72,73,74,75,76,272,111,112,113,129,130,133,139,142,143,145,149,150,151,152,154,157,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,190,193,199,204,205,206,207,208],"tindex":"83e77553-3f4b-11e6-bd35-e989190938cb","method":{"position":"com.google.gson.TreeTypeAdapter:92","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newFactoryWithMatchRawType(com.google.gson.reflect.TypeToken<?> exactType, java.lang.Object typeAdapter) {\n    if ((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349440213/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349440213/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    boolean boolean = (exactType.getType()) == (exactType.getRawType());\n                    return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , exactType , matchRawType , null);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:455","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"83e79c64-3f4b-11e6-bd35-7b43ddd82c6d","method":{"position":"com.google.gson.TreeTypeAdapter:92","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newFactoryWithMatchRawType(com.google.gson.reflect.TypeToken<?> exactType, java.lang.Object typeAdapter) {\n    if ((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349440213/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349440213/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    boolean boolean = (exactType.getType()) == (exactType.getRawType());\n                    return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , exactType , matchRawType , null);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:125","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"83e7c375-3f4b-11e6-bd35-431fff426e47","method":{"position":"com.google.gson.JsonArray:81","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement set(int index, com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349440213/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return java.util.List<com.google.gson.JsonElement>.set(index, element);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:243","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"83e7c376-3f4b-11e6-bd35-d7014ef393fa","method":{"position":"com.google.gson.internal.Excluder:242","type":"CtMethodImpl","sourcecode":"private boolean isValidUntil(com.google.gson.annotations.Until annotation) {\n    if (annotation != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349440213/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (annotation != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349440213/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (annotation != null) {\n                        double double = annotation.value();\n                        if (annotationVersion <= (double)) {\n                            return false;\n                        } \n                    } \n                    return true;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:137","type":"CtBinaryOperatorImpl"},"failures":[35,36,273,264,265,267,268,274,275,44,45,49,51,52,53,55,56,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,59,310,311,312,313,314,315,316,61,63,64,66,67,68,69,71,72,73,74,76,78,79,80,0,83,10,85,1,11,86,87,89,91,92,93,317,12,318,319,210,211,212,213,98,230,231,232,320,321,322,233,234,323,324,325,326,235,327,328,329,2,330,331,332,333,111,112,334,335,336,337,338,27,28,339,340,29,238,114,341,115,116,117,118,119,120,121,342,122,123,124,125,126,127,343,131,132,344,3,134,137,138,4,345,346,347,5,348,349,140,350,6,7,141,30,351,31,352,353,354,239,240,241,242,243,147,355,356,245,357,358,359,360,361,362,363,364,365,366,367,368,369,158,159,160,161,162,164,165,166,167,21,22,23,169,24,25,170,26,173,177,178,180,182,32,33,370,34,371,216,372,196,373,197,374,198,375,199,200,376,201,377,378,379,380,381,382,383,384,220,205],"tindex":"83e7ea87-3f4b-11e6-bd35-a9a840eb3dd8","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:86","type":"CtMethodImpl","sourcecode":"private com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField createBoundField(final com.google.gson.Gson context, final java.lang.reflect.Field field, final java.lang.String name, final com.google.gson.reflect.TypeToken<?> fieldType, boolean serialize, boolean deserialize) {\n    if ((!serialize) && (!deserialize)) {\n        {\n            final boolean boolean = com.google.gson.internal.Primitives.isPrimitive(fieldType.getRawType());\n            return new com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField(name, serialize, deserialize) {\n                final com.google.gson.TypeAdapter<?> typeAdapter = getFieldAdapter(context, field, fieldType);\n\n                @java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n                @java.lang.Override\n                void write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                    java.lang.Object java.lang.Object = field.get(value);\n                    com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n                    t.write(writer, fieldValue);\n                }\n\n                @java.lang.Override\n                void read(com.google.gson.stream.JsonReader reader, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                    java.lang.Object java.lang.Object = com.google.gson.TypeAdapter<?>.read(reader);\n                    if ((fieldValue != null) || (!isPrimitive)) {\n                        field.set(value, fieldValue);\n                    } \n                }\n\n                public boolean writeField(java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                    if (!(boolean))\n                        return false;\n                    \n                    java.lang.Object java.lang.Object = field.get(value);\n                    return fieldValue != value;\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349440213/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serialize":"serialize","deserialize":"deserialize"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:163","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"83e838a8-3f4b-11e6-bd35-b1864f9aaa35","method":{"position":"com.google.gson.internal.$Gson$Types:151","type":"CtMethodImpl","sourcecode":"static boolean equal(java.lang.Object a, java.lang.Object b) {\n    return (a == b) || ((a != null) && (a.equals(b)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"83e838a9-3f4b-11e6-bd35-c3f723b367c8","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:175","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349440213/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            if (!(isLenient())) {\n                double double = value.doubleValue();\n                if ((java.lang.Double.isNaN(d)) || (java.lang.Double.isInfinite(d))) {\n                    throw new java.lang.IllegalArgumentException((\"JSON forbids NaN and infinities: \" + value));\n                } \n            } \n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:109","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"83e838aa-3f4b-11e6-bd35-992f1efddf85","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:512","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"rawtypes\")\n@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonPrimitive) {\n        {\n            if (o instanceof java.util.Map.Entry) {\n                java.util.Map.Entry java.util.Map.Entry = ((java.util.Map.Entry)(o));\n                return ((K) == null ? (other.getKey()) == null : K.equals(other.getKey())) && ((V) == null ? (other.getValue()) == null : V.equals(other.getValue()));\n            } \n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349440213/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"83e85fbb-3f4b-11e6-bd35-95d22ffa242f","method":{"position":"com.google.gson.JsonParser:44","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement parse(java.lang.String json) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            return parse(new java.io.StringReader(json));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349440213/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:98","type":"CtBinaryOperatorImpl"},"failures":[35,36,273,385,264,265,14,41,42,43,44,45,46,47,48,49,50,51,52,53,55,56,276,277,280,283,286,288,290,293,295,296,301,303,304,306,310,311,312,314,315,316,61,63,64,67,72,74,0,83,1,11,86,87,89,92,93,317,12,318,386,387,388,389,390,391,210,211,212,213,98,230,231,232,320,321,322,233,234,325,326,235,392,393,331,394,395,332,333,111,334,337,338,27,28,339,340,29,238,114,341,115,117,118,119,342,123,126,128,131,132,3,134,137,4,346,347,5,348,349,350,6,7,30,31,352,396,397,146,398,353,399,147,400,401,355,356,402,403,404,405,406,407,408,409,410,245,411,412,413,414,415,416,417,148,418,419,357,359,420,421,360,363,364,422,365,423,424,425,426,427,366,428,368,429,369,430,158,159,160,161,162,431,166,21,169,24,26,172,174,178,180,182,183,190,32,432,33,370,34,216,372,433,195,434,435,196,436,437,438,8,439,197,440,374,198,9,441,375,442,443,199,200,376,201,377,379,380,381,382,383,384,220,256,202,203,205],"tindex":"83e886cc-3f4b-11e6-bd35-71dee4ed2265","method":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:74","type":"CtMethodImpl","sourcecode":"private java.lang.reflect.Type getRuntimeTypeIfMoreSpecific(java.lang.reflect.Type type, java.lang.Object value) {\n    if (type instanceof java.lang.reflect.ParameterizedType) {\n        {\n            if ((value != null) && (((type == (java.lang.Object.java.lang.Object.java.lang.Class)) || (type instanceof java.lang.reflect.TypeVariable<?>)) || (type instanceof java.lang.Class<?>))) {\n                type = value.getClass();\n            } \n            return type;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349440213/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:109","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"83e8addd-3f4b-11e6-bd35-0bb06d79eb1f","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:839","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonPrimitive) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349440213/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof com.google.gson.JsonNull) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349440213/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return containsKey(o);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:120","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"83e8adde-3f4b-11e6-bd35-1f1b13d5f51c","method":{"position":"com.google.gson.internal.$Gson$Types:511","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    return (o instanceof java.lang.reflect.GenericArrayType) && (com.google.gson.internal.$Gson$Types.equals(com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl.this, ((java.lang.reflect.GenericArrayType)(o))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl"},"failures":[52,53,54,55,56,63,210,211,212,213,98,230,231,232,233,234,235,113,29,238,139,199,256,269,270],"tindex":"83e8addf-3f4b-11e6-bd35-ab21c423070e","method":{"position":"com.google.gson.Gson:491","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349440213/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src == null) {\n                {\n                    com.google.gson.internal.bind.JsonTreeWriter com.google.gson.internal.bind.JsonTreeWriter = new com.google.gson.internal.bind.JsonTreeWriter();\n                    toJson(src, typeOfSrc, writer);\n                    return writer.get();\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349440213/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[2,119],"tindex":"83e8d4f0-3f4b-11e6-bd35-03e5494af7e5","method":{"position":"com.google.gson.Gson:261","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349440213/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            double double = value.doubleValue();\n            checkValidFloatingPoint(doubleValue);\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1413","type":"CtVariableReadImpl"},"failures":[],"tindex":"83e8d4f1-3f4b-11e6-bd35-375b7de7d244","method":{"position":"com.google.gson.stream.JsonReader:1331","type":"CtMethodImpl","sourcecode":"private int nextNonWhitespace(boolean throwOnEof) throws java.io.IOException {\n    if (throwOnEof) {\n        {\n            char[] char[] = com.google.gson.stream.JsonReader.this.char[];\n            int int = int;\n            int int = int;\n            while (true) {\n                if (p == l) {\n                    int = p;\n                    if (!(fillBuffer(1))) {\n                        break;\n                    } \n                    p = int;\n                    l = int;\n                } \n                int int = buffer[(p++)];\n                if (c == '\\n') {\n                    (int)++;\n                    int = p;\n                    continue;\n                } else if (((c == ' ') || (c == '\\r')) || (c == '\\t')) {\n                    continue;\n                } \n                if (c == '/') {\n                    int = p;\n                    if (p == l) {\n                        (int)--;\n                        boolean boolean = fillBuffer(2);\n                        (int)++;\n                        if (!charsLoaded) {\n                            return c;\n                        } \n                    } \n                    checkLenient();\n                    char char = buffer[int];\n                    switch (peek) {\n                        case '*' :\n                            (int)++;\n                            if (!(skipTo(\"*/\"))) {\n                                throw syntaxError(\"Unterminated comment\");\n                            } \n                            p = (int) + 2;\n                            l = int;\n                            continue;\n                        case '/' :\n                            (int)++;\n                            skipToEndOfLine();\n                            p = int;\n                            l = int;\n                            continue;\n                        default :\n                            return c;\n                    }\n                } else if (c == '#') {\n                    int = p;\n                    checkLenient();\n                    skipToEndOfLine();\n                    p = int;\n                    l = int;\n                } else {\n                    int = p;\n                    return c;\n                }\n            }\n            if (throwOnEof) {\n                throw new java.io.EOFException(((((\"End of input\" + \" at line \") + (getLineNumber())) + \" column \") + (getColumnNumber())));\n            } else {\n                return -1;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349440213/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"throwOnEof":"throwOnEof"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:274","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"83e8fc02-3f4b-11e6-bd35-cbb123ae47f6","method":{"position":"com.google.gson.JsonPrimitive:273","type":"CtMethodImpl","sourcecode":"private static boolean isPrimitiveOrString(java.lang.Object target) {\n    if (target instanceof java.lang.String) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349440213/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (target instanceof java.lang.String) {\n                {\n                    if (target instanceof java.lang.String) {\n                        return true;\n                    } \n                    java.lang.Class<?> java.lang.Class<?> = target.getClass();\n                    for (java.lang.Class<?> java.lang.Class<?> : com.google.gson.JsonPrimitive.com.google.gson.JsonPrimitive.java.lang.Class<?>[]) {\n                        if (standardPrimitive.isAssignableFrom(classOfPrimitive)) {\n                            return true;\n                        } \n                    }\n                    return false;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349440213/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"target":"target"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:107","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"83e8fc03-3f4b-11e6-bd35-3b081d8936e1","method":{"position":"com.google.gson.internal.LinkedTreeMap:605","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonArray) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349440213/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof com.google.gson.JsonNull) {\n                {\n                    return containsKey(o);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349440213/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"83e92314-3f4b-11e6-bd35-77299788fd9b","method":{"position":"com.google.gson.Gson:491","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349440213/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src == null) {\n                {\n                    com.google.gson.internal.bind.JsonTreeWriter com.google.gson.internal.bind.JsonTreeWriter = new com.google.gson.internal.bind.JsonTreeWriter();\n                    toJson(src, typeOfSrc, writer);\n                    return writer.get();\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349440213/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:105","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"83e92315-3f4b-11e6-bd35-f9a81d602dab","method":{"position":"com.google.gson.internal.LinkedTreeMap:574","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonObject) {\n        {\n            if (!(o instanceof java.util.Map.Entry)) {\n                return false;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n            if (node == null) {\n                return false;\n            } \n            removeInternal(node, true);\n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349440213/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":49,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
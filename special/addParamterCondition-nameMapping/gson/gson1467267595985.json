{"failureDictionary":{"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":161,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":171,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":149,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":31,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":43,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":140,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":180,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":354,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":20,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":38,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":85,"com.google.gson.stream.JsonWriterTest.testRepeatedName":351,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":54,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":264,"com.google.gson.MixedStreamTest.testWriteLenient":49,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":204,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":132,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":278,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":25,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":194,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":336,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":172,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":201,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":72,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":282,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":145,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":273,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":340,"com.google.gson.functional.ObjectTest.testSingletonLists":95,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":73,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":130,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":181,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":359,"com.google.gson.stream.JsonWriterTest.testStrings":356,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":113,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":361,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":311,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":56,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":110,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":52,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":114,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":284,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":316,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":65,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":9,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":147,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":281,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":167,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":203,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":199,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":211,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":33,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":288,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":37,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":83,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":128,"com.google.gson.functional.EnumTest.testEnumCaseMapping":345,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":179,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":348,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":119,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":342,"com.google.gson.stream.JsonWriterTest.testNullStringValue":349,"com.google.gson.functional.JsonTreeTest.testToJsonTree":16,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":39,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":152,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":5,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":7,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":258,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":309,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":323,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":313,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":274,"com.google.gson.internal.LinkedHashTreeMapTest.testAvlBuilder":366,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":222,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":53,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":35,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":277,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":338,"com.google.gson.functional.MapTest.testGeneralMapField":159,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":229,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":89,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":212,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":236,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":241,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":133,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":176,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":246,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":269,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":320,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":364,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":265,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":102,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":81,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":243,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":252,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":290,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":339,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":363,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":143,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":141,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":177,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":84,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":127,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":262,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":314,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":193,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":256,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":68,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":108,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":234,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":275,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":129,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":87,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":286,"com.google.gson.stream.JsonWriterTest.testArraysInObjects":350,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":362,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":126,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":170,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":75,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":343,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":299,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":106,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":317,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":2,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":333,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":82,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":263,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":220,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":107,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":230,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":225,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":293,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":58,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":248,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":301,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":268,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":166,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":295,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":71,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":29,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":169,"com.google.gson.stream.JsonWriterTest.testDoubles":368,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":131,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":158,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":245,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":125,"com.google.gson.functional.MapTest.testInterfaceTypeMap":157,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":242,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":214,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":296,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":146,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":280,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":310,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":99,"com.google.gson.functional.EnumTest.testEnumSet":276,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":217,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":304,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":298,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":115,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":80,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":329,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":103,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":303,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":346,"com.google.gson.MixedStreamTest.testWriteClosed":51,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":78,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":198,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":319,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":97,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":266,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":305,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":59,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":22,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":111,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":219,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":226,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":30,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":163,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":341,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":139,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":61,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":98,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":197,"com.google.gson.functional.MapTest.testMapSerialization":331,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":344,"com.google.gson.functional.MapTest.testSerializeMaps":17,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":207,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":287,"com.google.gson.functional.MapTest.testComplexKeysSerialization":332,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":200,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":326,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":239,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":188,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":91,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":41,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":250,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":13,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":92,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":227,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":21,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":253,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":137,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":150,"com.google.gson.internal.LinkedHashTreeMapTest.testDoubleCapacity":367,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":55,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":18,"com.google.gson.stream.JsonWriterTest.testDeepNestingObjects":355,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":121,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":64,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":178,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":195,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":272,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":45,"com.google.gson.functional.MapTest.testRawMapSerialization":160,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":334,"com.google.gson.functional.PrettyPrintingTest.testMap":148,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":213,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":312,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":104,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":164,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":196,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":32,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":116,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":315,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":360,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":185,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":122,"com.google.gson.functional.CollectionTest.testQueueSerialization":337,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":40,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":42,"com.google.gson.functional.PrimitiveTest.testByteSerialization":1,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":44,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":112,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":231,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":10,"com.google.gson.functional.MapTest.testMapOfMapSerialization":155,"com.google.gson.ObjectTypeAdapterTest.testSerialize":358,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":254,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":174,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":26,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":192,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":259,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":182,"com.google.gson.functional.FieldNamingTest.testIdentity":208,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":235,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":205,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":306,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":74,"com.google.gson.functional.MapTest.testMapWithQuotes":154,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":321,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":15,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":27,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":57,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":94,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":62,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":70,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":77,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":289,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":24,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":183,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":257,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":144,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":292,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":123,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":191,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":300,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":271,"com.google.gson.functional.MapTest.testMapSubclassSerialization":328,"com.google.gson.internal.LinkedHashTreeMapTest.testDoubleCapacityAllNodesOnLeft":365,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":327,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":118,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":173,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":261,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":238,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":46,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":215,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":283,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":134,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":302,"com.google.gson.functional.EnumTest.testEnumSubclass":279,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":260,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":322,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":244,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":240,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":28,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":120,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":285,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":12,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":63,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":8,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":135,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":228,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":168,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":76,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":162,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":335,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":3,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":69,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":291,"com.google.gson.functional.ObjectTest.testNestedSerialization":105,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":223,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":175,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":249,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":86,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":255,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":19,"com.google.gson.stream.JsonWriterTest.testObjectsInArrays":352,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":136,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":210,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":297,"com.google.gson.MixedStreamTest.testWriteNulls":47,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":50,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":294,"com.google.gson.stream.JsonWriterTest.testUnicodeLineBreaksEscaped":357,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":232,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":100,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":90,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":67,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":96,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":6,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":221,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":156,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":184,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":142,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":186,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":308,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":138,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":270,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":23,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":209,"com.google.gson.functional.CollectionTest.testSetSerialization":202,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":66,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":151,"com.google.gson.functional.StringTest.testStringValueSerialization":187,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":93,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":189,"com.google.gson.MixedStreamTest.testWriteInvalidState":48,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":247,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":11,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":0,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":218,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":251,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":190,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":237,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":267,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":325,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":224,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":324,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":124,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":206,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":88,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":153,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":347,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":60,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":330,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":36,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":34,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":14,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":79,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":307,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":101,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":109,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":165,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":318,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":216,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":4,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":353,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":117,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":233},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:578","type":"CtBinaryOperatorImpl","sourcecode":"root == null"},"failures":[0],"tindex":"aa017579-3e8a-11e6-a0c6-8366e7f49e68","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:401","type":"CtMethodImpl","sourcecode":"private void rotateLeft(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172081/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (root == null) {\n                {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivotLeft;\n                    if (pivotLeft != null) {\n                        pivotLeft.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n                    } \n                    replaceInParent(root, pivot);\n                    pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n                    root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot;\n                    root.int = (java.lang.Math.max((left != null ? left.int : 0), (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n                    pivot.int = (java.lang.Math.max(root.int, (pivotRight != null ? pivotRight.int : 0))) + 1;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172081/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"root"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[1],"tindex":"aa01eaaa-3e8a-11e6-a0c6-2f10c8ac42ef","method":{"position":"com.google.gson.internal.bind.TypeAdapters:201","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172081/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:136","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.TypeVariable"},"failures":[],"tindex":"aa01eaab-3e8a-11e6-a0c6-79bacb4e5ea0","method":{"position":"com.google.gson.internal.$Gson$Types:217","type":"CtMethodImpl","sourcecode":"public static java.lang.String typeToString(java.lang.reflect.Type type) {\n    return type instanceof java.lang.Class ? ((java.lang.Class<?>)(type)).getName() : type.toString();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:430","type":"CtFieldReadImpl","sourcecode":"serializeNulls"},"failures":[2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52],"tindex":"aa0211bc-3e8a-11e6-a0c6-c9742c0ce3dd","method":{"position":"com.google.gson.stream.JsonWriter:268","type":"CtMethodImpl","sourcecode":"public final void setSerializeNulls(boolean serializeNulls) {\n    if (serializeNulls) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172081/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = serializeNulls;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeNulls":"serializeNulls"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:578","type":"CtBinaryOperatorImpl","sourcecode":"root == null"},"failures":[],"tindex":"aa0211bd-3e8a-11e6-a0c6-2f3222d791bb","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:401","type":"CtMethodImpl","sourcecode":"private void rotateLeft(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172081/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (root == null) {\n                {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivotLeft;\n                    if (pivotLeft != null) {\n                        pivotLeft.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n                    } \n                    replaceInParent(root, pivot);\n                    pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n                    root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot;\n                    root.int = (java.lang.Math.max((left != null ? left.int : 0), (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n                    pivot.int = (java.lang.Math.max(root.int, (pivotRight != null ? pivotRight.int : 0))) + 1;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172081/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[53],"tindex":"aa0238ce-3e8a-11e6-a0c6-c5263c9dbb66","method":{"position":"com.google.gson.Gson:133","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src) {\n    if (src != null) {\n        {\n            return toJsonTree(src);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172081/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:459","type":"CtBinaryOperatorImpl","sourcecode":"typeAdapter instanceof com.google.gson.TypeAdapter<?>"},"failures":[],"tindex":"aa0238cf-3e8a-11e6-a0c6-cdb9a27aded1","method":{"position":"com.google.gson.TreeTypeAdapter:103","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newTypeHierarchyFactory(java.lang.Class<?> hierarchyType, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172081/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , null , false , hierarchyType);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:85","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[],"tindex":"aa0238d0-3e8a-11e6-a0c6-2b4ef1e0a086","method":{"position":"com.google.gson.internal.$Gson$Types:411","type":"CtMethodImpl","sourcecode":"private static int indexOf(java.lang.Object[] array, java.lang.Object toFind) {\n    for (int int = 0 ; i < (array.int) ; i++) {\n        if (toFind.equals(array[i])) {\n            return i;\n        } \n    }\n    throw new java.util.NoSuchElementException();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"toFind"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"aa025fe1-3e8a-11e6-a0c6-9553e5d76870","method":{"position":"com.google.gson.Gson:127","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonParseException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172081/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    } else {\n        {\n            return ((T)(fromJson(json, typeOfT)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:325","type":"CtBinaryOperatorImpl","sourcecode":"toResolve instanceof java.lang.reflect.TypeVariable"},"failures":[],"tindex":"aa025fe2-3e8a-11e6-a0c6-5b6b579b507d","method":{"position":"com.google.gson.internal.$Gson$Types:226","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type getGenericSupertype(java.lang.reflect.Type context, java.lang.Class<?> rawType, java.lang.Class<?> toResolve) {\n    if (toResolve == rawType) {\n        return context;\n    } \n    if (toResolve.isInterface()) {\n        java.lang.Class<?>[] java.lang.Class<?>[] = rawType.getInterfaces();\n        for (int int = 0, int int = interfaces.int ; i < length ; i++) {\n            if ((interfaces[i]) == toResolve) {\n                return rawType.getGenericInterfaces()[i];\n            } else if (toResolve.isAssignableFrom(interfaces[i])) {\n                return com.google.gson.internal.$Gson$Types.getGenericSupertype(rawType.getGenericInterfaces()[i], interfaces[i], toResolve);\n            } \n        }\n    } \n    if (!(rawType.isInterface())) {\n        while (rawType != (java.lang.Object.java.lang.Object.java.lang.Class)) {\n            java.lang.Class<?> java.lang.Class<?> = rawType.getSuperclass();\n            if (rawSupertype == toResolve) {\n                return rawType.getGenericSuperclass();\n            } else if (toResolve.isAssignableFrom(rawSupertype)) {\n                return com.google.gson.internal.$Gson$Types.getGenericSupertype(rawType.getGenericSuperclass(), rawSupertype, toResolve);\n            } \n            rawType = rawSupertype;\n        }\n    } \n    return toResolve;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"context"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"aa025fe3-3e8a-11e6-a0c6-c738e54fa80a","method":{"position":"com.google.gson.Gson:871","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172081/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (json == null) {\n                return null;\n            } \n            return ((T)(fromJson(new com.google.gson.internal.bind.JsonTreeReader(json), typeOfT)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,14,142,143,144,145,146,147,148,149,150,151,152,153,17,18,154,155,156,157,158,159,160,20,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,23,235,236,237,238,239,240,24,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,30,32,33,34,53,35,36,37,38,39,41,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294],"tindex":"aa0286f4-3e8a-11e6-a0c6-2df642fe4ba5","method":{"position":"com.google.gson.Gson:510","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src) {\n    if (src == null) {\n        {\n            if (src == null) {\n                return toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull);\n            } \n            return toJson(src, src.getClass());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172081/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[54,55,57,58,295,59,296,60,61,297,62,298,63,64,65,66,67,68,69,299,300,8,301,302,303,71,304,305,306,307,308,309,310,311,312,313,314,315,316,72,73,9,317,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,10,318,94,95,96,97,98,99,100,103,104,105,107,108,109,110,111,112,113,319,114,320,115,116,321,322,323,117,324,118,120,121,122,123,124,125,126,127,325,128,130,326,131,132,133,135,136,137,138,139,140,141,14,142,144,145,146,148,149,150,327,328,17,329,330,18,154,155,331,156,157,158,159,19,160,332,333,334,20,161,162,163,164,165,167,168,169,170,171,172,173,335,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,336,337,198,338,199,200,201,339,202,340,203,204,205,206,207,208,209,210,211,212,213,214,215,216,218,219,220,221,222,223,224,225,227,228,231,232,234,23,235,236,238,341,342,343,240,242,243,246,247,250,266,30,344,32,33,34,35,36,37,38,39,41,276,277,278,279,280,281,345,282,284,285,286,287,346,290,291,292,45,46,50,347,348,349,350,351,352,353,354,355,356,357,293,358,359,360,361,362,52,363,364,294],"tindex":"aa02ae05-3e8a-11e6-a0c6-a130137e5c46","method":{"position":"com.google.gson.stream.JsonWriter:532","type":"CtMethodImpl","sourcecode":"private void string(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        {\n            java.lang.String[] java.lang.String[] = boolean ? com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[] : com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[];\n            java.io.Writer.write(\"\\\"\");\n            int int = 0;\n            int int = value.length();\n            for (int int = 0 ; i < length ; i++) {\n                char char = value.charAt(i);\n                java.lang.String java.lang.String;\n                if (c < 128) {\n                    replacement = replacements[c];\n                    if (replacement == null) {\n                        continue;\n                    } \n                } else if (c == '\\u2028') {\n                    replacement = \"\\\\u2028\";\n                } else if (c == '\\u2029') {\n                    replacement = \"\\\\u2029\";\n                } else {\n                    continue;\n                }\n                if (last < i) {\n                    java.io.Writer.write(value, last, (i - last));\n                } \n                java.io.Writer.write(replacement);\n                last = i + 1;\n            }\n            if (last < length) {\n                java.io.Writer.write(value, last, (length - last));\n            } \n            java.io.Writer.write(\"\\\"\");\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172081/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"aa02d516-3e8a-11e6-a0c6-23bf0a4edfae","method":{"position":"com.google.gson.Gson:491","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172081/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.bind.JsonTreeWriter com.google.gson.internal.bind.JsonTreeWriter = new com.google.gson.internal.bind.JsonTreeWriter();\n            toJson(src, typeOfSrc, writer);\n            return writer.get();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.internal.bind.DateTypeAdapter:86","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[54,55,57,58,2,3,4,295,59,296,5,6,60,61,7,297,63,65,66,300,301,302,303,71,304,305,306,307,308,309,310,311,312,313,314,316,73,9,74,75,76,77,87,88,89,90,91,92,93,94,95,96,97,98,99,100,103,104,105,107,108,109,110,111,113,319,127,134,139,13,14,15,16,142,144,145,146,149,150,327,18,157,158,159,20,161,162,163,164,165,167,168,169,170,171,172,173,335,174,177,178,188,189,190,191,192,194,336,199,201,202,204,205,206,207,208,209,210,215,218,219,220,221,21,22,222,223,224,225,236,341,342,343,240,241,242,243,25,26,28,29,30,31,344,32,33,35,36,37,39,41,280,284,285,286,287,346,291,292,45,46,293,358],"tindex":"aa02d517-3e8a-11e6-a0c6-cfff1f6e4bf0","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:108","type":"CtMethodImpl","sourcecode":"public boolean writeField(java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value == null) {\n        {\n            if (!(boolean))\n                return false;\n            \n            java.lang.Object java.lang.Object = field.get(value);\n            return fieldValue != value;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172081/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:305","type":"CtBinaryOperatorImpl","sourcecode":"node != null"},"failures":[365,0,366,367],"tindex":"aa02fc28-3e8a-11e6-a0c6-c3f11cab8e41","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:686","type":"CtMethodImpl","sourcecode":"void add(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node) {\n    if (node != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172081/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            node.int = 1;\n            if (((int) > 0) && (((int) & 1) == 0)) {\n                (int)++;\n                (int)--;\n                (int)++;\n            } \n            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node;\n            (int)++;\n            if (((int) > 0) && (((int) & 1) == 0)) {\n                (int)++;\n                (int)--;\n                (int)++;\n            } \n            for (int int = 4 ; ((int) & (scale - 1)) == (scale - 1) ; scale *= 2) {\n                if ((int) == 0) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                    center.int = (right.int) + 1;\n                    left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                } else if ((int) == 1) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                    center.int = (right.int) + 1;\n                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    int = 0;\n                } else if ((int) == 2) {\n                    int = 0;\n                } \n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"node"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:298","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[353,354,368],"tindex":"aa032339-3e8a-11e6-a0c6-59e423dcdcdf","method":{"position":"com.google.gson.stream.JsonWriter:461","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(double value) throws java.io.IOException {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                throw new java.lang.IllegalArgumentException((\"Numeric values must be finite, but was \" + value));\n            } \n            writeDeferredName();\n            beforeValue(false);\n            java.io.Writer.append(java.lang.Double.toString(value));\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172081/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"aa03233a-3e8a-11e6-a0c6-b157d9076d34","method":{"position":"com.google.gson.Gson:847","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(com.google.gson.JsonElement json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172081/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:180","type":"CtUnaryOperatorImpl","sourcecode":"!(b instanceof java.lang.reflect.GenericArrayType)"},"failures":[],"tindex":"aa03233b-3e8a-11e6-a0c6-29a886704b77","method":{"position":"com.google.gson.internal.$Gson$Types:151","type":"CtMethodImpl","sourcecode":"static boolean equal(java.lang.Object a, java.lang.Object b) {\n    return (a == b) || ((a != null) && (a.equals(b)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"aa03233c-3e8a-11e6-a0c6-15d8233e1872","method":{"position":"com.google.gson.Gson:136","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172081/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return toJsonTree(src, typeOfSrc);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:462","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[245,248,251,254,256,271,49],"tindex":"aa03233d-3e8a-11e6-a0c6-4fd9e0a8d1cd","method":{"position":"com.google.gson.Gson:297","type":"CtMethodImpl","sourcecode":"private void checkValidFloatingPoint(double value) {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172081/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                throw new java.lang.IllegalArgumentException(((value + \" is not a valid double value as per JSON specification. To override this\") + \" behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.\"));\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:111","type":"CtInvocationImpl","sourcecode":"primitive.isString()"},"failures":[],"tindex":"aa034a4e-3e8a-11e6-a0c6-7df149c8a5b9","method":{"position":"com.google.gson.JsonPrimitive:93","type":"CtMethodImpl","sourcecode":"void setValue(java.lang.Object primitive) {\n    if (primitive.isString()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172081/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (primitive instanceof java.lang.Character) {\n                char char = ((java.lang.Character)(primitive)).charValue();\n                com.google.gson.JsonPrimitive.this.java.lang.Object = java.lang.String.valueOf(c);\n            } else {\n                com.google.gson.internal.$Gson$Preconditions.checkArgument(((primitive instanceof java.lang.Number) || (com.google.gson.JsonPrimitive.isPrimitiveOrString(primitive))));\n                com.google.gson.JsonPrimitive.this.java.lang.Object = primitive;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"primitive"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"aa034a4f-3e8a-11e6-a0c6-35be23edeecd","method":{"position":"com.google.gson.Gson:695","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.lang.String json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172081/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:537","type":"CtFieldReadImpl","sourcecode":"lenient"},"failures":[],"tindex":"aa034a50-3e8a-11e6-a0c6-bff070d68f3e","method":{"position":"com.google.gson.stream.JsonReader:325","type":"CtMethodImpl","sourcecode":"public final void setLenient(boolean lenient) {\n    if (lenient) {\n        {\n            com.google.gson.stream.JsonReader.this.boolean = lenient;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172081/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"lenient"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:274","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[],"tindex":"aa034a51-3e8a-11e6-a0c6-fffb00bbf453","method":{"position":"com.google.gson.Gson:249","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> doubleAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return in.nextDouble();\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    double double = value.doubleValue();\n                    checkValidFloatingPoint(doubleValue);\n                    out.value(value);\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172081/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"aa037162-3e8a-11e6-a0c6-d5090710e067","method":{"position":"com.google.gson.stream.JsonWriter:413","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172081/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            writeDeferredName();\n            beforeValue(false);\n            string(value);\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":26,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
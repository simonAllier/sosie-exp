{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":42,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":307,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":108,"com.google.gson.internal.LinkedHashTreeMapTest.testIterationOrder":63,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":149,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":93,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":46,"com.google.gson.internal.bind.JsonTreeWriterTest.testPrematureClose":97,"com.google.gson.MixedStreamTest.testWriteLenient":426,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":390,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":110,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":320,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":330,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":134,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":146,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":404,"com.google.gson.functional.ObjectTest.testSingletonLists":287,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":135,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":386,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":308,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":44,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":45,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":119,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":71,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":26,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":234,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":122,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":177,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":24,"com.google.gson.functional.EnumTest.testEnumCaseMapping":145,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":68,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":306,"com.google.gson.functional.JsonTreeTest.testToJsonTree":21,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":239,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":31,"com.google.gson.JsonObjectTest.testEqualsNonEmptyObject":15,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":231,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":371,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":356,"com.google.gson.internal.LinkedTreeMapTest.testLargeSetOfRandomKeys":7,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":327,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":336,"com.google.gson.internal.bind.JsonElementReaderTest.testNestedObjects":11,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":130,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":273,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":295,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":175,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":410,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":129,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":402,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":54,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":400,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":218,"com.google.gson.JsonParserTest.testParseString":3,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":266,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":260,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":161,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":301,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":385,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":47,"com.google.gson.functional.StreamingTypeAdaptersTest.testFromJsonTree":35,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":213,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":53,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":99,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":197,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":267,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":157,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":300,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":4,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":85,"com.google.gson.internal.LinkedHashTreeMapTest.testEmptyStringValues":62,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":153,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":252,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":202,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":225,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":56,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":38,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":389,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":380,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":409,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":405,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":91,"com.google.gson.functional.EnumTest.testEnumSet":139,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":226,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":412,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithNestedWildcards":79,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":183,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":296,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":121,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":224,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":172,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":319,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":69,"com.google.gson.internal.LinkedHashTreeMapTest.testContainsNullKeyIsAlwaysFalse":65,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":78,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":136,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":76,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":207,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":51,"com.google.gson.functional.MapTest.testMapSerialization":188,"com.google.gson.internal.bind.JsonElementReaderTest.testObject":12,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":77,"com.google.gson.functional.MapTest.testSerializeMaps":182,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":350,"com.google.gson.functional.MapTest.testComplexKeysSerialization":195,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":98,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":168,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":338,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":363,"com.google.gson.internal.LinkedTreeMapTest.testRemoveRootDoesNotDoubleUnlink":10,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":317,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":237,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":150,"com.google.gson.functional.MapTest.testStringKeyDeserialization":25,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithBasicWildcards":81,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":414,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":277,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":198,"com.google.gson.functional.PrettyPrintingTest.testMap":235,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":342,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":323,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":305,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":368,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":118,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":312,"com.google.gson.functional.MapTest.testMapSerializationEmpty":196,"com.google.gson.functional.CollectionTest.testQueueSerialization":324,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":377,"com.google.gson.functional.MapTest.testMapOfMapSerialization":187,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":258,"com.google.gson.JavaSerializationTest.testMapIsSerializable":0,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":90,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":263,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":419,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictBoxedNansAndInfinities":102,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":309,"com.google.gson.functional.FieldNamingTest.testIdentity":351,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":169,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":20,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":152,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":220,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":286,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":123,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":310,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":407,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":261,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":127,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":89,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":378,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":399,"com.google.gson.functional.MapTest.testMapSubclassSerialization":181,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":276,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":17,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":344,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":352,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":423,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":48,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":223,"com.google.gson.functional.EnumTest.testEnumSubclass":142,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":264,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":120,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":248,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":406,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":413,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":148,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":27,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":126,"com.google.gson.internal.LinkedTreeMapTest.testEqualsAndHashCode":9,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":259,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":394,"com.google.gson.MixedStreamTest.testWriteNulls":424,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":163,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":159,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":337,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":288,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":417,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":245,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":190,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":311,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":401,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":230,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":275,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":396,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":283,"com.google.gson.JsonParserTest.testParseMixedArray":128,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":251,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":58,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithTypeParameters":80,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":242,"com.google.gson.internal.bind.JsonTreeWriterTest.testWriteAfterClose":103,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":255,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":88,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":270,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":383,"com.google.gson.functional.MapTest.testMapDeserialization":22,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":379,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":240,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":180,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":132,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":184,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":205,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":358,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":355,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeMap":36,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":19,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":294,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":302,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":209,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":345,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":28,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":372,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":147,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":214,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":189,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":236,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":95,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":398,"com.google.gson.functional.PrimitiveTest.testShortSerialization":274,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":360,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictNansAndInfinities":101,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":179,"com.google.gson.internal.LinkedTreeMapTest.testIterationOrder":8,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":268,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":115,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":347,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":141,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":322,"com.google.gson.internal.LinkedTreeMapTest.testPutOverrides":5,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":137,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":278,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":334,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":49,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":104,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":13,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":281,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":151,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":92,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":70,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":105,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":364,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":415,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":144,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":210,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":315,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":328,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":340,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":354,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":359,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":384,"com.google.gson.internal.LinkedHashTreeMapTest.testClear":60,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":52,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":374,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":361,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":29,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":262,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":279,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":200,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":140,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":357,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":43,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":37,"com.google.gson.functional.MapTest.testGeneralMapField":107,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":156,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":165,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":341,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":408,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":391,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":191,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":217,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":250,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":365,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":269,"com.google.gson.ObjectTypeAdapterTest.testDeserializeNullValue":116,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":256,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":124,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":331,"com.google.gson.stream.JsonWriterTest.testNonFiniteDoubles":82,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":178,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":382,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":23,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":233,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":280,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":418,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":247,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":73,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":14,"com.google.gson.internal.LinkedHashTreeMapTest.testEqualsAndHashCode":66,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":381,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":170,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":421,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":199,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":299,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":109,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":176,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":244,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":222,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":272,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":50,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":113,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":333,"com.google.gson.functional.ObjectTest.testNullSerialization":292,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":212,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":192,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":249,"com.google.gson.functional.MapTest.testInterfaceTypeMap":106,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":343,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":204,"com.google.gson.JsonObjectTest.testAddingNullOrEmptyPropertyName":16,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":143,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":282,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":346,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":366,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":174,"com.google.gson.MixedStreamTest.testWriteClosed":428,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":326,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":289,"com.google.gson.internal.LinkedHashTreeMapTest.testPutNonComparableKeyFails":64,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":227,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":203,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":34,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":243,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":303,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":397,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":206,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":290,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":325,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":74,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":75,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":329,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":387,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":86,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":254,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":18,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":154,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":339,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":33,"com.google.gson.internal.LinkedHashTreeMapTest.testPutOverrides":59,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":257,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":304,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":395,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":185,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":376,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":219,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":321,"com.google.gson.functional.MapTest.testRawMapSerialization":194,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":422,"com.google.gson.JsonParserTest.testParseReader":2,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":208,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":297,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":39,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":362,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":94,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":96,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":158,"com.google.gson.functional.PrimitiveTest.testByteSerialization":271,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":316,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":40,"com.google.gson.ObjectTypeAdapterTest.testSerialize":83,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":215,"com.google.gson.JsonPrimitiveTest.testEqualsIntegerAndBigInteger":131,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":111,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":164,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":348,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":228,"com.google.gson.functional.MapTest.testMapWithQuotes":186,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":369,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":411,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":420,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":32,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":367,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":403,"com.google.gson.stream.JsonWriterTest.testLenientWriterPermitsMultipleTopLevelValues":133,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":221,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":241,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":265,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":373,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":167,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":392,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":370,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":112,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":353,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":375,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":318,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":114,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":155,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":393,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":211,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":171,"com.google.gson.internal.LinkedHashTreeMapTest.testContainsNonComparableKeyReturnsFalse":61,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":138,"com.google.gson.internal.LinkedHashTreeMapTest.testRemoveRootDoesNotDoubleUnlink":67,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":57,"com.google.gson.internal.LinkedTreeMapTest.testClear":6,"com.google.gson.functional.ObjectTest.testNestedSerialization":298,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":201,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":216,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":253,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":246,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":193,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":284,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":232,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":125,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":427,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":293,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":30,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":117,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":72,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":313,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":162,"com.google.gson.functional.CollectionTest.testSetSerialization":332,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":238,"com.google.gson.functional.StringTest.testStringValueSerialization":314,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":416,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":285,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":87,"com.google.gson.MixedStreamTest.testWriteInvalidState":425,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":291,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":166,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":84,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":55,"com.google.gson.ObjectTypeAdapterTest.testDeserialize":1,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":349,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":335,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":100,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":173,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":229,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":388,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":41,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":160},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:378","type":"CtVariableReadImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57],"tindex":"65a2349b-3f3e-11e6-bd12-b1a2c8f36760","method":{"position":"com.google.gson.internal.LinkedTreeMap:310","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (insert) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344060204/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            for (com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>) {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                int int = left != null ? left.int : 0;\n                int int = right != null ? right.int : 0;\n                int int = leftHeight - rightHeight;\n                if (delta == (-2)) {\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    int int = rightRight != null ? rightRight.int : 0;\n                    int int = rightLeft != null ? rightLeft.int : 0;\n                    int int = rightLeftHeight - rightRightHeight;\n                    if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                        rotateLeft(node);\n                    } else {\n                        assert rightDelta == 1;\n                        rotateRight(right);\n                        rotateLeft(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 2) {\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    int int = leftRight != null ? leftRight.int : 0;\n                    int int = leftLeft != null ? leftLeft.int : 0;\n                    int int = leftLeftHeight - leftRightHeight;\n                    if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                        rotateRight(node);\n                    } else {\n                        assert leftDelta == (-1);\n                        rotateLeft(left);\n                        rotateRight(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 0) {\n                    node.int = leftHeight + 1;\n                    if (insert) {\n                        break;\n                    } \n                } else {\n                    assert (delta == (-1)) || (delta == 1);\n                    node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                    if (!insert) {\n                        break;\n                    } \n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"insert"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:244","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"65a31efc-3f3e-11e6-bd12-ad511ae5c44d","method":{"position":"com.google.gson.internal.$Gson$Types:226","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type getGenericSupertype(java.lang.reflect.Type context, java.lang.Class<?> rawType, java.lang.Class<?> toResolve) {\n    if (toResolve == rawType) {\n        return context;\n    } \n    if (toResolve.isInterface()) {\n        java.lang.Class<?>[] java.lang.Class<?>[] = rawType.getInterfaces();\n        for (int int = 0, int int = interfaces.int ; i < length ; i++) {\n            if ((interfaces[i]) == toResolve) {\n                return rawType.getGenericInterfaces()[i];\n            } else if (toResolve.isAssignableFrom(interfaces[i])) {\n                return com.google.gson.internal.$Gson$Types.getGenericSupertype(rawType.getGenericInterfaces()[i], interfaces[i], toResolve);\n            } \n        }\n    } \n    if (!(rawType.isInterface())) {\n        while (rawType != (java.lang.Object.java.lang.Object.java.lang.Class)) {\n            java.lang.Class<?> java.lang.Class<?> = rawType.getSuperclass();\n            if (rawSupertype == toResolve) {\n                return rawType.getGenericSuperclass();\n            } else if (toResolve.isAssignableFrom(rawSupertype)) {\n                return com.google.gson.internal.$Gson$Types.getGenericSupertype(rawType.getGenericSuperclass(), rawSupertype, toResolve);\n            } \n            rawType = rawSupertype;\n        }\n    } \n    return toResolve;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"rawType":"rawType"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:86","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"65a31efd-3f3e-11e6-bd12-a9d66189543c","method":{"position":"com.google.gson.JsonArray:115","type":"CtMethodImpl","sourcecode":"public boolean contains(com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonArray) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344060204/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return java.util.List<com.google.gson.JsonElement>.contains(element);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"65a3460e-3f3e-11e6-bd12-593a5b3c4a74","method":{"position":"com.google.gson.Gson:591","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344060204/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            if (src == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344060204/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            } else {\n                {\n                    if (src != null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344060204/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new com.google.gson.JsonIOException();\n                    } else {\n                        {\n                            com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = getAdapter(com.google.gson.reflect.TypeToken.get(typeOfSrc));\n                            boolean boolean = writer.isLenient();\n                            writer.setLenient(true);\n                            boolean boolean = writer.isHtmlSafe();\n                            writer.setHtmlSafe(boolean);\n                            boolean boolean = writer.getSerializeNulls();\n                            writer.setSerializeNulls(boolean);\n                            try {\n                                ((com.google.gson.TypeAdapter<java.lang.Object>)(adapter)).write(writer, src);\n                            } catch (java.io.IOException e) {\n                                throw new com.google.gson.JsonIOException(e);\n                            } finally {\n                                writer.setLenient(oldLenient);\n                                writer.setHtmlSafe(oldHtmlSafe);\n                                writer.setSerializeNulls(oldSerializeNulls);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:167","type":"CtUnaryOperatorImpl"},"failures":[58,59,60,61,62,63,64,65,66,67],"tindex":"65a36d1f-3f3e-11e6-bd12-f90dcfac67e5","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:131","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedHashTreeMap.Node<K, V> find(K key, boolean create) {\n    if (!create) {\n        {\n            java.util.Comparator<? super K> java.util.Comparator<? super K> = com.google.gson.internal.LinkedHashTreeMap.this.java.util.Comparator<? super K>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[] com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[] = com.google.gson.internal.LinkedHashTreeMap.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[];\n            int int = com.google.gson.internal.LinkedHashTreeMap.secondaryHash(key.hashCode());\n            int int = hash & ((table.int) - 1);\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = table[index];\n            int int = 0;\n            if (nearest != null) {\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                java.lang.Comparable<java.lang.Object> java.lang.Comparable<java.lang.Object> = comparator == (com.google.gson.internal.LinkedHashTreeMap.com.google.gson.internal.LinkedHashTreeMap.java.util.Comparator<java.lang.Comparable>) ? ((java.lang.Comparable<java.lang.Object>)(key)) : null;\n                while (true) {\n                    comparison = comparableKey != null ? comparableKey.compareTo(nearest.K) : comparator.compare(key, nearest.K);\n                    if (comparison == 0) {\n                        return nearest;\n                    } \n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = comparison < 0 ? nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> : nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    if (child == null) {\n                        break;\n                    } \n                    nearest = child;\n                }\n            } \n            if (!create) {\n                return null;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            if (nearest == null) {\n                if ((comparator == (com.google.gson.internal.LinkedHashTreeMap.com.google.gson.internal.LinkedHashTreeMap.java.util.Comparator<java.lang.Comparable>)) && (!(key instanceof java.lang.Comparable))) {\n                    throw new java.lang.ClassCastException(((key.getClass().getName()) + \" is not Comparable\"));\n                } \n                created = new com.google.gson.internal.LinkedHashTreeMap.Node<K, V>(nearest , key , hash , header , header.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>);\n                table[index] = created;\n            } else {\n                created = new com.google.gson.internal.LinkedHashTreeMap.Node<K, V>(nearest , key , hash , header , header.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>);\n                if (comparison < 0) {\n                    nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = created;\n                } else {\n                    nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = created;\n                }\n                rebalance(nearest, true);\n            }\n            if (((int)++) > (int)) {\n                doubleCapacity();\n            } \n            (int)++;\n            return created;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344060204/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"create":"create"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:120","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"65a3bb40-3f3e-11e6-bd12-89c4d1dce077","method":{"position":"com.google.gson.internal.$Gson$Types:213","type":"CtMethodImpl","sourcecode":"private static int hashCodeOrZero(java.lang.Object o) {\n    return o != null ? o.hashCode() : 0;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[68,69],"tindex":"65a3bb41-3f3e-11e6-bd12-315b59995f73","method":{"position":"com.google.gson.Gson:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            out.value(value.toString());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344060204/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"65a3e252-3f3e-11e6-bd12-673d41a02899","method":{"position":"com.google.gson.Gson:719","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.lang.String json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            if (json == null) {\n                return null;\n            } \n            java.io.StringReader java.io.StringReader = new java.io.StringReader(json);\n            T T = ((T)(fromJson(reader, typeOfT)));\n            return target;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344060204/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl"},"failures":[],"tindex":"65a3e253-3f3e-11e6-bd12-7b449b550d69","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:116","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<?> getFieldAdapter(com.google.gson.Gson gson, java.lang.reflect.Field field, com.google.gson.reflect.TypeToken<?> fieldType) {\n    if (field.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344060204/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.annotations.JsonAdapter com.google.gson.annotations.JsonAdapter = field.getAnnotation(com.google.gson.annotations.JsonAdapter.com.google.gson.annotations.JsonAdapter.java.lang.Class);\n            if (annotation != null) {\n                com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory.getTypeAdapter(com.google.gson.internal.ConstructorConstructor, gson, fieldType, annotation);\n                if (adapter != null)\n                    return adapter;\n                \n            } \n            return gson.getAdapter(fieldType);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"field"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:243","type":"CtBinaryOperatorImpl"},"failures":[70,71,72,73,74,75],"tindex":"65a40964-3f3e-11e6-bd12-e5b9e9e8bda6","method":{"position":"com.google.gson.internal.Excluder:242","type":"CtMethodImpl","sourcecode":"private boolean isValidUntil(com.google.gson.annotations.Until annotation) {\n    if (annotation != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344060204/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (annotation != null) {\n                double double = annotation.value();\n                if (annotationVersion <= (double)) {\n                    return false;\n                } \n            } \n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:378","type":"CtVariableReadImpl"},"failures":[67],"tindex":"65a43075-3f3e-11e6-bd12-f56ec17b69c4","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:338","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (insert) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344060204/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (insert) {\n                {\n                    for (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) {\n                        com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                        com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                        int int = left != null ? left.int : 0;\n                        int int = right != null ? right.int : 0;\n                        int int = leftHeight - rightHeight;\n                        if (delta == (-2)) {\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            int int = rightRight != null ? rightRight.int : 0;\n                            int int = rightLeft != null ? rightLeft.int : 0;\n                            int int = rightLeftHeight - rightRightHeight;\n                            if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                                rotateLeft(node);\n                            } else {\n                                assert rightDelta == 1;\n                                rotateRight(right);\n                                rotateLeft(node);\n                            }\n                            if (insert) {\n                                break;\n                            } \n                        } else if (delta == 2) {\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            int int = leftRight != null ? leftRight.int : 0;\n                            int int = leftLeft != null ? leftLeft.int : 0;\n                            int int = leftLeftHeight - leftRightHeight;\n                            if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                                rotateRight(node);\n                            } else {\n                                assert leftDelta == (-1);\n                                rotateLeft(left);\n                                rotateRight(node);\n                            }\n                            if (insert) {\n                                break;\n                            } \n                        } else if (delta == 0) {\n                            node.int = leftHeight + 1;\n                            if (insert) {\n                                break;\n                            } \n                        } else {\n                            assert (delta == (-1)) || (delta == 1);\n                            node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                            if (!insert) {\n                                break;\n                            } \n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344060204/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"insert"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"65a4ccb6-3f3e-11e6-bd12-affd9f68bdd8","method":{"position":"com.google.gson.Gson:591","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344060204/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            if (src == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344060204/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            } else {\n                {\n                    if (src != null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344060204/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new com.google.gson.JsonIOException();\n                    } else {\n                        {\n                            com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = getAdapter(com.google.gson.reflect.TypeToken.get(typeOfSrc));\n                            boolean boolean = writer.isLenient();\n                            writer.setLenient(true);\n                            boolean boolean = writer.isHtmlSafe();\n                            writer.setHtmlSafe(boolean);\n                            boolean boolean = writer.getSerializeNulls();\n                            writer.setSerializeNulls(boolean);\n                            try {\n                                ((com.google.gson.TypeAdapter<java.lang.Object>)(adapter)).write(writer, src);\n                            } catch (java.io.IOException e) {\n                                throw new com.google.gson.JsonIOException(e);\n                            } finally {\n                                writer.setLenient(oldLenient);\n                                writer.setHtmlSafe(oldHtmlSafe);\n                                writer.setSerializeNulls(oldSerializeNulls);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:105","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"65a4f3c7-3f3e-11e6-bd12-896960704a89","method":{"position":"com.google.gson.internal.$Gson$Types:213","type":"CtMethodImpl","sourcecode":"private static int hashCodeOrZero(java.lang.Object o) {\n    return o != null ? o.hashCode() : 0;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:103","type":"CtVariableReadImpl"},"failures":[76,42,77,78,43],"tindex":"65a51ad8-3f3e-11e6-bd12-07db7122d72c","method":{"position":"com.google.gson.internal.Excluder:96","type":"CtMethodImpl","sourcecode":"public com.google.gson.internal.Excluder withExclusionStrategy(com.google.gson.ExclusionStrategy exclusionStrategy, boolean serialization, boolean deserialization) {\n    if (deserialization) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344060204/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.Excluder com.google.gson.internal.Excluder = clone();\n            if (serialization) {\n                result.java.util.List<com.google.gson.ExclusionStrategy> = new java.util.ArrayList<com.google.gson.ExclusionStrategy>(java.util.List<com.google.gson.ExclusionStrategy>);\n                result.java.util.List<com.google.gson.ExclusionStrategy>.add(exclusionStrategy);\n            } \n            if (deserialization) {\n                result.java.util.List<com.google.gson.ExclusionStrategy> = new java.util.ArrayList<com.google.gson.ExclusionStrategy>(java.util.List<com.google.gson.ExclusionStrategy>);\n                result.java.util.List<com.google.gson.ExclusionStrategy>.add(exclusionStrategy);\n            } \n            return result;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deserialization":"deserialization"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:199","type":"CtBinaryOperatorImpl"},"failures":[79,80,81],"tindex":"65a51ad9-3f3e-11e6-bd12-076c072f9835","method":{"position":"com.google.gson.reflect.TypeToken:122","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic boolean isAssignableFrom(java.lang.reflect.Type from) {\n    if (from instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344060204/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (from == null) {\n                return false;\n            } \n            if (java.lang.reflect.Type.equals(from)) {\n                return true;\n            } \n            if ((java.lang.reflect.Type) instanceof java.lang.Class<?>) {\n                return java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from));\n            } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.ParameterizedType) {\n                return com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n            } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.GenericArrayType) {\n                return (java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from))) && (com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.GenericArrayType)(java.lang.reflect.Type))));\n            } else {\n                throw com.google.gson.reflect.TypeToken.buildUnexpectedTypeError(java.lang.reflect.Type, java.lang.Class.java.lang.Class.java.lang.Class, java.lang.reflect.ParameterizedType.java.lang.reflect.ParameterizedType.java.lang.Class, java.lang.reflect.GenericArrayType.java.lang.reflect.GenericArrayType.java.lang.Class);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:462","type":"CtBinaryOperatorImpl"},"failures":[82],"tindex":"65a541ea-3f3e-11e6-bd12-8fde04ac9deb","method":{"position":"com.google.gson.stream.JsonWriter:461","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(double value) throws java.io.IOException {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344060204/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                        throw new java.lang.IllegalArgumentException((\"Numeric values must be finite, but was \" + value));\n                    } \n                    writeDeferredName();\n                    beforeValue(false);\n                    java.io.Writer.append(java.lang.Double.toString(value));\n                    return com.google.gson.stream.JsonWriter.this;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344060204/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl"},"failures":[83,84,85,86,87,88,89,90,91,92,93],"tindex":"65a541eb-3f3e-11e6-bd12-5b1288792c6d","method":{"position":"com.google.gson.internal.Excluder:149","type":"CtMethodImpl","sourcecode":"public boolean excludeField(java.lang.reflect.Field field, boolean serialize) {\n    if (field.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344060204/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (((int) & (field.getModifiers())) != 0) {\n                return true;\n            } \n            if (((double) != (com.google.gson.internal.Excluder.com.google.gson.internal.Excluder.double)) && (!(isValidVersion(field.getAnnotation(com.google.gson.annotations.Since.com.google.gson.annotations.Since.java.lang.Class), field.getAnnotation(com.google.gson.annotations.Until.com.google.gson.annotations.Until.java.lang.Class))))) {\n                return true;\n            } \n            if (field.isSynthetic()) {\n                return true;\n            } \n            if (boolean) {\n                com.google.gson.annotations.Expose com.google.gson.annotations.Expose = field.getAnnotation(com.google.gson.annotations.Expose.com.google.gson.annotations.Expose.java.lang.Class);\n                if ((annotation == null) || (serialize ? !(annotation.serialize()) : !(annotation.deserialize()))) {\n                    return true;\n                } \n            } \n            if ((!(boolean)) && (isInnerClass(field.getType()))) {\n                return true;\n            } \n            if (isAnonymousOrLocal(field.getType())) {\n                return true;\n            } \n            java.util.List<com.google.gson.ExclusionStrategy> java.util.List<com.google.gson.ExclusionStrategy> = serialize ? java.util.List<com.google.gson.ExclusionStrategy> : java.util.List<com.google.gson.ExclusionStrategy>;\n            if (!(list.isEmpty())) {\n                com.google.gson.FieldAttributes com.google.gson.FieldAttributes = new com.google.gson.FieldAttributes(field);\n                for (com.google.gson.ExclusionStrategy com.google.gson.ExclusionStrategy : list) {\n                    if (exclusionStrategy.shouldSkipField(fieldAttributes)) {\n                        return true;\n                    } \n                }\n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"field"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.TreeTypeAdapter:55","type":"CtInvocationImpl"},"failures":[94,95,96,97,98,99,100,101,102,103,13,14,104,105,18,19,20,21,106,107,108,26,109,27,28,29,30,31,110,111,112,113,114,33,34,42,51,52,53],"tindex":"65a568fc-3f3e-11e6-bd12-01423856afee","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:75","type":"CtMethodImpl","sourcecode":"private void put(com.google.gson.JsonElement value) {\n    if (value.isJsonNull()) {\n        {\n            if ((java.lang.String) != null) {\n                if ((!(value.isJsonNull())) || (getSerializeNulls())) {\n                    com.google.gson.JsonObject com.google.gson.JsonObject = ((com.google.gson.JsonObject)(peek()));\n                    object.add(java.lang.String, value);\n                } \n                java.lang.String = null;\n            } else if (java.util.List<com.google.gson.JsonElement>.isEmpty()) {\n                com.google.gson.JsonElement = value;\n            } else {\n                com.google.gson.JsonElement com.google.gson.JsonElement = peek();\n                if (element instanceof com.google.gson.JsonArray) {\n                    ((com.google.gson.JsonArray)(element)).add(value);\n                } else {\n                    throw new java.lang.IllegalStateException();\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344060204/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[115],"tindex":"65a568fd-3f3e-11e6-bd12-07f3c74580b7","method":{"position":"com.google.gson.internal.bind.TypeAdapters:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344060204/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:462","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"65a5900e-3f3e-11e6-bd12-0df3dc78175c","method":{"position":"com.google.gson.stream.JsonWriter:461","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(double value) throws java.io.IOException {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344060204/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                        throw new java.lang.IllegalArgumentException((\"Numeric values must be finite, but was \" + value));\n                    } \n                    writeDeferredName();\n                    beforeValue(false);\n                    java.io.Writer.append(java.lang.Double.toString(value));\n                    return com.google.gson.stream.JsonWriter.this;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344060204/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl"},"failures":[116,1],"tindex":"65a5900f-3f3e-11e6-bd12-05c957ca8c39","method":{"position":"com.google.gson.TypeAdapter:268","type":"CtMethodImpl","sourcecode":"public final T fromJson(java.lang.String json) throws java.io.IOException {\n    if (json == null) {\n        {\n            return fromJson(new java.io.StringReader(json));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344060204/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:136","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"65a5b720-3f3e-11e6-bd12-eb737eae1b4f","method":{"position":"com.google.gson.internal.$Gson$Types:217","type":"CtMethodImpl","sourcecode":"public static java.lang.String typeToString(java.lang.reflect.Type type) {\n    return type instanceof java.lang.Class ? ((java.lang.Class<?>)(type)).getName() : type.toString();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:602","type":"CtUnaryOperatorImpl"},"failures":[68,117,118,119,120,121,122,123,124,125,94,95,96,126,127,4,128,97,98,99,100,103,13,14,104,105,129,130,131,132,133,134,135,84,85,136,137,17,138,139,140,141,142,143,144,145,146,86,87,88,89,90,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,18,19,20,21,180,181,182,183,184,185,186,187,188,189,190,106,191,192,107,193,194,195,196,197,198,108,26,199,200,201,109,27,28,202,203,204,29,30,205,206,31,32,207,208,209,210,211,212,213,214,215,216,217,218,219,110,111,220,112,113,221,114,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,33,34,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,69,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,40,41,286,287,288,289,290,291,91,292,293,294,295,296,297,298,299,300,301,302,92,303,76,304,42,77,305,306,307,308,309,310,311,312,313,314,315,316,44,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,70,353,73,75,354,355,356,357,358,359,360,361,362,363,51,52,53,364,365,366,367,368,369,370,371,372,55,115,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,57,419,420,421,422,423,424,425,426,427,428],"tindex":"65a5b721-3f3e-11e6-bd12-51c0e2bc2354","method":{"position":"com.google.gson.stream.JsonWriter:234","type":"CtMethodImpl","sourcecode":"public final void setLenient(boolean lenient) {\n    if (!lenient) {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = lenient;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344060204/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"lenient"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:118","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"65a5de32-3f3e-11e6-bd12-77523c608281","method":{"position":"com.google.gson.internal.$Gson$Types:93","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type canonicalize(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class) {\n        java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(type));\n        return c.isArray() ? new com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl(com.google.gson.internal.$Gson$Types.canonicalize(c.getComponentType())) : c;\n    } else if (type instanceof java.lang.reflect.ParameterizedType) {\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(type));\n        return new com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl(p.getOwnerType() , p.getRawType() , p.getActualTypeArguments());\n    } else if (type instanceof java.lang.reflect.GenericArrayType) {\n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(type));\n        return new com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl(g.getGenericComponentType());\n    } else if (type instanceof java.lang.reflect.WildcardType) {\n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(type));\n        return new com.google.gson.internal.$Gson$Types.WildcardTypeImpl(w.getUpperBounds() , w.getLowerBounds());\n    } else {\n        return type;\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[115],"tindex":"65a60543-3f3e-11e6-bd12-7bef32971498","method":{"position":"com.google.gson.internal.bind.TypeAdapters:223","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344060204/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:537","type":"CtFieldReadImpl"},"failures":[],"tindex":"65a60544-3f3e-11e6-bd12-4feffeb65464","method":{"position":"com.google.gson.stream.JsonReader:325","type":"CtMethodImpl","sourcecode":"public final void setLenient(boolean lenient) {\n    if (lenient) {\n        {\n            com.google.gson.stream.JsonReader.this.boolean = lenient;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344060204/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"lenient"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"65a60545-3f3e-11e6-bd12-17bc5b3db953","method":{"position":"com.google.gson.Gson:510","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src) {\n    if (src != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344060204/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src == null) {\n                {\n                    if (src == null) {\n                        return toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull);\n                    } \n                    return toJson(src, src.getClass());\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344060204/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"65a62c56-3f3e-11e6-bd12-8352929dca29","method":{"position":"com.google.gson.Gson:591","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344060204/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            if (src == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344060204/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            } else {\n                {\n                    if (src != null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344060204/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new com.google.gson.JsonIOException();\n                    } else {\n                        {\n                            com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = getAdapter(com.google.gson.reflect.TypeToken.get(typeOfSrc));\n                            boolean boolean = writer.isLenient();\n                            writer.setLenient(true);\n                            boolean boolean = writer.isHtmlSafe();\n                            writer.setHtmlSafe(boolean);\n                            boolean boolean = writer.getSerializeNulls();\n                            writer.setSerializeNulls(boolean);\n                            try {\n                                ((com.google.gson.TypeAdapter<java.lang.Object>)(adapter)).write(writer, src);\n                            } catch (java.io.IOException e) {\n                                throw new com.google.gson.JsonIOException(e);\n                            } finally {\n                                writer.setLenient(oldLenient);\n                                writer.setHtmlSafe(oldHtmlSafe);\n                                writer.setSerializeNulls(oldSerializeNulls);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:350","type":"CtVariableReadImpl"},"failures":[],"tindex":"65a62c57-3f3e-11e6-bd12-1b360bcc423e","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:338","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (insert) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344060204/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (insert) {\n                {\n                    for (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) {\n                        com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                        com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                        int int = left != null ? left.int : 0;\n                        int int = right != null ? right.int : 0;\n                        int int = leftHeight - rightHeight;\n                        if (delta == (-2)) {\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            int int = rightRight != null ? rightRight.int : 0;\n                            int int = rightLeft != null ? rightLeft.int : 0;\n                            int int = rightLeftHeight - rightRightHeight;\n                            if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                                rotateLeft(node);\n                            } else {\n                                assert rightDelta == 1;\n                                rotateRight(right);\n                                rotateLeft(node);\n                            }\n                            if (insert) {\n                                break;\n                            } \n                        } else if (delta == 2) {\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            int int = leftRight != null ? leftRight.int : 0;\n                            int int = leftLeft != null ? leftLeft.int : 0;\n                            int int = leftLeftHeight - leftRightHeight;\n                            if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                                rotateRight(node);\n                            } else {\n                                assert leftDelta == (-1);\n                                rotateLeft(left);\n                                rotateRight(node);\n                            }\n                            if (insert) {\n                                break;\n                            } \n                        } else if (delta == 0) {\n                            node.int = leftHeight + 1;\n                            if (insert) {\n                                break;\n                            } \n                        } else {\n                            assert (delta == (-1)) || (delta == 1);\n                            node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                            if (!insert) {\n                                break;\n                            } \n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344060204/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"insert"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"65a67a78-3f3e-11e6-bd12-d15da5f79002","method":{"position":"com.google.gson.Gson:510","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src) {\n    if (src != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344060204/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src == null) {\n                {\n                    if (src == null) {\n                        return toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull);\n                    } \n                    return toJson(src, src.getClass());\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344060204/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:287","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"65a67a79-3f3e-11e6-bd12-1d308c675602","method":{"position":"com.google.gson.internal.LinkedTreeMap:284","type":"CtMethodImpl","sourcecode":"private void replaceInParent(com.google.gson.internal.LinkedTreeMap.Node<K, V> node, com.google.gson.internal.LinkedTreeMap.Node<K, V> replacement) {\n    if (node != null) {\n        {\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n            if (replacement != null) {\n                replacement.com.google.gson.internal.LinkedTreeMap.Node<K, V> = parent;\n            } \n            if (parent != null) {\n                if ((parent.com.google.gson.internal.LinkedTreeMap.Node<K, V>) == node) {\n                    parent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                } else {\n                    assert (parent.com.google.gson.internal.LinkedTreeMap.Node<K, V>) == node;\n                    parent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                }\n            } else {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344060204/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"replacement":"node"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"65a6a18a-3f3e-11e6-bd12-137cb8e5607a","method":{"position":"com.google.gson.Gson:127","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonParseException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344060204/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    } else {\n        {\n            return ((T)(fromJson(json, typeOfT)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":32,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
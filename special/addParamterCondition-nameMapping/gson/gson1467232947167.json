{"failureDictionary":{"com.google.gson.JsonStreamParserTest.testNoSideEffectForHasNext":2,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":23,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":464,"com.google.gson.functional.StringTest.testStringValueDeserialization":648,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":22,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":626,"com.google.gson.JsonPrimitiveTest.testDeepCopy":106,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":566,"com.google.gson.internal.LinkedHashTreeMapTest.testIterationOrder":141,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":599,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":146,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":277,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":65,"com.google.gson.internal.bind.JsonTreeWriterTest.testPrematureClose":118,"com.google.gson.MixedStreamTest.testWriteLenient":168,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":248,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":42,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":60,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":339,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":246,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":343,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":631,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":489,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":491,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":217,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":606,"com.google.gson.internal.bind.JsonElementReaderTest.testStrictNansAndInfinities":132,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":294,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":308,"com.google.gson.JsonParserTest.testParseUnquotedMultiWordStringFails":89,"com.google.gson.functional.ObjectTest.testSingletonLists":244,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":328,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":414,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":465,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":594,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":685,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":55,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":47,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":677,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":573,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":259,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":515,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":633,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":319,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":656,"com.google.gson.DefaultDateTypeAdapterTest.testDatePattern":5,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":86,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":472,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":627,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":172,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":511,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":588,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":78,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":535,"com.google.gson.functional.EnumTest.testEnumCaseMapping":488,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":364,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":463,"com.google.gson.functional.JsonTreeTest.testToJsonTree":31,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":587,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":475,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":45,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":37,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":41,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":315,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":159,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":549,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":564,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":595,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":478,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":500,"com.google.gson.functional.ObjectTest.testNullDeserialization":585,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":230,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":654,"com.google.gson.JsonPrimitiveTest.testParsingStringAsBoolean":102,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":256,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":455,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":517,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":600,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":431,"com.google.gson.internal.bind.JsonElementReaderTest.testLenientNansAndInfinities":131,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":77,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":352,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":266,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":114,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":395,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":423,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":556,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":337,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":638,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":637,"com.google.gson.JsonParserTest.testParseString":91,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":572,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":160,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":447,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":167,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":559,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":642,"com.google.gson.DefaultDateTypeAdapterTest.testFormatUsesDefaultTimezone":9,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":268,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":391,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":413,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":614,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":66,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":531,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":624,"com.google.gson.functional.StreamingTypeAdaptersTest.testFromJsonTree":82,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":191,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":563,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":59,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":120,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":235,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":379,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":448,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":659,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":625,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":265,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":387,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":92,"com.google.gson.JsonPrimitiveTest.testEqualsAcrossTypes":109,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":252,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":347,"com.google.gson.internal.LinkedHashTreeMapTest.testEmptyStringValues":140,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":181,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":437,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":538,"com.google.gson.metrics.PerformanceTest.testDummy":521,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":329,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":196,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":307,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":669,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":580,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":540,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":575,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":17,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":417,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":333,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":409,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":351,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":233,"com.google.gson.functional.CollectionTest.testSetDeserialization":342,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":218,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":255,"com.google.gson.functional.EnumTest.testEnumSet":484,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":542,"com.google.gson.JsonStreamParserTest.testIterator":3,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":617,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":153,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":49,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":369,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":561,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":260,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":306,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":362,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":628,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":335,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":634,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":75,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":228,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":451,"com.google.gson.internal.LinkedHashTreeMapTest.testContainsNullKeyIsAlwaysFalse":143,"com.google.gson.functional.MapTest.testHashMapDeserialization":525,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":597,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":672,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":569,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":164,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":508,"com.google.gson.MixedStreamTest.testReadNulls":682,"com.google.gson.DefaultDateTypeAdapterTest.testParsingDatesFormattedWithSystemLocale":7,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":162,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":182,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":57,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":578,"com.google.gson.functional.MapTest.testSortedMap":536,"com.google.gson.functional.MapTest.testMapSerialization":373,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":163,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":13,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":622,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":551,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":208,"com.google.gson.functional.MapTest.testSerializeMaps":368,"com.google.gson.functional.MapTest.testComplexKeysSerialization":174,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":541,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":21,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":119,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":394,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":232,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":317,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":300,"com.google.gson.internal.LinkedTreeMapTest.testRemoveRootDoesNotDoubleUnlink":690,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":194,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":424,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":666,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":115,"com.google.gson.internal.bind.JsonElementReaderTest.testWrongType":133,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":290,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":147,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":520,"com.google.gson.functional.MapTest.testStringKeyDeserialization":539,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":552,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":425,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":459,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":380,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":603,"com.google.gson.functional.PrettyPrintingTest.testMap":473,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":505,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":598,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":496,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":176,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":399,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":576,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":161,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":514,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":553,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":469,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":649,"com.google.gson.functional.MapTest.testMapSerializationEmpty":378,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":406,"com.google.gson.functional.CollectionTest.testQueueSerialization":497,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":618,"com.google.gson.functional.MapTest.testMapOfMapSerialization":372,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":166,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":565,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":674,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":214,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":445,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":427,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictBoxedNansAndInfinities":124,"com.google.gson.functional.FieldNamingTest.testIdentity":209,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":466,"com.google.gson.JsonStreamParserTest.testCallingNextBeyondAvailableInput":0,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":50,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":281,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":269,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":30,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":62,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":148,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":243,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":589,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":512,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":88,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":467,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":240,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":443,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":571,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":170,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":562,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":213,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":407,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":422,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":523,"com.google.gson.functional.MapTest.testMapSubclassSerialization":367,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":458,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":314,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":354,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":543,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":345,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":357,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":490,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":612,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":67,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":557,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":646,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":227,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":305,"com.google.gson.functional.EnumTest.testEnumSubclass":486,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":446,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":258,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":516,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":433,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":348,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":630,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":51,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":189,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":590,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":242,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":615,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":241,"com.google.gson.stream.JsonWriterTest.testNullName":692,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":33,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":169,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":548,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":583,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":619,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":180,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":442,"com.google.gson.stream.JsonWriterTest.testObjectsInArrays":689,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":419,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":245,"com.google.gson.MixedStreamTest.testWriteNulls":110,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":524,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":392,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":657,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":389,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":231,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":303,"com.google.gson.CommentsTest.testParseComments":684,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":52,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":247,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":297,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":203,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":288,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":629,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":12,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":375,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":468,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":679,"com.google.gson.MixedStreamTest.testReadInvalidState":680,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":215,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":313,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":421,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":457,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":14,"com.google.gson.JsonParserTest.testParseMixedArray":94,"com.google.gson.DefaultDateTypeAdapterTest.testParsingDatesFormattedWithUsLocale":10,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":436,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":136,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":554,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":285,"com.google.gson.internal.bind.JsonTreeWriterTest.testWriteAfterClose":125,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":165,"com.google.gson.JsonArrayTest.testRemove":113,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":212,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":411,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":452,"com.google.gson.functional.MapTest.testMapDeserialization":530,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":546,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":408,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":476,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":366,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":101,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":293,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":200,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":370,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":296,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":477,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":195,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":29,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":665,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":220,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":270,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":430,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":184,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":506,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":34,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":400,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":312,"com.google.gson.internal.bind.JsonElementReaderTest.testNumbersFromStrings":134,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":193,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":239,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":289,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":374,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":98,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":44,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":586,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":54,"com.google.gson.functional.PrimitiveTest.testShortSerialization":456,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":661,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":632,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictNansAndInfinities":122,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":482,"com.google.gson.JsonParserTest.testParseEmptyString":95,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":613,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":449,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":222,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":596,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":205,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":81,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":340,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":353,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":527,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":609,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":83,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":460,"com.google.gson.DefaultDateTypeAdapterTest.testFormattingInFr":8,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":68,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":128,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":301,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":570,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":126,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":361,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":462,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":641,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":156,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":383,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":199,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":236,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":271,"com.google.gson.JsonPrimitiveTest.testStringsAndChar":103,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":129,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":318,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":396,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":278,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":280,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":237,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":616,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":275,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":251,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":487,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":186,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":382,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":221,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":341,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":504,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":581,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":292,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":298,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":412,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":602,"com.google.gson.internal.LinkedHashTreeMapTest.testClear":138,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":58,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":403,"com.google.gson.stream.JsonWriterTest.testNullStringValue":693,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":299,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":568,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":35,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":670,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":591,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":636,"com.google.gson.JsonArrayTest.testSet":111,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":444,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":461,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":331,"com.google.gson.JsonPrimitiveTest.testEquals":105,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":295,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":485,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":24,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":15,"com.google.gson.functional.MapTest.testGeneralMapField":20,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":249,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":386,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":644,"com.google.gson.DefaultDateTypeAdapterTest.testDateSerialization":4,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":84,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":202,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":349,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":418,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":376,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":38,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":435,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":494,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":450,"com.google.gson.MixedStreamTest.testReadMixedStreamed":360,"com.google.gson.JsonObjectTest.testDeepCopy":116,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":440,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":532,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":560,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":279,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":502,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":513,"com.google.gson.stream.JsonWriterTest.testNonFiniteDoubles":691,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":327,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":620,"com.google.gson.internal.bind.JsonTreeWriterTest.testEmptyWriter":123,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":481,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":334,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":224,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":533,"com.google.gson.JsonArrayTest.testDeepCopy":112,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":483,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":526,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":53,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":152,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":330,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":322,"com.google.gson.stream.JsonWriterTest.testArraysInObjects":688,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":610,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":127,"com.google.gson.internal.LinkedHashTreeMapTest.testEqualsAndHashCode":144,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":410,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":658,"com.google.gson.JsonPrimitiveTest.testEqualsDoesNotEquateStringAndNonStringTypes":104,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":282,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":555,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":673,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":663,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":56,"com.google.gson.functional.ObjectTest.testNestedDeserialization":276,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":87,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":432,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":175,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":32,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":480,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":643,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":287,"com.google.gson.JsonParserTest.testParseUnquotedStringArrayFails":96,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":519,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":534,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":650,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":304,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":454,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":185,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":64,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":69,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":503,"com.google.gson.functional.ObjectTest.testNullSerialization":429,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":188,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":664,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":528,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":173,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":434,"com.google.gson.functional.MapTest.testInterfaceTypeMap":19,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":550,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":85,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":197,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":592,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":155,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":316,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":192,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":507,"com.google.gson.MixedStreamTest.testReadClosed":681,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":397,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":76,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":604,"com.google.gson.MixedStreamTest.testWriteClosed":359,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":177,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":499,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":198,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":250,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":574,"com.google.gson.internal.LinkedHashTreeMapTest.testPutNonComparableKeyFails":142,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":309,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":149,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":73,"com.google.gson.LongSerializationPolicyTest.testStringLongSerialization":11,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":273,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":286,"com.google.gson.stream.JsonWriterTest.testLongs":687,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":226,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":201,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":253,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":498,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":323,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":623,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":325,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":190,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":501,"com.google.gson.DefaultDateTypeAdapterTest.testFormattingInEnUs":6,"com.google.gson.internal.bind.JsonElementReaderTest.testSkipValue":130,"com.google.gson.internal.bind.JsonElementReaderTest.testStrings":135,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":415,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":71,"com.google.gson.JsonPrimitiveTest.testParsingStringAsNumber":108,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":210,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":645,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":439,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":28,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":558,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":234,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":384,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":72,"com.google.gson.internal.LinkedHashTreeMapTest.testPutOverrides":137,"com.google.gson.functional.CollectionTest.testQueueDeserialization":678,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":441,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":621,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":653,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":381,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":324,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":420,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":171,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":267,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":405,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":274,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":338,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":495,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":356,"com.google.gson.functional.MapTest.testRawMapSerialization":377,"com.google.gson.JsonParserTest.testParseReader":90,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":676,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":567,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":157,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":183,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":262,"com.google.gson.JsonPrimitiveTest.testExponential":107,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":18,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":662,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":97,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":46,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":99,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":388,"com.google.gson.functional.PrimitiveTest.testByteSerialization":453,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":25,"com.google.gson.ObjectTypeAdapterTest.testSerialize":363,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":336,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":601,"com.google.gson.JsonPrimitiveTest.testEqualsIntegerAndBigInteger":686,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":61,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":150,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":206,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":310,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":651,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":683,"com.google.gson.functional.MapTest.testMapWithQuotes":371,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":39,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":607,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":652,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":48,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":647,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":428,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":27,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":639,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":398,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":216,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":74,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":302,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":272,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":291,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":151,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":402,"com.google.gson.functional.ObjectTest.testEmptyStringDeserialization":584,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":254,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":393,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":225,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":40,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":63,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":321,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":404,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":635,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":579,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":675,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":545,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":43,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":79,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":385,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":187,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":283,"com.google.gson.internal.LinkedHashTreeMapTest.testContainsNonComparableKeyReturnsFalse":139,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":667,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":355,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":577,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":80,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":593,"com.google.gson.internal.LinkedHashTreeMapTest.testRemoveRootDoesNotDoubleUnlink":145,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":154,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":426,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":261,"com.google.gson.JsonObjectTest.testAddingStringProperties":117,"com.google.gson.functional.ObjectTest.testNestedSerialization":263,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":332,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":438,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":493,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":655,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":492,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":537,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":16,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":70,"com.google.gson.JsonParserTest.testParseUnquotedSingleWordStringFails":93,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":509,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":510,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":257,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":660,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":640,"com.google.gson.JsonPrimitiveTest.testBoolean":100,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":36,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":326,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":223,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":365,"com.google.gson.GsonBuilderTest.testCreatingMoreThanOnce":522,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":605,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":219,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":264,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":320,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":158,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":470,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":547,"com.google.gson.functional.CollectionTest.testSetSerialization":344,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":350,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":238,"com.google.gson.functional.StringTest.testStringValueSerialization":471,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":474,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":178,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":179,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":211,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":671,"com.google.gson.MixedStreamTest.testWriteInvalidState":358,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":544,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":582,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":608,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":204,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":611,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":346,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":401,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":207,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":229,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":518,"com.google.gson.JsonStreamParserTest.testParseTwoStrings":1,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":284,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":121,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":479,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":311,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":416,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":26,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":529,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":390,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":668},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:274","type":"CtBinaryOperatorImpl","sourcecode":"target instanceof java.lang.String"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135],"tindex":"fdb38f2b-3e39-11e6-8449-77c09ee549fe","method":{"position":"com.google.gson.JsonPrimitive:273","type":"CtMethodImpl","sourcecode":"private static boolean isPrimitiveOrString(java.lang.Object target) {\n    if (target instanceof java.lang.String) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245168/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (target instanceof java.lang.String) {\n                return true;\n            } \n            java.lang.Class<?> java.lang.Class<?> = target.getClass();\n            for (java.lang.Class<?> java.lang.Class<?> : com.google.gson.JsonPrimitive.com.google.gson.JsonPrimitive.java.lang.Class<?>[]) {\n                if (standardPrimitive.isAssignableFrom(classOfPrimitive)) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"target":"target"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:154","type":"CtUnaryOperatorImpl","sourcecode":"!create"},"failures":[136,137,138,139,140,141,142,143,144,145],"tindex":"fdb42b6c-3e39-11e6-8449-473f1fdacc53","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:131","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedHashTreeMap.Node<K, V> find(K key, boolean create) {\n    if (!create) {\n        {\n            java.util.Comparator<? super K> java.util.Comparator<? super K> = com.google.gson.internal.LinkedHashTreeMap.this.java.util.Comparator<? super K>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[] com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[] = com.google.gson.internal.LinkedHashTreeMap.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[];\n            int int = com.google.gson.internal.LinkedHashTreeMap.secondaryHash(key.hashCode());\n            int int = hash & ((table.int) - 1);\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = table[index];\n            int int = 0;\n            if (nearest != null) {\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                java.lang.Comparable<java.lang.Object> java.lang.Comparable<java.lang.Object> = comparator == (com.google.gson.internal.LinkedHashTreeMap.com.google.gson.internal.LinkedHashTreeMap.java.util.Comparator<java.lang.Comparable>) ? ((java.lang.Comparable<java.lang.Object>)(key)) : null;\n                while (true) {\n                    comparison = comparableKey != null ? comparableKey.compareTo(nearest.K) : comparator.compare(key, nearest.K);\n                    if (comparison == 0) {\n                        return nearest;\n                    } \n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = comparison < 0 ? nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> : nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    if (child == null) {\n                        break;\n                    } \n                    nearest = child;\n                }\n            } \n            if (!create) {\n                return null;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            if (nearest == null) {\n                if ((comparator == (com.google.gson.internal.LinkedHashTreeMap.com.google.gson.internal.LinkedHashTreeMap.java.util.Comparator<java.lang.Comparable>)) && (!(key instanceof java.lang.Comparable))) {\n                    throw new java.lang.ClassCastException(((key.getClass().getName()) + \" is not Comparable\"));\n                } \n                created = new com.google.gson.internal.LinkedHashTreeMap.Node<K, V>(nearest , key , hash , header , header.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>);\n                table[index] = created;\n            } else {\n                created = new com.google.gson.internal.LinkedHashTreeMap.Node<K, V>(nearest , key , hash , header , header.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>);\n                if (comparison < 0) {\n                    nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = created;\n                } else {\n                    nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = created;\n                }\n                rebalance(nearest, true);\n            }\n            if (((int)++) > (int)) {\n                doubleCapacity();\n            } \n            (int)++;\n            return created;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245168/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"create":"create"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonArray:58","type":"CtBinaryOperatorImpl","sourcecode":"element == null"},"failures":[113],"tindex":"fdb4527d-3e39-11e6-8449-0739f987fc1b","method":{"position":"com.google.gson.JsonArray:115","type":"CtMethodImpl","sourcecode":"public boolean contains(com.google.gson.JsonElement element) {\n    if (element == null) {\n        {\n            return java.util.List<com.google.gson.JsonElement>.contains(element);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245168/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:298","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[146,147,148,29,149,150,151,152,153,154,155,156,157,158,159,160,161],"tindex":"fdb4527e-3e39-11e6-8449-27b940502b7d","method":{"position":"com.google.gson.Gson:297","type":"CtMethodImpl","sourcecode":"private void checkValidFloatingPoint(double value) {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                throw new java.lang.IllegalArgumentException(((value + \" is not a valid double value as per JSON specification. To override this\") + \" behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.\"));\n            } \n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245168/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:103","type":"CtVariableReadImpl","sourcecode":"deserialization"},"failures":[162,23,163,164,24],"tindex":"fdb4798f-3e39-11e6-8449-a36894a56cac","method":{"position":"com.google.gson.internal.Excluder:96","type":"CtMethodImpl","sourcecode":"public com.google.gson.internal.Excluder withExclusionStrategy(com.google.gson.ExclusionStrategy exclusionStrategy, boolean serialization, boolean deserialization) {\n    if (deserialization) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245168/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.Excluder com.google.gson.internal.Excluder = clone();\n            if (serialization) {\n                result.java.util.List<com.google.gson.ExclusionStrategy> = new java.util.ArrayList<com.google.gson.ExclusionStrategy>(java.util.List<com.google.gson.ExclusionStrategy>);\n                result.java.util.List<com.google.gson.ExclusionStrategy>.add(exclusionStrategy);\n            } \n            if (deserialization) {\n                result.java.util.List<com.google.gson.ExclusionStrategy> = new java.util.ArrayList<com.google.gson.ExclusionStrategy>(java.util.List<com.google.gson.ExclusionStrategy>);\n                result.java.util.List<com.google.gson.ExclusionStrategy>.add(exclusionStrategy);\n            } \n            return result;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deserialization":"deserialization"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:120","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonNull"},"failures":[],"tindex":"fdb4a0a0-3e39-11e6-8449-a3771917a11a","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:808","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonNull) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245168/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (!(o instanceof java.util.Map.Entry)) {\n                return false;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n            if (node == null) {\n                return false;\n            } \n            removeInternal(node, true);\n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[146,147,148,165,166,167,151,152,153,154,155,156,157,158,159,160,161,168],"tindex":"fdb4a0a1-3e39-11e6-8449-ffd69d5e8d4e","method":{"position":"com.google.gson.Gson:261","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            double double = value.doubleValue();\n            checkValidFloatingPoint(doubleValue);\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245168/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[169,170,13,14,15,16,18,171,172,19,173,20,174,22,162,23,163,175,176,177,24,178,146,147,179,180,148,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,27,28,29,30,31,32,33,34,196,149,197,35,36,198,199,200,201,37,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,47,228,229,230,231,232,233,234,235,236,51,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,57,279,58,59,60,61,63,64,65,66,67,68,69,70,280,281,282,283,284,285,286,287,288,72,73,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,153,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,86,348,349,350,351,352,353,354,355,92,356,357,358,359,360,361,362,363],"tindex":"fdb4a0a2-3e39-11e6-8449-7f3ef840d28f","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:116","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<?> getFieldAdapter(com.google.gson.Gson gson, java.lang.reflect.Field field, com.google.gson.reflect.TypeToken<?> fieldType) {\n    if (field.isSynthetic()) {\n        {\n            com.google.gson.annotations.JsonAdapter com.google.gson.annotations.JsonAdapter = field.getAnnotation(com.google.gson.annotations.JsonAdapter.com.google.gson.annotations.JsonAdapter.java.lang.Class);\n            if (annotation != null) {\n                com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory.getTypeAdapter(com.google.gson.internal.ConstructorConstructor, gson, fieldType, annotation);\n                if (adapter != null)\n                    return adapter;\n                \n            } \n            return gson.getAdapter(fieldType);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245168/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"field"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:430","type":"CtFieldReadImpl","sourcecode":"serializeNulls"},"failures":[169,170,364,365,14,16,366,367,368,369,370,371,372,373,374,375,19,376,173,20,377,174,378,379,380,22,381,163,178,26,382,146,147,383,148,181,182,183,184,185,186,187,188,191,193,27,28,29,30,31,32,33,34,196,149,197,35,36,200,201,37,384,385,386,387,388,389,390,391,392,150,202,204,393,394,205,206,207,208,209,210,211,212,213,214,215,395,216,217,218,396,38,397,398,399,39,40,41,400,401,222,402,403,404,405,406,407,408,409,410,224,411,412,413,414,415,416,417,42,418,225,43,419,420,421,226,44,422,423,46,47,424,228,229,230,231,232,234,48,49,51,425,237,238,52,53,426,427,428,56,239,242,243,244,247,250,253,255,429,257,430,431,260,262,263,432,265,268,270,271,273,433,434,435,436,437,438,439,165,440,441,166,442,167,443,444,445,446,151,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,152,462,57,58,59,60,61,62,63,64,463,464,465,466,467,468,469,470,471,70,281,282,283,285,286,287,288,72,73,472,473,289,290,474,475,476,291,477,478,300,75,479,76,77,480,78,481,482,483,302,79,304,305,306,307,153,309,310,311,313,315,484,485,81,486,316,487,488,489,490,318,321,322,325,491,328,492,330,331,332,336,493,494,337,338,155,339,495,340,496,497,498,499,500,341,501,343,502,344,503,83,504,84,505,85,345,506,507,346,347,508,86,87,348,88,349,351,352,353,354,355,92,97,98,99,509,356,357,110,358,168,510,359,362,511,512,513,514,515,516,114,517,119],"tindex":"fdb4c7b3-3e39-11e6-8449-191d5985bddf","method":{"position":"com.google.gson.stream.JsonWriter:268","type":"CtMethodImpl","sourcecode":"public final void setSerializeNulls(boolean serializeNulls) {\n    if (serializeNulls) {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = serializeNulls;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245168/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeNulls":"serializeNulls"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[29,149,150,434,437,458,153],"tindex":"fdb4eec4-3e39-11e6-8449-e9b6109512c9","method":{"position":"com.google.gson.Gson:285","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            float float = value.floatValue();\n            checkValidFloatingPoint(floatValue);\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245168/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[518],"tindex":"fdb4eec5-3e39-11e6-8449-b959d47c3e0d","method":{"position":"com.google.gson.JsonObject:111","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Character value) {\n    if (property == null) {\n        {\n            if (property == null) {\n                {\n                    add(property, createJsonElement(value));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245168/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245168/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:79","type":"CtUnaryOperatorImpl","sourcecode":"!(json instanceof com.google.gson.JsonPrimitive)"},"failures":[],"tindex":"fdb4eec6-3e39-11e6-8449-4fa446da411b","method":{"position":"com.google.gson.Gson:871","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n        {\n            if (json == null) {\n                return null;\n            } \n            return ((T)(fromJson(new com.google.gson.internal.bind.JsonTreeReader(json), typeOfT)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245168/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:107","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.WildcardType"},"failures":[],"tindex":"fdb515d7-3e39-11e6-8449-c3502f250734","method":{"position":"com.google.gson.internal.Primitives:79","type":"CtMethodImpl","sourcecode":"public static boolean isWrapperType(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.WildcardType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245168/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return com.google.gson.internal.Primitives.com.google.gson.internal.Primitives.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.containsKey(com.google.gson.internal.$Gson$Preconditions.checkNotNull(type));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:127","type":"CtInvocationImpl","sourcecode":"raw.isInterface()"},"failures":[169,170,13,14,15,16,18,171,172,19,173,20,174,22,162,23,163,175,176,177,24,178,146,519,147,179,383,180,148,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,27,28,29,30,31,32,33,34,196,149,197,35,36,198,199,200,201,37,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,47,228,229,230,231,232,233,234,235,236,51,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,432,264,265,266,267,520,268,269,270,271,272,273,274,275,276,277,278,57,279,58,59,60,61,63,64,65,66,67,68,69,70,280,281,282,283,284,285,286,287,288,72,73,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,153,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,86,348,349,350,351,352,353,354,355,92,356,357,358,359,360,361,362,363],"tindex":"fdb53ce8-3e39-11e6-8449-27e6e8b53932","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:125","type":"CtMethodImpl","sourcecode":"private java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> getBoundFields(com.google.gson.Gson context, com.google.gson.reflect.TypeToken<?> type, java.lang.Class<?> raw) {\n    if (raw.isInterface()) {\n        {\n            java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> = new java.util.LinkedHashMap<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField>();\n            if (raw.isInterface()) {\n                return result;\n            } \n            java.lang.reflect.Type java.lang.reflect.Type = type.getType();\n            while (raw != (java.lang.Object.java.lang.Object.java.lang.Class)) {\n                java.lang.reflect.Field[] java.lang.reflect.Field[] = raw.getDeclaredFields();\n                for (java.lang.reflect.Field java.lang.reflect.Field : fields) {\n                    boolean boolean = excludeField(field, true);\n                    boolean boolean = excludeField(field, false);\n                    if ((!serialize) && (!deserialize)) {\n                        continue;\n                    } \n                    field.setAccessible(true);\n                    java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, field.getGenericType());\n                    com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = createBoundField(context, field, getFieldName(field), com.google.gson.reflect.TypeToken.get(fieldType), serialize, deserialize);\n                    com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = result.put(boundField.java.lang.String, boundField);\n                    if (previous != null) {\n                        throw new java.lang.IllegalArgumentException(((declaredType + \" declares multiple JSON fields named \") + (previous.java.lang.String)));\n                    } \n                }\n                type = com.google.gson.reflect.TypeToken.get(com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, raw.getGenericSuperclass()));\n                raw = type.getRawType();\n            }\n            return result;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245168/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"raw"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:132","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"fdb563f9-3e39-11e6-8449-2f755ab7ed06","method":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:74","type":"CtMethodImpl","sourcecode":"private java.lang.reflect.Type getRuntimeTypeIfMoreSpecific(java.lang.reflect.Type type, java.lang.Object value) {\n    if (value instanceof java.lang.reflect.GenericArrayType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245168/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((value != null) && (((type == (java.lang.Object.java.lang.Object.java.lang.Class)) || (type instanceof java.lang.reflect.TypeVariable<?>)) || (type instanceof java.lang.Class<?>))) {\n                type = value.getClass();\n            } \n            return type;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:250","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[521,169,170,522,364,365,12,13,14,15,16,17,18,523,366,524,525,526,367,368,527,528,369,529,370,530,171,531,532,533,534,371,372,373,535,172,374,375,536,19,376,173,20,537,377,538,174,378,539,379,21,540,380,22,162,381,23,163,164,175,176,177,24,178,25,26,541,542,382,543,146,519,147,179,383,180,148,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,28,29,30,31,32,33,34,196,149,197,35,36,198,199,200,201,37,384,385,544,386,387,388,389,390,545,546,391,547,392,548,549,550,150,551,202,203,204,552,393,553,394,554,205,206,207,208,209,215,395,216,217,218,555,396,38,397,556,219,220,398,557,399,39,558,40,559,41,400,221,560,401,561,222,562,402,403,404,405,406,223,407,563,408,409,564,410,565,224,411,412,413,566,414,567,568,415,569,416,417,570,42,418,571,225,43,419,420,421,226,572,573,44,422,45,423,574,575,46,227,47,424,576,577,578,579,228,229,230,231,232,233,234,48,235,49,580,50,236,51,425,237,581,238,52,53,54,426,55,427,428,56,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,582,254,583,255,256,429,257,584,258,430,259,431,260,261,262,263,432,264,265,266,267,520,585,268,269,270,271,272,273,274,275,276,277,586,587,588,433,589,434,590,591,592,593,594,435,595,596,436,597,598,599,600,601,602,603,437,438,604,605,606,607,608,439,609,165,440,610,611,441,612,613,166,614,442,167,615,616,443,444,617,618,619,445,620,621,622,623,624,625,626,627,446,628,151,629,447,448,630,631,449,632,633,450,634,451,635,278,636,452,453,454,455,456,457,458,637,638,639,459,640,460,641,642,643,461,152,644,462,645,646,57,647,279,58,59,60,61,62,63,64,648,463,464,465,466,467,649,650,468,651,469,652,653,654,470,655,656,471,65,66,67,68,69,657,658,659,70,280,660,281,282,71,283,284,285,286,287,288,72,73,472,473,289,290,474,475,476,291,292,293,294,477,74,478,295,296,297,298,661,299,662,663,300,301,75,479,76,77,480,78,481,482,664,483,302,303,79,304,305,306,307,153,308,309,310,311,312,313,80,314,315,484,485,81,486,665,666,316,317,487,488,489,490,318,319,320,321,322,323,324,325,667,491,326,327,328,329,492,330,331,332,668,333,334,335,669,336,493,494,337,338,339,495,340,496,670,671,672,497,498,499,500,341,673,674,501,675,342,343,502,676,344,503,677,83,678,504,84,505,85,345,506,507,346,347,508,86,87,679,348,88,349,350,351,352,353,354,355,92,509,356,680,681,357,110,358,168,682,510,359,360,361,683,362,511,512,513,684,514,515,516,114,517],"tindex":"fdb563fa-3e39-11e6-8449-f51473c50418","method":{"position":"com.google.gson.Gson:249","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> doubleAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return in.nextDouble();\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    double double = value.doubleValue();\n                    checkValidFloatingPoint(doubleValue);\n                    out.value(value);\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245168/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[368,386,495,363,685],"tindex":"fdb58b0b-3e39-11e6-8449-8371424c69c9","method":{"position":"com.google.gson.internal.bind.ObjectTypeAdapter:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Object value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245168/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245168/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (value == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245168/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.io.IOException();\n                    } else {\n                        {\n                            if (value == null) {\n                                out.nullValue();\n                                return ;\n                            } \n                            com.google.gson.TypeAdapter<java.lang.Object> com.google.gson.TypeAdapter<java.lang.Object> = ((com.google.gson.TypeAdapter<java.lang.Object>)(com.google.gson.Gson.getAdapter(value.getClass())));\n                            if (typeAdapter instanceof com.google.gson.internal.bind.ObjectTypeAdapter) {\n                                out.beginObject();\n                                out.endObject();\n                                return ;\n                            } \n                            typeAdapter.write(out, value);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.TreeTypeAdapter:55","type":"CtInvocationImpl","sourcecode":"value.isJsonNull()"},"failures":[366,22,25,26,29,38,398,39,40,41,401,42,43,44,422,424,579,48,49,51,425,237,238,52,53,426,427,428,56,582,429,57,58,59,60,61,62,63,64,70,661,662,75,76,77,78,79,81,83,85,86,87,94,686,101,110,512,114,517,119,120,121,126,127,128,129],"tindex":"fdb58b0c-3e39-11e6-8449-8745e24291a3","method":{"position":"com.google.gson.internal.bind.TypeAdapters:680","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, com.google.gson.JsonElement value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245168/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value.isJsonNull()) {\n                {\n                    if ((value == null) || (value.isJsonNull())) {\n                        out.nullValue();\n                    } else if (value.isJsonPrimitive()) {\n                        com.google.gson.JsonPrimitive com.google.gson.JsonPrimitive = value.getAsJsonPrimitive();\n                        if (primitive.isNumber()) {\n                            out.value(primitive.getAsNumber());\n                        } else if (primitive.isBoolean()) {\n                            out.value(primitive.getAsBoolean());\n                        } else {\n                            out.value(primitive.getAsString());\n                        }\n                    } else if (value.isJsonArray()) {\n                        out.beginArray();\n                        for (com.google.gson.JsonElement com.google.gson.JsonElement : value.getAsJsonArray()) {\n                            write(out, e);\n                        }\n                        out.endArray();\n                    } else if (value.isJsonObject()) {\n                        out.beginObject();\n                        for (java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> : value.getAsJsonObject().entrySet()) {\n                            out.name(e.getKey());\n                            write(out, e.getValue());\n                        }\n                        out.endObject();\n                    } else {\n                        throw new java.lang.IllegalArgumentException((\"Couldn't write \" + (value.getClass())));\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245168/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[478],"tindex":"fdb5b21d-3e39-11e6-8449-41cc8ff59f0d","method":{"position":"com.google.gson.Gson:133","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src) {\n    if (src != null) {\n        {\n            return toJsonTree(src);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245168/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:578","type":"CtBinaryOperatorImpl","sourcecode":"root == null"},"failures":[136],"tindex":"fdb5b21e-3e39-11e6-8449-1db76fe60aaa","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:401","type":"CtMethodImpl","sourcecode":"private void rotateLeft(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root == null) {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivotLeft;\n            if (pivotLeft != null) {\n                pivotLeft.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            } \n            replaceInParent(root, pivot);\n            pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot;\n            root.int = (java.lang.Math.max((left != null ? left.int : 0), (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n            pivot.int = (java.lang.Math.max(root.int, (pivotRight != null ? pivotRight.int : 0))) + 1;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245168/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"root"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:726","type":"CtBinaryOperatorImpl","sourcecode":"value == 0"},"failures":[403,410,412,413,687,688,689,515,516],"tindex":"fdb5b21f-3e39-11e6-8449-756c99f4e1f3","method":{"position":"com.google.gson.stream.JsonWriter:476","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(long value) throws java.io.IOException {\n    if (value == 0) {\n        {\n            writeDeferredName();\n            beforeValue(false);\n            java.io.Writer.write(java.lang.Long.toString(value));\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245168/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:105","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonObject"},"failures":[],"tindex":"fdb5d930-3e39-11e6-8449-a515ff0e5a51","method":{"position":"com.google.gson.internal.LinkedTreeMap:570","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonObject) {\n        {\n            return (o instanceof java.util.Map.Entry) && ((findByEntry(((java.util.Map.Entry<?, ?>)(o)))) != null);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245168/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:188","type":"CtBinaryOperatorImpl","sourcecode":"a instanceof java.lang.reflect.WildcardType"},"failures":[],"tindex":"fdb5d931-3e39-11e6-8449-3bb7c8482865","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:223","type":"CtMethodImpl","sourcecode":"private boolean equal(java.lang.Object a, java.lang.Object b) {\n    if (a instanceof java.lang.reflect.WildcardType) {\n        {\n            return (a == b) || ((a != null) && (a.equals(b)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245168/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.DateTypeAdapter:86","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"fdb5d932-3e39-11e6-8449-a7191235f3c7","method":{"position":"com.google.gson.internal.bind.ObjectTypeAdapter:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Object value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245168/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245168/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (value == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245168/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.io.IOException();\n                    } else {\n                        {\n                            if (value == null) {\n                                out.nullValue();\n                                return ;\n                            } \n                            com.google.gson.TypeAdapter<java.lang.Object> com.google.gson.TypeAdapter<java.lang.Object> = ((com.google.gson.TypeAdapter<java.lang.Object>)(com.google.gson.Gson.getAdapter(value.getClass())));\n                            if (typeAdapter instanceof com.google.gson.internal.bind.ObjectTypeAdapter) {\n                                out.beginObject();\n                                out.endObject();\n                                return ;\n                            } \n                            typeAdapter.write(out, value);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.JsonObject:54","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"fdb5d933-3e39-11e6-8449-319f96d41852","method":{"position":"com.google.gson.internal.bind.TypeAdapters:680","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, com.google.gson.JsonElement value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245168/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value.isJsonNull()) {\n                {\n                    if ((value == null) || (value.isJsonNull())) {\n                        out.nullValue();\n                    } else if (value.isJsonPrimitive()) {\n                        com.google.gson.JsonPrimitive com.google.gson.JsonPrimitive = value.getAsJsonPrimitive();\n                        if (primitive.isNumber()) {\n                            out.value(primitive.getAsNumber());\n                        } else if (primitive.isBoolean()) {\n                            out.value(primitive.getAsBoolean());\n                        } else {\n                            out.value(primitive.getAsString());\n                        }\n                    } else if (value.isJsonArray()) {\n                        out.beginArray();\n                        for (com.google.gson.JsonElement com.google.gson.JsonElement : value.getAsJsonArray()) {\n                            write(out, e);\n                        }\n                        out.endArray();\n                    } else if (value.isJsonObject()) {\n                        out.beginObject();\n                        for (java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> : value.getAsJsonObject().entrySet()) {\n                            out.name(e.getKey());\n                            write(out, e.getValue());\n                        }\n                        out.endObject();\n                    } else {\n                        throw new java.lang.IllegalArgumentException((\"Couldn't write \" + (value.getClass())));\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245168/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"fdb60044-3e39-11e6-8449-378822fff577","method":{"position":"com.google.gson.DefaultDateTypeAdapter:77","type":"CtMethodImpl","sourcecode":"public java.util.Date deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT, com.google.gson.JsonDeserializationContext context) throws com.google.gson.JsonParseException {\n    if (json == null) {\n        {\n            if (!(json instanceof com.google.gson.JsonPrimitive)) {\n                throw new com.google.gson.JsonParseException(\"The date should be a string value\");\n            } \n            java.util.Date java.util.Date = deserializeToDate(json);\n            if (typeOfT == (java.util.Date.java.util.Date.java.lang.Class)) {\n                return date;\n            } else if (typeOfT == (java.sql.Timestamp.java.sql.Timestamp.java.lang.Class)) {\n                return new java.sql.Timestamp(date.getTime());\n            } else if (typeOfT == (java.sql.Date.java.sql.Date.java.lang.Class)) {\n                return new java.sql.Date(date.getTime());\n            } else {\n                throw new java.lang.IllegalArgumentException((((getClass()) + \" cannot deserialize to \") + typeOfT));\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245168/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:278","type":"CtBinaryOperatorImpl","sourcecode":"node != null"},"failures":[68,115,690],"tindex":"fdb60045-3e39-11e6-8449-2d38050d0905","method":{"position":"com.google.gson.internal.LinkedTreeMap:217","type":"CtMethodImpl","sourcecode":"void removeInternal(com.google.gson.internal.LinkedTreeMap.Node<K, V> node, boolean unlink) {\n    if (node != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245168/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (unlink) {\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            if ((left != null) && (right != null)) {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = (left.int) > (right.int) ? left.last() : right.first();\n                removeInternal(adjacent, false);\n                int int = 0;\n                left = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                if (left != null) {\n                    leftHeight = left.int;\n                    adjacent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = left;\n                    left.com.google.gson.internal.LinkedTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                } \n                int int = 0;\n                right = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                if (right != null) {\n                    rightHeight = right.int;\n                    adjacent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = right;\n                    right.com.google.gson.internal.LinkedTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                } \n                adjacent.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                replaceInParent(node, adjacent);\n                return ;\n            } else if (left != null) {\n                replaceInParent(node, left);\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n            } else if (right != null) {\n                replaceInParent(node, right);\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n            } else {\n                replaceInParent(node, null);\n            }\n            rebalance(originalParent, false);\n            (int)--;\n            (int)++;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"node"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:298","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[691],"tindex":"fdb62756-3e39-11e6-8449-1352e22269b0","method":{"position":"com.google.gson.stream.JsonWriter:461","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(double value) throws java.io.IOException {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245168/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                throw new java.lang.IllegalArgumentException((\"Numeric values must be finite, but was \" + value));\n            } \n            writeDeferredName();\n            beforeValue(false);\n            java.io.Writer.append(java.lang.Double.toString(value));\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:107","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.WildcardType"},"failures":[18,172,174,146,147,179,180,148,181,182,183,184,185,186,187,188,189,190,194,195,27,29,33,149,35,198,199,200,37,210,211,212,213,214,215,216,217,218,219,220,222,223,224,226,229,230,231,232,233,234,235,51,254,255,270,271,435,60,61,63,64,285,286,287,288,72,73,313,315,331,332,333,339,342,344,345,346,347,363],"tindex":"fdb62757-3e39-11e6-8449-57cdc1d36b62","method":{"position":"com.google.gson.internal.ConstructorConstructor:200","type":"CtMethodImpl","sourcecode":"private <T>com.google.gson.internal.ObjectConstructor<T> newUnsafeAllocator(final java.lang.reflect.Type type, final java.lang.Class<? super T> rawType) {\n    if (type instanceof java.lang.reflect.WildcardType) {\n        {\n            return new com.google.gson.internal.ObjectConstructor<T>() {\n                private final com.google.gson.internal.UnsafeAllocator unsafeAllocator = com.google.gson.internal.UnsafeAllocator.create();\n\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                public T construct() {\n                    try {\n                        java.lang.Object java.lang.Object = com.google.gson.internal.UnsafeAllocator.newInstance(rawType);\n                        return ((T)(newInstance));\n                    } catch (java.lang.Exception e) {\n                        throw new java.lang.RuntimeException((((\"Unable to invoke no-args constructor for \" + type) + \". \") + \"Register an InstanceCreator with Gson for this type may fix this problem.\") , e);\n                    }\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245168/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[692],"tindex":"fdb64e68-3e39-11e6-8449-89c767e1931f","method":{"position":"com.google.gson.stream.JsonWriter:385","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter name(java.lang.String name) throws java.io.IOException {\n    if (name == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245168/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (name == null) {\n                throw new java.lang.NullPointerException(\"name == null\");\n            } \n            if ((java.lang.String) != null) {\n                throw new java.lang.IllegalStateException();\n            } \n            if ((int) == 0) {\n                throw new java.lang.IllegalStateException(\"JsonWriter is closed.\");\n            } \n            java.lang.String = name;\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.JsonPrimitive:289","type":"CtBinaryOperatorImpl","sourcecode":"(value) == null"},"failures":[],"tindex":"fdb64e69-3e39-11e6-8449-63ade7790184","method":{"position":"com.google.gson.internal.bind.ObjectTypeAdapter:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Object value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245168/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245168/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (value == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245168/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.io.IOException();\n                    } else {\n                        {\n                            if (value == null) {\n                                out.nullValue();\n                                return ;\n                            } \n                            com.google.gson.TypeAdapter<java.lang.Object> com.google.gson.TypeAdapter<java.lang.Object> = ((com.google.gson.TypeAdapter<java.lang.Object>)(com.google.gson.Gson.getAdapter(value.getClass())));\n                            if (typeAdapter instanceof com.google.gson.internal.bind.ObjectTypeAdapter) {\n                                out.beginObject();\n                                out.endObject();\n                                return ;\n                            } \n                            typeAdapter.write(out, value);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[555,561,420],"tindex":"fdb64e6a-3e39-11e6-8449-7fde36fd7e23","method":{"position":"com.google.gson.internal.bind.DateTypeAdapter:69","type":"CtMethodImpl","sourcecode":"private synchronized java.util.Date deserializeToDate(java.lang.String json) {\n    if (json == null) {\n        {\n            try {\n                return java.text.DateFormat.parse(json);\n            } catch (java.text.ParseException ignored) {\n            }\n            try {\n                return java.text.DateFormat.parse(json);\n            } catch (java.text.ParseException ignored) {\n            }\n            try {\n                return java.text.DateFormat.parse(json);\n            } catch (java.text.ParseException e) {\n                throw new com.google.gson.JsonSyntaxException(json , e);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245168/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:141","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.WildcardType"},"failures":[],"tindex":"fdb64e6b-3e39-11e6-8449-154b8aaa63e7","method":{"position":"com.google.gson.internal.$Gson$Types:117","type":"CtMethodImpl","sourcecode":"public static java.lang.Class<?> getRawType(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class<?>) {\n        return ((java.lang.Class<?>)(type));\n    } else if (type instanceof java.lang.reflect.ParameterizedType) {\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(type));\n        java.lang.reflect.Type java.lang.reflect.Type = parameterizedType.getRawType();\n        com.google.gson.internal.$Gson$Preconditions.checkArgument((rawType instanceof java.lang.Class));\n        return ((java.lang.Class<?>)(rawType));\n    } else if (type instanceof java.lang.reflect.GenericArrayType) {\n        java.lang.reflect.Type java.lang.reflect.Type = ((java.lang.reflect.GenericArrayType)(type)).getGenericComponentType();\n        return java.lang.reflect.Array.newInstance(com.google.gson.internal.$Gson$Types.getRawType(componentType), 0).getClass();\n    } else if (type instanceof java.lang.reflect.TypeVariable) {\n        return java.lang.Object.java.lang.Object.java.lang.Class;\n    } else if (type instanceof java.lang.reflect.WildcardType) {\n        return com.google.gson.internal.$Gson$Types.getRawType(((java.lang.reflect.WildcardType)(type)).getUpperBounds()[0]);\n    } else {\n        java.lang.String java.lang.String = type == null ? \"null\" : type.getClass().getName();\n        throw new java.lang.IllegalArgumentException(((((\"Expected a Class, ParameterizedType, or \" + \"GenericArrayType, but <\") + type) + \"> is of type \") + className));\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[445,448,454],"tindex":"fdb6757c-3e39-11e6-8449-01e86ada8fbd","method":{"position":"com.google.gson.internal.bind.TypeAdapters:282","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245168/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[],"tindex":"fdb6757d-3e39-11e6-8449-6b2ba154b4a6","method":{"position":"com.google.gson.Gson:576","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src != null) {\n        {\n            try {\n                com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                toJson(src, typeOfSrc, jsonWriter);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245168/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[364,451],"tindex":"fdb6757e-3e39-11e6-8449-abdfd4447cf9","method":{"position":"com.google.gson.Gson:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            out.value(value.toString());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245168/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"fdb6757f-3e39-11e6-8449-6db1991ee8af","method":{"position":"com.google.gson.JsonObject:111","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Character value) {\n    if (property == null) {\n        {\n            if (property == null) {\n                {\n                    add(property, createJsonElement(value));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245168/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245168/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[171,19,173,22,196,197,201,547,393,211,222,225,292,477,295,296,662,300,500,693],"tindex":"fdb67580-3e39-11e6-8449-c1448ba5d56e","method":{"position":"com.google.gson.stream.JsonWriter:413","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245168/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            writeDeferredName();\n            beforeValue(false);\n            string(value);\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:716","type":"CtBinaryOperatorImpl","sourcecode":"(c < '0') || (c > '9')"},"failures":[],"tindex":"fdb69c91-3e39-11e6-8449-35ac4af30b87","method":{"position":"com.google.gson.stream.JsonReader:755","type":"CtMethodImpl","sourcecode":"private boolean isLiteral(char c) throws java.io.IOException {\n    if ((c < '0') || (c > '9')) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245168/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            switch (c) {\n                case '/' :\n                case '\\\\' :\n                case ';' :\n                case '#' :\n                case '=' :\n                    checkLenient();\n                case '{' :\n                case '}' :\n                case '[' :\n                case ']' :\n                case ':' :\n                case ',' :\n                case ' ' :\n                case '\\t' :\n                case '\\f' :\n                case '\\r' :\n                case '\\n' :\n                    return false;\n                default :\n                    return true;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"c"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"fdb69c92-3e39-11e6-8449-d9c74d891d49","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:144","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245168/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"fdb69c93-3e39-11e6-8449-272801ac9abb","method":{"position":"com.google.gson.JsonObject:78","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.String value) {\n    if (property == null) {\n        {\n            add(property, createJsonElement(value));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245168/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:305","type":"CtBinaryOperatorImpl","sourcecode":"node != null"},"failures":[],"tindex":"fdb69c94-3e39-11e6-8449-bb199559f1db","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:245","type":"CtMethodImpl","sourcecode":"void removeInternal(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node, boolean unlink) {\n    if (node != null) {\n        {\n            if (unlink) {\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            if ((left != null) && (right != null)) {\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = (left.int) > (right.int) ? left.last() : right.first();\n                removeInternal(adjacent, false);\n                int int = 0;\n                left = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                if (left != null) {\n                    leftHeight = left.int;\n                    adjacent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left;\n                    left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                } \n                int int = 0;\n                right = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                if (right != null) {\n                    rightHeight = right.int;\n                    adjacent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                } \n                adjacent.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                replaceInParent(node, adjacent);\n                return ;\n            } else if (left != null) {\n                replaceInParent(node, left);\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } else if (right != null) {\n                replaceInParent(node, right);\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } else {\n                replaceInParent(node, null);\n            }\n            rebalance(originalParent, false);\n            (int)--;\n            (int)++;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245168/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"node"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":42,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":528,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":315,"com.google.gson.functional.StringTest.testStringValueDeserialization":313,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":627,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":283,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":484,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":201,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":445,"com.google.gson.stream.JsonWriterTest.testRepeatedName":624,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":14,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":151,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":3,"com.google.gson.MixedStreamTest.testWriteLenient":587,"com.google.gson.internal.bind.JsonTreeWriterTest.testPrematureClose":655,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":113,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":210,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":9,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":333,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":111,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":350,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":493,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":77,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":561,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":233,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":454,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":68,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":537,"com.google.gson.functional.ObjectTest.testSingletonLists":109,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":80,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":202,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":316,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":438,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":632,"com.google.gson.stream.JsonWriterTest.testStrings":629,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":56,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":155,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":355,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":220,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":129,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":598,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":496,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":564,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":619,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":329,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":82,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":235,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":485,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":265,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":430,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":574,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":96,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":264,"com.google.gson.functional.EnumTest.testEnumCaseMapping":560,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":314,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":594,"com.google.gson.functional.JsonTreeTest.testToJsonTree":229,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":429,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":240,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":223,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":34,"com.google.gson.JsonObjectTest.testEqualsNonEmptyObject":644,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreBehindInVersion":650,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":76,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":176,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":616,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":406,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":194,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":440,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":540,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":343,"com.google.gson.functional.ObjectTest.testNullDeserialization":141,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":102,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":326,"com.google.gson.internal.bind.JsonElementReaderTest.testNestedObjects":639,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":123,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":506,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":601,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":446,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":130,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":94,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":427,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":138,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":600,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":231,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":166,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":224,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":311,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":511,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":510,"com.google.gson.JsonParserTest.testParseString":638,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":219,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":490,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":617,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":469,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":175,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":517,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":142,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":402,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":200,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":467,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":4,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":257,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":482,"com.google.gson.functional.StreamingTypeAdaptersTest.testFromJsonTree":607,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":297,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":191,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":422,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":657,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":43,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":279,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":307,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":491,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":483,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":137,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":396,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":117,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":390,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":596,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":21,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":275,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":450,"com.google.gson.metrics.PerformanceTest.testDummy":593,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":81,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":25,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":66,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":41,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":45,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":152,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":281,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":208,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":372,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":38,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":193,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":426,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":105,"com.google.gson.functional.CollectionTest.testSetDeserialization":349,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":234,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":122,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":359,"com.google.gson.functional.EnumTest.testEnumSet":551,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":474,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":67,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":44,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":181,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":252,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":131,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":65,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":573,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":487,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":40,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":498,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":91,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":161,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":499,"com.google.gson.functional.MapTest.testHashMapDeserialization":246,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":443,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":339,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":206,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":391,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":530,"com.google.gson.MixedStreamTest.testReadNulls":588,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":288,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":526,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":159,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":418,"com.google.gson.functional.MapTest.testSortedMap":268,"com.google.gson.functional.MapTest.testMapSerialization":263,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":529,"com.google.gson.internal.bind.JsonElementReaderTest.testObject":641,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":368,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":480,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":409,"com.google.gson.functional.MapTest.testSerializeMaps":249,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":365,"com.google.gson.functional.MapTest.testComplexKeysSerialization":276,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":358,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":280,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":656,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":416,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":104,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":558,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":549,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":300,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":156,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":556,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":238,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":645,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":16,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":140,"com.google.gson.functional.MapTest.testStringKeyDeserialization":278,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":413,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":48,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":513,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":282,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":449,"com.google.gson.functional.PrettyPrintingTest.testMap":236,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":376,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":444,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":336,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":157,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":171,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":532,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":415,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":597,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":618,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":319,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":323,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":188,"com.google.gson.functional.MapTest.testMapSerializationEmpty":277,"com.google.gson.functional.CollectionTest.testQueueSerialization":340,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":646,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":475,"com.google.gson.functional.MapTest.testMapOfMapSerialization":262,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":466,"com.google.gson.JavaSerializationTest.testMapIsSerializable":664,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":196,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":346,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":477,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":613,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":57,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictBoxedNansAndInfinities":660,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":317,"com.google.gson.functional.FieldNamingTest.testIdentity":366,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":46,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":86,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":143,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":20,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":108,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":228,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":525,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":432,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":575,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":8,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":318,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":285,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":472,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":212,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":578,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":183,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":190,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":222,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":612,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":243,"com.google.gson.functional.MapTest.testMapSubclassSerialization":248,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":509,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":75,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":303,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":361,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":378,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":464,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":562,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":584,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":5,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":170,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":524,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":154,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":64,"com.google.gson.functional.EnumTest.testEnumSubclass":554,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":486,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":127,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":599,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":431,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":423,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":492,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":0,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":295,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":434,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":287,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":470,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":286,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":23,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":405,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":577,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":121,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":476,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":19,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":468,"com.google.gson.stream.JsonWriterTest.testObjectsInArrays":625,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":215,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":110,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":245,"com.google.gson.MixedStreamTest.testWriteNulls":585,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":404,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":305,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":398,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":61,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":103,"com.google.gson.CommentsTest.testParseComments":580,"com.google.gson.JsonObjectTest.testReadPropertyWithEmptyStringName":642,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":52,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":112,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":543,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":384,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":411,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":489,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":367,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":267,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":321,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":84,"com.google.gson.MixedStreamTest.testReadInvalidState":582,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":230,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":73,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":217,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":508,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":369,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":442,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":417,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":381,"com.google.gson.internal.bind.JsonTreeWriterTest.testWriteAfterClose":661,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":459,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":611,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":198,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":503,"com.google.gson.functional.MapTest.testMapDeserialization":255,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":401,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":192,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":241,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":244,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":536,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":621,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":32,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":254,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":542,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":538,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":301,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":227,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":555,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":168,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":128,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":144,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":290,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":379,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":24,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":177,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":72,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":284,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":299,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":237,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":266,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":653,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":221,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":428,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":54,"com.google.gson.functional.PrimitiveTest.testShortSerialization":507,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":545,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":495,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":98,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictNansAndInfinities":659,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":465,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":494,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":182,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":441,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":362,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":553,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":335,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":302,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":250,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":458,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":356,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":515,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":6,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":662,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":209,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":550,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":592,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":633,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":522,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":516,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":614,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":18,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":31,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":47,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":145,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":163,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":563,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":635,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":501,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":36,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":49,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":471,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":149,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":116,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":559,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":292,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":360,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":178,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":344,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":374,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":50,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":535,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":199,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":544,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":448,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":185,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":421,"com.google.gson.stream.JsonWriterTest.testNullStringValue":622,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":546,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":204,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":28,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":337,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":435,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":502,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":473,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":519,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":387,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":541,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":552,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":534,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":370,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":114,"com.google.gson.functional.MapTest.testGeneralMapField":272,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":395,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":521,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":375,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":410,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":424,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":211,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":270,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":164,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":310,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":439,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":497,"com.google.gson.MixedStreamTest.testReadMixedStreamed":591,"com.google.gson.JsonObjectTest.testDeepCopy":647,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":179,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":258,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":460,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":351,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":420,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":576,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":79,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":478,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":97,"com.google.gson.JavaSerializationTest.testNumberIsSerializable":663,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":39,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":197,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":259,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":332,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":247,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":53,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":520,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":100,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":567,"com.google.gson.stream.JsonWriterTest.testArraysInObjects":623,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":461,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":634,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":195,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":306,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeNullField":605,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":87,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":162,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":345,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":548,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":59,"com.google.gson.functional.ObjectTest.testNestedDeserialization":150,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":83,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":135,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":531,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":22,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":95,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":518,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":383,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":15,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":260,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":320,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":63,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":505,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":291,"com.google.gson.JavaSerializationTest.testListIsSerializable":665,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":7,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":12,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":354,"com.google.gson.functional.ObjectTest.testNullSerialization":124,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":294,"com.google.gson.stream.JsonWriterTest.testDoubles":667,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":331,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":251,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":271,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":433,"com.google.gson.functional.MapTest.testInterfaceTypeMap":269,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":407,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":377,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":27,"com.google.gson.JsonObjectTest.testAddingNullOrEmptyPropertyName":648,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":436,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":557,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":603,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":298,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":380,"com.google.gson.MixedStreamTest.testReadClosed":583,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":165,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":93,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":452,"com.google.gson.MixedStreamTest.testWriteClosed":590,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":342,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":533,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":30,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":115,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":225,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":69,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":26,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":386,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":147,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":382,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":218,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":33,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":118,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":341,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":568,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeWithCustomTypeAdapter":604,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":481,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":570,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":296,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":347,"com.google.gson.internal.bind.JsonElementReaderTest.testSkipValue":640,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":205,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":88,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":523,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":610,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":457,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":226,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":173,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":106,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":392,"com.google.gson.functional.CollectionTest.testQueueDeserialization":357,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":385,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":463,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":479,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":325,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":527,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserialize":608,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":216,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":569,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":139,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":256,"com.google.gson.stream.JsonWriterTest.testDeepNestingObjects":628,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":187,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":148,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":312,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":334,"com.google.gson.functional.MapTest.testRawMapSerialization":274,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":581,"com.google.gson.JsonParserTest.testParseReader":637,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":352,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":203,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":615,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":133,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":289,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":373,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":547,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":636,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":153,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":397,"com.google.gson.functional.PrimitiveTest.testByteSerialization":504,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":654,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":1,"com.google.gson.ObjectTypeAdapterTest.testSerialize":631,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":308,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":447,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":10,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":408,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":363,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":70,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":322,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":572,"com.google.gson.functional.MapTest.testMapWithQuotes":261,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":172,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":455,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":324,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":42,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":419,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":58,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":609,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":512,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":169,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":232,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":539,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":60,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":146,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":242,"com.google.gson.functional.ObjectTest.testEmptyStringDeserialization":126,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":184,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":488,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":120,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":414,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":213,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":174,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":11,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":186,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":566,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":500,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":160,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":348,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":400,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":62,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":214,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":393,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":293,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":89,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":571,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":304,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAtSameVersion":649,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":158,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":74,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":437,"com.google.gson.internal.LinkedHashTreeMapTest.testRemoveRootDoesNotDoubleUnlink":666,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":55,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":651,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":132,"com.google.gson.JsonObjectTest.testAddingStringProperties":13,"com.google.gson.functional.ObjectTest.testNestedSerialization":134,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":388,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":309,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":328,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":451,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":99,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":273,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":371,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":35,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":589,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":602,"com.google.gson.stream.JsonWriterTest.testUnicodeLineBreaksEscaped":630,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":85,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":125,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":514,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":29,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":78,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":189,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":453,"com.google.gson.GsonBuilderTest.testCreatingMoreThanOnce":579,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":595,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":136,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":167,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":565,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":652,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":327,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":403,"com.google.gson.functional.CollectionTest.testSetSerialization":353,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":425,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":51,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":239,"com.google.gson.functional.StringTest.testStringValueSerialization":330,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":107,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":17,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":338,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":620,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":394,"com.google.gson.MixedStreamTest.testWriteInvalidState":586,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":119,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":456,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":412,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":462,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":389,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":180,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":364,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":101,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":643,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":90,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":92,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeNullObject":606,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":658,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":71,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":207,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":2,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":253,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":626,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":37,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":399},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:122","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"fab566a9-3e65-11e6-b62a-055b70e87f50","method":{"position":"com.google.gson.internal.$Gson$Types:117","type":"CtMethodImpl","sourcecode":"public static java.lang.Class<?> getRawType(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class<?>) {\n        return ((java.lang.Class<?>)(type));\n    } else if (type instanceof java.lang.reflect.ParameterizedType) {\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(type));\n        java.lang.reflect.Type java.lang.reflect.Type = parameterizedType.getRawType();\n        com.google.gson.internal.$Gson$Preconditions.checkArgument((rawType instanceof java.lang.Class));\n        return ((java.lang.Class<?>)(rawType));\n    } else if (type instanceof java.lang.reflect.GenericArrayType) {\n        java.lang.reflect.Type java.lang.reflect.Type = ((java.lang.reflect.GenericArrayType)(type)).getGenericComponentType();\n        return java.lang.reflect.Array.newInstance(com.google.gson.internal.$Gson$Types.getRawType(componentType), 0).getClass();\n    } else if (type instanceof java.lang.reflect.TypeVariable) {\n        return java.lang.Object.java.lang.Object.java.lang.Class;\n    } else if (type instanceof java.lang.reflect.WildcardType) {\n        return com.google.gson.internal.$Gson$Types.getRawType(((java.lang.reflect.WildcardType)(type)).getUpperBounds()[0]);\n    } else {\n        java.lang.String java.lang.String = type == null ? \"null\" : type.getClass().getName();\n        throw new java.lang.IllegalArgumentException(((((\"Expected a Class, ParameterizedType, or \" + \"GenericArrayType, but <\") + type) + \"> is of type \") + className));\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13],"tindex":"fab5b4ca-3e65-11e6-b62a-9bac7da15f33","method":{"position":"com.google.gson.JsonObject:78","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.String value) {\n    if (value == null) {\n        {\n            add(property, createJsonElement(value));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251058765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.FieldNamingPolicy:155","type":"CtUnaryOperatorImpl","sourcecode":"!(java.lang.Character.isUpperCase(firstCharacter))"},"failures":[],"tindex":"fab5b4cb-3e65-11e6-b62a-e57d5bca8b06","method":{"position":"com.google.gson.FieldNamingPolicy:163","type":"CtMethodImpl","sourcecode":"private static java.lang.String modifyString(char firstCharacter, java.lang.String srcString, int indexOfSubstring) {\n    if (!(java.lang.Character.isUpperCase(firstCharacter))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251058765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (!(java.lang.Character.isUpperCase(firstCharacter))) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251058765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return indexOfSubstring < (srcString.length()) ? firstCharacter + (srcString.substring(indexOfSubstring)) : java.lang.String.valueOf(firstCharacter);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"firstCharacter":"firstCharacter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:274","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,0,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,1,2,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,3,4,5,6,7,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,8,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,9,10,525,11,12,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602],"tindex":"fab5b4cc-3e65-11e6-b62a-d999905fe5dd","method":{"position":"com.google.gson.Gson:273","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> floatAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return ((float)(in.nextDouble()));\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    float float = value.floatValue();\n                    checkValidFloatingPoint(floatValue);\n                    out.value(value);\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251058765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[17,19,30,31,36,38,39,40,43,47,60,61,64,68,69,70,71,72,75,603,604,605,606,607,608,78,79,81,82,86,609,100,101,102,103,104,105,106,109,110,111,113,114,116,117,120,123,127,129,132,136,138,139,143,146,148,149,150,151,154,155,167,168,189,285,286,289,295,296,298,300,301,302,303,304,3,4,5,6,308,311,312,610,611,612,613,333,335,349,368,369,370,373,420,421,422,425,501,528,531,533,534,536,537,543,550,558,564,565,568,569,591,592,596],"tindex":"fab602ed-3e65-11e6-b62a-6f4245550efa","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:101","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nvoid read(com.google.gson.stream.JsonReader reader, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value == null) {\n        {\n            java.lang.Object java.lang.Object = com.google.gson.TypeAdapter<?>.read(reader);\n            if ((fieldValue != null) || (!isPrimitive)) {\n                field.set(value, fieldValue);\n            } \n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251058765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[14,16,20,21,25,26,27,32,33,35,42,44,0,48,49,51,52,53,55,59,60,62,63,64,65,66,67,69,70,71,73,76,603,614,615,616,617,618,619,77,80,82,83,86,87,89,609,91,92,93,94,95,96,97,98,99,100,101,102,103,104,106,107,1,2,108,109,112,115,118,122,125,131,133,134,137,142,144,145,147,153,155,161,163,164,165,171,172,174,176,177,180,184,186,187,188,190,192,193,195,197,198,199,202,205,208,210,211,214,215,216,217,218,221,224,227,230,232,233,234,236,237,238,242,248,249,252,254,256,261,262,263,267,269,271,272,273,274,276,279,282,283,284,287,288,289,290,292,293,294,297,299,302,303,304,308,309,310,311,312,314,315,316,317,318,321,323,327,330,610,620,611,612,613,332,333,334,335,340,342,343,344,347,350,351,353,356,360,362,363,364,365,366,369,371,374,375,376,377,378,379,381,382,383,384,387,388,389,390,392,393,397,398,402,403,408,410,414,418,421,422,423,426,427,439,442,457,499,526,529,532,535,538,541,542,544,545,546,549,551,552,553,554,557,559,560,561,563,566,567,570,573,576,577,578,581,584,589,621,594,622,623,624,625,626,627,628,629,630,596,631,632,597,633,634,635,600,601,602],"tindex":"fab602ee-3e65-11e6-b62a-93ecd6d7655a","method":{"position":"com.google.gson.stream.JsonWriter:532","type":"CtMethodImpl","sourcecode":"private void string(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        {\n            java.lang.String[] java.lang.String[] = boolean ? com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[] : com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[];\n            java.io.Writer.write(\"\\\"\");\n            int int = 0;\n            int int = value.length();\n            for (int int = 0 ; i < length ; i++) {\n                char char = value.charAt(i);\n                java.lang.String java.lang.String;\n                if (c < 128) {\n                    replacement = replacements[c];\n                    if (replacement == null) {\n                        continue;\n                    } \n                } else if (c == '\\u2028') {\n                    replacement = \"\\\\u2028\";\n                } else if (c == '\\u2029') {\n                    replacement = \"\\\\u2029\";\n                } else {\n                    continue;\n                }\n                if (last < i) {\n                    java.io.Writer.write(value, last, (i - last));\n                } \n                java.io.Writer.write(replacement);\n                last = i + 1;\n            }\n            if (last < length) {\n                java.io.Writer.write(value, last, (length - last));\n            } \n            java.io.Writer.write(\"\\\"\");\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251058765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonObject:54","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[22,23,24,28,29,34,45,0,48,49,55,62,74,607,82,88,609,1,2,155,166,180,226,227,228,229,280,283,3,4,5,6,7,367,368,369,370,371,372,373,385,386,418,421,422,8,9,10,11,12,528,534,539,545,636,637,638,596,639,640,641,633,634,635,642,600,643,644,645,646,647,13,601,648],"tindex":"fab629ff-3e65-11e6-b62a-cb163999e9aa","method":{"position":"com.google.gson.JsonObject:53","type":"CtMethodImpl","sourcecode":"public void add(java.lang.String property, com.google.gson.JsonElement value) {\n    if (value == null) {\n        {\n            if (value == null) {\n                value = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.put(property, value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251058765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:109","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonPrimitive"},"failures":[],"tindex":"fab65110-3e65-11e6-b62a-01cc2d13c26b","method":{"position":"com.google.gson.internal.LinkedTreeMap:570","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonPrimitive) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251058765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (o instanceof java.util.Map.Entry) && ((findByEntry(((java.util.Map.Entry<?, ?>)(o)))) != null);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[182,544],"tindex":"fab65111-3e65-11e6-b62a-cb8b106a5207","method":{"position":"com.google.gson.internal.bind.TypeAdapters:267","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251058765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"fab65112-3e65-11e6-b62a-058288119c7c","method":{"position":"com.google.gson.Gson:285","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            float float = value.floatValue();\n            checkValidFloatingPoint(floatValue);\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251058765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[23,28,29,34,62,229,385,386,8,9,10,525,11,12,528],"tindex":"fab67823-3e65-11e6-b62a-9d6f14dd373c","method":{"position":"com.google.gson.Gson:468","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src) {\n    if (src == null) {\n        {\n            if (src == null) {\n                return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            return toJsonTree(src, src.getClass());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251058765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:79","type":"CtUnaryOperatorImpl","sourcecode":"!(json instanceof com.google.gson.JsonPrimitive)"},"failures":[],"tindex":"fab67824-3e65-11e6-b62a-af27f1c85c49","method":{"position":"com.google.gson.Gson:847","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(com.google.gson.JsonElement json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            if (!(json instanceof com.google.gson.JsonPrimitive)) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251058765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            } else {\n                {\n                    java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n                    return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251058765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:243","type":"CtBinaryOperatorImpl","sourcecode":"annotation != null"},"failures":[563,564,565,566,567,568,569,570,649,650],"tindex":"fab67825-3e65-11e6-b62a-814031e399ac","method":{"position":"com.google.gson.internal.Excluder:242","type":"CtMethodImpl","sourcecode":"private boolean isValidUntil(com.google.gson.annotations.Until annotation) {\n    if (annotation != null) {\n        {\n            if (annotation != null) {\n                double double = annotation.value();\n                if (annotationVersion <= (double)) {\n                    return false;\n                } \n            } \n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251058765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:103","type":"CtVariableReadImpl","sourcecode":"deserialization"},"failures":[527,531,532,533],"tindex":"fab67826-3e65-11e6-b62a-df9d118335f9","method":{"position":"com.google.gson.internal.Excluder:96","type":"CtMethodImpl","sourcecode":"public com.google.gson.internal.Excluder withExclusionStrategy(com.google.gson.ExclusionStrategy exclusionStrategy, boolean serialization, boolean deserialization) {\n    if (serialization) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251058765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.Excluder com.google.gson.internal.Excluder = clone();\n            if (serialization) {\n                result.java.util.List<com.google.gson.ExclusionStrategy> = new java.util.ArrayList<com.google.gson.ExclusionStrategy>(java.util.List<com.google.gson.ExclusionStrategy>);\n                result.java.util.List<com.google.gson.ExclusionStrategy>.add(exclusionStrategy);\n            } \n            if (deserialization) {\n                result.java.util.List<com.google.gson.ExclusionStrategy> = new java.util.ArrayList<com.google.gson.ExclusionStrategy>(java.util.List<com.google.gson.ExclusionStrategy>);\n                result.java.util.List<com.google.gson.ExclusionStrategy>.add(exclusionStrategy);\n            } \n            return result;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deserialization":"serialization"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"fab69f37-3e65-11e6-b62a-4b8179e11adc","method":{"position":"com.google.gson.Gson:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251058765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            out.value(value.toString());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:127","type":"CtInvocationImpl","sourcecode":"raw.isInterface()"},"failures":[14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,38,39,40,43,47,0,49,51,60,61,63,64,65,66,67,68,69,70,71,72,73,75,76,78,79,80,81,82,86,87,89,90,609,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,120,122,123,125,127,129,131,132,133,134,135,136,137,138,139,140,142,143,144,145,146,147,148,149,150,151,154,155,161,167,168,178,182,189,197,213,218,226,227,228,229,230,232,233,234,237,238,242,256,265,269,271,272,276,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,3,4,5,6,7,308,311,312,610,620,611,612,613,333,335,344,349,350,353,362,363,364,365,366,368,369,370,371,373,378,381,382,383,384,385,386,387,388,389,390,410,411,412,418,420,421,422,423,424,425,426,427,501,9,10,11,12,526,528,529,531,532,533,534,535,536,537,541,542,543,544,546,549,550,557,558,563,564,565,566,567,568,569,570,573,577,578,581,584,586,590,591,592,596,631],"tindex":"fab69f38-3e65-11e6-b62a-1d70012a0f63","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:125","type":"CtMethodImpl","sourcecode":"private java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> getBoundFields(com.google.gson.Gson context, com.google.gson.reflect.TypeToken<?> type, java.lang.Class<?> raw) {\n    if (raw.isInterface()) {\n        {\n            java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> = new java.util.LinkedHashMap<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField>();\n            if (raw.isInterface()) {\n                return result;\n            } \n            java.lang.reflect.Type java.lang.reflect.Type = type.getType();\n            while (raw != (java.lang.Object.java.lang.Object.java.lang.Class)) {\n                java.lang.reflect.Field[] java.lang.reflect.Field[] = raw.getDeclaredFields();\n                for (java.lang.reflect.Field java.lang.reflect.Field : fields) {\n                    boolean boolean = excludeField(field, true);\n                    boolean boolean = excludeField(field, false);\n                    if ((!serialize) && (!deserialize)) {\n                        continue;\n                    } \n                    field.setAccessible(true);\n                    java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, field.getGenericType());\n                    com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = createBoundField(context, field, getFieldName(field), com.google.gson.reflect.TypeToken.get(fieldType), serialize, deserialize);\n                    com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = result.put(boundField.java.lang.String, boundField);\n                    if (previous != null) {\n                        throw new java.lang.IllegalArgumentException(((declaredType + \" declares multiple JSON fields named \") + (previous.java.lang.String)));\n                    } \n                }\n                type = com.google.gson.reflect.TypeToken.get(com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, raw.getGenericSuperclass()));\n                raw = type.getRawType();\n            }\n            return result;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251058765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"raw"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[14,16,20,67,651,603,614,615,652,616,617,618,459,466,469,488,520,587],"tindex":"fab6c649-3e65-11e6-b62a-ddbc12eca505","method":{"position":"com.google.gson.Gson:261","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            double double = value.doubleValue();\n            checkValidFloatingPoint(doubleValue);\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251058765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"fab6c64a-3e65-11e6-b62a-518b32a24f5d","method":{"position":"com.google.gson.JsonParser:44","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement parse(java.lang.String json) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251058765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            return parse(new java.io.StringReader(json));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"fab6c64b-3e65-11e6-b62a-33431d770a41","method":{"position":"com.google.gson.Gson:591","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251058765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = getAdapter(com.google.gson.reflect.TypeToken.get(typeOfSrc));\n            boolean boolean = writer.isLenient();\n            writer.setLenient(true);\n            boolean boolean = writer.isHtmlSafe();\n            writer.setHtmlSafe(boolean);\n            boolean boolean = writer.getSerializeNulls();\n            writer.setSerializeNulls(boolean);\n            try {\n                ((com.google.gson.TypeAdapter<java.lang.Object>)(adapter)).write(writer, src);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            } finally {\n                writer.setLenient(oldLenient);\n                writer.setHtmlSafe(oldHtmlSafe);\n                writer.setSerializeNulls(oldSerializeNulls);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.TreeTypeAdapter:55","type":"CtInvocationImpl","sourcecode":"value.isJsonNull()"},"failures":[22,23,24,28,29,34,62,82,226,227,228,229,269,272,283,385,386,418,421,422,9,10,11,12,528,636,653,654,655,656,657,658,659,660,661,633,634,662,635],"tindex":"fab6c64c-3e65-11e6-b62a-617152e746d7","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:75","type":"CtMethodImpl","sourcecode":"private void put(com.google.gson.JsonElement value) {\n    if (value.isJsonNull()) {\n        {\n            if ((java.lang.String) != null) {\n                if ((!(value.isJsonNull())) || (getSerializeNulls())) {\n                    com.google.gson.JsonObject com.google.gson.JsonObject = ((com.google.gson.JsonObject)(peek()));\n                    object.add(java.lang.String, value);\n                } \n                java.lang.String = null;\n            } else if (java.util.List<com.google.gson.JsonElement>.isEmpty()) {\n                com.google.gson.JsonElement = value;\n            } else {\n                com.google.gson.JsonElement com.google.gson.JsonElement = peek();\n                if (element instanceof com.google.gson.JsonArray) {\n                    ((com.google.gson.JsonArray)(element)).add(value);\n                } else {\n                    throw new java.lang.IllegalStateException();\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251058765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:136","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.TypeVariable"},"failures":[14,16,17,19,20,21,23,26,28,30,31,32,34,35,36,38,43,44,46,0,54,59,60,63,64,65,69,70,71,73,76,85,609,100,101,102,103,104,105,106,109,120,121,122,137,144,145,148,152,159,167,168,174,182,189,197,211,218,227,230,231,232,233,234,237,241,242,243,247,250,251,252,253,254,255,256,258,259,260,263,264,265,266,268,269,270,271,272,273,275,276,277,278,279,280,281,282,283,288,289,290,291,292,293,294,295,296,300,301,303,304,305,306,610,620,611,612,613,333,334,336,337,338,340,341,343,344,345,346,347,348,349,352,353,354,355,357,373,378,381,382,383,384,385,386,387,388,389,390,404,406,418,419,420,421,422,423,425,427,439,496,9,10,11,12,535,541,542,549,551,552,553,554,555,559,636,653,580,587,589,663,664,665,631],"tindex":"fab6ed5d-3e65-11e6-b62a-8f44db536178","method":{"position":"com.google.gson.internal.ConstructorConstructor:128","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nprivate <T>com.google.gson.internal.ObjectConstructor<T> newDefaultImplementationConstructor(final java.lang.reflect.Type type, java.lang.Class<? super T> rawType) {\n    if (type instanceof java.lang.reflect.WildcardType) {\n        {\n            if (type instanceof java.lang.reflect.TypeVariable) {\n                {\n                    if (java.util.Collection.java.util.Collection.java.lang.Class.isAssignableFrom(rawType)) {\n                        if (java.util.SortedSet.java.util.SortedSet.java.lang.Class.isAssignableFrom(rawType)) {\n                            return new com.google.gson.internal.ObjectConstructor<T>() {\n                                public T construct() {\n                                    return ((T)(new java.util.TreeSet<java.lang.Object>()));\n                                }\n                            };\n                        } else if (java.util.EnumSet.java.util.EnumSet.java.lang.Class.isAssignableFrom(rawType)) {\n                            return new com.google.gson.internal.ObjectConstructor<T>() {\n                                @java.lang.SuppressWarnings(value = \"rawtypes\")\n                                public T construct() {\n                                    if (type instanceof java.lang.reflect.ParameterizedType) {\n                                        java.lang.reflect.Type java.lang.reflect.Type = ((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0];\n                                        if (elementType instanceof java.lang.Class) {\n                                            return ((T)(java.util.EnumSet.noneOf(((java.lang.Class)(elementType)))));\n                                        } else {\n                                            throw new com.google.gson.JsonIOException((\"Invalid EnumSet type: \" + (type.toString())));\n                                        }\n                                    } else {\n                                        throw new com.google.gson.JsonIOException((\"Invalid EnumSet type: \" + (type.toString())));\n                                    }\n                                }\n                            };\n                        } else if (java.util.Set.java.util.Set.java.lang.Class.isAssignableFrom(rawType)) {\n                            return new com.google.gson.internal.ObjectConstructor<T>() {\n                                public T construct() {\n                                    return ((T)(new java.util.LinkedHashSet<java.lang.Object>()));\n                                }\n                            };\n                        } else if (java.util.Queue.java.util.Queue.java.lang.Class.isAssignableFrom(rawType)) {\n                            return new com.google.gson.internal.ObjectConstructor<T>() {\n                                public T construct() {\n                                    return ((T)(new java.util.LinkedList<java.lang.Object>()));\n                                }\n                            };\n                        } else {\n                            return new com.google.gson.internal.ObjectConstructor<T>() {\n                                public T construct() {\n                                    return ((T)(new java.util.ArrayList<java.lang.Object>()));\n                                }\n                            };\n                        }\n                    } \n                    if (java.util.Map.java.util.Map.java.lang.Class.isAssignableFrom(rawType)) {\n                        if (java.util.SortedMap.java.util.SortedMap.java.lang.Class.isAssignableFrom(rawType)) {\n                            return new com.google.gson.internal.ObjectConstructor<T>() {\n                                public T construct() {\n                                    return ((T)(new java.util.TreeMap<java.lang.Object, java.lang.Object>()));\n                                }\n                            };\n                        } else if ((type instanceof java.lang.reflect.ParameterizedType) && (!(java.lang.String.java.lang.String.java.lang.Class.isAssignableFrom(com.google.gson.reflect.TypeToken.get(((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0]).getRawType())))) {\n                            return new com.google.gson.internal.ObjectConstructor<T>() {\n                                public T construct() {\n                                    return ((T)(new java.util.LinkedHashMap<java.lang.Object, java.lang.Object>()));\n                                }\n                            };\n                        } else {\n                            return new com.google.gson.internal.ObjectConstructor<T>() {\n                                public T construct() {\n                                    return ((T)(new com.google.gson.internal.LinkedTreeMap<java.lang.String, java.lang.Object>()));\n                                }\n                            };\n                        }\n                    } \n                    return null;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251058765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251058765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:430","type":"CtFieldReadImpl","sourcecode":"serializeNulls"},"failures":[22,23,24,28,29,34,62,82,1,119,160,226,227,228,229,249,256,273,283,385,386,403,8,9,10,525,11,12,526,528,532,535,538,541,542,544,545,546,547,549,636,653,654,581,584,585,586,587,589,590,635],"tindex":"fab7146e-3e65-11e6-b62a-7f8a17d24b02","method":{"position":"com.google.gson.stream.JsonWriter:268","type":"CtMethodImpl","sourcecode":"public final void setSerializeNulls(boolean serializeNulls) {\n    if (serializeNulls) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251058765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = serializeNulls;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeNulls":"serializeNulls"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:92","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof java.util.Iterator"},"failures":[],"tindex":"fab7146f-3e65-11e6-b62a-b91f4c7f8bdb","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:808","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251058765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof java.util.Iterator) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251058765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (!(o instanceof java.util.Map.Entry)) {\n                        return false;\n                    } \n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n                    if (node == null) {\n                        return false;\n                    } \n                    removeInternal(node, true);\n                    return true;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"fab71470-3e65-11e6-b62a-db3df651cc35","method":{"position":"com.google.gson.JsonObject:111","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Character value) {\n    if (property == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251058765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            add(property, createJsonElement(value));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:578","type":"CtBinaryOperatorImpl","sourcecode":"root == null"},"failures":[],"tindex":"fab71471-3e65-11e6-b62a-2782d95230f8","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:429","type":"CtMethodImpl","sourcecode":"private void rotateRight(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251058765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivotRight;\n            if (pivotRight != null) {\n                pivotRight.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            } \n            replaceInParent(root, pivot);\n            pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot;\n            root.int = (java.lang.Math.max((right != null ? right.int : 0), (pivotRight != null ? pivotRight.int : 0))) + 1;\n            pivot.int = (java.lang.Math.max(root.int, (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:726","type":"CtBinaryOperatorImpl","sourcecode":"value == 0"},"failures":[],"tindex":"fab73b82-3e65-11e6-b62a-4179a42e0cef","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:170","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(long value) throws java.io.IOException {\n    if (value == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251058765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:105","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonObject"},"failures":[],"tindex":"fab73b83-3e65-11e6-b62a-cbb756c615cb","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:808","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251058765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof java.util.Iterator) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251058765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (!(o instanceof java.util.Map.Entry)) {\n                        return false;\n                    } \n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n                    if (node == null) {\n                        return false;\n                    } \n                    removeInternal(node, true);\n                    return true;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:98","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.ParameterizedType"},"failures":[14,16,17,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,38,39,40,43,47,0,49,51,60,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,79,80,81,82,86,87,89,90,609,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,120,122,123,125,127,129,131,132,133,134,136,137,138,139,142,143,144,145,146,147,148,149,150,151,154,155,161,167,168,178,182,189,197,213,218,226,227,228,229,230,232,233,234,237,238,242,256,265,269,271,272,276,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,3,4,5,6,7,308,311,312,610,620,611,612,613,333,335,344,349,350,353,362,363,364,365,366,368,369,370,371,373,378,381,382,383,384,385,386,387,388,389,390,410,411,412,418,420,421,422,423,424,425,426,427,501,9,10,11,12,526,528,529,531,532,533,534,535,536,537,541,542,543,544,546,549,550,557,558,563,564,565,566,567,568,569,570,573,577,578,581,584,586,590,591,592,596,631],"tindex":"fab73b84-3e65-11e6-b62a-b1b4d141d648","method":{"position":"com.google.gson.internal.Primitives:69","type":"CtMethodImpl","sourcecode":"public static boolean isPrimitive(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.ParameterizedType) {\n        {\n            return com.google.gson.internal.Primitives.com.google.gson.internal.Primitives.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.containsKey(type);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251058765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:497","type":"CtBinaryOperatorImpl","sourcecode":"(typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)"},"failures":[35,36,42,43,44,45,46,47,0,48,49,50,51,52,53,54,55,56,57,59,62,74,88,91,92,93,94,96,221,244,283,356,367,368,369,370,371,372,373,375,377,8,9,10,525,11,12,539,540,545,572,573,574,575,576],"tindex":"fab76295-3e65-11e6-b62a-e76a80a41d13","method":{"position":"com.google.gson.TreeTypeAdapter:92","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newFactoryWithMatchRawType(com.google.gson.reflect.TypeToken<?> exactType, java.lang.Object typeAdapter) {\n    if ((typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251058765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            boolean boolean = (exactType.getType()) == (exactType.getRawType());\n            return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , exactType , matchRawType , null);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[182],"tindex":"fab76296-3e65-11e6-b62a-91aad1ae0c0f","method":{"position":"com.google.gson.internal.bind.TypeAdapters:201","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251058765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[25,27,33,182,213,256,269,271,283,620,343,403,414,535,538,541,542,547,549,622],"tindex":"fab76297-3e65-11e6-b62a-cb1e6b749686","method":{"position":"com.google.gson.stream.JsonWriter:413","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251058765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            writeDeferredName();\n            beforeValue(false);\n            string(value);\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"fab76298-3e65-11e6-b62a-7d87f09d8781","method":{"position":"com.google.gson.Gson:695","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.lang.String json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251058765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:107","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonArray"},"failures":[],"tindex":"fab789a9-3e65-11e6-b62a-b1eadac1307c","method":{"position":"com.google.gson.internal.$Gson$Types:511","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    return (o instanceof java.lang.reflect.GenericArrayType) && (com.google.gson.internal.$Gson$Types.equals(com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl.this, ((java.lang.reflect.GenericArrayType)(o))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:136","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.TypeVariable"},"failures":[],"tindex":"fab789aa-3e65-11e6-b62a-cb2d3916465c","method":{"position":"com.google.gson.internal.$Gson$Types:117","type":"CtMethodImpl","sourcecode":"public static java.lang.Class<?> getRawType(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class<?>) {\n        return ((java.lang.Class<?>)(type));\n    } else if (type instanceof java.lang.reflect.ParameterizedType) {\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(type));\n        java.lang.reflect.Type java.lang.reflect.Type = parameterizedType.getRawType();\n        com.google.gson.internal.$Gson$Preconditions.checkArgument((rawType instanceof java.lang.Class));\n        return ((java.lang.Class<?>)(rawType));\n    } else if (type instanceof java.lang.reflect.GenericArrayType) {\n        java.lang.reflect.Type java.lang.reflect.Type = ((java.lang.reflect.GenericArrayType)(type)).getGenericComponentType();\n        return java.lang.reflect.Array.newInstance(com.google.gson.internal.$Gson$Types.getRawType(componentType), 0).getClass();\n    } else if (type instanceof java.lang.reflect.TypeVariable) {\n        return java.lang.Object.java.lang.Object.java.lang.Class;\n    } else if (type instanceof java.lang.reflect.WildcardType) {\n        return com.google.gson.internal.$Gson$Types.getRawType(((java.lang.reflect.WildcardType)(type)).getUpperBounds()[0]);\n    } else {\n        java.lang.String java.lang.String = type == null ? \"null\" : type.getClass().getName();\n        throw new java.lang.IllegalArgumentException(((((\"Expected a Class, ParameterizedType, or \" + \"GenericArrayType, but <\") + type) + \"> is of type \") + className));\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.FieldNamingPolicy:155","type":"CtUnaryOperatorImpl","sourcecode":"!(java.lang.Character.isUpperCase(firstCharacter))"},"failures":[],"tindex":"fab789ab-3e65-11e6-b62a-e1159c78f63b","method":{"position":"com.google.gson.FieldNamingPolicy:163","type":"CtMethodImpl","sourcecode":"private static java.lang.String modifyString(char firstCharacter, java.lang.String srcString, int indexOfSubstring) {\n    if (!(java.lang.Character.isUpperCase(firstCharacter))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251058765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (!(java.lang.Character.isUpperCase(firstCharacter))) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251058765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return indexOfSubstring < (srcString.length()) ? firstCharacter + (srcString.substring(indexOfSubstring)) : java.lang.String.valueOf(firstCharacter);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"firstCharacter":"firstCharacter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[],"tindex":"fab789ac-3e65-11e6-b62a-c5042d0143fa","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:116","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<?> getFieldAdapter(com.google.gson.Gson gson, java.lang.reflect.Field field, com.google.gson.reflect.TypeToken<?> fieldType) {\n    if (field.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251058765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.annotations.JsonAdapter com.google.gson.annotations.JsonAdapter = field.getAnnotation(com.google.gson.annotations.JsonAdapter.com.google.gson.annotations.JsonAdapter.java.lang.Class);\n            if (annotation != null) {\n                com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory.getTypeAdapter(com.google.gson.internal.ConstructorConstructor, gson, fieldType, annotation);\n                if (adapter != null)\n                    return adapter;\n                \n            } \n            return gson.getAdapter(fieldType);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"field"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[22,23,24,28,29,34,62,82,226,227,228,229,283,385,386,8,9,10,525,11,12,528,636,653,654],"tindex":"fab7b0bd-3e65-11e6-b62a-559f02f81685","method":{"position":"com.google.gson.Gson:491","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        {\n            com.google.gson.internal.bind.JsonTreeWriter com.google.gson.internal.bind.JsonTreeWriter = new com.google.gson.internal.bind.JsonTreeWriter();\n            toJson(src, typeOfSrc, writer);\n            return writer.get();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251058765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:314","type":"CtBinaryOperatorImpl","sourcecode":"replacement != null"},"failures":[666],"tindex":"fab7b0be-3e65-11e6-b62a-afcec64a4a23","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:311","type":"CtMethodImpl","sourcecode":"private void replaceInParent(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node, com.google.gson.internal.LinkedHashTreeMap.Node<K, V> replacement) {\n    if (replacement != null) {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            if (replacement != null) {\n                replacement.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = parent;\n            } \n            if (parent != null) {\n                if ((parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) == node) {\n                    parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = replacement;\n                } else {\n                    assert (parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) == node;\n                    parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = replacement;\n                }\n            } else {\n                int int = (node.int) & ((com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[].int) - 1);\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[][index] = replacement;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251058765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"replacement":"replacement"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:578","type":"CtBinaryOperatorImpl","sourcecode":"root == null"},"failures":[],"tindex":"fab7b0bf-3e65-11e6-b62a-c7a3197700b1","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:626","type":"CtMethodImpl","sourcecode":"void reset(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251058765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            for (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root ; n != null ; n = n.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) {\n                n.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = stackTop;\n                stackTop = n;\n            }\n            com.google.gson.internal.LinkedHashTreeMap.AvlIterator.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = stackTop;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:123","type":"CtBinaryOperatorImpl","sourcecode":"from == null"},"failures":[],"tindex":"fab7b0c0-3e65-11e6-b62a-41f1b7426f90","method":{"position":"com.google.gson.reflect.TypeToken:160","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.GenericArrayType to) {\n    if (from == null) {\n        {\n            java.lang.reflect.Type java.lang.reflect.Type = to.getGenericComponentType();\n            if (toGenericComponentType instanceof java.lang.reflect.ParameterizedType) {\n                java.lang.reflect.Type java.lang.reflect.Type = from;\n                if (from instanceof java.lang.reflect.GenericArrayType) {\n                    t = ((java.lang.reflect.GenericArrayType)(from)).getGenericComponentType();\n                } else if (from instanceof java.lang.Class<?>) {\n                    java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(from));\n                    while (classType.isArray()) {\n                        classType = classType.getComponentType();\n                    }\n                    t = classType;\n                } \n                return com.google.gson.reflect.TypeToken.isAssignableFrom(t, ((java.lang.reflect.ParameterizedType)(toGenericComponentType)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n            } \n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251058765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"fab7d7d1-3e65-11e6-b62a-610f29df195f","method":{"position":"com.google.gson.Gson:719","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.lang.String json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            if (json == null) {\n                return null;\n            } \n            java.io.StringReader java.io.StringReader = new java.io.StringReader(json);\n            T T = ((T)(fromJson(reader, typeOfT)));\n            return target;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251058765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:107","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.WildcardType"},"failures":[],"tindex":"fab7d7d2-3e65-11e6-b62a-133b07418c9e","method":{"position":"com.google.gson.internal.ConstructorConstructor:128","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nprivate <T>com.google.gson.internal.ObjectConstructor<T> newDefaultImplementationConstructor(final java.lang.reflect.Type type, java.lang.Class<? super T> rawType) {\n    if (type instanceof java.lang.reflect.WildcardType) {\n        {\n            if (type instanceof java.lang.reflect.TypeVariable) {\n                {\n                    if (java.util.Collection.java.util.Collection.java.lang.Class.isAssignableFrom(rawType)) {\n                        if (java.util.SortedSet.java.util.SortedSet.java.lang.Class.isAssignableFrom(rawType)) {\n                            return new com.google.gson.internal.ObjectConstructor<T>() {\n                                public T construct() {\n                                    return ((T)(new java.util.TreeSet<java.lang.Object>()));\n                                }\n                            };\n                        } else if (java.util.EnumSet.java.util.EnumSet.java.lang.Class.isAssignableFrom(rawType)) {\n                            return new com.google.gson.internal.ObjectConstructor<T>() {\n                                @java.lang.SuppressWarnings(value = \"rawtypes\")\n                                public T construct() {\n                                    if (type instanceof java.lang.reflect.ParameterizedType) {\n                                        java.lang.reflect.Type java.lang.reflect.Type = ((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0];\n                                        if (elementType instanceof java.lang.Class) {\n                                            return ((T)(java.util.EnumSet.noneOf(((java.lang.Class)(elementType)))));\n                                        } else {\n                                            throw new com.google.gson.JsonIOException((\"Invalid EnumSet type: \" + (type.toString())));\n                                        }\n                                    } else {\n                                        throw new com.google.gson.JsonIOException((\"Invalid EnumSet type: \" + (type.toString())));\n                                    }\n                                }\n                            };\n                        } else if (java.util.Set.java.util.Set.java.lang.Class.isAssignableFrom(rawType)) {\n                            return new com.google.gson.internal.ObjectConstructor<T>() {\n                                public T construct() {\n                                    return ((T)(new java.util.LinkedHashSet<java.lang.Object>()));\n                                }\n                            };\n                        } else if (java.util.Queue.java.util.Queue.java.lang.Class.isAssignableFrom(rawType)) {\n                            return new com.google.gson.internal.ObjectConstructor<T>() {\n                                public T construct() {\n                                    return ((T)(new java.util.LinkedList<java.lang.Object>()));\n                                }\n                            };\n                        } else {\n                            return new com.google.gson.internal.ObjectConstructor<T>() {\n                                public T construct() {\n                                    return ((T)(new java.util.ArrayList<java.lang.Object>()));\n                                }\n                            };\n                        }\n                    } \n                    if (java.util.Map.java.util.Map.java.lang.Class.isAssignableFrom(rawType)) {\n                        if (java.util.SortedMap.java.util.SortedMap.java.lang.Class.isAssignableFrom(rawType)) {\n                            return new com.google.gson.internal.ObjectConstructor<T>() {\n                                public T construct() {\n                                    return ((T)(new java.util.TreeMap<java.lang.Object, java.lang.Object>()));\n                                }\n                            };\n                        } else if ((type instanceof java.lang.reflect.ParameterizedType) && (!(java.lang.String.java.lang.String.java.lang.Class.isAssignableFrom(com.google.gson.reflect.TypeToken.get(((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0]).getRawType())))) {\n                            return new com.google.gson.internal.ObjectConstructor<T>() {\n                                public T construct() {\n                                    return ((T)(new java.util.LinkedHashMap<java.lang.Object, java.lang.Object>()));\n                                }\n                            };\n                        } else {\n                            return new com.google.gson.internal.ObjectConstructor<T>() {\n                                public T construct() {\n                                    return ((T)(new com.google.gson.internal.LinkedTreeMap<java.lang.String, java.lang.Object>()));\n                                }\n                            };\n                        }\n                    } \n                    return null;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251058765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251058765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:462","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[626,627,667],"tindex":"fab7fee3-3e65-11e6-b62a-75e61c2128ad","method":{"position":"com.google.gson.stream.JsonWriter:461","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(double value) throws java.io.IOException {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                throw new java.lang.IllegalArgumentException((\"Numeric values must be finite, but was \" + value));\n            } \n            writeDeferredName();\n            beforeValue(false);\n            java.io.Writer.append(java.lang.Double.toString(value));\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251058765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"fab7fee4-3e65-11e6-b62a-0b001a0ceac1","method":{"position":"com.google.gson.Gson:847","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(com.google.gson.JsonElement json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            if (!(json instanceof com.google.gson.JsonPrimitive)) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251058765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            } else {\n                {\n                    java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n                    return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251058765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"fab7fee5-3e65-11e6-b62a-cfa6baa908e4","method":{"position":"com.google.gson.Gson:510","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251058765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src == null) {\n                return toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull);\n            } \n            return toJson(src, src.getClass());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1413","type":"CtVariableReadImpl","sourcecode":"throwOnEof"},"failures":[],"tindex":"fab7fee6-3e65-11e6-b62a-0d036e7090d4","method":{"position":"com.google.gson.stream.JsonReader:1331","type":"CtMethodImpl","sourcecode":"private int nextNonWhitespace(boolean throwOnEof) throws java.io.IOException {\n    if (throwOnEof) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251058765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            char[] char[] = com.google.gson.stream.JsonReader.this.char[];\n            int int = int;\n            int int = int;\n            while (true) {\n                if (p == l) {\n                    int = p;\n                    if (!(fillBuffer(1))) {\n                        break;\n                    } \n                    p = int;\n                    l = int;\n                } \n                int int = buffer[(p++)];\n                if (c == '\\n') {\n                    (int)++;\n                    int = p;\n                    continue;\n                } else if (((c == ' ') || (c == '\\r')) || (c == '\\t')) {\n                    continue;\n                } \n                if (c == '/') {\n                    int = p;\n                    if (p == l) {\n                        (int)--;\n                        boolean boolean = fillBuffer(2);\n                        (int)++;\n                        if (!charsLoaded) {\n                            return c;\n                        } \n                    } \n                    checkLenient();\n                    char char = buffer[int];\n                    switch (peek) {\n                        case '*' :\n                            (int)++;\n                            if (!(skipTo(\"*/\"))) {\n                                throw syntaxError(\"Unterminated comment\");\n                            } \n                            p = (int) + 2;\n                            l = int;\n                            continue;\n                        case '/' :\n                            (int)++;\n                            skipToEndOfLine();\n                            p = int;\n                            l = int;\n                            continue;\n                        default :\n                            return c;\n                    }\n                } else if (c == '#') {\n                    int = p;\n                    checkLenient();\n                    skipToEndOfLine();\n                    p = int;\n                    l = int;\n                } else {\n                    int = p;\n                    return c;\n                }\n            }\n            if (throwOnEof) {\n                throw new java.io.EOFException(((((\"End of input\" + \" at line \") + (getLineNumber())) + \" column \") + (getColumnNumber())));\n            } else {\n                return -1;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"throwOnEof":"throwOnEof"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:111","type":"CtInvocationImpl","sourcecode":"primitive.isString()"},"failures":[],"tindex":"fab825f7-3e65-11e6-b62a-69e79a58e4bd","method":{"position":"com.google.gson.JsonPrimitive:333","type":"CtMethodImpl","sourcecode":"private static boolean isIntegral(com.google.gson.JsonPrimitive primitive) {\n    if (primitive.isString()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251058765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((primitive.java.lang.Object) instanceof java.lang.Number) {\n                java.lang.Number java.lang.Number = ((java.lang.Number)(primitive.java.lang.Object));\n                return ((((number instanceof java.math.BigInteger) || (number instanceof java.lang.Long)) || (number instanceof java.lang.Integer)) || (number instanceof java.lang.Short)) || (number instanceof java.lang.Byte);\n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"primitive"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"fab825f8-3e65-11e6-b62a-213439fadc72","method":{"position":"com.google.gson.internal.bind.DateTypeAdapter:69","type":"CtMethodImpl","sourcecode":"private synchronized java.util.Date deserializeToDate(java.lang.String json) {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251058765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            try {\n                return java.text.DateFormat.parse(json);\n            } catch (java.text.ParseException ignored) {\n            }\n            try {\n                return java.text.DateFormat.parse(json);\n            } catch (java.text.ParseException ignored) {\n            }\n            try {\n                return java.text.DateFormat.parse(json);\n            } catch (java.text.ParseException e) {\n                throw new com.google.gson.JsonSyntaxException(json , e);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:313","type":"CtBinaryOperatorImpl","sourcecode":"(value) == null"},"failures":[],"tindex":"fab825f9-3e65-11e6-b62a-81e2dda4c2cd","method":{"position":"com.google.gson.JsonObject:121","type":"CtMethodImpl","sourcecode":"private com.google.gson.JsonElement createJsonElement(java.lang.Object value) {\n    if (value == null) {\n        {\n            return value == null ? com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull : new com.google.gson.JsonPrimitive(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251058765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":49,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
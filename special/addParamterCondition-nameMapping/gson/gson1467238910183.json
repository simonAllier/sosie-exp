{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":377,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":173,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":152,"com.google.gson.internal.LinkedHashTreeMapTest.testIterationOrder":474,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":1,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":352,"com.google.gson.MixedStreamTest.testWriteLenient":394,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":444,"com.google.gson.internal.bind.JsonTreeWriterTest.testPrematureClose":568,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":414,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":107,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":372,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":187,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":197,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":413,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":36,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":303,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":121,"com.google.gson.JsonObjectTest.testAddingNullPropertyValue":498,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":342,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":454,"com.google.gson.functional.ObjectTest.testSingletonLists":61,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":37,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":103,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":174,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":469,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":341,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":79,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":575,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":357,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":421,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":319,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":537,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":387,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":38,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":123,"com.google.gson.internal.LinkedTreeMapTest.testContainsNullKeyIsAlwaysFalse":583,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":441,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":310,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":371,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":49,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":522,"com.google.gson.functional.EnumTest.testEnumCaseMapping":302,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":172,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":315,"com.google.gson.functional.JsonTreeTest.testToJsonTree":440,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":128,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":547,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":406,"com.google.gson.JsonObjectTest.testEqualsNonEmptyObject":481,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":87,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":409,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":536,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":0,"com.google.gson.internal.LinkedTreeMapTest.testLargeSetOfRandomKeys":578,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":194,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":55,"com.google.gson.internal.bind.JsonElementReaderTest.testNestedObjects":489,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":419,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":275,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":502,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":68,"com.google.gson.JsonArrayTest.testEqualsOnEmptyArray":397,"com.google.gson.internal.LinkedTreeMapTest.testContainsNonComparableKeyReturnsFalse":579,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":47,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":248,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":424,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":496,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":119,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":116,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":479,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":170,"com.google.gson.JsonParserTest.testParseString":488,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":356,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":267,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":261,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":396,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":74,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":233,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":102,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":445,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":518,"com.google.gson.functional.StreamingTypeAdaptersTest.testFromJsonTree":483,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":162,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":243,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":570,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":335,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":150,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":268,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":73,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":229,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":224,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":317,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":417,"com.google.gson.JsonPrimitiveTest.testEqualsAcrossTypes":563,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":5,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":253,"com.google.gson.internal.LinkedHashTreeMapTest.testEmptyStringValues":473,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":524,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":347,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":6,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":29,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":334,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":336,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":508,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":526,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":106,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":367,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":97,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":331,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":247,"com.google.gson.JsonArrayTest.testEqualsNonEmptyArray":398,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":411,"com.google.gson.functional.CollectionTest.testSetDeserialization":448,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":122,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":65,"com.google.gson.functional.EnumTest.testEnumSet":296,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":30,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":13,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithNestedWildcards":544,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":134,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":69,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":28,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":309,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":333,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":44,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":432,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":271,"com.google.gson.internal.LinkedHashTreeMapTest.testContainsNullKeyIsAlwaysFalse":476,"com.google.gson.functional.MapTest.testHashMapDeserialization":512,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":531,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":225,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":378,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":155,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":284,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":241,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":509,"com.google.gson.functional.MapTest.testSortedMap":523,"com.google.gson.functional.MapTest.testMapSerialization":139,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":286,"com.google.gson.internal.bind.JsonElementReaderTest.testObject":491,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":365,"com.google.gson.JsonPrimitiveTest.testByteEqualsShort":562,"com.google.gson.JsonPrimitiveTest.testByteEqualsBigInteger":554,"com.google.gson.functional.MapTest.testSerializeMaps":133,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":206,"com.google.gson.functional.MapTest.testComplexKeysSerialization":148,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":485,"com.google.gson.JsonPrimitiveTest.testLongEqualsBigInteger":556,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":569,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":240,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":57,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":456,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":295,"com.google.gson.internal.LinkedTreeMapTest.testRemoveRootDoesNotDoubleUnlink":324,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":362,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":465,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":126,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":325,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":2,"com.google.gson.functional.MapTest.testStringKeyDeserialization":525,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithBasicWildcards":546,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":15,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":279,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":151,"com.google.gson.functional.PrettyPrintingTest.testMap":124,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":212,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":190,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":84,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":287,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":353,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":318,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":178,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":94,"com.google.gson.functional.MapTest.testMapSerializationEmpty":149,"com.google.gson.functional.CollectionTest.testQueueSerialization":191,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":499,"com.google.gson.functional.MapTest.testMapOfMapSerialization":138,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":259,"com.google.gson.JavaSerializationTest.testMapIsSerializable":542,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":533,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":185,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":264,"com.google.gson.internal.LinkedTreeMapTest.testPutNonComparableKeyFails":582,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":21,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":175,"com.google.gson.functional.FieldNamingTest.testIdentity":207,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":337,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":40,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":426,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":4,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":60,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":374,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":439,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":311,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":176,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":245,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":262,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":442,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":314,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":95,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":184,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":466,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":511,"com.google.gson.functional.MapTest.testMapSubclassSerialization":132,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":278,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":165,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":408,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":214,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":304,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":458,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":446,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":431,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":27,"com.google.gson.functional.EnumTest.testEnumSubclass":299,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":265,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":320,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":420,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":249,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":244,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":14,"com.google.gson.JsonPrimitiveTest.testShortEqualsInteger":560,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":359,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":154,"com.google.gson.JsonPrimitiveTest.testByteEqualsLong":550,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":443,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":400,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":313,"com.google.gson.internal.LinkedTreeMapTest.testEqualsAndHashCode":584,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":507,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":260,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":328,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":111,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":412,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":358,"com.google.gson.MixedStreamTest.testWriteNulls":467,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":235,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":527,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":231,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":56,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":407,"com.google.gson.CommentsTest.testParseComments":540,"com.google.gson.JsonObjectTest.testReadPropertyWithEmptyStringName":495,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":18,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":62,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":455,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":220,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":451,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":364,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":141,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":177,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":348,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":118,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":34,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":113,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":277,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":208,"com.google.gson.ObjectTypeAdapterTest.testSerializeObject":468,"com.google.gson.JsonParserTest.testParseMixedArray":567,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":252,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":322,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithTypeParameters":545,"com.google.gson.JsonPrimitiveTest.testDoubleEqualsBigDecimal":552,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":217,"com.google.gson.internal.bind.JsonTreeWriterTest.testWriteAfterClose":572,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":256,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":183,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":100,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":272,"com.google.gson.functional.MapTest.testMapDeserialization":517,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":96,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":129,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":131,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":382,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":565,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":9,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":135,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":291,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":289,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":363,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeMap":574,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":117,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":538,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":434,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":67,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":75,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":157,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":215,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":401,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":88,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":343,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":153,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":163,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":125,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":140,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":539,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":115,"com.google.gson.functional.PrimitiveTest.testShortSerialization":276,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":340,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":293,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":51,"com.google.gson.internal.LinkedTreeMapTest.testIterationOrder":581,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":269,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":436,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":203,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":298,"com.google.gson.internal.LinkedTreeMapTest.testEmptyStringValues":580,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":189,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":164,"com.google.gson.internal.LinkedTreeMapTest.testPutOverrides":576,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":514,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":201,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":280,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":323,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":573,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":355,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":386,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":462,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":492,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":283,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":3,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":76,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":338,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":405,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":80,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":305,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":494,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":453,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":329,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":16,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":429,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":416,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":301,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":159,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":202,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":195,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":435,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":210,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":339,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":288,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":101,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":292,"com.google.gson.internal.LinkedHashTreeMapTest.testClear":471,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":91,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":242,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":294,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":402,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":529,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":263,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":281,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":221,"com.google.gson.JsonPrimitiveTest.testEquals":561,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":290,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":297,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":381,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":366,"com.google.gson.functional.MapTest.testGeneralMapField":145,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":415,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":228,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":211,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":237,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":246,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":108,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":143,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":81,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":169,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":251,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":270,"com.google.gson.MixedStreamTest.testReadMixedStreamed":461,"com.google.gson.ObjectTypeAdapterTest.testDeserializeNullValue":504,"com.google.gson.JsonObjectTest.testDeepCopy":500,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":257,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":519,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":198,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":312,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":370,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":346,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":50,"com.google.gson.JavaSerializationTest.testNumberIsSerializable":541,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":332,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":99,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":520,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":186,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":513,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":19,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":282,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":53,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":307,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":493,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":98,"com.google.gson.internal.LinkedHashTreeMapTest.testEqualsAndHashCode":477,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":528,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":41,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":532,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":385,"com.google.gson.JsonPrimitiveTest.testFloatEqualsDouble":555,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":23,"com.google.gson.functional.ObjectTest.testNestedDeserialization":430,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":39,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":72,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":379,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":399,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":48,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":219,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":326,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":521,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":26,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":274,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":158,"com.google.gson.JavaSerializationTest.testListIsSerializable":543,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":376,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":447,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":200,"com.google.gson.functional.ObjectTest.testNullSerialization":464,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":161,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":515,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":144,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":250,"com.google.gson.functional.MapTest.testInterfaceTypeMap":142,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":213,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":8,"com.google.gson.JsonObjectTest.testAddingNullOrEmptyPropertyName":503,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":35,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":300,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":216,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":361,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":82,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":46,"com.google.gson.JsonPrimitiveTest.testIntegerEqualsLong":558,"com.google.gson.MixedStreamTest.testWriteClosed":460,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":193,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":380,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":63,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":404,"com.google.gson.internal.LinkedHashTreeMapTest.testPutNonComparableKeyFails":475,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":31,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":7,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":450,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":77,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":218,"com.google.gson.JsonPrimitiveTest.testShortEqualsLong":553,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":114,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":10,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":64,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":192,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":389,"com.google.gson.JsonPrimitiveTest.testShortEqualsBigInteger":549,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":308,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":360,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":196,"com.google.gson.internal.bind.JsonElementReaderTest.testSkipValue":490,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":104,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":349,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":181,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":255,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":438,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":58,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":226,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":449,"com.google.gson.internal.LinkedHashTreeMapTest.testPutOverrides":470,"com.google.gson.functional.CollectionTest.testQueueDeserialization":535,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":258,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":285,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":112,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":390,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":136,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":425,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":93,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":171,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":428,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":188,"com.google.gson.functional.MapTest.testRawMapSerialization":147,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":457,"com.google.gson.JsonParserTest.testParseReader":487,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":534,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":510,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":70,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":156,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":368,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":384,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":486,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":78,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":230,"com.google.gson.functional.PrimitiveTest.testByteSerialization":273,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":564,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":350,"com.google.gson.ObjectTypeAdapterTest.testSerialize":463,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":167,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromRawTypes":482,"com.google.gson.JsonPrimitiveTest.testEqualsIntegerAndBigInteger":551,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":373,"com.google.gson.JsonPrimitiveTest.testFloatEqualsBigDecimal":548,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":236,"com.google.gson.JsonPrimitiveTest.testByteEqualsInteger":557,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":204,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":32,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":392,"com.google.gson.functional.MapTest.testMapWithQuotes":137,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":85,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":12,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":369,"com.google.gson.JsonObjectTest.testEqualsOnEmptyObject":480,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":22,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":43,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":83,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":120,"com.google.gson.stream.JsonWriterTest.testLenientWriterPermitsMultipleTopLevelValues":566,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":383,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":24,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":427,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":130,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":90,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":266,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":239,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":418,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":109,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":86,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":92,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":306,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":375,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":354,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":25,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":110,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":227,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":160,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":42,"com.google.gson.JsonPrimitiveTest.testIntegerEqualsBigInteger":559,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":391,"com.google.gson.internal.LinkedHashTreeMapTest.testContainsNonComparableKeyReturnsFalse":472,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":166,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":344,"com.google.gson.internal.LinkedHashTreeMapTest.testRemoveRootDoesNotDoubleUnlink":478,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":20,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":422,"com.google.gson.functional.ObjectTest.testNestedSerialization":71,"com.google.gson.JsonObjectTest.testAddingStringProperties":501,"com.google.gson.internal.LinkedTreeMapTest.testClear":577,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":222,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":168,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":254,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":52,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":146,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":209,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":11,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":321,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":395,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":66,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":506,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":403,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":345,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":437,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":316,"com.google.gson.GsonBuilderTest.testCreatingMoreThanOnce":393,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":423,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":433,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":388,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":179,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":234,"com.google.gson.functional.CollectionTest.testSetSerialization":199,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":452,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":17,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":127,"com.google.gson.functional.StringTest.testStringValueSerialization":180,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":59,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":182,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":327,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":530,"com.google.gson.MixedStreamTest.testWriteInvalidState":459,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":351,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":238,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":223,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":89,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":205,"com.google.gson.ObjectTypeAdapterTest.testDeserialize":505,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":54,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":497,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":410,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":45,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":571,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":33,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":105,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":484,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":516,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":232,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":330},"transformations":[{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:726","type":"CtBinaryOperatorImpl","sourcecode":"value == 0"},"failures":[],"tindex":"dfefbf2c-3e47-11e6-ad2b-81fc3cf134e7","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:170","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(long value) throws java.io.IOException {\n    if (value == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238032871/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[0],"tindex":"dff00d4d-3e47-11e6-ad2b-7fc45e1b2c91","method":{"position":"com.google.gson.Gson:468","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src) {\n    if (src != null) {\n        {\n            if (src == null) {\n                return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            return toJsonTree(src, src.getClass());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238032871/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,0,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321],"tindex":"dff0345e-3e47-11e6-ad2b-85098aa1b243","method":{"position":"com.google.gson.Gson:532","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        {\n            java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n            toJson(src, typeOfSrc, writer);\n            return writer.toString();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238032871/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:378","type":"CtVariableReadImpl","sourcecode":"insert"},"failures":[322],"tindex":"dff05b6f-3e47-11e6-ad2b-43e102ae8c2a","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:338","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (insert) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238032871/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            for (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) {\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                int int = left != null ? left.int : 0;\n                int int = right != null ? right.int : 0;\n                int int = leftHeight - rightHeight;\n                if (delta == (-2)) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    int int = rightRight != null ? rightRight.int : 0;\n                    int int = rightLeft != null ? rightLeft.int : 0;\n                    int int = rightLeftHeight - rightRightHeight;\n                    if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                        rotateLeft(node);\n                    } else {\n                        assert rightDelta == 1;\n                        rotateRight(right);\n                        rotateLeft(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 2) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    int int = leftRight != null ? leftRight.int : 0;\n                    int int = leftLeft != null ? leftLeft.int : 0;\n                    int int = leftLeftHeight - leftRightHeight;\n                    if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                        rotateRight(node);\n                    } else {\n                        assert leftDelta == (-1);\n                        rotateLeft(left);\n                        rotateRight(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 0) {\n                    node.int = leftHeight + 1;\n                    if (insert) {\n                        break;\n                    } \n                } else {\n                    assert (delta == (-1)) || (delta == 1);\n                    node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                    if (!insert) {\n                        break;\n                    } \n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"insert"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:278","type":"CtBinaryOperatorImpl","sourcecode":"node != null"},"failures":[323,324,325],"tindex":"dff08280-3e47-11e6-ad2b-cb39803a10a6","method":{"position":"com.google.gson.internal.LinkedTreeMap:217","type":"CtMethodImpl","sourcecode":"void removeInternal(com.google.gson.internal.LinkedTreeMap.Node<K, V> node, boolean unlink) {\n    if (node != null) {\n        {\n            if (node != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238032871/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (unlink) {\n                        node.com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                        node.com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    } \n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    if ((left != null) && (right != null)) {\n                        com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = (left.int) > (right.int) ? left.last() : right.first();\n                        removeInternal(adjacent, false);\n                        int int = 0;\n                        left = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                        if (left != null) {\n                            leftHeight = left.int;\n                            adjacent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = left;\n                            left.com.google.gson.internal.LinkedTreeMap.Node<K, V> = adjacent;\n                            node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                        } \n                        int int = 0;\n                        right = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                        if (right != null) {\n                            rightHeight = right.int;\n                            adjacent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = right;\n                            right.com.google.gson.internal.LinkedTreeMap.Node<K, V> = adjacent;\n                            node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                        } \n                        adjacent.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                        replaceInParent(node, adjacent);\n                        return ;\n                    } else if (left != null) {\n                        replaceInParent(node, left);\n                        node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                    } else if (right != null) {\n                        replaceInParent(node, right);\n                        node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                    } else {\n                        replaceInParent(node, null);\n                    }\n                    rebalance(originalParent, false);\n                    (int)--;\n                    (int)++;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238032871/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"node"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:554","type":"CtBinaryOperatorImpl","sourcecode":"(datePattern != null) && (!(\"\".equals(datePattern.trim())))"},"failures":[1,326,2,327,3,328,4,5,11,329,330,331,332,333,334,12,335,13,336,337,338,14,15,16,339,17,18,19,340,20,341,21,22,23,25,342,343,344,36,345,346,37,347,38,39,348,349,44,45,46,47,48,49,50,51,52,53,54,56,350,351,68,352,353,354,90,98,100,101,104,355,112,113,356,357,123,124,125,126,127,128,129,130,131,358,133,136,142,145,146,152,155,157,158,159,160,161,359,360,361,163,362,363,167,201,203,204,205,206,207,364,365,208,366,209,367,368,211,212,213,223,224,225,234,241,369,370,242,243,245,371,255,264,267,268,271,274,279,281,372,373,374,375,376,284,285,377,286,378,379,287,380,381,288,382,289,383,0,290,291,292,293,294,384,385,295,386,298,304,305,387,388,306,307,389,390,308,391,392,309,310,311,312,313,314,393,394,395,315,316,318,319,320],"tindex":"dff0a991-3e47-11e6-ad2b-2701b3bce485","method":{"position":"com.google.gson.GsonBuilder:551","type":"CtMethodImpl","sourcecode":"private void addTypeAdaptersForDate(java.lang.String datePattern, int dateStyle, int timeStyle, java.util.List<com.google.gson.TypeAdapterFactory> factories) {\n    if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n        {\n            com.google.gson.DefaultDateTypeAdapter com.google.gson.DefaultDateTypeAdapter;\n            if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n                dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(datePattern);\n            } else if ((dateStyle != (java.text.DateFormat.java.text.DateFormat.int)) && (timeStyle != (java.text.DateFormat.java.text.DateFormat.int))) {\n                dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(dateStyle , timeStyle);\n            } else {\n                return ;\n            }\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.util.Date.java.util.Date.java.lang.Class), dateTypeAdapter));\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Timestamp.java.sql.Timestamp.java.lang.Class), dateTypeAdapter));\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Date.java.sql.Date.java.lang.Class), dateTypeAdapter));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238032871/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"datePattern":"datePattern"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:109","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonPrimitive"},"failures":[396,397,398],"tindex":"dff0d0a2-3e47-11e6-ad2b-37833b312e59","method":{"position":"com.google.gson.JsonArray:329","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonPrimitive) {\n        {\n            return (o == (com.google.gson.JsonArray.this)) || ((o instanceof com.google.gson.JsonArray) && (((com.google.gson.JsonArray)(o)).java.util.List<com.google.gson.JsonElement>.equals(java.util.List<com.google.gson.JsonElement>)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238032871/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:137","type":"CtBinaryOperatorImpl","sourcecode":"(!serialize) && (!deserialize)"},"failures":[1,2,327,328,4,5,399,400,401,6,7,8,402,403,404,405,9,10,406,11,329,331,332,333,335,338,14,16,17,24,407,26,27,28,29,30,342,31,32,33,343,34,408,409,345,346,37,347,38,40,41,42,410,43,53,54,55,56,57,411,58,59,60,61,412,413,62,414,415,63,416,417,64,418,65,419,66,420,421,69,422,70,71,423,73,424,425,74,426,75,76,427,77,428,429,430,352,431,79,432,433,434,435,436,437,99,109,114,438,117,439,440,118,120,121,122,125,126,130,136,441,142,144,145,148,152,153,442,443,154,155,156,157,158,159,160,161,359,360,162,361,163,362,363,164,165,166,444,445,446,323,447,167,170,171,181,182,183,184,185,187,189,195,448,197,199,203,204,205,206,207,365,208,366,209,368,214,217,218,219,220,449,450,221,222,223,224,237,451,238,241,370,242,243,244,246,452,247,248,453,372,373,375,376,284,377,286,379,287,380,381,288,382,454,290,291,455,292,294,295,386,300,456,305,387,388,306,307,389,390,308,309,313,314,457,458,459,460,461,462,317,463],"tindex":"dff0d0a3-3e47-11e6-ad2b-73f557c0d67e","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:86","type":"CtMethodImpl","sourcecode":"private com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField createBoundField(final com.google.gson.Gson context, final java.lang.reflect.Field field, final java.lang.String name, final com.google.gson.reflect.TypeToken<?> fieldType, boolean serialize, boolean deserialize) {\n    if ((!deserialize) && (!serialize)) {\n        {\n            final boolean boolean = com.google.gson.internal.Primitives.isPrimitive(fieldType.getRawType());\n            return new com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField(name, serialize, deserialize) {\n                final com.google.gson.TypeAdapter<?> typeAdapter = getFieldAdapter(context, field, fieldType);\n\n                @java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n                @java.lang.Override\n                void write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                    java.lang.Object java.lang.Object = field.get(value);\n                    com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n                    t.write(writer, fieldValue);\n                }\n\n                @java.lang.Override\n                void read(com.google.gson.stream.JsonReader reader, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                    java.lang.Object java.lang.Object = com.google.gson.TypeAdapter<?>.read(reader);\n                    if ((fieldValue != null) || (!isPrimitive)) {\n                        field.set(value, fieldValue);\n                    } \n                }\n\n                public boolean writeField(java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                    if (!(boolean))\n                        return false;\n                    \n                    java.lang.Object java.lang.Object = field.get(value);\n                    return fieldValue != value;\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238032871/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serialize":"deserialize","deserialize":"serialize"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:132","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.GenericArrayType"},"failures":[1,2,327,328,4,5,399,400,401,6,7,8,402,403,404,405,9,10,406,11,329,331,332,333,335,338,14,16,17,24,407,26,27,28,29,30,342,31,32,33,343,34,344,408,409,345,346,37,347,38,40,41,42,410,43,53,54,55,56,57,411,58,59,60,61,412,413,62,414,415,63,416,417,64,418,65,419,66,420,421,69,422,70,71,423,73,424,425,74,426,75,76,427,77,428,429,430,352,431,79,432,433,434,435,436,437,99,109,114,438,117,439,440,118,120,121,122,125,126,130,136,441,142,144,145,148,152,153,442,443,154,155,156,157,158,159,160,161,359,360,162,361,163,362,363,164,165,166,444,445,446,323,447,167,170,171,181,182,183,184,185,187,189,195,448,197,199,203,204,205,206,207,365,208,366,209,368,214,217,218,219,220,449,450,221,222,223,224,237,451,238,241,370,242,243,244,246,452,247,248,453,372,373,375,376,284,377,286,379,287,380,381,288,382,454,290,291,455,292,294,295,386,300,456,305,387,388,306,307,389,390,308,309,313,314,457,458,459,460,461,462,317,463],"tindex":"dff0f7b4-3e47-11e6-ad2b-898f2a8c48c4","method":{"position":"com.google.gson.internal.Primitives:69","type":"CtMethodImpl","sourcecode":"public static boolean isPrimitive(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.ParameterizedType) {\n        {\n            if (type instanceof java.lang.reflect.GenericArrayType) {\n                {\n                    return com.google.gson.internal.Primitives.com.google.gson.internal.Primitives.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.containsKey(type);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238032871/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238032871/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[38],"tindex":"dff11ec5-3e47-11e6-ad2b-9762d6d76f7a","method":{"position":"com.google.gson.Gson:136","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238032871/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return toJsonTree(src, typeOfSrc);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:123","type":"CtBinaryOperatorImpl","sourcecode":"from == null"},"failures":[],"tindex":"dff11ec6-3e47-11e6-ad2b-7df454d3c6f8","method":{"position":"com.google.gson.reflect.TypeToken:160","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.GenericArrayType to) {\n    if (from == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238032871/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.reflect.Type java.lang.reflect.Type = to.getGenericComponentType();\n            if (toGenericComponentType instanceof java.lang.reflect.ParameterizedType) {\n                java.lang.reflect.Type java.lang.reflect.Type = from;\n                if (from instanceof java.lang.reflect.GenericArrayType) {\n                    t = ((java.lang.reflect.GenericArrayType)(from)).getGenericComponentType();\n                } else if (from instanceof java.lang.Class<?>) {\n                    java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(from));\n                    while (classType.isArray()) {\n                        classType = classType.getComponentType();\n                    }\n                    t = classType;\n                } \n                return com.google.gson.reflect.TypeToken.isAssignableFrom(t, ((java.lang.reflect.ParameterizedType)(toGenericComponentType)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n            } \n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.JsonObject:54","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[464,465,354,466,374,384,467],"tindex":"dff11ec7-3e47-11e6-ad2b-89b163812e46","method":{"position":"com.google.gson.internal.bind.TypeAdapters:680","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, com.google.gson.JsonElement value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238032871/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if ((value == null) || (value.isJsonNull())) {\n                out.nullValue();\n            } else if (value.isJsonPrimitive()) {\n                com.google.gson.JsonPrimitive com.google.gson.JsonPrimitive = value.getAsJsonPrimitive();\n                if (primitive.isNumber()) {\n                    out.value(primitive.getAsNumber());\n                } else if (primitive.isBoolean()) {\n                    out.value(primitive.getAsBoolean());\n                } else {\n                    out.value(primitive.getAsString());\n                }\n            } else if (value.isJsonArray()) {\n                out.beginArray();\n                for (com.google.gson.JsonElement com.google.gson.JsonElement : value.getAsJsonArray()) {\n                    write(out, e);\n                }\n                out.endArray();\n            } else if (value.isJsonObject()) {\n                out.beginObject();\n                for (java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> : value.getAsJsonObject().entrySet()) {\n                    out.name(e.getKey());\n                    write(out, e.getValue());\n                }\n                out.endObject();\n            } else {\n                throw new java.lang.IllegalArgumentException((\"Couldn't write \" + (value.getClass())));\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[0],"tindex":"dff145d8-3e47-11e6-ad2b-859f047fc40c","method":{"position":"com.google.gson.Gson:133","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238032871/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return toJsonTree(src);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.internal.bind.ObjectTypeAdapter:95","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"dff145d9-3e47-11e6-ad2b-d14f6fafbc7d","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:108","type":"CtMethodImpl","sourcecode":"public boolean writeField(java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238032871/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    } else {\n        {\n            if (!(boolean))\n                return false;\n            \n            java.lang.Object java.lang.Object = field.get(value);\n            return fieldValue != value;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.ObjectTypeAdapter:95","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[59,66,118,120,121,122,195,197,199,237,468,463,469],"tindex":"dff145da-3e47-11e6-ad2b-29dfda0c4b61","method":{"position":"com.google.gson.internal.bind.ObjectTypeAdapter:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Object value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            com.google.gson.TypeAdapter<java.lang.Object> com.google.gson.TypeAdapter<java.lang.Object> = ((com.google.gson.TypeAdapter<java.lang.Object>)(com.google.gson.Gson.getAdapter(value.getClass())));\n            if (typeAdapter instanceof com.google.gson.internal.bind.ObjectTypeAdapter) {\n                out.beginObject();\n                out.endObject();\n                return ;\n            } \n            typeAdapter.write(out, value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238032871/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:167","type":"CtUnaryOperatorImpl","sourcecode":"!create"},"failures":[322,470,471,472,473,474,475,476,477,478],"tindex":"dff145db-3e47-11e6-ad2b-5bc632529bd8","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:131","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedHashTreeMap.Node<K, V> find(K key, boolean create) {\n    if (!create) {\n        {\n            java.util.Comparator<? super K> java.util.Comparator<? super K> = com.google.gson.internal.LinkedHashTreeMap.this.java.util.Comparator<? super K>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[] com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[] = com.google.gson.internal.LinkedHashTreeMap.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[];\n            int int = com.google.gson.internal.LinkedHashTreeMap.secondaryHash(key.hashCode());\n            int int = hash & ((table.int) - 1);\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = table[index];\n            int int = 0;\n            if (nearest != null) {\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                java.lang.Comparable<java.lang.Object> java.lang.Comparable<java.lang.Object> = comparator == (com.google.gson.internal.LinkedHashTreeMap.com.google.gson.internal.LinkedHashTreeMap.java.util.Comparator<java.lang.Comparable>) ? ((java.lang.Comparable<java.lang.Object>)(key)) : null;\n                while (true) {\n                    comparison = comparableKey != null ? comparableKey.compareTo(nearest.K) : comparator.compare(key, nearest.K);\n                    if (comparison == 0) {\n                        return nearest;\n                    } \n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = comparison < 0 ? nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> : nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    if (child == null) {\n                        break;\n                    } \n                    nearest = child;\n                }\n            } \n            if (!create) {\n                return null;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            if (nearest == null) {\n                if ((comparator == (com.google.gson.internal.LinkedHashTreeMap.com.google.gson.internal.LinkedHashTreeMap.java.util.Comparator<java.lang.Comparable>)) && (!(key instanceof java.lang.Comparable))) {\n                    throw new java.lang.ClassCastException(((key.getClass().getName()) + \" is not Comparable\"));\n                } \n                created = new com.google.gson.internal.LinkedHashTreeMap.Node<K, V>(nearest , key , hash , header , header.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>);\n                table[index] = created;\n            } else {\n                created = new com.google.gson.internal.LinkedHashTreeMap.Node<K, V>(nearest , key , hash , header , header.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>);\n                if (comparison < 0) {\n                    nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = created;\n                } else {\n                    nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = created;\n                }\n                rebalance(nearest, true);\n            }\n            if (((int)++) > (int)) {\n                doubleCapacity();\n            } \n            (int)++;\n            return created;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238032871/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"create":"create"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[1,4,24,28,32,33,436,140,146],"tindex":"dff16cec-3e47-11e6-ad2b-176b6f4ee46c","method":{"position":"com.google.gson.internal.bind.TypeAdapters:245","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238032871/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238032871/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    out.value(value);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:92","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof java.util.Iterator"},"failures":[479,398,480,481],"tindex":"dff16ced-3e47-11e6-ad2b-e58aafa10dfe","method":{"position":"com.google.gson.JsonObject:186","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof java.util.Iterator) {\n        {\n            return (o == (com.google.gson.JsonObject.this)) || ((o instanceof com.google.gson.JsonObject) && (((com.google.gson.JsonObject)(o)).com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.equals(com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238032871/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:199","type":"CtBinaryOperatorImpl","sourcecode":"from instanceof java.lang.reflect.ParameterizedType"},"failures":[482],"tindex":"dff193fe-3e47-11e6-ad2b-d5061ac22f36","method":{"position":"com.google.gson.reflect.TypeToken:122","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic boolean isAssignableFrom(java.lang.reflect.Type from) {\n    if (from instanceof java.lang.reflect.ParameterizedType) {\n        {\n            if (from == null) {\n                return false;\n            } \n            if (java.lang.reflect.Type.equals(from)) {\n                return true;\n            } \n            if ((java.lang.reflect.Type) instanceof java.lang.Class<?>) {\n                return java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from));\n            } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.ParameterizedType) {\n                return com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n            } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.GenericArrayType) {\n                return (java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from))) && (com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.GenericArrayType)(java.lang.reflect.Type))));\n            } else {\n                throw com.google.gson.reflect.TypeToken.buildUnexpectedTypeError(java.lang.reflect.Type, java.lang.Class.java.lang.Class.java.lang.Class, java.lang.reflect.ParameterizedType.java.lang.reflect.ParameterizedType.java.lang.Class, java.lang.reflect.GenericArrayType.java.lang.reflect.GenericArrayType.java.lang.Class);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238032871/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:578","type":"CtBinaryOperatorImpl","sourcecode":"root == null"},"failures":[],"tindex":"dff193ff-3e47-11e6-ad2b-51d5226bd900","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:401","type":"CtMethodImpl","sourcecode":"private void rotateLeft(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root == null) {\n        {\n            if (root == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238032871/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivotLeft;\n                    if (pivotLeft != null) {\n                        pivotLeft.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n                    } \n                    replaceInParent(root, pivot);\n                    pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n                    root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot;\n                    root.int = (java.lang.Math.max((left != null ? left.int : 0), (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n                    pivot.int = (java.lang.Math.max(root.int, (pivotRight != null ? pivotRight.int : 0))) + 1;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238032871/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:314","type":"CtBinaryOperatorImpl","sourcecode":"replacement != null"},"failures":[478],"tindex":"dff1bb10-3e47-11e6-ad2b-b19b66ab1bd7","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:311","type":"CtMethodImpl","sourcecode":"private void replaceInParent(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node, com.google.gson.internal.LinkedHashTreeMap.Node<K, V> replacement) {\n    if (replacement != null) {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            if (replacement != null) {\n                replacement.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = parent;\n            } \n            if (parent != null) {\n                if ((parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) == node) {\n                    parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = replacement;\n                } else {\n                    assert (parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) == node;\n                    parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = replacement;\n                }\n            } else {\n                int int = (node.int) & ((com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[].int) - 1);\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[][index] = replacement;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238032871/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"replacement":"replacement"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:105","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonObject"},"failures":[],"tindex":"dff1bb11-3e47-11e6-ad2b-678c6a80b915","method":{"position":"com.google.gson.internal.LinkedTreeMap:605","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238032871/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return containsKey(o);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[399,400,401,402,403,406,336,14,15,16,20,25,344,483,38,349,43,350,484,79,479,89,438,117,439,440,485,152,444,445,446,323,447,364,365,208,366,209,367,368,449,450,241,242,243,245,372,373,375,376,377,381,383,293,486,487,488,317,489,490,491,492,493,494,495,496,497,498,481,325,499,500,501,502,503],"tindex":"dff1bb12-3e47-11e6-ad2b-cb87e4f738a1","method":{"position":"com.google.gson.JsonObject:53","type":"CtMethodImpl","sourcecode":"public void add(java.lang.String property, com.google.gson.JsonElement value) {\n    if (property == null) {\n        {\n            if (value == null) {\n                value = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.put(property, value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238032871/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[263],"tindex":"dff1e223-3e47-11e6-ad2b-b99be8f8d614","method":{"position":"com.google.gson.internal.bind.TypeAdapters:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238032871/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"dff1e224-3e47-11e6-ad2b-6b51711234ef","method":{"position":"com.google.gson.internal.bind.TypeAdapters:245","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238032871/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238032871/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    out.value(value);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[],"tindex":"dff1e225-3e47-11e6-ad2b-77599d179220","method":{"position":"com.google.gson.Gson:510","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src) {\n    if (src != null) {\n        {\n            if (src == null) {\n                return toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull);\n            } \n            return toJson(src, src.getClass());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238032871/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:462","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[],"tindex":"dff1e226-3e47-11e6-ad2b-7db093fdf022","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:162","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(double value) throws java.io.IOException {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        {\n            if ((!(isLenient())) && ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value)))) {\n                throw new java.lang.IllegalArgumentException((\"JSON forbids NaN and infinities: \" + value));\n            } \n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238032871/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"dff1e227-3e47-11e6-ad2b-05355344011d","method":{"position":"com.google.gson.Gson:719","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.lang.String json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            if (json == null) {\n                return null;\n            } \n            java.io.StringReader java.io.StringReader = new java.io.StringReader(json);\n            T T = ((T)(fromJson(reader, typeOfT)));\n            return target;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238032871/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl","sourcecode":"in == null"},"failures":[504,505],"tindex":"dff20938-3e47-11e6-ad2b-9d1aae73b981","method":{"position":"com.google.gson.TypeAdapter:254","type":"CtMethodImpl","sourcecode":"public final T fromJson(java.io.Reader in) throws java.io.IOException {\n    if (in == null) {\n        {\n            com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(in);\n            return read(reader);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238032871/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"in"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonObject:54","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"dff20939-3e47-11e6-ad2b-65bea073b877","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:75","type":"CtMethodImpl","sourcecode":"private void put(com.google.gson.JsonElement value) {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238032871/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((java.lang.String) != null) {\n                if ((!(value.isJsonNull())) || (getSerializeNulls())) {\n                    com.google.gson.JsonObject com.google.gson.JsonObject = ((com.google.gson.JsonObject)(peek()));\n                    object.add(java.lang.String, value);\n                } \n                java.lang.String = null;\n            } else if (java.util.List<com.google.gson.JsonElement>.isEmpty()) {\n                com.google.gson.JsonElement = value;\n            } else {\n                com.google.gson.JsonElement com.google.gson.JsonElement = peek();\n                if (element instanceof com.google.gson.JsonArray) {\n                    ((com.google.gson.JsonArray)(element)).add(value);\n                } else {\n                    throw new java.lang.IllegalStateException();\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:133","type":"CtBinaryOperatorImpl","sourcecode":"(type) instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"dff2093a-3e47-11e6-ad2b-57430b65abc4","method":{"position":"com.google.gson.internal.Primitives:69","type":"CtMethodImpl","sourcecode":"public static boolean isPrimitive(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.ParameterizedType) {\n        {\n            if (type instanceof java.lang.reflect.GenericArrayType) {\n                {\n                    return com.google.gson.internal.Primitives.com.google.gson.internal.Primitives.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.containsKey(type);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238032871/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238032871/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"dff2093b-3e47-11e6-ad2b-cb192cea97d4","method":{"position":"com.google.gson.Gson:552","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238032871/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            if (src != null) {\n                toJson(src, src.getClass(), writer);\n            } else {\n                toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull, writer);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:578","type":"CtBinaryOperatorImpl","sourcecode":"root == null"},"failures":[],"tindex":"dff2304c-3e47-11e6-ad2b-df34f7380f22","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:401","type":"CtMethodImpl","sourcecode":"private void rotateLeft(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root == null) {\n        {\n            if (root == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238032871/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivotLeft;\n                    if (pivotLeft != null) {\n                        pivotLeft.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n                    } \n                    replaceInParent(root, pivot);\n                    pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n                    root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot;\n                    root.int = (java.lang.Math.max((left != null ? left.int : 0), (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n                    pivot.int = (java.lang.Math.max(root.int, (pivotRight != null ? pivotRight.int : 0))) + 1;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238032871/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:133","type":"CtBinaryOperatorImpl","sourcecode":"(type) instanceof java.lang.reflect.ParameterizedType"},"failures":[400,7,404,11,329,330,334,13,337,340,23,24,407,25,26,27,28,30,342,31,32,33,343,34,344,408,409,506,53,61,507,73,76,428,508,509,86,510,118,120,122,125,130,511,131,512,513,514,515,134,516,135,517,136,518,519,520,521,139,522,441,140,523,142,143,144,145,146,524,148,149,525,150,485,526,151,152,164,165,166,527,528,181,182,183,184,185,187,188,189,529,530,531,191,192,194,532,533,196,448,198,534,200,201,535,217,218,220,449,450,235,536,241,369,370,242,243,244,452,248,537,288,290,291,295,296,297,298,299,538,301,486,539,540,394,395,541,542,543,544,545,546],"tindex":"dff2304d-3e47-11e6-ad2b-f1e66c1c7d05","method":{"position":"com.google.gson.reflect.TypeToken:295","type":"CtMethodImpl","sourcecode":"public static com.google.gson.reflect.TypeToken<?> get(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238032871/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new com.google.gson.reflect.TypeToken<java.lang.Object>(type);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.FieldNamingPolicy:155","type":"CtUnaryOperatorImpl","sourcecode":"!(java.lang.Character.isUpperCase(firstCharacter))"},"failures":[],"tindex":"dff2304e-3e47-11e6-ad2b-39d88f05263c","method":{"position":"com.google.gson.FieldNamingPolicy:163","type":"CtMethodImpl","sourcecode":"private static java.lang.String modifyString(char firstCharacter, java.lang.String srcString, int indexOfSubstring) {\n    if (!(java.lang.Character.isUpperCase(firstCharacter))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238032871/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return indexOfSubstring < (srcString.length()) ? firstCharacter + (srcString.substring(indexOfSubstring)) : java.lang.String.valueOf(firstCharacter);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"firstCharacter":"firstCharacter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:250","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[264,267,268,274,279,281,394],"tindex":"dff2575f-3e47-11e6-ad2b-950da5d16fc2","method":{"position":"com.google.gson.Gson:273","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> floatAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238032871/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return ((float)(in.nextDouble()));\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    float float = value.floatValue();\n                    checkValidFloatingPoint(floatValue);\n                    out.value(value);\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:111","type":"CtInvocationImpl","sourcecode":"primitive.isString()"},"failures":[479,396,547,438,440,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563],"tindex":"dff25760-3e47-11e6-ad2b-837f48408122","method":{"position":"com.google.gson.JsonPrimitive:333","type":"CtMethodImpl","sourcecode":"private static boolean isIntegral(com.google.gson.JsonPrimitive primitive) {\n    if (primitive.isString()) {\n        {\n            if (primitive.isString()) {\n                {\n                    if ((primitive.java.lang.Object) instanceof java.lang.Number) {\n                        java.lang.Number java.lang.Number = ((java.lang.Number)(primitive.java.lang.Object));\n                        return ((((number instanceof java.math.BigInteger) || (number instanceof java.lang.Long)) || (number instanceof java.lang.Integer)) || (number instanceof java.lang.Short)) || (number instanceof java.lang.Byte);\n                    } \n                    return false;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238032871/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238032871/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"primitive"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:578","type":"CtBinaryOperatorImpl","sourcecode":"root == null"},"failures":[322],"tindex":"dff25761-3e47-11e6-ad2b-d12b49fb72c1","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:429","type":"CtMethodImpl","sourcecode":"private void rotateRight(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root == null) {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivotRight;\n            if (pivotRight != null) {\n                pivotRight.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            } \n            replaceInParent(root, pivot);\n            pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot;\n            root.int = (java.lang.Math.max((right != null ? right.int : 0), (pivotRight != null ? pivotRight.int : 0))) + 1;\n            pivot.int = (java.lang.Math.max(root.int, (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238032871/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"root"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:602","type":"CtUnaryOperatorImpl","sourcecode":"!(lenient)"},"failures":[1,2,3,4,5,399,400,401,6,7,8,402,403,9,10,406,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,409,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,350,484,60,61,62,63,64,351,65,464,66,67,68,69,70,71,72,73,74,75,76,77,78,79,465,354,432,80,81,82,83,84,85,86,87,88,89,436,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,466,116,438,117,439,440,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,449,450,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,372,373,374,375,376,284,285,377,286,287,288,289,0,290,291,292,293,294,384,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,486,539,564,457,458,467,459,394,395,460,551,565,315,316,566,317,567,318,319,320,568,569,570,571,572,492,493,573,494,496,502,321],"tindex":"dff27e72-3e47-11e6-ad2b-4f40b554ccc4","method":{"position":"com.google.gson.stream.JsonWriter:234","type":"CtMethodImpl","sourcecode":"public final void setLenient(boolean lenient) {\n    if (!lenient) {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = lenient;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238032871/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"lenient"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:111","type":"CtInvocationImpl","sourcecode":"primitive.isString()"},"failures":[],"tindex":"dff27e73-3e47-11e6-ad2b-791b3ecd55fc","method":{"position":"com.google.gson.JsonPrimitive:333","type":"CtMethodImpl","sourcecode":"private static boolean isIntegral(com.google.gson.JsonPrimitive primitive) {\n    if (primitive.isString()) {\n        {\n            if (primitive.isString()) {\n                {\n                    if ((primitive.java.lang.Object) instanceof java.lang.Number) {\n                        java.lang.Number java.lang.Number = ((java.lang.Number)(primitive.java.lang.Object));\n                        return ((((number instanceof java.math.BigInteger) || (number instanceof java.lang.Long)) || (number instanceof java.lang.Integer)) || (number instanceof java.lang.Short)) || (number instanceof java.lang.Byte);\n                    } \n                    return false;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238032871/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238032871/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"primitive"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"dff2a584-3e47-11e6-ad2b-e5a3135b0cb8","method":{"position":"com.google.gson.Gson:576","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238032871/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            try {\n                com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                toJson(src, typeOfSrc, jsonWriter);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:167","type":"CtUnaryOperatorImpl","sourcecode":"!create"},"failures":[399,400,401,402,403,406,336,337,14,15,16,20,25,344,483,574,38,349,43,350,484,79,479,89,438,117,439,440,513,514,515,516,517,520,522,524,525,485,152,165,166,444,445,446,323,447,527,575,364,365,208,366,209,367,368,449,450,241,242,243,245,372,373,375,376,377,381,383,293,486,542,487,488,317,504,505,576,577,578,579,580,581,582,583,584,324,489,490,491,492,493,494,495,496,497,498,481,325,499,500,501,502,503],"tindex":"dff2a585-3e47-11e6-ad2b-6f9ce9badba2","method":{"position":"com.google.gson.internal.LinkedTreeMap:121","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedTreeMap.Node<K, V> find(K key, boolean create) {\n    if (!create) {\n        {\n            java.util.Comparator<? super K> java.util.Comparator<? super K> = com.google.gson.internal.LinkedTreeMap.this.java.util.Comparator<? super K>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            int int = 0;\n            if (nearest != null) {\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                java.lang.Comparable<java.lang.Object> java.lang.Comparable<java.lang.Object> = comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>) ? ((java.lang.Comparable<java.lang.Object>)(key)) : null;\n                while (true) {\n                    comparison = comparableKey != null ? comparableKey.compareTo(nearest.K) : comparator.compare(key, nearest.K);\n                    if (comparison == 0) {\n                        return nearest;\n                    } \n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = comparison < 0 ? nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> : nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    if (child == null) {\n                        break;\n                    } \n                    nearest = child;\n                }\n            } \n            if (!create) {\n                return null;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.this.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            if (nearest == null) {\n                if ((comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>)) && (!(key instanceof java.lang.Comparable))) {\n                    throw new java.lang.ClassCastException(((key.getClass().getName()) + \" is not Comparable\"));\n                } \n                created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n            } else {\n                created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                if (comparison < 0) {\n                    nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                } else {\n                    nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                }\n                rebalance(nearest, true);\n            }\n            (int)++;\n            (int)++;\n            return created;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238032871/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"create":"create"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[350,484],"tindex":"dff2cc96-3e47-11e6-ad2b-93bdbbaf7a67","method":{"position":"com.google.gson.JsonObject:78","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.String value) {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238032871/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            add(property, createJsonElement(value));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"dff2cc97-3e47-11e6-ad2b-bf507754c095","method":{"position":"com.google.gson.Gson:847","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(com.google.gson.JsonElement json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238032871/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[399,400,401,402,403,406,25,38,438,117,439,440,152,449,450,245,372,373,374,375,376,377,486,539,564],"tindex":"dff2cc98-3e47-11e6-ad2b-5739f3e15eb0","method":{"position":"com.google.gson.Gson:491","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        {\n            com.google.gson.internal.bind.JsonTreeWriter com.google.gson.internal.bind.JsonTreeWriter = new com.google.gson.internal.bind.JsonTreeWriter();\n            toJson(src, typeOfSrc, writer);\n            return writer.get();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238032871/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:240","type":"CtInvocationImpl","sourcecode":"from.getRawType().equals(to.getRawType())"},"failures":[544,545,546],"tindex":"dff2cc99-3e47-11e6-ad2b-45ae41ae74c9","method":{"position":"com.google.gson.reflect.TypeToken:238","type":"CtMethodImpl","sourcecode":"private static boolean typeEquals(java.lang.reflect.ParameterizedType from, java.lang.reflect.ParameterizedType to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeVarMap) {\n    if (to.getRawType().equals(from.getRawType())) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238032871/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (from.getRawType().equals(to.getRawType())) {\n                java.lang.reflect.Type[] java.lang.reflect.Type[] = from.getActualTypeArguments();\n                java.lang.reflect.Type[] java.lang.reflect.Type[] = to.getActualTypeArguments();\n                for (int int = 0 ; i < (fromArgs.int) ; i++) {\n                    if (!(com.google.gson.reflect.TypeToken.matches(fromArgs[i], toArgs[i], typeVarMap))) {\n                        return false;\n                    } \n                }\n                return true;\n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"to","to":"from"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"dff2f3aa-3e47-11e6-ad2b-d333b8664565","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n@java.lang.Override\nvoid write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238032871/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    } else {\n        {\n            java.lang.Object java.lang.Object = field.get(value);\n            com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n            t.write(writer, fieldValue);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:164","type":"CtBinaryOperatorImpl","sourcecode":"from instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"dff2f3ab-3e47-11e6-ad2b-ab859c97745c","method":{"position":"com.google.gson.reflect.TypeToken:185","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.ParameterizedType to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeVarMap) {\n    if (from instanceof java.lang.reflect.GenericArrayType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238032871/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (from == null) {\n                return false;\n            } \n            if (to.equals(from)) {\n                return true;\n            } \n            java.lang.Class<?> java.lang.Class<?> = com.google.gson.internal.$Gson$Types.getRawType(from);\n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = null;\n            if (from instanceof java.lang.reflect.ParameterizedType) {\n                ptype = ((java.lang.reflect.ParameterizedType)(from));\n            } \n            if (ptype != null) {\n                java.lang.reflect.Type[] java.lang.reflect.Type[] = ptype.getActualTypeArguments();\n                java.lang.reflect.TypeVariable<?>[] java.lang.reflect.TypeVariable<?>[] = clazz.getTypeParameters();\n                for (int int = 0 ; i < (tArgs.int) ; i++) {\n                    java.lang.reflect.Type java.lang.reflect.Type = tArgs[i];\n                    java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = tParams[i];\n                    while (arg instanceof java.lang.reflect.TypeVariable<?>) {\n                        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(arg));\n                        arg = typeVarMap.get(v.getName());\n                    }\n                    typeVarMap.put(var.getName(), arg);\n                }\n                if (com.google.gson.reflect.TypeToken.typeEquals(ptype, to, typeVarMap)) {\n                    return true;\n                } \n            } \n            for (java.lang.reflect.Type java.lang.reflect.Type : clazz.getGenericInterfaces()) {\n                if (com.google.gson.reflect.TypeToken.isAssignableFrom(itype, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap))) {\n                    return true;\n                } \n            }\n            java.lang.reflect.Type java.lang.reflect.Type = clazz.getGenericSuperclass();\n            return com.google.gson.reflect.TypeToken.isAssignableFrom(sType, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[436,292],"tindex":"dff2f3ac-3e47-11e6-ad2b-6f6a6e4e74fb","method":{"position":"com.google.gson.internal.bind.TypeAdapters:267","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238032871/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:131","type":"CtBinaryOperatorImpl","sourcecode":"(type) instanceof java.lang.Class<?>"},"failures":[],"tindex":"dff2f3ad-3e47-11e6-ad2b-09f9a7378b35","method":{"position":"com.google.gson.internal.$Gson$Types:431","type":"CtMethodImpl","sourcecode":"private static void checkNotPrimitive(java.lang.reflect.Type type) {\n    com.google.gson.internal.$Gson$Preconditions.checkArgument(((!(type instanceof java.lang.Class<?>)) || (!(((java.lang.Class<?>)(type)).isPrimitive()))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:278","type":"CtBinaryOperatorImpl","sourcecode":"node != null"},"failures":[],"tindex":"dff31abe-3e47-11e6-ad2b-5bc2e11bed3a","method":{"position":"com.google.gson.internal.LinkedTreeMap:217","type":"CtMethodImpl","sourcecode":"void removeInternal(com.google.gson.internal.LinkedTreeMap.Node<K, V> node, boolean unlink) {\n    if (node != null) {\n        {\n            if (node != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238032871/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (unlink) {\n                        node.com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                        node.com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    } \n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    if ((left != null) && (right != null)) {\n                        com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = (left.int) > (right.int) ? left.last() : right.first();\n                        removeInternal(adjacent, false);\n                        int int = 0;\n                        left = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                        if (left != null) {\n                            leftHeight = left.int;\n                            adjacent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = left;\n                            left.com.google.gson.internal.LinkedTreeMap.Node<K, V> = adjacent;\n                            node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                        } \n                        int int = 0;\n                        right = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                        if (right != null) {\n                            rightHeight = right.int;\n                            adjacent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = right;\n                            right.com.google.gson.internal.LinkedTreeMap.Node<K, V> = adjacent;\n                            node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                        } \n                        adjacent.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                        replaceInParent(node, adjacent);\n                        return ;\n                    } else if (left != null) {\n                        replaceInParent(node, left);\n                        node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                    } else if (right != null) {\n                        replaceInParent(node, right);\n                        node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                    } else {\n                        replaceInParent(node, null);\n                    }\n                    rebalance(originalParent, false);\n                    (int)--;\n                    (int)++;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238032871/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"node"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:716","type":"CtBinaryOperatorImpl","sourcecode":"(c < '0') || (c > '9')"},"failures":[],"tindex":"dff31abf-3e47-11e6-ad2b-6df13ff63e22","method":{"position":"com.google.gson.stream.JsonReader:755","type":"CtMethodImpl","sourcecode":"private boolean isLiteral(char c) throws java.io.IOException {\n    if ((c < '0') || (c > '9')) {\n        {\n            switch (c) {\n                case '/' :\n                case '\\\\' :\n                case ';' :\n                case '#' :\n                case '=' :\n                    checkLenient();\n                case '{' :\n                case '}' :\n                case '[' :\n                case ']' :\n                case ':' :\n                case ',' :\n                case ' ' :\n                case '\\t' :\n                case '\\f' :\n                case '\\r' :\n                case '\\n' :\n                    return false;\n                default :\n                    return true;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238032871/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"c"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:497","type":"CtBinaryOperatorImpl","sourcecode":"(typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)"},"failures":[],"tindex":"dff341d0-3e47-11e6-ad2b-af2a2115bff3","method":{"position":"com.google.gson.TreeTypeAdapter:103","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newTypeHierarchyFactory(java.lang.Class<?> hierarchyType, java.lang.Object typeAdapter) {\n    if ((typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)) {\n        {\n            return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , null , false , hierarchyType);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238032871/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"dff341d1-3e47-11e6-ad2b-43be2f1f63ba","method":{"position":"com.google.gson.TypeAdapter:268","type":"CtMethodImpl","sourcecode":"public final T fromJson(java.lang.String json) throws java.io.IOException {\n    if (json == null) {\n        {\n            return fromJson(new java.io.StringReader(json));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238032871/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":54,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":100,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":511,"com.google.gson.functional.StringTest.testStringValueDeserialization":509,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":645,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":22,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":461,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":600,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":426,"com.google.gson.stream.JsonWriterTest.testRepeatedName":642,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":121,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":252,"com.google.gson.MixedStreamTest.testWriteLenient":42,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":103,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":224,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":609,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":83,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":260,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":222,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":264,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":470,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":327,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":337,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":300,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":434,"com.google.gson.JsonObjectTest.testAddingNullPropertyValue":61,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":208,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":287,"com.google.gson.functional.ObjectTest.testSingletonLists":220,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":153,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":601,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":419,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":512,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":12,"com.google.gson.stream.JsonWriterTest.testStrings":647,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":631,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":102,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":550,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":617,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":235,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":317,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":473,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":141,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":279,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":525,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":75,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":404,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":462,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":179,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":321,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":412,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":366,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":388,"com.google.gson.functional.EnumTest.testEnumCaseMapping":336,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":13,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":510,"com.google.gson.functional.JsonTreeTest.testToJsonTree":73,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":411,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":407,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":620,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":81,"com.google.gson.JsonObjectTest.testEqualsNonEmptyObject":62,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":3,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":580,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":139,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":352,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":421,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":594,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":564,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":26,"com.google.gson.functional.ObjectTest.testNullDeserialization":506,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":267,"com.google.gson.internal.bind.JsonElementReaderTest.testNestedObjects":52,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":522,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":232,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":67,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":481,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":427,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":503,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":364,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":305,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":242,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":59,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":623,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":113,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":621,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":202,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":485,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":484,"com.google.gson.JsonParserTest.testParseString":50,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":616,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":140,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":467,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":40,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":491,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":579,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":143,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":349,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":445,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":599,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":104,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":381,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":459,"com.google.gson.functional.StreamingTypeAdaptersTest.testFromJsonTree":90,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":196,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":591,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":112,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":306,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":395,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":468,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":561,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":460,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":241,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":343,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":51,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":156,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":228,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":37,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":173,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":392,"com.google.gson.metrics.PerformanceTest.testDummy":325,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":154,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":23,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":206,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":568,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":116,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":396,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":531,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":96,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":607,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":291,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":593,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":304,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":270,"com.google.gson.functional.CollectionTest.testSetDeserialization":263,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":9,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":231,"com.google.gson.functional.EnumTest.testEnumSet":329,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":528,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":451,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":207,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":625,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":377,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":583,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":236,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":133,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":148,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":464,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":293,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":475,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":259,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":361,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":14,"com.google.gson.functional.MapTest.testHashMapDeserialization":372,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":424,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":539,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":605,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":328,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":508,"com.google.gson.MixedStreamTest.testReadNulls":637,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":188,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":253,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":110,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":535,"com.google.gson.functional.MapTest.testSortedMap":390,"com.google.gson.functional.MapTest.testMapSerialization":387,"com.google.gson.internal.bind.JsonElementReaderTest.testObject":54,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":254,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":92,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":457,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":355,"com.google.gson.functional.MapTest.testSerializeMaps":126,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":276,"com.google.gson.functional.MapTest.testComplexKeysSerialization":181,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":527,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":74,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":358,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":161,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":269,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":32,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":199,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":45,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":334,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":63,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":214,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":170,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":505,"com.google.gson.functional.MapTest.testStringKeyDeserialization":394,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":356,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":118,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":487,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":397,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":430,"com.google.gson.functional.PrettyPrintingTest.testMap":405,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":425,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":555,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":536,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":256,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":533,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":575,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":316,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":357,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":651,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":515,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":519,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":64,"com.google.gson.functional.MapTest.testMapSerializationEmpty":393,"com.google.gson.functional.CollectionTest.testQueueSerialization":540,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":589,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":452,"com.google.gson.functional.MapTest.testMapOfMapSerialization":386,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":39,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":596,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":544,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":165,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":454,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":632,"com.google.gson.functional.FieldNamingTest.testIdentity":277,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":513,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":626,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":176,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":244,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":43,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":72,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":122,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":219,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":414,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":322,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":115,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":514,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":167,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":449,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":611,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":150,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":584,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":164,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":590,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":619,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":369,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":41,"com.google.gson.functional.MapTest.testMapSubclassSerialization":374,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":158,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":211,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":530,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":272,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":310,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":443,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":562,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":105,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":498,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":574,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":258,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":132,"com.google.gson.functional.EnumTest.testEnumSubclass":332,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":463,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":234,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":318,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":413,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":301,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":469,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":117,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":194,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":415,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":169,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":447,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":168,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":77,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":149,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":351,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":453,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":500,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":172,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":446,"com.google.gson.stream.JsonWriterTest.testObjectsInArrays":643,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":613,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":221,"com.google.gson.MixedStreamTest.testWriteNulls":47,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":371,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":350,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":559,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":345,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":204,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":268,"com.google.gson.CommentsTest.testParseComments":319,"com.google.gson.JsonObjectTest.testReadPropertyWithEmptyStringName":58,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":223,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":288,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":628,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":137,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":175,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":466,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":91,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":389,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":517,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":399,"com.google.gson.MixedStreamTest.testReadInvalidState":635,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":7,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":2,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":483,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":615,"com.google.gson.ObjectTypeAdapterTest.testSerializeObject":10,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":93,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":423,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":147,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":359,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":4,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":38,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":163,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":478,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":597,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":348,"com.google.gson.functional.MapTest.testMapDeserialization":380,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":592,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":408,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":370,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":286,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":640,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":187,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":379,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":30,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":28,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":200,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":71,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":333,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":295,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":245,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":502,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":190,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":557,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":78,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":581,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":210,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":166,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":198,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":127,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":213,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":639,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":618,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":410,"com.google.gson.functional.PrimitiveTest.testShortSerialization":482,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":630,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":109,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":472,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":368,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":444,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":471,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":33,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":422,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":273,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":331,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":261,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":157,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":375,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":438,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":489,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":551,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":106,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":289,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":608,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":55,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":314,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":496,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":490,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":649,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":339,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":186,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":246,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":307,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":57,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":278,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":570,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":218,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":212,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":119,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":448,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":250,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":227,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":335,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":192,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":529,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":262,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":296,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":553,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":627,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":27,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":145,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":598,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":429,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":111,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":586,"com.google.gson.stream.JsonWriterTest.testNullStringValue":15,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":146,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":603,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":79,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":537,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":416,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":477,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":450,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":493,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":182,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":29,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":330,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":101,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":94,"com.google.gson.functional.MapTest.testGeneralMapField":180,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":225,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":123,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":495,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":174,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":302,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":554,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":610,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":128,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":401,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":420,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":571,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":474,"com.google.gson.ObjectTypeAdapterTest.testDeserializeNullValue":0,"com.google.gson.MixedStreamTest.testReadMixedStreamed":313,"com.google.gson.JsonObjectTest.testDeepCopy":65,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":382,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":439,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":582,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":290,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":323,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":547,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":152,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":455,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":367,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":292,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":298,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":383,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":403,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":373,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":494,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":629,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":217,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":282,"com.google.gson.stream.JsonWriterTest.testArraysInObjects":641,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":440,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":56,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":595,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":560,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":177,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":543,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":569,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":565,"com.google.gson.functional.ObjectTest.testNestedDeserialization":251,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":634,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":398,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":504,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":255,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":76,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":365,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":492,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":216,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":338,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":384,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":516,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":205,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":480,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":191,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":86,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":107,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":549,"com.google.gson.functional.ObjectTest.testNullSerialization":44,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":130,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":402,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":376,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":21,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":36,"com.google.gson.functional.MapTest.testInterfaceTypeMap":20,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":353,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":556,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":24,"com.google.gson.JsonObjectTest.testAddingNullOrEmptyPropertyName":68,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":417,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":138,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":160,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":197,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":558,"com.google.gson.MixedStreamTest.testReadClosed":636,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":572,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":363,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":432,"com.google.gson.MixedStreamTest.testWriteClosed":312,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":257,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":542,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":185,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":226,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":622,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":209,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":184,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":89,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":5,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":248,"com.google.gson.stream.JsonWriterTest.testLongs":652,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":299,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":25,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":229,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":541,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":283,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":458,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":285,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":195,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":545,"com.google.gson.internal.bind.JsonElementReaderTest.testSkipValue":53,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":604,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":69,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":162,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":497,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":437,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":70,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":577,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":271,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":340,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":6,"com.google.gson.functional.CollectionTest.testQueueDeserialization":552,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":442,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":456,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":521,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":507,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":284,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":614,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":19,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":243,"com.google.gson.stream.JsonWriterTest.testDeepNestingObjects":646,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":588,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":203,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":249,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":144,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":309,"com.google.gson.functional.MapTest.testRawMapSerialization":391,"com.google.gson.JsonParserTest.testParseReader":49,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":548,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":602,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":650,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":189,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":238,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":97,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":31,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":48,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":344,"com.google.gson.functional.PrimitiveTest.testByteSerialization":479,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":532,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":653,"com.google.gson.ObjectTypeAdapterTest.testSerialize":11,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":98,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":201,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":428,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":84,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":354,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":274,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":134,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":320,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":518,"com.google.gson.functional.MapTest.testMapWithQuotes":385,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":435,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":576,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":520,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":624,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":566,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":633,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":82,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":486,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":573,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":8,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":108,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":131,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":247,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":215,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":465,"com.google.gson.functional.ObjectTest.testEmptyStringDeserialization":501,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":585,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":18,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":230,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":34,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":578,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":85,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":281,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":587,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":476,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":46,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":546,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":347,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":87,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":341,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":612,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":193,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":125,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":563,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":159,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":534,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":88,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":418,"com.google.gson.internal.LinkedHashTreeMapTest.testRemoveRootDoesNotDoubleUnlink":35,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":120,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":654,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":237,"com.google.gson.JsonObjectTest.testAddingStringProperties":66,"com.google.gson.functional.ObjectTest.testNestedSerialization":239,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":183,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":400,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":431,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":524,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":409,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":129,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":95,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":136,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":324,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":638,"com.google.gson.stream.JsonWriterTest.testUnicodeLineBreaksEscaped":648,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":233,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":360,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":488,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":80,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":151,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":297,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":315,"com.google.gson.GsonBuilderTest.testCreatingMoreThanOnce":326,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":433,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":240,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":294,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":280,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":655,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":523,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":17,"com.google.gson.functional.CollectionTest.testSetSerialization":265,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":303,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":308,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":406,"com.google.gson.functional.StringTest.testStringValueSerialization":526,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":142,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":16,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":171,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":538,"com.google.gson.MixedStreamTest.testWriteInvalidState":311,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":342,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":499,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":436,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":124,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":441,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":155,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":114,"com.google.gson.ObjectTypeAdapterTest.testDeserialize":1,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":275,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":266,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":60,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":178,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":362,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":135,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":606,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":99,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":378,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":644,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":346,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":567},"transformations":[{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl"},"failures":[0,1],"tindex":"6c358fba-3f28-11e6-adbc-6de6e05e15b7","method":{"position":"com.google.gson.TypeAdapter:268","type":"CtMethodImpl","sourcecode":"public final T fromJson(java.lang.String json) throws java.io.IOException {\n    if (json == null) {\n        {\n            return fromJson(new java.io.StringReader(json));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333980107/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:98","type":"CtBinaryOperatorImpl"},"failures":[2,3,4,5,6,7,8,9],"tindex":"6c3604eb-3f28-11e6-adbc-6b1317d3435f","method":{"position":"com.google.gson.internal.ConstructorConstructor:200","type":"CtMethodImpl","sourcecode":"private <T>com.google.gson.internal.ObjectConstructor<T> newUnsafeAllocator(final java.lang.reflect.Type type, final java.lang.Class<? super T> rawType) {\n    if (type instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333980107/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new com.google.gson.internal.ObjectConstructor<T>() {\n                private final com.google.gson.internal.UnsafeAllocator unsafeAllocator = com.google.gson.internal.UnsafeAllocator.create();\n\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                public T construct() {\n                    try {\n                        java.lang.Object java.lang.Object = com.google.gson.internal.UnsafeAllocator.newInstance(rawType);\n                        return ((T)(newInstance));\n                    } catch (java.lang.Exception e) {\n                        throw new java.lang.RuntimeException((((\"Unable to invoke no-args constructor for \" + type) + \". \") + \"Register an InstanceCreator with Gson for this type may fix this problem.\") , e);\n                    }\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"6c3604ec-3f28-11e6-adbc-9901b1451021","method":{"position":"com.google.gson.Gson:576","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src != null) {\n        {\n            try {\n                com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                toJson(src, typeOfSrc, jsonWriter);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333980107/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:497","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"6c362bfd-3f28-11e6-adbc-bde776589fd3","method":{"position":"com.google.gson.TreeTypeAdapter:92","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newFactoryWithMatchRawType(com.google.gson.reflect.TypeToken<?> exactType, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n        {\n            if ((typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)) {\n                {\n                    boolean boolean = (exactType.getType()) == (exactType.getRawType());\n                    return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , exactType , matchRawType , null);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333980107/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333980107/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:198","type":"CtBinaryOperatorImpl"},"failures":[10,11,12],"tindex":"6c362bfe-3f28-11e6-adbc-b91aa1161d1c","method":{"position":"com.google.gson.TypeAdapter:140","type":"CtMethodImpl","sourcecode":"public final void toJson(java.io.Writer out, T value) throws java.io.IOException {\n    if (out == null) {\n        {\n            com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = new com.google.gson.stream.JsonWriter(out);\n            write(writer, value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333980107/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"out"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"6c36530f-3f28-11e6-adbc-03aa9828cf03","method":{"position":"com.google.gson.JsonObject:111","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Character value) {\n    if (property == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333980107/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            add(property, createJsonElement(value));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[13,14],"tindex":"6c365310-3f28-11e6-adbc-a33ae387932c","method":{"position":"com.google.gson.Gson:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333980107/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    out.value(value.toString());\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333980107/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:501","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"6c367a21-3f28-11e6-adbc-31ce8a681689","method":{"position":"com.google.gson.TreeTypeAdapter:92","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newFactoryWithMatchRawType(com.google.gson.reflect.TypeToken<?> exactType, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n        {\n            if ((typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)) {\n                {\n                    boolean boolean = (exactType.getType()) == (exactType.getRawType());\n                    return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , exactType , matchRawType , null);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333980107/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333980107/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl"},"failures":[15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34],"tindex":"6c367a22-3f28-11e6-adbc-63bd8b4b7b5e","method":{"position":"com.google.gson.stream.JsonWriter:413","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333980107/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333980107/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (value == null) {\n                        return nullValue();\n                    } \n                    writeDeferredName();\n                    beforeValue(false);\n                    string(value);\n                    return com.google.gson.stream.JsonWriter.this;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:92","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"6c36a133-3f28-11e6-adbc-19530a1a7d59","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:808","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonNull) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333980107/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof java.util.Iterator) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333980107/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (!(o instanceof java.util.Map.Entry)) {\n                        return false;\n                    } \n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n                    if (node == null) {\n                        return false;\n                    } \n                    removeInternal(node, true);\n                    return true;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:246","type":"CtVariableReadImpl"},"failures":[35],"tindex":"6c36a134-3f28-11e6-adbc-6f45eaf22eb3","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:245","type":"CtMethodImpl","sourcecode":"void removeInternal(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node, boolean unlink) {\n    if (unlink) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333980107/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (unlink) {\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            if ((left != null) && (right != null)) {\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = (left.int) > (right.int) ? left.last() : right.first();\n                removeInternal(adjacent, false);\n                int int = 0;\n                left = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                if (left != null) {\n                    leftHeight = left.int;\n                    adjacent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left;\n                    left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                } \n                int int = 0;\n                right = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                if (right != null) {\n                    rightHeight = right.int;\n                    adjacent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                } \n                adjacent.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                replaceInParent(node, adjacent);\n                return ;\n            } else if (left != null) {\n                replaceInParent(node, left);\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } else if (right != null) {\n                replaceInParent(node, right);\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } else {\n                replaceInParent(node, null);\n            }\n            rebalance(originalParent, false);\n            (int)--;\n            (int)++;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"unlink":"unlink"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"6c36ef55-3f28-11e6-adbc-776907d12dc8","method":{"position":"com.google.gson.internal.bind.DateTypeAdapter:69","type":"CtMethodImpl","sourcecode":"private synchronized java.util.Date deserializeToDate(java.lang.String json) {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333980107/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            try {\n                return java.text.DateFormat.parse(json);\n            } catch (java.text.ParseException ignored) {\n            }\n            try {\n                return java.text.DateFormat.parse(json);\n            } catch (java.text.ParseException ignored) {\n            }\n            try {\n                return java.text.DateFormat.parse(json);\n            } catch (java.text.ParseException e) {\n                throw new com.google.gson.JsonSyntaxException(json , e);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:298","type":"CtBinaryOperatorImpl"},"failures":[36,37,38,39,40,41,42],"tindex":"6c371666-3f28-11e6-adbc-610319dffb89","method":{"position":"com.google.gson.Gson:297","type":"CtMethodImpl","sourcecode":"private void checkValidFloatingPoint(double value) {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333980107/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                        throw new java.lang.IllegalArgumentException(((value + \" is not a valid double value as per JSON specification. To override this\") + \" behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.\"));\n                    } \n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333980107/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.JsonArray:58","type":"CtBinaryOperatorImpl"},"failures":[43,44,45,46,31,47],"tindex":"6c371667-3f28-11e6-adbc-913aca9f679f","method":{"position":"com.google.gson.internal.Streams:67","type":"CtMethodImpl","sourcecode":"public static void write(com.google.gson.JsonElement element, com.google.gson.stream.JsonWriter writer) throws java.io.IOException {\n    if (element == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333980107/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<com.google.gson.JsonElement>.write(writer, element);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"6c371668-3f28-11e6-adbc-c76f58239fbd","method":{"position":"com.google.gson.DefaultDateTypeAdapter:94","type":"CtMethodImpl","sourcecode":"private java.util.Date deserializeToDate(com.google.gson.JsonElement json) {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333980107/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            synchronized(java.text.DateFormat) {\n                try {\n                    return java.text.DateFormat.parse(json.getAsString());\n                } catch (java.text.ParseException ignored) {\n                }\n                try {\n                    return java.text.DateFormat.parse(json.getAsString());\n                } catch (java.text.ParseException ignored) {\n                }\n                try {\n                    return java.text.DateFormat.parse(json.getAsString());\n                } catch (java.text.ParseException e) {\n                    throw new com.google.gson.JsonSyntaxException(json.getAsString() , e);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl"},"failures":[48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,22,75,76,77,78,79,80,81,82,83,84,85,86,87,88,6,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120],"tindex":"6c373d79-3f28-11e6-adbc-addbff40459f","method":{"position":"com.google.gson.JsonObject:53","type":"CtMethodImpl","sourcecode":"public void add(java.lang.String property, com.google.gson.JsonElement value) {\n    if (property == null) {\n        {\n            if (value == null) {\n                value = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.put(property, value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333980107/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"6c373d7a-3f28-11e6-adbc-f9d39556a300","method":{"position":"com.google.gson.stream.JsonWriter:413","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333980107/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333980107/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (value == null) {\n                        return nullValue();\n                    } \n                    writeDeferredName();\n                    beforeValue(false);\n                    string(value);\n                    return com.google.gson.stream.JsonWriter.this;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:120","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"6c373d7b-3f28-11e6-adbc-75a23b90b89a","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:808","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonNull) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333980107/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof java.util.Iterator) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333980107/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (!(o instanceof java.util.Map.Entry)) {\n                        return false;\n                    } \n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n                    if (node == null) {\n                        return false;\n                    } \n                    removeInternal(node, true);\n                    return true;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"6c37648c-3f28-11e6-adbc-0f9641e520eb","method":{"position":"com.google.gson.Gson:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333980107/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    out.value(value.toString());\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333980107/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:501","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"6c37648d-3f28-11e6-adbc-1fd25db866f0","method":{"position":"com.google.gson.TreeTypeAdapter:103","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newTypeHierarchyFactory(java.lang.Class<?> hierarchyType, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333980107/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , null , false , hierarchyType);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl"},"failures":[11,12,16,121,122,123,17,124,18,125,72,126,19,127,20,128,21,129,22,76,77,78,23,24,79,80,25,81,130,131,132,133,134,135,136,4,137,6,89,138,139,140,141,142,143,144,26,27,28,29,30,145,146,32,34],"tindex":"6c37648e-3f28-11e6-adbc-7f0c6abdd7fc","method":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:74","type":"CtMethodImpl","sourcecode":"private java.lang.reflect.Type getRuntimeTypeIfMoreSpecific(java.lang.reflect.Type type, java.lang.Object value) {\n    if (type instanceof java.lang.reflect.GenericArrayType) {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333980107/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if ((value != null) && (((type == (java.lang.Object.java.lang.Object.java.lang.Class)) || (type instanceof java.lang.reflect.TypeVariable<?>)) || (type instanceof java.lang.Class<?>))) {\n                        type = value.getClass();\n                    } \n                    return type;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333980107/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:378","type":"CtVariableReadImpl"},"failures":[147],"tindex":"6c378b9f-3f28-11e6-adbc-8fd570f492f4","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:338","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (!insert) {\n        {\n            if (!insert) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333980107/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (insert) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333980107/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            for (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) {\n                                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                                int int = left != null ? left.int : 0;\n                                int int = right != null ? right.int : 0;\n                                int int = leftHeight - rightHeight;\n                                if (delta == (-2)) {\n                                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                                    int int = rightRight != null ? rightRight.int : 0;\n                                    int int = rightLeft != null ? rightLeft.int : 0;\n                                    int int = rightLeftHeight - rightRightHeight;\n                                    if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                                        rotateLeft(node);\n                                    } else {\n                                        assert rightDelta == 1;\n                                        rotateRight(right);\n                                        rotateLeft(node);\n                                    }\n                                    if (insert) {\n                                        break;\n                                    } \n                                } else if (delta == 2) {\n                                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                                    int int = leftRight != null ? leftRight.int : 0;\n                                    int int = leftLeft != null ? leftLeft.int : 0;\n                                    int int = leftLeftHeight - leftRightHeight;\n                                    if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                                        rotateRight(node);\n                                    } else {\n                                        assert leftDelta == (-1);\n                                        rotateLeft(left);\n                                        rotateRight(node);\n                                    }\n                                    if (insert) {\n                                        break;\n                                    } \n                                } else if (delta == 0) {\n                                    node.int = leftHeight + 1;\n                                    if (insert) {\n                                        break;\n                                    } \n                                } else {\n                                    assert (delta == (-1)) || (delta == 1);\n                                    node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                                    if (!insert) {\n                                        break;\n                                    } \n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333980107/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"insert"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"6c37b2b0-3f28-11e6-adbc-a5e7d372ef3a","method":{"position":"com.google.gson.internal.bind.TypeAdapters:297","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333980107/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:132","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"6c37b2b1-3f28-11e6-adbc-c12e4126f916","method":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:74","type":"CtMethodImpl","sourcecode":"private java.lang.reflect.Type getRuntimeTypeIfMoreSpecific(java.lang.reflect.Type type, java.lang.Object value) {\n    if (type instanceof java.lang.reflect.GenericArrayType) {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333980107/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if ((value != null) && (((type == (java.lang.Object.java.lang.Object.java.lang.Class)) || (type instanceof java.lang.reflect.TypeVariable<?>)) || (type instanceof java.lang.Class<?>))) {\n                        type = value.getClass();\n                    } \n                    return type;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333980107/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:92","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"6c37d9c2-3f28-11e6-adbc-35212979dee3","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:804","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof java.util.Iterator) {\n        {\n            return (o instanceof java.util.Map.Entry) && ((findByEntry(((java.util.Map.Entry<?, ?>)(o)))) != null);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333980107/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:391","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"6c37d9c3-3f28-11e6-adbc-8b6204cef49e","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:338","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (!insert) {\n        {\n            if (!insert) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333980107/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (insert) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333980107/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            for (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) {\n                                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                                int int = left != null ? left.int : 0;\n                                int int = right != null ? right.int : 0;\n                                int int = leftHeight - rightHeight;\n                                if (delta == (-2)) {\n                                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                                    int int = rightRight != null ? rightRight.int : 0;\n                                    int int = rightLeft != null ? rightLeft.int : 0;\n                                    int int = rightLeftHeight - rightRightHeight;\n                                    if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                                        rotateLeft(node);\n                                    } else {\n                                        assert rightDelta == 1;\n                                        rotateRight(right);\n                                        rotateLeft(node);\n                                    }\n                                    if (insert) {\n                                        break;\n                                    } \n                                } else if (delta == 2) {\n                                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                                    int int = leftRight != null ? leftRight.int : 0;\n                                    int int = leftLeft != null ? leftLeft.int : 0;\n                                    int int = leftLeftHeight - leftRightHeight;\n                                    if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                                        rotateRight(node);\n                                    } else {\n                                        assert leftDelta == (-1);\n                                        rotateLeft(left);\n                                        rotateRight(node);\n                                    }\n                                    if (insert) {\n                                        break;\n                                    } \n                                } else if (delta == 0) {\n                                    node.int = leftHeight + 1;\n                                    if (insert) {\n                                        break;\n                                    } \n                                } else {\n                                    assert (delta == (-1)) || (delta == 1);\n                                    node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                                    if (!insert) {\n                                        break;\n                                    } \n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333980107/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"insert"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:103","type":"CtBinaryOperatorImpl"},"failures":[148,11,149,150,51,151,152,153,154,155,156,157,158,159,160,161,162,16,163,164,165,166,167,168,169,121,170,171,172,122,173,174,175,124,176,177,125,178,70,71,72,73,19,179,20,21,180,181,22,75,182,183,76,77,78,23,184,24,79,80,185,186,187,25,81,82,188,189,190,191,192,193,130,194,195,196,197,198,199,200,201,202,203,83,84,85,86,131,204,205,132,133,206,207,208,209,134,135,210,2,88,211,3,136,212,213,214,215,4,5,216,137,6,89,217,218,92,93,94,95,97,142,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,143,244,245,246,247,248,249,250,251,252,253,100,254,255,256,257,101,258,102,259,260,261,262,263,264,265,266,267,268,269,270,271,272,103,104,105,106,107,273,274,275,276,277,278,279,280,281,282,283,284,285,27,286,287,29,30,288,145,146,32,289,110,290,111,112,291,292,293,294,295,296,33,297,298,34,299,7,8,300,9,301,302,303,304,305,306,307,117,119,308,309,310,311,312,313,314],"tindex":"6c3800d4-3f28-11e6-adbc-af51d3cf99fb","method":{"position":"com.google.gson.internal.Primitives:69","type":"CtMethodImpl","sourcecode":"public static boolean isPrimitive(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.GenericArrayType) {\n        {\n            return com.google.gson.internal.Primitives.com.google.gson.internal.Primitives.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.containsKey(type);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333980107/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:578","type":"CtBinaryOperatorImpl"},"failures":[147],"tindex":"6c3827e5-3f28-11e6-adbc-13351298ff20","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:401","type":"CtMethodImpl","sourcecode":"private void rotateLeft(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root == null) {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivotLeft;\n            if (pivotLeft != null) {\n                pivotLeft.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            } \n            replaceInParent(root, pivot);\n            pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot;\n            root.int = (java.lang.Math.max((left != null ? left.int : 0), (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n            pivot.int = (java.lang.Math.max(root.int, (pivotRight != null ? pivotRight.int : 0))) + 1;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333980107/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"root"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:250","type":"CtVariableReadImpl"},"failures":[13,315,316,317,318,319,320,148,321,322,323,324,325,149,150,326,51,59,67,327,151,152,153,154,155,156,328,157,158,159,329,330,331,332,333,334,160,161,335,336,337,166,167,168,169,121,338,170,171,339,172,122,173,340,341,342,123,343,344,345,346,347,348,349,17,350,351,352,353,354,355,174,175,124,356,18,357,358,359,360,176,177,69,125,178,361,362,363,364,365,366,367,368,70,71,72,73,369,370,371,372,373,374,126,375,376,377,378,379,380,19,381,382,383,384,385,386,387,388,179,127,389,390,20,128,21,180,129,391,392,181,393,394,395,74,396,397,22,75,398,399,182,183,76,77,78,23,184,24,79,80,185,186,187,25,81,188,189,190,191,192,193,130,194,195,196,197,198,199,200,201,400,401,202,203,83,84,43,85,86,131,204,87,205,132,133,206,207,208,209,134,135,210,2,88,211,3,136,212,402,403,404,405,213,214,406,407,408,215,4,5,216,137,6,89,409,217,410,411,412,413,414,36,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,37,431,432,433,434,435,436,437,438,38,439,440,441,442,443,444,39,445,446,40,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,14,476,218,477,478,479,480,481,482,483,41,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,91,92,93,94,95,96,97,142,98,99,219,220,221,222,223,224,225,226,227,228,229,499,230,500,231,232,44,233,501,234,502,235,503,236,237,238,239,504,240,241,242,243,505,506,143,244,245,246,247,248,249,250,251,252,253,507,100,254,508,255,256,257,101,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,258,102,45,533,534,535,46,259,260,144,261,536,537,538,539,540,541,542,26,262,543,544,545,546,263,264,547,548,265,549,550,551,552,266,267,268,269,270,271,553,554,555,556,272,557,558,103,104,105,106,107,559,560,561,273,274,275,276,277,562,278,279,280,281,282,283,284,285,563,27,286,287,28,108,564,29,30,288,145,109,146,31,565,32,289,110,566,290,111,112,567,291,292,293,568,569,570,571,572,113,294,295,573,574,575,576,577,578,579,580,581,296,582,114,583,33,584,585,586,587,588,589,297,590,591,592,593,594,595,596,298,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,34,612,613,614,615,299,616,617,618,619,620,621,622,7,623,8,300,9,301,115,302,303,304,305,624,306,625,116,626,307,117,118,119,627,308,628,629,630,120,631,632,633,634,309,635,636,310,47,311,42,637,638,312,313,314],"tindex":"6c384ef6-3f28-11e6-adbc-67f5101fb371","method":{"position":"com.google.gson.Gson:273","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> floatAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return ((float)(in.nextDouble()));\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    float float = value.floatValue();\n                    checkValidFloatingPoint(floatValue);\n                    out.value(value);\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333980107/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:79","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"6c387607-3f28-11e6-adbc-15f8345e2249","method":{"position":"com.google.gson.DefaultDateTypeAdapter:77","type":"CtMethodImpl","sourcecode":"public java.util.Date deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT, com.google.gson.JsonDeserializationContext context) throws com.google.gson.JsonParseException {\n    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333980107/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    } else {\n        {\n            if (!(json instanceof com.google.gson.JsonPrimitive)) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333980107/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonParseException();\n            } else {\n                {\n                    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n                        throw new com.google.gson.JsonParseException(\"The date should be a string value\");\n                    } \n                    java.util.Date java.util.Date = deserializeToDate(json);\n                    if (typeOfT == (java.util.Date.java.util.Date.java.lang.Class)) {\n                        return date;\n                    } else if (typeOfT == (java.sql.Timestamp.java.sql.Timestamp.java.lang.Class)) {\n                        return new java.sql.Timestamp(date.getTime());\n                    } else if (typeOfT == (java.sql.Date.java.sql.Date.java.lang.Class)) {\n                        return new java.sql.Date(date.getTime());\n                    } else {\n                        throw new java.lang.IllegalArgumentException((((getClass()) + \" cannot deserialize to \") + typeOfT));\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:348","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"6c387608-3f28-11e6-adbc-7ded8efe1181","method":{"position":"com.google.gson.internal.$Gson$Types:322","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type resolve(java.lang.reflect.Type context, java.lang.Class<?> contextRawType, java.lang.reflect.Type toResolve) {\n    while (true) {\n        if (toResolve instanceof java.lang.reflect.TypeVariable) {\n            java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(toResolve));\n            toResolve = com.google.gson.internal.$Gson$Types.resolveTypeVariable(context, contextRawType, typeVariable);\n            if (toResolve == typeVariable) {\n                return toResolve;\n            } \n        } else if ((toResolve instanceof java.lang.Class) && (((java.lang.Class<?>)(toResolve)).isArray())) {\n            java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getComponentType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, componentType);\n            return componentType == newComponentType ? original : com.google.gson.internal.$Gson$Types.arrayOf(newComponentType);\n        } else if (toResolve instanceof java.lang.reflect.GenericArrayType) {\n            java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getGenericComponentType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, componentType);\n            return componentType == newComponentType ? original : com.google.gson.internal.$Gson$Types.arrayOf(newComponentType);\n        } else if (toResolve instanceof java.lang.reflect.ParameterizedType) {\n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getOwnerType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, ownerType);\n            boolean boolean = newOwnerType != ownerType;\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getActualTypeArguments();\n            for (int int = 0, int int = args.int ; t < length ; t++) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, args[t]);\n                if (resolvedTypeArgument != (args[t])) {\n                    if (!changed) {\n                        args = args.clone();\n                        changed = true;\n                    } \n                    args[t] = resolvedTypeArgument;\n                } \n            }\n            return changed ? com.google.gson.internal.$Gson$Types.newParameterizedTypeWithOwner(newOwnerType, original.getRawType(), args) : original;\n        } else if (toResolve instanceof java.lang.reflect.WildcardType) {\n            java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(toResolve));\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getLowerBounds();\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getUpperBounds();\n            if ((originalLowerBound.int) == 1) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, originalLowerBound[0]);\n                if (lowerBound != (originalLowerBound[0])) {\n                    return com.google.gson.internal.$Gson$Types.supertypeOf(lowerBound);\n                } \n            } else if ((originalUpperBound.int) == 1) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, originalUpperBound[0]);\n                if (upperBound != (originalUpperBound[0])) {\n                    return com.google.gson.internal.$Gson$Types.subtypeOf(upperBound);\n                } \n            } \n            return original;\n        } else {\n            return toResolve;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"toResolve"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"6c389d19-3f28-11e6-adbc-a563a3c89761","method":{"position":"com.google.gson.Gson:719","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.lang.String json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            if (json == null) {\n                return null;\n            } \n            java.io.StringReader java.io.StringReader = new java.io.StringReader(json);\n            T T = ((T)(fromJson(reader, typeOfT)));\n            return target;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333980107/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:79","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"6c38c42a-3f28-11e6-adbc-6901f2451b03","method":{"position":"com.google.gson.Gson:871","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            if (!(json instanceof com.google.gson.JsonPrimitive)) {\n                {\n                    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333980107/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new com.google.gson.JsonSyntaxException();\n                    } else {\n                        {\n                            if (json == null) {\n                                return null;\n                            } \n                            return ((T)(fromJson(new com.google.gson.internal.bind.JsonTreeReader(json), typeOfT)));\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333980107/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333980107/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:578","type":"CtBinaryOperatorImpl"},"failures":[147],"tindex":"6c38c42b-3f28-11e6-adbc-11b665a5a9c2","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:429","type":"CtMethodImpl","sourcecode":"private void rotateRight(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root == null) {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivotRight;\n            if (pivotRight != null) {\n                pivotRight.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            } \n            replaceInParent(root, pivot);\n            pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot;\n            root.int = (java.lang.Math.max((right != null ? right.int : 0), (pivotRight != null ? pivotRight.int : 0))) + 1;\n            pivot.int = (java.lang.Math.max(root.int, (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333980107/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"root"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl"},"failures":[148,11,149,150,51,151,152,153,154,155,156,157,158,159,160,161,162,16,163,164,165,166,167,168,169,121,170,171,172,122,173,174,175,124,176,177,125,178,70,71,72,73,19,179,20,21,180,181,22,75,182,183,76,77,78,23,184,24,79,80,185,186,187,25,81,82,188,189,190,191,192,193,130,194,195,196,197,198,199,200,201,202,203,83,84,85,86,131,204,205,132,133,206,207,208,209,134,135,210,2,211,3,136,212,213,214,215,4,5,216,137,6,89,217,218,92,93,94,95,97,142,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,143,244,245,246,247,248,249,250,251,252,253,100,254,255,256,257,101,258,102,259,260,261,262,263,264,265,266,267,268,269,270,271,272,103,104,105,106,107,273,274,275,276,277,278,279,280,281,282,283,284,285,27,286,287,29,30,288,145,146,32,289,110,290,111,112,291,292,293,294,295,296,33,297,298,34,299,7,8,300,9,301,302,303,304,305,306,307,117,119,308,309,310,311,312,313,314],"tindex":"6c38eb3c-3f28-11e6-adbc-ff759eb1faae","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:116","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<?> getFieldAdapter(com.google.gson.Gson gson, java.lang.reflect.Field field, com.google.gson.reflect.TypeToken<?> fieldType) {\n    if (field.isSynthetic()) {\n        {\n            com.google.gson.annotations.JsonAdapter com.google.gson.annotations.JsonAdapter = field.getAnnotation(com.google.gson.annotations.JsonAdapter.com.google.gson.annotations.JsonAdapter.java.lang.Class);\n            if (annotation != null) {\n                com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory.getTypeAdapter(com.google.gson.internal.ConstructorConstructor, gson, fieldType, annotation);\n                if (adapter != null)\n                    return adapter;\n                \n            } \n            return gson.getAdapter(fieldType);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333980107/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"field"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl"},"failures":[73,77,79,80,81,83,84,43,85,86,87,6,89,100,115],"tindex":"6c38eb3d-3f28-11e6-adbc-97831a004408","method":{"position":"com.google.gson.Gson:468","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src) {\n    if (src == null) {\n        {\n            if (src == null) {\n                return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            return toJsonTree(src, src.getClass());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333980107/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:107","type":"CtBinaryOperatorImpl"},"failures":[13,315,316,317,318,320,148,321,322,323,48,639,10,11,51,157,158,159,331,332,160,161,335,336,162,16,163,164,165,166,167,168,169,122,340,341,342,123,343,344,345,346,347,348,349,17,350,351,352,353,354,355,174,175,124,356,18,357,358,359,176,69,125,178,361,362,363,364,365,366,367,368,71,370,371,373,374,126,379,19,381,383,386,388,179,20,21,180,181,394,395,22,75,398,76,77,78,23,24,79,80,186,187,25,81,82,189,197,198,201,400,401,202,203,83,84,43,85,86,131,87,205,132,133,207,209,134,135,88,211,136,212,402,403,404,405,213,214,406,407,408,215,4,216,137,6,89,409,217,36,419,421,423,37,431,38,439,441,442,39,40,454,465,467,468,471,477,480,483,41,487,488,489,493,494,91,92,93,94,95,96,97,142,219,220,221,222,223,224,225,229,233,234,235,236,238,239,242,143,244,247,251,100,511,513,517,518,531,532,102,535,260,144,261,536,541,542,262,545,546,264,265,551,266,267,268,269,271,553,554,555,556,557,103,559,560,561,273,274,275,276,277,278,279,280,282,285,27,287,28,108,564,29,30,109,32,110,290,111,112,291,292,293,571,576,578,580,582,33,597,599,604,605,607,608,609,610,612,614,615,618,620,7,623,8,300,9,301,115,302,303,304,305,624,306,625,116,626,307,117,118,119,627,308,628,629,630,120,631,632,633,634,309,310,313,314],"tindex":"6c39124e-3f28-11e6-adbc-7ddf2d25b57b","method":{"position":"com.google.gson.reflect.TypeToken:283","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic final boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonArray) {\n        {\n            return (o instanceof com.google.gson.reflect.TypeToken<?>) && (com.google.gson.internal.$Gson$Types.equals(java.lang.reflect.Type, ((com.google.gson.reflect.TypeToken<?>)(o)).java.lang.reflect.Type));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333980107/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:122","type":"CtBinaryOperatorImpl"},"failures":[370,87,208,210,88,551,567],"tindex":"6c39124f-3f28-11e6-adbc-3516bc540278","method":{"position":"com.google.gson.GsonBuilder:447","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\npublic com.google.gson.GsonBuilder registerTypeAdapter(java.lang.reflect.Type type, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n        {\n            if (type instanceof java.lang.reflect.ParameterizedType) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333980107/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    com.google.gson.internal.$Gson$Preconditions.checkArgument(((((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) || (typeAdapter instanceof com.google.gson.InstanceCreator<?>)) || (typeAdapter instanceof com.google.gson.TypeAdapter<?>)));\n                    if (typeAdapter instanceof com.google.gson.InstanceCreator<?>) {\n                        java.util.Map<java.lang.reflect.Type, com.google.gson.InstanceCreator<?>>.put(type, ((com.google.gson.InstanceCreator)(typeAdapter)));\n                    } \n                    if ((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) {\n                        com.google.gson.reflect.TypeToken<?> com.google.gson.reflect.TypeToken<?> = com.google.gson.reflect.TypeToken.get(type);\n                        java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.TreeTypeAdapter.newFactoryWithMatchRawType(typeToken, typeAdapter));\n                    } \n                    if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                        java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.internal.bind.TypeAdapters.newFactory(com.google.gson.reflect.TypeToken.get(type), ((com.google.gson.TypeAdapter)(typeAdapter))));\n                    } \n                    return com.google.gson.GsonBuilder.this;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333980107/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:79","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"6c393960-3f28-11e6-adbc-2b3162c0d2c6","method":{"position":"com.google.gson.DefaultDateTypeAdapter:77","type":"CtMethodImpl","sourcecode":"public java.util.Date deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT, com.google.gson.JsonDeserializationContext context) throws com.google.gson.JsonParseException {\n    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333980107/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    } else {\n        {\n            if (!(json instanceof com.google.gson.JsonPrimitive)) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333980107/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonParseException();\n            } else {\n                {\n                    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n                        throw new com.google.gson.JsonParseException(\"The date should be a string value\");\n                    } \n                    java.util.Date java.util.Date = deserializeToDate(json);\n                    if (typeOfT == (java.util.Date.java.util.Date.java.lang.Class)) {\n                        return date;\n                    } else if (typeOfT == (java.sql.Timestamp.java.sql.Timestamp.java.lang.Class)) {\n                        return new java.sql.Timestamp(date.getTime());\n                    } else if (typeOfT == (java.sql.Date.java.sql.Date.java.lang.Class)) {\n                        return new java.sql.Date(date.getTime());\n                    } else {\n                        throw new java.lang.IllegalArgumentException((((getClass()) + \" cannot deserialize to \") + typeOfT));\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl"},"failures":[13,316,148,323,324,11,12,149,150,51,55,56,57,59,67,640,15,641,642,643,644,645,646,647,648,327,153,155,156,157,158,159,329,330,331,332,160,335,336,337,162,16,163,164,165,166,169,121,170,122,173,340,341,344,345,349,17,354,174,18,176,177,125,361,362,363,364,365,366,367,368,71,374,126,377,379,19,385,386,387,389,20,21,180,129,391,181,395,397,22,75,398,182,183,23,184,24,187,25,82,188,189,190,192,193,130,196,198,201,400,401,202,203,131,87,205,132,133,206,207,209,134,135,2,3,136,403,405,213,214,215,4,5,216,137,409,217,420,423,437,14,138,649,650,139,140,651,141,93,95,142,98,99,219,220,223,226,229,231,233,236,238,239,241,143,245,246,248,253,254,256,510,511,512,513,514,517,519,523,526,529,532,102,259,260,144,261,540,542,26,262,545,264,547,265,551,266,267,268,269,271,553,554,555,556,272,557,273,274,275,276,277,278,281,282,285,27,28,29,30,145,109,146,32,110,111,112,570,571,572,575,576,578,580,581,114,585,587,588,589,590,592,593,595,298,597,598,601,604,607,609,610,612,613,614,615,299,618,621,7,8,300,9,301,304,305,624,625,117,118,119,308,628,629,120,634,309,310,638],"tindex":"6c393961-3f28-11e6-adbc-63438a3db611","method":{"position":"com.google.gson.stream.JsonWriter:532","type":"CtMethodImpl","sourcecode":"private void string(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        {\n            java.lang.String[] java.lang.String[] = boolean ? com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[] : com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[];\n            java.io.Writer.write(\"\\\"\");\n            int int = 0;\n            int int = value.length();\n            for (int int = 0 ; i < length ; i++) {\n                char char = value.charAt(i);\n                java.lang.String java.lang.String;\n                if (c < 128) {\n                    replacement = replacements[c];\n                    if (replacement == null) {\n                        continue;\n                    } \n                } else if (c == '\\u2028') {\n                    replacement = \"\\\\u2028\";\n                } else if (c == '\\u2029') {\n                    replacement = \"\\\\u2029\";\n                } else {\n                    continue;\n                }\n                if (last < i) {\n                    java.io.Writer.write(value, last, (i - last));\n                } \n                java.io.Writer.write(replacement);\n                last = i + 1;\n            }\n            if (last < length) {\n                java.io.Writer.write(value, last, (length - last));\n            } \n            java.io.Writer.write(\"\\\"\");\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333980107/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl"},"failures":[188,193,194,200,273,276],"tindex":"6c396072-3f28-11e6-adbc-3deb4344cebb","method":{"position":"com.google.gson.FieldNamingPolicy:137","type":"CtMethodImpl","sourcecode":"private static java.lang.String upperCaseFirstLetter(java.lang.String name) {\n    if (name == null) {\n        {\n            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            int int = 0;\n            char char = name.charAt(index);\n            while (index < ((name.length()) - 1)) {\n                if (java.lang.Character.isLetter(firstCharacter)) {\n                    break;\n                } \n                fieldNameBuilder.append(firstCharacter);\n                firstCharacter = name.charAt((++index));\n            }\n            if (index == (name.length())) {\n                return fieldNameBuilder.toString();\n            } \n            if (!(java.lang.Character.isUpperCase(firstCharacter))) {\n                java.lang.String java.lang.String = com.google.gson.FieldNamingPolicy.modifyString(java.lang.Character.toUpperCase(firstCharacter), name, (++index));\n                return fieldNameBuilder.append(modifiedTarget).toString();\n            } else {\n                return name;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333980107/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:127","type":"CtInvocationImpl"},"failures":[148,11,149,150,51,151,152,153,154,155,156,157,158,159,160,161,162,16,163,164,165,166,167,168,169,121,338,170,171,339,172,122,173,174,175,124,176,177,125,178,70,71,72,73,19,179,20,21,180,181,22,75,182,183,76,77,78,23,184,24,79,80,185,186,187,25,81,82,188,189,190,191,192,193,130,194,195,196,197,198,199,200,201,202,203,83,84,85,86,131,204,205,132,133,206,207,208,209,134,135,210,2,211,3,136,212,213,214,215,4,5,216,137,6,89,217,218,92,93,94,95,97,142,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,504,240,241,242,243,505,143,244,245,246,247,248,249,250,251,252,253,100,254,255,256,257,101,258,102,259,260,261,262,263,264,265,266,267,268,269,270,271,272,103,104,105,106,107,273,274,275,276,277,278,279,280,281,282,283,284,285,27,286,287,29,30,288,145,146,32,289,110,290,111,112,291,292,293,294,295,296,33,297,298,34,299,7,8,300,9,301,302,303,304,305,306,307,117,119,308,309,310,311,312,313,314],"tindex":"6c398783-3f28-11e6-adbc-11d14df41e8a","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:125","type":"CtMethodImpl","sourcecode":"private java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> getBoundFields(com.google.gson.Gson context, com.google.gson.reflect.TypeToken<?> type, java.lang.Class<?> raw) {\n    if (raw.isInterface()) {\n        {\n            java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> = new java.util.LinkedHashMap<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField>();\n            if (raw.isInterface()) {\n                return result;\n            } \n            java.lang.reflect.Type java.lang.reflect.Type = type.getType();\n            while (raw != (java.lang.Object.java.lang.Object.java.lang.Class)) {\n                java.lang.reflect.Field[] java.lang.reflect.Field[] = raw.getDeclaredFields();\n                for (java.lang.reflect.Field java.lang.reflect.Field : fields) {\n                    boolean boolean = excludeField(field, true);\n                    boolean boolean = excludeField(field, false);\n                    if ((!serialize) && (!deserialize)) {\n                        continue;\n                    } \n                    field.setAccessible(true);\n                    java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, field.getGenericType());\n                    com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = createBoundField(context, field, getFieldName(field), com.google.gson.reflect.TypeToken.get(fieldType), serialize, deserialize);\n                    com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = result.put(boundField.java.lang.String, boundField);\n                    if (previous != null) {\n                        throw new java.lang.IllegalArgumentException(((declaredType + \" declares multiple JSON fields named \") + (previous.java.lang.String)));\n                    } \n                }\n                type = com.google.gson.reflect.TypeToken.get(com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, raw.getGenericSuperclass()));\n                raw = type.getRawType();\n            }\n            return result;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333980107/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"raw"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:179","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"6c39ae94-3f28-11e6-adbc-cbe0381d1d9c","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:223","type":"CtMethodImpl","sourcecode":"private boolean equal(java.lang.Object a, java.lang.Object b) {\n    if (a instanceof java.lang.reflect.GenericArrayType) {\n        {\n            return (a == b) || ((a != null) && (a.equals(b)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333980107/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:79","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"6c39ae95-3f28-11e6-adbc-4fe5d9e546c6","method":{"position":"com.google.gson.Gson:871","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            if (!(json instanceof com.google.gson.JsonPrimitive)) {\n                {\n                    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333980107/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new com.google.gson.JsonSyntaxException();\n                    } else {\n                        {\n                            if (json == null) {\n                                return null;\n                            } \n                            return ((T)(fromJson(new com.google.gson.internal.bind.JsonTreeReader(json), typeOfT)));\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333980107/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333980107/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl"},"failures":[31,33,619],"tindex":"6c39ae96-3f28-11e6-adbc-35684c2a743e","method":{"position":"com.google.gson.Gson:532","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src != null) {\n        {\n            java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n            toJson(src, typeOfSrc, writer);\n            return writer.toString();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333980107/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:363","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"6c39ae97-3f28-11e6-adbc-a11ee3e20700","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:338","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (!insert) {\n        {\n            if (!insert) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333980107/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (insert) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333980107/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            for (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) {\n                                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                                int int = left != null ? left.int : 0;\n                                int int = right != null ? right.int : 0;\n                                int int = leftHeight - rightHeight;\n                                if (delta == (-2)) {\n                                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                                    int int = rightRight != null ? rightRight.int : 0;\n                                    int int = rightLeft != null ? rightLeft.int : 0;\n                                    int int = rightLeftHeight - rightRightHeight;\n                                    if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                                        rotateLeft(node);\n                                    } else {\n                                        assert rightDelta == 1;\n                                        rotateRight(right);\n                                        rotateLeft(node);\n                                    }\n                                    if (insert) {\n                                        break;\n                                    } \n                                } else if (delta == 2) {\n                                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                                    int int = leftRight != null ? leftRight.int : 0;\n                                    int int = leftLeft != null ? leftLeft.int : 0;\n                                    int int = leftLeftHeight - leftRightHeight;\n                                    if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                                        rotateRight(node);\n                                    } else {\n                                        assert leftDelta == (-1);\n                                        rotateLeft(left);\n                                        rotateRight(node);\n                                    }\n                                    if (insert) {\n                                        break;\n                                    } \n                                } else if (delta == 0) {\n                                    node.int = leftHeight + 1;\n                                    if (insert) {\n                                        break;\n                                    } \n                                } else {\n                                    assert (delta == (-1)) || (delta == 1);\n                                    node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                                    if (!insert) {\n                                        break;\n                                    } \n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333980107/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"insert"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:726","type":"CtBinaryOperatorImpl"},"failures":[317,318,652,641,643,586,595,598,599],"tindex":"6c39fcb8-3f28-11e6-adbc-478022a9d9af","method":{"position":"com.google.gson.stream.JsonWriter:476","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(long value) throws java.io.IOException {\n    if (value == 0) {\n        {\n            writeDeferredName();\n            beforeValue(false);\n            java.io.Writer.write(java.lang.Long.toString(value));\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333980107/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:462","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"6c39fcb9-3f28-11e6-adbc-1d405193e6ea","method":{"position":"com.google.gson.Gson:297","type":"CtMethodImpl","sourcecode":"private void checkValidFloatingPoint(double value) {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333980107/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                        throw new java.lang.IllegalArgumentException(((value + \" is not a valid double value as per JSON specification. To override this\") + \" behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.\"));\n                    } \n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333980107/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[121,122,127,129,131,133,134,135,145,33],"tindex":"6c39fcba-3f28-11e6-adbc-430908cb2206","method":{"position":"com.google.gson.stream.JsonWriter:490","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333980107/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            writeDeferredName();\n            java.lang.String java.lang.String = value.toString();\n            if ((!(boolean)) && (((string.equals(\"-Infinity\")) || (string.equals(\"Infinity\"))) || (string.equals(\"NaN\")))) {\n                throw new java.lang.IllegalArgumentException((\"Numeric values must be finite, but was \" + value));\n            } \n            beforeValue(false);\n            java.io.Writer.append(string);\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:92","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"6c3a23cb-3f28-11e6-adbc-a5a10a55d2a9","method":{"position":"com.google.gson.internal.$Gson$Types:213","type":"CtMethodImpl","sourcecode":"private static int hashCodeOrZero(java.lang.Object o) {\n    return o != null ? o.hashCode() : 0;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:120","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"6c3a23cc-3f28-11e6-adbc-ab5ef438f2a6","method":{"position":"com.google.gson.internal.$Gson$Types:511","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    return (o instanceof java.lang.reflect.GenericArrayType) && (com.google.gson.internal.$Gson$Types.equals(com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl.this, ((java.lang.reflect.GenericArrayType)(o))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"6c3a23cd-3f28-11e6-adbc-87769217b265","method":{"position":"com.google.gson.Gson:871","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            if (!(json instanceof com.google.gson.JsonPrimitive)) {\n                {\n                    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333980107/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new com.google.gson.JsonSyntaxException();\n                    } else {\n                        {\n                            if (json == null) {\n                                return null;\n                            } \n                            return ((T)(fromJson(new com.google.gson.internal.bind.JsonTreeReader(json), typeOfT)));\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333980107/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333980107/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:136","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"6c3a23ce-3f28-11e6-adbc-37d7022d8543","method":{"position":"com.google.gson.internal.$Gson$Types:431","type":"CtMethodImpl","sourcecode":"private static void checkNotPrimitive(java.lang.reflect.Type type) {\n    com.google.gson.internal.$Gson$Preconditions.checkArgument(((!(type instanceof java.lang.Class<?>)) || (!(((java.lang.Class<?>)(type)).isPrimitive()))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:459","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"6c3a4adf-3f28-11e6-adbc-65ba6058ac26","method":{"position":"com.google.gson.GsonBuilder:447","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\npublic com.google.gson.GsonBuilder registerTypeAdapter(java.lang.reflect.Type type, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n        {\n            if (type instanceof java.lang.reflect.ParameterizedType) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333980107/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    com.google.gson.internal.$Gson$Preconditions.checkArgument(((((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) || (typeAdapter instanceof com.google.gson.InstanceCreator<?>)) || (typeAdapter instanceof com.google.gson.TypeAdapter<?>)));\n                    if (typeAdapter instanceof com.google.gson.InstanceCreator<?>) {\n                        java.util.Map<java.lang.reflect.Type, com.google.gson.InstanceCreator<?>>.put(type, ((com.google.gson.InstanceCreator)(typeAdapter)));\n                    } \n                    if ((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) {\n                        com.google.gson.reflect.TypeToken<?> com.google.gson.reflect.TypeToken<?> = com.google.gson.reflect.TypeToken.get(type);\n                        java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.TreeTypeAdapter.newFactoryWithMatchRawType(typeToken, typeAdapter));\n                    } \n                    if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                        java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.internal.bind.TypeAdapters.newFactory(com.google.gson.reflect.TypeToken.get(type), ((com.google.gson.TypeAdapter)(typeAdapter))));\n                    } \n                    return com.google.gson.GsonBuilder.this;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333980107/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl"},"failures":[321,322,323,324,149,150,51,327,153,155,156,328,157,158,329,330,331,332,160,335,337,162,16,163,164,165,166,169,121,170,339,122,173,340,341,123,343,344,345,346,349,17,354,174,124,18,358,176,177,125,361,362,363,364,365,366,367,368,71,126,19,385,386,389,20,21,180,391,22,182,183,184,187,25,82,188,189,190,191,192,193,130,196,198,201,400,401,202,203,206,403,404,405,213,214,406,407,408,4,5,216,137,409,217,413,36,420,423,37,431,437,38,439,442,39,446,40,449,450,454,463,465,467,468,471,474,14,478,480,481,483,41,487,489,493,494,93,95,142,219,220,223,226,229,231,233,502,503,236,238,239,504,241,143,245,246,248,253,256,510,511,512,513,514,517,519,523,526,529,532,102,260,144,536,541,542,262,545,264,265,266,267,268,269,271,553,554,555,556,272,557,558,273,274,275,276,277,562,278,281,282,285,27,28,564,29,30,145,109,146,32,570,572,575,581,585,586,587,588,589,590,592,593,595,298,598,599,601,607,609,610,34,612,613,614,615,299,618,621,7,623,8,300,9,301,115,302,304,305,624,117,118,119,308,628,629,120,633],"tindex":"6c3a4ae0-3f28-11e6-adbc-736618905efb","method":{"position":"com.google.gson.Gson:510","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src) {\n    if (src == null) {\n        {\n            if (src == null) {\n                return toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull);\n            } \n            return toJson(src, src.getClass());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333980107/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:430","type":"CtFieldReadImpl"},"failures":[48,639,653,57,17,70,71,72,73,126,19,129,22,75,76,77,78,79,80,81,83,84,43,85,86,87,6,89,98,499,253,100,256,46,27,28,29,30,145,109,146,31,32,115,309,310,47,311,42,638,312],"tindex":"6c3a71f1-3f28-11e6-adbc-e58347d493a1","method":{"position":"com.google.gson.stream.JsonWriter:268","type":"CtMethodImpl","sourcecode":"public final void setSerializeNulls(boolean serializeNulls) {\n    if (serializeNulls) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333980107/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = serializeNulls;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeNulls":"serializeNulls"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.JsonPrimitive:289","type":"CtBinaryOperatorImpl"},"failures":[10,11,12,174,142,233,262,264,265,7,8,300,9],"tindex":"6c3a71f2-3f28-11e6-adbc-f77cd97d6553","method":{"position":"com.google.gson.internal.bind.ObjectTypeAdapter:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Object value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            com.google.gson.TypeAdapter<java.lang.Object> com.google.gson.TypeAdapter<java.lang.Object> = ((com.google.gson.TypeAdapter<java.lang.Object>)(com.google.gson.Gson.getAdapter(value.getClass())));\n            if (typeAdapter instanceof com.google.gson.internal.bind.ObjectTypeAdapter) {\n                out.beginObject();\n                out.endObject();\n                return ;\n            } \n            typeAdapter.write(out, value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333980107/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:198","type":"CtBinaryOperatorImpl"},"failures":[13,315,162,16,163,164,165,122,340,341,123,343,344,345,346,349,17,350,354,174,124,18,358,126,180,75,79,401,83,131,205,133,209,134,404,214,406,407,408,409,431,439,471,483,489,494,654,655,142,219,223,233,236,238,517,28,304],"tindex":"6c3a71f3-3f28-11e6-adbc-fda38eeca5cc","method":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:84","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Object array) throws java.io.IOException {\n    if (array == null) {\n        {\n            if (array == null) {\n                out.nullValue();\n                return ;\n            } \n            out.beginArray();\n            for (int int = 0, int int = java.lang.reflect.Array.getLength(array) ; i < length ; i++) {\n                E E = ((E)(java.lang.reflect.Array.get(array, i)));\n                com.google.gson.TypeAdapter<E>.write(out, value);\n            }\n            out.endArray();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333980107/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1422","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"6c3a9904-3f28-11e6-adbc-ad35f41e4c2a","method":{"position":"com.google.gson.stream.JsonReader:325","type":"CtMethodImpl","sourcecode":"public final void setLenient(boolean lenient) {\n    if (!lenient) {\n        {\n            com.google.gson.stream.JsonReader.this.boolean = lenient;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333980107/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"lenient"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":59,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
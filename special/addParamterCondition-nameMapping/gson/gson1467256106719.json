{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":199,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":111,"com.google.gson.functional.StringTest.testStringValueDeserialization":541,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":651,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":18,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":504,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":388,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":467,"com.google.gson.stream.JsonWriterTest.testRepeatedName":649,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":325,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":451,"com.google.gson.MixedStreamTest.testWriteLenient":289,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":550,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":424,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":70,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":205,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":162,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":169,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":423,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":512,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":145,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":147,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":368,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":476,"com.google.gson.internal.bind.JsonElementReaderTest.testStrictNansAndInfinities":676,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":566,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":579,"com.google.gson.functional.ObjectTest.testSingletonLists":94,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":67,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":148,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":112,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":462,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":627,"com.google.gson.stream.JsonWriterTest.testStrings":189,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":416,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":79,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":607,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":398,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":436,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":301,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":251,"com.google.gson.internal.bind.JsonElementReaderTest.testNulls":674,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":161,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":587,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":549,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":180,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":505,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":560,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":227,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":454,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":623,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":132,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":226,"com.google.gson.functional.EnumTest.testEnumCaseMapping":144,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":2,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":110,"com.google.gson.functional.JsonTreeTest.testToJsonTree":200,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":453,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":563,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":400,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":204,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreBehindInVersion":638,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":57,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":273,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":643,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":240,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":385,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":463,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":568,"com.google.gson.internal.LinkedTreeMapTest.testLargeSetOfRandomKeys":693,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":166,"com.google.gson.functional.ObjectTest.testNullDeserialization":445,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":82,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":547,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":431,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":522,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":625,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":468,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":437,"com.google.gson.internal.bind.JsonElementReaderTest.testLenientNansAndInfinities":672,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":130,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":286,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":442,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":197,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":367,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":77,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":370,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":156,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":527,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":526,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":397,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":510,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testDifferentSerializeAndDeserializeField":632,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":644,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":490,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":376,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":533,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":41,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":101,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":297,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":488,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":314,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":502,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":551,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":29,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":384,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":109,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":666,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":408,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":17,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":292,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":555,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":503,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":249,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":349,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":179,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":184,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":427,"com.google.gson.JsonPrimitiveTest.testEqualsAcrossTypes":688,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":232,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":332,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":472,"com.google.gson.metrics.PerformanceTest.testDummy":303,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":596,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":32,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":578,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":601,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":409,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":236,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":244,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":69,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":309,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":65,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":598,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":612,"com.google.gson.JsonArrayTest.testEqualsNonEmptyArray":664,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":407,"com.google.gson.functional.CollectionTest.testSetDeserialization":280,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":243,"com.google.gson.functional.EnumTest.testEnumSet":138,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":323,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":430,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":495,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":137,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":87,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithNestedWildcards":628,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":7,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":380,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":99,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":194,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":268,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":507,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":600,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":516,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":80,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":127,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":107,"com.google.gson.functional.MapTest.testHashMapDeserialization":313,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":465,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":604,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":391,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":317,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":609,"com.google.gson.MixedStreamTest.testReadNulls":618,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":19,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":25,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":245,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":252,"com.google.gson.functional.MapTest.testSortedMap":229,"com.google.gson.functional.MapTest.testMapSerialization":225,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":20,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":307,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":500,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":355,"com.google.gson.functional.MapTest.testSerializeMaps":6,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":365,"com.google.gson.functional.MapTest.testComplexKeysSerialization":16,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":322,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":235,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":642,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":360,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":84,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":584,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":264,"com.google.gson.internal.LinkedTreeMapTest.testRemoveRootDoesNotDoubleUnlink":696,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":340,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":403,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":583,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":124,"com.google.gson.internal.bind.JsonElementReaderTest.testWrongType":677,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":689,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":327,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":444,"com.google.gson.functional.MapTest.testStringKeyDeserialization":234,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithBasicWildcards":630,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":358,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":411,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":529,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":237,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":471,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":174,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":466,"com.google.gson.functional.PrettyPrintingTest.testMap":561,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":603,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":54,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":319,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":404,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":196,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":359,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":645,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":116,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":542,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":62,"com.google.gson.functional.CollectionTest.testQueueSerialization":164,"com.google.gson.functional.MapTest.testMapSerializationEmpty":233,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnValue":187,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":496,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnName":653,"com.google.gson.functional.MapTest.testMapOfMapSerialization":11,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":487,"com.google.gson.JavaSerializationTest.testMapIsSerializable":214,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":386,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":279,"com.google.gson.stream.JsonWriterTest.testNameWithoutValue":647,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":50,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":291,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":417,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":113,"com.google.gson.functional.FieldNamingTest.testIdentity":366,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":246,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":120,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":446,"com.google.gson.internal.bind.JsonElementReaderTest.testNestedArrays":680,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":207,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":331,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":343,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":421,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":456,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":624,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testSkipNonAnnotatedFields":631,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":114,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":212,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":419,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":493,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":394,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":1,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":382,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":49,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":63,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":399,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":216,"com.google.gson.functional.MapTest.testMapSubclassSerialization":5,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":525,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":182,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":582,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":324,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":176,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":192,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":485,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":585,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":374,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":540,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":552,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":402,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":267,"com.google.gson.functional.EnumTest.testEnumSubclass":141,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":506,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":302,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":434,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":455,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":284,"com.google.gson.GsonBuilderTest.testRegisterTypeAdapterForCoreType":657,"com.google.gson.internal.bind.JsonElementReaderTest.testArray":673,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":511,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":88,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":336,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":458,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":93,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":491,"com.google.gson.stream.JsonWriterTest.testTwoNames":646,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":420,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":201,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":0,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":353,"com.google.gson.internal.LinkedTreeMapTest.testEqualsAndHashCode":695,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":248,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":497,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":330,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":489,"com.google.gson.stream.JsonWriterTest.testObjectsInArrays":300,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":73,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":422,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":312,"com.google.gson.MixedStreamTest.testWriteNulls":616,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":239,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":255,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":40,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":83,"com.google.gson.CommentsTest.testParseComments":290,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":577,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":89,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":95,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":569,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":259,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":356,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":509,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":306,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":115,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":315,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":610,"com.google.gson.MixedStreamTest.testReadInvalidState":614,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":241,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":272,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":75,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":524,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":3,"com.google.gson.internal.bind.JsonElementReaderTest.testEarlyClose":675,"com.google.gson.JsonParserTest.testParseMixedArray":658,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":105,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":198,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":361,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithTypeParameters":629,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":122,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAheadInVersion":636,"com.google.gson.internal.bind.JsonTreeWriterTest.testWriteAfterClose":668,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":480,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":48,"com.google.gson.JsonArrayTest.testRemove":663,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":66,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":520,"com.google.gson.functional.MapTest.testMapDeserialization":221,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":352,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":64,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":564,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":311,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":185,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":565,"com.google.gson.internal.bind.JsonElementReaderTest.testStringsFromNumbers":679,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":8,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":35,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":263,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":126,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":341,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":31,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":274,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":372,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":435,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":447,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":26,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":177,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":345,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":58,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":580,"com.google.gson.internal.bind.JsonElementReaderTest.testNumbersFromStrings":678,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":92,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":339,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":228,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":260,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":288,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":76,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":452,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":247,"com.google.gson.functional.PrimitiveTest.testShortSerialization":523,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":571,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":514,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":134,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":486,"com.google.gson.internal.LinkedTreeMapTest.testIterationOrder":694,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":513,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":381,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":464,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":362,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":140,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":602,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":613,"com.google.gson.internal.LinkedTreeMapTest.testPutOverrides":691,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":218,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":479,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":171,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":531,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":553,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":669,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":393,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":575,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":621,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":654,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":538,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":532,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":159,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":329,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":102,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":346,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":410,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":51,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":586,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":656,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":518,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":257,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":412,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":492,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":449,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":426,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":143,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":24,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":27,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":167,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":377,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":172,"com.google.gson.InnerClassExclusionStrategyTest.testExcludeInnerClassField":639,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":413,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":261,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":296,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":570,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":470,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":108,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":294,"com.google.gson.stream.JsonWriterTest.testNullStringValue":648,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":572,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":390,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":202,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":275,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":459,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":519,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":494,"com.google.gson.JsonArrayTest.testSet":661,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":535,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":151,"com.google.gson.JsonPrimitiveTest.testEquals":687,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":139,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":262,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":321,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":308,"com.google.gson.functional.MapTest.testGeneralMapField":14,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":425,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":348,"com.google.gson.internal.bind.JsonElementReaderTest.testNumbers":681,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":537,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":44,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":173,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":611,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testSkipExplicitlySkippedFields":635,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":71,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":230,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":52,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":104,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":155,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":515,"com.google.gson.MixedStreamTest.testReadMixedStreamed":620,"com.google.gson.JsonObjectTest.testDeepCopy":665,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":222,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":378,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":481,"com.google.gson.internal.bind.JsonElementReaderTest.testBooleans":670,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":170,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":195,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":254,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":595,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":498,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":133,"com.google.gson.JavaSerializationTest.testNumberIsSerializable":213,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":599,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":387,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":223,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":135,"com.google.gson.JsonArrayTest.testDeepCopy":662,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":217,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":90,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":536,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":150,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":589,"com.google.gson.stream.JsonWriterTest.testArraysInObjects":299,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":482,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":655,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":295,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":256,"com.google.gson.JsonPrimitiveTest.testEqualsDoesNotEquateStringAndNonStringTypes":686,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":121,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":278,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":369,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":574,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":91,"com.google.gson.functional.ObjectTest.testNestedDeserialization":450,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":181,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":440,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":318,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":344,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":131,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":534,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":559,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":224,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":326,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":543,"com.google.gson.JsonParserTest.testParseUnquotedStringArrayFails":659,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":266,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":293,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":334,"com.google.gson.JavaSerializationTest.testListIsSerializable":215,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":209,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":554,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":282,"com.google.gson.functional.ObjectTest.testNullSerialization":432,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":335,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":576,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":219,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":13,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":457,"com.google.gson.functional.MapTest.testInterfaceTypeMap":12,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":354,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":175,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":34,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":460,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":142,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":158,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testNeverSkipExplicitlyExposedAnnotatedFields":634,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":338,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":608,"com.google.gson.MixedStreamTest.testReadClosed":615,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":53,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":129,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":474,"com.google.gson.MixedStreamTest.testWriteClosed":619,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":165,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":320,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":96,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":238,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":401,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":269,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":33,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":211,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":103,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":123,"com.google.gson.stream.JsonWriterTest.testLongs":298,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":396,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":36,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":97,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":277,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":590,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":501,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":592,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":337,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":168,"com.google.gson.internal.bind.JsonElementReaderTest.testSkipValue":671,"com.google.gson.internal.bind.JsonElementReaderTest.testStrings":682,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":68,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":556,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":46,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":539,"com.google.gson.JsonParserTest.testParseInvalidJson":660,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":106,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":342,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":375,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":37,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":85,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":210,"com.google.gson.functional.CollectionTest.testQueueDeserialization":283,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":484,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":499,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":546,"com.google.gson.InnerClassExclusionStrategyTest.testIncludeStaticNestedClassField":640,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":316,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":74,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":591,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":9,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":443,"com.google.gson.stream.JsonWriterTest.testDeepNestingObjects":652,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":61,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":157,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":250,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":163,"com.google.gson.functional.MapTest.testRawMapSerialization":15,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":191,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":281,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":389,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":160,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":333,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":439,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":310,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":573,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":287,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":39,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":78,"com.google.gson.functional.PrimitiveTest.testByteSerialization":521,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":641,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":22,"com.google.gson.ObjectTypeAdapterTest.testSerialize":626,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":153,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":469,"com.google.gson.JsonPrimitiveTest.testEqualsIntegerAndBigInteger":685,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":206,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":43,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":363,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":270,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":544,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":622,"com.google.gson.functional.MapTest.testMapWithQuotes":10,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":55,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":477,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":545,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":86,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":253,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":418,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":30,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":528,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":373,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":242,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":567,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":265,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":448,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":125,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":59,"com.google.gson.functional.ObjectTest.testEmptyStringDeserialization":433,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":508,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":45,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":429,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":395,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":56,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":60,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":146,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":208,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":517,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":406,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":605,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":351,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":38,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":72,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":136,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":28,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":557,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":593,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":183,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAtSameVersion":637,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":405,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":461,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":581,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testNeverSkipExposedAnnotatedFields":633,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":415,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":683,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":438,"com.google.gson.functional.ObjectTest.testNestedSerialization":100,"com.google.gson.internal.LinkedTreeMapTest.testClear":692,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":152,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":154,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":473,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":548,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":149,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":231,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":4,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":119,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":186,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":193,"com.google.gson.stream.JsonWriterTest.testUnicodeLineBreaksEscaped":190,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":98,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":258,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":530,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":203,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":594,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":383,"com.google.gson.GsonBuilderTest.testCreatingMoreThanOnce":304,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":305,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":475,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":371,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":441,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":588,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":684,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":117,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":42,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":285,"com.google.gson.functional.CollectionTest.testSetSerialization":606,"com.google.gson.functional.StringTest.testStringValueSerialization":118,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":414,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":562,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":21,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":47,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":276,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":328,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":347,"com.google.gson.MixedStreamTest.testWriteInvalidState":617,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":428,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":478,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":357,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":483,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":178,"com.google.gson.stream.JsonWriterTest.testWrongTopLevelType":188,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":379,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":364,"com.google.gson.ObjectTypeAdapterTest.testDeserialize":690,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":81,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":558,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":128,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":667,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":271,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":392,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":23,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":220,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":650,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":350,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":597},"transformations":[{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197],"tindex":"e9de9857-3e6f-11e6-9ded-0f89182de41c","method":{"position":"com.google.gson.stream.JsonWriter:413","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                {\n                    if (value == null) {\n                        return nullValue();\n                    } \n                    writeDeferredName();\n                    beforeValue(false);\n                    string(value);\n                    return com.google.gson.stream.JsonWriter.this;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255180092/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255180092/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:92","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof java.util.Iterator"},"failures":[],"tindex":"e9dee678-3e6f-11e6-9ded-73a36cd3ad9b","method":{"position":"com.google.gson.internal.LinkedTreeMap:574","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (o instanceof java.util.Iterator) {\n        {\n            if (o instanceof java.util.Iterator) {\n                {\n                    if (!(o instanceof java.util.Map.Entry)) {\n                        return false;\n                    } \n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n                    if (node == null) {\n                        return false;\n                    } \n                    removeInternal(node, true);\n                    return true;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255180092/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255180092/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:350","type":"CtVariableReadImpl","sourcecode":"insert"},"failures":[198],"tindex":"e9df0d89-3e6f-11e6-9ded-67d76ba47205","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:338","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (insert) {\n        {\n            if (insert) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255180092/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    for (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) {\n                        com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                        com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                        int int = left != null ? left.int : 0;\n                        int int = right != null ? right.int : 0;\n                        int int = leftHeight - rightHeight;\n                        if (delta == (-2)) {\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            int int = rightRight != null ? rightRight.int : 0;\n                            int int = rightLeft != null ? rightLeft.int : 0;\n                            int int = rightLeftHeight - rightRightHeight;\n                            if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                                rotateLeft(node);\n                            } else {\n                                assert rightDelta == 1;\n                                rotateRight(right);\n                                rotateLeft(node);\n                            }\n                            if (insert) {\n                                break;\n                            } \n                        } else if (delta == 2) {\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            int int = leftRight != null ? leftRight.int : 0;\n                            int int = leftLeft != null ? leftLeft.int : 0;\n                            int int = leftLeftHeight - leftRightHeight;\n                            if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                                rotateRight(node);\n                            } else {\n                                assert leftDelta == (-1);\n                                rotateLeft(left);\n                                rotateRight(node);\n                            }\n                            if (insert) {\n                                break;\n                            } \n                        } else if (delta == 0) {\n                            node.int = leftHeight + 1;\n                            if (insert) {\n                                break;\n                            } \n                        } else {\n                            assert (delta == (-1)) || (delta == 1);\n                            node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                            if (!insert) {\n                                break;\n                            } \n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255180092/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"insert"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:79","type":"CtUnaryOperatorImpl","sourcecode":"!(json instanceof com.google.gson.JsonPrimitive)"},"failures":[],"tindex":"e9df349a-3e6f-11e6-9ded-ad8cf35310d9","method":{"position":"com.google.gson.Gson:127","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonParseException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255180092/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    } else {\n        {\n            if (json == null) {\n                {\n                    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255180092/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new com.google.gson.JsonParseException();\n                    } else {\n                        {\n                            return ((T)(fromJson(json, typeOfT)));\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255180092/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonParseException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:356","type":"CtVariableReadImpl","sourcecode":"insert"},"failures":[],"tindex":"e9df5bab-3e6f-11e6-9ded-23a97942d34d","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:338","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (insert) {\n        {\n            if (insert) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255180092/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    for (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) {\n                        com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                        com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                        int int = left != null ? left.int : 0;\n                        int int = right != null ? right.int : 0;\n                        int int = leftHeight - rightHeight;\n                        if (delta == (-2)) {\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            int int = rightRight != null ? rightRight.int : 0;\n                            int int = rightLeft != null ? rightLeft.int : 0;\n                            int int = rightLeftHeight - rightRightHeight;\n                            if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                                rotateLeft(node);\n                            } else {\n                                assert rightDelta == 1;\n                                rotateRight(right);\n                                rotateLeft(node);\n                            }\n                            if (insert) {\n                                break;\n                            } \n                        } else if (delta == 2) {\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            int int = leftRight != null ? leftRight.int : 0;\n                            int int = leftLeft != null ? leftLeft.int : 0;\n                            int int = leftLeftHeight - leftRightHeight;\n                            if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                                rotateRight(node);\n                            } else {\n                                assert leftDelta == (-1);\n                                rotateLeft(left);\n                                rotateRight(node);\n                            }\n                            if (insert) {\n                                break;\n                            } \n                        } else if (delta == 0) {\n                            node.int = leftHeight + 1;\n                            if (insert) {\n                                break;\n                            } \n                        } else {\n                            assert (delta == (-1)) || (delta == 1);\n                            node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                            if (!insert) {\n                                break;\n                            } \n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255180092/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"insert"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[199,200,201,202,203,204,205,206,207,208,209,210,211,136,212],"tindex":"e9df82bc-3e6f-11e6-9ded-fd21f8d727eb","method":{"position":"com.google.gson.Gson:468","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src) {\n    if (src == null) {\n        {\n            if (src == null) {\n                return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            return toJsonTree(src, src.getClass());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255180092/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:118","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.Class<?>"},"failures":[213,214,215,216,217,218,219,7,220,8,221,9,222,223,224,225,226,227,228,229,12,230,13,14,231,232,16,233,234,17,235,236,237,18,201,33,238,239,240,46,47,48,49,50,241,242,243,56,244,245,87,246,247,91,94,248,249,102,250,251,252,253,254,108,109,255,256,119,257,258,122,123,259,210,211,260,125,261,262,263,264,265,266,267,268,269,270,271,272,273,138,139,140,141,274,143,150,162,163,275,276,164,277,166,278,279,168,280,281,282,283,284,285,286,182,183,287,288,289,193,290],"tindex":"e9df82bd-3e6f-11e6-9ded-672ebd4ed45e","method":{"position":"com.google.gson.internal.ConstructorConstructor:128","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nprivate <T>com.google.gson.internal.ObjectConstructor<T> newDefaultImplementationConstructor(final java.lang.reflect.Type type, java.lang.Class<? super T> rawType) {\n    if (type instanceof java.lang.Class<?>) {\n        {\n            if (java.util.Collection.java.util.Collection.java.lang.Class.isAssignableFrom(rawType)) {\n                if (java.util.SortedSet.java.util.SortedSet.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.TreeSet<java.lang.Object>()));\n                        }\n                    };\n                } else if (java.util.EnumSet.java.util.EnumSet.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        @java.lang.SuppressWarnings(value = \"rawtypes\")\n                        public T construct() {\n                            if (type instanceof java.lang.reflect.ParameterizedType) {\n                                java.lang.reflect.Type java.lang.reflect.Type = ((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0];\n                                if (elementType instanceof java.lang.Class) {\n                                    return ((T)(java.util.EnumSet.noneOf(((java.lang.Class)(elementType)))));\n                                } else {\n                                    throw new com.google.gson.JsonIOException((\"Invalid EnumSet type: \" + (type.toString())));\n                                }\n                            } else {\n                                throw new com.google.gson.JsonIOException((\"Invalid EnumSet type: \" + (type.toString())));\n                            }\n                        }\n                    };\n                } else if (java.util.Set.java.util.Set.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedHashSet<java.lang.Object>()));\n                        }\n                    };\n                } else if (java.util.Queue.java.util.Queue.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedList<java.lang.Object>()));\n                        }\n                    };\n                } else {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.ArrayList<java.lang.Object>()));\n                        }\n                    };\n                }\n            } \n            if (java.util.Map.java.util.Map.java.lang.Class.isAssignableFrom(rawType)) {\n                if (java.util.SortedMap.java.util.SortedMap.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.TreeMap<java.lang.Object, java.lang.Object>()));\n                        }\n                    };\n                } else if ((type instanceof java.lang.reflect.ParameterizedType) && (!(java.lang.String.java.lang.String.java.lang.Class.isAssignableFrom(com.google.gson.reflect.TypeToken.get(((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0]).getRawType())))) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedHashMap<java.lang.Object, java.lang.Object>()));\n                        }\n                    };\n                } else {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new com.google.gson.internal.LinkedTreeMap<java.lang.String, java.lang.Object>()));\n                        }\n                    };\n                }\n            } \n            return null;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255180092/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[291,292,293],"tindex":"e9dfa9ce-3e6f-11e6-9ded-3bef16f05839","method":{"position":"com.google.gson.internal.bind.TypeAdapters:282","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                {\n                    out.value(value);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255180092/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255180092/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"e9dfd0df-3e6f-11e6-9ded-b1286cb864bd","method":{"position":"com.google.gson.stream.JsonWriter:532","type":"CtMethodImpl","sourcecode":"private void string(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255180092/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    java.lang.String[] java.lang.String[] = boolean ? com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[] : com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[];\n                    java.io.Writer.write(\"\\\"\");\n                    int int = 0;\n                    int int = value.length();\n                    for (int int = 0 ; i < length ; i++) {\n                        char char = value.charAt(i);\n                        java.lang.String java.lang.String;\n                        if (c < 128) {\n                            replacement = replacements[c];\n                            if (replacement == null) {\n                                continue;\n                            } \n                        } else if (c == '\\u2028') {\n                            replacement = \"\\\\u2028\";\n                        } else if (c == '\\u2029') {\n                            replacement = \"\\\\u2029\";\n                        } else {\n                            continue;\n                        }\n                        if (last < i) {\n                            java.io.Writer.write(value, last, (i - last));\n                        } \n                        java.io.Writer.write(replacement);\n                        last = i + 1;\n                    }\n                    if (last < length) {\n                        java.io.Writer.write(value, last, (length - last));\n                    } \n                    java.io.Writer.write(\"\\\"\");\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255180092/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:726","type":"CtBinaryOperatorImpl","sourcecode":"value == 0"},"failures":[294,295,296,297,298,299,300,301,302],"tindex":"e9dfd0e0-3e6f-11e6-9ded-b101239a4148","method":{"position":"com.google.gson.stream.JsonWriter:476","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(long value) throws java.io.IOException {\n    if (value == 0) {\n        {\n            writeDeferredName();\n            beforeValue(false);\n            java.io.Writer.write(java.lang.Long.toString(value));\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255180092/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:213","type":"CtBinaryOperatorImpl","sourcecode":"(indent.length()) == 0"},"failures":[],"tindex":"e9dfd0e1-3e6f-11e6-9ded-dbd9ca69e93e","method":{"position":"com.google.gson.stream.JsonWriter:212","type":"CtMethodImpl","sourcecode":"public final void setIndent(java.lang.String indent) {\n    if ((indent.length()) == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255180092/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((indent.length()) == 0) {\n                com.google.gson.stream.JsonWriter.this.java.lang.String = null;\n                com.google.gson.stream.JsonWriter.this.java.lang.String = \":\";\n            } else {\n                com.google.gson.stream.JsonWriter.this.java.lang.String = indent;\n                com.google.gson.stream.JsonWriter.this.java.lang.String = \": \";\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"indent"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:274","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[303,0,1,304,2,305,306,307,3,308,4,309,310,216,311,312,313,217,5,6,218,219,7,220,8,221,9,314,222,223,224,10,11,225,226,227,228,315,229,12,230,13,14,231,15,232,16,233,234,17,235,236,237,18,19,316,199,20,317,318,319,320,321,21,22,23,322,323,24,324,325,326,327,328,329,330,331,332,25,333,26,334,27,28,335,336,337,29,338,339,340,341,342,31,343,200,344,201,345,32,33,34,202,203,238,346,35,36,204,37,38,347,348,349,39,40,350,351,352,41,42,239,353,240,354,43,355,44,356,357,358,45,359,360,361,362,363,364,365,366,241,367,242,368,243,369,51,52,53,370,371,372,373,374,54,55,375,56,376,57,58,377,378,379,380,381,382,59,294,60,61,62,383,63,384,64,65,385,295,386,387,66,296,297,388,67,389,390,68,391,392,69,393,70,71,394,395,72,73,74,75,396,397,398,76,399,400,77,401,244,78,402,79,403,404,405,245,406,80,81,82,83,84,407,85,86,408,87,409,246,410,88,411,412,413,414,89,90,247,415,416,417,418,91,92,419,420,93,421,94,422,423,95,424,425,96,426,427,97,428,429,248,430,431,432,98,433,434,435,436,437,99,438,439,100,440,441,249,442,443,444,445,101,446,447,102,448,103,250,449,450,451,452,453,454,455,456,457,458,459,460,461,462,104,463,464,105,465,466,467,468,469,470,471,472,473,474,475,476,477,478,106,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,291,498,499,500,501,502,503,504,505,506,507,508,509,510,292,511,512,513,514,251,515,516,107,517,518,519,520,521,293,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,252,253,254,108,109,205,206,207,208,209,541,110,111,112,113,114,542,543,115,544,116,545,546,547,117,548,549,118,550,551,552,553,554,255,256,555,119,257,258,120,121,556,557,558,122,123,559,259,210,211,560,561,260,124,562,563,564,125,261,565,566,126,567,568,262,263,569,570,571,572,573,574,264,575,127,128,129,130,131,132,133,134,576,135,265,577,136,266,267,268,578,137,579,269,270,271,580,272,581,582,273,138,139,140,141,274,583,142,584,143,144,145,585,586,587,588,146,589,590,591,592,593,147,594,595,148,596,149,150,151,152,597,598,599,600,601,153,154,155,156,157,162,163,602,603,275,276,604,164,277,165,166,167,278,279,168,605,280,169,170,281,606,282,607,171,283,172,173,174,175,176,177,608,178,179,609,180,181,610,284,212,611,285,612,286,613,182,183,184,186,191,614,615,192,616,617,289,618,193,619,620,621,622,194,623,624,195,290,196,301,302,197,625],"tindex":"e9dff7f2-3e6f-11e6-9ded-0f7e316f0d16","method":{"position":"com.google.gson.Gson:273","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> floatAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255180092/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                {\n                    if (serializeSpecialFloatingPointValues) {\n                        return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n                    } \n                    return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                        @java.lang.Override\n                        public java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                            if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                                in.nextNull();\n                                return null;\n                            } \n                            return ((float)(in.nextDouble()));\n                        }\n\n                        @java.lang.Override\n                        public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                            if (value == null) {\n                                out.nullValue();\n                                return ;\n                            } \n                            float float = value.floatValue();\n                            checkValidFloatingPoint(floatValue);\n                            out.value(value);\n                        }\n                    };\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255180092/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[6,348,163,626,627],"tindex":"e9dff7f3-3e6f-11e6-9ded-93414fd39c73","method":{"position":"com.google.gson.internal.bind.ObjectTypeAdapter:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Object value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255180092/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            com.google.gson.TypeAdapter<java.lang.Object> com.google.gson.TypeAdapter<java.lang.Object> = ((com.google.gson.TypeAdapter<java.lang.Object>)(com.google.gson.Gson.getAdapter(value.getClass())));\n            if (typeAdapter instanceof com.google.gson.internal.bind.ObjectTypeAdapter) {\n                out.beginObject();\n                out.endObject();\n                return ;\n            } \n            typeAdapter.write(out, value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:240","type":"CtInvocationImpl","sourcecode":"from.getRawType().equals(to.getRawType())"},"failures":[628,629,630],"tindex":"e9e01f04-3e6f-11e6-9ded-bb8a0bb278b7","method":{"position":"com.google.gson.reflect.TypeToken:238","type":"CtMethodImpl","sourcecode":"private static boolean typeEquals(java.lang.reflect.ParameterizedType from, java.lang.reflect.ParameterizedType to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeVarMap) {\n    if (to.getRawType().equals(from.getRawType())) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255180092/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (from.getRawType().equals(to.getRawType())) {\n                java.lang.reflect.Type[] java.lang.reflect.Type[] = from.getActualTypeArguments();\n                java.lang.reflect.Type[] java.lang.reflect.Type[] = to.getActualTypeArguments();\n                for (int int = 0 ; i < (fromArgs.int) ; i++) {\n                    if (!(com.google.gson.reflect.TypeToken.matches(fromArgs[i], toArgs[i], typeVarMap))) {\n                        return false;\n                    } \n                }\n                return true;\n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"to","to":"from"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[631,632,633,634,635,0,1,307,3,308,4,310,9,227,12,13,14,16,18,19,199,20,318,319,320,321,21,325,326,327,328,329,330,331,332,25,333,26,334,27,28,335,336,337,29,338,339,340,341,30,342,31,343,200,344,201,345,32,33,34,202,203,238,346,35,36,204,44,356,357,362,363,364,365,366,46,47,48,49,50,241,242,368,243,371,372,377,381,383,387,395,396,402,79,80,81,82,83,84,407,85,408,410,88,412,414,92,419,420,93,421,94,422,423,95,424,425,96,426,427,97,429,430,431,98,434,436,99,438,439,100,441,249,442,443,101,446,447,102,448,103,250,449,450,451,518,252,254,108,109,205,206,208,209,550,551,552,553,554,119,257,120,121,557,558,122,123,559,259,210,211,260,124,125,261,565,566,262,263,569,570,572,264,575,265,577,266,267,268,578,137,579,269,270,271,580,272,582,273,142,584,586,587,588,146,589,590,591,592,594,595,148,596,150,151,152,598,599,600,153,156,157,162,602,167,280,169,606,176,178,179,180,284,611,285,612,286,613,182,183,184,636,637,638,191,192,617,619,620,621,194,626,639,640],"tindex":"e9e01f05-3e6f-11e6-9ded-6f8a623c5e51","method":{"position":"com.google.gson.internal.Excluder:149","type":"CtMethodImpl","sourcecode":"public boolean excludeField(java.lang.reflect.Field field, boolean serialize) {\n    if (field.isSynthetic()) {\n        {\n            if (field.isSynthetic()) {\n                {\n                    if (field.isSynthetic()) {\n                        {\n                            if (((int) & (field.getModifiers())) != 0) {\n                                return true;\n                            } \n                            if (((double) != (com.google.gson.internal.Excluder.com.google.gson.internal.Excluder.double)) && (!(isValidVersion(field.getAnnotation(com.google.gson.annotations.Since.com.google.gson.annotations.Since.java.lang.Class), field.getAnnotation(com.google.gson.annotations.Until.com.google.gson.annotations.Until.java.lang.Class))))) {\n                                return true;\n                            } \n                            if (field.isSynthetic()) {\n                                return true;\n                            } \n                            if (boolean) {\n                                com.google.gson.annotations.Expose com.google.gson.annotations.Expose = field.getAnnotation(com.google.gson.annotations.Expose.com.google.gson.annotations.Expose.java.lang.Class);\n                                if ((annotation == null) || (serialize ? !(annotation.serialize()) : !(annotation.deserialize()))) {\n                                    return true;\n                                } \n                            } \n                            if ((!(boolean)) && (isInnerClass(field.getType()))) {\n                                return true;\n                            } \n                            if (isAnonymousOrLocal(field.getType())) {\n                                return true;\n                            } \n                            java.util.List<com.google.gson.ExclusionStrategy> java.util.List<com.google.gson.ExclusionStrategy> = serialize ? java.util.List<com.google.gson.ExclusionStrategy> : java.util.List<com.google.gson.ExclusionStrategy>;\n                            if (!(list.isEmpty())) {\n                                com.google.gson.FieldAttributes com.google.gson.FieldAttributes = new com.google.gson.FieldAttributes(field);\n                                for (com.google.gson.ExclusionStrategy com.google.gson.ExclusionStrategy : list) {\n                                    if (exclusionStrategy.shouldSkipField(fieldAttributes)) {\n                                        return true;\n                                    } \n                                }\n                            } \n                            return false;\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255180092/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255180092/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255180092/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"field"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:459","type":"CtBinaryOperatorImpl","sourcecode":"typeAdapter instanceof com.google.gson.TypeAdapter<?>"},"failures":[],"tindex":"e9e01f06-3e6f-11e6-9ded-819fe0d8950c","method":{"position":"com.google.gson.TreeTypeAdapter:103","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newTypeHierarchyFactory(java.lang.Class<?> hierarchyType, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255180092/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , null , false , hierarchyType);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"e9e04617-3e6f-11e6-9ded-cb4cc2ab5826","method":{"position":"com.google.gson.Gson:127","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonParseException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255180092/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    } else {\n        {\n            if (json == null) {\n                {\n                    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255180092/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new com.google.gson.JsonParseException();\n                    } else {\n                        {\n                            return ((T)(fromJson(json, typeOfT)));\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255180092/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonParseException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Preconditions:41","type":"CtUnaryOperatorImpl","sourcecode":"!condition"},"failures":[],"tindex":"e9e04618-3e6f-11e6-9ded-2bc0a3f32664","method":{"position":"com.google.gson.internal.$Gson$Preconditions:40","type":"CtMethodImpl","sourcecode":"public static void checkArgument(boolean condition) {\n    if (!condition) {\n        throw new java.lang.IllegalArgumentException();\n    } \n}"},"series":0,"name":"addParameterCondition","variableMap":{"condition":"condition"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[],"tindex":"e9e04619-3e6f-11e6-9ded-297d09723515","method":{"position":"com.google.gson.internal.Excluder:149","type":"CtMethodImpl","sourcecode":"public boolean excludeField(java.lang.reflect.Field field, boolean serialize) {\n    if (field.isSynthetic()) {\n        {\n            if (field.isSynthetic()) {\n                {\n                    if (field.isSynthetic()) {\n                        {\n                            if (((int) & (field.getModifiers())) != 0) {\n                                return true;\n                            } \n                            if (((double) != (com.google.gson.internal.Excluder.com.google.gson.internal.Excluder.double)) && (!(isValidVersion(field.getAnnotation(com.google.gson.annotations.Since.com.google.gson.annotations.Since.java.lang.Class), field.getAnnotation(com.google.gson.annotations.Until.com.google.gson.annotations.Until.java.lang.Class))))) {\n                                return true;\n                            } \n                            if (field.isSynthetic()) {\n                                return true;\n                            } \n                            if (boolean) {\n                                com.google.gson.annotations.Expose com.google.gson.annotations.Expose = field.getAnnotation(com.google.gson.annotations.Expose.com.google.gson.annotations.Expose.java.lang.Class);\n                                if ((annotation == null) || (serialize ? !(annotation.serialize()) : !(annotation.deserialize()))) {\n                                    return true;\n                                } \n                            } \n                            if ((!(boolean)) && (isInnerClass(field.getType()))) {\n                                return true;\n                            } \n                            if (isAnonymousOrLocal(field.getType())) {\n                                return true;\n                            } \n                            java.util.List<com.google.gson.ExclusionStrategy> java.util.List<com.google.gson.ExclusionStrategy> = serialize ? java.util.List<com.google.gson.ExclusionStrategy> : java.util.List<com.google.gson.ExclusionStrategy>;\n                            if (!(list.isEmpty())) {\n                                com.google.gson.FieldAttributes com.google.gson.FieldAttributes = new com.google.gson.FieldAttributes(field);\n                                for (com.google.gson.ExclusionStrategy com.google.gson.ExclusionStrategy : list) {\n                                    if (exclusionStrategy.shouldSkipField(fieldAttributes)) {\n                                        return true;\n                                    } \n                                }\n                            } \n                            return false;\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255180092/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255180092/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255180092/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"field"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl","sourcecode":"in == null"},"failures":[],"tindex":"e9e0461a-3e6f-11e6-9ded-5be3a85d66d9","method":{"position":"com.google.gson.TypeAdapter:254","type":"CtMethodImpl","sourcecode":"public final T fromJson(java.io.Reader in) throws java.io.IOException {\n    if (in == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255180092/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(in);\n            return read(reader);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:92","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof java.util.Iterator"},"failures":[],"tindex":"e9e06d2b-3e6f-11e6-9ded-8f1c2112d5e2","method":{"position":"com.google.gson.internal.LinkedTreeMap:574","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (o instanceof java.util.Iterator) {\n        {\n            if (o instanceof java.util.Iterator) {\n                {\n                    if (!(o instanceof java.util.Map.Entry)) {\n                        return false;\n                    } \n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n                    if (node == null) {\n                        return false;\n                    } \n                    removeInternal(node, true);\n                    return true;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255180092/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255180092/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[381,570],"tindex":"e9e06d2c-3e6f-11e6-9ded-5fe0241b6a9e","method":{"position":"com.google.gson.internal.bind.TypeAdapters:267","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255180092/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:430","type":"CtFieldReadImpl","sourcecode":"serializeNulls"},"failures":[0,1,2,305,3,4,311,5,6,7,8,10,11,225,228,315,12,230,13,14,15,16,233,17,237,18,316,20,21,23,24,325,327,329,331,332,25,333,26,334,27,28,335,29,339,30,342,31,343,200,344,201,345,32,33,34,202,203,35,36,204,37,38,348,349,39,40,350,41,239,43,44,357,45,360,362,363,364,365,366,46,47,48,49,50,241,367,242,368,243,51,52,53,373,54,55,56,57,58,379,381,59,294,60,61,62,63,64,65,295,387,66,296,297,67,68,392,69,70,71,395,72,73,74,75,396,76,399,77,78,79,403,80,81,82,83,84,85,86,87,88,411,412,414,89,90,415,417,418,91,92,93,421,94,95,96,97,430,432,98,435,437,99,439,100,440,249,101,447,102,103,455,457,104,105,472,473,106,480,481,484,487,489,490,493,494,291,506,508,510,292,513,515,107,520,521,293,522,523,524,525,529,531,535,536,538,252,108,109,205,206,207,208,209,110,111,112,113,114,115,116,117,118,119,120,121,557,122,123,559,259,210,211,560,561,260,124,562,563,564,125,126,568,264,127,128,129,130,131,132,133,134,135,265,136,266,267,268,578,137,269,270,271,272,273,138,139,140,141,142,143,144,145,585,586,146,589,592,147,148,149,150,151,152,153,154,155,156,157,158,162,163,602,603,164,277,165,166,167,168,169,170,606,282,171,172,173,174,175,176,177,608,178,179,609,180,181,284,212,611,612,286,613,182,183,184,287,288,641,186,191,192,616,617,289,193,619,194,623,624,195,196,301,302,197,625,642],"tindex":"e9e06d2d-3e6f-11e6-9ded-e3d752dbf20f","method":{"position":"com.google.gson.stream.JsonWriter:268","type":"CtMethodImpl","sourcecode":"public final void setSerializeNulls(boolean serializeNulls) {\n    if (serializeNulls) {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = serializeNulls;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255180092/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeNulls":"serializeNulls"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"e9e06d2e-3e6f-11e6-9ded-ebd46e661092","method":{"position":"com.google.gson.internal.bind.TypeAdapters:282","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                {\n                    out.value(value);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255180092/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255180092/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[],"tindex":"e9e0943f-3e6f-11e6-9ded-2d9764b4fc61","method":{"position":"com.google.gson.internal.Excluder:149","type":"CtMethodImpl","sourcecode":"public boolean excludeField(java.lang.reflect.Field field, boolean serialize) {\n    if (field.isSynthetic()) {\n        {\n            if (field.isSynthetic()) {\n                {\n                    if (field.isSynthetic()) {\n                        {\n                            if (((int) & (field.getModifiers())) != 0) {\n                                return true;\n                            } \n                            if (((double) != (com.google.gson.internal.Excluder.com.google.gson.internal.Excluder.double)) && (!(isValidVersion(field.getAnnotation(com.google.gson.annotations.Since.com.google.gson.annotations.Since.java.lang.Class), field.getAnnotation(com.google.gson.annotations.Until.com.google.gson.annotations.Until.java.lang.Class))))) {\n                                return true;\n                            } \n                            if (field.isSynthetic()) {\n                                return true;\n                            } \n                            if (boolean) {\n                                com.google.gson.annotations.Expose com.google.gson.annotations.Expose = field.getAnnotation(com.google.gson.annotations.Expose.com.google.gson.annotations.Expose.java.lang.Class);\n                                if ((annotation == null) || (serialize ? !(annotation.serialize()) : !(annotation.deserialize()))) {\n                                    return true;\n                                } \n                            } \n                            if ((!(boolean)) && (isInnerClass(field.getType()))) {\n                                return true;\n                            } \n                            if (isAnonymousOrLocal(field.getType())) {\n                                return true;\n                            } \n                            java.util.List<com.google.gson.ExclusionStrategy> java.util.List<com.google.gson.ExclusionStrategy> = serialize ? java.util.List<com.google.gson.ExclusionStrategy> : java.util.List<com.google.gson.ExclusionStrategy>;\n                            if (!(list.isEmpty())) {\n                                com.google.gson.FieldAttributes com.google.gson.FieldAttributes = new com.google.gson.FieldAttributes(field);\n                                for (com.google.gson.ExclusionStrategy com.google.gson.ExclusionStrategy : list) {\n                                    if (exclusionStrategy.shouldSkipField(fieldAttributes)) {\n                                        return true;\n                                    } \n                                }\n                            } \n                            return false;\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255180092/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255180092/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255180092/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"field"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[0,1,3,4,6,9,10,11,315,12,13,14,15,18,19,319,21,24,325,327,329,331,332,25,333,26,334,27,28,335,29,339,30,31,33,35,36,37,38,348,349,39,40,350,41,42,43,44,357,45,360,362,363,364,365,366,46,47,48,49,50,241,367,242,368,243,51,53,54,58,59,294,60,61,62,63,64,65,295,387,296,297,67,69,70,71,395,72,73,74,75,396,76,77,78,79,81,82,83,84,85,86,88,411,412,414,89,90,415,418,92,93,421,94,95,96,97,430,98,435,437,99,439,100,440,249,101,447,102,103,455,457,104,105,472,473,106,480,481,484,487,489,490,493,494,291,506,508,510,292,513,515,107,520,293,522,524,525,529,531,535,536,110,111,112,113,114,115,116,117,118,120,121,557,122,123,559,259,560,561,260,124,562,563,564,261,126,568,262,263,570,571,572,264,127,128,129,130,131,132,133,134,135,578,138,139,140,141,142,143,145,585,586,146,589,592,147,148,149,150,151,152,153,154,155,156,157,162,163,603,277,165,167,168,169,606,172,173,174,175,176,177,608,178,179,609,284,212,611,612,286,613,182,184,186,623,624,195],"tindex":"e9e09440-3e6f-11e6-9ded-ffbb8f43b8dd","method":{"position":"com.google.gson.Gson:510","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src) {\n    if (src == null) {\n        {\n            if (src == null) {\n                return toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull);\n            } \n            return toJson(src, src.getClass());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255180092/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:107","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonArray"},"failures":[],"tindex":"e9e0bb51-3e6f-11e6-9ded-8dbbb9f3dca8","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:808","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonArray) {\n        {\n            if (!(o instanceof java.util.Map.Entry)) {\n                return false;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n            if (node == null) {\n                return false;\n            } \n            removeInternal(node, true);\n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255180092/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[0,1,3,4,5,6,7,8,9,10,11,225,228,315,12,230,13,14,231,15,16,17,237,18,19,20,319,21,22,23,325,327,331,332,25,333,26,27,28,335,29,339,30,31,32,33,34,35,36,44,362,363,364,365,366,46,47,48,49,50,241,242,368,243,379,295,387,296,69,395,396,79,80,81,82,83,84,85,88,411,412,414,89,415,91,92,93,421,94,95,96,97,430,98,99,439,100,249,101,447,102,103,252,108,109,119,120,121,557,122,123,559,259,561,260,124,125,261,262,263,570,571,572,264,265,136,266,267,268,578,137,269,270,271,272,273,142,586,146,589,592,148,150,151,152,153,156,157,158,159,160,643,644,645,161,162,602,167,169,606,172,176,178,179,180,284,612,286,613,182,183,184,646,647,648,299,649,300,650,651,652,653,191,192,194,197,625,626,627,654,655,656],"tindex":"e9e0bb52-3e6f-11e6-9ded-93e3ab9ec84f","method":{"position":"com.google.gson.stream.JsonWriter:385","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter name(java.lang.String name) throws java.io.IOException {\n    if (name == null) {\n        {\n            if (name == null) {\n                throw new java.lang.NullPointerException(\"name == null\");\n            } \n            if ((java.lang.String) != null) {\n                throw new java.lang.IllegalStateException();\n            } \n            if ((int) == 0) {\n                throw new java.lang.IllegalStateException(\"JsonWriter is closed.\");\n            } \n            java.lang.String = name;\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255180092/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"e9e0bb53-3e6f-11e6-9ded-8315ccdb4f88","method":{"position":"com.google.gson.stream.JsonWriter:413","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                {\n                    if (value == null) {\n                        return nullValue();\n                    } \n                    writeDeferredName();\n                    beforeValue(false);\n                    string(value);\n                    return com.google.gson.stream.JsonWriter.this;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255180092/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255180092/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:111","type":"CtInvocationImpl","sourcecode":"primitive.isString()"},"failures":[],"tindex":"e9e0bb54-3e6f-11e6-9ded-e9255d668b68","method":{"position":"com.google.gson.JsonPrimitive:93","type":"CtMethodImpl","sourcecode":"void setValue(java.lang.Object primitive) {\n    if (primitive.isString()) {\n        {\n            if (primitive instanceof java.lang.Character) {\n                char char = ((java.lang.Character)(primitive)).charValue();\n                com.google.gson.JsonPrimitive.this.java.lang.Object = java.lang.String.valueOf(c);\n            } else {\n                com.google.gson.internal.$Gson$Preconditions.checkArgument(((primitive instanceof java.lang.Number) || (com.google.gson.JsonPrimitive.isPrimitiveOrString(primitive))));\n                com.google.gson.JsonPrimitive.this.java.lang.Object = primitive;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255180092/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"primitive"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"e9e0e265-3e6f-11e6-9ded-eba721990273","method":{"position":"com.google.gson.JsonParser:44","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement parse(java.lang.String json) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            return parse(new java.io.StringReader(json));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255180092/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:168","type":"CtUnaryOperatorImpl","sourcecode":"!(b instanceof java.lang.reflect.ParameterizedType)"},"failures":[],"tindex":"e9e0e266-3e6f-11e6-9ded-9b2c87c10505","method":{"position":"com.google.gson.internal.LinkedTreeMap:207","type":"CtMethodImpl","sourcecode":"private boolean equal(java.lang.Object a, java.lang.Object b) {\n    if (!(b instanceof java.lang.reflect.ParameterizedType)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255180092/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (a == b) || ((a != null) && (a.equals(b)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:109","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonPrimitive"},"failures":[],"tindex":"e9e0e267-3e6f-11e6-9ded-2d1f428bfa31","method":{"position":"com.google.gson.internal.LinkedTreeMap:481","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"rawtypes\")\n@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonPrimitive) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255180092/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof java.util.Map.Entry) {\n                java.util.Map.Entry java.util.Map.Entry = ((java.util.Map.Entry)(o));\n                return ((K) == null ? (other.getKey()) == null : K.equals(other.getKey())) && ((V) == null ? (other.getValue()) == null : V.equals(other.getValue()));\n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[228,231,325,331,381,265,268,270,271],"tindex":"e9e0e268-3e6f-11e6-9ded-7f022b542e2e","method":{"position":"com.google.gson.internal.bind.TypeAdapters:245","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255180092/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:118","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.Class<?>"},"failures":[213,214,215,0,1,657,2,305,306,307,3,308,4,309,310,216,312,313,217,5,6,218,219,7,220,8,221,9,314,222,223,224,10,11,225,226,227,228,315,229,12,230,13,14,231,15,232,16,233,234,17,235,236,237,18,19,316,199,20,317,318,319,320,321,21,322,323,24,324,325,326,327,328,329,330,331,332,25,333,26,334,27,28,335,336,337,29,338,339,340,341,30,342,31,343,200,344,201,345,32,33,34,202,203,238,346,35,36,204,37,38,347,348,349,39,40,350,351,352,41,42,239,353,240,354,43,355,44,356,357,358,45,359,360,361,362,363,364,365,366,46,47,48,49,50,241,367,242,368,243,369,51,52,53,370,371,372,373,374,54,55,375,56,376,57,58,377,378,379,380,381,382,59,294,60,61,62,383,63,384,64,65,385,295,386,387,66,296,297,388,67,389,390,68,391,392,69,393,70,71,394,395,72,73,74,75,396,397,398,76,399,400,77,401,244,78,402,79,404,405,245,80,81,82,83,84,407,85,86,408,87,409,246,410,88,411,412,413,414,89,90,247,415,416,417,418,91,92,419,420,93,421,94,422,423,95,424,425,96,426,427,97,429,248,430,431,98,434,435,436,437,99,438,439,100,440,441,249,442,443,444,101,446,447,102,448,103,250,449,450,451,452,453,454,455,456,457,458,459,460,461,462,104,463,464,105,465,466,467,468,469,470,471,472,473,474,475,476,477,478,106,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,291,498,499,500,501,502,503,504,505,506,507,508,509,510,292,511,512,513,514,251,515,516,107,517,518,519,520,521,293,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,252,253,254,108,109,205,206,207,208,209,541,110,111,112,113,114,542,543,115,544,116,545,546,547,117,548,549,118,550,551,552,553,554,255,256,555,119,257,258,120,121,556,557,558,122,123,559,259,210,211,560,561,260,124,562,563,564,125,261,565,566,126,567,568,262,263,569,570,571,572,573,574,264,575,127,128,129,130,131,132,133,134,576,135,265,577,136,266,267,268,578,137,579,269,270,271,580,272,582,273,138,139,140,141,274,583,142,584,143,144,145,585,586,587,588,146,589,590,591,592,593,147,594,595,148,596,149,150,151,152,597,598,599,600,601,153,154,155,156,157,162,163,602,603,275,276,604,164,277,165,166,167,279,168,605,280,169,170,281,606,282,607,283,172,173,174,175,176,177,608,178,179,609,180,181,284,212,611,285,612,286,613,182,183,184,287,288,641,186,191,614,192,617,289,193,619,620,621,622,194,623,624,195,290,196,301,302,626],"tindex":"e9e10979-3e6f-11e6-9ded-11371084b178","method":{"position":"com.google.gson.reflect.TypeToken:295","type":"CtMethodImpl","sourcecode":"public static com.google.gson.reflect.TypeToken<?> get(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255180092/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new com.google.gson.reflect.TypeToken<java.lang.Object>(type);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:137","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonObject"},"failures":[311,373,376,550,552,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682],"tindex":"e9e1097a-3e6f-11e6-9ded-9dc7e5a7e7ad","method":{"position":"com.google.gson.JsonArray:57","type":"CtMethodImpl","sourcecode":"public void add(com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonObject) {\n        {\n            if (element == null) {\n                element = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            java.util.List<com.google.gson.JsonElement>.add(element);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255180092/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:79","type":"CtUnaryOperatorImpl","sourcecode":"!(json instanceof com.google.gson.JsonPrimitive)"},"failures":[],"tindex":"e9e1097b-3e6f-11e6-9ded-2f0a883d42c6","method":{"position":"com.google.gson.Gson:847","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(com.google.gson.JsonElement json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255180092/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:462","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[325,327,331,31,33,43,508,536,137,683,158,159,160,684,643,644,645],"tindex":"e9e1308c-3e6f-11e6-9ded-c1e3f3090147","method":{"position":"com.google.gson.Gson:297","type":"CtMethodImpl","sourcecode":"private void checkValidFloatingPoint(double value) {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                throw new java.lang.IllegalArgumentException(((value + \" is not a valid double value as per JSON specification. To override this\") + \" behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.\"));\n            } \n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255180092/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"e9e1308d-3e6f-11e6-9ded-a9dced2eb8e9","method":{"position":"com.google.gson.Gson:591","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255180092/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = getAdapter(com.google.gson.reflect.TypeToken.get(typeOfSrc));\n            boolean boolean = writer.isLenient();\n            writer.setLenient(true);\n            boolean boolean = writer.isHtmlSafe();\n            writer.setHtmlSafe(boolean);\n            boolean boolean = writer.getSerializeNulls();\n            writer.setSerializeNulls(boolean);\n            try {\n                ((com.google.gson.TypeAdapter<java.lang.Object>)(adapter)).write(writer, src);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            } finally {\n                writer.setLenient(oldLenient);\n                writer.setHtmlSafe(oldHtmlSafe);\n                writer.setSerializeNulls(oldSerializeNulls);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"e9e1308e-3e6f-11e6-9ded-170f35a61148","method":{"position":"com.google.gson.Gson:127","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonParseException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255180092/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    } else {\n        {\n            if (json == null) {\n                {\n                    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255180092/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new com.google.gson.JsonParseException();\n                    } else {\n                        {\n                            return ((T)(fromJson(json, typeOfT)));\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255180092/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonParseException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[325,327,331,480,487,490,508,536,137,683,158,159,160,684,643,644,645,289],"tindex":"e9e1308f-3e6f-11e6-9ded-79e0bbd8f3f1","method":{"position":"com.google.gson.Gson:261","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            double double = value.doubleValue();\n            checkValidFloatingPoint(doubleValue);\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255180092/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[0,1,2,305,3,4,311,5,6,7,8,9,10,11,225,228,315,12,230,13,14,231,15,16,233,17,237,18,19,316,20,319,21,24,325,327,329,331,332,25,333,26,334,27,28,335,29,339,30,31,32,33,34,35,36,37,38,348,349,39,40,350,41,42,239,43,44,357,45,360,362,363,364,365,366,46,47,48,49,50,241,367,242,368,243,51,52,53,373,54,55,56,57,58,379,59,294,60,61,62,63,64,65,295,387,66,296,297,67,68,392,69,70,71,395,72,73,74,75,396,76,77,78,79,81,82,83,84,85,86,87,88,411,412,414,89,90,415,417,418,91,92,93,421,94,95,96,97,430,98,435,437,99,439,100,440,249,101,447,102,103,455,457,104,105,472,473,106,480,481,484,487,489,490,493,494,291,506,508,510,292,513,515,107,520,521,293,522,523,524,525,529,531,535,536,538,252,108,109,110,111,112,113,114,115,116,117,118,119,120,121,557,122,123,559,259,560,561,260,124,562,563,564,125,261,126,568,262,263,570,571,572,264,127,128,129,130,131,132,133,134,135,265,136,266,267,268,578,137,269,270,271,272,138,139,140,141,142,143,144,145,585,586,146,589,592,147,148,149,150,151,152,153,154,155,156,157,158,162,163,602,603,164,277,165,166,167,168,169,170,606,282,171,172,173,174,175,176,177,608,178,179,609,180,181,284,212,611,612,286,613,182,183,184,186,194,623,624,195,196,301,302],"tindex":"e9e157a0-3e6f-11e6-9ded-9dfce9b7cb52","method":{"position":"com.google.gson.Gson:532","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255180092/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n            toJson(src, typeOfSrc, writer);\n            return writer.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"e9e157a1-3e6f-11e6-9ded-df0423176af5","method":{"position":"com.google.gson.internal.bind.TypeAdapters:297","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255180092/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.JsonObject:54","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[311,18,22,23,31,52,373,55,56,57,379,392,70,72,76,86,87,88,411,412,414,89,90,415,417,418,91,428,252,108,109,205,206,208,209,119,568,571,127,129,130,132,136,140,171,175,180,181,658,685,185,624,197,625,642,666,667,654,655,669,656],"tindex":"e9e157a2-3e6f-11e6-9ded-bf87ab48923f","method":{"position":"com.google.gson.internal.bind.TypeAdapters:680","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, com.google.gson.JsonElement value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if ((value == null) || (value.isJsonNull())) {\n                out.nullValue();\n            } else if (value.isJsonPrimitive()) {\n                com.google.gson.JsonPrimitive com.google.gson.JsonPrimitive = value.getAsJsonPrimitive();\n                if (primitive.isNumber()) {\n                    out.value(primitive.getAsNumber());\n                } else if (primitive.isBoolean()) {\n                    out.value(primitive.getAsBoolean());\n                } else {\n                    out.value(primitive.getAsString());\n                }\n            } else if (value.isJsonArray()) {\n                out.beginArray();\n                for (com.google.gson.JsonElement com.google.gson.JsonElement : value.getAsJsonArray()) {\n                    write(out, e);\n                }\n                out.endArray();\n            } else if (value.isJsonObject()) {\n                out.beginObject();\n                for (java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> : value.getAsJsonObject().entrySet()) {\n                    out.name(e.getKey());\n                    write(out, e.getValue());\n                }\n                out.endObject();\n            } else {\n                throw new java.lang.IllegalArgumentException((\"Couldn't write \" + (value.getClass())));\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255180092/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:111","type":"CtInvocationImpl","sourcecode":"primitive.isString()"},"failures":[342,200,400,686,687,688],"tindex":"e9e17eb3-3e6f-11e6-9ded-47c04c196f3d","method":{"position":"com.google.gson.JsonPrimitive:333","type":"CtMethodImpl","sourcecode":"private static boolean isIntegral(com.google.gson.JsonPrimitive primitive) {\n    if (primitive.isString()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255180092/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((primitive.java.lang.Object) instanceof java.lang.Number) {\n                java.lang.Number java.lang.Number = ((java.lang.Number)(primitive.java.lang.Object));\n                return ((((number instanceof java.math.BigInteger) || (number instanceof java.lang.Long)) || (number instanceof java.lang.Integer)) || (number instanceof java.lang.Short)) || (number instanceof java.lang.Byte);\n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"primitive"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:287","type":"CtBinaryOperatorImpl","sourcecode":"replacement != null"},"failures":[199,321,342,31,343,200,79,552,553,607,180,184,689,690,691,692,693,694,695,696],"tindex":"e9e17eb4-3e6f-11e6-9ded-83a6eaad4d0c","method":{"position":"com.google.gson.internal.LinkedTreeMap:284","type":"CtMethodImpl","sourcecode":"private void replaceInParent(com.google.gson.internal.LinkedTreeMap.Node<K, V> node, com.google.gson.internal.LinkedTreeMap.Node<K, V> replacement) {\n    if (node != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255180092/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n            if (replacement != null) {\n                replacement.com.google.gson.internal.LinkedTreeMap.Node<K, V> = parent;\n            } \n            if (parent != null) {\n                if ((parent.com.google.gson.internal.LinkedTreeMap.Node<K, V>) == node) {\n                    parent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                } else {\n                    assert (parent.com.google.gson.internal.LinkedTreeMap.Node<K, V>) == node;\n                    parent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                }\n            } else {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"replacement":"node"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[494],"tindex":"e9e1a5c5-3e6f-11e6-9ded-d58e972fcda0","method":{"position":"com.google.gson.internal.bind.TypeAdapters:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255180092/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"e9e1a5c6-3e6f-11e6-9ded-25ec644f5d20","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:175","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255180092/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            if (!(isLenient())) {\n                double double = value.doubleValue();\n                if ((java.lang.Double.isNaN(d)) || (java.lang.Double.isInfinite(d))) {\n                    throw new java.lang.IllegalArgumentException((\"JSON forbids NaN and infinities: \" + value));\n                } \n            } \n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonArray:58","type":"CtBinaryOperatorImpl","sourcecode":"element == null"},"failures":[663],"tindex":"e9e1a5c7-3e6f-11e6-9ded-d53d1e7c2e6a","method":{"position":"com.google.gson.JsonArray:115","type":"CtMethodImpl","sourcecode":"public boolean contains(com.google.gson.JsonElement element) {\n    if (element == null) {\n        {\n            return java.util.List<com.google.gson.JsonElement>.contains(element);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255180092/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:131","type":"CtBinaryOperatorImpl","sourcecode":"(type) instanceof java.lang.Class<?>"},"failures":[],"tindex":"e9e1a5c8-3e6f-11e6-9ded-0d89eb6f2e34","method":{"position":"com.google.gson.internal.$Gson$Types:117","type":"CtMethodImpl","sourcecode":"public static java.lang.Class<?> getRawType(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class<?>) {\n        return ((java.lang.Class<?>)(type));\n    } else if (type instanceof java.lang.reflect.ParameterizedType) {\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(type));\n        java.lang.reflect.Type java.lang.reflect.Type = parameterizedType.getRawType();\n        com.google.gson.internal.$Gson$Preconditions.checkArgument((rawType instanceof java.lang.Class));\n        return ((java.lang.Class<?>)(rawType));\n    } else if (type instanceof java.lang.reflect.GenericArrayType) {\n        java.lang.reflect.Type java.lang.reflect.Type = ((java.lang.reflect.GenericArrayType)(type)).getGenericComponentType();\n        return java.lang.reflect.Array.newInstance(com.google.gson.internal.$Gson$Types.getRawType(componentType), 0).getClass();\n    } else if (type instanceof java.lang.reflect.TypeVariable) {\n        return java.lang.Object.java.lang.Object.java.lang.Class;\n    } else if (type instanceof java.lang.reflect.WildcardType) {\n        return com.google.gson.internal.$Gson$Types.getRawType(((java.lang.reflect.WildcardType)(type)).getUpperBounds()[0]);\n    } else {\n        java.lang.String java.lang.String = type == null ? \"null\" : type.getClass().getName();\n        throw new java.lang.IllegalArgumentException(((((\"Expected a Class, ParameterizedType, or \" + \"GenericArrayType, but <\") + type) + \"> is of type \") + className));\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1413","type":"CtVariableReadImpl","sourcecode":"throwOnEof"},"failures":[],"tindex":"e9e1ccd9-3e6f-11e6-9ded-b52e8b074e71","method":{"position":"com.google.gson.stream.JsonReader:1331","type":"CtMethodImpl","sourcecode":"private int nextNonWhitespace(boolean throwOnEof) throws java.io.IOException {\n    if (throwOnEof) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255180092/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            char[] char[] = com.google.gson.stream.JsonReader.this.char[];\n            int int = int;\n            int int = int;\n            while (true) {\n                if (p == l) {\n                    int = p;\n                    if (!(fillBuffer(1))) {\n                        break;\n                    } \n                    p = int;\n                    l = int;\n                } \n                int int = buffer[(p++)];\n                if (c == '\\n') {\n                    (int)++;\n                    int = p;\n                    continue;\n                } else if (((c == ' ') || (c == '\\r')) || (c == '\\t')) {\n                    continue;\n                } \n                if (c == '/') {\n                    int = p;\n                    if (p == l) {\n                        (int)--;\n                        boolean boolean = fillBuffer(2);\n                        (int)++;\n                        if (!charsLoaded) {\n                            return c;\n                        } \n                    } \n                    checkLenient();\n                    char char = buffer[int];\n                    switch (peek) {\n                        case '*' :\n                            (int)++;\n                            if (!(skipTo(\"*/\"))) {\n                                throw syntaxError(\"Unterminated comment\");\n                            } \n                            p = (int) + 2;\n                            l = int;\n                            continue;\n                        case '/' :\n                            (int)++;\n                            skipToEndOfLine();\n                            p = int;\n                            l = int;\n                            continue;\n                        default :\n                            return c;\n                    }\n                } else if (c == '#') {\n                    int = p;\n                    checkLenient();\n                    skipToEndOfLine();\n                    p = int;\n                    l = int;\n                } else {\n                    int = p;\n                    return c;\n                }\n            }\n            if (throwOnEof) {\n                throw new java.io.EOFException(((((\"End of input\" + \" at line \") + (getLineNumber())) + \" column \") + (getColumnNumber())));\n            } else {\n                return -1;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"throwOnEof":"throwOnEof"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:125","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonObject"},"failures":[],"tindex":"e9e1ccda-3e6f-11e6-9ded-99d6c1b039df","method":{"position":"com.google.gson.JsonArray:81","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement set(int index, com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255180092/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return java.util.List<com.google.gson.JsonElement>.set(index, element);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[],"tindex":"e9e1ccdb-3e6f-11e6-9ded-5dffe83cc133","method":{"position":"com.google.gson.Gson:133","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src) {\n    if (src != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255180092/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return toJsonTree(src);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"e9e1f3ec-3e6f-11e6-9ded-f3a24a8f46c4","method":{"position":"com.google.gson.stream.JsonWriter:532","type":"CtMethodImpl","sourcecode":"private void string(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255180092/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    java.lang.String[] java.lang.String[] = boolean ? com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[] : com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[];\n                    java.io.Writer.write(\"\\\"\");\n                    int int = 0;\n                    int int = value.length();\n                    for (int int = 0 ; i < length ; i++) {\n                        char char = value.charAt(i);\n                        java.lang.String java.lang.String;\n                        if (c < 128) {\n                            replacement = replacements[c];\n                            if (replacement == null) {\n                                continue;\n                            } \n                        } else if (c == '\\u2028') {\n                            replacement = \"\\\\u2028\";\n                        } else if (c == '\\u2029') {\n                            replacement = \"\\\\u2029\";\n                        } else {\n                            continue;\n                        }\n                        if (last < i) {\n                            java.io.Writer.write(value, last, (i - last));\n                        } \n                        java.io.Writer.write(replacement);\n                        last = i + 1;\n                    }\n                    if (last < length) {\n                        java.io.Writer.write(value, last, (length - last));\n                    } \n                    java.io.Writer.write(\"\\\"\");\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255180092/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"e9e1f3ed-3e6f-11e6-9ded-2b28b742cb01","method":{"position":"com.google.gson.Gson:552","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        {\n            if (src != null) {\n                toJson(src, src.getClass(), writer);\n            } else {\n                toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull, writer);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255180092/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:250","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[],"tindex":"e9e1f3ee-3e6f-11e6-9ded-63403e2e8108","method":{"position":"com.google.gson.Gson:273","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> floatAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255180092/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                {\n                    if (serializeSpecialFloatingPointValues) {\n                        return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n                    } \n                    return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                        @java.lang.Override\n                        public java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                            if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                                in.nextNull();\n                                return null;\n                            } \n                            return ((float)(in.nextDouble()));\n                        }\n\n                        @java.lang.Override\n                        public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                            if (value == null) {\n                                out.nullValue();\n                                return ;\n                            } \n                            float float = value.floatValue();\n                            checkValidFloatingPoint(floatValue);\n                            out.value(value);\n                        }\n                    };\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255180092/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"e9e21aff-3e6f-11e6-9ded-95452e739ff1","method":{"position":"com.google.gson.Gson:491","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255180092/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.bind.JsonTreeWriter com.google.gson.internal.bind.JsonTreeWriter = new com.google.gson.internal.bind.JsonTreeWriter();\n            toJson(src, typeOfSrc, writer);\n            return writer.get();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"e9e21b00-3e6f-11e6-9ded-25d4a23c0fe3","method":{"position":"com.google.gson.JsonObject:78","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.String value) {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255180092/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            add(property, createJsonElement(value));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":58,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
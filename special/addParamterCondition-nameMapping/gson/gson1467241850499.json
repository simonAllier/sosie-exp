{"failureDictionary":{"com.google.gson.JsonStreamParserTest.testNoSideEffectForHasNext":663,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":22,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":552,"com.google.gson.functional.StringTest.testStringValueDeserialization":550,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":654,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":19,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":527,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":427,"com.google.gson.JsonPrimitiveTest.testDeepCopy":686,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":494,"com.google.gson.stream.JsonWriterTest.testRepeatedName":651,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":30,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":91,"com.google.gson.MixedStreamTest.testWriteLenient":183,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":568,"com.google.gson.internal.bind.JsonTreeWriterTest.testPrematureClose":641,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":455,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":434,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":106,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":281,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":284,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":454,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":532,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":159,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":592,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":225,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":502,"com.google.gson.internal.bind.JsonElementReaderTest.testStrictNansAndInfinities":699,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":145,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":578,"com.google.gson.JsonParserTest.testParseUnquotedMultiWordStringFails":674,"com.google.gson.functional.ObjectTest.testSingletonLists":238,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":162,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":428,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":487,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":553,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":658,"com.google.gson.stream.JsonWriterTest.testStrings":656,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":85,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":230,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":609,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":65,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":466,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":191,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":534,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":151,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":280,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":566,"com.google.gson.DefaultDateTypeAdapterTest.testDatePattern":666,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":179,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":114,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":528,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":358,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":92,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":187,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":141,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":357,"com.google.gson.functional.EnumTest.testEnumCaseMapping":591,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":3,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":551,"com.google.gson.functional.JsonTreeTest.testToJsonTree":205,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":480,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":119,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":441,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":216,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreBehindInVersion":635,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":271,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":408,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":278,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":387,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":424,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":489,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":126,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":601,"com.google.gson.functional.ObjectTest.testNullDeserialization":473,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":232,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":563,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":461,"com.google.gson.JsonPrimitiveTest.testParsingStringAsBoolean":682,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":320,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":627,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":495,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":90,"com.google.gson.internal.bind.JsonElementReaderTest.testLenientNansAndInfinities":698,"com.google.gson.JsonArrayTest.testEqualsOnEmptyArray":659,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":139,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":289,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":470,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":626,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":305,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":400,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":442,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":275,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":541,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":540,"com.google.gson.JsonParserTest.testParseString":676,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":64,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":95,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":279,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testDifferentSerializeAndDeserializeField":629,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":515,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":407,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":545,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":248,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":385,"com.google.gson.DefaultDateTypeAdapterTest.testFormatUsesDefaultTimezone":670,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":426,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":514,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":351,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":525,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":569,"com.google.gson.functional.StreamingTypeAdaptersTest.testFromJsonTree":673,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":200,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":421,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":105,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":336,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":71,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":367,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":96,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":575,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":526,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":247,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":380,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":177,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":293,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":458,"com.google.gson.JsonPrimitiveTest.testEqualsAcrossTypes":689,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":37,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":363,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":499,"com.google.gson.metrics.PerformanceTest.testDummy":340,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":163,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":209,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":265,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":170,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":73,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":369,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":444,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":10,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":433,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":167,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":423,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":288,"com.google.gson.JsonArrayTest.testEqualsNonEmptyArray":660,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":450,"com.google.gson.functional.CollectionTest.testSetDeserialization":606,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":226,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":242,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":372,"com.google.gson.functional.EnumTest.testEnumSet":584,"com.google.gson.JsonStreamParserTest.testIterator":664,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":518,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":266,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":72,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":347,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":412,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":244,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":186,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":264,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":529,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":169,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":535,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":136,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":231,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":97,"com.google.gson.functional.MapTest.testHashMapDeserialization":342,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":492,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":598,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":431,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":24,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":178,"com.google.gson.MixedStreamTest.testReadNulls":621,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":20,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":38,"com.google.gson.DefaultDateTypeAdapterTest.testParsingDatesFormattedWithSystemLocale":668,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":101,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":449,"com.google.gson.functional.MapTest.testSortedMap":361,"com.google.gson.functional.MapTest.testMapSerialization":297,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":23,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":6,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":523,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":389,"com.google.gson.functional.MapTest.testSerializeMaps":14,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":54,"com.google.gson.functional.MapTest.testComplexKeysSerialization":364,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":371,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":368,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":642,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":304,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":233,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":589,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":134,"com.google.gson.internal.LinkedTreeMapTest.testRemoveRootDoesNotDoubleUnlink":339,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":48,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":447,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":588,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":117,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":693,"com.google.gson.internal.bind.JsonElementReaderTest.testWrongType":700,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":32,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":472,"com.google.gson.functional.MapTest.testStringKeyDeserialization":366,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":392,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":77,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":99,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":299,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":498,"com.google.gson.functional.PrettyPrintingTest.testMap":115,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":174,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":493,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":329,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":26,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":66,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":404,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":190,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":328,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":394,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":556,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":560,"com.google.gson.functional.MapTest.testMapSerializationEmpty":365,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":418,"com.google.gson.functional.CollectionTest.testQueueSerialization":599,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":519,"com.google.gson.functional.MapTest.testMapOfMapSerialization":356,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":513,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":425,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":603,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":94,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":222,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":86,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictBoxedNansAndInfinities":644,"com.google.gson.functional.FieldNamingTest.testIdentity":55,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":554,"com.google.gson.JsonStreamParserTest.testCallingNextBeyondAvailableInput":661,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":74,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":252,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":474,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":36,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":108,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":204,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":237,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":481,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":188,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testSkipNonAnnotatedFields":628,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":182,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":555,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":312,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":451,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":436,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":1,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":414,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":221,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":420,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":440,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":341,"com.google.gson.functional.MapTest.testMapSubclassSerialization":344,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":539,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":291,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":583,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":374,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":149,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":286,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":295,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":511,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":403,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":549,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":570,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":446,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":263,"com.google.gson.functional.EnumTest.testEnumSubclass":586,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":314,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":192,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":464,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":309,"com.google.gson.GsonBuilderTest.testRegisterTypeAdapterForCoreType":193,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":287,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":531,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":76,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":44,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":483,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":236,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":516,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":452,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":207,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":0,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":386,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":460,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":520,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":35,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":311,"com.google.gson.stream.JsonWriterTest.testObjectsInArrays":652,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":438,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":453,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":13,"com.google.gson.MixedStreamTest.testWriteNulls":619,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":302,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":573,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":382,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":69,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":582,"com.google.gson.CommentsTest.testParseComments":625,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":81,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":239,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":579,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":258,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":390,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":530,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":5,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":360,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":558,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":181,"com.google.gson.MixedStreamTest.testReadInvalidState":617,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":223,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":270,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":63,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":322,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":7,"com.google.gson.JsonParserTest.testParseMixedArray":678,"com.google.gson.DefaultDateTypeAdapterTest.testParsingDatesFormattedWithUsLocale":671,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":491,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":395,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":255,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAheadInVersion":633,"com.google.gson.internal.bind.JsonTreeWriterTest.testWriteAfterClose":645,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":506,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":220,"com.google.gson.JsonArrayTest.testRemove":692,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":58,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":318,"com.google.gson.functional.MapTest.testMapDeserialization":350,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":384,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":422,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":120,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":12,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":123,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":333,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":214,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":349,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":128,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":124,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":49,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":203,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":587,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":402,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":249,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":465,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":39,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":612,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":208,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":409,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":146,"com.google.gson.internal.bind.JsonElementReaderTest.testNumbersFromStrings":701,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":47,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":235,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":116,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":359,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":639,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":439,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":479,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":83,"com.google.gson.functional.PrimitiveTest.testShortSerialization":321,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":130,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":533,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":143,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictNansAndInfinities":643,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":512,"com.google.gson.JsonParserTest.testParseEmptyString":679,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":316,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":413,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":490,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":51,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":148,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":282,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":290,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":345,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":505,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":172,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":323,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":571,"com.google.gson.DefaultDateTypeAdapterTest.testFormattingInFr":669,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":647,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":61,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":135,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":338,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":624,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":325,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":544,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":195,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":34,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":75,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":250,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":376,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":150,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":397,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":648,"com.google.gson.JsonPrimitiveTest.testStringsAndChar":683,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":537,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":112,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":78,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":517,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":477,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":457,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":590,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":41,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":373,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":283,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":410,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":611,"com.google.gson.InnerClassExclusionStrategyTest.testExcludeInnerClassField":636,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":79,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":122,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":59,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":129,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":497,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":104,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":415,"com.google.gson.stream.JsonWriterTest.testNullStringValue":649,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":131,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":430,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":212,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":596,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":484,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":538,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":313,"com.google.gson.JsonArrayTest.testSet":690,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":100,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":273,"com.google.gson.JsonPrimitiveTest.testEquals":685,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":127,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":585,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":28,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":8,"com.google.gson.functional.MapTest.testGeneralMapField":17,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":456,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":379,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":547,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":173,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":217,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":614,"com.google.gson.DefaultDateTypeAdapterTest.testDateSerialization":665,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testSkipExplicitlySkippedFields":632,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":435,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":362,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":398,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":488,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":594,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":317,"com.google.gson.MixedStreamTest.testReadMixedStreamed":623,"com.google.gson.JsonObjectTest.testDeepCopy":694,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":352,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":411,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":507,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":103,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":189,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":607,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":161,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":521,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":142,"com.google.gson.internal.bind.JsonTreeWriterTest.testEmptyWriter":696,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":168,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":227,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":353,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":581,"com.google.gson.JsonArrayTest.testDeepCopy":691,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":343,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":82,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":324,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":165,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":154,"com.google.gson.stream.JsonWriterTest.testArraysInObjects":650,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":508,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":646,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":57,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":574,"com.google.gson.JsonPrimitiveTest.testEqualsDoesNotEquateStringAndNonStringTypes":684,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":253,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":396,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":602,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":133,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":88,"com.google.gson.functional.ObjectTest.testNestedDeserialization":478,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":180,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":468,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":25,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":206,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":140,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":546,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":257,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":31,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":354,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":557,"com.google.gson.JsonParserTest.testParseUnquotedStringArrayFails":680,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":262,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":98,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":40,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":110,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":572,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":331,"com.google.gson.functional.ObjectTest.testNullSerialization":462,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":43,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":580,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":346,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":197,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":482,"com.google.gson.functional.MapTest.testInterfaceTypeMap":16,"com.google.gson.stream.JsonWriterTest.testNonFiniteBoxedDoubles":334,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":388,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":175,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":211,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":485,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":194,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":272,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testNeverSkipExplicitlyExposedAnnotatedFields":631,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":46,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":613,"com.google.gson.MixedStreamTest.testReadClosed":618,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":399,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":138,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":500,"com.google.gson.MixedStreamTest.testWriteClosed":622,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":27,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":600,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":240,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":375,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":443,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":267,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":210,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":260,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":251,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":256,"com.google.gson.LongSerializationPolicyTest.testStringLongSerialization":672,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":229,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":215,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":241,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":330,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":155,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeWithCustomTypeAdapter":196,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":524,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":157,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":45,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":604,"com.google.gson.DefaultDateTypeAdapterTest.testFormattingInEnUs":667,"com.google.gson.internal.bind.JsonElementReaderTest.testSkipValue":697,"com.google.gson.internal.bind.JsonElementReaderTest.testStrings":702,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":60,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":113,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":218,"com.google.gson.stream.JsonWriterTest.testNumbers":335,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":548,"com.google.gson.JsonPrimitiveTest.testParsingStringAsNumber":688,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":93,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":202,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":405,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":234,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":377,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":259,"com.google.gson.functional.CollectionTest.testQueueDeserialization":610,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":510,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":522,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":562,"com.google.gson.InnerClassExclusionStrategyTest.testIncludeStaticNestedClassField":637,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":21,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":62,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":156,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":15,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":471,"com.google.gson.stream.JsonWriterTest.testDeepNestingObjects":655,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":417,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":276,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":476,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":595,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":294,"com.google.gson.functional.MapTest.testRawMapSerialization":298,"com.google.gson.JsonParserTest.testParseReader":675,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":608,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":429,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":277,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":199,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":245,"com.google.gson.JsonPrimitiveTest.testExponential":687,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":11,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":132,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":638,"com.google.gson.functional.PrimitiveTest.testByteSerialization":319,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":381,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":445,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":640,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":29,"com.google.gson.ObjectTypeAdapterTest.testSerialize":296,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":171,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":496,"com.google.gson.JsonPrimitiveTest.testEqualsIntegerAndBigInteger":332,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":107,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":303,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":52,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":185,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":268,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":559,"com.google.gson.functional.MapTest.testMapWithQuotes":355,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":307,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":503,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":561,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":70,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":102,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":87,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":201,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":542,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":306,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":224,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":125,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":261,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":475,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":121,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":56,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":315,"com.google.gson.functional.ObjectTest.testEmptyStringDeserialization":463,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":393,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":459,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":228,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":406,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":109,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":153,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":416,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":536,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":67,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":605,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":383,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":144,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":300,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":437,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":42,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":254,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":158,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":292,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAtSameVersion":634,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":448,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":147,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":486,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testNeverSkipExposedAnnotatedFields":630,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":84,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":326,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":467,"com.google.gson.functional.ObjectTest.testNestedSerialization":246,"com.google.gson.JsonObjectTest.testAddingStringProperties":695,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":274,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":310,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":565,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":593,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":164,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":18,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":9,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":111,"com.google.gson.JsonParserTest.testParseUnquotedSingleWordStringFails":677,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":184,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":616,"com.google.gson.stream.JsonWriterTest.testUnicodeLineBreaksEscaped":657,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":243,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":576,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":543,"com.google.gson.JsonPrimitiveTest.testBoolean":681,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":213,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":160,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":419,"com.google.gson.GsonBuilderTest.testCreatingMoreThanOnce":2,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":4,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":501,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":401,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":469,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":152,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":327,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":564,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":50,"com.google.gson.functional.CollectionTest.testSetSerialization":285,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":615,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":80,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":118,"com.google.gson.functional.StringTest.testStringValueSerialization":567,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":198,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":33,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":219,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":597,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":378,"com.google.gson.MixedStreamTest.testWriteInvalidState":620,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":89,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":504,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":391,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":509,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":176,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":308,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":53,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":68,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":577,"com.google.gson.JsonStreamParserTest.testParseTwoStrings":662,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":137,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":337,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":269,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":432,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":370,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":348,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":653,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":166,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":301},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:122","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"b8803597-3e4e-11e6-84b0-7575dd8e272f","method":{"position":"com.google.gson.internal.$Gson$Types:93","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type canonicalize(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class) {\n        java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(type));\n        return c.isArray() ? new com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl(com.google.gson.internal.$Gson$Types.canonicalize(c.getComponentType())) : c;\n    } else if (type instanceof java.lang.reflect.ParameterizedType) {\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(type));\n        return new com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl(p.getOwnerType() , p.getRawType() , p.getActualTypeArguments());\n    } else if (type instanceof java.lang.reflect.GenericArrayType) {\n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(type));\n        return new com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl(g.getGenericComponentType());\n    } else if (type instanceof java.lang.reflect.WildcardType) {\n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(type));\n        return new com.google.gson.internal.$Gson$Types.WildcardTypeImpl(w.getUpperBounds() , w.getLowerBounds());\n    } else {\n        return type;\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:554","type":"CtBinaryOperatorImpl","sourcecode":"(datePattern != null) && (!(\"\".equals(datePattern.trim())))"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192],"tindex":"b88083b8-3e4e-11e6-84b0-55518ad5b548","method":{"position":"com.google.gson.GsonBuilder:551","type":"CtMethodImpl","sourcecode":"private void addTypeAdaptersForDate(java.lang.String datePattern, int dateStyle, int timeStyle, java.util.List<com.google.gson.TypeAdapterFactory> factories) {\n    if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917430/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n                {\n                    com.google.gson.DefaultDateTypeAdapter com.google.gson.DefaultDateTypeAdapter;\n                    if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n                        dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(datePattern);\n                    } else if ((dateStyle != (java.text.DateFormat.java.text.DateFormat.int)) && (timeStyle != (java.text.DateFormat.java.text.DateFormat.int))) {\n                        dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(dateStyle , timeStyle);\n                    } else {\n                        return ;\n                    }\n                    factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.util.Date.java.util.Date.java.lang.Class), dateTypeAdapter));\n                    factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Timestamp.java.sql.Timestamp.java.lang.Class), dateTypeAdapter));\n                    factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Date.java.sql.Date.java.lang.Class), dateTypeAdapter));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917430/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"datePattern":"datePattern"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"b880aac9-3e4e-11e6-84b0-6386b8c08357","method":{"position":"com.google.gson.Gson:719","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.lang.String json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917430/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (json == null) {\n                {\n                    if (json == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917430/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new com.google.gson.JsonSyntaxException();\n                    } else {\n                        {\n                            if (json == null) {\n                                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917430/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                throw new com.google.gson.JsonSyntaxException();\n                            } else {\n                                {\n                                    if (json == null) {\n                                        return null;\n                                    } \n                                    java.io.StringReader java.io.StringReader = new java.io.StringReader(json);\n                                    T T = ((T)(fromJson(reader, typeOfT)));\n                                    return target;\n                                }\n                            }\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917430/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:501","type":"CtBinaryOperatorImpl","sourcecode":"typeAdapter instanceof com.google.gson.TypeAdapter<?>"},"failures":[193,58,60,61,63,68,69,136,137,140,143,194,195,196,174,190,191,192],"tindex":"b880aaca-3e4e-11e6-84b0-499b32f613de","method":{"position":"com.google.gson.GsonBuilder:447","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\npublic com.google.gson.GsonBuilder registerTypeAdapter(java.lang.reflect.Type type, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917430/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.$Gson$Preconditions.checkArgument(((((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) || (typeAdapter instanceof com.google.gson.InstanceCreator<?>)) || (typeAdapter instanceof com.google.gson.TypeAdapter<?>)));\n            if (typeAdapter instanceof com.google.gson.InstanceCreator<?>) {\n                java.util.Map<java.lang.reflect.Type, com.google.gson.InstanceCreator<?>>.put(type, ((com.google.gson.InstanceCreator)(typeAdapter)));\n            } \n            if ((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) {\n                com.google.gson.reflect.TypeToken<?> com.google.gson.reflect.TypeToken<?> = com.google.gson.reflect.TypeToken.get(type);\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.TreeTypeAdapter.newFactoryWithMatchRawType(typeToken, typeAdapter));\n            } \n            if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.internal.bind.TypeAdapters.newFactory(com.google.gson.reflect.TypeToken.get(type), ((com.google.gson.TypeAdapter)(typeAdapter))));\n            } \n            return com.google.gson.GsonBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:120","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonNull"},"failures":[],"tindex":"b880d1db-3e4e-11e6-84b0-bbcc5fc28d89","method":{"position":"com.google.gson.internal.LinkedTreeMap:570","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonObject) {\n        {\n            if (o instanceof com.google.gson.JsonNull) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917430/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return (o instanceof java.util.Map.Entry) && ((findByEntry(((java.util.Map.Entry<?, ?>)(o)))) != null);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917430/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[0,1,7,9,15,16,197,17,19,20,22,23,26,198,30,32,36,37,38,199,39,41,42,43,200,47,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,51,52,53,54,55,218,219,220,221,222,223,224,225,226,227,228,229,230,231,68,232,69,233,234,76,78,80,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,101,104,105,106,107,109,110,111,252,253,254,255,256,257,258,259,260,116,117,121,122,127,128,129,131,134,261,262,263,264,265,266,267,268,269,270,271,272,150,153,154,157,162,165,273,274,171,275,276,194,195,277,278,279,280,281,282,283,284,285,286,176,177,179,287,288,289,290,291,292,293,294,295,186,296],"tindex":"b880d1dc-3e4e-11e6-84b0-f7f9d06631f0","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n@java.lang.Override\nvoid write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value == null) {\n        {\n            java.lang.Object java.lang.Object = field.get(value);\n            com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n            t.write(writer, fieldValue);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917430/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[4,12,14,297,17,298,299,20,23,26,198,30,32,36,199,43,47,201,203,210,214,300,301,302,303,217,304,51,52,53,54,55,223,305,224,225,226,306,307,308,227,229,230,231,77,78,80,84,86,87,235,236,237,239,242,243,244,245,246,248,249,251,309,310,311,312,313,94,314,315,95,96,316,317,97,318,319,98,320,321,322,99,323,100,324,325,101,104,105,111,252,253,257,258,114,115,116,117,118,119,120,121,261,144,262,263,264,265,266,267,268,269,270,271,150,153,154,157,162,165,171,275,276,326,194,195,277,327,278,279,328,281,282,329,330,283,284,285,331,179,291,292,293,332,333,334,335,294,295,183,188,296,336,337,338],"tindex":"b880f8ed-3e4e-11e6-84b0-ebb2d7d49a81","method":{"position":"com.google.gson.stream.JsonWriter:490","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            writeDeferredName();\n            java.lang.String java.lang.String = value.toString();\n            if ((!(boolean)) && (((string.equals(\"-Infinity\")) || (string.equals(\"Infinity\"))) || (string.equals(\"NaN\")))) {\n                throw new java.lang.IllegalArgumentException((\"Numeric values must be finite, but was \" + value));\n            } \n            beforeValue(false);\n            java.io.Writer.append(string);\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917430/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:136","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.TypeVariable"},"failures":[145,146,270,271],"tindex":"b8811ffe-3e4e-11e6-84b0-c1014d387239","method":{"position":"com.google.gson.internal.Primitives:79","type":"CtMethodImpl","sourcecode":"public static boolean isWrapperType(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.ParameterizedType) {\n        {\n            if (type instanceof java.lang.reflect.TypeVariable) {\n                {\n                    return com.google.gson.internal.Primitives.com.google.gson.internal.Primitives.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.containsKey(com.google.gson.internal.$Gson$Preconditions.checkNotNull(type));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917430/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917430/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:218","type":"CtVariableReadImpl","sourcecode":"unlink"},"failures":[339],"tindex":"b8811fff-3e4e-11e6-84b0-b11413798e48","method":{"position":"com.google.gson.internal.LinkedTreeMap:217","type":"CtMethodImpl","sourcecode":"void removeInternal(com.google.gson.internal.LinkedTreeMap.Node<K, V> node, boolean unlink) {\n    if (unlink) {\n        {\n            if (unlink) {\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            if ((left != null) && (right != null)) {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = (left.int) > (right.int) ? left.last() : right.first();\n                removeInternal(adjacent, false);\n                int int = 0;\n                left = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                if (left != null) {\n                    leftHeight = left.int;\n                    adjacent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = left;\n                    left.com.google.gson.internal.LinkedTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                } \n                int int = 0;\n                right = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                if (right != null) {\n                    rightHeight = right.int;\n                    adjacent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = right;\n                    right.com.google.gson.internal.LinkedTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                } \n                adjacent.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                replaceInParent(node, adjacent);\n                return ;\n            } else if (left != null) {\n                replaceInParent(node, left);\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n            } else if (right != null) {\n                replaceInParent(node, right);\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n            } else {\n                replaceInParent(node, null);\n            }\n            rebalance(originalParent, false);\n            (int)--;\n            (int)++;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917430/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"unlink":"unlink"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:250","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[340,0,1,2,3,4,5,6,7,8,9,10,11,341,12,13,342,343,344,14,345,346,347,348,349,350,15,351,352,353,354,355,356,297,357,358,359,360,361,16,362,197,17,18,298,363,364,365,366,367,368,369,299,19,20,21,22,23,24,25,26,27,28,198,29,370,371,372,373,374,30,31,32,33,34,35,36,37,38,199,39,40,41,42,43,44,45,200,46,47,48,49,202,203,204,205,206,207,208,209,210,211,212,213,375,376,214,215,216,377,300,378,379,380,381,382,301,383,384,385,50,302,386,387,388,303,389,217,390,391,392,393,394,304,395,51,52,53,54,55,223,305,224,225,226,396,397,398,399,400,401,402,306,403,404,307,405,406,407,408,409,410,411,308,412,413,414,56,415,416,417,418,419,420,421,422,423,424,57,425,227,58,59,426,427,428,429,430,60,431,432,433,61,434,435,436,228,437,438,62,63,229,64,65,439,440,441,442,443,444,445,446,230,447,66,448,449,67,231,68,232,69,233,450,234,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,235,451,452,236,237,238,453,454,239,455,456,240,457,458,241,89,459,460,242,461,462,243,463,464,465,466,90,244,467,245,246,468,469,247,470,471,472,473,248,474,249,250,475,251,476,477,478,91,479,480,92,309,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,310,500,501,502,503,504,93,505,506,507,508,509,510,511,512,513,514,311,515,516,517,312,313,518,519,520,94,521,522,523,524,525,526,527,528,314,529,315,530,95,96,531,532,316,533,534,317,535,97,536,537,538,318,319,98,320,321,322,539,540,541,542,99,543,323,544,545,546,100,324,547,325,548,549,101,102,103,104,105,106,107,108,109,110,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,111,112,576,252,253,113,254,577,255,256,257,258,259,260,114,115,116,117,118,119,120,121,122,123,578,124,125,126,127,128,579,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,580,581,261,582,144,262,263,264,265,266,145,267,268,269,146,270,147,583,271,584,585,148,586,587,588,272,589,590,591,592,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,273,274,166,167,168,169,170,171,593,594,275,276,281,595,282,329,596,597,598,599,330,600,601,283,602,603,604,605,606,284,607,608,285,331,609,172,610,611,173,174,175,286,612,613,176,177,178,179,180,181,287,182,614,615,288,289,290,291,292,293,616,294,617,618,295,619,620,183,621,184,622,623,624,185,186,187,188,189,625,190,191,192,626,627],"tindex":"b8814710-3e4e-11e6-84b0-1140687c62f8","method":{"position":"com.google.gson.Gson:249","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> doubleAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return in.nextDouble();\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    double double = value.doubleValue();\n                    checkValidFloatingPoint(doubleValue);\n                    out.value(value);\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917430/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:459","type":"CtBinaryOperatorImpl","sourcecode":"typeAdapter instanceof com.google.gson.TypeAdapter<?>"},"failures":[5,6,7,8,9,10,11,12,19,439,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,88,106,107,108,109,110,111,112,113,125,126,130,136,137,138,139,141,144,147,172,173,175,182,185,186,187,188,189],"tindex":"b8816e21-3e4e-11e6-84b0-01092bc183ef","method":{"position":"com.google.gson.TreeTypeAdapter:92","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newFactoryWithMatchRawType(com.google.gson.reflect.TypeToken<?> exactType, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n        {\n            boolean boolean = (exactType.getType()) == (exactType.getRawType());\n            return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , exactType , matchRawType , null);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917430/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[126],"tindex":"b8816e22-3e4e-11e6-84b0-2f435398db07","method":{"position":"com.google.gson.Gson:133","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src) {\n    if (src != null) {\n        {\n            return toJsonTree(src);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917430/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"b8819533-3e4e-11e6-84b0-97021d91a698","method":{"position":"com.google.gson.Gson:719","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.lang.String json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917430/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (json == null) {\n                {\n                    if (json == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917430/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new com.google.gson.JsonSyntaxException();\n                    } else {\n                        {\n                            if (json == null) {\n                                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917430/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                throw new com.google.gson.JsonSyntaxException();\n                            } else {\n                                {\n                                    if (json == null) {\n                                        return null;\n                                    } \n                                    java.io.StringReader java.io.StringReader = new java.io.StringReader(json);\n                                    T T = ((T)(fromJson(reader, typeOfT)));\n                                    return target;\n                                }\n                            }\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917430/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory:43","type":"CtBinaryOperatorImpl","sourcecode":"annotation == null"},"failures":[201,232,69,233,450,234,611,173,175,612,613],"tindex":"b8819534-3e4e-11e6-84b0-c743d0f2298f","method":{"position":"com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory:50","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nstatic com.google.gson.TypeAdapter<?> getTypeAdapter(com.google.gson.internal.ConstructorConstructor constructorConstructor, com.google.gson.Gson gson, com.google.gson.reflect.TypeToken<?> fieldType, com.google.gson.annotations.JsonAdapter annotation) {\n    if (annotation == null) {\n        {\n            java.lang.Class<?> java.lang.Class<?> = annotation.value();\n            if (com.google.gson.TypeAdapter.com.google.gson.TypeAdapter.java.lang.Class.isAssignableFrom(value)) {\n                java.lang.Class<com.google.gson.TypeAdapter<?>> java.lang.Class<com.google.gson.TypeAdapter<?>> = ((java.lang.Class<com.google.gson.TypeAdapter<?>>)(value));\n                return constructorConstructor.get(com.google.gson.reflect.TypeToken.get(typeAdapter)).construct();\n            } \n            if (com.google.gson.TypeAdapterFactory.com.google.gson.TypeAdapterFactory.java.lang.Class.isAssignableFrom(value)) {\n                java.lang.Class<com.google.gson.TypeAdapterFactory> java.lang.Class<com.google.gson.TypeAdapterFactory> = ((java.lang.Class<com.google.gson.TypeAdapterFactory>)(value));\n                return constructorConstructor.get(com.google.gson.reflect.TypeToken.get(typeAdapterFactory)).construct().create(gson, fieldType);\n            } \n            throw new java.lang.IllegalArgumentException(\"@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.\");\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917430/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"b8819535-3e4e-11e6-84b0-31746d8aae89","method":{"position":"com.google.gson.Gson:719","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.lang.String json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917430/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (json == null) {\n                {\n                    if (json == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917430/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new com.google.gson.JsonSyntaxException();\n                    } else {\n                        {\n                            if (json == null) {\n                                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917430/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                throw new com.google.gson.JsonSyntaxException();\n                            } else {\n                                {\n                                    if (json == null) {\n                                        return null;\n                                    } \n                                    java.io.StringReader java.io.StringReader = new java.io.StringReader(json);\n                                    T T = ((T)(fromJson(reader, typeOfT)));\n                                    return target;\n                                }\n                            }\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917430/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonArray:58","type":"CtBinaryOperatorImpl","sourcecode":"element == null"},"failures":[],"tindex":"b8819536-3e4e-11e6-84b0-23533d7f147f","method":{"position":"com.google.gson.JsonArray:92","type":"CtMethodImpl","sourcecode":"public boolean remove(com.google.gson.JsonElement element) {\n    if (element == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917430/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return java.util.List<com.google.gson.JsonElement>.remove(element);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"b881bc47-3e4e-11e6-84b0-1ba0eed434ff","method":{"position":"com.google.gson.Gson:719","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.lang.String json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917430/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (json == null) {\n                {\n                    if (json == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917430/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new com.google.gson.JsonSyntaxException();\n                    } else {\n                        {\n                            if (json == null) {\n                                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917430/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                throw new com.google.gson.JsonSyntaxException();\n                            } else {\n                                {\n                                    if (json == null) {\n                                        return null;\n                                    } \n                                    java.io.StringReader java.io.StringReader = new java.io.StringReader(json);\n                                    T T = ((T)(fromJson(reader, typeOfT)));\n                                    return target;\n                                }\n                            }\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917430/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[628,629,630,631,632,0,1,6,7,8,9,11,15,358,16,197,17,364,19,20,22,23,25,26,27,28,198,30,31,32,33,34,35,36,37,38,199,39,40,41,42,43,44,45,200,46,47,48,49,201,202,203,204,205,206,207,208,209,210,211,212,213,375,376,214,215,216,217,390,391,51,52,53,54,55,218,219,220,221,222,223,224,225,226,401,402,410,413,419,227,228,229,446,230,231,68,232,69,233,450,234,71,75,76,78,80,235,451,452,236,237,238,453,454,239,455,456,240,457,458,241,459,242,461,243,464,466,244,467,245,246,469,247,470,471,248,474,249,250,475,251,476,477,478,91,537,101,103,104,105,106,107,109,110,568,569,570,571,572,111,112,252,253,254,577,255,256,257,258,259,260,116,117,121,122,123,578,127,128,579,129,131,134,135,261,582,262,263,264,265,266,145,267,268,269,146,270,583,271,272,589,150,151,152,153,154,155,156,157,160,161,162,163,165,273,274,167,168,169,171,275,276,281,282,283,606,284,285,286,176,177,179,287,614,615,288,289,290,291,292,293,633,634,635,294,295,620,622,623,624,186,296,636,637],"tindex":"b881bc48-3e4e-11e6-84b0-67ec031659dc","method":{"position":"com.google.gson.internal.Excluder:149","type":"CtMethodImpl","sourcecode":"public boolean excludeField(java.lang.reflect.Field field, boolean serialize) {\n    if (field.isSynthetic()) {\n        {\n            if (((int) & (field.getModifiers())) != 0) {\n                return true;\n            } \n            if (((double) != (com.google.gson.internal.Excluder.com.google.gson.internal.Excluder.double)) && (!(isValidVersion(field.getAnnotation(com.google.gson.annotations.Since.com.google.gson.annotations.Since.java.lang.Class), field.getAnnotation(com.google.gson.annotations.Until.com.google.gson.annotations.Until.java.lang.Class))))) {\n                return true;\n            } \n            if (field.isSynthetic()) {\n                return true;\n            } \n            if (boolean) {\n                com.google.gson.annotations.Expose com.google.gson.annotations.Expose = field.getAnnotation(com.google.gson.annotations.Expose.com.google.gson.annotations.Expose.java.lang.Class);\n                if ((annotation == null) || (serialize ? !(annotation.serialize()) : !(annotation.deserialize()))) {\n                    return true;\n                } \n            } \n            if ((!(boolean)) && (isInnerClass(field.getType()))) {\n                return true;\n            } \n            if (isAnonymousOrLocal(field.getType())) {\n                return true;\n            } \n            java.util.List<com.google.gson.ExclusionStrategy> java.util.List<com.google.gson.ExclusionStrategy> = serialize ? java.util.List<com.google.gson.ExclusionStrategy> : java.util.List<com.google.gson.ExclusionStrategy>;\n            if (!(list.isEmpty())) {\n                com.google.gson.FieldAttributes com.google.gson.FieldAttributes = new com.google.gson.FieldAttributes(field);\n                for (com.google.gson.ExclusionStrategy com.google.gson.ExclusionStrategy : list) {\n                    if (exclusionStrategy.shouldSkipField(fieldAttributes)) {\n                        return true;\n                    } \n                }\n            } \n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917430/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"field"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"b881e359-3e4e-11e6-84b0-4990717454ec","method":{"position":"com.google.gson.Gson:127","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonParseException {\n    if (json == null) {\n        {\n            return ((T)(fromJson(json, typeOfT)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917430/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.TreeTypeAdapter:55","type":"CtInvocationImpl","sourcecode":"value.isJsonNull()"},"failures":[16,17,19,22,202,203,204,205,206,207,208,212,213,216,101,104,105,106,107,109,110,259,260,144,179,638,639,640,641,642,336,337,643,644,645,338,646,647,648],"tindex":"b881e35a-3e4e-11e6-84b0-05f69887922b","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:75","type":"CtMethodImpl","sourcecode":"private void put(com.google.gson.JsonElement value) {\n    if (value.isJsonNull()) {\n        {\n            if ((java.lang.String) != null) {\n                if ((!(value.isJsonNull())) || (getSerializeNulls())) {\n                    com.google.gson.JsonObject com.google.gson.JsonObject = ((com.google.gson.JsonObject)(peek()));\n                    object.add(java.lang.String, value);\n                } \n                java.lang.String = null;\n            } else if (java.util.List<com.google.gson.JsonElement>.isEmpty()) {\n                com.google.gson.JsonElement = value;\n            } else {\n                com.google.gson.JsonElement com.google.gson.JsonElement = peek();\n                if (element instanceof com.google.gson.JsonArray) {\n                    ((com.google.gson.JsonArray)(element)).add(value);\n                } else {\n                    throw new java.lang.IllegalStateException();\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917430/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[0,1,3,7,9,344,14,347,349,15,355,356,297,360,16,197,17,18,298,364,367,299,19,20,23,26,198,29,370,373,30,32,36,37,38,199,39,41,42,43,200,47,201,203,209,210,211,214,215,377,300,381,382,385,50,303,217,393,51,52,53,54,55,218,219,220,221,222,223,224,225,226,397,398,399,404,307,406,408,409,308,56,416,417,418,420,422,423,57,227,58,59,428,60,433,434,435,437,438,62,63,229,439,442,445,230,231,68,232,69,233,234,70,72,76,77,78,80,81,82,84,88,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,488,491,93,97,101,104,105,551,552,553,554,555,558,560,564,567,111,252,253,254,255,256,257,258,115,116,117,121,122,124,127,128,129,130,131,134,136,137,138,139,140,141,142,143,581,261,144,262,263,264,265,266,267,268,269,270,271,584,585,148,586,272,590,591,592,150,153,154,157,159,162,164,165,273,274,171,593,594,275,276,194,195,277,278,279,328,280,281,595,282,599,600,601,283,604,284,607,285,172,611,173,174,175,286,612,176,177,179,180,287,288,289,290,291,292,293,333,616,649,650,651,652,653,654,655,656,657,294,295,184,186,189,190,626,627,296,658,338,646,648],"tindex":"b881e35b-3e4e-11e6-84b0-c92bed170fe7","method":{"position":"com.google.gson.stream.JsonWriter:532","type":"CtMethodImpl","sourcecode":"private void string(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        {\n            java.lang.String[] java.lang.String[] = boolean ? com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[] : com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[];\n            java.io.Writer.write(\"\\\"\");\n            int int = 0;\n            int int = value.length();\n            for (int int = 0 ; i < length ; i++) {\n                char char = value.charAt(i);\n                java.lang.String java.lang.String;\n                if (c < 128) {\n                    replacement = replacements[c];\n                    if (replacement == null) {\n                        continue;\n                    } \n                } else if (c == '\\u2028') {\n                    replacement = \"\\\\u2028\";\n                } else if (c == '\\u2029') {\n                    replacement = \"\\\\u2029\";\n                } else {\n                    continue;\n                }\n                if (last < i) {\n                    java.io.Writer.write(value, last, (i - last));\n                } \n                java.io.Writer.write(replacement);\n                last = i + 1;\n            }\n            if (last < length) {\n                java.io.Writer.write(value, last, (length - last));\n            } \n            java.io.Writer.write(\"\\\"\");\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917430/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:107","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonArray"},"failures":[659,660],"tindex":"b8820a6c-3e4e-11e6-84b0-552931c21464","method":{"position":"com.google.gson.JsonArray:329","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonArray) {\n        {\n            return (o == (com.google.gson.JsonArray.this)) || ((o instanceof com.google.gson.JsonArray) && (((com.google.gson.JsonArray)(o)).java.util.List<com.google.gson.JsonElement>.equals(java.util.List<com.google.gson.JsonElement>)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917430/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:122","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"b8820a6d-3e4e-11e6-84b0-c178d823d218","method":{"position":"com.google.gson.internal.Primitives:79","type":"CtMethodImpl","sourcecode":"public static boolean isWrapperType(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.ParameterizedType) {\n        {\n            if (type instanceof java.lang.reflect.TypeVariable) {\n                {\n                    return com.google.gson.internal.Primitives.com.google.gson.internal.Primitives.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.containsKey(com.google.gson.internal.$Gson$Preconditions.checkNotNull(type));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917430/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917430/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[77,78,84,568,569,570,572],"tindex":"b8820a6e-3e4e-11e6-84b0-7f2e5e6442b5","method":{"position":"com.google.gson.JsonObject:89","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Number value) {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917430/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (property == null) {\n                {\n                    add(property, createJsonElement(value));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917430/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:198","type":"CtBinaryOperatorImpl","sourcecode":"out == null"},"failures":[],"tindex":"b8820a6f-3e4e-11e6-84b0-03d9668cfe4c","method":{"position":"com.google.gson.TypeAdapter:140","type":"CtMethodImpl","sourcecode":"public final void toJson(java.io.Writer out, T value) throws java.io.IOException {\n    if (out == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917430/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = new com.google.gson.stream.JsonWriter(out);\n            write(writer, value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:218","type":"CtVariableReadImpl","sourcecode":"unlink"},"failures":[],"tindex":"b8823180-3e4e-11e6-84b0-b37b0e7758d0","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:245","type":"CtMethodImpl","sourcecode":"void removeInternal(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node, boolean unlink) {\n    if (unlink) {\n        {\n            if (unlink) {\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            if ((left != null) && (right != null)) {\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = (left.int) > (right.int) ? left.last() : right.first();\n                removeInternal(adjacent, false);\n                int int = 0;\n                left = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                if (left != null) {\n                    leftHeight = left.int;\n                    adjacent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left;\n                    left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                } \n                int int = 0;\n                right = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                if (right != null) {\n                    rightHeight = right.int;\n                    adjacent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                } \n                adjacent.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                replaceInParent(node, adjacent);\n                return ;\n            } else if (left != null) {\n                replaceInParent(node, left);\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } else if (right != null) {\n                replaceInParent(node, right);\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } else {\n                replaceInParent(node, null);\n            }\n            rebalance(originalParent, false);\n            (int)--;\n            (int)++;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917430/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"unlink":"unlink"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:105","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonObject"},"failures":[],"tindex":"b8823181-3e4e-11e6-84b0-89bce7cc1088","method":{"position":"com.google.gson.internal.LinkedTreeMap:570","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonObject) {\n        {\n            if (o instanceof com.google.gson.JsonNull) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917430/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return (o instanceof java.util.Map.Entry) && ((findByEntry(((java.util.Map.Entry<?, ?>)(o)))) != null);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917430/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"b8825892-3e4e-11e6-84b0-6d357b9b5f12","method":{"position":"com.google.gson.JsonObject:89","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Number value) {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917430/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (property == null) {\n                {\n                    add(property, createJsonElement(value));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917430/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"b8825893-3e4e-11e6-84b0-51f5329aee9f","method":{"position":"com.google.gson.Gson:847","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(com.google.gson.JsonElement json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917430/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:348","type":"CtBinaryOperatorImpl","sourcecode":"toResolve instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"b8825894-3e4e-11e6-84b0-b3efc0a0c55e","method":{"position":"com.google.gson.internal.$Gson$Types:226","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type getGenericSupertype(java.lang.reflect.Type context, java.lang.Class<?> rawType, java.lang.Class<?> toResolve) {\n    if (toResolve == rawType) {\n        return context;\n    } \n    if (toResolve.isInterface()) {\n        java.lang.Class<?>[] java.lang.Class<?>[] = rawType.getInterfaces();\n        for (int int = 0, int int = interfaces.int ; i < length ; i++) {\n            if ((interfaces[i]) == toResolve) {\n                return rawType.getGenericInterfaces()[i];\n            } else if (toResolve.isAssignableFrom(interfaces[i])) {\n                return com.google.gson.internal.$Gson$Types.getGenericSupertype(rawType.getGenericInterfaces()[i], interfaces[i], toResolve);\n            } \n        }\n    } \n    if (!(rawType.isInterface())) {\n        while (rawType != (java.lang.Object.java.lang.Object.java.lang.Class)) {\n            java.lang.Class<?> java.lang.Class<?> = rawType.getSuperclass();\n            if (rawSupertype == toResolve) {\n                return rawType.getGenericSuperclass();\n            } else if (toResolve.isAssignableFrom(rawSupertype)) {\n                return com.google.gson.internal.$Gson$Types.getGenericSupertype(rawType.getGenericSuperclass(), rawSupertype, toResolve);\n            } \n            rawType = rawSupertype;\n        }\n    } \n    return toResolve;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"context"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:92","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof java.util.Iterator"},"failures":[],"tindex":"b8825895-3e4e-11e6-84b0-2949d640790f","method":{"position":"com.google.gson.internal.LinkedTreeMap:574","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonArray) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917430/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof com.google.gson.JsonNull) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917430/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (o instanceof java.util.Iterator) {\n                        {\n                            if (!(o instanceof java.util.Map.Entry)) {\n                                return false;\n                            } \n                            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n                            if (node == null) {\n                                return false;\n                            } \n                            removeInternal(node, true);\n                            return true;\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917430/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:554","type":"CtBinaryOperatorImpl","sourcecode":"(datePattern != null) && (!(\"\".equals(datePattern.trim())))"},"failures":[],"tindex":"b8827fa6-3e4e-11e6-84b0-1d2eea86481f","method":{"position":"com.google.gson.GsonBuilder:551","type":"CtMethodImpl","sourcecode":"private void addTypeAdaptersForDate(java.lang.String datePattern, int dateStyle, int timeStyle, java.util.List<com.google.gson.TypeAdapterFactory> factories) {\n    if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917430/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n                {\n                    com.google.gson.DefaultDateTypeAdapter com.google.gson.DefaultDateTypeAdapter;\n                    if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n                        dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(datePattern);\n                    } else if ((dateStyle != (java.text.DateFormat.java.text.DateFormat.int)) && (timeStyle != (java.text.DateFormat.java.text.DateFormat.int))) {\n                        dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(dateStyle , timeStyle);\n                    } else {\n                        return ;\n                    }\n                    factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.util.Date.java.util.Date.java.lang.Class), dateTypeAdapter));\n                    factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Timestamp.java.sql.Timestamp.java.lang.Class), dateTypeAdapter));\n                    factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Date.java.sql.Date.java.lang.Class), dateTypeAdapter));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917430/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"datePattern":"datePattern"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:240","type":"CtInvocationImpl","sourcecode":"from.getRawType().equals(to.getRawType())"},"failures":[],"tindex":"b8827fa7-3e4e-11e6-84b0-25beb3260533","method":{"position":"com.google.gson.reflect.TypeToken:238","type":"CtMethodImpl","sourcecode":"private static boolean typeEquals(java.lang.reflect.ParameterizedType from, java.lang.reflect.ParameterizedType to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeVarMap) {\n    if (from.getRawType().equals(to.getRawType())) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917430/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (from.getRawType().equals(from.getRawType())) {\n                {\n                    if (from.getRawType().equals(to.getRawType())) {\n                        java.lang.reflect.Type[] java.lang.reflect.Type[] = from.getActualTypeArguments();\n                        java.lang.reflect.Type[] java.lang.reflect.Type[] = to.getActualTypeArguments();\n                        for (int int = 0 ; i < (fromArgs.int) ; i++) {\n                            if (!(com.google.gson.reflect.TypeToken.matches(fromArgs[i], toArgs[i], typeVarMap))) {\n                                return false;\n                            } \n                        }\n                        return true;\n                    } \n                    return false;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917430/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from","to":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[],"tindex":"b882a6b8-3e4e-11e6-84b0-01caf43cd011","method":{"position":"com.google.gson.Gson:491","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src != null) {\n        {\n            com.google.gson.internal.bind.JsonTreeWriter com.google.gson.internal.bind.JsonTreeWriter = new com.google.gson.internal.bind.JsonTreeWriter();\n            toJson(src, typeOfSrc, writer);\n            return writer.get();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917430/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:243","type":"CtBinaryOperatorImpl","sourcecode":"annotation != null"},"failures":[150,151,152,154,155,157],"tindex":"b882a6b9-3e4e-11e6-84b0-9126276e67e9","method":{"position":"com.google.gson.internal.Excluder:242","type":"CtMethodImpl","sourcecode":"private boolean isValidUntil(com.google.gson.annotations.Until annotation) {\n    if (annotation != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917430/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (annotation != null) {\n                double double = annotation.value();\n                if (annotationVersion <= (double)) {\n                    return false;\n                } \n            } \n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[396,412,62],"tindex":"b882a6ba-3e4e-11e6-84b0-cb2bb7f8ebca","method":{"position":"com.google.gson.internal.bind.DateTypeAdapter:69","type":"CtMethodImpl","sourcecode":"private synchronized java.util.Date deserializeToDate(java.lang.String json) {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917430/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (json == null) {\n                {\n                    try {\n                        return java.text.DateFormat.parse(json);\n                    } catch (java.text.ParseException ignored) {\n                    }\n                    try {\n                        return java.text.DateFormat.parse(json);\n                    } catch (java.text.ParseException ignored) {\n                    }\n                    try {\n                        return java.text.DateFormat.parse(json);\n                    } catch (java.text.ParseException e) {\n                        throw new com.google.gson.JsonSyntaxException(json , e);\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917430/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:189","type":"CtUnaryOperatorImpl","sourcecode":"!(b instanceof java.lang.reflect.WildcardType)"},"failures":[],"tindex":"b882a6bb-3e4e-11e6-84b0-2fcfed527eb5","method":{"position":"com.google.gson.internal.$Gson$Types:151","type":"CtMethodImpl","sourcecode":"static boolean equal(java.lang.Object a, java.lang.Object b) {\n    return (a == b) || ((a != null) && (a.equals(b)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:274","type":"CtBinaryOperatorImpl","sourcecode":"target instanceof java.lang.String"},"failures":[661,662,663,664,665,666,667,668,669,670,671,672,5,6,7,8,9,10,11,16,17,368,19,22,28,29,370,201,202,203,204,205,206,207,208,212,213,216,398,307,406,408,434,437,439,441,445,230,70,72,74,76,81,82,83,85,88,101,104,105,106,107,108,109,110,568,569,570,571,572,111,113,259,260,125,136,138,139,141,144,147,148,673,172,173,175,179,180,182,674,675,676,293,677,678,679,680,638,639,640,681,333,682,683,684,685,686,687,688,689,619,690,691,692,626,693,694,695,641,642,336,337,643,696,644,645,338,646,647,648,697,698,699,700,701,702],"tindex":"b882a6bc-3e4e-11e6-84b0-51bc0c4a5f50","method":{"position":"com.google.gson.JsonPrimitive:273","type":"CtMethodImpl","sourcecode":"private static boolean isPrimitiveOrString(java.lang.Object target) {\n    if (target instanceof java.lang.String) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917430/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (target instanceof java.lang.String) {\n                return true;\n            } \n            java.lang.Class<?> java.lang.Class<?> = target.getClass();\n            for (java.lang.Class<?> java.lang.Class<?> : com.google.gson.JsonPrimitive.com.google.gson.JsonPrimitive.java.lang.Class<?>[]) {\n                if (standardPrimitive.isAssignableFrom(classOfPrimitive)) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"target":"target"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"b882cdcd-3e4e-11e6-84b0-3f95d9fb176a","method":{"position":"com.google.gson.DefaultDateTypeAdapter:94","type":"CtMethodImpl","sourcecode":"private java.util.Date deserializeToDate(com.google.gson.JsonElement json) {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917430/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            synchronized(java.text.DateFormat) {\n                try {\n                    return java.text.DateFormat.parse(json.getAsString());\n                } catch (java.text.ParseException ignored) {\n                }\n                try {\n                    return java.text.DateFormat.parse(json.getAsString());\n                } catch (java.text.ParseException ignored) {\n                }\n                try {\n                    return java.text.DateFormat.parse(json.getAsString());\n                } catch (java.text.ParseException e) {\n                    throw new com.google.gson.JsonSyntaxException(json.getAsString() , e);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:120","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonNull"},"failures":[],"tindex":"b882cdce-3e4e-11e6-84b0-4366aa6ab7c6","method":{"position":"com.google.gson.internal.LinkedTreeMap:574","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonArray) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917430/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof com.google.gson.JsonNull) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917430/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (o instanceof java.util.Iterator) {\n                        {\n                            if (!(o instanceof java.util.Map.Entry)) {\n                                return false;\n                            } \n                            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n                            if (node == null) {\n                                return false;\n                            } \n                            removeInternal(node, true);\n                            return true;\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917430/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:92","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof java.util.Iterator"},"failures":[],"tindex":"b882cdcf-3e4e-11e6-84b0-716b3e87c9ee","method":{"position":"com.google.gson.internal.LinkedTreeMap:481","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"rawtypes\")\n@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof java.util.Iterator) {\n        {\n            if (o instanceof java.util.Map.Entry) {\n                java.util.Map.Entry java.util.Map.Entry = ((java.util.Map.Entry)(o));\n                return ((K) == null ? (other.getKey()) == null : K.equals(other.getKey())) && ((V) == null ? (other.getValue()) == null : V.equals(other.getValue()));\n            } \n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917430/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:107","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonArray"},"failures":[],"tindex":"b882f4e0-3e4e-11e6-84b0-cfa173053afd","method":{"position":"com.google.gson.internal.LinkedTreeMap:574","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonArray) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917430/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof com.google.gson.JsonNull) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917430/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (o instanceof java.util.Iterator) {\n                        {\n                            if (!(o instanceof java.util.Map.Entry)) {\n                                return false;\n                            } \n                            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n                            if (node == null) {\n                                return false;\n                            } \n                            removeInternal(node, true);\n                            return true;\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917430/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"b882f4e1-3e4e-11e6-84b0-5bcd5e13a8c2","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:175","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917430/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            if (!(isLenient())) {\n                double double = value.doubleValue();\n                if ((java.lang.Double.isNaN(d)) || (java.lang.Double.isInfinite(d))) {\n                    throw new java.lang.IllegalArgumentException((\"JSON forbids NaN and infinities: \" + value));\n                } \n            } \n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[0,1,7,9,14,15,355,356,360,16,197,17,298,19,20,26,198,373,30,32,34,36,37,38,199,39,40,41,42,43,200,47,201,203,210,214,215,377,300,379,380,381,382,301,385,50,303,217,391,393,304,51,52,53,54,55,218,219,220,221,222,223,305,224,225,226,397,399,404,409,56,415,416,417,418,420,422,423,57,227,59,426,428,433,434,435,228,437,438,62,63,229,439,442,445,230,68,232,69,233,234,70,76,77,78,80,81,82,84,87,235,236,237,238,239,240,241,242,243,465,90,244,245,246,468,247,248,249,250,251,309,482,488,491,499,310,93,506,507,510,513,311,515,312,313,94,314,315,95,96,316,317,97,318,98,320,322,539,99,323,100,324,551,552,553,554,555,558,560,564,567,252,253,254,255,256,257,258,114,115,116,117,118,119,120,122,124,126,127,128,129,130,131,134,136,137,138,139,140,141,142,143,581,265,584,585,148,586,272,590,592,149,150,153,154,157,159,162,164,165,273,274,171,593,594,275,276,281,595,329,330,600,283,604,284,285,611,173,174,175,286,612,613,176,177,178,287,182,614,288,289,290,291,293,616,187,188,189],"tindex":"b8831bf2-3e4e-11e6-84b0-6fcb15c75b0c","method":{"position":"com.google.gson.Gson:510","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src) {\n    if (src != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917430/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src == null) {\n                return toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull);\n            } \n            return toJson(src, src.getClass());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"b8831bf3-3e4e-11e6-84b0-5325581bf8fa","method":{"position":"com.google.gson.internal.bind.TypeAdapters:297","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917430/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1422","type":"CtUnaryOperatorImpl","sourcecode":"!(lenient)"},"failures":[],"tindex":"b8831bf4-3e4e-11e6-84b0-63a30d05bd20","method":{"position":"com.google.gson.stream.JsonReader:325","type":"CtMethodImpl","sourcecode":"public final void setLenient(boolean lenient) {\n    if (!lenient) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917430/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.stream.JsonReader.this.boolean = lenient;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"lenient"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:85","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[],"tindex":"b8834305-3e4e-11e6-84b0-7d1bf712e11e","method":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:84","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Object array) throws java.io.IOException {\n    if (array == null) {\n        {\n            if (array == null) {\n                out.nullValue();\n                return ;\n            } \n            out.beginArray();\n            for (int int = 0, int int = java.lang.reflect.Array.getLength(array) ; i < length ; i++) {\n                E E = ((E)(java.lang.reflect.Array.get(array, i)));\n                com.google.gson.TypeAdapter<E>.write(out, value);\n            }\n            out.endArray();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917430/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"b8834306-3e4e-11e6-84b0-2b85890343c3","method":{"position":"com.google.gson.Gson:532","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917430/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n            toJson(src, typeOfSrc, writer);\n            return writer.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:298","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[],"tindex":"b8834307-3e4e-11e6-84b0-99800f5bc36e","method":{"position":"com.google.gson.Gson:297","type":"CtMethodImpl","sourcecode":"private void checkValidFloatingPoint(double value) {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                throw new java.lang.IllegalArgumentException(((value + \" is not a valid double value as per JSON specification. To override this\") + \" behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.\"));\n            } \n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917430/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"b8836a18-3e4e-11e6-84b0-bfd2dfe93a5b","method":{"position":"com.google.gson.internal.bind.DateTypeAdapter:69","type":"CtMethodImpl","sourcecode":"private synchronized java.util.Date deserializeToDate(java.lang.String json) {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917430/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (json == null) {\n                {\n                    try {\n                        return java.text.DateFormat.parse(json);\n                    } catch (java.text.ParseException ignored) {\n                    }\n                    try {\n                        return java.text.DateFormat.parse(json);\n                    } catch (java.text.ParseException ignored) {\n                    }\n                    try {\n                        return java.text.DateFormat.parse(json);\n                    } catch (java.text.ParseException e) {\n                        throw new com.google.gson.JsonSyntaxException(json , e);\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917430/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:278","type":"CtBinaryOperatorImpl","sourcecode":"node != null"},"failures":[],"tindex":"b8836a19-3e4e-11e6-84b0-3734ce1bfd85","method":{"position":"com.google.gson.internal.LinkedTreeMap:284","type":"CtMethodImpl","sourcecode":"private void replaceInParent(com.google.gson.internal.LinkedTreeMap.Node<K, V> node, com.google.gson.internal.LinkedTreeMap.Node<K, V> replacement) {\n    if (replacement != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917430/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n            if (replacement != null) {\n                replacement.com.google.gson.internal.LinkedTreeMap.Node<K, V> = parent;\n            } \n            if (parent != null) {\n                if ((parent.com.google.gson.internal.LinkedTreeMap.Node<K, V>) == node) {\n                    parent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                } else {\n                    assert (parent.com.google.gson.internal.LinkedTreeMap.Node<K, V>) == node;\n                    parent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                }\n            } else {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"replacement"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:106","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonArray"},"failures":[],"tindex":"b8836a1a-3e4e-11e6-84b0-d77302114d72","method":{"position":"com.google.gson.JsonArray:81","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement set(int index, com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonArray) {\n        {\n            return java.util.List<com.google.gson.JsonElement>.set(index, element);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917430/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:240","type":"CtInvocationImpl","sourcecode":"from.getRawType().equals(to.getRawType())"},"failures":[],"tindex":"b8836a1b-3e4e-11e6-84b0-2b9dfc264bbf","method":{"position":"com.google.gson.reflect.TypeToken:238","type":"CtMethodImpl","sourcecode":"private static boolean typeEquals(java.lang.reflect.ParameterizedType from, java.lang.reflect.ParameterizedType to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeVarMap) {\n    if (from.getRawType().equals(to.getRawType())) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917430/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (from.getRawType().equals(from.getRawType())) {\n                {\n                    if (from.getRawType().equals(to.getRawType())) {\n                        java.lang.reflect.Type[] java.lang.reflect.Type[] = from.getActualTypeArguments();\n                        java.lang.reflect.Type[] java.lang.reflect.Type[] = to.getActualTypeArguments();\n                        for (int int = 0 ; i < (fromArgs.int) ; i++) {\n                            if (!(com.google.gson.reflect.TypeToken.matches(fromArgs[i], toArgs[i], typeVarMap))) {\n                                return false;\n                            } \n                        }\n                        return true;\n                    } \n                    return false;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917430/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from","to":"to"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"b883912c-3e4e-11e6-84b0-8599051acc60","method":{"position":"com.google.gson.JsonObject:78","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.String value) {\n    if (value == null) {\n        {\n            add(property, createJsonElement(value));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917430/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1422","type":"CtUnaryOperatorImpl","sourcecode":"!(lenient)"},"failures":[],"tindex":"b883912d-3e4e-11e6-84b0-c90996a6eb53","method":{"position":"com.google.gson.stream.JsonWriter:234","type":"CtMethodImpl","sourcecode":"public final void setLenient(boolean lenient) {\n    if (!lenient) {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = lenient;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917430/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"lenient"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:111","type":"CtInvocationImpl","sourcecode":"primitive.isString()"},"failures":[],"tindex":"b883912e-3e4e-11e6-84b0-57dad34e89c1","method":{"position":"com.google.gson.JsonPrimitive:93","type":"CtMethodImpl","sourcecode":"void setValue(java.lang.Object primitive) {\n    if (primitive.isString()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917430/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (primitive instanceof java.lang.Character) {\n                char char = ((java.lang.Character)(primitive)).charValue();\n                com.google.gson.JsonPrimitive.this.java.lang.Object = java.lang.String.valueOf(c);\n            } else {\n                com.google.gson.internal.$Gson$Preconditions.checkArgument(((primitive instanceof java.lang.Number) || (com.google.gson.JsonPrimitive.isPrimitiveOrString(primitive))));\n                com.google.gson.JsonPrimitive.this.java.lang.Object = primitive;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"primitive"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"b883912f-3e4e-11e6-84b0-7fe904e9b161","method":{"position":"com.google.gson.JsonObject:111","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Character value) {\n    if (property == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917430/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            add(property, createJsonElement(value));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[],"tindex":"b883b840-3e4e-11e6-84b0-f73ab9dc77e0","method":{"position":"com.google.gson.stream.JsonWriter:385","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter name(java.lang.String name) throws java.io.IOException {\n    if (name == null) {\n        {\n            if (name == null) {\n                throw new java.lang.NullPointerException(\"name == null\");\n            } \n            if ((java.lang.String) != null) {\n                throw new java.lang.IllegalStateException();\n            } \n            if ((int) == 0) {\n                throw new java.lang.IllegalStateException(\"JsonWriter is closed.\");\n            } \n            java.lang.String = name;\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917430/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":58,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
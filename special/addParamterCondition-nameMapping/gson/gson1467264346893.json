{"failureDictionary":{"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":91,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":11,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":127,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":23,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":21,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":26,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":149,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":111,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":171,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":173,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":179,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":189,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":71,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":206,"com.google.gson.functional.ObjectTest.testSingletonLists":94,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":154,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":199,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":78,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":207,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":166,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":105,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":170,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":185,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":126,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":152,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":31,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":177,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":132,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":136,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":109,"com.google.gson.functional.JsonTreeTest.testToJsonTree":39,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":137,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":46,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":50,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":204,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":168,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":157,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":134,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":148,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":176,"com.google.gson.functional.MapTest.testGeneralMapField":16,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":53,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":81,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":61,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":76,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":14,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":161,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":188,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":107,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":180,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":162,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":169,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":57,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":103,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":156,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":34,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":118,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":110,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":90,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":20,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":40,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":122,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":102,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":184,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":192,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":28,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":140,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":43,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":114,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":33,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":75,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":15,"com.google.gson.functional.MapTest.testInterfaceTypeMap":13,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":187,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":45,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":72,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":151,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":165,"com.google.gson.functional.EnumTest.testEnumSet":147,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":143,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":86,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":6,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":99,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":142,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":197,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":79,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":175,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":96,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":144,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":44,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":125,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":106,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":121,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":22,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":29,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":108,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":49,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":97,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":24,"com.google.gson.functional.MapTest.testSerializeMaps":5,"com.google.gson.functional.MapTest.testComplexKeysSerialization":19,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":178,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":64,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":83,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":138,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":36,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":51,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":84,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":124,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":128,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":8,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":163,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":172,"com.google.gson.functional.MapTest.testRawMapSerialization":18,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":194,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":167,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":100,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":203,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":202,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":74,"com.google.gson.functional.CollectionTest.testQueueSerialization":174,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":193,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":54,"com.google.gson.functional.MapTest.testMapOfMapSerialization":10,"com.google.gson.ObjectTypeAdapterTest.testSerialize":198,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":159,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":112,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":68,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":60,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":145,"com.google.gson.functional.MapTest.testMapWithQuotes":9,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":117,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":27,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":38,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":93,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":85,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":35,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":70,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":1,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":67,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":139,"com.google.gson.functional.MapTest.testMapSubclassSerialization":4,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":131,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":190,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":63,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":182,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":195,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":77,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":141,"com.google.gson.functional.EnumTest.testEnumSubclass":150,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":73,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":205,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":186,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":113,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":153,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":87,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":52,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":32,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":119,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":92,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":191,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":41,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":164,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":0,"com.google.gson.functional.ObjectTest.testNestedSerialization":101,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":158,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":160,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":155,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":17,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":3,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":116,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":59,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":196,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":55,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":98,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":82,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":89,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":95,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":47,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":123,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":12,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":115,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":201,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":69,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":58,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":2,"com.google.gson.functional.CollectionTest.testSetSerialization":181,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":88,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":129,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":25,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":65,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":120,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":62,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":66,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":183,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":80,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":130,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":200,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":7,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":48,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":135,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":133,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":37,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":146,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":104,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":30,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":42,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":56},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:163","type":"CtBinaryOperatorImpl","sourcecode":"a instanceof java.lang.Class"},"failures":[],"tindex":"196695ff-3e83-11e6-8c52-a1f60bb3da2a","method":{"position":"com.google.gson.internal.$Gson$Types:158","type":"CtMethodImpl","sourcecode":"public static boolean equals(java.lang.reflect.Type a, java.lang.reflect.Type b) {\n    if (a == b) {\n        return true;\n    } else if (a instanceof java.lang.Class) {\n        return a.equals(b);\n    } else if (a instanceof java.lang.reflect.ParameterizedType) {\n        if (!(b instanceof java.lang.reflect.ParameterizedType)) {\n            return false;\n        } \n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(a));\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(b));\n        return ((com.google.gson.internal.$Gson$Types.equal(pa.getOwnerType(), pb.getOwnerType())) && (pa.getRawType().equals(pb.getRawType()))) && (java.util.Arrays.equals(pa.getActualTypeArguments(), pb.getActualTypeArguments()));\n    } else if (a instanceof java.lang.reflect.GenericArrayType) {\n        if (!(b instanceof java.lang.reflect.GenericArrayType)) {\n            return false;\n        } \n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(a));\n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(b));\n        return com.google.gson.internal.$Gson$Types.equals(ga.getGenericComponentType(), gb.getGenericComponentType());\n    } else if (a instanceof java.lang.reflect.WildcardType) {\n        if (!(b instanceof java.lang.reflect.WildcardType)) {\n            return false;\n        } \n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(a));\n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(b));\n        return (java.util.Arrays.equals(wa.getUpperBounds(), wb.getUpperBounds())) && (java.util.Arrays.equals(wa.getLowerBounds(), wb.getLowerBounds()));\n    } else if (a instanceof java.lang.reflect.TypeVariable) {\n        if (!(b instanceof java.lang.reflect.TypeVariable)) {\n            return false;\n        } \n        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(a));\n        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(b));\n        return ((va.getGenericDeclaration()) == (vb.getGenericDeclaration())) && (va.getName().equals(vb.getName()));\n    } else {\n        return false;\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:297","type":"CtBinaryOperatorImpl","sourcecode":"(value) instanceof java.lang.Number"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199],"tindex":"19670b30-3e83-11e6-8c52-ff3c8a578280","method":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:74","type":"CtMethodImpl","sourcecode":"private java.lang.reflect.Type getRuntimeTypeIfMoreSpecific(java.lang.reflect.Type type, java.lang.Object value) {\n    if (value instanceof java.lang.Number) {\n        {\n            if ((value != null) && (((type == (java.lang.Object.java.lang.Object.java.lang.Class)) || (type instanceof java.lang.reflect.TypeVariable<?>)) || (type instanceof java.lang.Class<?>))) {\n                type = value.getClass();\n            } \n            return type;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264148020/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[200],"tindex":"19673241-3e83-11e6-8c52-ff7237db91c7","method":{"position":"com.google.gson.JsonObject:111","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Character value) {\n    if (property == null) {\n        {\n            add(property, createJsonElement(value));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264148020/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[],"tindex":"19675952-3e83-11e6-8c52-6f922006f52d","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:86","type":"CtMethodImpl","sourcecode":"private com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField createBoundField(final com.google.gson.Gson context, final java.lang.reflect.Field field, final java.lang.String name, final com.google.gson.reflect.TypeToken<?> fieldType, boolean serialize, boolean deserialize) {\n    if (name == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264148020/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final boolean boolean = com.google.gson.internal.Primitives.isPrimitive(fieldType.getRawType());\n            return new com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField(name, serialize, deserialize) {\n                final com.google.gson.TypeAdapter<?> typeAdapter = getFieldAdapter(context, field, fieldType);\n\n                @java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n                @java.lang.Override\n                void write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                    java.lang.Object java.lang.Object = field.get(value);\n                    com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n                    t.write(writer, fieldValue);\n                }\n\n                @java.lang.Override\n                void read(com.google.gson.stream.JsonReader reader, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                    java.lang.Object java.lang.Object = com.google.gson.TypeAdapter<?>.read(reader);\n                    if ((fieldValue != null) || (!isPrimitive)) {\n                        field.set(value, fieldValue);\n                    } \n                }\n\n                public boolean writeField(java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                    if (!(boolean))\n                        return false;\n                    \n                    java.lang.Object java.lang.Object = field.get(value);\n                    return fieldValue != value;\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[201,16,22,23,24,202,25,203,36,37,38,39,44,48,60,61,78,79,93,95,98,99,100,101,103,104,106,204,205,206,207,117,118,128,131,143,153,154,156,159,162,163,171,173,177,179,185,192],"tindex":"196843b3-3e83-11e6-8c52-45066db64e53","method":{"position":"com.google.gson.internal.bind.TypeAdapters:267","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264148020/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1413","type":"CtVariableReadImpl","sourcecode":"throwOnEof"},"failures":[],"tindex":"19686ac4-3e83-11e6-8c52-d90287fd46a7","method":{"position":"com.google.gson.stream.JsonReader:1331","type":"CtMethodImpl","sourcecode":"private int nextNonWhitespace(boolean throwOnEof) throws java.io.IOException {\n    if (throwOnEof) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264148020/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            char[] char[] = com.google.gson.stream.JsonReader.this.char[];\n            int int = int;\n            int int = int;\n            while (true) {\n                if (p == l) {\n                    int = p;\n                    if (!(fillBuffer(1))) {\n                        break;\n                    } \n                    p = int;\n                    l = int;\n                } \n                int int = buffer[(p++)];\n                if (c == '\\n') {\n                    (int)++;\n                    int = p;\n                    continue;\n                } else if (((c == ' ') || (c == '\\r')) || (c == '\\t')) {\n                    continue;\n                } \n                if (c == '/') {\n                    int = p;\n                    if (p == l) {\n                        (int)--;\n                        boolean boolean = fillBuffer(2);\n                        (int)++;\n                        if (!charsLoaded) {\n                            return c;\n                        } \n                    } \n                    checkLenient();\n                    char char = buffer[int];\n                    switch (peek) {\n                        case '*' :\n                            (int)++;\n                            if (!(skipTo(\"*/\"))) {\n                                throw syntaxError(\"Unterminated comment\");\n                            } \n                            p = (int) + 2;\n                            l = int;\n                            continue;\n                        case '/' :\n                            (int)++;\n                            skipToEndOfLine();\n                            p = int;\n                            l = int;\n                            continue;\n                        default :\n                            return c;\n                    }\n                } else if (c == '#') {\n                    int = p;\n                    checkLenient();\n                    skipToEndOfLine();\n                    p = int;\n                    l = int;\n                } else {\n                    int = p;\n                    return c;\n                }\n            }\n            if (throwOnEof) {\n                throw new java.io.EOFException(((((\"End of input\" + \" at line \") + (getLineNumber())) + \" column \") + (getColumnNumber())));\n            } else {\n                return -1;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"throwOnEof":"throwOnEof"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[],"tindex":"196891d5-3e83-11e6-8c52-f916043ed6f6","method":{"position":"com.google.gson.internal.Excluder:149","type":"CtMethodImpl","sourcecode":"public boolean excludeField(java.lang.reflect.Field field, boolean serialize) {\n    if (field.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264148020/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (((int) & (field.getModifiers())) != 0) {\n                return true;\n            } \n            if (((double) != (com.google.gson.internal.Excluder.com.google.gson.internal.Excluder.double)) && (!(isValidVersion(field.getAnnotation(com.google.gson.annotations.Since.com.google.gson.annotations.Since.java.lang.Class), field.getAnnotation(com.google.gson.annotations.Until.com.google.gson.annotations.Until.java.lang.Class))))) {\n                return true;\n            } \n            if (field.isSynthetic()) {\n                return true;\n            } \n            if (boolean) {\n                com.google.gson.annotations.Expose com.google.gson.annotations.Expose = field.getAnnotation(com.google.gson.annotations.Expose.com.google.gson.annotations.Expose.java.lang.Class);\n                if ((annotation == null) || (serialize ? !(annotation.serialize()) : !(annotation.deserialize()))) {\n                    return true;\n                } \n            } \n            if ((!(boolean)) && (isInnerClass(field.getType()))) {\n                return true;\n            } \n            if (isAnonymousOrLocal(field.getType())) {\n                return true;\n            } \n            java.util.List<com.google.gson.ExclusionStrategy> java.util.List<com.google.gson.ExclusionStrategy> = serialize ? java.util.List<com.google.gson.ExclusionStrategy> : java.util.List<com.google.gson.ExclusionStrategy>;\n            if (!(list.isEmpty())) {\n                com.google.gson.FieldAttributes com.google.gson.FieldAttributes = new com.google.gson.FieldAttributes(field);\n                for (com.google.gson.ExclusionStrategy com.google.gson.ExclusionStrategy : list) {\n                    if (exclusionStrategy.shouldSkipField(fieldAttributes)) {\n                        return true;\n                    } \n                }\n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"field"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:462","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[],"tindex":"196891d6-3e83-11e6-8c52-6f01af37f3c4","method":{"position":"com.google.gson.stream.JsonWriter:461","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(double value) throws java.io.IOException {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264148020/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                throw new java.lang.IllegalArgumentException((\"Numeric values must be finite, but was \" + value));\n            } \n            writeDeferredName();\n            beforeValue(false);\n            java.io.Writer.append(java.lang.Double.toString(value));\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:188","type":"CtBinaryOperatorImpl","sourcecode":"from == null"},"failures":[],"tindex":"1968b8e7-3e83-11e6-8c52-eb636abb7870","method":{"position":"com.google.gson.reflect.TypeToken:185","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.ParameterizedType to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeVarMap) {\n    if (from == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264148020/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (from == null) {\n                return false;\n            } \n            if (to.equals(from)) {\n                return true;\n            } \n            java.lang.Class<?> java.lang.Class<?> = com.google.gson.internal.$Gson$Types.getRawType(from);\n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = null;\n            if (from instanceof java.lang.reflect.ParameterizedType) {\n                ptype = ((java.lang.reflect.ParameterizedType)(from));\n            } \n            if (ptype != null) {\n                java.lang.reflect.Type[] java.lang.reflect.Type[] = ptype.getActualTypeArguments();\n                java.lang.reflect.TypeVariable<?>[] java.lang.reflect.TypeVariable<?>[] = clazz.getTypeParameters();\n                for (int int = 0 ; i < (tArgs.int) ; i++) {\n                    java.lang.reflect.Type java.lang.reflect.Type = tArgs[i];\n                    java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = tParams[i];\n                    while (arg instanceof java.lang.reflect.TypeVariable<?>) {\n                        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(arg));\n                        arg = typeVarMap.get(v.getName());\n                    }\n                    typeVarMap.put(var.getName(), arg);\n                }\n                if (com.google.gson.reflect.TypeToken.typeEquals(ptype, to, typeVarMap)) {\n                    return true;\n                } \n            } \n            for (java.lang.reflect.Type java.lang.reflect.Type : clazz.getGenericInterfaces()) {\n                if (com.google.gson.reflect.TypeToken.isAssignableFrom(itype, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap))) {\n                    return true;\n                } \n            }\n            java.lang.reflect.Type java.lang.reflect.Type = clazz.getGenericSuperclass();\n            return com.google.gson.reflect.TypeToken.isAssignableFrom(sType, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"1968b8e8-3e83-11e6-8c52-ad1e039a0c45","method":{"position":"com.google.gson.JsonObject:78","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.String value) {\n    if (value == null) {\n        {\n            add(property, createJsonElement(value));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264148020/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":10,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
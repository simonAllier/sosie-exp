{"failureDictionary":{"com.google.gson.JsonStreamParserTest.testNoSideEffectForHasNext":658,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":529,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":226,"com.google.gson.functional.StringTest.testStringValueDeserialization":535,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":16,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":480,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":603,"com.google.gson.JsonPrimitiveTest.testDeepCopy":680,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":453,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":103,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":527,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":567,"com.google.gson.MixedStreamTest.testWriteLenient":621,"com.google.gson.internal.bind.JsonTreeWriterTest.testPrematureClose":630,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":507,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":287,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":17,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":237,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":244,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":506,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":485,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":82,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":95,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":299,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":460,"com.google.gson.internal.bind.JsonElementReaderTest.testStrictNansAndInfinities":669,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":432,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":580,"com.google.gson.JsonParserTest.testParseUnquotedMultiWordStringFails":662,"com.google.gson.functional.ObjectTest.testSingletonLists":206,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":83,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":285,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":227,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":448,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":647,"com.google.gson.stream.JsonWriterTest.testStrings":639,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":56,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":236,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":565,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":612,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":515,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":361,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":487,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":574,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":644,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":543,"com.google.gson.DefaultDateTypeAdapterTest.testDatePattern":650,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":317,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":159,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":481,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":338,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":6,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":442,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":14,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":410,"com.google.gson.functional.EnumTest.testEnumCaseMapping":373,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":225,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":358,"com.google.gson.functional.JsonTreeTest.testToJsonTree":393,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":441,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":164,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":613,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":344,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":332,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":437,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":645,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":382,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":449,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":600,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":37,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":558,"com.google.gson.functional.ObjectTest.testNullDeserialization":521,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":247,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":541,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":512,"com.google.gson.JsonPrimitiveTest.testParsingStringAsBoolean":676,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":197,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":314,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":454,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":213,"com.google.gson.internal.bind.JsonElementReaderTest.testLenientNansAndInfinities":668,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":13,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":304,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":518,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":313,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":297,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":295,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":591,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":155,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":495,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":494,"com.google.gson.JsonParserTest.testParseString":664,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":611,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":190,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":646,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":184,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":499,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":594,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":115,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":219,"com.google.gson.DefaultDateTypeAdapterTest.testFormatUsesDefaultTimezone":654,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":284,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":468,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":405,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":478,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":568,"com.google.gson.functional.StreamingTypeAdaptersTest.testFromJsonTree":684,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":150,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":599,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":327,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":308,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":42,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":418,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":191,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":573,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":479,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":111,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":218,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":81,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":85,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":510,"com.google.gson.JsonPrimitiveTest.testEqualsAcrossTypes":683,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":107,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":176,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":415,"com.google.gson.metrics.PerformanceTest.testDummy":364,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":368,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":425,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":157,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":589,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":44,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":420,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":547,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":31,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":286,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":280,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":354,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":303,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":353,"com.google.gson.functional.CollectionTest.testSetDeserialization":352,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":300,"com.google.gson.functional.EnumTest.testEnumSet":89,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":210,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":545,"com.google.gson.JsonStreamParserTest.testIterator":659,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":471,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":431,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":43,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithNestedWildcards":634,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":401,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":597,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":214,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":5,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":61,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":482,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":588,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":488,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":10,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":552,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":194,"com.google.gson.functional.MapTest.testHashMapDeserialization":396,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":451,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":556,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":607,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":86,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":531,"com.google.gson.MixedStreamTest.testReadNulls":622,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":143,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":223,"com.google.gson.DefaultDateTypeAdapterTest.testParsingDatesFormattedWithSystemLocale":652,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":325,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":551,"com.google.gson.functional.MapTest.testSortedMap":412,"com.google.gson.functional.MapTest.testMapSerialization":409,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":530,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":27,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":476,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":384,"com.google.gson.functional.MapTest.testSerializeMaps":128,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":259,"com.google.gson.functional.MapTest.testComplexKeysSerialization":339,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":544,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":307,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":419,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":121,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":249,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":372,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":67,"com.google.gson.internal.LinkedTreeMapTest.testRemoveRootDoesNotDoubleUnlink":1,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":347,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":323,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":371,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":2,"com.google.gson.internal.bind.JsonElementReaderTest.testWrongType":71,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":162,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":104,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":520,"com.google.gson.functional.MapTest.testStringKeyDeserialization":417,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithBasicWildcards":636,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":386,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":48,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":200,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":421,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":457,"com.google.gson.functional.PrettyPrintingTest.testMap":160,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":252,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":452,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":239,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":224,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":271,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":549,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":360,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":387,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":231,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":536,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":277,"com.google.gson.functional.MapTest.testMapSerializationEmpty":416,"com.google.gson.functional.CollectionTest.testQueueSerialization":557,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":472,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnValue":637,"com.google.gson.functional.MapTest.testMapOfMapSerialization":131,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":182,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":601,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":560,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":100,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":187,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":57,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictBoxedNansAndInfinities":632,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":228,"com.google.gson.functional.FieldNamingTest.testIdentity":260,"com.google.gson.JsonStreamParserTest.testCallingNextBeyondAvailableInput":656,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":45,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":122,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":522,"com.google.gson.internal.bind.JsonElementReaderTest.testNestedArrays":72,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":19,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":106,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":205,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":392,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":443,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":7,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":40,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":229,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":185,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":374,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":610,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":80,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":598,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":76,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":99,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":278,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":394,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":199,"com.google.gson.functional.MapTest.testMapSubclassSerialization":398,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":88,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":436,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":546,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":253,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":261,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":466,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":619,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":504,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":569,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":592,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":548,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":60,"com.google.gson.functional.EnumTest.testEnumSubclass":92,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":188,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":362,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":514,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":172,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":301,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":484,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":47,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":345,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":444,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":102,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":469,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":375,"com.google.gson.stream.JsonWriterTest.testNullName":0,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":340,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":79,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":381,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":473,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":511,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":183,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":337,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":291,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":505,"com.google.gson.MixedStreamTest.testWriteNulls":334,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":395,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":380,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":571,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":113,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":248,"com.google.gson.CommentsTest.testParseComments":363,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":429,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":52,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":207,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":581,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":169,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":385,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":483,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":26,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":132,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":230,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":422,"com.google.gson.MixedStreamTest.testReadInvalidState":617,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":296,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":435,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":198,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":293,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":28,"com.google.gson.JsonParserTest.testParseMixedArray":306,"com.google.gson.DefaultDateTypeAdapterTest.testParsingDatesFormattedWithUsLocale":655,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":175,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":388,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithTypeParameters":635,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":166,"com.google.gson.internal.bind.JsonTreeWriterTest.testWriteAfterClose":633,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":179,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":98,"com.google.gson.JsonArrayTest.testRemove":661,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":195,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":602,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":379,"com.google.gson.functional.MapTest.testMapDeserialization":404,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":279,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":165,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":15,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":316,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":579,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":140,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":403,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":66,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":266,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":348,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":127,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":370,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":356,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":212,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":220,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":145,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":254,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":424,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":272,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":434,"com.google.gson.internal.bind.JsonElementReaderTest.testNumbersFromStrings":670,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":101,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":151,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":161,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":411,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":628,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":39,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":440,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":54,"com.google.gson.functional.PrimitiveTest.testShortSerialization":493,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":38,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":486,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":126,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictNansAndInfinities":631,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":467,"com.google.gson.JsonParserTest.testParseEmptyString":666,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":192,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":75,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":450,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":256,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":91,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":553,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":87,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":399,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":463,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":33,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":201,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":3,"com.google.gson.DefaultDateTypeAdapterTest.testFormattingInFr":653,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":73,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":583,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":609,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":310,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":626,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":502,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":498,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":642,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":105,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":46,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":221,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":343,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":262,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":269,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":312,"com.google.gson.JsonPrimitiveTest.testStringsAndChar":677,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":490,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":25,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":49,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":470,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":525,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":509,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":94,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":147,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":234,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":242,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":595,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":251,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":50,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":64,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":267,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":283,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":456,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":274,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":326,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":268,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":605,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":341,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":554,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":445,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":491,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":186,"com.google.gson.JsonArrayTest.testSet":660,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":202,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":137,"com.google.gson.JsonPrimitiveTest.testEquals":679,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":65,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":90,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":534,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":29,"com.google.gson.functional.MapTest.testGeneralMapField":135,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":508,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":110,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":501,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":34,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":118,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":302,"com.google.gson.DefaultDateTypeAdapterTest.testDateSerialization":649,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":288,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":413,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":154,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":174,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":328,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":193,"com.google.gson.MixedStreamTest.testReadMixedStreamed":625,"com.google.gson.JsonObjectTest.testDeepCopy":673,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":180,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":406,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":596,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":8,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":562,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":585,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":367,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":474,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":77,"com.google.gson.internal.bind.JsonTreeWriterTest.testEmptyWriter":672,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":587,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":282,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":407,"com.google.gson.JsonArrayTest.testDeepCopy":68,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":158,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":397,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":53,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":203,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":171,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":264,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":464,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":311,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":281,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":572,"com.google.gson.JsonPrimitiveTest.testEqualsDoesNotEquateStringAndNonStringTypes":678,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":123,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":559,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":590,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":582,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":58,"com.google.gson.functional.ObjectTest.testNestedDeserialization":526,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":217,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":318,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":532,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":423,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":125,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":500,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":168,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":376,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":408,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":537,"com.google.gson.JsonParserTest.testParseUnquotedStringArrayFails":667,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":430,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":196,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":146,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":21,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":570,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":564,"com.google.gson.functional.ObjectTest.testNullSerialization":322,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":149,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":438,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":400,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":134,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":173,"com.google.gson.functional.MapTest.testInterfaceTypeMap":133,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":383,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":35,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":426,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":446,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":93,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":641,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":255,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":428,"com.google.gson.MixedStreamTest.testReadClosed":618,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":270,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":12,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":458,"com.google.gson.MixedStreamTest.testWriteClosed":624,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":241,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":533,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":208,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":342,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":614,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":433,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":139,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":350,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":167,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":222,"com.google.gson.LongSerializationPolicyTest.testStringLongSerialization":648,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":294,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":141,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":209,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":240,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":576,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":477,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":265,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":346,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":243,"com.google.gson.internal.bind.JsonElementReaderTest.testSkipValue":70,"com.google.gson.DefaultDateTypeAdapterTest.testFormattingInEnUs":651,"com.google.gson.internal.bind.JsonElementReaderTest.testStrings":671,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":606,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":9,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":96,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":503,"com.google.gson.JsonPrimitiveTest.testParsingStringAsNumber":682,"com.google.gson.JsonParserTest.testParseInvalidJson":69,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":178,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":391,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":593,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":108,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":250,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":349,"com.google.gson.functional.CollectionTest.testQueueDeserialization":566,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":181,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":475,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":540,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":528,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":292,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":577,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":129,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":519,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":276,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":156,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":524,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":238,"com.google.gson.functional.MapTest.testRawMapSerialization":136,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":616,"com.google.gson.JsonParserTest.testParseReader":663,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":563,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":604,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":643,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":144,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":215,"com.google.gson.JsonPrimitiveTest.testExponential":681,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":32,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":74,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":627,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":112,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":235,"com.google.gson.functional.PrimitiveTest.testByteSerialization":492,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":629,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":319,"com.google.gson.ObjectTypeAdapterTest.testSerialize":335,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":152,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":455,"com.google.gson.JsonPrimitiveTest.testEqualsIntegerAndBigInteger":315,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":18,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":117,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":257,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":4,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":62,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":538,"com.google.gson.functional.MapTest.testMapWithQuotes":130,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":330,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":461,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":539,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":41,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":584,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":305,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":142,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":496,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":329,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":298,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":36,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":59,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":523,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":439,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":189,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":273,"com.google.gson.functional.ObjectTest.testEmptyStringDeserialization":513,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":120,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":351,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":289,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":331,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":20,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":263,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":275,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":489,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":324,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":561,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":378,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":22,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":109,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":290,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":148,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":124,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":578,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":369,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":550,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":23,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":447,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":55,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":516,"com.google.gson.functional.ObjectTest.testNestedSerialization":216,"com.google.gson.JsonObjectTest.testAddingStringProperties":674,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":138,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":153,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":177,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":542,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":170,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":414,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":30,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":24,"com.google.gson.JsonParserTest.testParseUnquotedSingleWordStringFails":665,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":78,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":623,"com.google.gson.stream.JsonWriterTest.testUnicodeLineBreaksEscaped":640,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":211,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":389,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":497,"com.google.gson.JsonPrimitiveTest.testBoolean":675,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":427,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":366,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":357,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":359,"com.google.gson.GsonBuilderTest.testCreatingMoreThanOnce":365,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":459,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":355,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":517,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":575,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":232,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":116,"com.google.gson.functional.CollectionTest.testSetSerialization":245,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":615,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":51,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":163,"com.google.gson.functional.StringTest.testStringValueSerialization":233,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":204,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":97,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":336,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":555,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":377,"com.google.gson.MixedStreamTest.testWriteInvalidState":620,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":321,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":462,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":119,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":465,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":84,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":333,"com.google.gson.stream.JsonWriterTest.testWrongTopLevelType":638,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":258,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":246,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":390,"com.google.gson.JsonStreamParserTest.testParseTwoStrings":657,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":11,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":309,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":63,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":608,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":320,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":402,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":114,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":586},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:107","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"3dcf2fbb-3f0a-11e6-a7bd-732c7a85e8c4","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:839","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonArray) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321167744/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return containsKey(o);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:107","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"3dcfa4ec-3f0a-11e6-a7bd-851e2ff5eed0","method":{"position":"com.google.gson.reflect.TypeToken:283","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic final boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonArray) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321167744/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (o instanceof com.google.gson.reflect.TypeToken<?>) && (com.google.gson.internal.$Gson$Types.equals(java.lang.reflect.Type, ((com.google.gson.reflect.TypeToken<?>)(o)).java.lang.reflect.Type));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl"},"failures":[0],"tindex":"3dcfa4ed-3f0a-11e6-a7bd-c5c0800a3e23","method":{"position":"com.google.gson.stream.JsonWriter:385","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter name(java.lang.String name) throws java.io.IOException {\n    if (name == null) {\n        {\n            if (name == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321167744/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (name == null) {\n                        throw new java.lang.NullPointerException(\"name == null\");\n                    } \n                    if ((java.lang.String) != null) {\n                        throw new java.lang.IllegalStateException();\n                    } \n                    if ((int) == 0) {\n                        throw new java.lang.IllegalStateException(\"JsonWriter is closed.\");\n                    } \n                    java.lang.String = name;\n                    return com.google.gson.stream.JsonWriter.this;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321167744/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:391","type":"CtUnaryOperatorImpl"},"failures":[1,2,3],"tindex":"3dcfcbfe-3f0a-11e6-a7bd-b7e822d156e8","method":{"position":"com.google.gson.internal.LinkedTreeMap:310","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (!insert) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321167744/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            for (com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>) {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                int int = left != null ? left.int : 0;\n                int int = right != null ? right.int : 0;\n                int int = leftHeight - rightHeight;\n                if (delta == (-2)) {\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    int int = rightRight != null ? rightRight.int : 0;\n                    int int = rightLeft != null ? rightLeft.int : 0;\n                    int int = rightLeftHeight - rightRightHeight;\n                    if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                        rotateLeft(node);\n                    } else {\n                        assert rightDelta == 1;\n                        rotateRight(right);\n                        rotateLeft(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 2) {\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    int int = leftRight != null ? leftRight.int : 0;\n                    int int = leftLeft != null ? leftLeft.int : 0;\n                    int int = leftLeftHeight - leftRightHeight;\n                    if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                        rotateRight(node);\n                    } else {\n                        assert leftDelta == (-1);\n                        rotateLeft(left);\n                        rotateRight(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 0) {\n                    node.int = leftHeight + 1;\n                    if (insert) {\n                        break;\n                    } \n                } else {\n                    assert (delta == (-1)) || (delta == 1);\n                    node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                    if (!insert) {\n                        break;\n                    } \n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"insert"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:105","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"3dcff30f-3f0a-11e6-a7bd-856044771806","method":{"position":"com.google.gson.internal.LinkedTreeMap:481","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"rawtypes\")\n@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonNull) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321167744/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof com.google.gson.JsonNull) {\n                {\n                    if (o instanceof com.google.gson.JsonObject) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321167744/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            if (o instanceof java.util.Map.Entry) {\n                                java.util.Map.Entry java.util.Map.Entry = ((java.util.Map.Entry)(o));\n                                return ((K) == null ? (other.getKey()) == null : K.equals(other.getKey())) && ((V) == null ? (other.getValue()) == null : V.equals(other.getValue()));\n                            } \n                            return false;\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321167744/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:497","type":"CtBinaryOperatorImpl"},"failures":[4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58],"tindex":"3dd01a20-3f0a-11e6-a7bd-3bbdc2942ae7","method":{"position":"com.google.gson.TreeTypeAdapter:92","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newFactoryWithMatchRawType(com.google.gson.reflect.TypeToken<?> exactType, java.lang.Object typeAdapter) {\n    if ((typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321167744/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            boolean boolean = (exactType.getType()) == (exactType.getRawType());\n            return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , exactType , matchRawType , null);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:198","type":"CtBinaryOperatorImpl"},"failures":[59,60,61,62,63,64,65,66,67],"tindex":"3dd04131-3f0a-11e6-a7bd-35a67a427ef2","method":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:84","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Object array) throws java.io.IOException {\n    if (array == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321167744/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (array == null) {\n                out.nullValue();\n                return ;\n            } \n            out.beginArray();\n            for (int int = 0, int int = java.lang.reflect.Array.getLength(array) ; i < length ; i++) {\n                E E = ((E)(java.lang.reflect.Array.get(array, i)));\n                com.google.gson.TypeAdapter<E>.write(out, value);\n            }\n            out.endArray();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:106","type":"CtBinaryOperatorImpl"},"failures":[68,69,70,71,72,73],"tindex":"3dd04132-3f0a-11e6-a7bd-81796eb075ff","method":{"position":"com.google.gson.JsonArray:57","type":"CtMethodImpl","sourcecode":"public void add(com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321167744/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (element instanceof com.google.gson.JsonArray) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321167744/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (element == null) {\n                        element = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n                    } \n                    java.util.List<com.google.gson.JsonElement>.add(element);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"3dd06843-3f0a-11e6-a7bd-170ca6dcc234","method":{"position":"com.google.gson.JsonParser:44","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement parse(java.lang.String json) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321167744/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (json == null) {\n                {\n                    return parse(new java.io.StringReader(json));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321167744/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl"},"failures":[74,75,76],"tindex":"3dd06844-3f0a-11e6-a7bd-81b399eae6ed","method":{"position":"com.google.gson.Gson:532","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321167744/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n            toJson(src, typeOfSrc, writer);\n            return writer.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"3dd08f55-3f0a-11e6-a7bd-b54c7c5a484f","method":{"position":"com.google.gson.stream.JsonWriter:385","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter name(java.lang.String name) throws java.io.IOException {\n    if (name == null) {\n        {\n            if (name == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321167744/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (name == null) {\n                        throw new java.lang.NullPointerException(\"name == null\");\n                    } \n                    if ((java.lang.String) != null) {\n                        throw new java.lang.IllegalStateException();\n                    } \n                    if ((int) == 0) {\n                        throw new java.lang.IllegalStateException(\"JsonWriter is closed.\");\n                    } \n                    java.lang.String = name;\n                    return com.google.gson.stream.JsonWriter.this;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321167744/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"3dd08f56-3f0a-11e6-a7bd-292b03d010ca","method":{"position":"com.google.gson.JsonParser:44","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement parse(java.lang.String json) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321167744/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (json == null) {\n                {\n                    return parse(new java.io.StringReader(json));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321167744/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"3dd0b667-3f0a-11e6-a7bd-337232d078dc","method":{"position":"com.google.gson.Gson:491","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321167744/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.bind.JsonTreeWriter com.google.gson.internal.bind.JsonTreeWriter = new com.google.gson.internal.bind.JsonTreeWriter();\n            toJson(src, typeOfSrc, writer);\n            return writer.get();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:455","type":"CtBinaryOperatorImpl"},"failures":[13,77],"tindex":"3dd0b668-3f0a-11e6-a7bd-c9433ff0b6bf","method":{"position":"com.google.gson.GsonBuilder:493","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\npublic com.google.gson.GsonBuilder registerTypeHierarchyAdapter(java.lang.Class<?> baseType, java.lang.Object typeAdapter) {\n    if ((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) {\n        {\n            com.google.gson.internal.$Gson$Preconditions.checkArgument((((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) || (typeAdapter instanceof com.google.gson.TypeAdapter<?>)));\n            if ((typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)) {\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(0, com.google.gson.TreeTypeAdapter.newTypeHierarchyFactory(baseType, typeAdapter));\n            } \n            if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.internal.bind.TypeAdapters.newTypeHierarchyFactory(baseType, ((com.google.gson.TypeAdapter)(typeAdapter))));\n            } \n            return com.google.gson.GsonBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321167744/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl"},"failures":[6,7,8,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,10,11,12,13,125,14,77,126,127,128,129,130,131,132,133,134,135,136,16,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,28,30,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,34,252,35,253,254,255,256,257,258,259,260,261,262,263,264,265,64,266,37,65,66,267,38,268,67,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,39,295,296,297,298,299,300,301,40,302,303,304,41,47,48,49,51,52,53,55,305],"tindex":"3dd0b669-3f0a-11e6-a7bd-71e91a7cafdb","method":{"position":"com.google.gson.Gson:510","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src) {\n    if (src != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321167744/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src == null) {\n                return toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull);\n            } \n            return toJson(src, src.getClass());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.TreeTypeAdapter:55","type":"CtInvocationImpl"},"failures":[7,306,307,308,309,310,311,73,312,313,314,315,316,91,10,12,13,14,127,15,16,317,318,17,18,19,20,21,22,24,319,320,321,322,323,324,33,35,38,74,325,326,327,328,329,330,331,332,333,287,290,39,76,41,43,47,48,49,51,52,53,55,57,305,58,334],"tindex":"3dd0dd7a-3f0a-11e6-a7bd-11e7b68c2020","method":{"position":"com.google.gson.internal.bind.TypeAdapters:680","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, com.google.gson.JsonElement value) throws java.io.IOException {\n    if (value.isJsonNull()) {\n        {\n            if ((value == null) || (value.isJsonNull())) {\n                out.nullValue();\n            } else if (value.isJsonPrimitive()) {\n                com.google.gson.JsonPrimitive com.google.gson.JsonPrimitive = value.getAsJsonPrimitive();\n                if (primitive.isNumber()) {\n                    out.value(primitive.getAsNumber());\n                } else if (primitive.isBoolean()) {\n                    out.value(primitive.getAsBoolean());\n                } else {\n                    out.value(primitive.getAsString());\n                }\n            } else if (value.isJsonArray()) {\n                out.beginArray();\n                for (com.google.gson.JsonElement com.google.gson.JsonElement : value.getAsJsonArray()) {\n                    write(out, e);\n                }\n                out.endArray();\n            } else if (value.isJsonObject()) {\n                out.beginObject();\n                for (java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> : value.getAsJsonObject().entrySet()) {\n                    out.name(e.getKey());\n                    write(out, e.getValue());\n                }\n                out.endObject();\n            } else {\n                throw new java.lang.IllegalArgumentException((\"Couldn't write \" + (value.getClass())));\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321167744/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:118","type":"CtBinaryOperatorImpl"},"failures":[335,84,85,96,97,98,99,100,103,104,336,337,106,107,127,338,339,137,138,340,139,341,342,343,140,344,142,143,144,145,146,147,148,149,345,346,347,348,17,18,20,21,166,167,168,169,349,350,174,32,351,210,220,221,237,352,245,246,247,248,249,353,250,253,354,355,356,75,357,282,294,296,298,299,300,42,47],"tindex":"3dd1048b-3f0a-11e6-a7bd-87e405aea561","method":{"position":"com.google.gson.internal.ConstructorConstructor:200","type":"CtMethodImpl","sourcecode":"private <T>com.google.gson.internal.ObjectConstructor<T> newUnsafeAllocator(final java.lang.reflect.Type type, final java.lang.Class<? super T> rawType) {\n    if (type instanceof java.lang.Class<?>) {\n        {\n            if (type instanceof java.lang.Class<?>) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321167744/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        private final com.google.gson.internal.UnsafeAllocator unsafeAllocator = com.google.gson.internal.UnsafeAllocator.create();\n\n                        @java.lang.SuppressWarnings(value = \"unchecked\")\n                        public T construct() {\n                            try {\n                                java.lang.Object java.lang.Object = com.google.gson.internal.UnsafeAllocator.newInstance(rawType);\n                                return ((T)(newInstance));\n                            } catch (java.lang.Exception e) {\n                                throw new java.lang.RuntimeException((((\"Unable to invoke no-args constructor for \" + type) + \". \") + \"Register an InstanceCreator with Gson for this type may fix this problem.\") , e);\n                            }\n                        }\n                    };\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321167744/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:274","type":"CtVariableReadImpl"},"failures":[358,359,360,361,362,363,4,5,6,7,8,78,364,79,80,365,81,313,314,82,366,367,83,368,84,85,86,87,88,369,89,90,91,92,370,371,93,372,94,373,95,101,374,375,102,103,376,104,336,105,337,106,107,108,109,377,110,111,112,113,114,378,379,115,116,380,381,382,383,117,384,118,385,119,386,120,387,121,388,389,122,123,9,124,390,10,11,12,13,125,14,77,126,391,127,392,393,394,15,395,396,397,398,128,399,400,401,402,403,404,129,405,406,407,408,130,131,409,410,338,411,132,412,133,413,134,135,414,136,415,339,416,417,418,419,420,421,16,317,318,422,137,138,423,340,424,425,139,426,341,427,342,343,140,141,344,143,144,145,146,147,148,149,345,346,150,428,151,347,348,152,153,154,155,156,17,18,19,20,21,59,429,22,430,60,61,157,431,432,433,62,63,434,435,23,436,437,24,25,438,158,159,160,161,162,163,164,165,439,166,167,168,169,349,350,170,171,440,441,442,172,443,173,444,445,446,447,448,174,449,450,175,451,452,453,454,455,456,457,176,177,458,459,460,461,462,178,463,179,180,464,465,181,466,467,182,468,183,184,469,470,185,186,471,472,473,187,474,475,476,477,478,479,480,481,188,482,189,483,190,191,484,485,192,486,487,193,488,194,489,490,491,195,492,196,197,493,198,199,494,495,496,200,497,201,498,499,500,202,203,501,502,503,504,26,27,28,29,30,31,32,204,319,320,205,206,505,506,207,507,508,208,509,510,209,321,351,511,210,512,322,211,513,514,212,515,213,214,516,215,216,217,517,218,518,519,520,521,219,522,220,221,523,222,524,525,526,527,223,528,529,530,531,532,224,533,534,535,225,226,227,228,229,536,537,230,538,231,539,540,541,232,542,543,233,544,545,234,546,547,235,548,236,323,549,550,551,324,552,237,238,553,239,554,555,556,557,240,241,558,242,559,560,243,561,352,244,562,563,245,564,565,33,566,246,247,248,249,353,250,251,34,252,35,253,254,255,567,568,569,3,570,571,572,573,256,257,258,259,260,261,262,574,575,263,264,576,577,265,578,64,579,580,266,36,37,65,66,581,267,38,268,74,582,67,583,325,584,585,326,327,586,354,587,588,589,590,269,328,270,591,355,356,329,592,271,330,593,331,594,332,272,595,596,333,597,75,598,273,274,275,276,277,357,278,599,279,280,600,281,601,282,602,283,284,603,285,604,605,606,607,608,286,609,287,288,610,289,290,291,292,293,294,611,612,39,76,613,295,614,296,297,298,299,300,301,40,302,615,303,304,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,305,58,616,617,618,619,334,620,621,622,623,624,625,626],"tindex":"3dd12b9c-3f0a-11e6-a7bd-39de7cca698e","method":{"position":"com.google.gson.Gson:249","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> doubleAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return in.nextDouble();\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    double double = value.doubleValue();\n                    checkValidFloatingPoint(doubleValue);\n                    out.value(value);\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321167744/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[103,106,411,414,59,61,62,63,75],"tindex":"3dd152ad-3f0a-11e6-a7bd-e7fe32189d90","method":{"position":"com.google.gson.internal.bind.TypeAdapters:245","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321167744/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:131","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"3dd152ae-3f0a-11e6-a7bd-53971072f103","method":{"position":"com.google.gson.internal.ConstructorConstructor:200","type":"CtMethodImpl","sourcecode":"private <T>com.google.gson.internal.ObjectConstructor<T> newUnsafeAllocator(final java.lang.reflect.Type type, final java.lang.Class<? super T> rawType) {\n    if (type instanceof java.lang.Class<?>) {\n        {\n            if (type instanceof java.lang.Class<?>) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321167744/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        private final com.google.gson.internal.UnsafeAllocator unsafeAllocator = com.google.gson.internal.UnsafeAllocator.create();\n\n                        @java.lang.SuppressWarnings(value = \"unchecked\")\n                        public T construct() {\n                            try {\n                                java.lang.Object java.lang.Object = com.google.gson.internal.UnsafeAllocator.newInstance(rawType);\n                                return ((T)(newInstance));\n                            } catch (java.lang.Exception e) {\n                                throw new java.lang.RuntimeException((((\"Unable to invoke no-args constructor for \" + type) + \". \") + \"Register an InstanceCreator with Gson for this type may fix this problem.\") , e);\n                            }\n                        }\n                    };\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321167744/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl"},"failures":[335,84,85,96,97,98,99,100,210,221,527],"tindex":"3dd179bf-3f0a-11e6-a7bd-adea2c32fa7a","method":{"position":"com.google.gson.internal.Excluder:149","type":"CtMethodImpl","sourcecode":"public boolean excludeField(java.lang.reflect.Field field, boolean serialize) {\n    if (field.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321167744/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (((int) & (field.getModifiers())) != 0) {\n                return true;\n            } \n            if (((double) != (com.google.gson.internal.Excluder.com.google.gson.internal.Excluder.double)) && (!(isValidVersion(field.getAnnotation(com.google.gson.annotations.Since.com.google.gson.annotations.Since.java.lang.Class), field.getAnnotation(com.google.gson.annotations.Until.com.google.gson.annotations.Until.java.lang.Class))))) {\n                return true;\n            } \n            if (field.isSynthetic()) {\n                return true;\n            } \n            if (boolean) {\n                com.google.gson.annotations.Expose com.google.gson.annotations.Expose = field.getAnnotation(com.google.gson.annotations.Expose.com.google.gson.annotations.Expose.java.lang.Class);\n                if ((annotation == null) || (serialize ? !(annotation.serialize()) : !(annotation.deserialize()))) {\n                    return true;\n                } \n            } \n            if ((!(boolean)) && (isInnerClass(field.getType()))) {\n                return true;\n            } \n            if (isAnonymousOrLocal(field.getType())) {\n                return true;\n            } \n            java.util.List<com.google.gson.ExclusionStrategy> java.util.List<com.google.gson.ExclusionStrategy> = serialize ? java.util.List<com.google.gson.ExclusionStrategy> : java.util.List<com.google.gson.ExclusionStrategy>;\n            if (!(list.isEmpty())) {\n                com.google.gson.FieldAttributes com.google.gson.FieldAttributes = new com.google.gson.FieldAttributes(field);\n                for (com.google.gson.ExclusionStrategy com.google.gson.ExclusionStrategy : list) {\n                    if (exclusionStrategy.shouldSkipField(fieldAttributes)) {\n                        return true;\n                    } \n                }\n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"field"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:120","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"3dd179c0-3f0a-11e6-a7bd-276fc7617cb0","method":{"position":"com.google.gson.internal.LinkedTreeMap:481","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"rawtypes\")\n@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonNull) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321167744/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof com.google.gson.JsonNull) {\n                {\n                    if (o instanceof com.google.gson.JsonObject) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321167744/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            if (o instanceof java.util.Map.Entry) {\n                                java.util.Map.Entry java.util.Map.Entry = ((java.util.Map.Entry)(o));\n                                return ((K) == null ? (other.getKey()) == null : K.equals(other.getKey())) && ((V) == null ? (other.getValue()) == null : V.equals(other.getValue()));\n                            } \n                            return false;\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321167744/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonObject:54","type":"CtBinaryOperatorImpl"},"failures":[627,628,629,630,307,308,309,631,632,633,310,311,73,312,391,127,392,393,133,135,16,317,423,340,424,341,427,344,17,18,19,20,21,22,349,350,529,325,326,327],"tindex":"3dd1a0d1-3f0a-11e6-a7bd-699db9b33bd0","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:75","type":"CtMethodImpl","sourcecode":"private void put(com.google.gson.JsonElement value) {\n    if (value == null) {\n        {\n            if ((java.lang.String) != null) {\n                if ((!(value.isJsonNull())) || (getSerializeNulls())) {\n                    com.google.gson.JsonObject com.google.gson.JsonObject = ((com.google.gson.JsonObject)(peek()));\n                    object.add(java.lang.String, value);\n                } \n                java.lang.String = null;\n            } else if (java.util.List<com.google.gson.JsonElement>.isEmpty()) {\n                com.google.gson.JsonElement = value;\n            } else {\n                com.google.gson.JsonElement com.google.gson.JsonElement = peek();\n                if (element instanceof com.google.gson.JsonArray) {\n                    ((com.google.gson.JsonArray)(element)).add(value);\n                } else {\n                    throw new java.lang.IllegalStateException();\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321167744/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:188","type":"CtBinaryOperatorImpl"},"failures":[634,635,636],"tindex":"3dd1a0d2-3f0a-11e6-a7bd-bf261789d7d7","method":{"position":"com.google.gson.reflect.TypeToken:185","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.ParameterizedType to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeVarMap) {\n    if (from instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321167744/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (from == null) {\n                {\n                    if (from == null) {\n                        return false;\n                    } \n                    if (to.equals(from)) {\n                        return true;\n                    } \n                    java.lang.Class<?> java.lang.Class<?> = com.google.gson.internal.$Gson$Types.getRawType(from);\n                    java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = null;\n                    if (from instanceof java.lang.reflect.ParameterizedType) {\n                        ptype = ((java.lang.reflect.ParameterizedType)(from));\n                    } \n                    if (ptype != null) {\n                        java.lang.reflect.Type[] java.lang.reflect.Type[] = ptype.getActualTypeArguments();\n                        java.lang.reflect.TypeVariable<?>[] java.lang.reflect.TypeVariable<?>[] = clazz.getTypeParameters();\n                        for (int int = 0 ; i < (tArgs.int) ; i++) {\n                            java.lang.reflect.Type java.lang.reflect.Type = tArgs[i];\n                            java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = tParams[i];\n                            while (arg instanceof java.lang.reflect.TypeVariable<?>) {\n                                java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(arg));\n                                arg = typeVarMap.get(v.getName());\n                            }\n                            typeVarMap.put(var.getName(), arg);\n                        }\n                        if (com.google.gson.reflect.TypeToken.typeEquals(ptype, to, typeVarMap)) {\n                            return true;\n                        } \n                    } \n                    for (java.lang.reflect.Type java.lang.reflect.Type : clazz.getGenericInterfaces()) {\n                        if (com.google.gson.reflect.TypeToken.isAssignableFrom(itype, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap))) {\n                            return true;\n                        } \n                    }\n                    java.lang.reflect.Type java.lang.reflect.Type = clazz.getGenericSuperclass();\n                    return com.google.gson.reflect.TypeToken.isAssignableFrom(sType, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321167744/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[493],"tindex":"3dd1c7e3-3f0a-11e6-a7bd-19863c4bbd46","method":{"position":"com.google.gson.internal.bind.TypeAdapters:223","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321167744/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl"},"failures":[358,360,5,8,78,79,80,81,313,316,637,638,639,640,82,83,84,85,88,369,89,90,91,92,93,94,373,95,96,97,98,99,100,101,102,108,109,112,113,115,116,117,118,120,122,123,10,11,12,13,125,14,77,126,127,398,128,401,403,129,130,131,133,134,135,136,339,418,16,317,318,137,138,425,139,426,140,141,142,143,145,147,148,150,152,153,154,155,156,22,431,24,158,162,439,166,167,170,171,174,175,178,194,641,642,643,644,28,30,204,319,320,206,207,208,209,211,214,216,219,221,222,223,530,225,226,227,228,229,230,231,232,233,234,235,236,552,237,238,557,241,558,242,243,244,562,33,246,247,248,249,250,251,34,252,35,253,254,263,266,326,327,269,328,270,271,330,331,332,272,273,275,276,277,278,279,280,602,285,606,286,287,288,290,291,292,293,39,295,41,43,47,52,53,58,616,619,623],"tindex":"3dd1c7e4-3f0a-11e6-a7bd-5fd89ae30c57","method":{"position":"com.google.gson.stream.JsonWriter:413","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                {\n                    if (value == null) {\n                        return nullValue();\n                    } \n                    writeDeferredName();\n                    beforeValue(false);\n                    string(value);\n                    return com.google.gson.stream.JsonWriter.this;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321167744/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321167744/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:107","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"3dd1eef5-3f0a-11e6-a7bd-430fb4f57f13","method":{"position":"com.google.gson.internal.$Gson$Types:213","type":"CtMethodImpl","sourcecode":"private static int hashCodeOrZero(java.lang.Object o) {\n    return o != null ? o.hashCode() : 0;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl"},"failures":[22,40],"tindex":"3dd1eef6-3f0a-11e6-a7bd-a141d0ddd51d","method":{"position":"com.google.gson.Gson:133","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src) {\n    if (src == null) {\n        {\n            if (src != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321167744/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return toJsonTree(src);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321167744/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:92","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"3dd1eef7-3f0a-11e6-a7bd-e9c21490be77","method":{"position":"com.google.gson.internal.$Gson$Types:511","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    return (o instanceof java.lang.reflect.GenericArrayType) && (com.google.gson.internal.$Gson$Types.equals(com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl.this, ((java.lang.reflect.GenericArrayType)(o))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:127","type":"CtInvocationImpl"},"failures":[336,107,137,174],"tindex":"3dd1eef8-3f0a-11e6-a7bd-31c4ff0fce54","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:125","type":"CtMethodImpl","sourcecode":"private java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> getBoundFields(com.google.gson.Gson context, com.google.gson.reflect.TypeToken<?> type, java.lang.Class<?> raw) {\n    if (raw.isInterface()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321167744/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> = new java.util.LinkedHashMap<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField>();\n            if (raw.isInterface()) {\n                return result;\n            } \n            java.lang.reflect.Type java.lang.reflect.Type = type.getType();\n            while (raw != (java.lang.Object.java.lang.Object.java.lang.Class)) {\n                java.lang.reflect.Field[] java.lang.reflect.Field[] = raw.getDeclaredFields();\n                for (java.lang.reflect.Field java.lang.reflect.Field : fields) {\n                    boolean boolean = excludeField(field, true);\n                    boolean boolean = excludeField(field, false);\n                    if ((!serialize) && (!deserialize)) {\n                        continue;\n                    } \n                    field.setAccessible(true);\n                    java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, field.getGenericType());\n                    com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = createBoundField(context, field, getFieldName(field), com.google.gson.reflect.TypeToken.get(fieldType), serialize, deserialize);\n                    com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = result.put(boundField.java.lang.String, boundField);\n                    if (previous != null) {\n                        throw new java.lang.IllegalArgumentException(((declaredType + \" declares multiple JSON fields named \") + (previous.java.lang.String)));\n                    } \n                }\n                type = com.google.gson.reflect.TypeToken.get(com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, raw.getGenericSuperclass()));\n                raw = type.getRawType();\n            }\n            return result;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"raw"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[359,81,83,117,118,122,123,391,127,392,393,135,317,139,140,144,152,155,156,431,162,439,171,186,188,201,502,204,205,207,211,214,215,216,219,220,222,223,529,530,224,236,552,237,553,242,244,263],"tindex":"3dd21609-3f0a-11e6-a7bd-499dd905d8da","method":{"position":"com.google.gson.internal.bind.TypeAdapters:267","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321167744/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"3dd2160a-3f0a-11e6-a7bd-3f4fc49d8d03","method":{"position":"com.google.gson.stream.JsonWriter:413","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                {\n                    if (value == null) {\n                        return nullValue();\n                    } \n                    writeDeferredName();\n                    beforeValue(false);\n                    string(value);\n                    return com.google.gson.stream.JsonWriter.this;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321167744/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321167744/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[5,335,79,80,81,83,84,85,87,88,369,93,96,97,98,99,100,101,102,103,104,106,107,118,122,123,124,391,127,392,393,129,133,134,135,16,317,137,138,423,340,424,425,139,426,341,427,140,141,344,142,143,144,145,147,148,149,150,151,152,155,156,17,18,20,21,59,430,60,61,157,431,433,62,63,435,437,24,161,162,439,166,167,168,169,349,350,171,641,642,643,645,646,644,28,30,204,205,206,207,208,209,210,211,214,215,216,218,219,220,221,222,223,529,530,224,236,552,237,553,242,244,245,246,247,248,249,250,253,256,257,258,259,260,262,263,264,265,64,65,66,267,268,67,325,326,327,282,289,294,296,298,299,300,301,302,303,304,47,49,51,616,619],"tindex":"3dd23d1b-3f0a-11e6-a7bd-13323ba381cb","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:108","type":"CtMethodImpl","sourcecode":"public boolean writeField(java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value == null) {\n        {\n            if (!(boolean))\n                return false;\n            \n            java.lang.Object java.lang.Object = field.get(value);\n            return fieldValue != value;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321167744/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonObject:54","type":"CtBinaryOperatorImpl"},"failures":[335,647,97,103,106,110,116,119,120,124,392,128,129,411,133,413,134,414,16,423,340,424,425,426,341,427,141,344,149,59,60,61,62,63,24,166,169,349,350,641,645,646,644,204,219,238,558,64,266,65,66,267,268,67,289],"tindex":"3dd23d1c-3f0a-11e6-a7bd-15480619e04d","method":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:74","type":"CtMethodImpl","sourcecode":"private java.lang.reflect.Type getRuntimeTypeIfMoreSpecific(java.lang.reflect.Type type, java.lang.Object value) {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321167744/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((value != null) && (((type == (java.lang.Object.java.lang.Object.java.lang.Class)) || (type instanceof java.lang.reflect.TypeVariable<?>)) || (type instanceof java.lang.Class<?>))) {\n                type = value.getClass();\n            } \n            return type;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:240","type":"CtInvocationImpl"},"failures":[],"tindex":"3dd23d1d-3f0a-11e6-a7bd-391f833f8226","method":{"position":"com.google.gson.reflect.TypeToken:238","type":"CtMethodImpl","sourcecode":"private static boolean typeEquals(java.lang.reflect.ParameterizedType from, java.lang.reflect.ParameterizedType to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeVarMap) {\n    if (to.getRawType().equals(to.getRawType())) {\n        {\n            if (from.getRawType().equals(to.getRawType())) {\n                java.lang.reflect.Type[] java.lang.reflect.Type[] = from.getActualTypeArguments();\n                java.lang.reflect.Type[] java.lang.reflect.Type[] = to.getActualTypeArguments();\n                for (int int = 0 ; i < (fromArgs.int) ; i++) {\n                    if (!(com.google.gson.reflect.TypeToken.matches(fromArgs[i], toArgs[i], typeVarMap))) {\n                        return false;\n                    } \n                }\n                return true;\n            } \n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321167744/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"to","to":"to"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:120","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"3dd2642e-3f0a-11e6-a7bd-db784745e504","method":{"position":"com.google.gson.internal.LinkedTreeMap:481","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"rawtypes\")\n@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonNull) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321167744/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof com.google.gson.JsonNull) {\n                {\n                    if (o instanceof com.google.gson.JsonObject) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321167744/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            if (o instanceof java.util.Map.Entry) {\n                                java.util.Map.Entry java.util.Map.Entry = ((java.util.Map.Entry)(o));\n                                return ((K) == null ? (other.getKey()) == null : K.equals(other.getKey())) && ((V) == null ? (other.getValue()) == null : V.equals(other.getValue()));\n                            } \n                            return false;\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321167744/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:79","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"3dd2642f-3f0a-11e6-a7bd-e316f5eef610","method":{"position":"com.google.gson.Gson:871","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n        {\n            if (json == null) {\n                return null;\n            } \n            return ((T)(fromJson(new com.google.gson.internal.bind.JsonTreeReader(json), typeOfT)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321167744/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:278","type":"CtBinaryOperatorImpl"},"failures":[1,2,3],"tindex":"3dd26430-3f0a-11e6-a7bd-5ff2f41cd3b6","method":{"position":"com.google.gson.internal.LinkedTreeMap:217","type":"CtMethodImpl","sourcecode":"void removeInternal(com.google.gson.internal.LinkedTreeMap.Node<K, V> node, boolean unlink) {\n    if (node != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321167744/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (unlink) {\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            if ((left != null) && (right != null)) {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = (left.int) > (right.int) ? left.last() : right.first();\n                removeInternal(adjacent, false);\n                int int = 0;\n                left = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                if (left != null) {\n                    leftHeight = left.int;\n                    adjacent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = left;\n                    left.com.google.gson.internal.LinkedTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                } \n                int int = 0;\n                right = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                if (right != null) {\n                    rightHeight = right.int;\n                    adjacent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = right;\n                    right.com.google.gson.internal.LinkedTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                } \n                adjacent.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                replaceInParent(node, adjacent);\n                return ;\n            } else if (left != null) {\n                replaceInParent(node, left);\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n            } else if (right != null) {\n                replaceInParent(node, right);\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n            } else {\n                replaceInParent(node, null);\n            }\n            rebalance(originalParent, false);\n            (int)--;\n            (int)++;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"node"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:274","type":"CtBinaryOperatorImpl"},"failures":[648,649,650,651,652,653,654,655,656,657,658,659,627,628,629,660,68,661,662,663,664,81,665,306,666,667,70,668,669,71,670,671,630,307,308,309,631,672,632,633,310,311,73,312,313,2,673,674,675,316,676,677,678,679,680,681,682,683,91,9,10,12,13,14,391,127,392,393,133,135,419,16,317,318,423,340,424,341,427,344,142,17,18,19,20,21,22,23,24,349,350,684,26,27,28,29,30,31,32,319,320,529,534,235,236,33,34,35,567,568,569,3,570,36,325,326,327,328,330,331,332,287,290,39,613,40,41,43,45,47,52,53,54,56,58,334],"tindex":"3dd2b251-3f0a-11e6-a7bd-a3872a6424cc","method":{"position":"com.google.gson.JsonPrimitive:273","type":"CtMethodImpl","sourcecode":"private static boolean isPrimitiveOrString(java.lang.Object target) {\n    if (target instanceof java.lang.String) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321167744/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (target instanceof java.lang.String) {\n                return true;\n            } \n            java.lang.Class<?> java.lang.Class<?> = target.getClass();\n            for (java.lang.Class<?> java.lang.Class<?> : com.google.gson.JsonPrimitive.com.google.gson.JsonPrimitive.java.lang.Class<?>[]) {\n                if (standardPrimitive.isAssignableFrom(classOfPrimitive)) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"target":"target"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:125","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"3dd2b252-3f0a-11e6-a7bd-773ffcc5b058","method":{"position":"com.google.gson.JsonArray:57","type":"CtMethodImpl","sourcecode":"public void add(com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321167744/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (element instanceof com.google.gson.JsonArray) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321167744/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (element == null) {\n                        element = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n                    } \n                    java.util.List<com.google.gson.JsonElement>.add(element);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:137","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"3dd2b253-3f0a-11e6-a7bd-c7ca52667b61","method":{"position":"com.google.gson.JsonArray:92","type":"CtMethodImpl","sourcecode":"public boolean remove(com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321167744/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return java.util.List<com.google.gson.JsonElement>.remove(element);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:199","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"3dd2d964-3f0a-11e6-a7bd-abb46916a130","method":{"position":"com.google.gson.reflect.TypeToken:185","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.ParameterizedType to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeVarMap) {\n    if (from instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321167744/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (from == null) {\n                {\n                    if (from == null) {\n                        return false;\n                    } \n                    if (to.equals(from)) {\n                        return true;\n                    } \n                    java.lang.Class<?> java.lang.Class<?> = com.google.gson.internal.$Gson$Types.getRawType(from);\n                    java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = null;\n                    if (from instanceof java.lang.reflect.ParameterizedType) {\n                        ptype = ((java.lang.reflect.ParameterizedType)(from));\n                    } \n                    if (ptype != null) {\n                        java.lang.reflect.Type[] java.lang.reflect.Type[] = ptype.getActualTypeArguments();\n                        java.lang.reflect.TypeVariable<?>[] java.lang.reflect.TypeVariable<?>[] = clazz.getTypeParameters();\n                        for (int int = 0 ; i < (tArgs.int) ; i++) {\n                            java.lang.reflect.Type java.lang.reflect.Type = tArgs[i];\n                            java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = tParams[i];\n                            while (arg instanceof java.lang.reflect.TypeVariable<?>) {\n                                java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(arg));\n                                arg = typeVarMap.get(v.getName());\n                            }\n                            typeVarMap.put(var.getName(), arg);\n                        }\n                        if (com.google.gson.reflect.TypeToken.typeEquals(ptype, to, typeVarMap)) {\n                            return true;\n                        } \n                    } \n                    for (java.lang.reflect.Type java.lang.reflect.Type : clazz.getGenericInterfaces()) {\n                        if (com.google.gson.reflect.TypeToken.isAssignableFrom(itype, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap))) {\n                            return true;\n                        } \n                    }\n                    java.lang.reflect.Type java.lang.reflect.Type = clazz.getGenericSuperclass();\n                    return com.google.gson.reflect.TypeToken.isAssignableFrom(sType, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321167744/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:578","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"3dd2d965-3f0a-11e6-a7bd-9f381d19d25a","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:626","type":"CtMethodImpl","sourcecode":"void reset(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root == null) {\n        {\n            if (root == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321167744/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                    for (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root ; n != null ; n = n.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) {\n                        n.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = stackTop;\n                        stackTop = n;\n                    }\n                    com.google.gson.internal.LinkedHashTreeMap.AvlIterator.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = stackTop;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321167744/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:497","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"3dd30076-3f0a-11e6-a7bd-139f0af76f83","method":{"position":"com.google.gson.TreeTypeAdapter:103","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newTypeHierarchyFactory(java.lang.Class<?> hierarchyType, java.lang.Object typeAdapter) {\n    if ((typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)) {\n        {\n            return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , null , false , hierarchyType);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321167744/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:115","type":"CtInvocationImpl"},"failures":[],"tindex":"3dd30077-3f0a-11e6-a7bd-0bbeee2888eb","method":{"position":"com.google.gson.JsonPrimitive:93","type":"CtMethodImpl","sourcecode":"void setValue(java.lang.Object primitive) {\n    if (primitive.isNumber()) {\n        {\n            if (primitive instanceof java.lang.Character) {\n                char char = ((java.lang.Character)(primitive)).charValue();\n                com.google.gson.JsonPrimitive.this.java.lang.Object = java.lang.String.valueOf(c);\n            } else {\n                com.google.gson.internal.$Gson$Preconditions.checkArgument(((primitive instanceof java.lang.Number) || (com.google.gson.JsonPrimitive.isPrimitiveOrString(primitive))));\n                com.google.gson.JsonPrimitive.this.java.lang.Object = primitive;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321167744/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"primitive"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[75],"tindex":"3dd30078-3f0a-11e6-a7bd-1d11d006ca9f","method":{"position":"com.google.gson.internal.bind.TypeAdapters:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321167744/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"3dd32789-3f0a-11e6-a7bd-2f090977a3c5","method":{"position":"com.google.gson.Gson:133","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src) {\n    if (src == null) {\n        {\n            if (src != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321167744/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return toJsonTree(src);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321167744/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1413","type":"CtVariableReadImpl"},"failures":[],"tindex":"3dd3278a-3f0a-11e6-a7bd-9b4f526bb1bf","method":{"position":"com.google.gson.stream.JsonReader:1331","type":"CtMethodImpl","sourcecode":"private int nextNonWhitespace(boolean throwOnEof) throws java.io.IOException {\n    if (throwOnEof) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321167744/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            char[] char[] = com.google.gson.stream.JsonReader.this.char[];\n            int int = int;\n            int int = int;\n            while (true) {\n                if (p == l) {\n                    int = p;\n                    if (!(fillBuffer(1))) {\n                        break;\n                    } \n                    p = int;\n                    l = int;\n                } \n                int int = buffer[(p++)];\n                if (c == '\\n') {\n                    (int)++;\n                    int = p;\n                    continue;\n                } else if (((c == ' ') || (c == '\\r')) || (c == '\\t')) {\n                    continue;\n                } \n                if (c == '/') {\n                    int = p;\n                    if (p == l) {\n                        (int)--;\n                        boolean boolean = fillBuffer(2);\n                        (int)++;\n                        if (!charsLoaded) {\n                            return c;\n                        } \n                    } \n                    checkLenient();\n                    char char = buffer[int];\n                    switch (peek) {\n                        case '*' :\n                            (int)++;\n                            if (!(skipTo(\"*/\"))) {\n                                throw syntaxError(\"Unterminated comment\");\n                            } \n                            p = (int) + 2;\n                            l = int;\n                            continue;\n                        case '/' :\n                            (int)++;\n                            skipToEndOfLine();\n                            p = int;\n                            l = int;\n                            continue;\n                        default :\n                            return c;\n                    }\n                } else if (c == '#') {\n                    int = p;\n                    checkLenient();\n                    skipToEndOfLine();\n                    p = int;\n                    l = int;\n                } else {\n                    int = p;\n                    return c;\n                }\n            }\n            if (throwOnEof) {\n                throw new java.io.EOFException(((((\"End of input\" + \" at line \") + (getLineNumber())) + \" column \") + (getColumnNumber())));\n            } else {\n                return -1;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"throwOnEof":"throwOnEof"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:462","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"3dd34e9b-3f0a-11e6-a7bd-c755cec044cc","method":{"position":"com.google.gson.Gson:297","type":"CtMethodImpl","sourcecode":"private void checkValidFloatingPoint(double value) {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321167744/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                throw new java.lang.IllegalArgumentException(((value + \" is not a valid double value as per JSON specification. To override this\") + \" behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.\"));\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"3dd34e9c-3f0a-11e6-a7bd-5193366b8b12","method":{"position":"com.google.gson.Gson:719","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.lang.String json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            if (json == null) {\n                return null;\n            } \n            java.io.StringReader java.io.StringReader = new java.io.StringReader(json);\n            T T = ((T)(fromJson(reader, typeOfT)));\n            return target;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321167744/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:578","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"3dd34e9d-3f0a-11e6-a7bd-3b0ac723584d","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:626","type":"CtMethodImpl","sourcecode":"void reset(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root == null) {\n        {\n            if (root == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321167744/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                    for (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root ; n != null ; n = n.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) {\n                        n.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = stackTop;\n                        stackTop = n;\n                    }\n                    com.google.gson.internal.LinkedHashTreeMap.AvlIterator.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = stackTop;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321167744/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:578","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"3dd375ae-3f0a-11e6-a7bd-575bad94c5e8","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:429","type":"CtMethodImpl","sourcecode":"private void rotateRight(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root == null) {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivotRight;\n            if (pivotRight != null) {\n                pivotRight.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            } \n            replaceInParent(root, pivot);\n            pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot;\n            root.int = (java.lang.Math.max((right != null ? right.int : 0), (pivotRight != null ? pivotRight.int : 0))) + 1;\n            pivot.int = (java.lang.Math.max(root.int, (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321167744/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"3dd375af-3f0a-11e6-a7bd-29374fbc2c8e","method":{"position":"com.google.gson.TypeAdapter:254","type":"CtMethodImpl","sourcecode":"public final T fromJson(java.io.Reader in) throws java.io.IOException {\n    if (in == null) {\n        {\n            com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(in);\n            return read(reader);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321167744/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"3dd39cc0-3f0a-11e6-a7bd-3d76490cd2f5","method":{"position":"com.google.gson.Gson:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            out.value(value.toString());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321167744/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":54,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
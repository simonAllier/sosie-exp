{"failureDictionary":{"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":213,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":255,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":92,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":141,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":51,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":76,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":54,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":5,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":132,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":0,"com.google.gson.MixedStreamTest.testWriteLenient":4,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":243,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":101,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":265,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":49,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":57,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":29,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":259,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":260,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":99,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":137,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":263,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":286,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":218,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":232,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":62,"com.google.gson.functional.ObjectTest.testSingletonLists":97,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":246,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":272,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":27,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":289,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":225,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":25,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":91,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":112,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":16,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":157,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":126,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":179,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":283,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":28,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":274,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":275,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":166,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":190,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":67,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":130,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":104,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":40,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":206,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":185,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":261,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":216,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":292,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":61,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":222,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":35,"com.google.gson.functional.JsonTreeTest.testToJsonTree":169,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":223,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":176,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":182,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":46,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":239,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":19,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":164,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":53,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":219,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":146,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":149,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":102,"com.google.gson.functional.MapTest.testGeneralMapField":295,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":298,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":192,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":252,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":109,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":42,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":78,"com.google.gson.MixedStreamTest.testReadMixedStreamed":90,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":60,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":195,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":120,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":77,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":162,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":249,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":271,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":153,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":20,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":187,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":10,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":12,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":70,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":123,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":95,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":244,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":278,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":26,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":211,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":134,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":36,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":23,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":74,"com.google.gson.functional.ObjectTest.testNestedDeserialization":131,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":282,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":41,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":117,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":143,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":170,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":2,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":198,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":119,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":105,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":161,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":308,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":155,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":159,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":228,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":3,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":273,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":205,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":173,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":231,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":32,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":247,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":208,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":294,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":152,"com.google.gson.functional.MapTest.testInterfaceTypeMap":293,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":194,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":56,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":175,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":301,"com.google.gson.functional.CollectionTest.testSetDeserialization":262,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":287,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":15,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":241,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":108,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":212,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":13,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":64,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":59,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":113,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":230,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":309,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":154,"com.google.gson.MixedStreamTest.testWriteClosed":89,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":58,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":145,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":290,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":103,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":178,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":233,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":174,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":201,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":128,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":197,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":140,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":202,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":34,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":189,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":106,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":181,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":279,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":142,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":147,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":268,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":281,"com.google.gson.functional.MapTest.testComplexKeysSerialization":296,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":210,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":22,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":303,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":242,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":300,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":224,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":167,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":214,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":302,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":200,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":93,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":280,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":6,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":121,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":122,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":291,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":66,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":129,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":250,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":86,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":17,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":115,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":203,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":144,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":21,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":151,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":37,"com.google.gson.ObjectTypeAdapterTest.testSerialize":85,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":9,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":248,"com.google.gson.JsonPrimitiveTest.testEqualsIntegerAndBigInteger":80,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":30,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":1,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":307,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":72,"com.google.gson.functional.FieldNamingTest.testIdentity":269,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":266,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":234,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":133,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":124,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":44,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":7,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":96,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":168,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":63,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":73,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":82,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":251,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":43,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":256,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":285,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":84,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":306,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":226,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":127,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":94,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":11,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":138,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":238,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":107,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":87,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":240,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":245,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":188,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":288,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":229,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":45,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":111,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":191,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":31,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":277,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":65,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":50,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":55,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":209,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":207,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":135,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":139,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":258,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":257,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":171,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":14,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":71,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":83,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":114,"com.google.gson.functional.ObjectTest.testNestedSerialization":116,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":165,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":158,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":150,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":52,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":98,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":110,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":227,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":299,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":69,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":100,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":221,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":177,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":270,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":199,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":253,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":186,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":118,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":183,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":276,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":18,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":284,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":237,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":148,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":193,"com.google.gson.functional.CollectionTest.testSetSerialization":264,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":68,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":163,"com.google.gson.JsonParserTest.testParseMixedArray":79,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":156,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":304,"com.google.gson.MixedStreamTest.testWriteInvalidState":88,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":33,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":196,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":8,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":254,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":305,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":160,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":47,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":267,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":297,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":75,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":81,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":217,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":180,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":220,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":136,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":215,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":39,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":24,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":184,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":235,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":48,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":125,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":38,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":204,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":172,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":236},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:94","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"788a9cf5-3f12-11e6-a57d-4b6dcf3c29e1","method":{"position":"com.google.gson.internal.$Gson$Types:431","type":"CtMethodImpl","sourcecode":"private static void checkNotPrimitive(java.lang.reflect.Type type) {\n    com.google.gson.internal.$Gson$Preconditions.checkArgument(((!(type instanceof java.lang.Class<?>)) || (!(((java.lang.Class<?>)(type)).isPrimitive()))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonArray:58","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"788b8756-3f12-11e6-a57d-89f3c91fd9fb","method":{"position":"com.google.gson.JsonArray:115","type":"CtMethodImpl","sourcecode":"public boolean contains(com.google.gson.JsonElement element) {\n    if (element == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325432930/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return java.util.List<com.google.gson.JsonElement>.contains(element);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[0],"tindex":"788b8757-3f12-11e6-a57d-d913f0fcad8f","method":{"position":"com.google.gson.internal.bind.TypeAdapters:201","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325432930/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"788bae68-3f12-11e6-a57d-43ad1fea9eca","method":{"position":"com.google.gson.Gson:695","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.lang.String json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325432930/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:106","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"788bae69-3f12-11e6-a57d-1552e2de1396","method":{"position":"com.google.gson.JsonArray:81","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement set(int index, com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonArray) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325432930/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return java.util.List<com.google.gson.JsonElement>.set(index, element);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"788bd57a-3f12-11e6-a57d-e5006cb2b2d2","method":{"position":"com.google.gson.Gson:591","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        {\n            com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = getAdapter(com.google.gson.reflect.TypeToken.get(typeOfSrc));\n            boolean boolean = writer.isLenient();\n            writer.setLenient(true);\n            boolean boolean = writer.isHtmlSafe();\n            writer.setHtmlSafe(boolean);\n            boolean boolean = writer.getSerializeNulls();\n            writer.setSerializeNulls(boolean);\n            try {\n                ((com.google.gson.TypeAdapter<java.lang.Object>)(adapter)).write(writer, src);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            } finally {\n                writer.setLenient(oldLenient);\n                writer.setHtmlSafe(oldHtmlSafe);\n                writer.setSerializeNulls(oldSerializeNulls);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325432930/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:79","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"788bfc8b-3f12-11e6-a57d-e121d0f8272a","method":{"position":"com.google.gson.DefaultDateTypeAdapter:94","type":"CtMethodImpl","sourcecode":"private java.util.Date deserializeToDate(com.google.gson.JsonElement json) {\n    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325432930/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            synchronized(java.text.DateFormat) {\n                try {\n                    return java.text.DateFormat.parse(json.getAsString());\n                } catch (java.text.ParseException ignored) {\n                }\n                try {\n                    return java.text.DateFormat.parse(json.getAsString());\n                } catch (java.text.ParseException ignored) {\n                }\n                try {\n                    return java.text.DateFormat.parse(json.getAsString());\n                } catch (java.text.ParseException e) {\n                    throw new com.google.gson.JsonSyntaxException(json.getAsString() , e);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"788c239c-3f12-11e6-a57d-8597dcd780ea","method":{"position":"com.google.gson.JsonParser:44","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement parse(java.lang.String json) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325432930/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            return parse(new java.io.StringReader(json));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[1,2,3],"tindex":"788c239d-3f12-11e6-a57d-5132c136e1ed","method":{"position":"com.google.gson.internal.bind.TypeAdapters:282","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325432930/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:120","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"788c239e-3f12-11e6-a57d-ed6592b80e60","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:512","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"rawtypes\")\n@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonNull) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325432930/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof java.util.Map.Entry) {\n                java.util.Map.Entry java.util.Map.Entry = ((java.util.Map.Entry)(o));\n                return ((K) == null ? (other.getKey()) == null : K.equals(other.getKey())) && ((V) == null ? (other.getValue()) == null : V.equals(other.getValue()));\n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21],"tindex":"788c4aaf-3f12-11e6-a57d-a9699ad7246a","method":{"position":"com.google.gson.Gson:261","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            double double = value.doubleValue();\n            checkValidFloatingPoint(doubleValue);\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325432930/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.JsonObject:54","type":"CtBinaryOperatorImpl"},"failures":[22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82],"tindex":"788c71c0-3f12-11e6-a57d-c78501b09781","method":{"position":"com.google.gson.internal.bind.TypeAdapters:680","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, com.google.gson.JsonElement value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if ((value == null) || (value.isJsonNull())) {\n                out.nullValue();\n            } else if (value.isJsonPrimitive()) {\n                com.google.gson.JsonPrimitive com.google.gson.JsonPrimitive = value.getAsJsonPrimitive();\n                if (primitive.isNumber()) {\n                    out.value(primitive.getAsNumber());\n                } else if (primitive.isBoolean()) {\n                    out.value(primitive.getAsBoolean());\n                } else {\n                    out.value(primitive.getAsString());\n                }\n            } else if (value.isJsonArray()) {\n                out.beginArray();\n                for (com.google.gson.JsonElement com.google.gson.JsonElement : value.getAsJsonArray()) {\n                    write(out, e);\n                }\n                out.endArray();\n            } else if (value.isJsonObject()) {\n                out.beginObject();\n                for (java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> : value.getAsJsonObject().entrySet()) {\n                    out.name(e.getKey());\n                    write(out, e.getValue());\n                }\n                out.endObject();\n            } else {\n                throw new java.lang.IllegalArgumentException((\"Couldn't write \" + (value.getClass())));\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325432930/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:127","type":"CtInvocationImpl"},"failures":[83,84,85,86,87,88,89,90,91,92,93,94,95,29,30,31,32,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,5,155,6,156,157,158,7,159,160,161,34,162,35,36,163,164,165,166,167,39,168,169,40,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,0,186,187,188,189,52,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,13,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,65,67,68,284,285,286,287,288,289,290,291,292,293,294,295,296,76,297,298,299,300,301,302,303,304,305,306,307,308,309],"tindex":"788c98d1-3f12-11e6-a57d-b135e28708f8","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:125","type":"CtMethodImpl","sourcecode":"private java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> getBoundFields(com.google.gson.Gson context, com.google.gson.reflect.TypeToken<?> type, java.lang.Class<?> raw) {\n    if (raw.isInterface()) {\n        {\n            java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> = new java.util.LinkedHashMap<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField>();\n            if (raw.isInterface()) {\n                return result;\n            } \n            java.lang.reflect.Type java.lang.reflect.Type = type.getType();\n            while (raw != (java.lang.Object.java.lang.Object.java.lang.Class)) {\n                java.lang.reflect.Field[] java.lang.reflect.Field[] = raw.getDeclaredFields();\n                for (java.lang.reflect.Field java.lang.reflect.Field : fields) {\n                    boolean boolean = excludeField(field, true);\n                    boolean boolean = excludeField(field, false);\n                    if ((!serialize) && (!deserialize)) {\n                        continue;\n                    } \n                    field.setAccessible(true);\n                    java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, field.getGenericType());\n                    com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = createBoundField(context, field, getFieldName(field), com.google.gson.reflect.TypeToken.get(fieldType), serialize, deserialize);\n                    com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = result.put(boundField.java.lang.String, boundField);\n                    if (previous != null) {\n                        throw new java.lang.IllegalArgumentException(((declaredType + \" declares multiple JSON fields named \") + (previous.java.lang.String)));\n                    } \n                }\n                type = com.google.gson.reflect.TypeToken.get(com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, raw.getGenericSuperclass()));\n                raw = type.getRawType();\n            }\n            return result;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325432930/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"raw"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"788ce6f2-3f12-11e6-a57d-1fcaf6e31a66","method":{"position":"com.google.gson.Gson:136","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325432930/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return toJsonTree(src, typeOfSrc);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:166","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"788d0e03-3f12-11e6-a57d-73c2f9879dc2","method":{"position":"com.google.gson.reflect.TypeToken:185","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.ParameterizedType to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeVarMap) {\n    if (from instanceof java.lang.Class<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325432930/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (from == null) {\n                return false;\n            } \n            if (to.equals(from)) {\n                return true;\n            } \n            java.lang.Class<?> java.lang.Class<?> = com.google.gson.internal.$Gson$Types.getRawType(from);\n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = null;\n            if (from instanceof java.lang.reflect.ParameterizedType) {\n                ptype = ((java.lang.reflect.ParameterizedType)(from));\n            } \n            if (ptype != null) {\n                java.lang.reflect.Type[] java.lang.reflect.Type[] = ptype.getActualTypeArguments();\n                java.lang.reflect.TypeVariable<?>[] java.lang.reflect.TypeVariable<?>[] = clazz.getTypeParameters();\n                for (int int = 0 ; i < (tArgs.int) ; i++) {\n                    java.lang.reflect.Type java.lang.reflect.Type = tArgs[i];\n                    java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = tParams[i];\n                    while (arg instanceof java.lang.reflect.TypeVariable<?>) {\n                        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(arg));\n                        arg = typeVarMap.get(v.getName());\n                    }\n                    typeVarMap.put(var.getName(), arg);\n                }\n                if (com.google.gson.reflect.TypeToken.typeEquals(ptype, to, typeVarMap)) {\n                    return true;\n                } \n            } \n            for (java.lang.reflect.Type java.lang.reflect.Type : clazz.getGenericInterfaces()) {\n                if (com.google.gson.reflect.TypeToken.isAssignableFrom(itype, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap))) {\n                    return true;\n                } \n            }\n            java.lang.reflect.Type java.lang.reflect.Type = clazz.getGenericSuperclass();\n            return com.google.gson.reflect.TypeToken.isAssignableFrom(sType, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"788d0e04-3f12-11e6-a57d-e9a6edbe90aa","method":{"position":"com.google.gson.Gson:491","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src != null) {\n        {\n            com.google.gson.internal.bind.JsonTreeWriter com.google.gson.internal.bind.JsonTreeWriter = new com.google.gson.internal.bind.JsonTreeWriter();\n            toJson(src, typeOfSrc, writer);\n            return writer.get();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325432930/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:537","type":"CtFieldReadImpl"},"failures":[],"tindex":"788d3515-3f12-11e6-a57d-7d4d116994dd","method":{"position":"com.google.gson.stream.JsonReader:325","type":"CtMethodImpl","sourcecode":"public final void setLenient(boolean lenient) {\n    if (lenient) {\n        {\n            com.google.gson.stream.JsonReader.this.boolean = lenient;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325432930/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"lenient"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:274","type":"CtVariableReadImpl"},"failures":[],"tindex":"788d3516-3f12-11e6-a57d-27aa4c8d4bf0","method":{"position":"com.google.gson.Gson:273","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> floatAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return ((float)(in.nextDouble()));\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    float float = value.floatValue();\n                    checkValidFloatingPoint(floatValue);\n                    out.value(value);\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325432930/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.TreeTypeAdapter:55","type":"CtInvocationImpl"},"failures":[],"tindex":"788d5c27-3f12-11e6-a57d-f7db6727a9c4","method":{"position":"com.google.gson.JsonObject:53","type":"CtMethodImpl","sourcecode":"public void add(java.lang.String property, com.google.gson.JsonElement value) {\n    if (value.isJsonNull()) {\n        {\n            if (value == null) {\n                value = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.put(property, value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325432930/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:120","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"788d5c28-3f12-11e6-a57d-212c8a61fba0","method":{"position":"com.google.gson.JsonObject:186","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonNull) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325432930/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (o == (com.google.gson.JsonObject.this)) || ((o instanceof com.google.gson.JsonObject) && (((com.google.gson.JsonObject)(o)).com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.equals(com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:105","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"788d5c29-3f12-11e6-a57d-a98da57bd04d","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:839","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonObject) {\n        {\n            return containsKey(o);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325432930/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:726","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"788d833a-3f12-11e6-a57d-1d10f2a41f18","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:170","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(long value) throws java.io.IOException {\n    if (value == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325432930/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"788d833b-3f12-11e6-a57d-3b8089e94d57","method":{"position":"com.google.gson.Gson:133","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325432930/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return toJsonTree(src);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:159","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"788daa4c-3f12-11e6-a57d-757b072dbea3","method":{"position":"com.google.gson.internal.LinkedTreeMap:207","type":"CtMethodImpl","sourcecode":"private boolean equal(java.lang.Object a, java.lang.Object b) {\n    if (b == b) {\n        {\n            return (a == b) || ((a != null) && (a.equals(b)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325432930/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"b","b":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:125","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"788daa4d-3f12-11e6-a57d-9f8a326ce1c2","method":{"position":"com.google.gson.JsonArray:92","type":"CtMethodImpl","sourcecode":"public boolean remove(com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325432930/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return java.util.List<com.google.gson.JsonElement>.remove(element);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"788daa4e-3f12-11e6-a57d-596a18d9ba8b","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:175","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            if (!(isLenient())) {\n                double double = value.doubleValue();\n                if ((java.lang.Double.isNaN(d)) || (java.lang.Double.isInfinite(d))) {\n                    throw new java.lang.IllegalArgumentException((\"JSON forbids NaN and infinities: \" + value));\n                } \n            } \n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325432930/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:198","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"788dd15f-3f12-11e6-a57d-9dd456716802","method":{"position":"com.google.gson.TypeAdapter:140","type":"CtMethodImpl","sourcecode":"public final void toJson(java.io.Writer out, T value) throws java.io.IOException {\n    if (out == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325432930/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = new com.google.gson.stream.JsonWriter(out);\n            write(writer, value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":27,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
{"failureDictionary":{"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":287,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":290,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":280,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":109,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":330,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":213,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":219,"com.google.gson.internal.LinkedHashTreeMapTest.testIterationOrder":133,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":358,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":138,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":74,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":151,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":3,"com.google.gson.MixedStreamTest.testWriteLenient":340,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":57,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":292,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":191,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":9,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":97,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":98,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":56,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":87,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":291,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":159,"com.google.gson.JsonObjectTest.testAddingNullPropertyValue":231,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":29,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":114,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":372,"com.google.gson.functional.ObjectTest.testSingletonLists":54,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":6,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":261,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":241,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":76,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":116,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":361,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":123,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":177,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":226,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":373,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":64,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":354,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":249,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":367,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":19,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":25,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":149,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":118,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":228,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":242,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":108,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":20,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":202,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":72,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":59,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":44,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":168,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":174,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":278,"com.google.gson.InnerClassExclusionStrategyTest.testExcludeInnerClassField":315,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":307,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":162,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":310,"com.google.gson.internal.LinkedHashTreeMapTest.testClear":130,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":105,"com.google.gson.functional.JsonTreeTest.testToJsonTree":211,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":311,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":144,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":146,"com.google.gson.JsonObjectTest.testEqualsNonEmptyObject":232,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreBehindInVersion":247,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":260,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":344,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":370,"com.google.gson.internal.LinkedHashTreeMapTest.testAvlBuilder":238,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":185,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":308,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":112,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":102,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":58,"com.google.gson.functional.MapTest.testGeneralMapField":286,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":49,"com.google.gson.internal.bind.JsonElementReaderTest.testNestedObjects":223,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":297,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":301,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":62,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testSkipExplicitlySkippedFields":327,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":153,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":163,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":189,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":235,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":342,"com.google.gson.MixedStreamTest.testReadMixedStreamed":122,"com.google.gson.JsonObjectTest.testDeepCopy":234,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":303,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":67,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":104,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":230,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":157,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":207,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":42,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":91,"com.google.gson.JsonParserTest.testParseString":222,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":22,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":152,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testDifferentSerializeAndDeserializeField":324,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":275,"com.google.gson.DefaultDateTypeAdapterTest.testFormatUsesDefaultTimezone":347,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":47,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":4,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":244,"com.google.gson.functional.StreamingTypeAdaptersTest.testFromJsonTree":39,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":227,"com.google.gson.internal.LinkedHashTreeMapTest.testEqualsAndHashCode":136,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":289,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeNullField":37,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":262,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":106,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":125,"com.google.gson.functional.ObjectTest.testNestedDeserialization":73,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":24,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":110,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":197,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":350,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":357,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":181,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":274,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":60,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":124,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":188,"com.google.gson.internal.LinkedHashTreeMapTest.testEmptyStringValues":132,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":141,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":248,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":255,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":43,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":351,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":167,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":250,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":257,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":7,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":12,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":353,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":200,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":170,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":216,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":285,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":21,"com.google.gson.functional.MapTest.testInterfaceTypeMap":284,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":302,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":52,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":251,"com.google.gson.JsonObjectTest.testAddingNullOrEmptyPropertyName":236,"com.google.gson.functional.CollectionTest.testSetDeserialization":99,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":160,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":35,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":313,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":147,"com.google.gson.functional.EnumTest.testEnumSet":190,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testNeverSkipExplicitlyExposedAnnotatedFields":326,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":84,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":258,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithNestedWildcards":194,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":126,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":271,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":256,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":314,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":23,"com.google.gson.MixedStreamTest.testWriteClosed":322,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":111,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":277,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":355,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":18,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":268,"com.google.gson.internal.LinkedHashTreeMapTest.testPutNonComparableKeyFails":134,"com.google.gson.internal.LinkedHashTreeMapTest.testContainsNullKeyIsAlwaysFalse":135,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":30,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":143,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":184,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":180,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":276,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":165,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":304,"com.google.gson.DefaultDateTypeAdapterTest.testParsingDatesFormattedWithSystemLocale":346,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":217,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":154,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":252,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":269,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":173,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":120,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeWithCustomTypeAdapter":36,"com.google.gson.internal.bind.JsonElementReaderTest.testObject":225,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":305,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":100,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":295,"com.google.gson.functional.MapTest.testSerializeMaps":334,"com.google.gson.functional.MapTest.testComplexKeysSerialization":164,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":245,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":83,"com.google.gson.internal.bind.JsonElementReaderTest.testSkipValue":224,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":212,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":360,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":206,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":93,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":51,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":117,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":312,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":209,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":53,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":85,"com.google.gson.internal.LinkedHashTreeMapTest.testPutOverrides":129,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":183,"com.google.gson.InnerClassExclusionStrategyTest.testIncludeStaticNestedClassField":316,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserialize":40,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":121,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":127,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":233,"com.google.gson.internal.LinkedHashTreeMapTest.testDoubleCapacity":239,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":281,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":139,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":68,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":283,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithBasicWildcards":196,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":71,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":92,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":201,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":319,"com.google.gson.JsonParserTest.testParseReader":221,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":364,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":81,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":172,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":272,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":306,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":103,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":366,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":14,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":338,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":220,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":331,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":1,"com.google.gson.ObjectTypeAdapterTest.testSerialize":193,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":90,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":10,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":96,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":349,"com.google.gson.functional.FieldNamingTest.testIdentity":296,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":369,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":293,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":31,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":45,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":69,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":140,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":210,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":266,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":329,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":46,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testSkipNonAnnotatedFields":323,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":8,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":79,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":158,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":318,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":218,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":95,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":26,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":70,"com.google.gson.internal.LinkedHashTreeMapTest.testDoubleCapacityAllNodesOnLeft":237,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":282,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":34,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":88,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":61,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":178,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":320,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":5,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":279,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":75,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":28,"com.google.gson.functional.EnumTest.testEnumSubclass":192,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":343,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":371,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":63,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":368,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":300,"com.google.gson.GsonBuilderTest.testRegisterTypeAdapterForCoreType":365,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":11,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":243,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":333,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":175,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":0,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":82,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":204,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":345,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":169,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":263,"com.google.gson.internal.LinkedHashTreeMapTest.testContainsNonComparableKeyReturnsFalse":131,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":89,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAtSameVersion":246,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":288,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":80,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":205,"com.google.gson.internal.LinkedHashTreeMapTest.testRemoveRootDoesNotDoubleUnlink":137,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":142,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testNeverSkipExposedAnnotatedFields":325,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":203,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":65,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":317,"com.google.gson.JsonObjectTest.testAddingStringProperties":15,"com.google.gson.functional.ObjectTest.testNestedSerialization":273,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":186,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":17,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":335,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":215,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":55,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":253,"com.google.gson.MixedStreamTest.testWriteNulls":339,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":363,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":341,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":270,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":27,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":50,"com.google.gson.JsonObjectTest.testReadPropertyWithEmptyStringName":229,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":115,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":267,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":199,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":41,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":182,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":298,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":214,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":78,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":374,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":66,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":77,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":119,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":156,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":259,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":362,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":336,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":101,"com.google.gson.ObjectTypeAdapterTest.testSerializeObject":240,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":107,"com.google.gson.functional.CollectionTest.testSetSerialization":176,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":254,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":265,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":16,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":171,"com.google.gson.MixedStreamTest.testWriteInvalidState":321,"com.google.gson.DefaultDateTypeAdapterTest.testParsingDatesFormattedWithUsLocale":348,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":332,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":128,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithTypeParameters":195,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":179,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAheadInVersion":328,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":94,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":299,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":359,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":187,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":208,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":294,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":48,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":161,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":13,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":113,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":145,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":309,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":264,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":337,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":86,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":155,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeNullObject":38,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":150,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":356,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":32,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":148,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":2,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":166,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":198,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":33,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":352},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:189","type":"CtUnaryOperatorImpl","sourcecode":"!(b instanceof java.lang.reflect.WildcardType)"},"failures":[],"tindex":"b39acbb6-3e54-11e6-85e8-dd290d3de410","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:223","type":"CtMethodImpl","sourcecode":"private boolean equal(java.lang.Object a, java.lang.Object b) {\n    if (!(b instanceof java.lang.reflect.WildcardType)) {\n        {\n            return (a == b) || ((a != null) && (a.equals(b)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467243770013/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:305","type":"CtBinaryOperatorImpl","sourcecode":"node != null"},"failures":[],"tindex":"b39b19d7-3e54-11e6-85e8-b71538673422","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:245","type":"CtMethodImpl","sourcecode":"void removeInternal(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node, boolean unlink) {\n    if (node != null) {\n        {\n            if (unlink) {\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            if ((left != null) && (right != null)) {\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = (left.int) > (right.int) ? left.last() : right.first();\n                removeInternal(adjacent, false);\n                int int = 0;\n                left = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                if (left != null) {\n                    leftHeight = left.int;\n                    adjacent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left;\n                    left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                } \n                int int = 0;\n                right = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                if (right != null) {\n                    rightHeight = right.int;\n                    adjacent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                } \n                adjacent.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                replaceInParent(node, adjacent);\n                return ;\n            } else if (left != null) {\n                replaceInParent(node, left);\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } else if (right != null) {\n                replaceInParent(node, right);\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } else {\n                replaceInParent(node, null);\n            }\n            rebalance(originalParent, false);\n            (int)--;\n            (int)++;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467243770013/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"node"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:297","type":"CtBinaryOperatorImpl","sourcecode":"(value) instanceof java.lang.Number"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15],"tindex":"b39b40e8-3e54-11e6-85e8-b1470a7c161c","method":{"position":"com.google.gson.JsonObject:121","type":"CtMethodImpl","sourcecode":"private com.google.gson.JsonElement createJsonElement(java.lang.Object value) {\n    if (value instanceof java.lang.Number) {\n        {\n            return value == null ? com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull : new com.google.gson.JsonPrimitive(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467243770013/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[],"tindex":"b39b67f9-3e54-11e6-85e8-55c6aa10dd7b","method":{"position":"com.google.gson.FieldNamingPolicy:137","type":"CtMethodImpl","sourcecode":"private static java.lang.String upperCaseFirstLetter(java.lang.String name) {\n    if (name == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467243770013/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            int int = 0;\n            char char = name.charAt(index);\n            while (index < ((name.length()) - 1)) {\n                if (java.lang.Character.isLetter(firstCharacter)) {\n                    break;\n                } \n                fieldNameBuilder.append(firstCharacter);\n                firstCharacter = name.charAt((++index));\n            }\n            if (index == (name.length())) {\n                return fieldNameBuilder.toString();\n            } \n            if (!(java.lang.Character.isUpperCase(firstCharacter))) {\n                java.lang.String java.lang.String = com.google.gson.FieldNamingPolicy.modifyString(java.lang.Character.toUpperCase(firstCharacter), name, (++index));\n                return fieldNameBuilder.append(modifiedTarget).toString();\n            } else {\n                return name;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[],"tindex":"b39b67fa-3e54-11e6-85e8-c9fa918acead","method":{"position":"com.google.gson.Gson:552","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467243770013/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            if (src != null) {\n                toJson(src, src.getClass(), writer);\n            } else {\n                toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull, writer);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.JsonObject:54","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,4,6,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124],"tindex":"b39b67fb-3e54-11e6-85e8-9bdd8d0134b5","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:101","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nvoid read(com.google.gson.stream.JsonReader reader, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value == null) {\n        {\n            java.lang.Object java.lang.Object = com.google.gson.TypeAdapter<?>.read(reader);\n            if ((fieldValue != null) || (!isPrimitive)) {\n                field.set(value, fieldValue);\n            } \n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467243770013/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[125,126,127],"tindex":"b39b8f0c-3e54-11e6-85e8-ff205343ebcf","method":{"position":"com.google.gson.internal.bind.DateTypeAdapter:69","type":"CtMethodImpl","sourcecode":"private synchronized java.util.Date deserializeToDate(java.lang.String json) {\n    if (json == null) {\n        {\n            try {\n                return java.text.DateFormat.parse(json);\n            } catch (java.text.ParseException ignored) {\n            }\n            try {\n                return java.text.DateFormat.parse(json);\n            } catch (java.text.ParseException ignored) {\n            }\n            try {\n                return java.text.DateFormat.parse(json);\n            } catch (java.text.ParseException e) {\n                throw new com.google.gson.JsonSyntaxException(json , e);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467243770013/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.FieldNamingPolicy:143","type":"CtInvocationImpl","sourcecode":"java.lang.Character.isLetter(firstCharacter)"},"failures":[],"tindex":"b39bb61d-3e54-11e6-85e8-839ed3c51f5e","method":{"position":"com.google.gson.FieldNamingPolicy:163","type":"CtMethodImpl","sourcecode":"private static java.lang.String modifyString(char firstCharacter, java.lang.String srcString, int indexOfSubstring) {\n    if (java.lang.Character.isLetter(firstCharacter)) {\n        {\n            return indexOfSubstring < (srcString.length()) ? firstCharacter + (srcString.substring(indexOfSubstring)) : java.lang.String.valueOf(firstCharacter);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467243770013/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"firstCharacter":"firstCharacter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:154","type":"CtUnaryOperatorImpl","sourcecode":"!create"},"failures":[128,129,130,131,132,133,134,135,136,137],"tindex":"b39bdd2e-3e54-11e6-85e8-9733c135f8fa","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:131","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedHashTreeMap.Node<K, V> find(K key, boolean create) {\n    if (!create) {\n        {\n            java.util.Comparator<? super K> java.util.Comparator<? super K> = com.google.gson.internal.LinkedHashTreeMap.this.java.util.Comparator<? super K>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[] com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[] = com.google.gson.internal.LinkedHashTreeMap.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[];\n            int int = com.google.gson.internal.LinkedHashTreeMap.secondaryHash(key.hashCode());\n            int int = hash & ((table.int) - 1);\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = table[index];\n            int int = 0;\n            if (nearest != null) {\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                java.lang.Comparable<java.lang.Object> java.lang.Comparable<java.lang.Object> = comparator == (com.google.gson.internal.LinkedHashTreeMap.com.google.gson.internal.LinkedHashTreeMap.java.util.Comparator<java.lang.Comparable>) ? ((java.lang.Comparable<java.lang.Object>)(key)) : null;\n                while (true) {\n                    comparison = comparableKey != null ? comparableKey.compareTo(nearest.K) : comparator.compare(key, nearest.K);\n                    if (comparison == 0) {\n                        return nearest;\n                    } \n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = comparison < 0 ? nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> : nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    if (child == null) {\n                        break;\n                    } \n                    nearest = child;\n                }\n            } \n            if (!create) {\n                return null;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            if (nearest == null) {\n                if ((comparator == (com.google.gson.internal.LinkedHashTreeMap.com.google.gson.internal.LinkedHashTreeMap.java.util.Comparator<java.lang.Comparable>)) && (!(key instanceof java.lang.Comparable))) {\n                    throw new java.lang.ClassCastException(((key.getClass().getName()) + \" is not Comparable\"));\n                } \n                created = new com.google.gson.internal.LinkedHashTreeMap.Node<K, V>(nearest , key , hash , header , header.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>);\n                table[index] = created;\n            } else {\n                created = new com.google.gson.internal.LinkedHashTreeMap.Node<K, V>(nearest , key , hash , header , header.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>);\n                if (comparison < 0) {\n                    nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = created;\n                } else {\n                    nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = created;\n                }\n                rebalance(nearest, true);\n            }\n            if (((int)++) > (int)) {\n                doubleCapacity();\n            } \n            (int)++;\n            return created;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467243770013/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"create":"create"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.TreeTypeAdapter:55","type":"CtInvocationImpl","sourcecode":"value.isJsonNull()"},"failures":[],"tindex":"b39c043f-3e54-11e6-85e8-75825a945b11","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n@java.lang.Override\nvoid write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value.isJsonNull()) {\n        {\n            java.lang.Object java.lang.Object = field.get(value);\n            com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n            t.write(writer, fieldValue);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467243770013/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:133","type":"CtBinaryOperatorImpl","sourcecode":"(type) instanceof java.lang.reflect.ParameterizedType"},"failures":[138,139,16,17,140,141,142,143,144,18,19,145,146,21,24,0,46,48,49,50,51,52,53,61,147,148,149,77,150,151,78,152,153,154,155,156,157,158,159,160,161,162,163,164,165,81,166,167,168,169,170,82,83,85,86,93,171,94,95,96,97,172,173,174,175,99,176,177,103,178,179,180,181,182,183,184,185,186,187,188,106,189,9,10,11,12,190,191,192,193],"tindex":"b39c0440-3e54-11e6-85e8-2bdf6d25abaf","method":{"position":"com.google.gson.internal.ConstructorConstructor:128","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nprivate <T>com.google.gson.internal.ObjectConstructor<T> newDefaultImplementationConstructor(final java.lang.reflect.Type type, java.lang.Class<? super T> rawType) {\n    if (type instanceof java.lang.reflect.ParameterizedType) {\n        {\n            if (java.util.Collection.java.util.Collection.java.lang.Class.isAssignableFrom(rawType)) {\n                if (java.util.SortedSet.java.util.SortedSet.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.TreeSet<java.lang.Object>()));\n                        }\n                    };\n                } else if (java.util.EnumSet.java.util.EnumSet.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        @java.lang.SuppressWarnings(value = \"rawtypes\")\n                        public T construct() {\n                            if (type instanceof java.lang.reflect.ParameterizedType) {\n                                java.lang.reflect.Type java.lang.reflect.Type = ((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0];\n                                if (elementType instanceof java.lang.Class) {\n                                    return ((T)(java.util.EnumSet.noneOf(((java.lang.Class)(elementType)))));\n                                } else {\n                                    throw new com.google.gson.JsonIOException((\"Invalid EnumSet type: \" + (type.toString())));\n                                }\n                            } else {\n                                throw new com.google.gson.JsonIOException((\"Invalid EnumSet type: \" + (type.toString())));\n                            }\n                        }\n                    };\n                } else if (java.util.Set.java.util.Set.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedHashSet<java.lang.Object>()));\n                        }\n                    };\n                } else if (java.util.Queue.java.util.Queue.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedList<java.lang.Object>()));\n                        }\n                    };\n                } else {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.ArrayList<java.lang.Object>()));\n                        }\n                    };\n                }\n            } \n            if (java.util.Map.java.util.Map.java.lang.Class.isAssignableFrom(rawType)) {\n                if (java.util.SortedMap.java.util.SortedMap.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.TreeMap<java.lang.Object, java.lang.Object>()));\n                        }\n                    };\n                } else if ((type instanceof java.lang.reflect.ParameterizedType) && (!(java.lang.String.java.lang.String.java.lang.Class.isAssignableFrom(com.google.gson.reflect.TypeToken.get(((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0]).getRawType())))) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedHashMap<java.lang.Object, java.lang.Object>()));\n                        }\n                    };\n                } else {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new com.google.gson.internal.LinkedTreeMap<java.lang.String, java.lang.Object>()));\n                        }\n                    };\n                }\n            } \n            return null;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467243770013/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:199","type":"CtBinaryOperatorImpl","sourcecode":"from instanceof java.lang.reflect.ParameterizedType"},"failures":[194,195,196],"tindex":"b39c2b51-3e54-11e6-85e8-25b88d287966","method":{"position":"com.google.gson.reflect.TypeToken:185","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.ParameterizedType to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeVarMap) {\n    if (from.getRawType().equals(to.getRawType())) {\n        {\n            if (from instanceof java.lang.reflect.ParameterizedType) {\n                {\n                    if (from == null) {\n                        return false;\n                    } \n                    if (to.equals(from)) {\n                        return true;\n                    } \n                    java.lang.Class<?> java.lang.Class<?> = com.google.gson.internal.$Gson$Types.getRawType(from);\n                    java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = null;\n                    if (from instanceof java.lang.reflect.ParameterizedType) {\n                        ptype = ((java.lang.reflect.ParameterizedType)(from));\n                    } \n                    if (ptype != null) {\n                        java.lang.reflect.Type[] java.lang.reflect.Type[] = ptype.getActualTypeArguments();\n                        java.lang.reflect.TypeVariable<?>[] java.lang.reflect.TypeVariable<?>[] = clazz.getTypeParameters();\n                        for (int int = 0 ; i < (tArgs.int) ; i++) {\n                            java.lang.reflect.Type java.lang.reflect.Type = tArgs[i];\n                            java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = tParams[i];\n                            while (arg instanceof java.lang.reflect.TypeVariable<?>) {\n                                java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(arg));\n                                arg = typeVarMap.get(v.getName());\n                            }\n                            typeVarMap.put(var.getName(), arg);\n                        }\n                        if (com.google.gson.reflect.TypeToken.typeEquals(ptype, to, typeVarMap)) {\n                            return true;\n                        } \n                    } \n                    for (java.lang.reflect.Type java.lang.reflect.Type : clazz.getGenericInterfaces()) {\n                        if (com.google.gson.reflect.TypeToken.isAssignableFrom(itype, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap))) {\n                            return true;\n                        } \n                    }\n                    java.lang.reflect.Type java.lang.reflect.Type = clazz.getGenericSuperclass();\n                    return com.google.gson.reflect.TypeToken.isAssignableFrom(sType, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467243770013/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467243770013/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[197,142,198,144,199,146,200,0,201,202,203,204,205,39,44,206,46,1,2,76,207,208,209,155,210,211,212,213,3,4,5,6,7,214,100,101,102,215,216,103,183,184,217,105,106,8,9,10,11,12,109,112,218,219,220,221,222,124,223,224,225,226,227,228,229,230,13,231,232,233,14,234,15,235,236],"tindex":"b39c5262-3e54-11e6-85e8-6d59edea09a8","method":{"position":"com.google.gson.JsonObject:53","type":"CtMethodImpl","sourcecode":"public void add(java.lang.String property, com.google.gson.JsonElement value) {\n    if (value.isJsonNull()) {\n        {\n            if (property == null) {\n                {\n                    if (value == null) {\n                        value = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n                    } \n                    com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.put(property, value);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467243770013/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467243770013/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:298","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[],"tindex":"b39c5263-3e54-11e6-85e8-8b04c64da854","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:162","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(double value) throws java.io.IOException {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        {\n            if ((!(isLenient())) && ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value)))) {\n                throw new java.lang.IllegalArgumentException((\"JSON forbids NaN and infinities: \" + value));\n            } \n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467243770013/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"b39c5264-3e54-11e6-85e8-35ca9521ce65","method":{"position":"com.google.gson.stream.JsonWriter:532","type":"CtMethodImpl","sourcecode":"private void string(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467243770013/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            java.lang.String[] java.lang.String[] = boolean ? com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[] : com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[];\n            java.io.Writer.write(\"\\\"\");\n            int int = 0;\n            int int = value.length();\n            for (int int = 0 ; i < length ; i++) {\n                char char = value.charAt(i);\n                java.lang.String java.lang.String;\n                if (c < 128) {\n                    replacement = replacements[c];\n                    if (replacement == null) {\n                        continue;\n                    } \n                } else if (c == '\\u2028') {\n                    replacement = \"\\\\u2028\";\n                } else if (c == '\\u2029') {\n                    replacement = \"\\\\u2029\";\n                } else {\n                    continue;\n                }\n                if (last < i) {\n                    java.io.Writer.write(value, last, (i - last));\n                } \n                java.io.Writer.write(replacement);\n                last = i + 1;\n            }\n            if (last < length) {\n                java.io.Writer.write(value, last, (length - last));\n            } \n            java.io.Writer.write(\"\\\"\");\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.TreeTypeAdapter:55","type":"CtInvocationImpl","sourcecode":"value.isJsonNull()"},"failures":[],"tindex":"b39c5265-3e54-11e6-85e8-e918f5e242e5","method":{"position":"com.google.gson.JsonObject:53","type":"CtMethodImpl","sourcecode":"public void add(java.lang.String property, com.google.gson.JsonElement value) {\n    if (value.isJsonNull()) {\n        {\n            if (property == null) {\n                {\n                    if (value == null) {\n                        value = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n                    } \n                    com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.put(property, value);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467243770013/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467243770013/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:305","type":"CtBinaryOperatorImpl","sourcecode":"node != null"},"failures":[237,128,238,239],"tindex":"b39c7976-3e54-11e6-85e8-b98a3264d628","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:686","type":"CtMethodImpl","sourcecode":"void add(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node) {\n    if (node != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467243770013/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (node != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467243770013/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                    node.int = 1;\n                    if (((int) > 0) && (((int) & 1) == 0)) {\n                        (int)++;\n                        (int)--;\n                        (int)++;\n                    } \n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node;\n                    (int)++;\n                    if (((int) > 0) && (((int) & 1) == 0)) {\n                        (int)++;\n                        (int)--;\n                        (int)++;\n                    } \n                    for (int int = 4 ; ((int) & (scale - 1)) == (scale - 1) ; scale *= 2) {\n                        if ((int) == 0) {\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                            center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left;\n                            center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                            center.int = (right.int) + 1;\n                            left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                            right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                        } else if ((int) == 1) {\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                            center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                            center.int = (right.int) + 1;\n                            right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                            int = 0;\n                        } else if ((int) == 2) {\n                            int = 0;\n                        } \n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"node"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[1,2],"tindex":"b39ca087-3e54-11e6-85e8-dfb3d6cdb48d","method":{"position":"com.google.gson.JsonObject:78","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.String value) {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467243770013/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            add(property, createJsonElement(value));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:198","type":"CtBinaryOperatorImpl","sourcecode":"out == null"},"failures":[240,193,241],"tindex":"b39ca088-3e54-11e6-85e8-d38563a6e38e","method":{"position":"com.google.gson.TypeAdapter:140","type":"CtMethodImpl","sourcecode":"public final void toJson(java.io.Writer out, T value) throws java.io.IOException {\n    if (out == null) {\n        {\n            com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = new com.google.gson.stream.JsonWriter(out);\n            write(writer, value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467243770013/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"out"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[44],"tindex":"b39ca089-3e54-11e6-85e8-7fee5c6d1391","method":{"position":"com.google.gson.Gson:136","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        {\n            return toJsonTree(src, typeOfSrc);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467243770013/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:243","type":"CtBinaryOperatorImpl","sourcecode":"annotation != null"},"failures":[242,118,119,243,244,120,121,245,246,247],"tindex":"b39ca08a-3e54-11e6-85e8-b15974440f39","method":{"position":"com.google.gson.internal.Excluder:242","type":"CtMethodImpl","sourcecode":"private boolean isValidUntil(com.google.gson.annotations.Until annotation) {\n    if (annotation != null) {\n        {\n            if (annotation != null) {\n                double double = annotation.value();\n                if (annotationVersion <= (double)) {\n                    return false;\n                } \n            } \n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467243770013/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[138,248,139,16,249,17,140,141,197,142,198,250,143,251,144,199,18,19,145,252,146,253,20,21,22,23,24,25,0,202,254,26,27,255,28,256,257,258,29,30,31,32,33,259,34,260,41,42,261,43,44,45,262,263,264,46,47,48,49,50,51,52,53,265,266,54,55,56,267,57,58,268,59,60,269,61,147,62,270,63,64,271,65,272,273,66,274,67,68,275,69,148,149,70,276,71,72,73,74,75,76,277,77,150,278,151,78,152,279,154,209,155,210,211,156,158,159,160,280,281,282,283,162,284,285,286,164,213,287,79,80,288,165,81,166,167,168,169,170,82,83,289,84,290,85,86,87,88,89,3,4,5,6,7,90,91,92,93,171,94,95,96,97,98,174,99,291,176,292,293,294,295,296,100,101,102,215,103,178,179,180,181,182,183,184,185,186,187,188,297,298,299,217,104,105,106,300,301,107,302,303,108,9,10,11,12,304,109,305,110,306,111,112,307,113,114,308,309,115,310,311,312,116,313,117,242,118,119,243,244,120,121,245,314,315,316,317,318,319,320,321,322,122,123,323,324,325,326,327,328,246,247,124,193],"tindex":"b39cc79b-3e54-11e6-85e8-bda90959911d","method":{"position":"com.google.gson.internal.Excluder:149","type":"CtMethodImpl","sourcecode":"public boolean excludeField(java.lang.reflect.Field field, boolean serialize) {\n    if (field.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467243770013/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (field.isSynthetic()) {\n                {\n                    if (((int) & (field.getModifiers())) != 0) {\n                        return true;\n                    } \n                    if (((double) != (com.google.gson.internal.Excluder.com.google.gson.internal.Excluder.double)) && (!(isValidVersion(field.getAnnotation(com.google.gson.annotations.Since.com.google.gson.annotations.Since.java.lang.Class), field.getAnnotation(com.google.gson.annotations.Until.com.google.gson.annotations.Until.java.lang.Class))))) {\n                        return true;\n                    } \n                    if (field.isSynthetic()) {\n                        return true;\n                    } \n                    if (boolean) {\n                        com.google.gson.annotations.Expose com.google.gson.annotations.Expose = field.getAnnotation(com.google.gson.annotations.Expose.com.google.gson.annotations.Expose.java.lang.Class);\n                        if ((annotation == null) || (serialize ? !(annotation.serialize()) : !(annotation.deserialize()))) {\n                            return true;\n                        } \n                    } \n                    if ((!(boolean)) && (isInnerClass(field.getType()))) {\n                        return true;\n                    } \n                    if (isAnonymousOrLocal(field.getType())) {\n                        return true;\n                    } \n                    java.util.List<com.google.gson.ExclusionStrategy> java.util.List<com.google.gson.ExclusionStrategy> = serialize ? java.util.List<com.google.gson.ExclusionStrategy> : java.util.List<com.google.gson.ExclusionStrategy>;\n                    if (!(list.isEmpty())) {\n                        com.google.gson.FieldAttributes com.google.gson.FieldAttributes = new com.google.gson.FieldAttributes(field);\n                        for (com.google.gson.ExclusionStrategy com.google.gson.ExclusionStrategy : list) {\n                            if (exclusionStrategy.shouldSkipField(fieldAttributes)) {\n                                return true;\n                            } \n                        }\n                    } \n                    return false;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467243770013/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"field"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[197,142,198,144,199,146,204,44,209,155,210,211,213,183,184,8,9,10,329,11,12,109,220,330,331],"tindex":"b39cc79c-3e54-11e6-85e8-7bfa51a4c636","method":{"position":"com.google.gson.Gson:491","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        {\n            com.google.gson.internal.bind.JsonTreeWriter com.google.gson.internal.bind.JsonTreeWriter = new com.google.gson.internal.bind.JsonTreeWriter();\n            toJson(src, typeOfSrc, writer);\n            return writer.get();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467243770013/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:430","type":"CtFieldReadImpl","sourcecode":"serializeNulls"},"failures":[197,142,198,144,199,146,204,44,1,332,333,209,155,210,211,334,283,335,213,183,184,336,8,9,10,329,11,12,304,109,306,307,337,308,309,310,219,311,338,312,220,330,331,319,320,339,321,340,341,322,228],"tindex":"b39ceead-3e54-11e6-85e8-cf2bcfb00b5e","method":{"position":"com.google.gson.stream.JsonWriter:268","type":"CtMethodImpl","sourcecode":"public final void setSerializeNulls(boolean serializeNulls) {\n    if (serializeNulls) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467243770013/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = serializeNulls;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeNulls":"serializeNulls"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:107","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonArray"},"failures":[],"tindex":"b39ceeae-3e54-11e6-85e8-3f906d00fede","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:808","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonArray) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467243770013/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (!(o instanceof java.util.Map.Entry)) {\n                return false;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n            if (node == null) {\n                return false;\n            } \n            removeInternal(node, true);\n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[],"tindex":"b39ceeaf-3e54-11e6-85e8-b529983c987b","method":{"position":"com.google.gson.internal.Excluder:149","type":"CtMethodImpl","sourcecode":"public boolean excludeField(java.lang.reflect.Field field, boolean serialize) {\n    if (field.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467243770013/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (field.isSynthetic()) {\n                {\n                    if (((int) & (field.getModifiers())) != 0) {\n                        return true;\n                    } \n                    if (((double) != (com.google.gson.internal.Excluder.com.google.gson.internal.Excluder.double)) && (!(isValidVersion(field.getAnnotation(com.google.gson.annotations.Since.com.google.gson.annotations.Since.java.lang.Class), field.getAnnotation(com.google.gson.annotations.Until.com.google.gson.annotations.Until.java.lang.Class))))) {\n                        return true;\n                    } \n                    if (field.isSynthetic()) {\n                        return true;\n                    } \n                    if (boolean) {\n                        com.google.gson.annotations.Expose com.google.gson.annotations.Expose = field.getAnnotation(com.google.gson.annotations.Expose.com.google.gson.annotations.Expose.java.lang.Class);\n                        if ((annotation == null) || (serialize ? !(annotation.serialize()) : !(annotation.deserialize()))) {\n                            return true;\n                        } \n                    } \n                    if ((!(boolean)) && (isInnerClass(field.getType()))) {\n                        return true;\n                    } \n                    if (isAnonymousOrLocal(field.getType())) {\n                        return true;\n                    } \n                    java.util.List<com.google.gson.ExclusionStrategy> java.util.List<com.google.gson.ExclusionStrategy> = serialize ? java.util.List<com.google.gson.ExclusionStrategy> : java.util.List<com.google.gson.ExclusionStrategy>;\n                    if (!(list.isEmpty())) {\n                        com.google.gson.FieldAttributes com.google.gson.FieldAttributes = new com.google.gson.FieldAttributes(field);\n                        for (com.google.gson.ExclusionStrategy com.google.gson.ExclusionStrategy : list) {\n                            if (exclusionStrategy.shouldSkipField(fieldAttributes)) {\n                                return true;\n                            } \n                        }\n                    } \n                    return false;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467243770013/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"field"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:240","type":"CtInvocationImpl","sourcecode":"from.getRawType().equals(to.getRawType())"},"failures":[],"tindex":"b39d15c0-3e54-11e6-85e8-c785782fd352","method":{"position":"com.google.gson.reflect.TypeToken:185","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.ParameterizedType to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeVarMap) {\n    if (from.getRawType().equals(to.getRawType())) {\n        {\n            if (from instanceof java.lang.reflect.ParameterizedType) {\n                {\n                    if (from == null) {\n                        return false;\n                    } \n                    if (to.equals(from)) {\n                        return true;\n                    } \n                    java.lang.Class<?> java.lang.Class<?> = com.google.gson.internal.$Gson$Types.getRawType(from);\n                    java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = null;\n                    if (from instanceof java.lang.reflect.ParameterizedType) {\n                        ptype = ((java.lang.reflect.ParameterizedType)(from));\n                    } \n                    if (ptype != null) {\n                        java.lang.reflect.Type[] java.lang.reflect.Type[] = ptype.getActualTypeArguments();\n                        java.lang.reflect.TypeVariable<?>[] java.lang.reflect.TypeVariable<?>[] = clazz.getTypeParameters();\n                        for (int int = 0 ; i < (tArgs.int) ; i++) {\n                            java.lang.reflect.Type java.lang.reflect.Type = tArgs[i];\n                            java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = tParams[i];\n                            while (arg instanceof java.lang.reflect.TypeVariable<?>) {\n                                java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(arg));\n                                arg = typeVarMap.get(v.getName());\n                            }\n                            typeVarMap.put(var.getName(), arg);\n                        }\n                        if (com.google.gson.reflect.TypeToken.typeEquals(ptype, to, typeVarMap)) {\n                            return true;\n                        } \n                    } \n                    for (java.lang.reflect.Type java.lang.reflect.Type : clazz.getGenericInterfaces()) {\n                        if (com.google.gson.reflect.TypeToken.isAssignableFrom(itype, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap))) {\n                            return true;\n                        } \n                    }\n                    java.lang.reflect.Type java.lang.reflect.Type = clazz.getGenericSuperclass();\n                    return com.google.gson.reflect.TypeToken.isAssignableFrom(sType, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467243770013/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467243770013/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from","to":"to"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:305","type":"CtBinaryOperatorImpl","sourcecode":"node != null"},"failures":[],"tindex":"b39d15c1-3e54-11e6-85e8-911e3b8da809","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:686","type":"CtMethodImpl","sourcecode":"void add(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node) {\n    if (node != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467243770013/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (node != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467243770013/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                    node.int = 1;\n                    if (((int) > 0) && (((int) & 1) == 0)) {\n                        (int)++;\n                        (int)--;\n                        (int)++;\n                    } \n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node;\n                    (int)++;\n                    if (((int) > 0) && (((int) & 1) == 0)) {\n                        (int)++;\n                        (int)--;\n                        (int)++;\n                    } \n                    for (int int = 4 ; ((int) & (scale - 1)) == (scale - 1) ; scale *= 2) {\n                        if ((int) == 0) {\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                            center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left;\n                            center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                            center.int = (right.int) + 1;\n                            left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                            right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                        } else if ((int) == 1) {\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                            center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                            center.int = (right.int) + 1;\n                            right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                            int = 0;\n                        } else if ((int) == 2) {\n                            int = 0;\n                        } \n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"node"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:79","type":"CtUnaryOperatorImpl","sourcecode":"!(json instanceof com.google.gson.JsonPrimitive)"},"failures":[342,343,344,345,346,347,348],"tindex":"b39d3cd2-3e54-11e6-85e8-cbc0a3b21bea","method":{"position":"com.google.gson.DefaultDateTypeAdapter:94","type":"CtMethodImpl","sourcecode":"private java.util.Date deserializeToDate(com.google.gson.JsonElement json) {\n    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n        {\n            synchronized(java.text.DateFormat) {\n                try {\n                    return java.text.DateFormat.parse(json.getAsString());\n                } catch (java.text.ParseException ignored) {\n                }\n                try {\n                    return java.text.DateFormat.parse(json.getAsString());\n                } catch (java.text.ParseException ignored) {\n                }\n                try {\n                    return java.text.DateFormat.parse(json.getAsString());\n                } catch (java.text.ParseException e) {\n                    throw new com.google.gson.JsonSyntaxException(json.getAsString() , e);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467243770013/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[349,350,351],"tindex":"b39d3cd3-3e54-11e6-85e8-91455e09d0f4","method":{"position":"com.google.gson.internal.bind.TypeAdapters:282","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467243770013/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:497","type":"CtBinaryOperatorImpl","sourcecode":"(typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)"},"failures":[138,248,139,16,249,17,140,141,352,21,22,23,353,29,33,205,35,354,36,355,356,357,358,48,50,74,359,360,361,362,363,364,365,366,367,368],"tindex":"b39d63e4-3e54-11e6-85e8-5d75fb973ccd","method":{"position":"com.google.gson.GsonBuilder:447","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\npublic com.google.gson.GsonBuilder registerTypeAdapter(java.lang.reflect.Type type, java.lang.Object typeAdapter) {\n    if ((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467243770013/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)) {\n                {\n                    com.google.gson.internal.$Gson$Preconditions.checkArgument(((((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) || (typeAdapter instanceof com.google.gson.InstanceCreator<?>)) || (typeAdapter instanceof com.google.gson.TypeAdapter<?>)));\n                    if (typeAdapter instanceof com.google.gson.InstanceCreator<?>) {\n                        java.util.Map<java.lang.reflect.Type, com.google.gson.InstanceCreator<?>>.put(type, ((com.google.gson.InstanceCreator)(typeAdapter)));\n                    } \n                    if ((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) {\n                        com.google.gson.reflect.TypeToken<?> com.google.gson.reflect.TypeToken<?> = com.google.gson.reflect.TypeToken.get(type);\n                        java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.TreeTypeAdapter.newFactoryWithMatchRawType(typeToken, typeAdapter));\n                    } \n                    if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                        java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.internal.bind.TypeAdapters.newFactory(com.google.gson.reflect.TypeToken.get(type), ((com.google.gson.TypeAdapter)(typeAdapter))));\n                    } \n                    return com.google.gson.GsonBuilder.this;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467243770013/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[143,145,258,261,44,45,262,47,265,266,267,270,271,272,273,275,148,276,76,277,209,155,210,211,281,282,286,81,90,91,92,97,98,174,291,369,297,370,371,372,373,304,109,305,306,243,374,124],"tindex":"b39d63e5-3e54-11e6-85e8-29ecfc8fc133","method":{"position":"com.google.gson.internal.bind.TypeAdapters:267","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467243770013/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:540","type":"CtBinaryOperatorImpl","sourcecode":"c < 128"},"failures":[],"tindex":"b39d63e6-3e54-11e6-85e8-298fb53ca6ba","method":{"position":"com.google.gson.stream.JsonReader:755","type":"CtMethodImpl","sourcecode":"private boolean isLiteral(char c) throws java.io.IOException {\n    if (c < 128) {\n        {\n            switch (c) {\n                case '/' :\n                case '\\\\' :\n                case ';' :\n                case '#' :\n                case '=' :\n                    checkLenient();\n                case '{' :\n                case '}' :\n                case '[' :\n                case ']' :\n                case ':' :\n                case ',' :\n                case ' ' :\n                case '\\t' :\n                case '\\f' :\n                case '\\r' :\n                case '\\n' :\n                    return false;\n                default :\n                    return true;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467243770013/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"c"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:462","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[],"tindex":"b39d8af7-3e54-11e6-85e8-cf2f5cd20332","method":{"position":"com.google.gson.Gson:297","type":"CtMethodImpl","sourcecode":"private void checkValidFloatingPoint(double value) {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                throw new java.lang.IllegalArgumentException(((value + \" is not a valid double value as per JSON specification. To override this\") + \" behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.\"));\n            } \n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467243770013/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[],"tindex":"b39d8af8-3e54-11e6-85e8-27ad7987c4e5","method":{"position":"com.google.gson.FieldNamingPolicy:122","type":"CtMethodImpl","sourcecode":"private static java.lang.String separateCamelCase(java.lang.String name, java.lang.String separator) {\n    if (separator == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467243770013/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            for (int int = 0 ; i < (name.length()) ; i++) {\n                char char = name.charAt(i);\n                if ((java.lang.Character.isUpperCase(character)) && ((translation.length()) != 0)) {\n                    translation.append(separator);\n                } \n                translation.append(character);\n            }\n            return translation.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"separator"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:455","type":"CtBinaryOperatorImpl","sourcecode":"(typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)"},"failures":[],"tindex":"b39d8af9-3e54-11e6-85e8-45af3c93ad2e","method":{"position":"com.google.gson.GsonBuilder:447","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\npublic com.google.gson.GsonBuilder registerTypeAdapter(java.lang.reflect.Type type, java.lang.Object typeAdapter) {\n    if ((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467243770013/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)) {\n                {\n                    com.google.gson.internal.$Gson$Preconditions.checkArgument(((((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) || (typeAdapter instanceof com.google.gson.InstanceCreator<?>)) || (typeAdapter instanceof com.google.gson.TypeAdapter<?>)));\n                    if (typeAdapter instanceof com.google.gson.InstanceCreator<?>) {\n                        java.util.Map<java.lang.reflect.Type, com.google.gson.InstanceCreator<?>>.put(type, ((com.google.gson.InstanceCreator)(typeAdapter)));\n                    } \n                    if ((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) {\n                        com.google.gson.reflect.TypeToken<?> com.google.gson.reflect.TypeToken<?> = com.google.gson.reflect.TypeToken.get(type);\n                        java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.TreeTypeAdapter.newFactoryWithMatchRawType(typeToken, typeAdapter));\n                    } \n                    if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                        java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.internal.bind.TypeAdapters.newFactory(com.google.gson.reflect.TypeToken.get(type), ((com.google.gson.TypeAdapter)(typeAdapter))));\n                    } \n                    return com.google.gson.GsonBuilder.this;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467243770013/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:105","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonObject"},"failures":[],"tindex":"b39d8afa-3e54-11e6-85e8-d120689a4b2e","method":{"position":"com.google.gson.internal.LinkedTreeMap:481","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"rawtypes\")\n@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467243770013/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof java.util.Map.Entry) {\n                java.util.Map.Entry java.util.Map.Entry = ((java.util.Map.Entry)(o));\n                return ((K) == null ? (other.getKey()) == null : K.equals(other.getKey())) && ((V) == null ? (other.getValue()) == null : V.equals(other.getValue()));\n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"b39db20b-3e54-11e6-85e8-932022f36210","method":{"position":"com.google.gson.Gson:847","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(com.google.gson.JsonElement json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467243770013/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.JsonObject:54","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"b39db20c-3e54-11e6-85e8-b594b2309659","method":{"position":"com.google.gson.internal.bind.TypeAdapters:680","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, com.google.gson.JsonElement value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467243770013/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if ((value == null) || (value.isJsonNull())) {\n                out.nullValue();\n            } else if (value.isJsonPrimitive()) {\n                com.google.gson.JsonPrimitive com.google.gson.JsonPrimitive = value.getAsJsonPrimitive();\n                if (primitive.isNumber()) {\n                    out.value(primitive.getAsNumber());\n                } else if (primitive.isBoolean()) {\n                    out.value(primitive.getAsBoolean());\n                } else {\n                    out.value(primitive.getAsString());\n                }\n            } else if (value.isJsonArray()) {\n                out.beginArray();\n                for (com.google.gson.JsonElement com.google.gson.JsonElement : value.getAsJsonArray()) {\n                    write(out, e);\n                }\n                out.endArray();\n            } else if (value.isJsonObject()) {\n                out.beginObject();\n                for (java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> : value.getAsJsonObject().entrySet()) {\n                    out.name(e.getKey());\n                    write(out, e.getValue());\n                }\n                out.endObject();\n            } else {\n                throw new java.lang.IllegalArgumentException((\"Couldn't write \" + (value.getClass())));\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":39,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":53,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":239,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":11,"com.google.gson.functional.StringTest.testStringValueDeserialization":587,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":50,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":563,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":475,"com.google.gson.stream.JsonWriterTest.testRepeatedName":386,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":536,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":60,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":20,"com.google.gson.MixedStreamTest.testWriteLenient":357,"com.google.gson.internal.bind.JsonTreeWriterTest.testPrematureClose":369,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":596,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":502,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":142,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":233,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":313,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":323,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":501,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":568,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":295,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":301,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":112,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":543,"com.google.gson.JsonObjectTest.testAddingNullPropertyValue":401,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":609,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":616,"com.google.gson.functional.ObjectTest.testSingletonLists":178,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":138,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":302,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":240,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":531,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":391,"com.google.gson.stream.JsonWriterTest.testStrings":389,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":497,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":154,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":644,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":482,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":511,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":365,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":570,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":383,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":623,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":595,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":9,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":1,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":564,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":425,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":361,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":525,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":272,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":424,"com.google.gson.functional.EnumTest.testEnumCaseMapping":294,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":26,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":238,"com.google.gson.functional.JsonTreeTest.testToJsonTree":77,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":524,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":6,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":483,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":88,"com.google.gson.JsonObjectTest.testEqualsNonEmptyObject":402,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":121,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":287,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":380,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":453,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":473,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":532,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":259,"com.google.gson.internal.LinkedTreeMapTest.testLargeSetOfRandomKeys":664,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":320,"com.google.gson.functional.ObjectTest.testNullDeserialization":517,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":159,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":593,"com.google.gson.internal.bind.JsonElementReaderTest.testNestedObjects":660,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":508,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":221,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":368,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":537,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":186,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":270,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":341,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":514,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":367,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":110,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":152,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":461,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":310,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":576,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":575,"com.google.gson.JsonParserTest.testParseString":658,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":481,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":213,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":381,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":207,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":466,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":580,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":96,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":192,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":137,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":551,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":420,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":561,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":597,"com.google.gson.functional.StreamingTypeAdaptersTest.testFromJsonTree":655,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":71,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":472,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":232,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":371,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":491,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":48,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":214,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":603,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":562,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":92,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":191,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":22,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":345,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":505,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":64,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":199,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":427,"com.google.gson.metrics.PerformanceTest.testDummy":405,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":630,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":81,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":281,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":635,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":492,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":430,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":485,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":141,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":410,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":132,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":632,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":340,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":490,"com.google.gson.functional.CollectionTest.testSetDeserialization":642,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":113,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":18,"com.google.gson.functional.EnumTest.testEnumSet":288,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":436,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":554,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":282,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":164,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithNestedWildcards":398,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":32,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":469,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":187,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":280,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":360,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":565,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":634,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":571,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":157,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":267,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":217,"com.google.gson.functional.MapTest.testHashMapDeserialization":414,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":534,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":638,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":478,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":335,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":431,"com.google.gson.MixedStreamTest.testReadNulls":649,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":51,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":65,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":230,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":489,"com.google.gson.functional.MapTest.testSortedMap":426,"com.google.gson.functional.MapTest.testMapSerialization":37,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":54,"com.google.gson.internal.bind.JsonElementReaderTest.testObject":661,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":408,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":559,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":455,"com.google.gson.functional.MapTest.testSerializeMaps":0,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":107,"com.google.gson.functional.MapTest.testComplexKeysSerialization":46,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":435,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":370,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":429,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":103,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":161,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":622,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":266,"com.google.gson.internal.LinkedTreeMapTest.testRemoveRootDoesNotDoubleUnlink":667,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":445,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":155,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":621,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":4,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":61,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":516,"com.google.gson.functional.MapTest.testStringKeyDeserialization":428,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithBasicWildcards":400,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":457,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":166,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":225,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":49,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":540,"com.google.gson.functional.PrettyPrintingTest.testMap":2,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":330,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":535,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":316,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":55,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":118,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":487,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":364,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":382,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":458,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":244,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":588,"com.google.gson.functional.MapTest.testMapSerializationEmpty":47,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":129,"com.google.gson.functional.CollectionTest.testQueueSerialization":317,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":555,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnName":397,"com.google.gson.functional.MapTest.testMapOfMapSerialization":36,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":205,"com.google.gson.JavaSerializationTest.testMapIsSerializable":654,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":474,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":640,"com.google.gson.stream.JsonWriterTest.testNameWithoutValue":396,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":17,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":210,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":172,"com.google.gson.functional.FieldNamingTest.testIdentity":108,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":241,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":493,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":248,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":518,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":63,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":76,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":177,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":235,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":526,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":362,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":242,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":338,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":208,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":498,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":480,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":25,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":470,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":16,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":130,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":151,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":412,"com.google.gson.functional.MapTest.testMapSubclassSerialization":31,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":224,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":343,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":619,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":437,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":12,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":296,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":332,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":549,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":464,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":584,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":598,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":486,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":279,"com.google.gson.functional.EnumTest.testEnumSubclass":291,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":211,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":366,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":510,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":195,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":337,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":567,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":165,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":442,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":527,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":176,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":552,"com.google.gson.stream.JsonWriterTest.testTwoNames":395,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":499,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":79,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":24,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":452,"com.google.gson.internal.LinkedTreeMapTest.testEqualsAndHashCode":666,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":507,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":556,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":206,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":440,"com.google.gson.stream.JsonWriterTest.testObjectsInArrays":387,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":146,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":500,"com.google.gson.MixedStreamTest.testWriteNulls":355,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":413,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":98,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":601,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":94,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":160,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":615,"com.google.gson.CommentsTest.testParseComments":653,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":169,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":179,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":611,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":254,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":456,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":566,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":407,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":39,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":243,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":404,"com.google.gson.MixedStreamTest.testReadInvalidState":647,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":109,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":286,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":148,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":223,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":28,"com.google.gson.JsonParserTest.testParseMixedArray":346,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":198,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":459,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithTypeParameters":399,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":251,"com.google.gson.internal.bind.JsonTreeWriterTest.testWriteAfterClose":373,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":202,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":15,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":135,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":218,"com.google.gson.functional.MapTest.testMapDeserialization":419,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":451,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":131,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":7,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":30,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":351,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":608,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":33,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":86,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":261,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":258,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":446,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeMap":656,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":75,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":620,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":463,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":185,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":193,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":67,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":333,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":80,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":122,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":617,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":72,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":175,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":3,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":38,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":348,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":150,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":523,"com.google.gson.functional.PrimitiveTest.testShortSerialization":222,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":496,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":263,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":569,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":274,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":550,"com.google.gson.internal.LinkedTreeMapTest.testIterationOrder":665,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":215,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":124,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":533,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":104,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":290,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":315,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":342,"com.google.gson.internal.LinkedTreeMapTest.testPutOverrides":662,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":416,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":546,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":226,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":327,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":599,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":376,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":479,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":613,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":374,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":651,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":229,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":579,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":378,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":62,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":19,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":448,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":494,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":114,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":297,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":377,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":573,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":604,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":167,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":553,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":521,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":504,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":293,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":59,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":68,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":321,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":467,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":328,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":495,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":257,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":136,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":262,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":539,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":126,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":231,"com.google.gson.stream.JsonWriterTest.testNullStringValue":384,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":264,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":477,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":84,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":636,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":528,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":574,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":209,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":227,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":305,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":260,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":289,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":434,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":409,"com.google.gson.functional.MapTest.testGeneralMapField":43,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":503,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":91,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":582,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":100,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":329,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":339,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":143,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":41,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":115,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":197,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":309,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":216,"com.google.gson.MixedStreamTest.testReadMixedStreamed":650,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":203,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":421,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":468,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":324,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":363,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":586,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":629,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":557,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":273,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":633,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":134,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":422,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":275,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":415,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":170,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":228,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":304,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":299,"com.google.gson.stream.JsonWriterTest.testArraysInObjects":385,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":547,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":375,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":133,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":602,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":249,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":460,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":639,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":612,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":174,"com.google.gson.functional.ObjectTest.testNestedDeserialization":522,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":190,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":336,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":432,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":78,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":271,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":581,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":253,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":423,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":438,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":589,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":278,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":220,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":441,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":237,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":600,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":326,"com.google.gson.functional.ObjectTest.testNullSerialization":183,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":70,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":614,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":417,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":42,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":196,"com.google.gson.functional.MapTest.testInterfaceTypeMap":40,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":454,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":331,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":83,"com.google.gson.JsonObjectTest.testAddingNullOrEmptyPropertyName":403,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":529,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":292,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":312,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":334,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":444,"com.google.gson.MixedStreamTest.testReadClosed":648,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":116,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":269,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":541,"com.google.gson.MixedStreamTest.testWriteClosed":359,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":319,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":433,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":180,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":447,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":484,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":283,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":82,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":256,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":194,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":252,"com.google.gson.stream.JsonWriterTest.testLongs":392,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":149,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":87,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":181,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":318,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":625,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":560,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":300,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":443,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":322,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":139,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":606,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":13,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":583,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":201,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":74,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":465,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":89,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":162,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":255,"com.google.gson.functional.CollectionTest.testQueueDeserialization":645,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":204,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":558,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":592,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":52,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":147,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":626,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":34,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":515,"com.google.gson.stream.JsonWriterTest.testDeepNestingObjects":388,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":128,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":311,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":520,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":314,"com.google.gson.functional.MapTest.testRawMapSerialization":45,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":354,"com.google.gson.JsonParserTest.testParseReader":657,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":643,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":476,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":379,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":66,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":188,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":411,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":265,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":347,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":93,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":153,"com.google.gson.functional.PrimitiveTest.testByteSerialization":219,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":349,"com.google.gson.ObjectTypeAdapterTest.testSerialize":23,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":57,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":307,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":538,"com.google.gson.JsonPrimitiveTest.testEqualsIntegerAndBigInteger":350,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":234,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":99,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":105,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":284,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":590,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":652,"com.google.gson.functional.MapTest.testMapWithQuotes":35,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":119,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":544,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":591,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":163,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":585,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":173,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":73,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":577,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":117,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":111,"com.google.gson.stream.JsonWriterTest.testLenientWriterPermitsMultipleTopLevelValues":353,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":610,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":276,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":519,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":8,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":125,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":212,"com.google.gson.functional.ObjectTest.testEmptyStringDeserialization":509,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":102,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":506,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":144,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":120,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":127,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":236,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":298,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":572,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":156,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":641,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":450,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":90,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":145,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":277,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":69,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":250,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":627,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":344,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":488,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":530,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":618,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":171,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":393,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":512,"com.google.gson.functional.ObjectTest.testNestedSerialization":189,"com.google.gson.internal.LinkedTreeMapTest.testClear":663,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":306,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":200,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":308,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":594,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":303,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":44,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":29,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":247,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":352,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":358,"com.google.gson.stream.JsonWriterTest.testUnicodeLineBreaksEscaped":390,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":184,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":605,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":578,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":85,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":628,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":471,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":27,"com.google.gson.GsonBuilderTest.testCreatingMoreThanOnce":406,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":542,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":462,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":513,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":624,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":394,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":245,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":97,"com.google.gson.functional.CollectionTest.testSetSerialization":325,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":646,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":5,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":168,"com.google.gson.functional.StringTest.testStringValueSerialization":246,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":56,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":14,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":439,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":637,"com.google.gson.MixedStreamTest.testWriteInvalidState":356,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":449,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":182,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":545,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":101,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":548,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":21,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":123,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":106,"com.google.gson.ObjectTypeAdapterTest.testDeserialize":659,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":158,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":607,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":268,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":372,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":285,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":140,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":58,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":418,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":10,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":95,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":631},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:565","type":"CtBinaryOperatorImpl","sourcecode":"(indent) == null"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12],"tindex":"9df48d67-3e59-11e6-8041-7b18c2000c51","method":{"position":"com.google.gson.stream.JsonWriter:212","type":"CtMethodImpl","sourcecode":"public final void setIndent(java.lang.String indent) {\n    if (indent == null) {\n        {\n            if ((indent.length()) == 0) {\n                com.google.gson.stream.JsonWriter.this.java.lang.String = null;\n                com.google.gson.stream.JsonWriter.this.java.lang.String = \":\";\n            } else {\n                com.google.gson.stream.JsonWriter.this.java.lang.String = indent;\n                com.google.gson.stream.JsonWriter.this.java.lang.String = \": \";\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245597929/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"indent"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[13,14,15,16,17,18,19,20,21,22,23],"tindex":"9df4db88-3e59-11e6-8041-ddfa7bf03a22","method":{"position":"com.google.gson.internal.Excluder:149","type":"CtMethodImpl","sourcecode":"public boolean excludeField(java.lang.reflect.Field field, boolean serialize) {\n    if (field.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245597929/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (((int) & (field.getModifiers())) != 0) {\n                return true;\n            } \n            if (((double) != (com.google.gson.internal.Excluder.com.google.gson.internal.Excluder.double)) && (!(isValidVersion(field.getAnnotation(com.google.gson.annotations.Since.com.google.gson.annotations.Since.java.lang.Class), field.getAnnotation(com.google.gson.annotations.Until.com.google.gson.annotations.Until.java.lang.Class))))) {\n                return true;\n            } \n            if (field.isSynthetic()) {\n                return true;\n            } \n            if (boolean) {\n                com.google.gson.annotations.Expose com.google.gson.annotations.Expose = field.getAnnotation(com.google.gson.annotations.Expose.com.google.gson.annotations.Expose.java.lang.Class);\n                if ((annotation == null) || (serialize ? !(annotation.serialize()) : !(annotation.deserialize()))) {\n                    return true;\n                } \n            } \n            if ((!(boolean)) && (isInnerClass(field.getType()))) {\n                return true;\n            } \n            if (isAnonymousOrLocal(field.getType())) {\n                return true;\n            } \n            java.util.List<com.google.gson.ExclusionStrategy> java.util.List<com.google.gson.ExclusionStrategy> = serialize ? java.util.List<com.google.gson.ExclusionStrategy> : java.util.List<com.google.gson.ExclusionStrategy>;\n            if (!(list.isEmpty())) {\n                com.google.gson.FieldAttributes com.google.gson.FieldAttributes = new com.google.gson.FieldAttributes(field);\n                for (com.google.gson.ExclusionStrategy com.google.gson.ExclusionStrategy : list) {\n                    if (exclusionStrategy.shouldSkipField(fieldAttributes)) {\n                        return true;\n                    } \n                }\n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"field"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:537","type":"CtFieldReadImpl","sourcecode":"lenient"},"failures":[24,25,26,27,28,29,30,31,0,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,13,14,15,16,17,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,18,183,184,185,186,187,188,189,190,191,192,193,19,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,1,2,3,4,5,6,7,8,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,21,22,335,9,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,12,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377],"tindex":"9df50299-3e59-11e6-8041-1572ae6889fa","method":{"position":"com.google.gson.stream.JsonWriter:234","type":"CtMethodImpl","sourcecode":"public final void setLenient(boolean lenient) {\n    if (lenient) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245597929/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (lenient) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245597929/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    com.google.gson.stream.JsonWriter.this.boolean = lenient;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"lenient"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:726","type":"CtBinaryOperatorImpl","sourcecode":"value == 0"},"failures":[372,374],"tindex":"9df529aa-3e59-11e6-8041-9b0d2e52d9cb","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:170","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(long value) throws java.io.IOException {\n    if (value == 0) {\n        {\n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245597929/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.TreeTypeAdapter:55","type":"CtInvocationImpl","sourcecode":"value.isJsonNull()"},"failures":[],"tindex":"9df529ab-3e59-11e6-8041-21bb7e84a8a7","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n@java.lang.Override\nvoid write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value == null) {\n        {\n            if (value.isJsonNull()) {\n                {\n                    java.lang.Object java.lang.Object = field.get(value);\n                    com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n                    t.write(writer, fieldValue);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245597929/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.IllegalAccessException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245597929/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[24,25,26,28,29,31,0,32,33,34,35,36,37,39,40,42,43,44,45,46,48,49,50,51,54,55,56,57,58,59,60,61,63,64,65,66,67,68,69,70,71,72,73,75,81,82,83,86,87,89,90,93,94,96,97,99,100,102,104,105,106,107,108,13,14,15,16,17,109,111,112,113,114,115,116,118,119,120,121,122,123,125,127,128,129,130,131,132,133,134,135,136,138,139,141,142,143,145,146,147,148,149,150,152,153,154,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,174,175,176,177,178,179,180,181,18,184,187,188,189,191,192,193,19,194,197,198,201,217,230,231,232,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,2,3,4,8,257,258,260,261,262,263,264,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,378,379,380,381,382,383,313,314,315,317,319,320,321,322,323,324,325,327,328,329,330,331,332,333,21,22,9,336,337,340,341,342,343,344,345,351,352,384,385,386,387,10,11,388,389,390,354,12,358,360,363,364,367,368,23,391,374,375,377],"tindex":"9df550bc-3e59-11e6-8041-5bb1e94e39e8","method":{"position":"com.google.gson.stream.JsonWriter:532","type":"CtMethodImpl","sourcecode":"private void string(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        {\n            java.lang.String[] java.lang.String[] = boolean ? com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[] : com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[];\n            java.io.Writer.write(\"\\\"\");\n            int int = 0;\n            int int = value.length();\n            for (int int = 0 ; i < length ; i++) {\n                char char = value.charAt(i);\n                java.lang.String java.lang.String;\n                if (c < 128) {\n                    replacement = replacements[c];\n                    if (replacement == null) {\n                        continue;\n                    } \n                } else if (c == '\\u2028') {\n                    replacement = \"\\\\u2028\";\n                } else if (c == '\\u2029') {\n                    replacement = \"\\\\u2029\";\n                } else {\n                    continue;\n                }\n                if (last < i) {\n                    java.io.Writer.write(value, last, (i - last));\n                } \n                java.io.Writer.write(replacement);\n                last = i + 1;\n            }\n            if (last < length) {\n                java.io.Writer.write(value, last, (length - last));\n            } \n            java.io.Writer.write(\"\\\"\");\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245597929/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:537","type":"CtFieldReadImpl","sourcecode":"lenient"},"failures":[],"tindex":"9df550bd-3e59-11e6-8041-6f99c3bde1b7","method":{"position":"com.google.gson.stream.JsonWriter:234","type":"CtMethodImpl","sourcecode":"public final void setLenient(boolean lenient) {\n    if (lenient) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245597929/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (lenient) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245597929/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    com.google.gson.stream.JsonWriter.this.boolean = lenient;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"lenient"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:726","type":"CtBinaryOperatorImpl","sourcecode":"value == 0"},"failures":[126,133,136,137,392,385,387,365,366],"tindex":"9df577ce-3e59-11e6-8041-f3986909dbc1","method":{"position":"com.google.gson.stream.JsonWriter:476","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(long value) throws java.io.IOException {\n    if (value == 0) {\n        {\n            writeDeferredName();\n            beforeValue(false);\n            java.io.Writer.write(java.lang.Long.toString(value));\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245597929/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:180","type":"CtUnaryOperatorImpl","sourcecode":"!(b instanceof java.lang.reflect.GenericArrayType)"},"failures":[],"tindex":"9df577cf-3e59-11e6-8041-4d607e26f64f","method":{"position":"com.google.gson.internal.$Gson$Types:158","type":"CtMethodImpl","sourcecode":"public static boolean equals(java.lang.reflect.Type a, java.lang.reflect.Type b) {\n    if (a == b) {\n        return true;\n    } else if (a instanceof java.lang.Class) {\n        return a.equals(b);\n    } else if (a instanceof java.lang.reflect.ParameterizedType) {\n        if (!(b instanceof java.lang.reflect.ParameterizedType)) {\n            return false;\n        } \n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(a));\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(b));\n        return ((com.google.gson.internal.$Gson$Types.equal(pa.getOwnerType(), pb.getOwnerType())) && (pa.getRawType().equals(pb.getRawType()))) && (java.util.Arrays.equals(pa.getActualTypeArguments(), pb.getActualTypeArguments()));\n    } else if (a instanceof java.lang.reflect.GenericArrayType) {\n        if (!(b instanceof java.lang.reflect.GenericArrayType)) {\n            return false;\n        } \n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(a));\n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(b));\n        return com.google.gson.internal.$Gson$Types.equals(ga.getGenericComponentType(), gb.getGenericComponentType());\n    } else if (a instanceof java.lang.reflect.WildcardType) {\n        if (!(b instanceof java.lang.reflect.WildcardType)) {\n            return false;\n        } \n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(a));\n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(b));\n        return (java.util.Arrays.equals(wa.getUpperBounds(), wb.getUpperBounds())) && (java.util.Arrays.equals(wa.getLowerBounds(), wb.getLowerBounds()));\n    } else if (a instanceof java.lang.reflect.TypeVariable) {\n        if (!(b instanceof java.lang.reflect.TypeVariable)) {\n            return false;\n        } \n        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(a));\n        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(b));\n        return ((va.getGenericDeclaration()) == (vb.getGenericDeclaration())) && (va.getName().equals(vb.getName()));\n    } else {\n        return false;\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:298","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[60,61,63,75,82,99,212,228,282,393,312,378,379,394,380,381,382],"tindex":"9df59ee0-3e59-11e6-8041-1d7a9a6e0c99","method":{"position":"com.google.gson.Gson:297","type":"CtMethodImpl","sourcecode":"private void checkValidFloatingPoint(double value) {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245597929/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                {\n                    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                        throw new java.lang.IllegalArgumentException(((value + \" is not a valid double value as per JSON specification. To override this\") + \" behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.\"));\n                    } \n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245597929/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[24,25,28,29,31,0,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,48,49,50,51,54,55,56,57,58,60,61,63,64,65,66,67,68,69,70,71,72,73,75,81,82,83,86,87,100,104,105,106,107,108,13,14,15,16,17,109,111,112,113,123,133,134,136,141,144,149,154,157,158,159,160,161,162,165,166,167,168,169,171,174,175,176,177,178,179,180,181,18,184,187,188,189,191,192,193,19,194,230,231,232,247,248,249,250,251,252,253,254,2,3,4,8,257,260,261,262,263,264,266,276,277,278,279,280,281,282,283,284,285,286,287,292,297,298,299,300,302,304,305,306,307,310,311,312,378,379,380,381,382,383,313,315,321,323,325,328,332,21,22,9,337,340,341,342,343,344,345,395,396,384,385,386,387,10,11,388,397,354,12,360,367,368,23,391,374,375,377],"tindex":"9df59ee1-3e59-11e6-8041-f514161cdeac","method":{"position":"com.google.gson.stream.JsonWriter:385","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter name(java.lang.String name) throws java.io.IOException {\n    if (name == null) {\n        {\n            if (name == null) {\n                throw new java.lang.NullPointerException(\"name == null\");\n            } \n            if ((java.lang.String) != null) {\n                throw new java.lang.IllegalStateException();\n            } \n            if ((int) == 0) {\n                throw new java.lang.IllegalStateException(\"JsonWriter is closed.\");\n            } \n            java.lang.String = name;\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245597929/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[38,44,60,63,124,262,276,280,284,285],"tindex":"9df5c5f2-3e59-11e6-8041-d911b4dace93","method":{"position":"com.google.gson.stream.JsonWriter:490","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245597929/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            writeDeferredName();\n            java.lang.String java.lang.String = value.toString();\n            if ((!(boolean)) && (((string.equals(\"-Infinity\")) || (string.equals(\"Infinity\"))) || (string.equals(\"NaN\")))) {\n                throw new java.lang.IllegalArgumentException((\"Numeric values must be finite, but was \" + value));\n            } \n            beforeValue(false);\n            java.io.Writer.append(string);\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:107","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonArray"},"failures":[],"tindex":"9df5c5f3-3e59-11e6-8041-a96d5a88d961","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:839","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245597929/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof com.google.gson.JsonArray) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245597929/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return containsKey(o);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:298","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[],"tindex":"9df5c5f4-3e59-11e6-8041-a100036396b9","method":{"position":"com.google.gson.Gson:297","type":"CtMethodImpl","sourcecode":"private void checkValidFloatingPoint(double value) {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245597929/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                {\n                    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                        throw new java.lang.IllegalArgumentException(((value + \" is not a valid double value as per JSON specification. To override this\") + \" behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.\"));\n                    } \n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245597929/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"9df5c5f5-3e59-11e6-8041-05d78956ef62","method":{"position":"com.google.gson.Gson:695","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.lang.String json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            if (json == null) {\n                {\n                    java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n                    return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245597929/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245597929/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"9df5ed06-3e59-11e6-8041-ffe7eccb22b6","method":{"position":"com.google.gson.JsonObject:78","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.String value) {\n    if (property == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245597929/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            add(property, createJsonElement(value));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"9df5ed07-3e59-11e6-8041-df8de88c4ba2","method":{"position":"com.google.gson.Gson:695","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.lang.String json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            if (json == null) {\n                {\n                    java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n                    return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245597929/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245597929/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:199","type":"CtBinaryOperatorImpl","sourcecode":"from instanceof java.lang.reflect.ParameterizedType"},"failures":[398,399,400],"tindex":"9df5ed08-3e59-11e6-8041-edc1a64df931","method":{"position":"com.google.gson.reflect.TypeToken:185","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.ParameterizedType to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeVarMap) {\n    if (from instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245597929/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (from == null) {\n                return false;\n            } \n            if (to.equals(from)) {\n                return true;\n            } \n            java.lang.Class<?> java.lang.Class<?> = com.google.gson.internal.$Gson$Types.getRawType(from);\n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = null;\n            if (from instanceof java.lang.reflect.ParameterizedType) {\n                ptype = ((java.lang.reflect.ParameterizedType)(from));\n            } \n            if (ptype != null) {\n                java.lang.reflect.Type[] java.lang.reflect.Type[] = ptype.getActualTypeArguments();\n                java.lang.reflect.TypeVariable<?>[] java.lang.reflect.TypeVariable<?>[] = clazz.getTypeParameters();\n                for (int int = 0 ; i < (tArgs.int) ; i++) {\n                    java.lang.reflect.Type java.lang.reflect.Type = tArgs[i];\n                    java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = tParams[i];\n                    while (arg instanceof java.lang.reflect.TypeVariable<?>) {\n                        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(arg));\n                        arg = typeVarMap.get(v.getName());\n                    }\n                    typeVarMap.put(var.getName(), arg);\n                }\n                if (com.google.gson.reflect.TypeToken.typeEquals(ptype, to, typeVarMap)) {\n                    return true;\n                } \n            } \n            for (java.lang.reflect.Type java.lang.reflect.Type : clazz.getGenericInterfaces()) {\n                if (com.google.gson.reflect.TypeToken.isAssignableFrom(itype, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap))) {\n                    return true;\n                } \n            }\n            java.lang.reflect.Type java.lang.reflect.Type = clazz.getGenericSuperclass();\n            return com.google.gson.reflect.TypeToken.isAssignableFrom(sType, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.TreeTypeAdapter:55","type":"CtInvocationImpl","sourcecode":"value.isJsonNull()"},"failures":[57,58,263,401,402,403,377],"tindex":"9df5ed09-3e59-11e6-8041-113d09b0edf9","method":{"position":"com.google.gson.JsonObject:53","type":"CtMethodImpl","sourcecode":"public void add(java.lang.String property, com.google.gson.JsonElement value) {\n    if (value.isJsonNull()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245597929/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (value == null) {\n                value = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.put(property, value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"9df6141a-3e59-11e6-8041-43ad679713fd","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n@java.lang.Override\nvoid write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value == null) {\n        {\n            if (value.isJsonNull()) {\n                {\n                    java.lang.Object java.lang.Object = field.get(value);\n                    com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n                    t.write(writer, fieldValue);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245597929/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.IllegalAccessException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245597929/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:459","type":"CtBinaryOperatorImpl","sourcecode":"typeAdapter instanceof com.google.gson.TypeAdapter<?>"},"failures":[173,186,272,273,274,290,9,336,404,360],"tindex":"9df6141b-3e59-11e6-8041-ddff4226c749","method":{"position":"com.google.gson.TreeTypeAdapter:103","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newTypeHierarchyFactory(java.lang.Class<?> hierarchyType, java.lang.Object typeAdapter) {\n    if ((typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245597929/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                {\n                    return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , null , false , hierarchyType);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245597929/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:274","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[405,24,25,406,26,27,407,408,28,409,29,410,411,412,30,413,414,415,31,0,416,417,32,418,33,419,34,420,421,422,423,35,36,37,424,425,38,39,426,40,41,42,43,44,45,427,46,47,428,48,429,430,49,50,51,52,53,54,431,432,55,433,434,56,57,58,435,436,59,437,60,438,61,439,62,440,63,64,65,66,67,441,68,69,70,442,443,71,444,72,445,446,74,75,76,77,78,79,80,81,82,83,84,85,447,448,86,87,88,89,90,449,91,92,93,94,95,450,451,96,97,98,452,453,454,99,455,100,456,101,457,102,458,103,459,104,105,106,107,108,109,110,111,112,113,460,114,115,116,461,462,463,117,464,118,119,465,120,466,121,122,467,468,123,469,124,470,125,126,127,128,129,471,130,472,131,132,473,133,474,134,135,136,137,475,138,476,477,139,478,140,141,479,142,143,480,144,145,146,147,148,149,481,482,150,151,483,152,484,485,153,486,154,155,487,488,489,156,157,158,159,160,161,490,162,163,491,164,492,493,494,165,166,167,495,168,169,170,496,171,497,172,173,174,175,498,499,176,177,178,500,501,179,502,503,180,504,505,181,182,506,507,18,508,183,184,509,510,185,511,186,187,512,188,189,190,513,191,514,515,516,517,192,518,193,19,519,194,520,521,522,20,523,524,525,195,526,196,527,528,529,530,531,197,532,533,198,534,535,536,537,538,539,540,199,200,541,542,543,544,545,201,546,202,203,547,548,204,549,550,205,551,206,207,552,553,208,209,554,555,556,210,557,558,559,560,561,562,563,564,211,565,212,566,213,214,567,568,215,569,570,216,571,217,572,573,574,218,219,220,221,222,223,224,575,576,577,225,578,226,579,580,581,227,228,582,229,583,584,230,585,586,231,232,233,234,235,236,237,587,238,239,240,241,242,588,589,243,590,244,591,592,593,245,594,595,246,596,597,598,599,600,601,602,603,247,604,605,248,249,606,250,607,251,252,253,254,255,256,1,2,3,4,5,6,7,8,257,608,609,258,610,259,260,261,611,262,263,264,265,612,266,613,267,268,269,270,271,272,273,274,614,275,276,615,277,278,279,280,281,282,616,283,284,285,617,286,618,619,287,288,289,290,291,620,621,292,622,293,294,295,296,297,623,624,298,299,625,626,300,627,301,628,629,302,630,303,304,305,306,631,632,633,634,635,307,308,309,310,311,313,314,315,316,636,637,638,317,318,319,320,321,639,640,322,641,642,323,324,643,325,326,644,327,645,328,329,330,331,332,333,334,21,22,335,9,336,404,337,338,339,646,340,341,342,343,344,345,352,354,647,648,12,355,356,357,649,358,359,650,651,652,360,361,362,363,653,364,365,366,367,368],"tindex":"9df6141c-3e59-11e6-8041-fd05a09d8c76","method":{"position":"com.google.gson.Gson:273","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> floatAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return ((float)(in.nextDouble()));\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    float float = value.floatValue();\n                    checkValidFloatingPoint(floatValue);\n                    out.value(value);\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245597929/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:85","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[],"tindex":"9df63b2d-3e59-11e6-8041-a72264f5659a","method":{"position":"com.google.gson.internal.$Gson$Types:411","type":"CtMethodImpl","sourcecode":"private static int indexOf(java.lang.Object[] array, java.lang.Object toFind) {\n    for (int int = 0 ; i < (array.int) ; i++) {\n        if (toFind.equals(array[i])) {\n            return i;\n        } \n    }\n    throw new java.util.NoSuchElementException();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"toFind"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:131","type":"CtBinaryOperatorImpl","sourcecode":"(type) instanceof java.lang.Class<?>"},"failures":[],"tindex":"9df63b2e-3e59-11e6-8041-05f9be92cf3b","method":{"position":"com.google.gson.internal.$Gson$Types:93","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type canonicalize(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class) {\n        java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(type));\n        return c.isArray() ? new com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl(com.google.gson.internal.$Gson$Types.canonicalize(c.getComponentType())) : c;\n    } else if (type instanceof java.lang.reflect.ParameterizedType) {\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(type));\n        return new com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl(p.getOwnerType() , p.getRawType() , p.getActualTypeArguments());\n    } else if (type instanceof java.lang.reflect.GenericArrayType) {\n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(type));\n        return new com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl(g.getGenericComponentType());\n    } else if (type instanceof java.lang.reflect.WildcardType) {\n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(type));\n        return new com.google.gson.internal.$Gson$Types.WildcardTypeImpl(w.getUpperBounds() , w.getLowerBounds());\n    } else {\n        return type;\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:105","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonObject"},"failures":[],"tindex":"9df63b2f-3e59-11e6-8041-2de7ff3d7643","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:804","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonNull) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245597929/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof com.google.gson.JsonNull) {\n                {\n                    if (o instanceof com.google.gson.JsonObject) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245597929/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            return (o instanceof java.util.Map.Entry) && ((findByEntry(((java.util.Map.Entry<?, ?>)(o)))) != null);\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245597929/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:163","type":"CtBinaryOperatorImpl","sourcecode":"a instanceof java.lang.Class"},"failures":[],"tindex":"9df66240-3e59-11e6-8041-01303871221c","method":{"position":"com.google.gson.internal.$Gson$Types:158","type":"CtMethodImpl","sourcecode":"public static boolean equals(java.lang.reflect.Type a, java.lang.reflect.Type b) {\n    if (a == b) {\n        return true;\n    } else if (a instanceof java.lang.Class) {\n        return a.equals(b);\n    } else if (a instanceof java.lang.reflect.ParameterizedType) {\n        if (!(b instanceof java.lang.reflect.ParameterizedType)) {\n            return false;\n        } \n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(a));\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(b));\n        return ((com.google.gson.internal.$Gson$Types.equal(pa.getOwnerType(), pb.getOwnerType())) && (pa.getRawType().equals(pb.getRawType()))) && (java.util.Arrays.equals(pa.getActualTypeArguments(), pb.getActualTypeArguments()));\n    } else if (a instanceof java.lang.reflect.GenericArrayType) {\n        if (!(b instanceof java.lang.reflect.GenericArrayType)) {\n            return false;\n        } \n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(a));\n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(b));\n        return com.google.gson.internal.$Gson$Types.equals(ga.getGenericComponentType(), gb.getGenericComponentType());\n    } else if (a instanceof java.lang.reflect.WildcardType) {\n        if (!(b instanceof java.lang.reflect.WildcardType)) {\n            return false;\n        } \n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(a));\n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(b));\n        return (java.util.Arrays.equals(wa.getUpperBounds(), wb.getUpperBounds())) && (java.util.Arrays.equals(wa.getLowerBounds(), wb.getLowerBounds()));\n    } else if (a instanceof java.lang.reflect.TypeVariable) {\n        if (!(b instanceof java.lang.reflect.TypeVariable)) {\n            return false;\n        } \n        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(a));\n        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(b));\n        return ((va.getGenericDeclaration()) == (vb.getGenericDeclaration())) && (va.getName().equals(vb.getName()));\n    } else {\n        return false;\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:136","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.TypeVariable"},"failures":[],"tindex":"9df66241-3e59-11e6-8041-f1a9771855a6","method":{"position":"com.google.gson.internal.$Gson$Types:117","type":"CtMethodImpl","sourcecode":"public static java.lang.Class<?> getRawType(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class<?>) {\n        return ((java.lang.Class<?>)(type));\n    } else if (type instanceof java.lang.reflect.ParameterizedType) {\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(type));\n        java.lang.reflect.Type java.lang.reflect.Type = parameterizedType.getRawType();\n        com.google.gson.internal.$Gson$Preconditions.checkArgument((rawType instanceof java.lang.Class));\n        return ((java.lang.Class<?>)(rawType));\n    } else if (type instanceof java.lang.reflect.GenericArrayType) {\n        java.lang.reflect.Type java.lang.reflect.Type = ((java.lang.reflect.GenericArrayType)(type)).getGenericComponentType();\n        return java.lang.reflect.Array.newInstance(com.google.gson.internal.$Gson$Types.getRawType(componentType), 0).getClass();\n    } else if (type instanceof java.lang.reflect.TypeVariable) {\n        return java.lang.Object.java.lang.Object.java.lang.Class;\n    } else if (type instanceof java.lang.reflect.WildcardType) {\n        return com.google.gson.internal.$Gson$Types.getRawType(((java.lang.reflect.WildcardType)(type)).getUpperBounds()[0]);\n    } else {\n        java.lang.String java.lang.String = type == null ? \"null\" : type.getClass().getName();\n        throw new java.lang.IllegalArgumentException(((((\"Expected a Class, ParameterizedType, or \" + \"GenericArrayType, but <\") + type) + \"> is of type \") + className));\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:136","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.TypeVariable"},"failures":[],"tindex":"9df66242-3e59-11e6-8041-1f0df65d011b","method":{"position":"com.google.gson.internal.ConstructorConstructor:200","type":"CtMethodImpl","sourcecode":"private <T>com.google.gson.internal.ObjectConstructor<T> newUnsafeAllocator(final java.lang.reflect.Type type, final java.lang.Class<? super T> rawType) {\n    if (type instanceof java.lang.reflect.TypeVariable) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245597929/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new com.google.gson.internal.ObjectConstructor<T>() {\n                private final com.google.gson.internal.UnsafeAllocator unsafeAllocator = com.google.gson.internal.UnsafeAllocator.create();\n\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                public T construct() {\n                    try {\n                        java.lang.Object java.lang.Object = com.google.gson.internal.UnsafeAllocator.newInstance(rawType);\n                        return ((T)(newInstance));\n                    } catch (java.lang.Exception e) {\n                        throw new java.lang.RuntimeException((((\"Unable to invoke no-args constructor for \" + type) + \". \") + \"Register an InstanceCreator with Gson for this type may fix this problem.\") , e);\n                    }\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:105","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonObject"},"failures":[],"tindex":"9df68953-3e59-11e6-8041-dd06be868bae","method":{"position":"com.google.gson.internal.$Gson$Types:213","type":"CtMethodImpl","sourcecode":"private static int hashCodeOrZero(java.lang.Object o) {\n    return o != null ? o.hashCode() : 0;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[24,25,28,29,31,0,32,33,34,35,36,40,42,43,45,46,48,50,51,53,54,56,59,65,67,68,69,71,74,75,77,78,79,80,81,83,84,85,86,87,88,89,90,93,94,96,97,99,100,102,13,14,15,16,17,129,141,143,153,154,157,175,176,178,179,180,181,184,187,189,192,194,197,198,201,231,232,238,239,240,241,242,243,244,245,246,247,248,249,251,252,255,4,8,258,277,282,298,301,302,303,304,305,306,307,308,309,310,311,379,383,313,314,317,319,320,321,322,323,324,332,21,22,9,343,344,345,347,354,12,358,360,363],"tindex":"9df68954-3e59-11e6-8041-05afe5b9fbed","method":{"position":"com.google.gson.internal.bind.TypeAdapters:361","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245597929/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Preconditions:41","type":"CtUnaryOperatorImpl","sourcecode":"!condition"},"failures":[],"tindex":"9df68955-3e59-11e6-8041-8d1ce41f1964","method":{"position":"com.google.gson.internal.$Gson$Preconditions:40","type":"CtMethodImpl","sourcecode":"public static void checkArgument(boolean condition) {\n    if (!condition) {\n        throw new java.lang.IllegalArgumentException();\n    } \n}"},"series":0,"name":"addParameterCondition","variableMap":{"condition":"condition"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"9df68956-3e59-11e6-8041-131ca4c19bd3","method":{"position":"com.google.gson.Gson:491","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245597929/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.bind.JsonTreeWriter com.google.gson.internal.bind.JsonTreeWriter = new com.google.gson.internal.bind.JsonTreeWriter();\n            toJson(src, typeOfSrc, writer);\n            return writer.get();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:233","type":"CtBinaryOperatorImpl","sourcecode":"annotation != null"},"failures":[297,623,624,298,299,625,626,300],"tindex":"9df6b067-3e59-11e6-8041-2de6d125a4c7","method":{"position":"com.google.gson.internal.Excluder:232","type":"CtMethodImpl","sourcecode":"private boolean isValidSince(com.google.gson.annotations.Since annotation) {\n    if (annotation != null) {\n        {\n            if (annotation != null) {\n                double double = annotation.value();\n                if (annotationVersion > (double)) {\n                    return false;\n                } \n            } \n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245597929/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:497","type":"CtBinaryOperatorImpl","sourcecode":"(typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)"},"failures":[],"tindex":"9df6b068-3e59-11e6-8041-3d566247a8e7","method":{"position":"com.google.gson.TreeTypeAdapter:103","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newTypeHierarchyFactory(java.lang.Class<?> hierarchyType, java.lang.Object typeAdapter) {\n    if ((typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245597929/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                {\n                    return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , null , false , hierarchyType);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245597929/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:127","type":"CtInvocationImpl","sourcecode":"raw.isInterface()"},"failures":[24,25,408,28,409,29,411,34,425,40,42,43,46,50,51,53,54,432,55,433,434,56,60,438,61,439,62,440,63,64,65,66,67,441,68,69,70,442,443,71,444,72,445,446,73,74,75,76,77,78,79,80,81,82,83,84,85,447,448,86,87,88,100,456,101,104,105,106,107,108,13,14,15,16,17,109,111,112,113,462,463,467,124,471,134,144,149,486,154,157,158,159,160,161,490,162,491,494,165,167,168,175,498,499,176,177,178,500,501,179,502,503,180,504,505,181,506,18,508,184,510,511,187,512,188,189,190,513,191,514,515,516,192,518,193,19,519,194,520,521,522,20,573,230,586,231,232,233,234,236,237,596,597,598,599,600,247,604,248,249,250,607,251,252,253,254,255,256,3,4,8,257,608,609,260,261,611,262,264,266,613,276,615,278,279,280,281,282,616,283,284,285,617,286,619,287,292,622,297,623,624,298,299,625,626,300,628,629,302,630,304,305,306,632,633,634,307,310,311,313,315,321,642,323,325,332,21,22,9,337,339,646,340,341,342,343,344,345,354,12,356,359,650,651,360,23],"tindex":"9df6b069-3e59-11e6-8041-69a0288f2f29","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:125","type":"CtMethodImpl","sourcecode":"private java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> getBoundFields(com.google.gson.Gson context, com.google.gson.reflect.TypeToken<?> type, java.lang.Class<?> raw) {\n    if (raw.isInterface()) {\n        {\n            java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> = new java.util.LinkedHashMap<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField>();\n            if (raw.isInterface()) {\n                return result;\n            } \n            java.lang.reflect.Type java.lang.reflect.Type = type.getType();\n            while (raw != (java.lang.Object.java.lang.Object.java.lang.Class)) {\n                java.lang.reflect.Field[] java.lang.reflect.Field[] = raw.getDeclaredFields();\n                for (java.lang.reflect.Field java.lang.reflect.Field : fields) {\n                    boolean boolean = excludeField(field, true);\n                    boolean boolean = excludeField(field, false);\n                    if ((!serialize) && (!deserialize)) {\n                        continue;\n                    } \n                    field.setAccessible(true);\n                    java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, field.getGenericType());\n                    com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = createBoundField(context, field, getFieldName(field), com.google.gson.reflect.TypeToken.get(fieldType), serialize, deserialize);\n                    com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = result.put(boundField.java.lang.String, boundField);\n                    if (previous != null) {\n                        throw new java.lang.IllegalArgumentException(((declaredType + \" declares multiple JSON fields named \") + (previous.java.lang.String)));\n                    } \n                }\n                type = com.google.gson.reflect.TypeToken.get(com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, raw.getGenericSuperclass()));\n                raw = type.getRawType();\n            }\n            return result;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245597929/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"raw"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:120","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonNull"},"failures":[],"tindex":"9df6d77a-3e59-11e6-8041-113d62f9ce39","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:804","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonNull) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245597929/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof com.google.gson.JsonNull) {\n                {\n                    if (o instanceof com.google.gson.JsonObject) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245597929/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            return (o instanceof java.util.Map.Entry) && ((findByEntry(((java.util.Map.Entry<?, ?>)(o)))) != null);\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245597929/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:131","type":"CtBinaryOperatorImpl","sourcecode":"(type) instanceof java.lang.Class<?>"},"failures":[],"tindex":"9df6d77b-3e59-11e6-8041-b3465abd0e73","method":{"position":"com.google.gson.internal.$Gson$Types:217","type":"CtMethodImpl","sourcecode":"public static java.lang.String typeToString(java.lang.reflect.Type type) {\n    return type instanceof java.lang.Class ? ((java.lang.Class<?>)(type)).getName() : type.toString();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"9df6d77c-3e59-11e6-8041-19e1cdcee56c","method":{"position":"com.google.gson.JsonObject:89","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Number value) {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245597929/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            add(property, createJsonElement(value));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.DateTypeAdapter:86","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[124],"tindex":"9df6d77d-3e59-11e6-8041-19f59d987edc","method":{"position":"com.google.gson.internal.bind.DateTypeAdapter:85","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized void write(com.google.gson.stream.JsonWriter out, java.util.Date value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245597929/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245597929/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    java.lang.String java.lang.String = java.text.DateFormat.format(value);\n                    out.value(dateFormatAsString);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.DateTypeAdapter:86","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"9df6fe8e-3e59-11e6-8041-cd3feed61d56","method":{"position":"com.google.gson.internal.bind.DateTypeAdapter:85","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized void write(com.google.gson.stream.JsonWriter out, java.util.Date value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245597929/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245597929/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    java.lang.String java.lang.String = java.text.DateFormat.format(value);\n                    out.value(dateFormatAsString);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:360","type":"CtVariableReadImpl","sourcecode":"insert"},"failures":[654,409,410,411,419,422,424,428,53,434,57,58,73,74,75,76,77,79,80,84,85,88,461,123,154,492,171,230,231,232,596,597,598,599,600,255,256,655,656,644,9,343,657,658,345,402,403,659,374,375,660,661,662,663,664,665,666,667],"tindex":"9df6fe8f-3e59-11e6-8041-bbdd883f65c2","method":{"position":"com.google.gson.internal.LinkedTreeMap:310","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (insert) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245597929/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            for (com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>) {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                int int = left != null ? left.int : 0;\n                int int = right != null ? right.int : 0;\n                int int = leftHeight - rightHeight;\n                if (delta == (-2)) {\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    int int = rightRight != null ? rightRight.int : 0;\n                    int int = rightLeft != null ? rightLeft.int : 0;\n                    int int = rightLeftHeight - rightRightHeight;\n                    if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                        rotateLeft(node);\n                    } else {\n                        assert rightDelta == 1;\n                        rotateRight(right);\n                        rotateLeft(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 2) {\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    int int = leftRight != null ? leftRight.int : 0;\n                    int int = leftLeft != null ? leftLeft.int : 0;\n                    int int = leftLeftHeight - leftRightHeight;\n                    if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                        rotateRight(node);\n                    } else {\n                        assert leftDelta == (-1);\n                        rotateLeft(left);\n                        rotateRight(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 0) {\n                    node.int = leftHeight + 1;\n                    if (insert) {\n                        break;\n                    } \n                } else {\n                    assert (delta == (-1)) || (delta == 1);\n                    node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                    if (!insert) {\n                        break;\n                    } \n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"insert"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:122","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"9df725a0-3e59-11e6-8041-29b8e6ce5ec5","method":{"position":"com.google.gson.internal.Primitives:79","type":"CtMethodImpl","sourcecode":"public static boolean isWrapperType(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245597929/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (type instanceof java.lang.reflect.ParameterizedType) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245597929/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return com.google.gson.internal.Primitives.com.google.gson.internal.Primitives.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.containsKey(com.google.gson.internal.$Gson$Preconditions.checkNotNull(type));\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:305","type":"CtBinaryOperatorImpl","sourcecode":"node != null"},"failures":[],"tindex":"9df725a1-3e59-11e6-8041-47560023e193","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:686","type":"CtMethodImpl","sourcecode":"void add(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node) {\n    if (node != null) {\n        {\n            if (node != null) {\n                {\n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                    node.int = 1;\n                    if (((int) > 0) && (((int) & 1) == 0)) {\n                        (int)++;\n                        (int)--;\n                        (int)++;\n                    } \n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node;\n                    (int)++;\n                    if (((int) > 0) && (((int) & 1) == 0)) {\n                        (int)++;\n                        (int)--;\n                        (int)++;\n                    } \n                    for (int int = 4 ; ((int) & (scale - 1)) == (scale - 1) ; scale *= 2) {\n                        if ((int) == 0) {\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                            center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left;\n                            center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                            center.int = (right.int) + 1;\n                            left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                            right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                        } else if ((int) == 1) {\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                            center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                            center.int = (right.int) + 1;\n                            right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                            int = 0;\n                        } else if ((int) == 2) {\n                            int = 0;\n                        } \n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245597929/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245597929/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"node"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:305","type":"CtBinaryOperatorImpl","sourcecode":"node != null"},"failures":[],"tindex":"9df74cb2-3e59-11e6-8041-1128957707a5","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:686","type":"CtMethodImpl","sourcecode":"void add(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node) {\n    if (node != null) {\n        {\n            if (node != null) {\n                {\n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                    node.int = 1;\n                    if (((int) > 0) && (((int) & 1) == 0)) {\n                        (int)++;\n                        (int)--;\n                        (int)++;\n                    } \n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node;\n                    (int)++;\n                    if (((int) > 0) && (((int) & 1) == 0)) {\n                        (int)++;\n                        (int)--;\n                        (int)++;\n                    } \n                    for (int int = 4 ; ((int) & (scale - 1)) == (scale - 1) ; scale *= 2) {\n                        if ((int) == 0) {\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                            center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left;\n                            center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                            center.int = (right.int) + 1;\n                            left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                            right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                        } else if ((int) == 1) {\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                            center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                            center.int = (right.int) + 1;\n                            right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                            int = 0;\n                        } else if ((int) == 2) {\n                            int = 0;\n                        } \n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245597929/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245597929/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"node"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:497","type":"CtBinaryOperatorImpl","sourcecode":"(typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)"},"failures":[],"tindex":"9df773c3-3e59-11e6-8041-ebc3fcfcb16a","method":{"position":"com.google.gson.TreeTypeAdapter:84","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newFactory(com.google.gson.reflect.TypeToken<?> exactType, java.lang.Object typeAdapter) {\n    if ((typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)) {\n        {\n            return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , exactType , false , null);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245597929/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.TreeTypeAdapter:55","type":"CtInvocationImpl","sourcecode":"value.isJsonNull()"},"failures":[50,76,78,79,80,84,85,88,235,255,256,370,377],"tindex":"9df773c4-3e59-11e6-8041-af8ee3197f54","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:75","type":"CtMethodImpl","sourcecode":"private void put(com.google.gson.JsonElement value) {\n    if (value.isJsonNull()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245597929/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((java.lang.String) != null) {\n                if ((!(value.isJsonNull())) || (getSerializeNulls())) {\n                    com.google.gson.JsonObject com.google.gson.JsonObject = ((com.google.gson.JsonObject)(peek()));\n                    object.add(java.lang.String, value);\n                } \n                java.lang.String = null;\n            } else if (java.util.List<com.google.gson.JsonElement>.isEmpty()) {\n                com.google.gson.JsonElement = value;\n            } else {\n                com.google.gson.JsonElement com.google.gson.JsonElement = peek();\n                if (element instanceof com.google.gson.JsonArray) {\n                    ((com.google.gson.JsonArray)(element)).add(value);\n                } else {\n                    throw new java.lang.IllegalStateException();\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[26,217],"tindex":"9df773c5-3e59-11e6-8041-6f4e215e79a3","method":{"position":"com.google.gson.Gson:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            out.value(value.toString());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245597929/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1422","type":"CtUnaryOperatorImpl","sourcecode":"!(lenient)"},"failures":[],"tindex":"9df79ad6-3e59-11e6-8041-8fc0dfb4a308","method":{"position":"com.google.gson.stream.JsonReader:325","type":"CtMethodImpl","sourcecode":"public final void setLenient(boolean lenient) {\n    if (!lenient) {\n        {\n            com.google.gson.stream.JsonReader.this.boolean = lenient;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245597929/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"lenient"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"9df79ad7-3e59-11e6-8041-8975403404fb","method":{"position":"com.google.gson.Gson:468","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245597929/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src == null) {\n                return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            return toJsonTree(src, src.getClass());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:120","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonNull"},"failures":[],"tindex":"9df79ad8-3e59-11e6-8041-116117f1a030","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:804","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonNull) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245597929/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof com.google.gson.JsonNull) {\n                {\n                    if (o instanceof com.google.gson.JsonObject) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245597929/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            return (o instanceof java.util.Map.Entry) && ((findByEntry(((java.util.Map.Entry<?, ?>)(o)))) != null);\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245597929/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"9df79ad9-3e59-11e6-8041-f9d641af9a0e","method":{"position":"com.google.gson.Gson:552","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245597929/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            if (src != null) {\n                toJson(src, src.getClass(), writer);\n            } else {\n                toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull, writer);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:125","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonObject"},"failures":[],"tindex":"9df79ada-3e59-11e6-8041-2b15ed9c3822","method":{"position":"com.google.gson.internal.Streams:67","type":"CtMethodImpl","sourcecode":"public static void write(com.google.gson.JsonElement element, com.google.gson.stream.JsonWriter writer) throws java.io.IOException {\n    if (element instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245597929/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<com.google.gson.JsonElement>.write(writer, element);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:105","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonObject"},"failures":[],"tindex":"9df7c1eb-3e59-11e6-8041-b70eebab5a2f","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:839","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245597929/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof com.google.gson.JsonArray) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245597929/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return containsKey(o);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:79","type":"CtUnaryOperatorImpl","sourcecode":"!(json instanceof com.google.gson.JsonPrimitive)"},"failures":[],"tindex":"9df7c1ec-3e59-11e6-8041-9381b06c146d","method":{"position":"com.google.gson.Gson:871","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n        {\n            if (json == null) {\n                return null;\n            } \n            return ((T)(fromJson(new com.google.gson.internal.bind.JsonTreeReader(json), typeOfT)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245597929/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:120","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonNull"},"failures":[],"tindex":"9df7c1ed-3e59-11e6-8041-e358d1fba95d","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:512","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"rawtypes\")\n@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonNull) {\n        {\n            if (o instanceof java.util.Map.Entry) {\n                java.util.Map.Entry java.util.Map.Entry = ((java.util.Map.Entry)(o));\n                return ((K) == null ? (other.getKey()) == null : K.equals(other.getKey())) && ((V) == null ? (other.getValue()) == null : V.equals(other.getValue()));\n            } \n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245597929/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:118","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.Class<?>"},"failures":[],"tindex":"9df7c1ee-3e59-11e6-8041-c7d79537a870","method":{"position":"com.google.gson.internal.Primitives:79","type":"CtMethodImpl","sourcecode":"public static boolean isWrapperType(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245597929/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (type instanceof java.lang.reflect.ParameterizedType) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245597929/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return com.google.gson.internal.Primitives.com.google.gson.internal.Primitives.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.containsKey(com.google.gson.internal.$Gson$Preconditions.checkNotNull(type));\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"9df7e8ff-3e59-11e6-8041-03dde0cdc6c0","method":{"position":"com.google.gson.Gson:136","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        {\n            return toJsonTree(src, typeOfSrc);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245597929/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:111","type":"CtInvocationImpl","sourcecode":"primitive.isString()"},"failures":[],"tindex":"9df7e900-3e59-11e6-8041-4fab08006422","method":{"position":"com.google.gson.JsonPrimitive:93","type":"CtMethodImpl","sourcecode":"void setValue(java.lang.Object primitive) {\n    if (primitive.isString()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245597929/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (primitive instanceof java.lang.Character) {\n                char char = ((java.lang.Character)(primitive)).charValue();\n                com.google.gson.JsonPrimitive.this.java.lang.Object = java.lang.String.valueOf(c);\n            } else {\n                com.google.gson.internal.$Gson$Preconditions.checkArgument(((primitive instanceof java.lang.Number) || (com.google.gson.JsonPrimitive.isPrimitiveOrString(primitive))));\n                com.google.gson.JsonPrimitive.this.java.lang.Object = primitive;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"primitive"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:554","type":"CtBinaryOperatorImpl","sourcecode":"(datePattern != null) && (!(\"\".equals(datePattern.trim())))"},"failures":[],"tindex":"9df7e901-3e59-11e6-8041-090c5896bade","method":{"position":"com.google.gson.GsonBuilder:551","type":"CtMethodImpl","sourcecode":"private void addTypeAdaptersForDate(java.lang.String datePattern, int dateStyle, int timeStyle, java.util.List<com.google.gson.TypeAdapterFactory> factories) {\n    if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n        {\n            com.google.gson.DefaultDateTypeAdapter com.google.gson.DefaultDateTypeAdapter;\n            if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n                dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(datePattern);\n            } else if ((dateStyle != (java.text.DateFormat.java.text.DateFormat.int)) && (timeStyle != (java.text.DateFormat.java.text.DateFormat.int))) {\n                dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(dateStyle , timeStyle);\n            } else {\n                return ;\n            }\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.util.Date.java.util.Date.java.lang.Class), dateTypeAdapter));\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Timestamp.java.sql.Timestamp.java.lang.Class), dateTypeAdapter));\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Date.java.sql.Date.java.lang.Class), dateTypeAdapter));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245597929/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"datePattern":"datePattern"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":59,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
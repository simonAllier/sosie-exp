{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":49,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":295,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":48,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":20,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":465,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":77,"com.google.gson.MixedStreamTest.testWriteLenient":122,"com.google.gson.internal.bind.JsonTreeWriterTest.testPrematureClose":411,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":448,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":217,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":73,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":360,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":370,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":447,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":342,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":348,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":190,"com.google.gson.JsonObjectTest.testAddingNullPropertyValue":96,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":471,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":475,"com.google.gson.functional.ObjectTest.testSingletonLists":247,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":213,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":349,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":296,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":64,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":455,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":409,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":479,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":87,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":309,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":423,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":405,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":109,"com.google.gson.functional.EnumTest.testEnumCaseMapping":341,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":125,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":294,"com.google.gson.functional.JsonTreeTest.testToJsonTree":12,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":314,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":13,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":61,"com.google.gson.JsonObjectTest.testEqualsNonEmptyObject":97,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreBehindInVersion":493,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":10,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":198,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":17,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":367,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":233,"com.google.gson.internal.bind.JsonElementReaderTest.testNestedObjects":104,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":453,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":101,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":285,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":108,"com.google.gson.JsonArrayTest.testEqualsOnEmptyArray":503,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":328,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":388,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":458,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":94,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":189,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":62,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":227,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":357,"com.google.gson.JsonParserTest.testParseString":90,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":278,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testDifferentSerializeAndDeserializeField":419,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":120,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":502,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":173,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":261,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":212,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":78,"com.google.gson.functional.StreamingTypeAdaptersTest.testFromJsonTree":86,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":159,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":72,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":413,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":442,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":144,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":279,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":169,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":260,"com.google.gson.JsonPrimitiveTest.testEqualsAcrossTypes":16,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":91,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":383,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":451,"com.google.gson.internal.LinkedHashTreeMapTest.testEmptyStringValues":32,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":117,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":154,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":485,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":161,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":333,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":65,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":45,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":216,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":207,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":486,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":387,"com.google.gson.JsonArrayTest.testEqualsNonEmptyArray":504,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":441,"com.google.gson.functional.CollectionTest.testSetDeserialization":489,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":5,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":252,"com.google.gson.functional.EnumTest.testEnumSet":336,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":334,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":238,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":130,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":256,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":25,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":115,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":488,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":231,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":325,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":282,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":384,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":34,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":146,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":70,"com.google.gson.functional.MapTest.testMapSerialization":135,"com.google.gson.internal.bind.JsonElementReaderTest.testObject":106,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":148,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":41,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":39,"com.google.gson.functional.MapTest.testSerializeMaps":129,"com.google.gson.functional.MapTest.testComplexKeysSerialization":142,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":47,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":412,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":180,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":235,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":478,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":324,"com.google.gson.internal.LinkedTreeMapTest.testRemoveRootDoesNotDoubleUnlink":2,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":432,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":229,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":1,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":312,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":152,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":67,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":288,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":145,"com.google.gson.functional.PrettyPrintingTest.testMap":310,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":377,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":363,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":149,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":195,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":408,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":300,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":98,"com.google.gson.functional.MapTest.testMapSerializationEmpty":143,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":204,"com.google.gson.functional.CollectionTest.testQueueSerialization":364,"com.google.gson.functional.MapTest.testMapOfMapSerialization":134,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":119,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":188,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":275,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":242,"com.google.gson.functional.FieldNamingTest.testIdentity":183,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":297,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":304,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":460,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":21,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":55,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":246,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":293,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":406,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testSkipNonAnnotatedFields":418,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":88,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":298,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":273,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":444,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":124,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":187,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":205,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":226,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":121,"com.google.gson.functional.MapTest.testMapSubclassSerialization":128,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":390,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":477,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":343,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":379,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":400,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":79,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":440,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":332,"com.google.gson.functional.EnumTest.testEnumSubclass":338,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":276,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":410,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":454,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":265,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":385,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":66,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":36,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":245,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":445,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":57,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":123,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":272,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":428,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":221,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":446,"com.google.gson.MixedStreamTest.testWriteNulls":401,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":175,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":171,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":234,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":474,"com.google.gson.JsonObjectTest.testReadPropertyWithEmptyStringName":93,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":240,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":248,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":472,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":308,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":435,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":40,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":136,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":299,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":114,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":3,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":9,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":223,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":287,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":42,"com.google.gson.JsonParserTest.testParseMixedArray":392,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":267,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":29,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":6,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAheadInVersion":491,"com.google.gson.internal.bind.JsonTreeWriterTest.testWriteAfterClose":415,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":118,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":186,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":210,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":283,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":206,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":315,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":127,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":396,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":470,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":131,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":164,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":320,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":318,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":37,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":54,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":437,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":255,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":262,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":156,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":380,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":58,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":199,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":476,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":160,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":244,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":18,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":311,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":393,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":225,"com.google.gson.functional.PrimitiveTest.testShortSerialization":286,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":321,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":111,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":280,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":22,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":38,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":112,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":362,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":389,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":289,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":374,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":0,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":416,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":473,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":102,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":495,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":292,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":153,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":263,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":434,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":443,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":191,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":344,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":417,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":466,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":468,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":68,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":463,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":450,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":340,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":151,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":157,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":368,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":438,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":375,"com.google.gson.InnerClassExclusionStrategyTest.testExcludeInnerClassField":497,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":317,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":23,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":211,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":71,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":201,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":322,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":59,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":274,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":290,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":352,"com.google.gson.JsonPrimitiveTest.testEquals":15,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":319,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":337,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":50,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":43,"com.google.gson.functional.MapTest.testGeneralMapField":140,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":449,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":168,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":177,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":376,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":386,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testSkipExplicitlySkippedFields":422,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":218,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":138,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":192,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":266,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":356,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":281,"com.google.gson.MixedStreamTest.testReadMixedStreamed":494,"com.google.gson.ObjectTypeAdapterTest.testDeserializeNullValue":500,"com.google.gson.JsonObjectTest.testDeepCopy":99,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":270,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":371,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":407,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":467,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":484,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":110,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":487,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":209,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":330,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":241,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":291,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":351,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":346,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":103,"com.google.gson.internal.LinkedHashTreeMapTest.testEqualsAndHashCode":33,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":208,"com.google.gson.JsonPrimitiveTest.testEqualsDoesNotEquateStringAndNonStringTypes":14,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":305,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":243,"com.google.gson.functional.ObjectTest.testNestedDeserialization":464,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":113,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":259,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":424,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":56,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":329,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":307,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":426,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":331,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":284,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":429,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":76,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":80,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":373,"com.google.gson.functional.ObjectTest.testNullSerialization":253,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":158,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":116,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":139,"com.google.gson.functional.MapTest.testInterfaceTypeMap":137,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":378,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":163,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":339,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":359,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testNeverSkipExplicitlyExposedAnnotatedFields":421,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":381,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":431,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":193,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":327,"com.google.gson.MixedStreamTest.testWriteClosed":404,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":366,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":425,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":249,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":433,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":335,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":162,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":82,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":7,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":264,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":224,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":165,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":250,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":365,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":481,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":347,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":430,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":369,"com.google.gson.internal.bind.JsonElementReaderTest.testSkipValue":105,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":214,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":81,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":184,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":269,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":11,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":166,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":236,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":8,"com.google.gson.internal.LinkedHashTreeMapTest.testPutOverrides":30,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":271,"com.google.gson.InnerClassExclusionStrategyTest.testIncludeStaticNestedClassField":498,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":147,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":222,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":482,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":132,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":459,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":203,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":358,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":462,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":361,"com.google.gson.functional.MapTest.testRawMapSerialization":141,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":399,"com.google.gson.JsonParserTest.testParseReader":89,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":155,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":257,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":46,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":323,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":92,"com.google.gson.functional.PrimitiveTest.testByteSerialization":28,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":170,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":228,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":394,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":51,"com.google.gson.ObjectTypeAdapterTest.testSerialize":496,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":354,"com.google.gson.JsonPrimitiveTest.testEqualsIntegerAndBigInteger":395,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":74,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":176,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":181,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":26,"com.google.gson.functional.MapTest.testMapWithQuotes":133,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":196,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":237,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":107,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":53,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":194,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":4,"com.google.gson.stream.JsonWriterTest.testLenientWriterPermitsMultipleTopLevelValues":398,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":83,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":24,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":461,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":316,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":200,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":277,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":179,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":452,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":219,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":197,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":75,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":202,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":345,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":230,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":84,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":167,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":220,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":35,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":306,"com.google.gson.internal.LinkedHashTreeMapTest.testContainsNonComparableKeyReturnsFalse":31,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":391,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAtSameVersion":492,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":85,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testNeverSkipExposedAnnotatedFields":420,"com.google.gson.internal.LinkedHashTreeMapTest.testRemoveRootDoesNotDoubleUnlink":499,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":69,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":456,"com.google.gson.JsonObjectTest.testAddingStringProperties":100,"com.google.gson.functional.ObjectTest.testNestedSerialization":258,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":353,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":268,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":355,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":350,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":19,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":44,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":303,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":397,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":403,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":254,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":60,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":483,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":439,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":126,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":436,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":457,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":480,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":301,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":174,"com.google.gson.functional.CollectionTest.testSetSerialization":372,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":490,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":239,"com.google.gson.functional.StringTest.testStringValueSerialization":302,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":313,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":150,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":185,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":427,"com.google.gson.MixedStreamTest.testWriteInvalidState":402,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":251,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":178,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":382,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":63,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":182,"com.google.gson.ObjectTypeAdapterTest.testDeserialize":501,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":232,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":95,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":469,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":326,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":414,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":27,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":215,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":52,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":172},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:109","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonPrimitive"},"failures":[],"tindex":"4d510f8f-3e37-11e6-a831-65e5c5e63568","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:512","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"rawtypes\")\n@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonPrimitive) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685476/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof java.util.Map.Entry) {\n                java.util.Map.Entry java.util.Map.Entry = ((java.util.Map.Entry)(o));\n                return ((K) == null ? (other.getKey()) == null : K.equals(other.getKey())) && ((V) == null ? (other.getValue()) == null : V.equals(other.getValue()));\n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"4d51abd0-3e37-11e6-a831-5fed9962d8b6","method":{"position":"com.google.gson.Gson:591","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    if (src != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685476/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            if (src == null) {\n                {\n                    com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = getAdapter(com.google.gson.reflect.TypeToken.get(typeOfSrc));\n                    boolean boolean = writer.isLenient();\n                    writer.setLenient(true);\n                    boolean boolean = writer.isHtmlSafe();\n                    writer.setHtmlSafe(boolean);\n                    boolean boolean = writer.getSerializeNulls();\n                    writer.setSerializeNulls(boolean);\n                    try {\n                        ((com.google.gson.TypeAdapter<java.lang.Object>)(adapter)).write(writer, src);\n                    } catch (java.io.IOException e) {\n                        throw new com.google.gson.JsonIOException(e);\n                    } finally {\n                        writer.setLenient(oldLenient);\n                        writer.setHtmlSafe(oldHtmlSafe);\n                        writer.setSerializeNulls(oldSerializeNulls);\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685476/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"4d51d2e1-3e37-11e6-a831-475cc5dc45b2","method":{"position":"com.google.gson.Gson:871","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            if (json == null) {\n                {\n                    if (json == null) {\n                        return null;\n                    } \n                    return ((T)(fromJson(new com.google.gson.internal.bind.JsonTreeReader(json), typeOfT)));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685476/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685476/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:287","type":"CtBinaryOperatorImpl","sourcecode":"replacement != null"},"failures":[0,1,2],"tindex":"4d51d2e2-3e37-11e6-a831-3df440c7ddcb","method":{"position":"com.google.gson.internal.LinkedTreeMap:284","type":"CtMethodImpl","sourcecode":"private void replaceInParent(com.google.gson.internal.LinkedTreeMap.Node<K, V> node, com.google.gson.internal.LinkedTreeMap.Node<K, V> replacement) {\n    if (node != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685476/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (replacement != null) {\n                {\n                    if (replacement != null) {\n                        {\n                            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                            node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                            if (replacement != null) {\n                                replacement.com.google.gson.internal.LinkedTreeMap.Node<K, V> = parent;\n                            } \n                            if (parent != null) {\n                                if ((parent.com.google.gson.internal.LinkedTreeMap.Node<K, V>) == node) {\n                                    parent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                                } else {\n                                    assert (parent.com.google.gson.internal.LinkedTreeMap.Node<K, V>) == node;\n                                    parent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                                }\n                            } else {\n                                com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                            }\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685476/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685476/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"replacement":"replacement"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:131","type":"CtBinaryOperatorImpl","sourcecode":"(type) instanceof java.lang.Class<?>"},"failures":[3,4,5,6,7,8,9,10],"tindex":"4d51f9f3-3e37-11e6-a831-6d69cf6e697f","method":{"position":"com.google.gson.internal.ConstructorConstructor:200","type":"CtMethodImpl","sourcecode":"private <T>com.google.gson.internal.ObjectConstructor<T> newUnsafeAllocator(final java.lang.reflect.Type type, final java.lang.Class<? super T> rawType) {\n    if (type instanceof java.lang.Class<?>) {\n        {\n            return new com.google.gson.internal.ObjectConstructor<T>() {\n                private final com.google.gson.internal.UnsafeAllocator unsafeAllocator = com.google.gson.internal.UnsafeAllocator.create();\n\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                public T construct() {\n                    try {\n                        java.lang.Object java.lang.Object = com.google.gson.internal.UnsafeAllocator.newInstance(rawType);\n                        return ((T)(newInstance));\n                    } catch (java.lang.Exception e) {\n                        throw new java.lang.RuntimeException((((\"Unable to invoke no-args constructor for \" + type) + \". \") + \"Register an InstanceCreator with Gson for this type may fix this problem.\") , e);\n                    }\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685476/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:115","type":"CtInvocationImpl","sourcecode":"primitive.isNumber()"},"failures":[11,12,13,14,15,16],"tindex":"4d522104-3e37-11e6-a831-ff5233d1dbc8","method":{"position":"com.google.gson.JsonPrimitive:333","type":"CtMethodImpl","sourcecode":"private static boolean isIntegral(com.google.gson.JsonPrimitive primitive) {\n    if (primitive.isString()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685476/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (primitive.isBoolean()) {\n                {\n                    if (primitive.isNumber()) {\n                        {\n                            if ((primitive.java.lang.Object) instanceof java.lang.Number) {\n                                java.lang.Number java.lang.Number = ((java.lang.Number)(primitive.java.lang.Object));\n                                return ((((number instanceof java.math.BigInteger) || (number instanceof java.lang.Long)) || (number instanceof java.lang.Integer)) || (number instanceof java.lang.Short)) || (number instanceof java.lang.Byte);\n                            } \n                            return false;\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685476/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685476/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"primitive"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[17],"tindex":"4d522105-3e37-11e6-a831-4dfbff1a9a23","method":{"position":"com.google.gson.Gson:468","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src) {\n    if (src != null) {\n        {\n            if (src != null) {\n                {\n                    if (src != null) {\n                        {\n                            if (src == null) {\n                                return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n                            } \n                            return toJsonTree(src, src.getClass());\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685476/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685476/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685476/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[18,19,20,21,22,23,24,25,26,27],"tindex":"4d524816-3e37-11e6-a831-83455ebafe7f","method":{"position":"com.google.gson.stream.JsonWriter:490","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685476/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            writeDeferredName();\n            java.lang.String java.lang.String = value.toString();\n            if ((!(boolean)) && (((string.equals(\"-Infinity\")) || (string.equals(\"Infinity\"))) || (string.equals(\"NaN\")))) {\n                throw new java.lang.IllegalArgumentException((\"Numeric values must be finite, but was \" + value));\n            } \n            beforeValue(false);\n            java.io.Writer.append(string);\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[28],"tindex":"4d526f27-3e37-11e6-a831-c7047bbcedbb","method":{"position":"com.google.gson.internal.bind.TypeAdapters:201","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685476/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:154","type":"CtUnaryOperatorImpl","sourcecode":"!create"},"failures":[29,30,31,32,33],"tindex":"4d526f28-3e37-11e6-a831-3d9a7fd4de4b","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:131","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedHashTreeMap.Node<K, V> find(K key, boolean create) {\n    if (!create) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685476/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (!create) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685476/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    java.util.Comparator<? super K> java.util.Comparator<? super K> = com.google.gson.internal.LinkedHashTreeMap.this.java.util.Comparator<? super K>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[] com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[] = com.google.gson.internal.LinkedHashTreeMap.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[];\n                    int int = com.google.gson.internal.LinkedHashTreeMap.secondaryHash(key.hashCode());\n                    int int = hash & ((table.int) - 1);\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = table[index];\n                    int int = 0;\n                    if (nearest != null) {\n                        @java.lang.SuppressWarnings(value = \"unchecked\")\n                        java.lang.Comparable<java.lang.Object> java.lang.Comparable<java.lang.Object> = comparator == (com.google.gson.internal.LinkedHashTreeMap.com.google.gson.internal.LinkedHashTreeMap.java.util.Comparator<java.lang.Comparable>) ? ((java.lang.Comparable<java.lang.Object>)(key)) : null;\n                        while (true) {\n                            comparison = comparableKey != null ? comparableKey.compareTo(nearest.K) : comparator.compare(key, nearest.K);\n                            if (comparison == 0) {\n                                return nearest;\n                            } \n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = comparison < 0 ? nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> : nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            if (child == null) {\n                                break;\n                            } \n                            nearest = child;\n                        }\n                    } \n                    if (!create) {\n                        return null;\n                    } \n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    if (nearest == null) {\n                        if ((comparator == (com.google.gson.internal.LinkedHashTreeMap.com.google.gson.internal.LinkedHashTreeMap.java.util.Comparator<java.lang.Comparable>)) && (!(key instanceof java.lang.Comparable))) {\n                            throw new java.lang.ClassCastException(((key.getClass().getName()) + \" is not Comparable\"));\n                        } \n                        created = new com.google.gson.internal.LinkedHashTreeMap.Node<K, V>(nearest , key , hash , header , header.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>);\n                        table[index] = created;\n                    } else {\n                        created = new com.google.gson.internal.LinkedHashTreeMap.Node<K, V>(nearest , key , hash , header , header.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>);\n                        if (comparison < 0) {\n                            nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = created;\n                        } else {\n                            nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = created;\n                        }\n                        rebalance(nearest, true);\n                    }\n                    if (((int)++) > (int)) {\n                        doubleCapacity();\n                    } \n                    (int)++;\n                    return created;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"create":"create"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[34,35,36,37,38,39],"tindex":"4d529639-3e37-11e6-a831-df676181dd71","method":{"position":"com.google.gson.FieldNamingPolicy:137","type":"CtMethodImpl","sourcecode":"private static java.lang.String upperCaseFirstLetter(java.lang.String name) {\n    if (name == null) {\n        {\n            if (name == null) {\n                {\n                    java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n                    int int = 0;\n                    char char = name.charAt(index);\n                    while (index < ((name.length()) - 1)) {\n                        if (java.lang.Character.isLetter(firstCharacter)) {\n                            break;\n                        } \n                        fieldNameBuilder.append(firstCharacter);\n                        firstCharacter = name.charAt((++index));\n                    }\n                    if (index == (name.length())) {\n                        return fieldNameBuilder.toString();\n                    } \n                    if (!(java.lang.Character.isUpperCase(firstCharacter))) {\n                        java.lang.String java.lang.String = com.google.gson.FieldNamingPolicy.modifyString(java.lang.Character.toUpperCase(firstCharacter), name, (++index));\n                        return fieldNameBuilder.append(modifiedTarget).toString();\n                    } else {\n                        return name;\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685476/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685476/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[],"tindex":"4d52e45a-3e37-11e6-a831-1f9c075c9fb6","method":{"position":"com.google.gson.Gson:468","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src) {\n    if (src != null) {\n        {\n            if (src != null) {\n                {\n                    if (src != null) {\n                        {\n                            if (src == null) {\n                                return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n                            } \n                            return toJsonTree(src, src.getClass());\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685476/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685476/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685476/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"4d52e45b-3e37-11e6-a831-0f45369ab984","method":{"position":"com.google.gson.Gson:871","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            if (json == null) {\n                {\n                    if (json == null) {\n                        return null;\n                    } \n                    return ((T)(fromJson(new com.google.gson.internal.bind.JsonTreeReader(json), typeOfT)));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685476/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685476/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:578","type":"CtBinaryOperatorImpl","sourcecode":"root == null"},"failures":[],"tindex":"4d52e45c-3e37-11e6-a831-4f4eb2529120","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:429","type":"CtMethodImpl","sourcecode":"private void rotateRight(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685476/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (root == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685476/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivotRight;\n                    if (pivotRight != null) {\n                        pivotRight.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n                    } \n                    replaceInParent(root, pivot);\n                    pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n                    root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot;\n                    root.int = (java.lang.Math.max((right != null ? right.int : 0), (pivotRight != null ? pivotRight.int : 0))) + 1;\n                    pivot.int = (java.lang.Math.max(root.int, (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:198","type":"CtBinaryOperatorImpl","sourcecode":"a instanceof java.lang.reflect.TypeVariable"},"failures":[],"tindex":"4d530b6d-3e37-11e6-a831-e7ff98d251b7","method":{"position":"com.google.gson.internal.$Gson$Types:151","type":"CtMethodImpl","sourcecode":"static boolean equal(java.lang.Object a, java.lang.Object b) {\n    return (a == b) || ((a != null) && (a.equals(b)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[],"tindex":"4d530b6e-3e37-11e6-a831-770a0b2b470c","method":{"position":"com.google.gson.FieldNamingPolicy:137","type":"CtMethodImpl","sourcecode":"private static java.lang.String upperCaseFirstLetter(java.lang.String name) {\n    if (name == null) {\n        {\n            if (name == null) {\n                {\n                    java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n                    int int = 0;\n                    char char = name.charAt(index);\n                    while (index < ((name.length()) - 1)) {\n                        if (java.lang.Character.isLetter(firstCharacter)) {\n                            break;\n                        } \n                        fieldNameBuilder.append(firstCharacter);\n                        firstCharacter = name.charAt((++index));\n                    }\n                    if (index == (name.length())) {\n                        return fieldNameBuilder.toString();\n                    } \n                    if (!(java.lang.Character.isUpperCase(firstCharacter))) {\n                        java.lang.String java.lang.String = com.google.gson.FieldNamingPolicy.modifyString(java.lang.Character.toUpperCase(firstCharacter), name, (++index));\n                        return fieldNameBuilder.append(modifiedTarget).toString();\n                    } else {\n                        return name;\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685476/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685476/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.TreeTypeAdapter:55","type":"CtInvocationImpl","sourcecode":"value.isJsonNull()"},"failures":[40,41,42,43,44,45,46,47,48,49,50,51,52,53,11,54,55,12,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,0,80,81,8,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,1,98,99,100,101,102,103,104,105,106],"tindex":"4d53327f-3e37-11e6-a831-336ac64491f2","method":{"position":"com.google.gson.JsonObject:53","type":"CtMethodImpl","sourcecode":"public void add(java.lang.String property, com.google.gson.JsonElement value) {\n    if (property == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685476/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (property == null) {\n                {\n                    if (value.isJsonNull()) {\n                        {\n                            if (value == null) {\n                                value = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n                            } \n                            com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.put(property, value);\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685476/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685476/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[],"tindex":"4d533280-3e37-11e6-a831-bf8aef45f4d0","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:86","type":"CtMethodImpl","sourcecode":"private com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField createBoundField(final com.google.gson.Gson context, final java.lang.reflect.Field field, final java.lang.String name, final com.google.gson.reflect.TypeToken<?> fieldType, boolean serialize, boolean deserialize) {\n    if (name == null) {\n        {\n            if (name == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685476/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    final boolean boolean = com.google.gson.internal.Primitives.isPrimitive(fieldType.getRawType());\n                    return new com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField(name, serialize, deserialize) {\n                        final com.google.gson.TypeAdapter<?> typeAdapter = getFieldAdapter(context, field, fieldType);\n\n                        @java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n                        @java.lang.Override\n                        void write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                            java.lang.Object java.lang.Object = field.get(value);\n                            com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n                            t.write(writer, fieldValue);\n                        }\n\n                        @java.lang.Override\n                        void read(com.google.gson.stream.JsonReader reader, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                            java.lang.Object java.lang.Object = com.google.gson.TypeAdapter<?>.read(reader);\n                            if ((fieldValue != null) || (!isPrimitive)) {\n                                field.set(value, fieldValue);\n                            } \n                        }\n\n                        public boolean writeField(java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                            if (!(boolean))\n                                return false;\n                            \n                            java.lang.Object java.lang.Object = field.get(value);\n                            return fieldValue != value;\n                        }\n                    };\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685476/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[],"tindex":"4d535891-3e37-11e6-a831-ab8ae51f8b39","method":{"position":"com.google.gson.Gson:552","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src != null) {\n        {\n            if (src != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685476/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            } else {\n                {\n                    if (src != null) {\n                        toJson(src, src.getClass(), writer);\n                    } else {\n                        toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull, writer);\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685476/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:501","type":"CtBinaryOperatorImpl","sourcecode":"typeAdapter instanceof com.google.gson.TypeAdapter<?>"},"failures":[107,108,109,110,111,112,87,113,114,115],"tindex":"4d535892-3e37-11e6-a831-8d81b831cbbb","method":{"position":"com.google.gson.GsonBuilder:493","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\npublic com.google.gson.GsonBuilder registerTypeHierarchyAdapter(java.lang.Class<?> baseType, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n        {\n            com.google.gson.internal.$Gson$Preconditions.checkArgument((((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) || (typeAdapter instanceof com.google.gson.TypeAdapter<?>)));\n            if ((typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)) {\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(0, com.google.gson.TreeTypeAdapter.newTypeHierarchyFactory(baseType, typeAdapter));\n            } \n            if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.internal.bind.TypeAdapters.newTypeHierarchyFactory(baseType, ((com.google.gson.TypeAdapter)(typeAdapter))));\n            } \n            return com.google.gson.GsonBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685476/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:298","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[116,117,118,119,120,121,122],"tindex":"4d541be3-3e37-11e6-a831-bf14200033f1","method":{"position":"com.google.gson.Gson:297","type":"CtMethodImpl","sourcecode":"private void checkValidFloatingPoint(double value) {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685476/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                throw new java.lang.IllegalArgumentException(((value + \" is not a valid double value as per JSON specification. To override this\") + \" behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.\"));\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:602","type":"CtUnaryOperatorImpl","sourcecode":"!(lenient)"},"failures":[123,124,125,126,42,44,127,128,129,130,131,132,133,134,135,18,136,137,138,139,140,19,141,142,143,144,145,48,146,147,49,148,149,150,51,52,151,20,152,153,21,154,34,155,156,157,35,158,159,160,53,11,54,55,12,56,57,58,161,162,163,59,60,164,165,61,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,38,181,182,39,183,184,185,186,187,188,3,189,4,190,5,191,192,193,194,195,196,197,198,199,63,22,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,64,229,230,231,232,233,234,235,236,237,238,66,67,68,239,240,241,69,242,107,243,244,245,246,247,248,249,250,251,252,253,254,255,108,256,257,258,259,260,261,262,263,264,265,116,266,267,117,268,269,118,270,271,119,272,120,273,274,275,276,277,278,279,280,281,282,283,28,284,285,286,287,121,288,289,290,291,292,70,71,72,73,74,293,75,76,294,295,296,297,298,299,300,301,302,303,304,305,306,6,7,307,308,8,82,309,310,311,312,313,314,315,316,317,318,17,319,320,23,321,322,323,324,325,326,327,328,329,109,110,111,330,24,84,331,332,25,333,334,335,26,27,9,10,336,337,112,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,87,113,385,88,386,387,388,389,390,391,91,392,92,393,394,395,396,397,398,399,400,401,402,122,403,404,115,405,406,407,408,409,410,94,101,411,412,413,414,415,102,103,416,417],"tindex":"4d541be4-3e37-11e6-a831-d9655bd1d8a1","method":{"position":"com.google.gson.stream.JsonWriter:234","type":"CtMethodImpl","sourcecode":"public final void setLenient(boolean lenient) {\n    if (!lenient) {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = lenient;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685476/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"lenient"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:278","type":"CtBinaryOperatorImpl","sourcecode":"node != null"},"failures":[],"tindex":"4d5442f5-3e37-11e6-a831-fd083c83ba35","method":{"position":"com.google.gson.internal.LinkedTreeMap:284","type":"CtMethodImpl","sourcecode":"private void replaceInParent(com.google.gson.internal.LinkedTreeMap.Node<K, V> node, com.google.gson.internal.LinkedTreeMap.Node<K, V> replacement) {\n    if (node != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685476/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (replacement != null) {\n                {\n                    if (replacement != null) {\n                        {\n                            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                            node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                            if (replacement != null) {\n                                replacement.com.google.gson.internal.LinkedTreeMap.Node<K, V> = parent;\n                            } \n                            if (parent != null) {\n                                if ((parent.com.google.gson.internal.LinkedTreeMap.Node<K, V>) == node) {\n                                    parent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                                } else {\n                                    assert (parent.com.google.gson.internal.LinkedTreeMap.Node<K, V>) == node;\n                                    parent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                                }\n                            } else {\n                                com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                            }\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685476/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685476/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"replacement"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[418,419,420,421,422,123,124,41,42,43,44,46,132,423,137,139,140,142,48,146,49,148,424,149,425,50,150,20,426,152,427,153,428,21,154,34,155,156,429,157,35,158,36,430,159,431,160,432,37,53,11,54,55,12,56,57,58,161,162,163,59,60,433,434,164,165,61,177,435,178,38,181,182,39,183,184,185,186,187,188,3,4,190,5,436,437,438,22,439,209,219,224,440,64,231,232,233,234,235,441,236,442,443,66,68,239,244,444,445,245,246,247,446,447,248,448,449,249,450,451,250,452,252,453,254,454,455,256,456,257,258,457,260,458,459,261,460,262,263,461,264,462,463,464,465,466,70,467,71,72,73,74,75,76,77,78,79,0,80,303,468,304,305,306,469,6,7,307,308,8,82,311,312,316,317,470,471,319,320,472,23,322,324,473,24,474,331,332,25,333,334,475,335,26,27,476,9,477,10,339,478,344,479,480,345,346,481,482,347,483,484,349,485,351,352,353,486,487,488,354,357,358,360,362,368,489,370,372,379,382,383,87,385,386,490,387,388,389,390,391,91,491,492,493,399,400,402,404,494,495,115,496,497,498],"tindex":"4d5442f6-3e37-11e6-a831-910ca9617e23","method":{"position":"com.google.gson.internal.Excluder:149","type":"CtMethodImpl","sourcecode":"public boolean excludeField(java.lang.reflect.Field field, boolean serialize) {\n    if (field.isSynthetic()) {\n        {\n            if (((int) & (field.getModifiers())) != 0) {\n                return true;\n            } \n            if (((double) != (com.google.gson.internal.Excluder.com.google.gson.internal.Excluder.double)) && (!(isValidVersion(field.getAnnotation(com.google.gson.annotations.Since.com.google.gson.annotations.Since.java.lang.Class), field.getAnnotation(com.google.gson.annotations.Until.com.google.gson.annotations.Until.java.lang.Class))))) {\n                return true;\n            } \n            if (field.isSynthetic()) {\n                return true;\n            } \n            if (boolean) {\n                com.google.gson.annotations.Expose com.google.gson.annotations.Expose = field.getAnnotation(com.google.gson.annotations.Expose.com.google.gson.annotations.Expose.java.lang.Class);\n                if ((annotation == null) || (serialize ? !(annotation.serialize()) : !(annotation.deserialize()))) {\n                    return true;\n                } \n            } \n            if ((!(boolean)) && (isInnerClass(field.getType()))) {\n                return true;\n            } \n            if (isAnonymousOrLocal(field.getType())) {\n                return true;\n            } \n            java.util.List<com.google.gson.ExclusionStrategy> java.util.List<com.google.gson.ExclusionStrategy> = serialize ? java.util.List<com.google.gson.ExclusionStrategy> : java.util.List<com.google.gson.ExclusionStrategy>;\n            if (!(list.isEmpty())) {\n                com.google.gson.FieldAttributes com.google.gson.FieldAttributes = new com.google.gson.FieldAttributes(field);\n                for (com.google.gson.ExclusionStrategy com.google.gson.ExclusionStrategy : list) {\n                    if (exclusionStrategy.shouldSkipField(fieldAttributes)) {\n                        return true;\n                    } \n                }\n            } \n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685476/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"field"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.DateTypeAdapter:86","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[22],"tindex":"4d546a07-3e37-11e6-a831-0b056f8131f1","method":{"position":"com.google.gson.internal.bind.DateTypeAdapter:85","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized void write(com.google.gson.stream.JsonWriter out, java.util.Date value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685476/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            java.lang.String java.lang.String = java.text.DateFormat.format(value);\n            out.value(dateFormatAsString);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[98],"tindex":"4d546a08-3e37-11e6-a831-3b7f016c5970","method":{"position":"com.google.gson.JsonObject:100","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Boolean value) {\n    if (property == null) {\n        {\n            add(property, createJsonElement(value));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685476/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[],"tindex":"4d546a09-3e37-11e6-a831-3fbb65586880","method":{"position":"com.google.gson.Gson:552","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src != null) {\n        {\n            if (src != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685476/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            } else {\n                {\n                    if (src != null) {\n                        toJson(src, src.getClass(), writer);\n                    } else {\n                        toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull, writer);\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685476/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"4d546a0a-3e37-11e6-a831-87d968bcf875","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:175","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685476/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685476/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (value == null) {\n                        return nullValue();\n                    } \n                    if (!(isLenient())) {\n                        double double = value.doubleValue();\n                        if ((java.lang.Double.isNaN(d)) || (java.lang.Double.isInfinite(d))) {\n                            throw new java.lang.IllegalArgumentException((\"JSON forbids NaN and infinities: \" + value));\n                        } \n                    } \n                    put(new com.google.gson.JsonPrimitive(value));\n                    return com.google.gson.internal.bind.JsonTreeWriter.this;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"4d54911b-3e37-11e6-a831-9f625ec20615","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:108","type":"CtMethodImpl","sourcecode":"public boolean writeField(java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685476/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    } else {\n        {\n            if (!(boolean))\n                return false;\n            \n            java.lang.Object java.lang.Object = field.get(value);\n            return fieldValue != value;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[],"tindex":"4d54911c-3e37-11e6-a831-198c1aa52f22","method":{"position":"com.google.gson.Gson:591","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    if (src != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685476/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            if (src == null) {\n                {\n                    com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = getAdapter(com.google.gson.reflect.TypeToken.get(typeOfSrc));\n                    boolean boolean = writer.isLenient();\n                    writer.setLenient(true);\n                    boolean boolean = writer.isHtmlSafe();\n                    writer.setHtmlSafe(boolean);\n                    boolean boolean = writer.getSerializeNulls();\n                    writer.setSerializeNulls(boolean);\n                    try {\n                        ((com.google.gson.TypeAdapter<java.lang.Object>)(adapter)).write(writer, src);\n                    } catch (java.io.IOException e) {\n                        throw new com.google.gson.JsonIOException(e);\n                    } finally {\n                        writer.setLenient(oldLenient);\n                        writer.setHtmlSafe(oldHtmlSafe);\n                        writer.setSerializeNulls(oldSerializeNulls);\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685476/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[125,282],"tindex":"4d54911d-3e37-11e6-a831-df18998cb0fa","method":{"position":"com.google.gson.Gson:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            out.value(value.toString());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685476/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:246","type":"CtVariableReadImpl","sourcecode":"unlink"},"failures":[499],"tindex":"4d54911e-3e37-11e6-a831-efbdaa7861e3","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:245","type":"CtMethodImpl","sourcecode":"void removeInternal(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node, boolean unlink) {\n    if (node != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685476/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (unlink) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685476/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (unlink) {\n                        node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                        node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                        node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                    } \n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    if ((left != null) && (right != null)) {\n                        com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = (left.int) > (right.int) ? left.last() : right.first();\n                        removeInternal(adjacent, false);\n                        int int = 0;\n                        left = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                        if (left != null) {\n                            leftHeight = left.int;\n                            adjacent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left;\n                            left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = adjacent;\n                            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                        } \n                        int int = 0;\n                        right = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                        if (right != null) {\n                            rightHeight = right.int;\n                            adjacent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                            right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = adjacent;\n                            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                        } \n                        adjacent.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                        replaceInParent(node, adjacent);\n                        return ;\n                    } else if (left != null) {\n                        replaceInParent(node, left);\n                        node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                    } else if (right != null) {\n                        replaceInParent(node, right);\n                        node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                    } else {\n                        replaceInParent(node, null);\n                    }\n                    rebalance(originalParent, false);\n                    (int)--;\n                    (int)++;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"unlink":"unlink"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:159","type":"CtBinaryOperatorImpl","sourcecode":"a == b"},"failures":[],"tindex":"4d54b82f-3e37-11e6-a831-955bbc297e43","method":{"position":"com.google.gson.internal.LinkedTreeMap:207","type":"CtMethodImpl","sourcecode":"private boolean equal(java.lang.Object a, java.lang.Object b) {\n    if (!(b instanceof java.lang.reflect.GenericArrayType)) {\n        {\n            if (a == b) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685476/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return (a == b) || ((a != null) && (a.equals(b)));\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685476/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"a","b":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:105","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonObject"},"failures":[],"tindex":"4d54df40-3e37-11e6-a831-a352df908d1a","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:804","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonObject) {\n        {\n            return (o instanceof java.util.Map.Entry) && ((findByEntry(((java.util.Map.Entry<?, ?>)(o)))) != null);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685476/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:180","type":"CtUnaryOperatorImpl","sourcecode":"!(b instanceof java.lang.reflect.GenericArrayType)"},"failures":[],"tindex":"4d54df41-3e37-11e6-a831-f3e7b5b94247","method":{"position":"com.google.gson.internal.LinkedTreeMap:207","type":"CtMethodImpl","sourcecode":"private boolean equal(java.lang.Object a, java.lang.Object b) {\n    if (!(b instanceof java.lang.reflect.GenericArrayType)) {\n        {\n            if (a == b) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685476/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return (a == b) || ((a != null) && (a.equals(b)));\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685476/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"4d54df42-3e37-11e6-a831-4998323c05c3","method":{"position":"com.google.gson.JsonObject:53","type":"CtMethodImpl","sourcecode":"public void add(java.lang.String property, com.google.gson.JsonElement value) {\n    if (property == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685476/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (property == null) {\n                {\n                    if (value.isJsonNull()) {\n                        {\n                            if (value == null) {\n                                value = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n                            } \n                            com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.put(property, value);\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685476/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685476/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"4d54df43-3e37-11e6-a831-873b656ed688","method":{"position":"com.google.gson.Gson:719","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.lang.String json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            if (json == null) {\n                return null;\n            } \n            java.io.StringReader java.io.StringReader = new java.io.StringReader(json);\n            T T = ((T)(fromJson(reader, typeOfT)));\n            return target;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685476/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[500,501],"tindex":"4d54df44-3e37-11e6-a831-271aa2f04d8d","method":{"position":"com.google.gson.TypeAdapter:268","type":"CtMethodImpl","sourcecode":"public final T fromJson(java.lang.String json) throws java.io.IOException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685476/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (json == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685476/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (json == null) {\n                        {\n                            return fromJson(new java.io.StringReader(json));\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685476/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.io.IOException();\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:578","type":"CtBinaryOperatorImpl","sourcecode":"root == null"},"failures":[],"tindex":"4d550655-3e37-11e6-a831-17848472e048","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:429","type":"CtMethodImpl","sourcecode":"private void rotateRight(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685476/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (root == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685476/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivotRight;\n                    if (pivotRight != null) {\n                        pivotRight.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n                    } \n                    replaceInParent(root, pivot);\n                    pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n                    root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot;\n                    root.int = (java.lang.Math.max((right != null ? right.int : 0), (pivotRight != null ? pivotRight.int : 0))) + 1;\n                    pivot.int = (java.lang.Math.max(root.int, (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:554","type":"CtBinaryOperatorImpl","sourcecode":"(datePattern != null) && (!(\"\".equals(datePattern.trim())))"},"failures":[192,197,198,217,220,225],"tindex":"4d552d66-3e37-11e6-a831-11d0fe89f22d","method":{"position":"com.google.gson.GsonBuilder:551","type":"CtMethodImpl","sourcecode":"private void addTypeAdaptersForDate(java.lang.String datePattern, int dateStyle, int timeStyle, java.util.List<com.google.gson.TypeAdapterFactory> factories) {\n    if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685476/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.DefaultDateTypeAdapter com.google.gson.DefaultDateTypeAdapter;\n            if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n                dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(datePattern);\n            } else if ((dateStyle != (java.text.DateFormat.java.text.DateFormat.int)) && (timeStyle != (java.text.DateFormat.java.text.DateFormat.int))) {\n                dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(dateStyle , timeStyle);\n            } else {\n                return ;\n            }\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.util.Date.java.util.Date.java.lang.Class), dateTypeAdapter));\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Timestamp.java.sql.Timestamp.java.lang.Class), dateTypeAdapter));\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Date.java.sql.Date.java.lang.Class), dateTypeAdapter));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"datePattern":"datePattern"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"4d5665e7-3e37-11e6-a831-41708bcee5a7","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:175","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685476/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685476/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (value == null) {\n                        return nullValue();\n                    } \n                    if (!(isLenient())) {\n                        double double = value.doubleValue();\n                        if ((java.lang.Double.isNaN(d)) || (java.lang.Double.isInfinite(d))) {\n                            throw new java.lang.IllegalArgumentException((\"JSON forbids NaN and infinities: \" + value));\n                        } \n                    } \n                    put(new com.google.gson.JsonPrimitive(value));\n                    return com.google.gson.internal.bind.JsonTreeWriter.this;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:578","type":"CtBinaryOperatorImpl","sourcecode":"root == null"},"failures":[],"tindex":"4d5665e8-3e37-11e6-a831-97a759c08f5c","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:626","type":"CtMethodImpl","sourcecode":"void reset(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685476/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            for (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root ; n != null ; n = n.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) {\n                n.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = stackTop;\n                stackTop = n;\n            }\n            com.google.gson.internal.LinkedHashTreeMap.AvlIterator.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = stackTop;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:92","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof java.util.Iterator"},"failures":[502,503,504],"tindex":"4d5665e9-3e37-11e6-a831-35bc5802fd85","method":{"position":"com.google.gson.JsonArray:329","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof java.util.Iterator) {\n        {\n            return (o == (com.google.gson.JsonArray.this)) || ((o instanceof com.google.gson.JsonArray) && (((com.google.gson.JsonArray)(o)).java.util.List<com.google.gson.JsonElement>.equals(java.util.List<com.google.gson.JsonElement>)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685476/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"4d568cfa-3e37-11e6-a831-57c37d72c05c","method":{"position":"com.google.gson.Gson:695","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.lang.String json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685476/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:113","type":"CtInvocationImpl","sourcecode":"primitive.isBoolean()"},"failures":[],"tindex":"4d568cfb-3e37-11e6-a831-d5cbc5f6ffad","method":{"position":"com.google.gson.JsonPrimitive:333","type":"CtMethodImpl","sourcecode":"private static boolean isIntegral(com.google.gson.JsonPrimitive primitive) {\n    if (primitive.isString()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685476/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (primitive.isBoolean()) {\n                {\n                    if (primitive.isNumber()) {\n                        {\n                            if ((primitive.java.lang.Object) instanceof java.lang.Number) {\n                                java.lang.Number java.lang.Number = ((java.lang.Number)(primitive.java.lang.Object));\n                                return ((((number instanceof java.math.BigInteger) || (number instanceof java.lang.Long)) || (number instanceof java.lang.Integer)) || (number instanceof java.lang.Short)) || (number instanceof java.lang.Byte);\n                            } \n                            return false;\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685476/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685476/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"primitive"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.JsonPrimitive:313","type":"CtBinaryOperatorImpl","sourcecode":"(value) == null"},"failures":[],"tindex":"4d568cfc-3e37-11e6-a831-3b2e68e0c3a0","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n@java.lang.Override\nvoid write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value == null) {\n        {\n            java.lang.Object java.lang.Object = field.get(value);\n            com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n            t.write(writer, fieldValue);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685476/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:103","type":"CtVariableReadImpl","sourcecode":"deserialization"},"failures":[147,424,149,425],"tindex":"4d568cfd-3e37-11e6-a831-e724165f1a68","method":{"position":"com.google.gson.internal.Excluder:96","type":"CtMethodImpl","sourcecode":"public com.google.gson.internal.Excluder withExclusionStrategy(com.google.gson.ExclusionStrategy exclusionStrategy, boolean serialization, boolean deserialization) {\n    if (deserialization) {\n        {\n            com.google.gson.internal.Excluder com.google.gson.internal.Excluder = clone();\n            if (serialization) {\n                result.java.util.List<com.google.gson.ExclusionStrategy> = new java.util.ArrayList<com.google.gson.ExclusionStrategy>(java.util.List<com.google.gson.ExclusionStrategy>);\n                result.java.util.List<com.google.gson.ExclusionStrategy>.add(exclusionStrategy);\n            } \n            if (deserialization) {\n                result.java.util.List<com.google.gson.ExclusionStrategy> = new java.util.ArrayList<com.google.gson.ExclusionStrategy>(java.util.List<com.google.gson.ExclusionStrategy>);\n                result.java.util.List<com.google.gson.ExclusionStrategy>.add(exclusionStrategy);\n            } \n            return result;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685476/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deserialization":"deserialization"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:430","type":"CtFieldReadImpl","sourcecode":"serializeNulls"},"failures":[129,132,19,48,146,49,149,51,11,54,55,12,56,57,58,59,60,61,174,230,251,73,74,293,75,76,8,82,317,318,319,320,23,321,322,323,324,84,87,88,92,393,394,399,400,401,402,122,403,404,417],"tindex":"4d56b40e-3e37-11e6-a831-694a36243a97","method":{"position":"com.google.gson.stream.JsonWriter:268","type":"CtMethodImpl","sourcecode":"public final void setSerializeNulls(boolean serializeNulls) {\n    if (serializeNulls) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685476/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = serializeNulls;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeNulls":"serializeNulls"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[],"tindex":"4d56b40f-3e37-11e6-a831-d9f496301e96","method":{"position":"com.google.gson.Gson:468","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src) {\n    if (src != null) {\n        {\n            if (src != null) {\n                {\n                    if (src != null) {\n                        {\n                            if (src == null) {\n                                return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n                            } \n                            return toJsonTree(src, src.getClass());\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685476/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685476/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685476/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"4d5a5d90-3e37-11e6-a831-9f512ee6e91f","method":{"position":"com.google.gson.JsonObject:53","type":"CtMethodImpl","sourcecode":"public void add(java.lang.String property, com.google.gson.JsonElement value) {\n    if (property == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685476/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (property == null) {\n                {\n                    if (value.isJsonNull()) {\n                        {\n                            if (value == null) {\n                                value = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n                            } \n                            com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.put(property, value);\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685476/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685476/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:305","type":"CtBinaryOperatorImpl","sourcecode":"node != null"},"failures":[],"tindex":"4d5a84a1-3e37-11e6-a831-eff93af2c49a","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:245","type":"CtMethodImpl","sourcecode":"void removeInternal(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node, boolean unlink) {\n    if (node != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685476/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (unlink) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685476/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (unlink) {\n                        node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                        node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                        node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                    } \n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    if ((left != null) && (right != null)) {\n                        com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = (left.int) > (right.int) ? left.last() : right.first();\n                        removeInternal(adjacent, false);\n                        int int = 0;\n                        left = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                        if (left != null) {\n                            leftHeight = left.int;\n                            adjacent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left;\n                            left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = adjacent;\n                            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                        } \n                        int int = 0;\n                        right = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                        if (right != null) {\n                            rightHeight = right.int;\n                            adjacent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                            right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = adjacent;\n                            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                        } \n                        adjacent.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                        replaceInParent(node, adjacent);\n                        return ;\n                    } else if (left != null) {\n                        replaceInParent(node, left);\n                        node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                    } else if (right != null) {\n                        replaceInParent(node, right);\n                        node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                    } else {\n                        replaceInParent(node, null);\n                    }\n                    rebalance(originalParent, false);\n                    (int)--;\n                    (int)++;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"node"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"4d5aabb2-3e37-11e6-a831-e5e02424ea61","method":{"position":"com.google.gson.Gson:576","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685476/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            try {\n                com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                toJson(src, typeOfSrc, jsonWriter);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:107","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.WildcardType"},"failures":[],"tindex":"4d5aabb3-3e37-11e6-a831-9904c3dc3f7c","method":{"position":"com.google.gson.internal.$Gson$Types:431","type":"CtMethodImpl","sourcecode":"private static void checkNotPrimitive(java.lang.reflect.Type type) {\n    com.google.gson.internal.$Gson$Preconditions.checkArgument(((!(type instanceof java.lang.Class<?>)) || (!(((java.lang.Class<?>)(type)).isPrimitive()))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"4d5aabb4-3e37-11e6-a831-73db3621d413","method":{"position":"com.google.gson.JsonParser:44","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement parse(java.lang.String json) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685476/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            return parse(new java.io.StringReader(json));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[158,22],"tindex":"4d5aabb5-3e37-11e6-a831-219557b64553","method":{"position":"com.google.gson.Gson:261","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685476/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            double double = value.doubleValue();\n            checkValidFloatingPoint(doubleValue);\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:332","type":"CtBinaryOperatorImpl","sourcecode":"(toResolve instanceof java.lang.Class) && (((java.lang.Class<?>)(toResolve)).isArray())"},"failures":[],"tindex":"4d5ad2c6-3e37-11e6-a831-b18ea0598402","method":{"position":"com.google.gson.internal.$Gson$Types:226","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type getGenericSupertype(java.lang.reflect.Type context, java.lang.Class<?> rawType, java.lang.Class<?> toResolve) {\n    if (toResolve == rawType) {\n        return context;\n    } \n    if (toResolve.isInterface()) {\n        java.lang.Class<?>[] java.lang.Class<?>[] = rawType.getInterfaces();\n        for (int int = 0, int int = interfaces.int ; i < length ; i++) {\n            if ((interfaces[i]) == toResolve) {\n                return rawType.getGenericInterfaces()[i];\n            } else if (toResolve.isAssignableFrom(interfaces[i])) {\n                return com.google.gson.internal.$Gson$Types.getGenericSupertype(rawType.getGenericInterfaces()[i], interfaces[i], toResolve);\n            } \n        }\n    } \n    if (!(rawType.isInterface())) {\n        while (rawType != (java.lang.Object.java.lang.Object.java.lang.Class)) {\n            java.lang.Class<?> java.lang.Class<?> = rawType.getSuperclass();\n            if (rawSupertype == toResolve) {\n                return rawType.getGenericSuperclass();\n            } else if (toResolve.isAssignableFrom(rawSupertype)) {\n                return com.google.gson.internal.$Gson$Types.getGenericSupertype(rawType.getGenericSuperclass(), rawSupertype, toResolve);\n            } \n            rawType = rawSupertype;\n        }\n    } \n    return toResolve;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"context"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1413","type":"CtVariableReadImpl","sourcecode":"throwOnEof"},"failures":[],"tindex":"4d5ad2c7-3e37-11e6-a831-3feb84361e42","method":{"position":"com.google.gson.stream.JsonReader:1331","type":"CtMethodImpl","sourcecode":"private int nextNonWhitespace(boolean throwOnEof) throws java.io.IOException {\n    if (throwOnEof) {\n        {\n            char[] char[] = com.google.gson.stream.JsonReader.this.char[];\n            int int = int;\n            int int = int;\n            while (true) {\n                if (p == l) {\n                    int = p;\n                    if (!(fillBuffer(1))) {\n                        break;\n                    } \n                    p = int;\n                    l = int;\n                } \n                int int = buffer[(p++)];\n                if (c == '\\n') {\n                    (int)++;\n                    int = p;\n                    continue;\n                } else if (((c == ' ') || (c == '\\r')) || (c == '\\t')) {\n                    continue;\n                } \n                if (c == '/') {\n                    int = p;\n                    if (p == l) {\n                        (int)--;\n                        boolean boolean = fillBuffer(2);\n                        (int)++;\n                        if (!charsLoaded) {\n                            return c;\n                        } \n                    } \n                    checkLenient();\n                    char char = buffer[int];\n                    switch (peek) {\n                        case '*' :\n                            (int)++;\n                            if (!(skipTo(\"*/\"))) {\n                                throw syntaxError(\"Unterminated comment\");\n                            } \n                            p = (int) + 2;\n                            l = int;\n                            continue;\n                        case '/' :\n                            (int)++;\n                            skipToEndOfLine();\n                            p = int;\n                            l = int;\n                            continue;\n                        default :\n                            return c;\n                    }\n                } else if (c == '#') {\n                    int = p;\n                    checkLenient();\n                    skipToEndOfLine();\n                    p = int;\n                    l = int;\n                } else {\n                    int = p;\n                    return c;\n                }\n            }\n            if (throwOnEof) {\n                throw new java.io.EOFException(((((\"End of input\" + \" at line \") + (getLineNumber())) + \" column \") + (getColumnNumber())));\n            } else {\n                return -1;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685476/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"throwOnEof":"throwOnEof"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:287","type":"CtBinaryOperatorImpl","sourcecode":"replacement != null"},"failures":[],"tindex":"4d5ad2c8-3e37-11e6-a831-db37095844a2","method":{"position":"com.google.gson.internal.LinkedTreeMap:284","type":"CtMethodImpl","sourcecode":"private void replaceInParent(com.google.gson.internal.LinkedTreeMap.Node<K, V> node, com.google.gson.internal.LinkedTreeMap.Node<K, V> replacement) {\n    if (node != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685476/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (replacement != null) {\n                {\n                    if (replacement != null) {\n                        {\n                            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                            node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                            if (replacement != null) {\n                                replacement.com.google.gson.internal.LinkedTreeMap.Node<K, V> = parent;\n                            } \n                            if (parent != null) {\n                                if ((parent.com.google.gson.internal.LinkedTreeMap.Node<K, V>) == node) {\n                                    parent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                                } else {\n                                    assert (parent.com.google.gson.internal.LinkedTreeMap.Node<K, V>) == node;\n                                    parent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                                }\n                            } else {\n                                com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                            }\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685476/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685476/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"replacement":"node"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:94","type":"CtBinaryOperatorImpl","sourcecode":"primitive instanceof java.lang.Character"},"failures":[],"tindex":"4d5af9d9-3e37-11e6-a831-8dc800d7e23a","method":{"position":"com.google.gson.JsonPrimitive:93","type":"CtMethodImpl","sourcecode":"void setValue(java.lang.Object primitive) {\n    if (primitive instanceof java.lang.Character) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685476/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (primitive instanceof java.lang.Character) {\n                char char = ((java.lang.Character)(primitive)).charValue();\n                com.google.gson.JsonPrimitive.this.java.lang.Object = java.lang.String.valueOf(c);\n            } else {\n                com.google.gson.internal.$Gson$Preconditions.checkArgument(((primitive instanceof java.lang.Number) || (com.google.gson.JsonPrimitive.isPrimitiveOrString(primitive))));\n                com.google.gson.JsonPrimitive.this.java.lang.Object = primitive;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"primitive"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[],"tindex":"4d5af9da-3e37-11e6-a831-d93adef179da","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:86","type":"CtMethodImpl","sourcecode":"private com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField createBoundField(final com.google.gson.Gson context, final java.lang.reflect.Field field, final java.lang.String name, final com.google.gson.reflect.TypeToken<?> fieldType, boolean serialize, boolean deserialize) {\n    if (name == null) {\n        {\n            if (name == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685476/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    final boolean boolean = com.google.gson.internal.Primitives.isPrimitive(fieldType.getRawType());\n                    return new com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField(name, serialize, deserialize) {\n                        final com.google.gson.TypeAdapter<?> typeAdapter = getFieldAdapter(context, field, fieldType);\n\n                        @java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n                        @java.lang.Override\n                        void write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                            java.lang.Object java.lang.Object = field.get(value);\n                            com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n                            t.write(writer, fieldValue);\n                        }\n\n                        @java.lang.Override\n                        void read(com.google.gson.stream.JsonReader reader, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                            java.lang.Object java.lang.Object = com.google.gson.TypeAdapter<?>.read(reader);\n                            if ((fieldValue != null) || (!isPrimitive)) {\n                                field.set(value, fieldValue);\n                            } \n                        }\n\n                        public boolean writeField(java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                            if (!(boolean))\n                                return false;\n                            \n                            java.lang.Object java.lang.Object = field.get(value);\n                            return fieldValue != value;\n                        }\n                    };\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685476/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:243","type":"CtBinaryOperatorImpl","sourcecode":"annotation != null"},"failures":[],"tindex":"4d5b20eb-3e37-11e6-a831-3b9578e25ef1","method":{"position":"com.google.gson.internal.Excluder:242","type":"CtMethodImpl","sourcecode":"private boolean isValidUntil(com.google.gson.annotations.Until annotation) {\n    if (annotation != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685476/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (annotation != null) {\n                double double = annotation.value();\n                if (annotationVersion <= (double)) {\n                    return false;\n                } \n            } \n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory:43","type":"CtBinaryOperatorImpl","sourcecode":"annotation == null"},"failures":[],"tindex":"4d5b20ec-3e37-11e6-a831-79648fbfd5ef","method":{"position":"com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory:50","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nstatic com.google.gson.TypeAdapter<?> getTypeAdapter(com.google.gson.internal.ConstructorConstructor constructorConstructor, com.google.gson.Gson gson, com.google.gson.reflect.TypeToken<?> fieldType, com.google.gson.annotations.JsonAdapter annotation) {\n    if (annotation == null) {\n        {\n            java.lang.Class<?> java.lang.Class<?> = annotation.value();\n            if (com.google.gson.TypeAdapter.com.google.gson.TypeAdapter.java.lang.Class.isAssignableFrom(value)) {\n                java.lang.Class<com.google.gson.TypeAdapter<?>> java.lang.Class<com.google.gson.TypeAdapter<?>> = ((java.lang.Class<com.google.gson.TypeAdapter<?>>)(value));\n                return constructorConstructor.get(com.google.gson.reflect.TypeToken.get(typeAdapter)).construct();\n            } \n            if (com.google.gson.TypeAdapterFactory.com.google.gson.TypeAdapterFactory.java.lang.Class.isAssignableFrom(value)) {\n                java.lang.Class<com.google.gson.TypeAdapterFactory> java.lang.Class<com.google.gson.TypeAdapterFactory> = ((java.lang.Class<com.google.gson.TypeAdapterFactory>)(value));\n                return constructorConstructor.get(com.google.gson.reflect.TypeToken.get(typeAdapterFactory)).construct().create(gson, fieldType);\n            } \n            throw new java.lang.IllegalArgumentException(\"@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.\");\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685476/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl","sourcecode":"in == null"},"failures":[],"tindex":"4d5b20ed-3e37-11e6-a831-b103d40dde29","method":{"position":"com.google.gson.TypeAdapter:254","type":"CtMethodImpl","sourcecode":"public final T fromJson(java.io.Reader in) throws java.io.IOException {\n    if (in == null) {\n        {\n            com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(in);\n            return read(reader);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685476/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"4d5b20ee-3e37-11e6-a831-e53aaeefb0e7","method":{"position":"com.google.gson.TypeAdapter:268","type":"CtMethodImpl","sourcecode":"public final T fromJson(java.lang.String json) throws java.io.IOException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685476/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (json == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685476/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (json == null) {\n                        {\n                            return fromJson(new java.io.StringReader(json));\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685476/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.io.IOException();\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"4d5b47ff-3e37-11e6-a831-dd519fac3ea3","method":{"position":"com.google.gson.DefaultDateTypeAdapter:77","type":"CtMethodImpl","sourcecode":"public java.util.Date deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT, com.google.gson.JsonDeserializationContext context) throws com.google.gson.JsonParseException {\n    if (json == null) {\n        {\n            if (!(json instanceof com.google.gson.JsonPrimitive)) {\n                throw new com.google.gson.JsonParseException(\"The date should be a string value\");\n            } \n            java.util.Date java.util.Date = deserializeToDate(json);\n            if (typeOfT == (java.util.Date.java.util.Date.java.lang.Class)) {\n                return date;\n            } else if (typeOfT == (java.sql.Timestamp.java.sql.Timestamp.java.lang.Class)) {\n                return new java.sql.Timestamp(date.getTime());\n            } else if (typeOfT == (java.sql.Date.java.sql.Date.java.lang.Class)) {\n                return new java.sql.Date(date.getTime());\n            } else {\n                throw new java.lang.IllegalArgumentException((((getClass()) + \" cannot deserialize to \") + typeOfT));\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685476/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"4d5b4800-3e37-11e6-a831-c58e98d0cf90","method":{"position":"com.google.gson.TypeAdapter:268","type":"CtMethodImpl","sourcecode":"public final T fromJson(java.lang.String json) throws java.io.IOException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685476/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (json == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685476/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (json == null) {\n                        {\n                            return fromJson(new java.io.StringReader(json));\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685476/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.io.IOException();\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:111","type":"CtInvocationImpl","sourcecode":"primitive.isString()"},"failures":[],"tindex":"4d5b4801-3e37-11e6-a831-2fca9b3bcf4d","method":{"position":"com.google.gson.JsonPrimitive:333","type":"CtMethodImpl","sourcecode":"private static boolean isIntegral(com.google.gson.JsonPrimitive primitive) {\n    if (primitive.isString()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685476/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (primitive.isBoolean()) {\n                {\n                    if (primitive.isNumber()) {\n                        {\n                            if ((primitive.java.lang.Object) instanceof java.lang.Number) {\n                                java.lang.Number java.lang.Number = ((java.lang.Number)(primitive.java.lang.Object));\n                                return ((((number instanceof java.math.BigInteger) || (number instanceof java.lang.Long)) || (number instanceof java.lang.Integer)) || (number instanceof java.lang.Short)) || (number instanceof java.lang.Byte);\n                            } \n                            return false;\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685476/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685476/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"primitive"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:462","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[],"tindex":"4d5b6f12-3e37-11e6-a831-ef14988e37ca","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:162","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(double value) throws java.io.IOException {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685476/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if ((!(isLenient())) && ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value)))) {\n                throw new java.lang.IllegalArgumentException((\"JSON forbids NaN and infinities: \" + value));\n            } \n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:154","type":"CtUnaryOperatorImpl","sourcecode":"!create"},"failures":[],"tindex":"4d5b6f13-3e37-11e6-a831-4b9254e552cb","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:131","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedHashTreeMap.Node<K, V> find(K key, boolean create) {\n    if (!create) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685476/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (!create) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685476/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    java.util.Comparator<? super K> java.util.Comparator<? super K> = com.google.gson.internal.LinkedHashTreeMap.this.java.util.Comparator<? super K>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[] com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[] = com.google.gson.internal.LinkedHashTreeMap.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[];\n                    int int = com.google.gson.internal.LinkedHashTreeMap.secondaryHash(key.hashCode());\n                    int int = hash & ((table.int) - 1);\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = table[index];\n                    int int = 0;\n                    if (nearest != null) {\n                        @java.lang.SuppressWarnings(value = \"unchecked\")\n                        java.lang.Comparable<java.lang.Object> java.lang.Comparable<java.lang.Object> = comparator == (com.google.gson.internal.LinkedHashTreeMap.com.google.gson.internal.LinkedHashTreeMap.java.util.Comparator<java.lang.Comparable>) ? ((java.lang.Comparable<java.lang.Object>)(key)) : null;\n                        while (true) {\n                            comparison = comparableKey != null ? comparableKey.compareTo(nearest.K) : comparator.compare(key, nearest.K);\n                            if (comparison == 0) {\n                                return nearest;\n                            } \n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = comparison < 0 ? nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> : nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            if (child == null) {\n                                break;\n                            } \n                            nearest = child;\n                        }\n                    } \n                    if (!create) {\n                        return null;\n                    } \n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    if (nearest == null) {\n                        if ((comparator == (com.google.gson.internal.LinkedHashTreeMap.com.google.gson.internal.LinkedHashTreeMap.java.util.Comparator<java.lang.Comparable>)) && (!(key instanceof java.lang.Comparable))) {\n                            throw new java.lang.ClassCastException(((key.getClass().getName()) + \" is not Comparable\"));\n                        } \n                        created = new com.google.gson.internal.LinkedHashTreeMap.Node<K, V>(nearest , key , hash , header , header.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>);\n                        table[index] = created;\n                    } else {\n                        created = new com.google.gson.internal.LinkedHashTreeMap.Node<K, V>(nearest , key , hash , header , header.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>);\n                        if (comparison < 0) {\n                            nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = created;\n                        } else {\n                            nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = created;\n                        }\n                        rebalance(nearest, true);\n                    }\n                    if (((int)++) > (int)) {\n                        doubleCapacity();\n                    } \n                    (int)++;\n                    return created;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"create":"create"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:459","type":"CtBinaryOperatorImpl","sourcecode":"typeAdapter instanceof com.google.gson.TypeAdapter<?>"},"failures":[],"tindex":"4d5b9624-3e37-11e6-a831-f3d6b17761c5","method":{"position":"com.google.gson.TreeTypeAdapter:84","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newFactory(com.google.gson.reflect.TypeToken<?> exactType, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685476/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , exactType , false , null);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:618","type":"CtBinaryOperatorImpl","sourcecode":"(c == 'f') || (c == 'F')"},"failures":[],"tindex":"4d5b9625-3e37-11e6-a831-231483bb5c1a","method":{"position":"com.google.gson.stream.JsonReader:755","type":"CtMethodImpl","sourcecode":"private boolean isLiteral(char c) throws java.io.IOException {\n    if ((c == 'f') || (c == 'F')) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685476/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            switch (c) {\n                case '/' :\n                case '\\\\' :\n                case ';' :\n                case '#' :\n                case '=' :\n                    checkLenient();\n                case '{' :\n                case '}' :\n                case '[' :\n                case ']' :\n                case ':' :\n                case ',' :\n                case ' ' :\n                case '\\t' :\n                case '\\f' :\n                case '\\r' :\n                case '\\n' :\n                    return false;\n                default :\n                    return true;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"c"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":71,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
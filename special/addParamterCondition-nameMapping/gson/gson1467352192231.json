{"failureDictionary":{"com.google.gson.JsonStreamParserTest.testNoSideEffectForHasNext":271,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":373,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":162,"com.google.gson.functional.StringTest.testStringValueDeserialization":625,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":70,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":577,"com.google.gson.JsonPrimitiveTest.testDeepCopy":334,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":678,"com.google.gson.internal.LinkedHashTreeMapTest.testIterationOrder":740,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":550,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":30,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":440,"com.google.gson.internal.bind.JsonTreeWriterTest.testPrematureClose":297,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":376,"com.google.gson.MixedStreamTest.testWriteLenient":405,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":603,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":231,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":353,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":173,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":180,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":602,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":582,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":9,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":22,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":244,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":557,"com.google.gson.internal.bind.JsonElementReaderTest.testStrictNansAndInfinities":290,"com.google.gson.JsonObjectTest.testAddingNullPropertyValue":726,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":435,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":662,"com.google.gson.JsonParserTest.testParseUnquotedMultiWordStringFails":278,"com.google.gson.functional.ObjectTest.testSingletonLists":142,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":10,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":229,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":163,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":545,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":710,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":400,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":172,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":656,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":468,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":613,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":406,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":584,"com.google.gson.internal.bind.JsonElementReaderTest.testNulls":735,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":448,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":633,"com.google.gson.DefaultDateTypeAdapterTest.testDatePattern":263,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":345,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":93,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":578,"com.google.gson.internal.LinkedTreeMapTest.testContainsNullKeyIsAlwaysFalse":722,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":510,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":2,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":438,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":57,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":509,"com.google.gson.functional.EnumTest.testEnumCaseMapping":477,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":161,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":414,"com.google.gson.functional.JsonTreeTest.testToJsonTree":342,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":539,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":98,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":393,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":352,"com.google.gson.JsonObjectTest.testEqualsNonEmptyObject":727,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreBehindInVersion":746,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":391,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":536,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":704,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":485,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":546,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":676,"com.google.gson.internal.LinkedHashTreeMapTest.testAvlBuilder":732,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":206,"com.google.gson.internal.LinkedTreeMapTest.testLargeSetOfRandomKeys":717,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":648,"com.google.gson.functional.ObjectTest.testNullDeserialization":619,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":183,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":631,"com.google.gson.internal.bind.JsonElementReaderTest.testNestedObjects":725,"com.google.gson.JsonPrimitiveTest.testParsingStringAsBoolean":323,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":609,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":131,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":314,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":551,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":149,"com.google.gson.internal.bind.JsonElementReaderTest.testLenientNansAndInfinities":287,"com.google.gson.internal.LinkedTreeMapTest.testContainsNonComparableKeyReturnsFalse":718,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":55,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":250,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":616,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":310,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":242,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":240,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":386,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":89,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":591,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":590,"com.google.gson.JsonParserTest.testParseString":280,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":467,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":124,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":705,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":118,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":390,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":595,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":42,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":155,"com.google.gson.DefaultDateTypeAdapterTest.testFormatUsesDefaultTimezone":267,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":228,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":565,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":377,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":504,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":575,"com.google.gson.functional.StreamingTypeAdaptersTest.testFromJsonTree":365,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":84,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":675,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":384,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":299,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":469,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":518,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":125,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":661,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":576,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":38,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":154,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":8,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":12,"com.google.gson.JsonPrimitiveTest.testEqualsAcrossTypes":338,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":606,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":34,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":110,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":514,"com.google.gson.internal.LinkedHashTreeMapTest.testEmptyStringValues":739,"com.google.gson.metrics.PerformanceTest.testDummy":472,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":423,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":521,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":91,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":463,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":395,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":519,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":637,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":230,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":369,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":224,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":460,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":249,"com.google.gson.JsonArrayTest.testEqualsNonEmptyArray":734,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":658,"com.google.gson.functional.CollectionTest.testSetDeserialization":652,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":245,"com.google.gson.functional.EnumTest.testEnumSet":16,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":146,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":635,"com.google.gson.JsonStreamParserTest.testIterator":272,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":568,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":530,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":394,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithNestedWildcards":408,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":500,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":671,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":150,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":419,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":529,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":579,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":462,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":585,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":52,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":642,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":128,"com.google.gson.internal.LinkedHashTreeMapTest.testContainsNullKeyIsAlwaysFalse":742,"com.google.gson.functional.MapTest.testHashMapDeserialization":495,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":548,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":646,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":681,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":13,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":443,"com.google.gson.MixedStreamTest.testReadNulls":692,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":77,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":159,"com.google.gson.DefaultDateTypeAdapterTest.testParsingDatesFormattedWithSystemLocale":265,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":382,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":641,"com.google.gson.functional.MapTest.testSortedMap":512,"com.google.gson.functional.MapTest.testMapSerialization":508,"com.google.gson.internal.bind.JsonElementReaderTest.testObject":294,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":442,"com.google.gson.JsonPrimitiveTest.testByteEqualsShort":335,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":367,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":573,"com.google.gson.JsonPrimitiveTest.testByteEqualsBigInteger":324,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":487,"com.google.gson.functional.MapTest.testSerializeMaps":61,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":197,"com.google.gson.functional.MapTest.testComplexKeysSerialization":515,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":634,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":298,"com.google.gson.JsonPrimitiveTest.testLongEqualsBigInteger":326,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":344,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":48,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":185,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":476,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":212,"com.google.gson.internal.LinkedTreeMapTest.testRemoveRootDoesNotDoubleUnlink":724,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":433,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":639,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":475,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":96,"com.google.gson.internal.bind.JsonElementReaderTest.testWrongType":291,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":311,"com.google.gson.internal.LinkedHashTreeMapTest.testDoubleCapacity":733,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":31,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":618,"com.google.gson.functional.MapTest.testStringKeyDeserialization":517,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithBasicWildcards":410,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":489,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":253,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":134,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":520,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":554,"com.google.gson.functional.PrettyPrintingTest.testMap":94,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":189,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":549,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":175,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":160,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":215,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":446,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":416,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":490,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":706,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":167,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":626,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":0,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":221,"com.google.gson.functional.MapTest.testMapSerializationEmpty":516,"com.google.gson.functional.CollectionTest.testQueueSerialization":647,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":569,"com.google.gson.functional.MapTest.testMapOfMapSerialization":64,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":116,"com.google.gson.JavaSerializationTest.testMapIsSerializable":708,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":677,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":650,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":27,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":121,"com.google.gson.internal.LinkedTreeMapTest.testPutNonComparableKeyFails":721,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":401,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictBoxedNansAndInfinities":303,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":164,"com.google.gson.functional.FieldNamingTest.testIdentity":198,"com.google.gson.JsonStreamParserTest.testCallingNextBeyondAvailableInput":269,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":396,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":49,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":620,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":33,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":141,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":341,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":355,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":540,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":3,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":165,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":247,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":119,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":478,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":683,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":7,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":673,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":26,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":222,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":684,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":494,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":133,"com.google.gson.functional.MapTest.testMapSubclassSerialization":497,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":15,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":535,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":636,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":191,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":199,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":563,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":690,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":378,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":600,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":667,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":638,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":528,"com.google.gson.functional.EnumTest.testEnumSubclass":19,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":122,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":417,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":612,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":106,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":246,"com.google.gson.internal.bind.JsonElementReaderTest.testArray":288,"com.google.gson.GsonBuilderTest.testRegisterTypeAdapterForCoreType":711,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":581,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":252,"com.google.gson.JsonPrimitiveTest.testShortEqualsInteger":330,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":430,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":541,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":29,"com.google.gson.JsonPrimitiveTest.testByteEqualsLong":317,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":566,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":479,"com.google.gson.stream.JsonWriterTest.testNullName":713,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":348,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":6,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":484,"com.google.gson.internal.LinkedTreeMapTest.testEqualsAndHashCode":723,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":570,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":608,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":117,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":426,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":235,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":601,"com.google.gson.MixedStreamTest.testWriteNulls":403,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":427,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":483,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":659,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":40,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":184,"com.google.gson.CommentsTest.testParseComments":471,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":526,"com.google.gson.JsonObjectTest.testReadPropertyWithEmptyStringName":309,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":143,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":256,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":663,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":103,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":488,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":580,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":366,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":65,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":166,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":429,"com.google.gson.MixedStreamTest.testReadInvalidState":688,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":241,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":534,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":132,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":237,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":138,"com.google.gson.internal.bind.JsonElementReaderTest.testEarlyClose":289,"com.google.gson.JsonParserTest.testParseMixedArray":282,"com.google.gson.DefaultDateTypeAdapterTest.testParsingDatesFormattedWithUsLocale":268,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":109,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":731,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":491,"com.google.gson.JsonPrimitiveTest.testDoubleEqualsBigDecimal":319,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithTypeParameters":409,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":100,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAheadInVersion":744,"com.google.gson.internal.bind.JsonTreeWriterTest.testWriteAfterClose":304,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":113,"com.google.gson.JsonArrayTest.testRemove":1,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":25,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":129,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":464,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":482,"com.google.gson.functional.MapTest.testMapDeserialization":503,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":223,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":99,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":343,"com.google.gson.internal.bind.JsonElementReaderTest.testStringsFromNumbers":293,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":322,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":453,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":74,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":502,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":208,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":205,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":434,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeMap":729,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":60,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":474,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":666,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":148,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":156,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":79,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":192,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":349,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":216,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":436,"com.google.gson.internal.bind.JsonElementReaderTest.testNumbersFromStrings":292,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":28,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":85,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":95,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":511,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":274,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":239,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":538,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":399,"com.google.gson.functional.PrimitiveTest.testShortSerialization":589,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":210,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":583,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":59,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictNansAndInfinities":301,"com.google.gson.JsonParserTest.testParseEmptyString":283,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":564,"com.google.gson.internal.LinkedTreeMapTest.testIterationOrder":720,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":126,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":547,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":672,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":194,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":18,"com.google.gson.internal.LinkedTreeMapTest.testEmptyStringValues":719,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":643,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":14,"com.google.gson.internal.LinkedTreeMapTest.testPutOverrides":715,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":498,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":560,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":135,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":375,"com.google.gson.DefaultDateTypeAdapterTest.testFormattingInFr":266,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":379,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":307,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":456,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":466,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":305,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":695,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":598,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":594,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":701,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":32,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":157,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":397,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":524,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":200,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":213,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":308,"com.google.gson.JsonPrimitiveTest.testStringsAndChar":331,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":587,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":361,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":254,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":567,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":623,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":605,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":21,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":81,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":170,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":178,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":669,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":187,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":398,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":204,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":209,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":227,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":553,"com.google.gson.internal.LinkedHashTreeMapTest.testClear":737,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":218,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":383,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":211,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":680,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":350,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":644,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":542,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":364,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":120,"com.google.gson.JsonArrayTest.testSet":276,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":136,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":71,"com.google.gson.JsonPrimitiveTest.testEquals":333,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":17,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":207,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":374,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":368,"com.google.gson.functional.MapTest.testGeneralMapField":68,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":604,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":37,"com.google.gson.internal.bind.JsonElementReaderTest.testNumbers":295,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":597,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":45,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":188,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":248,"com.google.gson.DefaultDateTypeAdapterTest.testDateSerialization":262,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":232,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":513,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":88,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":108,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":385,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":127,"com.google.gson.ObjectTypeAdapterTest.testDeserializeNullValue":411,"com.google.gson.MixedStreamTest.testReadMixedStreamed":694,"com.google.gson.JsonObjectTest.testDeepCopy":312,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":114,"com.google.gson.internal.bind.JsonElementReaderTest.testBooleans":285,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":505,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":670,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":4,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":458,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":653,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":422,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":571,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":58,"com.google.gson.internal.bind.JsonTreeWriterTest.testEmptyWriter":302,"com.google.gson.JavaSerializationTest.testNumberIsSerializable":707,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":461,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":226,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":506,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":92,"com.google.gson.JsonArrayTest.testDeepCopy":277,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":496,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":137,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":257,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":105,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":202,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":561,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":306,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":225,"com.google.gson.internal.LinkedHashTreeMapTest.testEqualsAndHashCode":743,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":660,"com.google.gson.JsonPrimitiveTest.testEqualsDoesNotEquateStringAndNonStringTypes":332,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":50,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":649,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":664,"com.google.gson.JsonPrimitiveTest.testFloatEqualsDouble":325,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":455,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":402,"com.google.gson.functional.ObjectTest.testNestedDeserialization":624,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":153,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":346,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":444,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":347,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":56,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":596,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":102,"com.google.gson.JsonParserTest.testParseUnquotedStringArrayFails":284,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":424,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":507,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":627,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":527,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":130,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":80,"com.google.gson.JavaSerializationTest.testListIsSerializable":709,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":357,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":380,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":655,"com.google.gson.functional.ObjectTest.testNullSerialization":610,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":83,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerialization":261,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":537,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":499,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":67,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":107,"com.google.gson.functional.MapTest.testInterfaceTypeMap":66,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":486,"com.google.gson.stream.JsonWriterTest.testNonFiniteBoxedDoubles":697,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":190,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":522,"com.google.gson.JsonObjectTest.testAddingNullOrEmptyPropertyName":728,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":543,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":20,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":700,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":193,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":432,"com.google.gson.MixedStreamTest.testReadClosed":689,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":214,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":54,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":555,"com.google.gson.JsonPrimitiveTest.testIntegerEqualsLong":328,"com.google.gson.MixedStreamTest.testWriteClosed":693,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":177,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":445,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":144,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":523,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":685,"com.google.gson.internal.LinkedHashTreeMapTest.testPutNonComparableKeyFails":741,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":531,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":73,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":363,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":101,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":158,"com.google.gson.LongSerializationPolicyTest.testStringLongSerialization":260,"com.google.gson.stream.JsonWriterTest.testLongs":407,"com.google.gson.JsonPrimitiveTest.testShortEqualsLong":321,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":238,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":75,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":145,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":176,"com.google.gson.JsonPrimitiveTest.testShortEqualsBigInteger":316,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":450,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeWithCustomTypeAdapter":712,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":574,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":203,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":431,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":179,"com.google.gson.DefaultDateTypeAdapterTest.testFormattingInEnUs":264,"com.google.gson.internal.bind.JsonElementReaderTest.testSkipValue":286,"com.google.gson.internal.bind.JsonElementReaderTest.testStrings":296,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":465,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":339,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":23,"com.google.gson.JsonPrimitiveTest.testParsingStringAsNumber":337,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":599,"com.google.gson.stream.JsonWriterTest.testNumbers":698,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":112,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":340,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":668,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":35,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":186,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":362,"com.google.gson.functional.CollectionTest.testQueueDeserialization":657,"com.google.gson.internal.LinkedHashTreeMapTest.testPutOverrides":736,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":115,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":572,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":630,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":441,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":236,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":451,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":62,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":617,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":220,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":90,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":622,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":174,"com.google.gson.functional.MapTest.testRawMapSerialization":69,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":687,"com.google.gson.JsonParserTest.testParseReader":279,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":654,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":679,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":702,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":78,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":151,"com.google.gson.JsonPrimitiveTest.testExponential":336,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":370,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":454,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":273,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":39,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":171,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":275,"com.google.gson.functional.PrimitiveTest.testByteSerialization":588,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":371,"com.google.gson.ObjectTypeAdapterTest.testSerialize":696,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":86,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromRawTypes":413,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":552,"com.google.gson.JsonPrimitiveTest.testEqualsIntegerAndBigInteger":318,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":354,"com.google.gson.JsonPrimitiveTest.testFloatEqualsBigDecimal":315,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":44,"com.google.gson.JsonPrimitiveTest.testByteEqualsInteger":327,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":195,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":418,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":532,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":628,"com.google.gson.functional.MapTest.testMapWithQuotes":63,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":388,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":558,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":629,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":251,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":457,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":259,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":76,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":592,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":387,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":243,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":381,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":525,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":621,"com.google.gson.internal.LinkedHashTreeMapTest.testDoubleCapacityAllNodesOnLeft":730,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":437,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":123,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":217,"com.google.gson.functional.ObjectTest.testEmptyStringDeserialization":611,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":47,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":607,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":233,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":389,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":201,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":219,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":356,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":586,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":447,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":651,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":481,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":36,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":234,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":358,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":82,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":51,"com.google.gson.JsonPrimitiveTest.testIntegerEqualsBigInteger":329,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":452,"com.google.gson.internal.LinkedHashTreeMapTest.testContainsNonComparableKeyReturnsFalse":738,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":473,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAtSameVersion":745,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":640,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":359,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":544,"com.google.gson.internal.LinkedHashTreeMapTest.testRemoveRootDoesNotDoubleUnlink":404,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":258,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":699,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":614,"com.google.gson.functional.ObjectTest.testNestedSerialization":152,"com.google.gson.JsonObjectTest.testAddingStringProperties":313,"com.google.gson.internal.LinkedTreeMapTest.testClear":716,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":72,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":87,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":111,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":632,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":104,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":428,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":139,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":360,"com.google.gson.JsonParserTest.testParseUnquotedSingleWordStringFails":281,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":5,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":470,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":147,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":492,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":593,"com.google.gson.JsonPrimitiveTest.testBoolean":320,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":351,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":421,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":674,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":415,"com.google.gson.GsonBuilderTest.testCreatingMoreThanOnce":420,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":556,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":615,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":665,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":449,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":703,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":168,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":43,"com.google.gson.functional.CollectionTest.testSetSerialization":181,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":686,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":97,"com.google.gson.functional.StringTest.testStringValueSerialization":169,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":255,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":140,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":24,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":425,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":645,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":480,"com.google.gson.MixedStreamTest.testWriteInvalidState":691,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":439,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":559,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":46,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":562,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":11,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":392,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":196,"com.google.gson.ObjectTypeAdapterTest.testDeserialize":412,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":182,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":714,"com.google.gson.JsonStreamParserTest.testParseTwoStrings":270,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":493,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":53,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":300,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":533,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":682,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":372,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":501,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":41,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":459},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"a14db80c-3f4f-11e6-86bb-4d30a82d5f89","method":{"position":"com.google.gson.Gson:136","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        {\n            if (src == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350309315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return toJsonTree(src, typeOfSrc);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350309315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl"},"failures":[0],"tindex":"a14e2d3d-3f4f-11e6-86bb-09198e7107f8","method":{"position":"com.google.gson.JsonObject:100","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Boolean value) {\n    if (property == null) {\n        {\n            add(property, createJsonElement(value));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350309315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:125","type":"CtBinaryOperatorImpl"},"failures":[1],"tindex":"a14e2d3e-3f4f-11e6-86bb-957438c0d811","method":{"position":"com.google.gson.JsonArray:92","type":"CtMethodImpl","sourcecode":"public boolean remove(com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonObject) {\n        {\n            return java.util.List<com.google.gson.JsonElement>.remove(element);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350309315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:92","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"a14e2d3f-3f4f-11e6-86bb-05dff47066ba","method":{"position":"com.google.gson.reflect.TypeToken:283","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic final boolean equals(java.lang.Object o) {\n    if (o instanceof java.util.Iterator) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350309315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (o instanceof com.google.gson.reflect.TypeToken<?>) && (com.google.gson.internal.$Gson$Types.equals(java.lang.reflect.Type, ((com.google.gson.reflect.TypeToken<?>)(o)).java.lang.reflect.Type));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl"},"failures":[2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259],"tindex":"a14e5350-3f4f-11e6-86bb-75d32bbaa301","method":{"position":"com.google.gson.Gson:510","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src) {\n    if (src == null) {\n        {\n            if (src == null) {\n                return toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull);\n            } \n            return toJson(src, src.getClass());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350309315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:94","type":"CtBinaryOperatorImpl"},"failures":[260,261,262,263,264,265,266,267,268,269,270,271,272,2,3,273,274,275,276,277,1,278,279,280,8,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,0,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,18,339,52,54,55,57,340,60,341,342,343,66,68,344,70,345,346,347,348,349,350,351,352,76,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,138,368,139,369,370,371,372,373,374,171,172,375,188,190,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,231,234,239,393,247,251,394,395,396,397,252,253,254,398,255,256,257,399,258,400,401,259,402,403],"tindex":"a14e7a61-3f4f-11e6-86bb-512b06500189","method":{"position":"com.google.gson.JsonPrimitive:93","type":"CtMethodImpl","sourcecode":"void setValue(java.lang.Object primitive) {\n    if (primitive.isBoolean()) {\n        {\n            if (primitive instanceof java.lang.Character) {\n                {\n                    if (primitive instanceof java.lang.Character) {\n                        char char = ((java.lang.Character)(primitive)).charValue();\n                        com.google.gson.JsonPrimitive.this.java.lang.Object = java.lang.String.valueOf(c);\n                    } else {\n                        com.google.gson.internal.$Gson$Preconditions.checkArgument(((primitive instanceof java.lang.Number) || (com.google.gson.JsonPrimitive.isPrimitiveOrString(primitive))));\n                        com.google.gson.JsonPrimitive.this.java.lang.Object = primitive;\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350309315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350309315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"primitive"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:109","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"a14ea172-3f4f-11e6-86bb-cb7648b42675","method":{"position":"com.google.gson.internal.LinkedTreeMap:605","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonNull) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350309315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof java.util.Iterator) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350309315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (o instanceof com.google.gson.JsonPrimitive) {\n                        {\n                            return containsKey(o);\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350309315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:313","type":"CtBinaryOperatorImpl"},"failures":[371,372],"tindex":"a14ea173-3f4f-11e6-86bb-7bddbc0278ae","method":{"position":"com.google.gson.JsonObject:121","type":"CtMethodImpl","sourcecode":"private com.google.gson.JsonElement createJsonElement(java.lang.Object value) {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350309315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350309315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (value == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350309315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            return value == null ? com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull : new com.google.gson.JsonPrimitive(value);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:305","type":"CtBinaryOperatorImpl"},"failures":[404],"tindex":"a14ec884-3f4f-11e6-86bb-a389670e988b","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:245","type":"CtMethodImpl","sourcecode":"void removeInternal(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node, boolean unlink) {\n    if (unlink) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350309315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (node != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350309315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (unlink) {\n                        node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                        node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                        node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                    } \n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    if ((left != null) && (right != null)) {\n                        com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = (left.int) > (right.int) ? left.last() : right.first();\n                        removeInternal(adjacent, false);\n                        int int = 0;\n                        left = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                        if (left != null) {\n                            leftHeight = left.int;\n                            adjacent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left;\n                            left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = adjacent;\n                            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                        } \n                        int int = 0;\n                        right = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                        if (right != null) {\n                            rightHeight = right.int;\n                            adjacent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                            right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = adjacent;\n                            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                        } \n                        adjacent.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                        replaceInParent(node, adjacent);\n                        return ;\n                    } else if (left != null) {\n                        replaceInParent(node, left);\n                        node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                    } else if (right != null) {\n                        replaceInParent(node, right);\n                        node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                    } else {\n                        replaceInParent(node, null);\n                    }\n                    rebalance(originalParent, false);\n                    (int)--;\n                    (int)++;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"node"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"a14f16a5-3f4f-11e6-86bb-099aa4b461ab","method":{"position":"com.google.gson.Gson:576","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        {\n            try {\n                com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                toJson(src, typeOfSrc, jsonWriter);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350309315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:125","type":"CtBinaryOperatorImpl"},"failures":[276],"tindex":"a14f16a6-3f4f-11e6-86bb-e3677ce0185f","method":{"position":"com.google.gson.JsonArray:81","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement set(int index, com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonObject) {\n        {\n            return java.util.List<com.google.gson.JsonElement>.set(index, element);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350309315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"a14f3db7-3f4f-11e6-86bb-3b64b1c7e0de","method":{"position":"com.google.gson.TypeAdapter:268","type":"CtMethodImpl","sourcecode":"public final T fromJson(java.lang.String json) throws java.io.IOException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350309315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (json == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350309315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    return fromJson(new java.io.StringReader(json));\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:274","type":"CtVariableReadImpl"},"failures":[121,124,125,130,134,136,405],"tindex":"a14f3db8-3f4f-11e6-86bb-b7e1440372c5","method":{"position":"com.google.gson.Gson:249","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> doubleAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350309315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return in.nextDouble();\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    double double = value.doubleValue();\n                    checkValidFloatingPoint(doubleValue);\n                    out.value(value);\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:726","type":"CtBinaryOperatorImpl"},"failures":[406,407,218,228],"tindex":"a14f64c9-3f4f-11e6-86bb-b381aa1f48a9","method":{"position":"com.google.gson.stream.JsonWriter:476","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(long value) throws java.io.IOException {\n    if (value == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350309315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            writeDeferredName();\n            beforeValue(false);\n            java.io.Writer.write(java.lang.Long.toString(value));\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"a14f64ca-3f4f-11e6-86bb-b985adc22da8","method":{"position":"com.google.gson.TypeAdapter:268","type":"CtMethodImpl","sourcecode":"public final T fromJson(java.lang.String json) throws java.io.IOException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350309315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (json == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350309315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    return fromJson(new java.io.StringReader(json));\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"a14f8bdb-3f4f-11e6-86bb-9345b912b3bc","method":{"position":"com.google.gson.DefaultDateTypeAdapter:77","type":"CtMethodImpl","sourcecode":"public java.util.Date deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT, com.google.gson.JsonDeserializationContext context) throws com.google.gson.JsonParseException {\n    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350309315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    } else {\n        {\n            if (json == null) {\n                {\n                    if (json == null) {\n                        {\n                            if (!(json instanceof com.google.gson.JsonPrimitive)) {\n                                throw new com.google.gson.JsonParseException(\"The date should be a string value\");\n                            } \n                            java.util.Date java.util.Date = deserializeToDate(json);\n                            if (typeOfT == (java.util.Date.java.util.Date.java.lang.Class)) {\n                                return date;\n                            } else if (typeOfT == (java.sql.Timestamp.java.sql.Timestamp.java.lang.Class)) {\n                                return new java.sql.Timestamp(date.getTime());\n                            } else if (typeOfT == (java.sql.Date.java.sql.Date.java.lang.Class)) {\n                                return new java.sql.Date(date.getTime());\n                            } else {\n                                throw new java.lang.IllegalArgumentException((((getClass()) + \" cannot deserialize to \") + typeOfT));\n                            }\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350309315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new com.google.gson.JsonParseException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350309315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonParseException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:240","type":"CtInvocationImpl"},"failures":[408,409,410],"tindex":"a14f8bdc-3f4f-11e6-86bb-6b52fbd25241","method":{"position":"com.google.gson.reflect.TypeToken:238","type":"CtMethodImpl","sourcecode":"private static boolean typeEquals(java.lang.reflect.ParameterizedType from, java.lang.reflect.ParameterizedType to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeVarMap) {\n    if (to.getRawType().equals(from.getRawType())) {\n        {\n            if (from.getRawType().equals(to.getRawType())) {\n                java.lang.reflect.Type[] java.lang.reflect.Type[] = from.getActualTypeArguments();\n                java.lang.reflect.Type[] java.lang.reflect.Type[] = to.getActualTypeArguments();\n                for (int int = 0 ; i < (fromArgs.int) ; i++) {\n                    if (!(com.google.gson.reflect.TypeToken.matches(fromArgs[i], toArgs[i], typeVarMap))) {\n                        return false;\n                    } \n                }\n                return true;\n            } \n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350309315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"to","to":"from"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl"},"failures":[206],"tindex":"a14f8bdd-3f4f-11e6-86bb-259a61479c18","method":{"position":"com.google.gson.Gson:468","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src) {\n    if (src != null) {\n        {\n            if (src == null) {\n                return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            return toJsonTree(src, src.getClass());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350309315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:166","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"a14fb2ee-3f4f-11e6-86bb-53627b2840a2","method":{"position":"com.google.gson.reflect.TypeToken:160","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.GenericArrayType to) {\n    if (from instanceof java.lang.Class<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350309315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.reflect.Type java.lang.reflect.Type = to.getGenericComponentType();\n            if (toGenericComponentType instanceof java.lang.reflect.ParameterizedType) {\n                java.lang.reflect.Type java.lang.reflect.Type = from;\n                if (from instanceof java.lang.reflect.GenericArrayType) {\n                    t = ((java.lang.reflect.GenericArrayType)(from)).getGenericComponentType();\n                } else if (from instanceof java.lang.Class<?>) {\n                    java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(from));\n                    while (classType.isArray()) {\n                        classType = classType.getComponentType();\n                    }\n                    t = classType;\n                } \n                return com.google.gson.reflect.TypeToken.isAssignableFrom(t, ((java.lang.reflect.ParameterizedType)(toGenericComponentType)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n            } \n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:105","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"a14fb2ef-3f4f-11e6-86bb-05bf87767962","method":{"position":"com.google.gson.internal.$Gson$Types:213","type":"CtMethodImpl","sourcecode":"private static int hashCodeOrZero(java.lang.Object o) {\n    return o != null ? o.hashCode() : 0;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:136","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"a14fb2f0-3f4f-11e6-86bb-053d21fc8082","method":{"position":"com.google.gson.internal.Primitives:79","type":"CtMethodImpl","sourcecode":"public static boolean isWrapperType(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350309315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (type instanceof java.lang.reflect.GenericArrayType) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350309315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return com.google.gson.internal.Primitives.com.google.gson.internal.Primitives.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.containsKey(com.google.gson.internal.$Gson$Preconditions.checkNotNull(type));\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:92","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"a14fb2f1-3f4f-11e6-86bb-b5d28cf368b5","method":{"position":"com.google.gson.internal.LinkedTreeMap:570","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonNull) {\n        {\n            if (o instanceof java.util.Iterator) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350309315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return (o instanceof java.util.Map.Entry) && ((findByEntry(((java.util.Map.Entry<?, ?>)(o)))) != null);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350309315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[303,340,60,341,342,345,358,363,373,382,383,384],"tindex":"a14fda02-3f4f-11e6-86bb-7b3d2aca1069","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:175","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            if (!(isLenient())) {\n                double double = value.doubleValue();\n                if ((java.lang.Double.isNaN(d)) || (java.lang.Double.isInfinite(d))) {\n                    throw new java.lang.IllegalArgumentException((\"JSON forbids NaN and infinities: \" + value));\n                } \n            } \n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350309315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl"},"failures":[411,412],"tindex":"a14fda03-3f4f-11e6-86bb-3f20ae0d8a4f","method":{"position":"com.google.gson.TypeAdapter:254","type":"CtMethodImpl","sourcecode":"public final T fromJson(java.io.Reader in) throws java.io.IOException {\n    if (in == null) {\n        {\n            com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(in);\n            return read(reader);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350309315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"in"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:133","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"a14fda04-3f4f-11e6-86bb-01cf7a47ee69","method":{"position":"com.google.gson.internal.Primitives:79","type":"CtMethodImpl","sourcecode":"public static boolean isWrapperType(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350309315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (type instanceof java.lang.reflect.GenericArrayType) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350309315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return com.google.gson.internal.Primitives.com.google.gson.internal.Primitives.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.containsKey(com.google.gson.internal.$Gson$Preconditions.checkNotNull(type));\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:164","type":"CtBinaryOperatorImpl"},"failures":[408,409,410,413],"tindex":"a1500115-3f4f-11e6-86bb-db2b7bc4071b","method":{"position":"com.google.gson.reflect.TypeToken:122","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic boolean isAssignableFrom(java.lang.reflect.Type from) {\n    if (from instanceof java.lang.reflect.GenericArrayType) {\n        {\n            if (from == null) {\n                return false;\n            } \n            if (java.lang.reflect.Type.equals(from)) {\n                return true;\n            } \n            if ((java.lang.reflect.Type) instanceof java.lang.Class<?>) {\n                return java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from));\n            } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.ParameterizedType) {\n                return com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n            } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.GenericArrayType) {\n                return (java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from))) && (com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.GenericArrayType)(java.lang.reflect.Type))));\n            } else {\n                throw com.google.gson.reflect.TypeToken.buildUnexpectedTypeError(java.lang.reflect.Type, java.lang.Class.java.lang.Class.java.lang.Class, java.lang.reflect.ParameterizedType.java.lang.reflect.ParameterizedType.java.lang.Class, java.lang.reflect.GenericArrayType.java.lang.reflect.GenericArrayType.java.lang.Class);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350309315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:554","type":"CtBinaryOperatorImpl"},"failures":[414,415,416,406,417,418,419,2,3,4,6,7,420,9,421,422,10,423,11,12,13,18,30,424,31,425,32,426,33,34,43,339,52,53,54,55,56,57,58,59,343,427,61,62,66,68,428,70,345,346,429,77,79,80,81,82,83,430,431,432,85,433,434,86,353,354,355,356,357,358,435,436,359,360,361,93,94,95,96,97,98,99,437,104,105,438,112,121,124,125,128,130,134,136,366,367,138,368,139,369,370,371,439,149,440,159,441,373,442,443,444,160,445,374,446,447,375,182,184,188,189,190,194,195,196,197,198,199,200,448,449,201,202,450,451,203,452,204,453,205,381,206,207,208,209,210,211,454,455,212,456,382,457,458,383,384,459,460,461,462,463,217,225,464,227,465,466,236,237,467,468,247,251,469,394,395,396,397,252,253,254,398,255,256,257,399,258,400,401,259,402,405,470],"tindex":"a1500116-3f4f-11e6-86bb-c7579f36835c","method":{"position":"com.google.gson.GsonBuilder:551","type":"CtMethodImpl","sourcecode":"private void addTypeAdaptersForDate(java.lang.String datePattern, int dateStyle, int timeStyle, java.util.List<com.google.gson.TypeAdapterFactory> factories) {\n    if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n        {\n            if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n                {\n                    com.google.gson.DefaultDateTypeAdapter com.google.gson.DefaultDateTypeAdapter;\n                    if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n                        dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(datePattern);\n                    } else if ((dateStyle != (java.text.DateFormat.java.text.DateFormat.int)) && (timeStyle != (java.text.DateFormat.java.text.DateFormat.int))) {\n                        dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(dateStyle , timeStyle);\n                    } else {\n                        return ;\n                    }\n                    factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.util.Date.java.util.Date.java.lang.Class), dateTypeAdapter));\n                    factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Timestamp.java.sql.Timestamp.java.lang.Class), dateTypeAdapter));\n                    factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Date.java.sql.Date.java.lang.Class), dateTypeAdapter));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350309315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350309315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"datePattern":"datePattern"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:122","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"a1502827-3f4f-11e6-86bb-61fd4f9e9ff8","method":{"position":"com.google.gson.internal.$Gson$Types:117","type":"CtMethodImpl","sourcecode":"public static java.lang.Class<?> getRawType(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class<?>) {\n        return ((java.lang.Class<?>)(type));\n    } else if (type instanceof java.lang.reflect.ParameterizedType) {\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(type));\n        java.lang.reflect.Type java.lang.reflect.Type = parameterizedType.getRawType();\n        com.google.gson.internal.$Gson$Preconditions.checkArgument((rawType instanceof java.lang.Class));\n        return ((java.lang.Class<?>)(rawType));\n    } else if (type instanceof java.lang.reflect.GenericArrayType) {\n        java.lang.reflect.Type java.lang.reflect.Type = ((java.lang.reflect.GenericArrayType)(type)).getGenericComponentType();\n        return java.lang.reflect.Array.newInstance(com.google.gson.internal.$Gson$Types.getRawType(componentType), 0).getClass();\n    } else if (type instanceof java.lang.reflect.TypeVariable) {\n        return java.lang.Object.java.lang.Object.java.lang.Class;\n    } else if (type instanceof java.lang.reflect.WildcardType) {\n        return com.google.gson.internal.$Gson$Types.getRawType(((java.lang.reflect.WildcardType)(type)).getUpperBounds()[0]);\n    } else {\n        java.lang.String java.lang.String = type == null ? \"null\" : type.getClass().getName();\n        throw new java.lang.IllegalArgumentException(((((\"Expected a Class, ParameterizedType, or \" + \"GenericArrayType, but <\") + type) + \"> is of type \") + className));\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:246","type":"CtVariableReadImpl"},"failures":[],"tindex":"a1502828-3f4f-11e6-86bb-23969d99b067","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:245","type":"CtMethodImpl","sourcecode":"void removeInternal(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node, boolean unlink) {\n    if (unlink) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350309315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (node != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350309315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (unlink) {\n                        node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                        node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                        node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                    } \n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    if ((left != null) && (right != null)) {\n                        com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = (left.int) > (right.int) ? left.last() : right.first();\n                        removeInternal(adjacent, false);\n                        int int = 0;\n                        left = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                        if (left != null) {\n                            leftHeight = left.int;\n                            adjacent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left;\n                            left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = adjacent;\n                            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                        } \n                        int int = 0;\n                        right = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                        if (right != null) {\n                            rightHeight = right.int;\n                            adjacent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                            right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = adjacent;\n                            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                        } \n                        adjacent.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                        replaceInParent(node, adjacent);\n                        return ;\n                    } else if (left != null) {\n                        replaceInParent(node, left);\n                        node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                    } else if (right != null) {\n                        replaceInParent(node, right);\n                        node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                    } else {\n                        replaceInParent(node, null);\n                    }\n                    rebalance(originalParent, false);\n                    (int)--;\n                    (int)++;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"unlink":"unlink"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:250","type":"CtVariableReadImpl"},"failures":[414,415,416,406,417,471,418,419,2,3,4,5,472,6,7,420,8,310,314,9,421,422,10,423,11,12,13,14,15,473,16,17,18,19,474,475,20,476,21,477,22,28,478,479,29,30,424,31,425,32,426,33,34,35,36,480,37,38,39,40,41,481,482,42,43,483,484,485,486,44,487,45,488,46,489,47,490,48,491,492,49,50,339,51,493,52,53,54,55,56,57,58,59,340,60,341,342,494,343,427,495,496,497,61,498,499,500,501,502,503,62,504,505,506,507,63,64,508,509,510,511,65,512,66,513,67,68,428,69,514,515,516,517,518,344,519,520,70,345,346,429,71,72,347,348,349,521,73,522,350,351,523,524,74,75,352,77,78,79,80,81,82,83,430,431,84,432,85,433,434,86,87,88,89,90,353,354,355,356,357,525,526,358,527,528,529,91,530,435,531,532,533,436,534,359,535,536,360,361,537,92,93,94,95,96,97,98,99,437,100,101,102,103,362,363,104,105,538,539,438,106,540,107,541,542,543,544,545,108,546,547,109,548,549,550,551,552,553,554,110,111,555,556,557,558,559,112,560,113,114,561,562,115,563,564,116,565,117,118,566,567,119,120,568,569,570,121,571,572,573,574,575,576,577,578,122,579,123,580,124,125,581,582,126,583,584,127,585,128,586,587,364,129,588,130,131,589,132,133,590,591,592,134,593,135,594,595,596,136,137,597,598,599,600,366,367,138,368,139,369,370,140,371,372,141,142,601,602,143,603,604,144,605,606,145,439,607,608,146,609,610,147,611,612,148,613,149,150,614,151,152,153,615,154,616,617,618,619,155,620,156,157,621,158,622,623,624,440,159,441,373,442,443,444,160,445,374,625,161,162,163,164,165,626,627,166,628,167,629,630,631,168,632,633,169,634,635,170,636,637,171,638,172,639,446,640,641,447,642,173,174,643,175,644,645,646,647,176,177,648,178,649,650,179,651,652,180,653,654,181,655,656,375,657,182,183,184,185,658,186,187,188,189,190,191,192,193,376,377,378,379,380,659,660,661,194,195,196,197,198,199,200,448,449,201,202,450,451,203,452,204,453,662,205,381,206,207,208,663,209,210,211,454,455,212,456,382,457,458,383,384,459,460,461,462,463,664,213,385,214,386,665,666,387,667,215,388,668,389,390,391,216,669,670,392,671,672,673,217,218,219,220,221,674,222,675,223,224,676,225,677,226,464,227,228,678,229,679,680,465,681,682,230,466,231,232,683,233,234,235,236,237,238,467,468,239,684,393,240,685,241,242,243,244,245,246,247,248,686,249,250,251,469,394,395,396,397,252,253,254,398,255,256,257,399,258,400,401,259,402,687,688,689,690,403,691,405,692,470,693,694,695],"tindex":"a1507649-3f4f-11e6-86bb-5f3bed6889a7","method":{"position":"com.google.gson.Gson:273","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> floatAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350309315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                {\n                    if (serializeSpecialFloatingPointValues) {\n                        {\n                            if (serializeSpecialFloatingPointValues) {\n                                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n                            } \n                            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                                @java.lang.Override\n                                public java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                                        in.nextNull();\n                                        return null;\n                                    } \n                                    return ((float)(in.nextDouble()));\n                                }\n\n                                @java.lang.Override\n                                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                                    if (value == null) {\n                                        out.nullValue();\n                                        return ;\n                                    } \n                                    float float = value.floatValue();\n                                    checkValidFloatingPoint(floatValue);\n                                    out.value(value);\n                                }\n                            };\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350309315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350309315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:92","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"a150c46a-3f4f-11e6-86bb-1fc200239c9b","method":{"position":"com.google.gson.internal.LinkedTreeMap:605","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonNull) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350309315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof java.util.Iterator) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350309315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (o instanceof com.google.gson.JsonPrimitive) {\n                        {\n                            return containsKey(o);\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350309315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.ObjectTypeAdapter:95","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"a150c46b-3f4f-11e6-86bb-dd2785a00ef6","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:108","type":"CtMethodImpl","sourcecode":"public boolean writeField(java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350309315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (!(boolean))\n                return false;\n            \n            java.lang.Object java.lang.Object = field.get(value);\n            return fieldValue != value;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[415,3,696,8,299,300,305,318,322,697,698,10,15,473,28,29,30,31,33,36,41,483,44,45,48,49,50,60,343,61,508,68,69,520,345,73,74,76,78,83,85,86,89,90,525,358,527,528,529,91,530,531,532,533,534,536,360,93,94,95,96,97,98,99,437,102,103,105,106,111,117,119,120,121,122,123,124,125,126,127,128,129,588,130,131,589,132,134,135,136,137,598,699,700,701,702,703,704,705,706,140,141,143,146,147,150,151,152,155,156,158,159,442,160,172,642,173,643,175,176,178,180,181,655,194,195,196,197,198,200,201,202,203,382,383,384,387,388,392,226,238,241,242,243,244,245,253,254,255,258,401,259,687,690,405],"tindex":"a150c46c-3f4f-11e6-86bb-8124aadef456","method":{"position":"com.google.gson.stream.JsonWriter:490","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            writeDeferredName();\n            java.lang.String java.lang.String = value.toString();\n            if ((!(boolean)) && (((string.equals(\"-Infinity\")) || (string.equals(\"Infinity\"))) || (string.equals(\"NaN\")))) {\n                throw new java.lang.IllegalArgumentException((\"Numeric values must be finite, but was \" + value));\n            } \n            beforeValue(false);\n            java.io.Writer.append(string);\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350309315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.DateTypeAdapter:86","type":"CtBinaryOperatorImpl"},"failures":[157,217,219,220,236],"tindex":"a150eb7d-3f4f-11e6-86bb-31813810e5d5","method":{"position":"com.google.gson.internal.bind.DateTypeAdapter:85","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized void write(com.google.gson.stream.JsonWriter out, java.util.Date value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            java.lang.String java.lang.String = java.text.DateFormat.format(value);\n            out.value(dateFormatAsString);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350309315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[672],"tindex":"a150eb7e-3f4f-11e6-86bb-53dc42eef554","method":{"position":"com.google.gson.internal.bind.TypeAdapters:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350309315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:107","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"a150eb7f-3f4f-11e6-86bb-17967a8cb822","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:839","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonArray) {\n        {\n            return containsKey(o);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350309315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:348","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"a150eb80-3f4f-11e6-86bb-d3b0494e0542","method":{"position":"com.google.gson.internal.$Gson$Types:322","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type resolve(java.lang.reflect.Type context, java.lang.Class<?> contextRawType, java.lang.reflect.Type toResolve) {\n    while (true) {\n        if (toResolve instanceof java.lang.reflect.TypeVariable) {\n            java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(toResolve));\n            toResolve = com.google.gson.internal.$Gson$Types.resolveTypeVariable(context, contextRawType, typeVariable);\n            if (toResolve == typeVariable) {\n                return toResolve;\n            } \n        } else if ((toResolve instanceof java.lang.Class) && (((java.lang.Class<?>)(toResolve)).isArray())) {\n            java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getComponentType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, componentType);\n            return componentType == newComponentType ? original : com.google.gson.internal.$Gson$Types.arrayOf(newComponentType);\n        } else if (toResolve instanceof java.lang.reflect.GenericArrayType) {\n            java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getGenericComponentType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, componentType);\n            return componentType == newComponentType ? original : com.google.gson.internal.$Gson$Types.arrayOf(newComponentType);\n        } else if (toResolve instanceof java.lang.reflect.ParameterizedType) {\n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getOwnerType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, ownerType);\n            boolean boolean = newOwnerType != ownerType;\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getActualTypeArguments();\n            for (int int = 0, int int = args.int ; t < length ; t++) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, args[t]);\n                if (resolvedTypeArgument != (args[t])) {\n                    if (!changed) {\n                        args = args.clone();\n                        changed = true;\n                    } \n                    args[t] = resolvedTypeArgument;\n                } \n            }\n            return changed ? com.google.gson.internal.$Gson$Types.newParameterizedTypeWithOwner(newOwnerType, original.getRawType(), args) : original;\n        } else if (toResolve instanceof java.lang.reflect.WildcardType) {\n            java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(toResolve));\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getLowerBounds();\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getUpperBounds();\n            if ((originalLowerBound.int) == 1) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, originalLowerBound[0]);\n                if (lowerBound != (originalLowerBound[0])) {\n                    return com.google.gson.internal.$Gson$Types.supertypeOf(lowerBound);\n                } \n            } else if ((originalUpperBound.int) == 1) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, originalUpperBound[0]);\n                if (upperBound != (originalUpperBound[0])) {\n                    return com.google.gson.internal.$Gson$Types.subtypeOf(upperBound);\n                } \n            } \n            return original;\n        } else {\n            return toResolve;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"context"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"a1511291-3f4f-11e6-86bb-5765099ee819","method":{"position":"com.google.gson.FieldNamingPolicy:122","type":"CtMethodImpl","sourcecode":"private static java.lang.String separateCamelCase(java.lang.String name, java.lang.String separator) {\n    if (separator == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350309315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            for (int int = 0 ; i < (name.length()) ; i++) {\n                char char = name.charAt(i);\n                if ((java.lang.Character.isUpperCase(character)) && ((translation.length()) != 0)) {\n                    translation.append(separator);\n                } \n                translation.append(character);\n            }\n            return translation.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"separator"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl"},"failures":[77,82,430,434,194,197],"tindex":"a15139a2-3f4f-11e6-86bb-b9668073da1a","method":{"position":"com.google.gson.FieldNamingPolicy:137","type":"CtMethodImpl","sourcecode":"private static java.lang.String upperCaseFirstLetter(java.lang.String name) {\n    if (name == null) {\n        {\n            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            int int = 0;\n            char char = name.charAt(index);\n            while (index < ((name.length()) - 1)) {\n                if (java.lang.Character.isLetter(firstCharacter)) {\n                    break;\n                } \n                fieldNameBuilder.append(firstCharacter);\n                firstCharacter = name.charAt((++index));\n            }\n            if (index == (name.length())) {\n                return fieldNameBuilder.toString();\n            } \n            if (!(java.lang.Character.isUpperCase(firstCharacter))) {\n                java.lang.String java.lang.String = com.google.gson.FieldNamingPolicy.modifyString(java.lang.Character.toUpperCase(firstCharacter), name, (++index));\n                return fieldNameBuilder.append(modifiedTarget).toString();\n            } else {\n                return name;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350309315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:107","type":"CtBinaryOperatorImpl"},"failures":[414,415,707,708,709,408,409,410,416,406,417,471,418,419,2,3,4,5,273,274,275,696,710,6,7,711,8,9,421,422,10,423,11,12,13,14,15,473,16,17,18,19,474,475,20,476,21,477,22,23,24,25,26,27,28,478,479,29,30,424,31,425,32,426,33,34,35,36,480,37,38,39,40,41,481,482,42,43,483,484,485,486,44,487,45,488,46,489,47,490,48,491,492,49,50,339,51,493,52,53,54,55,56,57,58,59,340,60,341,342,494,343,427,495,496,497,61,498,499,500,501,502,503,62,504,505,506,507,63,64,508,509,510,511,65,512,66,513,67,68,428,69,514,515,516,517,518,344,519,520,70,345,346,71,72,347,348,349,521,73,522,350,351,523,524,74,75,352,76,77,78,79,80,81,82,83,430,431,84,432,85,433,434,86,87,88,89,90,353,354,355,356,357,525,526,358,527,528,529,91,530,435,531,532,533,436,534,359,535,536,360,361,537,92,93,94,95,96,97,98,99,437,100,101,102,103,362,363,104,105,538,539,438,106,540,107,541,542,543,544,545,108,546,547,109,548,549,550,551,552,553,554,110,111,555,556,557,558,559,112,560,113,114,561,562,115,563,564,116,565,117,118,566,567,119,120,568,569,570,121,571,572,573,574,575,576,577,578,122,579,123,580,124,125,581,582,126,583,584,127,585,128,586,587,364,129,588,130,131,589,132,133,590,591,592,134,593,135,594,595,596,136,137,597,598,599,600,366,367,138,368,139,369,370,140,141,142,601,602,143,603,604,144,605,606,145,607,608,146,609,147,612,148,613,149,150,614,151,152,153,615,154,616,617,618,155,620,156,157,621,158,622,623,624,440,159,441,373,442,443,444,160,445,374,625,161,162,163,164,165,626,627,166,628,167,629,630,631,168,632,633,169,634,635,170,636,637,171,638,172,446,640,641,642,173,174,643,175,644,645,646,647,176,177,648,178,649,650,179,651,652,180,653,654,181,655,656,375,657,182,183,184,185,658,186,187,188,189,190,191,192,193,376,377,378,379,380,659,660,661,194,195,196,197,198,199,200,448,449,201,202,450,451,203,452,204,453,662,205,381,206,207,208,663,209,210,211,454,455,212,456,382,457,458,383,384,459,460,461,462,463,664,213,385,214,386,665,666,387,667,215,388,668,389,390,391,216,669,670,392,671,672,673,217,218,219,220,221,674,222,675,223,224,676,225,677,226,464,227,228,678,229,679,680,465,681,682,230,466,231,232,683,233,234,235,236,237,238,467,468,239,684,393,240,685,241,242,243,244,245,246,247,248,686,249,250,251,469,394,395,396,397,252,253,254,398,255,256,257,399,258,400,401,259,402,687,688,690,691,405,692,470,693,694,695],"tindex":"a15160b3-3f4f-11e6-86bb-3b710ffe099a","method":{"position":"com.google.gson.reflect.TypeToken:295","type":"CtMethodImpl","sourcecode":"public static com.google.gson.reflect.TypeToken<?> get(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.WildcardType) {\n        {\n            return new com.google.gson.reflect.TypeToken<java.lang.Object>(type);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350309315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:94","type":"CtBinaryOperatorImpl"},"failures":[416,406,417,418,419,2,3,4,711,30,424,31,425,32,426,33,34,339,52,53,54,55,56,57,59,427,70,353,354,355,356,357,360,361,700,701,712,366,367,138,368,139,369,370,440,182,184,188,189,190,381,206,210,460,461,462,463,464,465,466,237,239,247,251,469,394,395,396,397,252,253,254,398,255,256,257,399,258,400,401,402],"tindex":"a15187c4-3f4f-11e6-86bb-8f2e1586be8e","method":{"position":"com.google.gson.GsonBuilder:447","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\npublic com.google.gson.GsonBuilder registerTypeAdapter(java.lang.reflect.Type type, java.lang.Object typeAdapter) {\n    if (type instanceof java.lang.Class) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350309315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.$Gson$Preconditions.checkArgument(((((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) || (typeAdapter instanceof com.google.gson.InstanceCreator<?>)) || (typeAdapter instanceof com.google.gson.TypeAdapter<?>)));\n            if (typeAdapter instanceof com.google.gson.InstanceCreator<?>) {\n                java.util.Map<java.lang.reflect.Type, com.google.gson.InstanceCreator<?>>.put(type, ((com.google.gson.InstanceCreator)(typeAdapter)));\n            } \n            if ((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) {\n                com.google.gson.reflect.TypeToken<?> com.google.gson.reflect.TypeToken<?> = com.google.gson.reflect.TypeToken.get(type);\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.TreeTypeAdapter.newFactoryWithMatchRawType(typeToken, typeAdapter));\n            } \n            if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.internal.bind.TypeAdapters.newFactory(com.google.gson.reflect.TypeToken.get(type), ((com.google.gson.TypeAdapter)(typeAdapter))));\n            } \n            return com.google.gson.GsonBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:137","type":"CtBinaryOperatorImpl"},"failures":[282,298,305,306,308,310,314,60,70,345,353,354,356,357,358,371,372,439,210,382,383,384,252,253,254,258],"tindex":"a15187c5-3f4f-11e6-86bb-3dc617361292","method":{"position":"com.google.gson.internal.Streams:67","type":"CtMethodImpl","sourcecode":"public static void write(com.google.gson.JsonElement element, com.google.gson.stream.JsonWriter writer) throws java.io.IOException {\n    if (element instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350309315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<com.google.gson.JsonElement>.write(writer, element);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"a151aed6-3f4f-11e6-86bb-ade432492d5b","method":{"position":"com.google.gson.internal.bind.DateTypeAdapter:69","type":"CtMethodImpl","sourcecode":"private synchronized java.util.Date deserializeToDate(java.lang.String json) {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350309315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            try {\n                return java.text.DateFormat.parse(json);\n            } catch (java.text.ParseException ignored) {\n            }\n            try {\n                return java.text.DateFormat.parse(json);\n            } catch (java.text.ParseException ignored) {\n            }\n            try {\n                return java.text.DateFormat.parse(json);\n            } catch (java.text.ParseException e) {\n                throw new com.google.gson.JsonSyntaxException(json , e);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:127","type":"CtInvocationImpl"},"failures":[419,696,6,7,8,421,422,10,423,11,12,14,15,473,20,476,23,24,25,26,27,28,478,479,29,30,424,31,425,32,426,33,34,45,488,46,49,50,51,493,340,60,341,342,62,510,66,67,68,515,70,345,71,72,347,348,349,521,73,522,350,351,523,524,74,75,352,76,77,78,79,80,81,82,83,430,431,84,432,85,433,434,86,89,90,353,354,356,357,525,526,527,528,529,91,530,435,531,532,533,436,534,535,536,360,361,95,96,437,100,101,102,103,362,363,105,587,367,138,368,139,370,140,141,142,601,602,143,603,604,144,605,606,145,607,146,609,147,612,613,150,614,151,152,153,615,154,616,617,618,155,620,156,157,621,158,622,623,624,440,159,373,442,444,160,445,374,638,172,642,173,643,178,652,180,181,182,183,184,185,658,186,191,376,377,378,379,380,194,195,196,197,198,200,448,449,201,202,450,451,203,204,453,662,207,208,663,209,211,212,456,382,458,383,384,460,461,462,665,666,669,672,674,226,233,238,241,243,244,245,246,248,686,249,250,469,397,252,254,255,687,690,691,693,694,695],"tindex":"a151aed7-3f4f-11e6-86bb-c5aa75552128","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:125","type":"CtMethodImpl","sourcecode":"private java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> getBoundFields(com.google.gson.Gson context, com.google.gson.reflect.TypeToken<?> type, java.lang.Class<?> raw) {\n    if (raw.isInterface()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350309315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (raw.isInterface()) {\n                {\n                    java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> = new java.util.LinkedHashMap<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField>();\n                    if (raw.isInterface()) {\n                        return result;\n                    } \n                    java.lang.reflect.Type java.lang.reflect.Type = type.getType();\n                    while (raw != (java.lang.Object.java.lang.Object.java.lang.Class)) {\n                        java.lang.reflect.Field[] java.lang.reflect.Field[] = raw.getDeclaredFields();\n                        for (java.lang.reflect.Field java.lang.reflect.Field : fields) {\n                            boolean boolean = excludeField(field, true);\n                            boolean boolean = excludeField(field, false);\n                            if ((!serialize) && (!deserialize)) {\n                                continue;\n                            } \n                            field.setAccessible(true);\n                            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, field.getGenericType());\n                            com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = createBoundField(context, field, getFieldName(field), com.google.gson.reflect.TypeToken.get(fieldType), serialize, deserialize);\n                            com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = result.put(boundField.java.lang.String, boundField);\n                            if (previous != null) {\n                                throw new java.lang.IllegalArgumentException(((declaredType + \" declares multiple JSON fields named \") + (previous.java.lang.String)));\n                            } \n                        }\n                        type = com.google.gson.reflect.TypeToken.get(com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, raw.getGenericSuperclass()));\n                        raw = type.getRawType();\n                    }\n                    return result;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350309315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"raw"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"a151d5e8-3f4f-11e6-86bb-8f718a986d4c","method":{"position":"com.google.gson.Gson:285","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    float float = value.floatValue();\n                    checkValidFloatingPoint(floatValue);\n                    out.value(value);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350309315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350309315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.JsonObject:54","type":"CtBinaryOperatorImpl"},"failures":[3,282,298,299,300,305,306,307,308,310,314,318,322,18,52,54,55,57,60,343,70,345,346,353,354,356,357,358,360,371,372,439,375,190,206,210,382,383,384,385,387,388,389,391,392,682,231,234,239,251,394,252,253,254,255,256,257,258,401,259,402],"tindex":"a151d5e9-3f4f-11e6-86bb-bd055bd7663d","method":{"position":"com.google.gson.internal.bind.TypeAdapters:680","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, com.google.gson.JsonElement value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if ((value == null) || (value.isJsonNull())) {\n                out.nullValue();\n            } else if (value.isJsonPrimitive()) {\n                com.google.gson.JsonPrimitive com.google.gson.JsonPrimitive = value.getAsJsonPrimitive();\n                if (primitive.isNumber()) {\n                    out.value(primitive.getAsNumber());\n                } else if (primitive.isBoolean()) {\n                    out.value(primitive.getAsBoolean());\n                } else {\n                    out.value(primitive.getAsString());\n                }\n            } else if (value.isJsonArray()) {\n                out.beginArray();\n                for (com.google.gson.JsonElement com.google.gson.JsonElement : value.getAsJsonArray()) {\n                    write(out, e);\n                }\n                out.endArray();\n            } else if (value.isJsonObject()) {\n                out.beginObject();\n                for (java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> : value.getAsJsonObject().entrySet()) {\n                    out.name(e.getKey());\n                    write(out, e.getValue());\n                }\n                out.endObject();\n            } else {\n                throw new java.lang.IllegalArgumentException((\"Couldn't write \" + (value.getClass())));\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350309315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl"},"failures":[713],"tindex":"a151fcfa-3f4f-11e6-86bb-b92b704dbc02","method":{"position":"com.google.gson.stream.JsonWriter:385","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter name(java.lang.String name) throws java.io.IOException {\n    if (name == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350309315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (name == null) {\n                throw new java.lang.NullPointerException(\"name == null\");\n            } \n            if ((java.lang.String) != null) {\n                throw new java.lang.IllegalStateException();\n            } \n            if ((int) == 0) {\n                throw new java.lang.IllegalStateException(\"JsonWriter is closed.\");\n            } \n            java.lang.String = name;\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"a151fcfb-3f4f-11e6-86bb-1d14bff29615","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:223","type":"CtMethodImpl","sourcecode":"private boolean equal(java.lang.Object a, java.lang.Object b) {\n    if (!(a instanceof java.lang.reflect.GenericArrayType)) {\n        {\n            return (a == b) || ((a != null) && (a.equals(b)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350309315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl"},"failures":[206],"tindex":"a152240c-3f4f-11e6-86bb-098505fc681a","method":{"position":"com.google.gson.Gson:133","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350309315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return toJsonTree(src);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"a152240d-3f4f-11e6-86bb-dfe6fc6a58c4","method":{"position":"com.google.gson.Gson:261","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            double double = value.doubleValue();\n            checkValidFloatingPoint(doubleValue);\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350309315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl"},"failures":[714],"tindex":"a152240e-3f4f-11e6-86bb-89be68dd00a1","method":{"position":"com.google.gson.JsonObject:111","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Character value) {\n    if (property == null) {\n        {\n            add(property, createJsonElement(value));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350309315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:154","type":"CtUnaryOperatorImpl"},"failures":[708,273,411,412,279,280,8,715,716,717,718,719,720,721,722,723,724,725,286,294,305,306,308,309,310,714,726,727,311,0,312,313,314,728,15,473,339,340,60,341,342,496,498,499,501,503,506,509,514,517,344,70,345,347,348,349,350,351,352,76,353,354,356,357,358,359,362,363,365,729,366,367,138,368,139,369,370,371,372,373,374,172,656,376,377,378,379,380,659,381,210,382,383,384,386,392,247,395,396,252,253,254,258],"tindex":"a152240f-3f4f-11e6-86bb-c753dd4661d7","method":{"position":"com.google.gson.internal.LinkedTreeMap:121","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedTreeMap.Node<K, V> find(K key, boolean create) {\n    if (!create) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350309315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (!create) {\n                {\n                    java.util.Comparator<? super K> java.util.Comparator<? super K> = com.google.gson.internal.LinkedTreeMap.this.java.util.Comparator<? super K>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    int int = 0;\n                    if (nearest != null) {\n                        @java.lang.SuppressWarnings(value = \"unchecked\")\n                        java.lang.Comparable<java.lang.Object> java.lang.Comparable<java.lang.Object> = comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>) ? ((java.lang.Comparable<java.lang.Object>)(key)) : null;\n                        while (true) {\n                            comparison = comparableKey != null ? comparableKey.compareTo(nearest.K) : comparator.compare(key, nearest.K);\n                            if (comparison == 0) {\n                                return nearest;\n                            } \n                            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = comparison < 0 ? nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> : nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                            if (child == null) {\n                                break;\n                            } \n                            nearest = child;\n                        }\n                    } \n                    if (!create) {\n                        return null;\n                    } \n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.this.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    if (nearest == null) {\n                        if ((comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>)) && (!(key instanceof java.lang.Comparable))) {\n                            throw new java.lang.ClassCastException(((key.getClass().getName()) + \" is not Comparable\"));\n                        } \n                        created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                        com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                    } else {\n                        created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                        if (comparison < 0) {\n                            nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                        } else {\n                            nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                        }\n                        rebalance(nearest, true);\n                    }\n                    (int)++;\n                    (int)++;\n                    return created;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350309315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"create":"create"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:250","type":"CtVariableReadImpl"},"failures":[],"tindex":"a1527230-3f4f-11e6-86bb-cb7a1bcfd1cf","method":{"position":"com.google.gson.Gson:273","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> floatAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350309315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                {\n                    if (serializeSpecialFloatingPointValues) {\n                        {\n                            if (serializeSpecialFloatingPointValues) {\n                                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n                            } \n                            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                                @java.lang.Override\n                                public java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                                        in.nextNull();\n                                        return null;\n                                    } \n                                    return ((float)(in.nextDouble()));\n                                }\n\n                                @java.lang.Override\n                                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                                    if (value == null) {\n                                        out.nullValue();\n                                        return ;\n                                    } \n                                    float float = value.floatValue();\n                                    checkValidFloatingPoint(floatValue);\n                                    out.value(value);\n                                }\n                            };\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350309315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350309315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[414,128],"tindex":"a1527231-3f4f-11e6-86bb-dfd4200ac0c5","method":{"position":"com.google.gson.Gson:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350309315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    out.value(value.toString());\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350309315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:120","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"a1527232-3f4f-11e6-86bb-4d96642296e5","method":{"position":"com.google.gson.internal.LinkedTreeMap:605","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonNull) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350309315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof java.util.Iterator) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350309315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (o instanceof com.google.gson.JsonPrimitive) {\n                        {\n                            return containsKey(o);\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350309315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"a1529943-3f4f-11e6-86bb-058e1b39c2d3","method":{"position":"com.google.gson.Gson:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350309315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    out.value(value.toString());\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350309315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:305","type":"CtBinaryOperatorImpl"},"failures":[730,731,732,733],"tindex":"a1529944-3f4f-11e6-86bb-132b6df558e9","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:686","type":"CtMethodImpl","sourcecode":"void add(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node) {\n    if (node != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350309315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            node.int = 1;\n            if (((int) > 0) && (((int) & 1) == 0)) {\n                (int)++;\n                (int)--;\n                (int)++;\n            } \n            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node;\n            (int)++;\n            if (((int) > 0) && (((int) & 1) == 0)) {\n                (int)++;\n                (int)--;\n                (int)++;\n            } \n            for (int int = 4 ; ((int) & (scale - 1)) == (scale - 1) ; scale *= 2) {\n                if ((int) == 0) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                    center.int = (right.int) + 1;\n                    left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                } else if ((int) == 1) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                    center.int = (right.int) + 1;\n                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    int = 0;\n                } else if ((int) == 2) {\n                    int = 0;\n                } \n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"node"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl"},"failures":[419,696,6,7,8,421,422,10,423,11,12,14,15,473,20,476,23,24,25,26,27,28,478,479,29,30,31,425,426,33,34,45,488,46,49,50,51,493,340,60,341,342,62,510,66,67,68,515,70,345,71,72,347,348,349,521,73,522,350,351,523,524,74,75,352,76,77,78,79,80,81,82,83,430,431,84,432,85,433,434,86,89,90,353,354,356,357,525,526,527,528,529,91,530,435,531,532,533,436,534,535,536,360,361,95,96,437,100,101,102,103,362,363,105,587,367,138,368,139,370,140,141,142,601,602,143,603,604,144,605,606,145,607,146,609,147,612,613,150,614,151,152,615,154,616,617,155,620,156,157,621,158,622,623,624,440,159,373,442,444,160,445,374,638,172,642,173,643,178,652,180,181,182,183,184,185,658,186,191,376,377,378,379,380,194,195,196,197,198,200,448,449,201,202,450,451,203,204,453,662,207,208,663,209,211,212,456,382,458,383,384,460,461,462,665,666,669,672,674,226,233,238,241,243,244,245,246,248,686,249,250,469,397,252,254,255,687,690,691,693,694,695],"tindex":"a152e765-3f4f-11e6-86bb-a719837c1d00","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:116","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<?> getFieldAdapter(com.google.gson.Gson gson, java.lang.reflect.Field field, com.google.gson.reflect.TypeToken<?> fieldType) {\n    if (field.isSynthetic()) {\n        {\n            com.google.gson.annotations.JsonAdapter com.google.gson.annotations.JsonAdapter = field.getAnnotation(com.google.gson.annotations.JsonAdapter.com.google.gson.annotations.JsonAdapter.java.lang.Class);\n            if (annotation != null) {\n                com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory.getTypeAdapter(com.google.gson.internal.ConstructorConstructor, gson, fieldType, annotation);\n                if (adapter != null)\n                    return adapter;\n                \n            } \n            return gson.getAdapter(fieldType);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350309315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"field"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl"},"failures":[696,11,12,23,24,25,26,27,146,157,440],"tindex":"a152e766-3f4f-11e6-86bb-c78fe6cf3b37","method":{"position":"com.google.gson.internal.Excluder:149","type":"CtMethodImpl","sourcecode":"public boolean excludeField(java.lang.reflect.Field field, boolean serialize) {\n    if (field.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350309315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (((int) & (field.getModifiers())) != 0) {\n                return true;\n            } \n            if (((double) != (com.google.gson.internal.Excluder.com.google.gson.internal.Excluder.double)) && (!(isValidVersion(field.getAnnotation(com.google.gson.annotations.Since.com.google.gson.annotations.Since.java.lang.Class), field.getAnnotation(com.google.gson.annotations.Until.com.google.gson.annotations.Until.java.lang.Class))))) {\n                return true;\n            } \n            if (field.isSynthetic()) {\n                return true;\n            } \n            if (boolean) {\n                com.google.gson.annotations.Expose com.google.gson.annotations.Expose = field.getAnnotation(com.google.gson.annotations.Expose.com.google.gson.annotations.Expose.java.lang.Class);\n                if ((annotation == null) || (serialize ? !(annotation.serialize()) : !(annotation.deserialize()))) {\n                    return true;\n                } \n            } \n            if ((!(boolean)) && (isInnerClass(field.getType()))) {\n                return true;\n            } \n            if (isAnonymousOrLocal(field.getType())) {\n                return true;\n            } \n            java.util.List<com.google.gson.ExclusionStrategy> java.util.List<com.google.gson.ExclusionStrategy> = serialize ? java.util.List<com.google.gson.ExclusionStrategy> : java.util.List<com.google.gson.ExclusionStrategy>;\n            if (!(list.isEmpty())) {\n                com.google.gson.FieldAttributes com.google.gson.FieldAttributes = new com.google.gson.FieldAttributes(field);\n                for (com.google.gson.ExclusionStrategy com.google.gson.ExclusionStrategy : list) {\n                    if (exclusionStrategy.shouldSkipField(fieldAttributes)) {\n                        return true;\n                    } \n                }\n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"field"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"a1530e77-3f4f-11e6-86bb-1982e512f80d","method":{"position":"com.google.gson.DefaultDateTypeAdapter:77","type":"CtMethodImpl","sourcecode":"public java.util.Date deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT, com.google.gson.JsonDeserializationContext context) throws com.google.gson.JsonParseException {\n    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350309315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    } else {\n        {\n            if (json == null) {\n                {\n                    if (json == null) {\n                        {\n                            if (!(json instanceof com.google.gson.JsonPrimitive)) {\n                                throw new com.google.gson.JsonParseException(\"The date should be a string value\");\n                            } \n                            java.util.Date java.util.Date = deserializeToDate(json);\n                            if (typeOfT == (java.util.Date.java.util.Date.java.lang.Class)) {\n                                return date;\n                            } else if (typeOfT == (java.sql.Timestamp.java.sql.Timestamp.java.lang.Class)) {\n                                return new java.sql.Timestamp(date.getTime());\n                            } else if (typeOfT == (java.sql.Date.java.sql.Date.java.lang.Class)) {\n                                return new java.sql.Date(date.getTime());\n                            } else {\n                                throw new java.lang.IllegalArgumentException((((getClass()) + \" cannot deserialize to \") + typeOfT));\n                            }\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350309315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new com.google.gson.JsonParseException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350309315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonParseException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:106","type":"CtBinaryOperatorImpl"},"failures":[276,277,1,734,282,284,285,286,287,288,735,289,290,291,292,293,295,296,299,300,304,312,343,345,348,350,353,365,376,378,380,387,390],"tindex":"a1530e78-3f4f-11e6-86bb-4544257a083a","method":{"position":"com.google.gson.JsonArray:57","type":"CtMethodImpl","sourcecode":"public void add(com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonArray) {\n        {\n            if (element == null) {\n                element = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            java.util.List<com.google.gson.JsonElement>.add(element);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350309315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"a1530e79-3f4f-11e6-86bb-19315dcba2fe","method":{"position":"com.google.gson.Gson:285","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    float float = value.floatValue();\n                    checkValidFloatingPoint(floatValue);\n                    out.value(value);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350309315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350309315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[415,8,10,44,45,49,50,340,60,341,342,68,345,73,74,78,86,89,90,530,96,437,105,120,122,135,598,140,141,143,147,150,151,152,155,156,158,159,373,442,160,172,642,173,643,178,180,201],"tindex":"a153358a-3f4f-11e6-86bb-a51ce0e646d1","method":{"position":"com.google.gson.internal.bind.TypeAdapters:267","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350309315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:79","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"a153358b-3f4f-11e6-86bb-b1f0534d4891","method":{"position":"com.google.gson.DefaultDateTypeAdapter:77","type":"CtMethodImpl","sourcecode":"public java.util.Date deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT, com.google.gson.JsonDeserializationContext context) throws com.google.gson.JsonParseException {\n    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350309315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    } else {\n        {\n            if (json == null) {\n                {\n                    if (json == null) {\n                        {\n                            if (!(json instanceof com.google.gson.JsonPrimitive)) {\n                                throw new com.google.gson.JsonParseException(\"The date should be a string value\");\n                            } \n                            java.util.Date java.util.Date = deserializeToDate(json);\n                            if (typeOfT == (java.util.Date.java.util.Date.java.lang.Class)) {\n                                return date;\n                            } else if (typeOfT == (java.sql.Timestamp.java.sql.Timestamp.java.lang.Class)) {\n                                return new java.sql.Timestamp(date.getTime());\n                            } else if (typeOfT == (java.sql.Date.java.sql.Date.java.lang.Class)) {\n                                return new java.sql.Date(date.getTime());\n                            } else {\n                                throw new java.lang.IllegalArgumentException((((getClass()) + \" cannot deserialize to \") + typeOfT));\n                            }\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350309315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new com.google.gson.JsonParseException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350309315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonParseException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:127","type":"CtInvocationImpl"},"failures":[],"tindex":"a153358c-3f4f-11e6-86bb-43eea42b005a","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:125","type":"CtMethodImpl","sourcecode":"private java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> getBoundFields(com.google.gson.Gson context, com.google.gson.reflect.TypeToken<?> type, java.lang.Class<?> raw) {\n    if (raw.isInterface()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350309315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (raw.isInterface()) {\n                {\n                    java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> = new java.util.LinkedHashMap<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField>();\n                    if (raw.isInterface()) {\n                        return result;\n                    } \n                    java.lang.reflect.Type java.lang.reflect.Type = type.getType();\n                    while (raw != (java.lang.Object.java.lang.Object.java.lang.Class)) {\n                        java.lang.reflect.Field[] java.lang.reflect.Field[] = raw.getDeclaredFields();\n                        for (java.lang.reflect.Field java.lang.reflect.Field : fields) {\n                            boolean boolean = excludeField(field, true);\n                            boolean boolean = excludeField(field, false);\n                            if ((!serialize) && (!deserialize)) {\n                                continue;\n                            } \n                            field.setAccessible(true);\n                            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, field.getGenericType());\n                            com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = createBoundField(context, field, getFieldName(field), com.google.gson.reflect.TypeToken.get(fieldType), serialize, deserialize);\n                            com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = result.put(boundField.java.lang.String, boundField);\n                            if (previous != null) {\n                                throw new java.lang.IllegalArgumentException(((declaredType + \" declares multiple JSON fields named \") + (previous.java.lang.String)));\n                            } \n                        }\n                        type = com.google.gson.reflect.TypeToken.get(com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, raw.getGenericSuperclass()));\n                        raw = type.getRawType();\n                    }\n                    return result;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350309315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"raw"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:452","type":"CtBinaryOperatorImpl"},"failures":[419,18,57,58,59,345,346,429,149,259],"tindex":"a1535c9d-3f4f-11e6-86bb-7b7d7d85de19","method":{"position":"com.google.gson.TreeTypeAdapter:103","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newTypeHierarchyFactory(java.lang.Class<?> hierarchyType, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof com.google.gson.InstanceCreator<?>) {\n        {\n            return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , null , false , hierarchyType);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350309315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:167","type":"CtUnaryOperatorImpl"},"failures":[731,736,737,738,739,740,741,742,743,404],"tindex":"a1535c9e-3f4f-11e6-86bb-efb572eeb6a5","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:131","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedHashTreeMap.Node<K, V> find(K key, boolean create) {\n    if (!create) {\n        {\n            java.util.Comparator<? super K> java.util.Comparator<? super K> = com.google.gson.internal.LinkedHashTreeMap.this.java.util.Comparator<? super K>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[] com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[] = com.google.gson.internal.LinkedHashTreeMap.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[];\n            int int = com.google.gson.internal.LinkedHashTreeMap.secondaryHash(key.hashCode());\n            int int = hash & ((table.int) - 1);\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = table[index];\n            int int = 0;\n            if (nearest != null) {\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                java.lang.Comparable<java.lang.Object> java.lang.Comparable<java.lang.Object> = comparator == (com.google.gson.internal.LinkedHashTreeMap.com.google.gson.internal.LinkedHashTreeMap.java.util.Comparator<java.lang.Comparable>) ? ((java.lang.Comparable<java.lang.Object>)(key)) : null;\n                while (true) {\n                    comparison = comparableKey != null ? comparableKey.compareTo(nearest.K) : comparator.compare(key, nearest.K);\n                    if (comparison == 0) {\n                        return nearest;\n                    } \n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = comparison < 0 ? nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> : nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    if (child == null) {\n                        break;\n                    } \n                    nearest = child;\n                }\n            } \n            if (!create) {\n                return null;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            if (nearest == null) {\n                if ((comparator == (com.google.gson.internal.LinkedHashTreeMap.com.google.gson.internal.LinkedHashTreeMap.java.util.Comparator<java.lang.Comparable>)) && (!(key instanceof java.lang.Comparable))) {\n                    throw new java.lang.ClassCastException(((key.getClass().getName()) + \" is not Comparable\"));\n                } \n                created = new com.google.gson.internal.LinkedHashTreeMap.Node<K, V>(nearest , key , hash , header , header.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>);\n                table[index] = created;\n            } else {\n                created = new com.google.gson.internal.LinkedHashTreeMap.Node<K, V>(nearest , key , hash , header , header.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>);\n                if (comparison < 0) {\n                    nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = created;\n                } else {\n                    nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = created;\n                }\n                rebalance(nearest, true);\n            }\n            if (((int)++) > (int)) {\n                doubleCapacity();\n            } \n            (int)++;\n            return created;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350309315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"create":"create"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:120","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"a15383af-3f4f-11e6-86bb-11d582313a04","method":{"position":"com.google.gson.internal.LinkedTreeMap:570","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonNull) {\n        {\n            if (o instanceof java.util.Iterator) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350309315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return (o instanceof java.util.Map.Entry) && ((findByEntry(((java.util.Map.Entry<?, ?>)(o)))) != null);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350309315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:103","type":"CtVariableReadImpl"},"failures":[441,444,160,445],"tindex":"a153aac0-3f4f-11e6-86bb-11e979d95385","method":{"position":"com.google.gson.internal.Excluder:96","type":"CtMethodImpl","sourcecode":"public com.google.gson.internal.Excluder withExclusionStrategy(com.google.gson.ExclusionStrategy exclusionStrategy, boolean serialization, boolean deserialization) {\n    if (deserialization) {\n        {\n            com.google.gson.internal.Excluder com.google.gson.internal.Excluder = clone();\n            if (serialization) {\n                result.java.util.List<com.google.gson.ExclusionStrategy> = new java.util.ArrayList<com.google.gson.ExclusionStrategy>(java.util.List<com.google.gson.ExclusionStrategy>);\n                result.java.util.List<com.google.gson.ExclusionStrategy>.add(exclusionStrategy);\n            } \n            if (deserialization) {\n                result.java.util.List<com.google.gson.ExclusionStrategy> = new java.util.ArrayList<com.google.gson.ExclusionStrategy>(java.util.List<com.google.gson.ExclusionStrategy>);\n                result.java.util.List<com.google.gson.ExclusionStrategy>.add(exclusionStrategy);\n            } \n            return result;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350309315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deserialization":"deserialization"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[124,134,136,405],"tindex":"a153aac1-3f4f-11e6-86bb-6f968fa45917","method":{"position":"com.google.gson.internal.bind.TypeAdapters:297","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350309315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"a153aac2-3f4f-11e6-86bb-873a07ea920e","method":{"position":"com.google.gson.JsonObject:121","type":"CtMethodImpl","sourcecode":"private com.google.gson.JsonElement createJsonElement(java.lang.Object value) {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350309315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350309315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (value == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350309315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            return value == null ? com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull : new com.google.gson.JsonPrimitive(value);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:233","type":"CtBinaryOperatorImpl"},"failures":[744,745,746,199,200,448,449,202,450,203,452],"tindex":"a153aac3-3f4f-11e6-86bb-3b9222592102","method":{"position":"com.google.gson.internal.Excluder:232","type":"CtMethodImpl","sourcecode":"private boolean isValidSince(com.google.gson.annotations.Since annotation) {\n    if (annotation != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350309315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (annotation != null) {\n                double double = annotation.value();\n                if (annotationVersion > (double)) {\n                    return false;\n                } \n            } \n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1413","type":"CtVariableReadImpl"},"failures":[],"tindex":"a153d1d4-3f4f-11e6-86bb-f13274c8fd1b","method":{"position":"com.google.gson.stream.JsonReader:1331","type":"CtMethodImpl","sourcecode":"private int nextNonWhitespace(boolean throwOnEof) throws java.io.IOException {\n    if (throwOnEof) {\n        {\n            char[] char[] = com.google.gson.stream.JsonReader.this.char[];\n            int int = int;\n            int int = int;\n            while (true) {\n                if (p == l) {\n                    int = p;\n                    if (!(fillBuffer(1))) {\n                        break;\n                    } \n                    p = int;\n                    l = int;\n                } \n                int int = buffer[(p++)];\n                if (c == '\\n') {\n                    (int)++;\n                    int = p;\n                    continue;\n                } else if (((c == ' ') || (c == '\\r')) || (c == '\\t')) {\n                    continue;\n                } \n                if (c == '/') {\n                    int = p;\n                    if (p == l) {\n                        (int)--;\n                        boolean boolean = fillBuffer(2);\n                        (int)++;\n                        if (!charsLoaded) {\n                            return c;\n                        } \n                    } \n                    checkLenient();\n                    char char = buffer[int];\n                    switch (peek) {\n                        case '*' :\n                            (int)++;\n                            if (!(skipTo(\"*/\"))) {\n                                throw syntaxError(\"Unterminated comment\");\n                            } \n                            p = (int) + 2;\n                            l = int;\n                            continue;\n                        case '/' :\n                            (int)++;\n                            skipToEndOfLine();\n                            p = int;\n                            l = int;\n                            continue;\n                        default :\n                            return c;\n                    }\n                } else if (c == '#') {\n                    int = p;\n                    checkLenient();\n                    skipToEndOfLine();\n                    p = int;\n                    l = int;\n                } else {\n                    int = p;\n                    return c;\n                }\n            }\n            if (throwOnEof) {\n                throw new java.io.EOFException(((((\"End of input\" + \" at line \") + (getLineNumber())) + \" column \") + (getColumnNumber())));\n            } else {\n                return -1;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350309315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"throwOnEof":"throwOnEof"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"a153d1d5-3f4f-11e6-86bb-7b19e2376133","method":{"position":"com.google.gson.JsonObject:121","type":"CtMethodImpl","sourcecode":"private com.google.gson.JsonElement createJsonElement(java.lang.Object value) {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350309315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350309315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (value == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350309315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            return value == null ? com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull : new com.google.gson.JsonPrimitive(value);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"a153f8e6-3f4f-11e6-86bb-fd907bc6a5b5","method":{"position":"com.google.gson.Gson:136","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        {\n            if (src == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350309315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return toJsonTree(src, typeOfSrc);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350309315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:113","type":"CtInvocationImpl"},"failures":[],"tindex":"a153f8e7-3f4f-11e6-86bb-57b05c2713ba","method":{"position":"com.google.gson.JsonPrimitive:93","type":"CtMethodImpl","sourcecode":"void setValue(java.lang.Object primitive) {\n    if (primitive.isBoolean()) {\n        {\n            if (primitive instanceof java.lang.Character) {\n                {\n                    if (primitive instanceof java.lang.Character) {\n                        char char = ((java.lang.Character)(primitive)).charValue();\n                        com.google.gson.JsonPrimitive.this.java.lang.Object = java.lang.String.valueOf(c);\n                    } else {\n                        com.google.gson.internal.$Gson$Preconditions.checkArgument(((primitive instanceof java.lang.Number) || (com.google.gson.JsonPrimitive.isPrimitiveOrString(primitive))));\n                        com.google.gson.JsonPrimitive.this.java.lang.Object = primitive;\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350309315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350309315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"primitive"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:554","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"a153f8e8-3f4f-11e6-86bb-519c166ea7b5","method":{"position":"com.google.gson.GsonBuilder:551","type":"CtMethodImpl","sourcecode":"private void addTypeAdaptersForDate(java.lang.String datePattern, int dateStyle, int timeStyle, java.util.List<com.google.gson.TypeAdapterFactory> factories) {\n    if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n        {\n            if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n                {\n                    com.google.gson.DefaultDateTypeAdapter com.google.gson.DefaultDateTypeAdapter;\n                    if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n                        dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(datePattern);\n                    } else if ((dateStyle != (java.text.DateFormat.java.text.DateFormat.int)) && (timeStyle != (java.text.DateFormat.java.text.DateFormat.int))) {\n                        dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(dateStyle , timeStyle);\n                    } else {\n                        return ;\n                    }\n                    factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.util.Date.java.util.Date.java.lang.Class), dateTypeAdapter));\n                    factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Timestamp.java.sql.Timestamp.java.lang.Class), dateTypeAdapter));\n                    factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Date.java.sql.Date.java.lang.Class), dateTypeAdapter));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350309315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350309315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"datePattern":"datePattern"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:578","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"a153f8e9-3f4f-11e6-86bb-6b93cce662b9","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:401","type":"CtMethodImpl","sourcecode":"private void rotateLeft(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350309315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivotLeft;\n            if (pivotLeft != null) {\n                pivotLeft.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            } \n            replaceInParent(root, pivot);\n            pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot;\n            root.int = (java.lang.Math.max((left != null ? left.int : 0), (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n            pivot.int = (java.lang.Math.max(root.int, (pivotRight != null ? pivotRight.int : 0))) + 1;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"a1541ffa-3f4f-11e6-86bb-b121b32643b0","method":{"position":"com.google.gson.internal.bind.TypeAdapters:201","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350309315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.FieldNamingPolicy:155","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"a1541ffb-3f4f-11e6-86bb-5948a63660b0","method":{"position":"com.google.gson.FieldNamingPolicy:163","type":"CtMethodImpl","sourcecode":"private static java.lang.String modifyString(char firstCharacter, java.lang.String srcString, int indexOfSubstring) {\n    if (!(java.lang.Character.isUpperCase(firstCharacter))) {\n        {\n            return indexOfSubstring < (srcString.length()) ? firstCharacter + (srcString.substring(indexOfSubstring)) : java.lang.String.valueOf(firstCharacter);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350309315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"firstCharacter":"firstCharacter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonArray:58","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"a154470c-3f4f-11e6-86bb-af4c5904393d","method":{"position":"com.google.gson.JsonArray:115","type":"CtMethodImpl","sourcecode":"public boolean contains(com.google.gson.JsonElement element) {\n    if (element == null) {\n        {\n            return java.util.List<com.google.gson.JsonElement>.contains(element);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350309315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:332","type":"CtVariableReadImpl"},"failures":[],"tindex":"a154470d-3f4f-11e6-86bb-9da03985acd8","method":{"position":"com.google.gson.internal.LinkedTreeMap:310","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (insert) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350309315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            for (com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>) {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                int int = left != null ? left.int : 0;\n                int int = right != null ? right.int : 0;\n                int int = leftHeight - rightHeight;\n                if (delta == (-2)) {\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    int int = rightRight != null ? rightRight.int : 0;\n                    int int = rightLeft != null ? rightLeft.int : 0;\n                    int int = rightLeftHeight - rightRightHeight;\n                    if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                        rotateLeft(node);\n                    } else {\n                        assert rightDelta == 1;\n                        rotateRight(right);\n                        rotateLeft(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 2) {\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    int int = leftRight != null ? leftRight.int : 0;\n                    int int = leftLeft != null ? leftLeft.int : 0;\n                    int int = leftLeftHeight - leftRightHeight;\n                    if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                        rotateRight(node);\n                    } else {\n                        assert leftDelta == (-1);\n                        rotateLeft(left);\n                        rotateRight(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 0) {\n                    node.int = leftHeight + 1;\n                    if (insert) {\n                        break;\n                    } \n                } else {\n                    assert (delta == (-1)) || (delta == 1);\n                    node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                    if (!insert) {\n                        break;\n                    } \n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"insert"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:274","type":"CtVariableReadImpl"},"failures":[],"tindex":"a1546e1e-3f4f-11e6-86bb-bf25dfd5b273","method":{"position":"com.google.gson.Gson:273","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> floatAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350309315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                {\n                    if (serializeSpecialFloatingPointValues) {\n                        {\n                            if (serializeSpecialFloatingPointValues) {\n                                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n                            } \n                            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                                @java.lang.Override\n                                public java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                                        in.nextNull();\n                                        return null;\n                                    } \n                                    return ((float)(in.nextDouble()));\n                                }\n\n                                @java.lang.Override\n                                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                                    if (value == null) {\n                                        out.nullValue();\n                                        return ;\n                                    } \n                                    float float = value.floatValue();\n                                    checkValidFloatingPoint(floatValue);\n                                    out.value(value);\n                                }\n                            };\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350309315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350309315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:154","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"a1546e1f-3f4f-11e6-86bb-f790d4f21d3d","method":{"position":"com.google.gson.internal.LinkedTreeMap:121","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedTreeMap.Node<K, V> find(K key, boolean create) {\n    if (!create) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350309315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (!create) {\n                {\n                    java.util.Comparator<? super K> java.util.Comparator<? super K> = com.google.gson.internal.LinkedTreeMap.this.java.util.Comparator<? super K>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    int int = 0;\n                    if (nearest != null) {\n                        @java.lang.SuppressWarnings(value = \"unchecked\")\n                        java.lang.Comparable<java.lang.Object> java.lang.Comparable<java.lang.Object> = comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>) ? ((java.lang.Comparable<java.lang.Object>)(key)) : null;\n                        while (true) {\n                            comparison = comparableKey != null ? comparableKey.compareTo(nearest.K) : comparator.compare(key, nearest.K);\n                            if (comparison == 0) {\n                                return nearest;\n                            } \n                            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = comparison < 0 ? nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> : nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                            if (child == null) {\n                                break;\n                            } \n                            nearest = child;\n                        }\n                    } \n                    if (!create) {\n                        return null;\n                    } \n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.this.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    if (nearest == null) {\n                        if ((comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>)) && (!(key instanceof java.lang.Comparable))) {\n                            throw new java.lang.ClassCastException(((key.getClass().getName()) + \" is not Comparable\"));\n                        } \n                        created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                        com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                    } else {\n                        created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                        if (comparison < 0) {\n                            nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                        } else {\n                            nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                        }\n                        rebalance(nearest, true);\n                    }\n                    (int)++;\n                    (int)++;\n                    return created;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350309315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"create":"create"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":84,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
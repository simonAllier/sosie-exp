{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":370,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":379,"com.google.gson.functional.StringTest.testStringValueDeserialization":377,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":607,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":137,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":273,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":535,"com.google.gson.internal.LinkedHashTreeMapTest.testIterationOrder":623,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":234,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":45,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":367,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":447,"com.google.gson.MixedStreamTest.testWriteLenient":596,"com.google.gson.internal.bind.JsonTreeWriterTest.testPrematureClose":628,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":329,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":544,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":175,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":409,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":327,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":426,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":282,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":19,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":40,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":563,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":243,"com.google.gson.JsonObjectTest.testAddingNullPropertyValue":655,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":188,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":472,"com.google.gson.functional.ObjectTest.testSingletonLists":325,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":22,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":536,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":227,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":380,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":586,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":402,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":431,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":554,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":345,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":3,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":285,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":462,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":393,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":138,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":201,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":274,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":119,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":8,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":219,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":90,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":118,"com.google.gson.functional.EnumTest.testEnumCaseMapping":39,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":0,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":378,"com.google.gson.functional.JsonTreeTest.testToJsonTree":96,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":218,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":206,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":557,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":155,"com.google.gson.JsonObjectTest.testEqualsNonEmptyObject":656,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":196,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":510,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":67,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":229,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":528,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":475,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":419,"com.google.gson.functional.ObjectTest.testNullDeserialization":357,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":435,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":390,"com.google.gson.internal.bind.JsonElementReaderTest.testNestedObjects":651,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":339,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":18,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":295,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":235,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":346,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":88,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":570,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":354,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":17,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":561,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":500,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":558,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":173,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":300,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":299,"com.google.gson.JsonParserTest.testParseString":650,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":553,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":279,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":258,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":306,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":509,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":63,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":358,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":256,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":534,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":111,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":271,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":448,"com.google.gson.functional.StreamingTypeAdaptersTest.testFromJsonTree":661,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":165,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":525,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":490,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":629,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":572,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":133,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":280,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":454,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":272,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":57,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":353,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":16,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":25,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":333,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":52,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":129,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":239,"com.google.gson.internal.LinkedHashTreeMapTest.testEmptyStringValues":622,"com.google.gson.metrics.PerformanceTest.testDummy":12,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":23,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":146,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":186,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":495,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":574,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":135,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":399,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":319,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":542,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":492,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":527,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":569,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":438,"com.google.gson.functional.CollectionTest.testSetDeserialization":425,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":564,"com.google.gson.functional.EnumTest.testEnumSet":30,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":338,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":396,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":263,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":187,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":573,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":106,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":515,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":347,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":7,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":185,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":276,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":494,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":287,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":85,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":408,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":288,"com.google.gson.internal.LinkedHashTreeMapTest.testContainsNullKeyIsAlwaysFalse":625,"com.google.gson.functional.MapTest.testHashMapDeserialization":100,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":232,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":415,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":540,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":26,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":372,"com.google.gson.MixedStreamTest.testReadNulls":597,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":156,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":368,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":406,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":486,"com.google.gson.functional.MapTest.testSortedMap":122,"com.google.gson.functional.MapTest.testMapSerialization":117,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":371,"com.google.gson.internal.bind.JsonElementReaderTest.testObject":652,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":269,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":315,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":70,"com.google.gson.functional.MapTest.testSerializeMaps":103,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":458,"com.google.gson.functional.MapTest.testComplexKeysSerialization":130,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":395,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":134,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":611,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":77,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":37,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":437,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":484,"com.google.gson.internal.LinkedTreeMapTest.testRemoveRootDoesNotDoubleUnlink":648,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":168,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":403,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":35,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":204,"com.google.gson.internal.bind.JsonElementReaderTest.testWrongType":646,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":657,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":47,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":356,"com.google.gson.functional.MapTest.testStringKeyDeserialization":132,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":74,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":578,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":302,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":136,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":238,"com.google.gson.functional.PrettyPrintingTest.testMap":202,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":233,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":442,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":412,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":374,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":404,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":505,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":2,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":76,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":383,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":387,"com.google.gson.functional.MapTest.testMapSerializationEmpty":131,"com.google.gson.functional.CollectionTest.testQueueSerialization":416,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":522,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":658,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":264,"com.google.gson.functional.MapTest.testMapOfMapSerialization":116,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":255,"com.google.gson.JavaSerializationTest.testMapIsSerializable":641,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":530,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":422,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":266,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":615,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":587,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictBoxedNansAndInfinities":632,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":381,"com.google.gson.functional.FieldNamingTest.testIdentity":459,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":575,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":80,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":359,"com.google.gson.internal.bind.JsonElementReaderTest.testNestedArrays":647,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":51,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":95,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":177,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":324,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":221,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":9,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":382,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":566,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":42,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":261,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":546,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":14,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":517,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":524,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":556,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":614,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":97,"com.google.gson.functional.MapTest.testMapSubclassSerialization":102,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":298,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":28,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":195,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":398,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":253,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":444,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":460,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":593,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":313,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":449,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":504,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":401,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":184,"com.google.gson.functional.EnumTest.testEnumSubclass":33,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":275,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":4,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":343,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":220,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":565,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":281,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":577,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":163,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":223,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":44,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":259,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":43,"com.google.gson.stream.JsonWriterTest.testNullName":602,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":144,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":13,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":66,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":265,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":337,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":50,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":257,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":549,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":326,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":99,"com.google.gson.MixedStreamTest.testWriteNulls":594,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":65,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":452,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":59,"com.google.gson.CommentsTest.testParseComments":5,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":181,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":436,"com.google.gson.JsonObjectTest.testReadPropertyWithEmptyStringName":653,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":328,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":478,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":582,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":72,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":212,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":278,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":314,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":121,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":385,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":140,"com.google.gson.MixedStreamTest.testReadInvalidState":591,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":560,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":193,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":297,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":551,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":316,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":231,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":618,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":78,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":209,"com.google.gson.internal.bind.JsonTreeWriterTest.testWriteAfterClose":633,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":248,"com.google.gson.JsonArrayTest.testRemove":605,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":613,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":292,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":532,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":62,"com.google.gson.functional.MapTest.testMapDeserialization":109,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":526,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":207,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":98,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":471,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":108,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":153,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":477,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":473,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":169,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":34,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":94,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":502,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":344,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":360,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":158,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":445,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":145,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":511,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":192,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":41,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":167,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":120,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":203,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":609,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":555,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":217,"com.google.gson.functional.PrimitiveTest.testShortSerialization":296,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":584,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":480,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":284,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":92,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictNansAndInfinities":631,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":254,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":283,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":230,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":516,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":455,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":32,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":411,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":27,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":104,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":247,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":304,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":432,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":450,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":636,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":485,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":543,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":601,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":634,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":311,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":305,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":49,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":152,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":361,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":576,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":461,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":497,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":637,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":290,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":198,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":260,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":579,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":365,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":332,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":38,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":160,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":397,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":420,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":512,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":440,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":580,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":470,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":479,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":533,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":237,"com.google.gson.internal.LinkedHashTreeMapTest.testClear":620,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":489,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":519,"com.google.gson.stream.JsonWriterTest.testNullStringValue":603,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":481,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":538,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":149,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":413,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":224,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":291,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":262,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":308,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":141,"com.google.gson.JsonPrimitiveTest.testEquals":639,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":31,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":476,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":376,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":317,"com.google.gson.functional.MapTest.testGeneralMapField":126,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":330,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":56,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":310,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":71,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":441,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":567,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":545,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":124,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":172,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":228,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":498,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":286,"com.google.gson.MixedStreamTest.testReadMixedStreamed":600,"com.google.gson.JsonObjectTest.testDeepCopy":659,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":112,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":249,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":513,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":10,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":427,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":488,"com.google.gson.stream.JsonWriterTest.testNonFiniteDoubles":638,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":21,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":267,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":91,"com.google.gson.JavaSerializationTest.testNumberIsSerializable":640,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":493,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":531,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":113,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":200,"com.google.gson.JsonArrayTest.testDeepCopy":643,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":101,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":309,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":583,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":216,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":465,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":250,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":635,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":529,"com.google.gson.internal.LinkedHashTreeMapTest.testEqualsAndHashCode":626,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":453,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":81,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":421,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":496,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":483,"com.google.gson.functional.ObjectTest.testNestedDeserialization":366,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":589,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":139,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":351,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":373,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":143,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":89,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":307,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":211,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":46,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":114,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":384,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":183,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":294,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":159,"com.google.gson.JavaSerializationTest.testListIsSerializable":642,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":179,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":451,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":430,"com.google.gson.functional.ObjectTest.testNullSerialization":340,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":162,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":199,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":105,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":125,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":222,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":68,"com.google.gson.functional.MapTest.testInterfaceTypeMap":123,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":443,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":148,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":225,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":36,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":617,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":166,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":446,"com.google.gson.MixedStreamTest.testReadClosed":592,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":499,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":87,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":241,"com.google.gson.MixedStreamTest.testWriteClosed":599,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":375,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":418,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":151,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":331,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":559,"com.google.gson.internal.LinkedHashTreeMapTest.testPutNonComparableKeyFails":624,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":189,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":147,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":214,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":210,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":363,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":552,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":154,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":334,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":417,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":466,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":270,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":468,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":164,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":423,"com.google.gson.internal.bind.JsonElementReaderTest.testSkipValue":645,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":539,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":82,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":312,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":612,"com.google.gson.JsonParserTest.testParseInvalidJson":644,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":246,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":93,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":507,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":53,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":439,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":213,"com.google.gson.functional.CollectionTest.testQueueDeserialization":433,"com.google.gson.internal.LinkedHashTreeMapTest.testPutOverrides":619,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":252,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":268,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":389,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":369,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":467,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":550,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":110,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":355,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":521,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":174,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":364,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":410,"com.google.gson.functional.MapTest.testRawMapSerialization":128,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":590,"com.google.gson.JsonParserTest.testParseReader":649,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":428,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":537,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":157,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":349,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":320,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":482,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":608,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":58,"com.google.gson.functional.PrimitiveTest.testByteSerialization":293,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":400,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":610,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":322,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":170,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":236,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":176,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":69,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":456,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":6,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":190,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":386,"com.google.gson.functional.MapTest.testMapWithQuotes":115,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":244,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":506,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":388,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":571,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":487,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":588,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":616,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":301,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":503,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":562,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":474,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":180,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":362,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":208,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":277,"com.google.gson.functional.ObjectTest.testEmptyStringDeserialization":342,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":518,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":75,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":336,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":547,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":508,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":178,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":464,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":520,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":289,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":407,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":424,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":61,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":54,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":182,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":548,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":161,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":83,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":469,"com.google.gson.internal.LinkedHashTreeMapTest.testContainsNonComparableKeyReturnsFalse":621,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":29,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":405,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":194,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":226,"com.google.gson.internal.LinkedHashTreeMapTest.testRemoveRootDoesNotDoubleUnlink":627,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":585,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":348,"com.google.gson.functional.ObjectTest.testNestedSerialization":350,"com.google.gson.JsonObjectTest.testAddingStringProperties":660,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":142,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":171,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":240,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":392,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":215,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":127,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":318,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":197,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":11,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":598,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":79,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":341,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":303,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":150,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":20,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":523,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":1,"com.google.gson.GsonBuilderTest.testCreatingMoreThanOnce":15,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":242,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":352,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":501,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":463,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":391,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":64,"com.google.gson.functional.CollectionTest.testSetSerialization":429,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":568,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":205,"com.google.gson.functional.StringTest.testStringValueSerialization":394,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":581,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":321,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":48,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":414,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":604,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":55,"com.google.gson.MixedStreamTest.testWriteInvalidState":595,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":335,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":245,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":73,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":251,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":24,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":514,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":457,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":434,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":654,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":84,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":86,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":630,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":191,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":541,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":323,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":107,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":606,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":60,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":491},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:218","type":"CtVariableReadImpl"},"failures":[],"tindex":"cd20185a-3f1e-11e6-a9dc-33c03502a31f","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:245","type":"CtMethodImpl","sourcecode":"void removeInternal(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node, boolean unlink) {\n    if (unlink) {\n        {\n            if (unlink) {\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            if ((left != null) && (right != null)) {\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = (left.int) > (right.int) ? left.last() : right.first();\n                removeInternal(adjacent, false);\n                int int = 0;\n                left = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                if (left != null) {\n                    leftHeight = left.int;\n                    adjacent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left;\n                    left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                } \n                int int = 0;\n                right = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                if (right != null) {\n                    rightHeight = right.int;\n                    adjacent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                } \n                adjacent.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                replaceInParent(node, adjacent);\n                return ;\n            } else if (left != null) {\n                replaceInParent(node, left);\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } else if (right != null) {\n                replaceInParent(node, right);\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } else {\n                replaceInParent(node, null);\n            }\n            rebalance(originalParent, false);\n            (int)--;\n            (int)++;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329753031/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"unlink":"unlink"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:250","type":"CtVariableReadImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601],"tindex":"cd2129cb-3f1e-11e6-a9dc-5f48726934e9","method":{"position":"com.google.gson.Gson:273","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> floatAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return ((float)(in.nextDouble()));\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    float float = value.floatValue();\n                    checkValidFloatingPoint(floatValue);\n                    out.value(value);\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329753031/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl"},"failures":[602],"tindex":"cd22142c-3f1e-11e6-a9dc-6b6c4eca5de3","method":{"position":"com.google.gson.stream.JsonWriter:385","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter name(java.lang.String name) throws java.io.IOException {\n    if (name == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329753031/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (name == null) {\n                throw new java.lang.NullPointerException(\"name == null\");\n            } \n            if ((java.lang.String) != null) {\n                throw new java.lang.IllegalStateException();\n            } \n            if ((int) == 0) {\n                throw new java.lang.IllegalStateException(\"JsonWriter is closed.\");\n            } \n            java.lang.String = name;\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl"},"failures":[475],"tindex":"cd223b3d-3f1e-11e6-a9dc-6d73bdaffc12","method":{"position":"com.google.gson.Gson:468","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329753031/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src == null) {\n                return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            return toJsonTree(src, src.getClass());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl"},"failures":[603,604,64,75,110,123,125,137,146,148,154,419,470,473,476,477,482,484,516,547],"tindex":"cd223b3e-3f1e-11e6-a9dc-6390f31b7feb","method":{"position":"com.google.gson.stream.JsonWriter:413","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329753031/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            writeDeferredName();\n            beforeValue(false);\n            string(value);\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:98","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"cd22895f-3f1e-11e6-a9dc-53e7660bab5d","method":{"position":"com.google.gson.internal.Primitives:69","type":"CtMethodImpl","sourcecode":"public static boolean isPrimitive(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.ParameterizedType) {\n        {\n            if (type instanceof java.lang.reflect.ParameterizedType) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329753031/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return com.google.gson.internal.Primitives.com.google.gson.internal.Primitives.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.containsKey(type);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329753031/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"cd228960-3f1e-11e6-a9dc-5d74b3c01bc5","method":{"position":"com.google.gson.Gson:847","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(com.google.gson.JsonElement json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329753031/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[296],"tindex":"cd22af71-3f1e-11e6-a9dc-8f9ff190e787","method":{"position":"com.google.gson.internal.bind.TypeAdapters:223","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329753031/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:198","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"cd22af72-3f1e-11e6-a9dc-054b0a9fc3ef","method":{"position":"com.google.gson.TypeAdapter:140","type":"CtMethodImpl","sourcecode":"public final void toJson(java.io.Writer out, T value) throws java.io.IOException {\n    if (out == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329753031/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = new com.google.gson.stream.JsonWriter(out);\n            write(writer, value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:123","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"cd22af73-3f1e-11e6-a9dc-311abb1e56af","method":{"position":"com.google.gson.reflect.TypeToken:272","type":"CtMethodImpl","sourcecode":"private static boolean matches(java.lang.reflect.Type from, java.lang.reflect.Type to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeMap) {\n    if (to == null) {\n        {\n            if (to == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329753031/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return (to.equals(from)) || ((from instanceof java.lang.reflect.TypeVariable) && (to.equals(typeMap.get(((java.lang.reflect.TypeVariable<?>)(from)).getName()))));\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329753031/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"to"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"cd22d684-3f1e-11e6-a9dc-a59e56fed3d0","method":{"position":"com.google.gson.Gson:576","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329753031/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            try {\n                com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                toJson(src, typeOfSrc, jsonWriter);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:99","type":"CtVariableReadImpl"},"failures":[369,373,374,375],"tindex":"cd22d685-3f1e-11e6-a9dc-fd8d33208a0a","method":{"position":"com.google.gson.internal.Excluder:96","type":"CtMethodImpl","sourcecode":"public com.google.gson.internal.Excluder withExclusionStrategy(com.google.gson.ExclusionStrategy exclusionStrategy, boolean serialization, boolean deserialization) {\n    if (serialization) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329753031/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.Excluder com.google.gson.internal.Excluder = clone();\n            if (serialization) {\n                result.java.util.List<com.google.gson.ExclusionStrategy> = new java.util.ArrayList<com.google.gson.ExclusionStrategy>(java.util.List<com.google.gson.ExclusionStrategy>);\n                result.java.util.List<com.google.gson.ExclusionStrategy>.add(exclusionStrategy);\n            } \n            if (deserialization) {\n                result.java.util.List<com.google.gson.ExclusionStrategy> = new java.util.ArrayList<com.google.gson.ExclusionStrategy>(java.util.List<com.google.gson.ExclusionStrategy>);\n                result.java.util.List<com.google.gson.ExclusionStrategy>.add(exclusionStrategy);\n            } \n            return result;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serialization":"serialization"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"cd22fd96-3f1e-11e6-a9dc-038e909dec74","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:101","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nvoid read(com.google.gson.stream.JsonReader reader, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329753031/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            java.lang.Object java.lang.Object = com.google.gson.TypeAdapter<?>.read(reader);\n            if ((fieldValue != null) || (!isPrimitive)) {\n                field.set(value, fieldValue);\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl"},"failures":[482,516,556],"tindex":"cd22fd97-3f1e-11e6-a9dc-8b1b27807816","method":{"position":"com.google.gson.Gson:532","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src != null) {\n        {\n            java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n            toJson(src, typeOfSrc, writer);\n            return writer.toString();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329753031/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:137","type":"CtBinaryOperatorImpl"},"failures":[605],"tindex":"cd234bb8-3f1e-11e6-a9dc-13b95f44d1cf","method":{"position":"com.google.gson.JsonArray:115","type":"CtMethodImpl","sourcecode":"public boolean contains(com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonObject) {\n        {\n            return java.util.List<com.google.gson.JsonElement>.contains(element);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329753031/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:120","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"cd234bb9-3f1e-11e6-a9dc-8f64da7c67aa","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:839","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonNull) {\n        {\n            return containsKey(o);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329753031/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:92","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"cd234bba-3f1e-11e6-a9dc-bd5ab264b28e","method":{"position":"com.google.gson.internal.LinkedTreeMap:574","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (o instanceof java.util.Iterator) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329753031/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (!(o instanceof java.util.Map.Entry)) {\n                return false;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n            if (node == null) {\n                return false;\n            } \n            removeInternal(node, true);\n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:213","type":"CtBinaryOperatorImpl"},"failures":[606,607,103,138,201,202,203,204,205,206,207,208,593],"tindex":"cd2372cb-3f1e-11e6-a9dc-efe7a4d14d36","method":{"position":"com.google.gson.stream.JsonWriter:212","type":"CtMethodImpl","sourcecode":"public final void setIndent(java.lang.String indent) {\n    if ((indent.length()) == 0) {\n        {\n            if ((indent.length()) == 0) {\n                com.google.gson.stream.JsonWriter.this.java.lang.String = null;\n                com.google.gson.stream.JsonWriter.this.java.lang.String = \":\";\n            } else {\n                com.google.gson.stream.JsonWriter.this.java.lang.String = indent;\n                com.google.gson.stream.JsonWriter.this.java.lang.String = \": \";\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329753031/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"indent"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:430","type":"CtFieldReadImpl"},"failures":[0,1,2,3,4,7,8,9,10,11,608,609,610,13,14,16,611,17,18,19,22,24,25,26,27,28,29,30,31,32,33,36,38,39,40,612,604,613,614,615,41,44,45,47,49,51,52,53,54,56,57,58,59,60,63,65,69,71,73,75,77,80,81,83,85,86,87,88,89,90,91,92,93,94,95,96,98,102,103,106,108,115,116,117,120,121,123,124,125,126,128,130,131,133,136,137,138,139,141,142,143,144,145,146,147,148,149,150,153,154,155,616,156,157,158,159,160,161,162,165,167,170,171,172,173,174,175,176,177,178,179,180,182,183,184,185,186,187,189,190,191,193,196,197,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,220,222,228,231,239,240,246,248,249,252,255,257,258,261,262,266,275,277,279,280,283,286,288,292,293,294,295,296,297,298,302,304,308,309,311,617,316,318,321,323,324,325,328,331,334,338,340,341,344,346,347,349,350,351,353,358,360,361,363,369,371,378,379,380,381,382,385,387,391,394,397,400,402,403,408,409,410,411,412,416,417,418,419,420,423,426,427,429,430,432,434,435,436,437,439,440,441,442,443,444,445,446,455,456,457,458,459,460,461,464,465,468,473,475,484,486,489,490,497,498,499,503,505,506,508,510,511,514,516,518,519,520,521,522,524,526,527,529,531,532,533,534,536,539,541,542,544,545,547,548,549,550,551,552,555,556,558,560,561,562,563,564,565,566,567,569,570,571,573,577,578,579,581,582,583,585,587,588,589,590,593,594,595,596,598,599],"tindex":"cd2399dc-3f1e-11e6-a9dc-4beec6c2f361","method":{"position":"com.google.gson.stream.JsonWriter:268","type":"CtMethodImpl","sourcecode":"public final void setSerializeNulls(boolean serializeNulls) {\n    if (serializeNulls) {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = serializeNulls;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329753031/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeNulls":"serializeNulls"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:188","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"cd23c0ed-3f1e-11e6-a9dc-b57331d9de42","method":{"position":"com.google.gson.reflect.TypeToken:272","type":"CtMethodImpl","sourcecode":"private static boolean matches(java.lang.reflect.Type from, java.lang.reflect.Type to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeMap) {\n    if (to == null) {\n        {\n            if (to == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329753031/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return (to.equals(from)) || ((from instanceof java.lang.reflect.TypeVariable) && (to.equals(typeMap.get(((java.lang.reflect.TypeVariable<?>)(from)).getName()))));\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329753031/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"to"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:154","type":"CtUnaryOperatorImpl"},"failures":[618,619,620,621,622,623,624,625,626,627],"tindex":"cd23c0ee-3f1e-11e6-a9dc-5f261ed3acec","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:131","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedHashTreeMap.Node<K, V> find(K key, boolean create) {\n    if (!create) {\n        {\n            java.util.Comparator<? super K> java.util.Comparator<? super K> = com.google.gson.internal.LinkedHashTreeMap.this.java.util.Comparator<? super K>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[] com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[] = com.google.gson.internal.LinkedHashTreeMap.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[];\n            int int = com.google.gson.internal.LinkedHashTreeMap.secondaryHash(key.hashCode());\n            int int = hash & ((table.int) - 1);\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = table[index];\n            int int = 0;\n            if (nearest != null) {\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                java.lang.Comparable<java.lang.Object> java.lang.Comparable<java.lang.Object> = comparator == (com.google.gson.internal.LinkedHashTreeMap.com.google.gson.internal.LinkedHashTreeMap.java.util.Comparator<java.lang.Comparable>) ? ((java.lang.Comparable<java.lang.Object>)(key)) : null;\n                while (true) {\n                    comparison = comparableKey != null ? comparableKey.compareTo(nearest.K) : comparator.compare(key, nearest.K);\n                    if (comparison == 0) {\n                        return nearest;\n                    } \n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = comparison < 0 ? nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> : nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    if (child == null) {\n                        break;\n                    } \n                    nearest = child;\n                }\n            } \n            if (!create) {\n                return null;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            if (nearest == null) {\n                if ((comparator == (com.google.gson.internal.LinkedHashTreeMap.com.google.gson.internal.LinkedHashTreeMap.java.util.Comparator<java.lang.Comparable>)) && (!(key instanceof java.lang.Comparable))) {\n                    throw new java.lang.ClassCastException(((key.getClass().getName()) + \" is not Comparable\"));\n                } \n                created = new com.google.gson.internal.LinkedHashTreeMap.Node<K, V>(nearest , key , hash , header , header.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>);\n                table[index] = created;\n            } else {\n                created = new com.google.gson.internal.LinkedHashTreeMap.Node<K, V>(nearest , key , hash , header , header.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>);\n                if (comparison < 0) {\n                    nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = created;\n                } else {\n                    nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = created;\n                }\n                rebalance(nearest, true);\n            }\n            if (((int)++) > (int)) {\n                doubleCapacity();\n            } \n            (int)++;\n            return created;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329753031/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"create":"create"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:98","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"cd240f0f-3f1e-11e6-a9dc-253f5abc943a","method":{"position":"com.google.gson.internal.$Gson$Types:217","type":"CtMethodImpl","sourcecode":"public static java.lang.String typeToString(java.lang.reflect.Type type) {\n    return type instanceof java.lang.Class ? ((java.lang.Class<?>)(type)).getName() : type.toString();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:109","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"cd243620-3f1e-11e6-a9dc-13de5fb8476f","method":{"position":"com.google.gson.internal.$Gson$Types:511","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    return (o instanceof java.lang.reflect.GenericArrayType) && (com.google.gson.internal.$Gson$Types.equals(com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl.this, ((java.lang.reflect.GenericArrayType)(o))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:109","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"cd243621-3f1e-11e6-a9dc-037477cbc097","method":{"position":"com.google.gson.JsonObject:186","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonPrimitive) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329753031/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (o == (com.google.gson.JsonObject.this)) || ((o instanceof com.google.gson.JsonObject) && (((com.google.gson.JsonObject)(o)).com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.equals(com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"cd243622-3f1e-11e6-a9dc-c546de0e013d","method":{"position":"com.google.gson.internal.bind.TypeAdapters:282","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329753031/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"cd243623-3f1e-11e6-a9dc-8faa7b23237b","method":{"position":"com.google.gson.TypeAdapter:254","type":"CtMethodImpl","sourcecode":"public final T fromJson(java.io.Reader in) throws java.io.IOException {\n    if (in == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329753031/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(in);\n            return read(reader);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:455","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"cd245d34-3f1e-11e6-a9dc-97dded6b1912","method":{"position":"com.google.gson.TreeTypeAdapter:84","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newFactory(com.google.gson.reflect.TypeToken<?> exactType, java.lang.Object typeAdapter) {\n    if ((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) {\n        {\n            return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , exactType , false , null);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329753031/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.TreeTypeAdapter:55","type":"CtInvocationImpl"},"failures":[608,609,610,628,611,629,630,631,632,633,634,635,636,637,93,94,95,96,123,126,137,138,143,144,145,149,150,155,175,176,178,179,182,213,214,370,486,489,490],"tindex":"cd245d35-3f1e-11e6-a9dc-352c08c4b241","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:75","type":"CtMethodImpl","sourcecode":"private void put(com.google.gson.JsonElement value) {\n    if (value.isJsonNull()) {\n        {\n            if ((java.lang.String) != null) {\n                if ((!(value.isJsonNull())) || (getSerializeNulls())) {\n                    com.google.gson.JsonObject com.google.gson.JsonObject = ((com.google.gson.JsonObject)(peek()));\n                    object.add(java.lang.String, value);\n                } \n                java.lang.String = null;\n            } else if (java.util.List<com.google.gson.JsonElement>.isEmpty()) {\n                com.google.gson.JsonElement = value;\n            } else {\n                com.google.gson.JsonElement com.google.gson.JsonElement = peek();\n                if (element instanceof com.google.gson.JsonArray) {\n                    ((com.google.gson.JsonArray)(element)).add(value);\n                } else {\n                    throw new java.lang.IllegalStateException();\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329753031/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"cd248446-3f1e-11e6-a9dc-81d81e17dd16","method":{"position":"com.google.gson.Gson:552","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        {\n            if (src != null) {\n                toJson(src, src.getClass(), writer);\n            } else {\n                toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull, writer);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329753031/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl"},"failures":[],"tindex":"cd248447-3f1e-11e6-a9dc-7b8d35bbd61e","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:86","type":"CtMethodImpl","sourcecode":"private com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField createBoundField(final com.google.gson.Gson context, final java.lang.reflect.Field field, final java.lang.String name, final com.google.gson.reflect.TypeToken<?> fieldType, boolean serialize, boolean deserialize) {\n    if (field.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329753031/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final boolean boolean = com.google.gson.internal.Primitives.isPrimitive(fieldType.getRawType());\n            return new com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField(name, serialize, deserialize) {\n                final com.google.gson.TypeAdapter<?> typeAdapter = getFieldAdapter(context, field, fieldType);\n\n                @java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n                @java.lang.Override\n                void write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                    java.lang.Object java.lang.Object = field.get(value);\n                    com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n                    t.write(writer, fieldValue);\n                }\n\n                @java.lang.Override\n                void read(com.google.gson.stream.JsonReader reader, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                    java.lang.Object java.lang.Object = com.google.gson.TypeAdapter<?>.read(reader);\n                    if ((fieldValue != null) || (!isPrimitive)) {\n                        field.set(value, fieldValue);\n                    } \n                }\n\n                public boolean writeField(java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                    if (!(boolean))\n                        return false;\n                    \n                    java.lang.Object java.lang.Object = field.get(value);\n                    return fieldValue != value;\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"field"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"cd24ab58-3f1e-11e6-a9dc-95a57ac66641","method":{"position":"com.google.gson.internal.$Gson$Types:158","type":"CtMethodImpl","sourcecode":"public static boolean equals(java.lang.reflect.Type a, java.lang.reflect.Type b) {\n    if (a == b) {\n        return true;\n    } else if (a instanceof java.lang.Class) {\n        return a.equals(b);\n    } else if (a instanceof java.lang.reflect.ParameterizedType) {\n        if (!(b instanceof java.lang.reflect.ParameterizedType)) {\n            return false;\n        } \n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(a));\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(b));\n        return ((com.google.gson.internal.$Gson$Types.equal(pa.getOwnerType(), pb.getOwnerType())) && (pa.getRawType().equals(pb.getRawType()))) && (java.util.Arrays.equals(pa.getActualTypeArguments(), pb.getActualTypeArguments()));\n    } else if (a instanceof java.lang.reflect.GenericArrayType) {\n        if (!(b instanceof java.lang.reflect.GenericArrayType)) {\n            return false;\n        } \n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(a));\n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(b));\n        return com.google.gson.internal.$Gson$Types.equals(ga.getGenericComponentType(), gb.getGenericComponentType());\n    } else if (a instanceof java.lang.reflect.WildcardType) {\n        if (!(b instanceof java.lang.reflect.WildcardType)) {\n            return false;\n        } \n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(a));\n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(b));\n        return (java.util.Arrays.equals(wa.getUpperBounds(), wb.getUpperBounds())) && (java.util.Arrays.equals(wa.getLowerBounds(), wb.getLowerBounds()));\n    } else if (a instanceof java.lang.reflect.TypeVariable) {\n        if (!(b instanceof java.lang.reflect.TypeVariable)) {\n            return false;\n        } \n        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(a));\n        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(b));\n        return ((va.getGenericDeclaration()) == (vb.getGenericDeclaration())) && (va.getName().equals(vb.getName()));\n    } else {\n        return false;\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:462","type":"CtBinaryOperatorImpl"},"failures":[638],"tindex":"cd24ab59-3f1e-11e6-a9dc-6d7af54f51ee","method":{"position":"com.google.gson.stream.JsonWriter:461","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(double value) throws java.io.IOException {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329753031/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                throw new java.lang.IllegalArgumentException((\"Numeric values must be finite, but was \" + value));\n            } \n            writeDeferredName();\n            beforeValue(false);\n            java.io.Writer.append(java.lang.Double.toString(value));\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:298","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"cd24d26a-3f1e-11e6-a9dc-4f4c099fa29e","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:162","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(double value) throws java.io.IOException {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                {\n                    if ((!(isLenient())) && ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value)))) {\n                        throw new java.lang.IllegalArgumentException((\"JSON forbids NaN and infinities: \" + value));\n                    } \n                    put(new com.google.gson.JsonPrimitive(value));\n                    return com.google.gson.internal.bind.JsonTreeWriter.this;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329753031/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329753031/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:113","type":"CtInvocationImpl"},"failures":[639,93,96,557],"tindex":"cd24d26b-3f1e-11e6-a9dc-698970fe2ecb","method":{"position":"com.google.gson.JsonPrimitive:333","type":"CtMethodImpl","sourcecode":"private static boolean isIntegral(com.google.gson.JsonPrimitive primitive) {\n    if (primitive.isBoolean()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329753031/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((primitive.java.lang.Object) instanceof java.lang.Number) {\n                java.lang.Number java.lang.Number = ((java.lang.Number)(primitive.java.lang.Object));\n                return ((((number instanceof java.math.BigInteger) || (number instanceof java.lang.Long)) || (number instanceof java.lang.Integer)) || (number instanceof java.lang.Short)) || (number instanceof java.lang.Byte);\n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"primitive"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:726","type":"CtBinaryOperatorImpl"},"failures":[630,634],"tindex":"cd24f97c-3f1e-11e6-a9dc-574faa9a3662","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:170","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(long value) throws java.io.IOException {\n    if (value == 0) {\n        {\n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329753031/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:133","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"cd24f97d-3f1e-11e6-a9dc-6d2c92d231a6","method":{"position":"com.google.gson.internal.Primitives:69","type":"CtMethodImpl","sourcecode":"public static boolean isPrimitive(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.ParameterizedType) {\n        {\n            if (type instanceof java.lang.reflect.ParameterizedType) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329753031/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return com.google.gson.internal.Primitives.com.google.gson.internal.Primitives.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.containsKey(type);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329753031/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:462","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"cd25208e-3f1e-11e6-a9dc-9d86862f17fd","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:162","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(double value) throws java.io.IOException {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                {\n                    if ((!(isLenient())) && ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value)))) {\n                        throw new java.lang.IllegalArgumentException((\"JSON forbids NaN and infinities: \" + value));\n                    } \n                    put(new com.google.gson.JsonPrimitive(value));\n                    return com.google.gson.internal.bind.JsonTreeWriter.this;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329753031/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329753031/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:554","type":"CtBinaryOperatorImpl"},"failures":[0,1,2,3,4,6,7,8,9,10,13,14,15,19,20,21,22,23,24,25,26,32,45,46,47,48,49,50,51,52,64,82,85,86,87,88,89,90,91,92,98,99,103,110,123,126,127,137,138,139,140,156,158,159,160,161,162,163,164,166,167,168,169,170,175,176,177,178,179,182,188,192,194,197,198,201,202,203,204,205,206,207,208,215,216,219,246,266,279,280,288,294,302,308,314,315,316,317,318,319,320,322,335,346,367,368,369,370,371,372,373,374,375,376,404,407,432,434,436,441,442,443,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,473,474,475,476,477,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,518,529,532,533,539,543,550,551,553,554,566,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,596,598],"tindex":"cd25208f-3f1e-11e6-a9dc-67b348b87b9b","method":{"position":"com.google.gson.GsonBuilder:551","type":"CtMethodImpl","sourcecode":"private void addTypeAdaptersForDate(java.lang.String datePattern, int dateStyle, int timeStyle, java.util.List<com.google.gson.TypeAdapterFactory> factories) {\n    if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n        {\n            com.google.gson.DefaultDateTypeAdapter com.google.gson.DefaultDateTypeAdapter;\n            if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n                dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(datePattern);\n            } else if ((dateStyle != (java.text.DateFormat.java.text.DateFormat.int)) && (timeStyle != (java.text.DateFormat.java.text.DateFormat.int))) {\n                dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(dateStyle , timeStyle);\n            } else {\n                return ;\n            }\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.util.Date.java.util.Date.java.lang.Class), dateTypeAdapter));\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Timestamp.java.sql.Timestamp.java.lang.Class), dateTypeAdapter));\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Date.java.sql.Date.java.lang.Class), dateTypeAdapter));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329753031/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"datePattern":"datePattern"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl"},"failures":[475],"tindex":"cd2547a0-3f1e-11e6-a9dc-ef386355c7c3","method":{"position":"com.google.gson.Gson:133","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src) {\n    if (src != null) {\n        {\n            return toJsonTree(src);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329753031/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"cd2547a1-3f1e-11e6-a9dc-bd1274395e97","method":{"position":"com.google.gson.Gson:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329753031/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            out.value(value.toString());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:98","type":"CtBinaryOperatorImpl"},"failures":[640,641,642,5,608,609,28,29,30,31,32,33,34,38,612,604,613,614,615,65,67,79,97,101,104,105,106,107,108,109,110,112,113,114,117,118,119,120,122,123,124,125,126,127,129,130,131,132,133,134,135,136,137,144,147,151,180,183,184,185,189,190,191,193,196,197,198,203,208,209,210,212,213,214,216,285,325,337,353,361,364,399,406,409,410,413,414,416,417,419,421,422,423,425,428,430,433,452,453,470,476,477,484,486,487,488,489,490,508,560,562,564,565,568,570,573,575,584,589,596,598],"tindex":"cd256eb2-3f1e-11e6-a9dc-eb5e40beaa66","method":{"position":"com.google.gson.internal.ConstructorConstructor:128","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nprivate <T>com.google.gson.internal.ObjectConstructor<T> newDefaultImplementationConstructor(final java.lang.reflect.Type type, java.lang.Class<? super T> rawType) {\n    if (type instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329753031/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (java.util.Collection.java.util.Collection.java.lang.Class.isAssignableFrom(rawType)) {\n                if (java.util.SortedSet.java.util.SortedSet.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.TreeSet<java.lang.Object>()));\n                        }\n                    };\n                } else if (java.util.EnumSet.java.util.EnumSet.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        @java.lang.SuppressWarnings(value = \"rawtypes\")\n                        public T construct() {\n                            if (type instanceof java.lang.reflect.ParameterizedType) {\n                                java.lang.reflect.Type java.lang.reflect.Type = ((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0];\n                                if (elementType instanceof java.lang.Class) {\n                                    return ((T)(java.util.EnumSet.noneOf(((java.lang.Class)(elementType)))));\n                                } else {\n                                    throw new com.google.gson.JsonIOException((\"Invalid EnumSet type: \" + (type.toString())));\n                                }\n                            } else {\n                                throw new com.google.gson.JsonIOException((\"Invalid EnumSet type: \" + (type.toString())));\n                            }\n                        }\n                    };\n                } else if (java.util.Set.java.util.Set.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedHashSet<java.lang.Object>()));\n                        }\n                    };\n                } else if (java.util.Queue.java.util.Queue.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedList<java.lang.Object>()));\n                        }\n                    };\n                } else {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.ArrayList<java.lang.Object>()));\n                        }\n                    };\n                }\n            } \n            if (java.util.Map.java.util.Map.java.lang.Class.isAssignableFrom(rawType)) {\n                if (java.util.SortedMap.java.util.SortedMap.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.TreeMap<java.lang.Object, java.lang.Object>()));\n                        }\n                    };\n                } else if ((type instanceof java.lang.reflect.ParameterizedType) && (!(java.lang.String.java.lang.String.java.lang.Class.isAssignableFrom(com.google.gson.reflect.TypeToken.get(((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0]).getRawType())))) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedHashMap<java.lang.Object, java.lang.Object>()));\n                        }\n                    };\n                } else {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new com.google.gson.internal.LinkedTreeMap<java.lang.String, java.lang.Object>()));\n                        }\n                    };\n                }\n            } \n            return null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"cd25bcd3-3f1e-11e6-a9dc-2314e6851926","method":{"position":"com.google.gson.FieldNamingPolicy:122","type":"CtMethodImpl","sourcecode":"private static java.lang.String separateCamelCase(java.lang.String name, java.lang.String separator) {\n    if (name == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329753031/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            for (int int = 0 ; i < (name.length()) ; i++) {\n                char char = name.charAt(i);\n                if ((java.lang.Character.isUpperCase(character)) && ((translation.length()) != 0)) {\n                    translation.append(separator);\n                } \n                translation.append(character);\n            }\n            return translation.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:106","type":"CtBinaryOperatorImpl"},"failures":[643,644,645,646,647,636],"tindex":"cd25e3e4-3f1e-11e6-a9dc-8d2f5a078ffc","method":{"position":"com.google.gson.JsonArray:57","type":"CtMethodImpl","sourcecode":"public void add(com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonArray) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329753031/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (element == null) {\n                element = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            java.util.List<com.google.gson.JsonElement>.add(element);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:79","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"cd25e3e5-3f1e-11e6-a9dc-1d2a13594456","method":{"position":"com.google.gson.DefaultDateTypeAdapter:77","type":"CtMethodImpl","sourcecode":"public java.util.Date deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT, com.google.gson.JsonDeserializationContext context) throws com.google.gson.JsonParseException {\n    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n        {\n            if (!(json instanceof com.google.gson.JsonPrimitive)) {\n                throw new com.google.gson.JsonParseException(\"The date should be a string value\");\n            } \n            java.util.Date java.util.Date = deserializeToDate(json);\n            if (typeOfT == (java.util.Date.java.util.Date.java.lang.Class)) {\n                return date;\n            } else if (typeOfT == (java.sql.Timestamp.java.sql.Timestamp.java.lang.Class)) {\n                return new java.sql.Timestamp(date.getTime());\n            } else if (typeOfT == (java.sql.Date.java.sql.Date.java.lang.Class)) {\n                return new java.sql.Date(date.getTime());\n            } else {\n                throw new java.lang.IllegalArgumentException((((getClass()) + \" cannot deserialize to \") + typeOfT));\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329753031/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:240","type":"CtInvocationImpl"},"failures":[],"tindex":"cd260af6-3f1e-11e6-a9dc-4969803ff1ac","method":{"position":"com.google.gson.reflect.TypeToken:238","type":"CtMethodImpl","sourcecode":"private static boolean typeEquals(java.lang.reflect.ParameterizedType from, java.lang.reflect.ParameterizedType to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeVarMap) {\n    if (to.getRawType().equals(to.getRawType())) {\n        {\n            if (from.getRawType().equals(to.getRawType())) {\n                java.lang.reflect.Type[] java.lang.reflect.Type[] = from.getActualTypeArguments();\n                java.lang.reflect.Type[] java.lang.reflect.Type[] = to.getActualTypeArguments();\n                for (int int = 0 ; i < (fromArgs.int) ; i++) {\n                    if (!(com.google.gson.reflect.TypeToken.matches(fromArgs[i], toArgs[i], typeVarMap))) {\n                        return false;\n                    } \n                }\n                return true;\n            } \n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329753031/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"to","to":"to"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:107","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"cd260af7-3f1e-11e6-a9dc-e71ca05d8dac","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:804","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonArray) {\n        {\n            return (o instanceof java.util.Map.Entry) && ((findByEntry(((java.util.Map.Entry<?, ?>)(o)))) != null);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329753031/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[262],"tindex":"cd260af8-3f1e-11e6-a9dc-e76f161ccf3e","method":{"position":"com.google.gson.internal.bind.TypeAdapters:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329753031/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:246","type":"CtVariableReadImpl"},"failures":[648],"tindex":"cd260af9-3f1e-11e6-a9dc-e1e3d0a7ccf3","method":{"position":"com.google.gson.internal.LinkedTreeMap:217","type":"CtMethodImpl","sourcecode":"void removeInternal(com.google.gson.internal.LinkedTreeMap.Node<K, V> node, boolean unlink) {\n    if (unlink) {\n        {\n            if (unlink) {\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            if ((left != null) && (right != null)) {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = (left.int) > (right.int) ? left.last() : right.first();\n                removeInternal(adjacent, false);\n                int int = 0;\n                left = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                if (left != null) {\n                    leftHeight = left.int;\n                    adjacent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = left;\n                    left.com.google.gson.internal.LinkedTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                } \n                int int = 0;\n                right = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                if (right != null) {\n                    rightHeight = right.int;\n                    adjacent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = right;\n                    right.com.google.gson.internal.LinkedTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                } \n                adjacent.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                replaceInParent(node, adjacent);\n                return ;\n            } else if (left != null) {\n                replaceInParent(node, left);\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n            } else if (right != null) {\n                replaceInParent(node, right);\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n            } else {\n                replaceInParent(node, null);\n            }\n            rebalance(originalParent, false);\n            (int)--;\n            (int)++;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329753031/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"unlink":"unlink"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.JsonPrimitive:297","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"cd26591a-3f1e-11e6-a9dc-a7c3ba43cc1c","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n@java.lang.Override\nvoid write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value instanceof java.lang.Number) {\n        {\n            java.lang.Object java.lang.Object = field.get(value);\n            com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n            t.write(writer, fieldValue);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329753031/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.DateTypeAdapter:86","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"cd26802b-3f1e-11e6-a9dc-bb457d3d9403","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:108","type":"CtMethodImpl","sourcecode":"public boolean writeField(java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329753031/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (!(boolean))\n                return false;\n            \n            java.lang.Object java.lang.Object = field.get(value);\n            return fieldValue != value;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:243","type":"CtBinaryOperatorImpl"},"failures":[461,462,463,465,466,468],"tindex":"cd26802c-3f1e-11e6-a9dc-c7c6dbfa6867","method":{"position":"com.google.gson.internal.Excluder:242","type":"CtMethodImpl","sourcecode":"private boolean isValidUntil(com.google.gson.annotations.Until annotation) {\n    if (annotation != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329753031/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (annotation != null) {\n                double double = annotation.value();\n                if (annotationVersion <= (double)) {\n                    return false;\n                } \n            } \n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.TreeTypeAdapter:55","type":"CtInvocationImpl"},"failures":[608,649,650,16,651,645,652,634,635,653,17,654,655,656,657,658,659,660,18,82,93,94,95,96,134,137,138,143,144,145,149,150,155,616,175,176,178,179,182,194,213,214,661,314,315,316,317,318,319,320,322,323,370,376,402,447,448,449,450,451,474,486,489,490,500,514,566,574,577,578,579,585],"tindex":"cd26802d-3f1e-11e6-a9dc-45e14fb3daf6","method":{"position":"com.google.gson.JsonObject:53","type":"CtMethodImpl","sourcecode":"public void add(java.lang.String property, com.google.gson.JsonElement value) {\n    if (value.isJsonNull()) {\n        {\n            if (value == null) {\n                value = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.put(property, value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329753031/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Preconditions:41","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"cd26a73e-3f1e-11e6-a9dc-dd2bab127ddb","method":{"position":"com.google.gson.internal.$Gson$Preconditions:40","type":"CtMethodImpl","sourcecode":"public static void checkArgument(boolean condition) {\n    if (!condition) {\n        throw new java.lang.IllegalArgumentException();\n    } \n}"},"series":0,"name":"addParameterCondition","variableMap":{"condition":"condition"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:133","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"cd26a73f-3f1e-11e6-a9dc-ff7131ba0f1d","method":{"position":"com.google.gson.internal.$Gson$Types:117","type":"CtMethodImpl","sourcecode":"public static java.lang.Class<?> getRawType(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class<?>) {\n        return ((java.lang.Class<?>)(type));\n    } else if (type instanceof java.lang.reflect.ParameterizedType) {\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(type));\n        java.lang.reflect.Type java.lang.reflect.Type = parameterizedType.getRawType();\n        com.google.gson.internal.$Gson$Preconditions.checkArgument((rawType instanceof java.lang.Class));\n        return ((java.lang.Class<?>)(rawType));\n    } else if (type instanceof java.lang.reflect.GenericArrayType) {\n        java.lang.reflect.Type java.lang.reflect.Type = ((java.lang.reflect.GenericArrayType)(type)).getGenericComponentType();\n        return java.lang.reflect.Array.newInstance(com.google.gson.internal.$Gson$Types.getRawType(componentType), 0).getClass();\n    } else if (type instanceof java.lang.reflect.TypeVariable) {\n        return java.lang.Object.java.lang.Object.java.lang.Class;\n    } else if (type instanceof java.lang.reflect.WildcardType) {\n        return com.google.gson.internal.$Gson$Types.getRawType(((java.lang.reflect.WildcardType)(type)).getUpperBounds()[0]);\n    } else {\n        java.lang.String java.lang.String = type == null ? \"null\" : type.getClass().getName();\n        throw new java.lang.IllegalArgumentException(((((\"Expected a Class, ParameterizedType, or \" + \"GenericArrayType, but <\") + type) + \"> is of type \") + className));\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl"},"failures":[660,175,176,178,179,322,323,447,448,449,450,451,566,577],"tindex":"cd26a740-3f1e-11e6-a9dc-3729a5b10386","method":{"position":"com.google.gson.JsonObject:78","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.String value) {\n    if (value == null) {\n        {\n            add(property, createJsonElement(value));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329753031/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.JsonArray:58","type":"CtBinaryOperatorImpl"},"failures":[177,340,403,407,482,594],"tindex":"cd26ce51-3f1e-11e6-a9dc-b777d63b29b9","method":{"position":"com.google.gson.internal.Streams:67","type":"CtMethodImpl","sourcecode":"public static void write(com.google.gson.JsonElement element, com.google.gson.stream.JsonWriter writer) throws java.io.IOException {\n    if (element == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329753031/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<com.google.gson.JsonElement>.write(writer, element);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1439","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"cd26ce52-3f1e-11e6-a9dc-f31e4fcb1e29","method":{"position":"com.google.gson.stream.JsonReader:755","type":"CtMethodImpl","sourcecode":"private boolean isLiteral(char c) throws java.io.IOException {\n    if (c == '\\r') {\n        {\n            switch (c) {\n                case '/' :\n                case '\\\\' :\n                case ';' :\n                case '#' :\n                case '=' :\n                    checkLenient();\n                case '{' :\n                case '}' :\n                case '[' :\n                case ']' :\n                case ':' :\n                case ',' :\n                case ' ' :\n                case '\\t' :\n                case '\\f' :\n                case '\\r' :\n                case '\\n' :\n                    return false;\n                default :\n                    return true;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329753031/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"c"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:537","type":"CtFieldReadImpl"},"failures":[],"tindex":"cd26ce53-3f1e-11e6-a9dc-9547e600d243","method":{"position":"com.google.gson.stream.JsonReader:325","type":"CtMethodImpl","sourcecode":"public final void setLenient(boolean lenient) {\n    if (lenient) {\n        {\n            com.google.gson.stream.JsonReader.this.boolean = lenient;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329753031/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"lenient"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:233","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"cd274384-3f1e-11e6-a9dc-61e91bac50c2","method":{"position":"com.google.gson.internal.Excluder:232","type":"CtMethodImpl","sourcecode":"private boolean isValidSince(com.google.gson.annotations.Since annotation) {\n    if (annotation != null) {\n        {\n            if (annotation != null) {\n                double double = annotation.value();\n                if (annotationVersion > (double)) {\n                    return false;\n                } \n            } \n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329753031/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"cd274385-3f1e-11e6-a9dc-07f8bdb88a0b","method":{"position":"com.google.gson.Gson:261","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            double double = value.doubleValue();\n            checkValidFloatingPoint(doubleValue);\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329753031/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"cd276a96-3f1e-11e6-a9dc-3bdd81037344","method":{"position":"com.google.gson.Gson:695","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.lang.String json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329753031/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:136","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"cd2791a7-3f1e-11e6-a9dc-a96740ac1dc0","method":{"position":"com.google.gson.internal.ConstructorConstructor:200","type":"CtMethodImpl","sourcecode":"private <T>com.google.gson.internal.ObjectConstructor<T> newUnsafeAllocator(final java.lang.reflect.Type type, final java.lang.Class<? super T> rawType) {\n    if (type instanceof java.lang.reflect.GenericArrayType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329753031/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new com.google.gson.internal.ObjectConstructor<T>() {\n                private final com.google.gson.internal.UnsafeAllocator unsafeAllocator = com.google.gson.internal.UnsafeAllocator.create();\n\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                public T construct() {\n                    try {\n                        java.lang.Object java.lang.Object = com.google.gson.internal.UnsafeAllocator.newInstance(rawType);\n                        return ((T)(newInstance));\n                    } catch (java.lang.Exception e) {\n                        throw new java.lang.RuntimeException((((\"Unable to invoke no-args constructor for \" + type) + \". \") + \"Register an InstanceCreator with Gson for this type may fix this problem.\") , e);\n                    }\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:120","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"cd2791a8-3f1e-11e6-a9dc-7d2ecb026726","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:512","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"rawtypes\")\n@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonNull) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329753031/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof java.util.Map.Entry) {\n                java.util.Map.Entry java.util.Map.Entry = ((java.util.Map.Entry)(o));\n                return ((K) == null ? (other.getKey()) == null : K.equals(other.getKey())) && ((V) == null ? (other.getValue()) == null : V.equals(other.getValue()));\n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:189","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"cd27b8b9-3f1e-11e6-a9dc-5f47693276de","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:223","type":"CtMethodImpl","sourcecode":"private boolean equal(java.lang.Object a, java.lang.Object b) {\n    if (!(b instanceof java.lang.reflect.WildcardType)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329753031/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (a == b) || ((a != null) && (a.equals(b)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":64,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
{"failureDictionary":{"com.google.gson.JsonStreamParserTest.testNoSideEffectForHasNext":113,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":15,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":508,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":236,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":173,"com.google.gson.JsonPrimitiveTest.testDeepCopy":210,"com.google.gson.stream.JsonWriterTest.testRepeatedName":233,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":62,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":550,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":39,"com.google.gson.MixedStreamTest.testWriteLenient":61,"com.google.gson.internal.bind.JsonTreeWriterTest.testPrematureClose":90,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":534,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":134,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":115,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":326,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":329,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":533,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":501,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":515,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":343,"com.google.gson.internal.bind.JsonElementReaderTest.testStrictNansAndInfinities":84,"com.google.gson.JsonObjectTest.testAddingNullPropertyValue":595,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":563,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":567,"com.google.gson.JsonParserTest.testParseUnquotedMultiWordStringFails":181,"com.google.gson.functional.ObjectTest.testSingletonLists":245,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":336,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":487,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":509,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":226,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":164,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":50,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":47,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":540,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":440,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":322,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":577,"com.google.gson.DefaultDateTypeAdapterTest.testDatePattern":101,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":29,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":395,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":391,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":215,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":150,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":53,"com.google.gson.functional.EnumTest.testEnumCaseMapping":500,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":219,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":507,"com.google.gson.functional.JsonTreeTest.testToJsonTree":28,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":397,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":137,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":34,"com.google.gson.JsonObjectTest.testEqualsNonEmptyObject":55,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreBehindInVersion":584,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":133,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":315,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":76,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":496,"com.google.gson.internal.LinkedTreeMapTest.testLargeSetOfRandomKeys":10,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":432,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":364,"com.google.gson.internal.bind.JsonElementReaderTest.testNestedObjects":4,"com.google.gson.JsonPrimitiveTest.testParsingStringAsBoolean":199,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":538,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":180,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":468,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":449,"com.google.gson.internal.bind.JsonElementReaderTest.testLenientNansAndInfinities":81,"com.google.gson.internal.LinkedTreeMapTest.testContainsNonComparableKeyReturnsFalse":588,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":149,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":286,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":543,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":175,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":437,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":35,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":493,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":320,"com.google.gson.JsonParserTest.testParseString":58,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":77,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":464,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testDifferentSerializeAndDeserializeField":526,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":67,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":132,"com.google.gson.DefaultDateTypeAdapterTest.testFormatUsesDefaultTimezone":105,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":255,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":420,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":486,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":40,"com.google.gson.functional.StreamingTypeAdaptersTest.testFromJsonTree":44,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":297,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":22,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":92,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":390,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":361,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":221,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":254,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":502,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":59,"com.google.gson.JsonPrimitiveTest.testEqualsAcrossTypes":214,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":269,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":537,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":267,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":457,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":593,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":576,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":273,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":310,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":48,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":18,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":281,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":375,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":484,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":285,"com.google.gson.JsonArrayTest.testEqualsNonEmptyArray":522,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":392,"com.google.gson.functional.CollectionTest.testSetDeserialization":389,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":344,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":249,"com.google.gson.functional.EnumTest.testEnumSet":408,"com.google.gson.JsonStreamParserTest.testIterator":114,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":70,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":153,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":348,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":251,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":309,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":373,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":555,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":147,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":345,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":218,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":453,"com.google.gson.DefaultDateTypeAdapterTest.testParsingDatesFormattedWithSystemLocale":103,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":264,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":291,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":20,"com.google.gson.functional.MapTest.testMapSerialization":353,"com.google.gson.internal.bind.JsonElementReaderTest.testObject":5,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":265,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":122,"com.google.gson.JsonPrimitiveTest.testByteEqualsShort":211,"com.google.gson.JsonPrimitiveTest.testByteEqualsBigInteger":200,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":334,"com.google.gson.functional.MapTest.testSerializeMaps":347,"com.google.gson.functional.MapTest.testComplexKeysSerialization":360,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":91,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":172,"com.google.gson.JsonPrimitiveTest.testLongEqualsBigInteger":202,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":426,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":366,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":570,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":305,"com.google.gson.internal.LinkedTreeMapTest.testRemoveRootDoesNotDoubleUnlink":13,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":387,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":517,"com.google.gson.internal.bind.JsonElementReaderTest.testWrongType":85,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":176,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":241,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":63,"com.google.gson.functional.MapTest.testStringKeyDeserialization":54,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":157,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":471,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":362,"com.google.gson.functional.PrettyPrintingTest.testMap":239,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":497,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":428,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":266,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":476,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":78,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":439,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":512,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":177,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":405,"com.google.gson.functional.CollectionTest.testQueueSerialization":429,"com.google.gson.functional.MapTest.testMapSerializationEmpty":519,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnName":238,"com.google.gson.functional.MapTest.testMapOfMapSerialization":352,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":66,"com.google.gson.JavaSerializationTest.testMapIsSerializable":60,"com.google.gson.stream.JsonWriterTest.testNameWithoutValue":230,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":220,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":372,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":165,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictBoxedNansAndInfinities":96,"com.google.gson.functional.FieldNamingTest.testIdentity":335,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":510,"com.google.gson.JsonStreamParserTest.testCallingNextBeyondAvailableInput":111,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":154,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":259,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":545,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":27,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":64,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":117,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":244,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":216,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testSkipNonAnnotatedFields":525,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":140,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":511,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":461,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":572,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":224,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":1,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":371,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":482,"com.google.gson.functional.MapTest.testMapSubclassSerialization":346,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":470,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":14,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":569,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":228,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":317,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":516,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":41,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":581,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":308,"com.google.gson.functional.EnumTest.testEnumSubclass":410,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":463,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":441,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":539,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":454,"com.google.gson.internal.bind.JsonElementReaderTest.testArray":82,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":284,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":156,"com.google.gson.JsonPrimitiveTest.testShortEqualsInteger":206,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":385,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":325,"com.google.gson.JsonPrimitiveTest.testByteEqualsLong":193,"com.google.gson.stream.JsonWriterTest.testTwoNames":229,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":573,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":30,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":223,"com.google.gson.internal.LinkedTreeMapTest.testEqualsAndHashCode":12,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":377,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":460,"com.google.gson.stream.JsonWriterTest.testObjectsInArrays":234,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":490,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":532,"com.google.gson.MixedStreamTest.testWriteNulls":110,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":422,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":418,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":365,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":566,"com.google.gson.JsonObjectTest.testReadPropertyWithEmptyStringName":174,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":161,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":246,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":564,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":290,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":571,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":121,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":355,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":436,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":341,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":314,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":403,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":492,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":123,"com.google.gson.internal.bind.JsonElementReaderTest.testEarlyClose":83,"com.google.gson.JsonParserTest.testParseMixedArray":183,"com.google.gson.DefaultDateTypeAdapterTest.testParsingDatesFormattedWithUsLocale":106,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":456,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":217,"com.google.gson.JsonPrimitiveTest.testDoubleEqualsBigDecimal":195,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":287,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAheadInVersion":582,"com.google.gson.internal.bind.JsonTreeWriterTest.testWriteAfterClose":97,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":65,"com.google.gson.JsonArrayTest.testRemove":109,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":370,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":466,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":485,"com.google.gson.functional.MapTest.testMapDeserialization":51,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":483,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":398,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":169,"com.google.gson.internal.bind.JsonElementReaderTest.testStringsFromNumbers":87,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":198,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":562,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":276,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":349,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":301,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":407,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeMap":45,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":388,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":26,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":382,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":256,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":448,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":293,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":498,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":31,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":477,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":568,"com.google.gson.internal.bind.JsonElementReaderTest.testNumbersFromStrings":86,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":298,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":324,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":240,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":354,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":187,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":136,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":163,"com.google.gson.functional.PrimitiveTest.testShortSerialization":469,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":303,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictNansAndInfinities":94,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":506,"com.google.gson.JsonParserTest.testParseEmptyString":184,"com.google.gson.internal.LinkedTreeMapTest.testIterationOrder":11,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":402,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":0,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":331,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":146,"com.google.gson.internal.LinkedTreeMapTest.testEmptyStringValues":589,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":327,"com.google.gson.internal.LinkedTreeMapTest.testPutOverrides":8,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":262,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":591,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":151,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":404,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":42,"com.google.gson.DefaultDateTypeAdapterTest.testFormattingInFr":104,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":98,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":565,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":6,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":531,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":473,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":73,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":452,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":155,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":257,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":380,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":99,"com.google.gson.JsonPrimitiveTest.testStringsAndChar":207,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":337,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":474,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":558,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":139,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":158,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":548,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":536,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":411,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":294,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":445,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":328,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":559,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":316,"com.google.gson.InnerClassExclusionStrategyTest.testExcludeInnerClassField":585,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":159,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":299,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":280,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":302,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":21,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":479,"com.google.gson.stream.JsonWriterTest.testNullStringValue":231,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":304,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":32,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":125,"com.google.gson.JsonArrayTest.testSet":107,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":462,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":472,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":271,"com.google.gson.JsonPrimitiveTest.testEquals":209,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":300,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":409,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":16,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":17,"com.google.gson.functional.MapTest.testGeneralMapField":171,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":535,"com.google.gson.internal.bind.JsonElementReaderTest.testNumbers":88,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":416,"com.google.gson.DefaultDateTypeAdapterTest.testDateSerialization":100,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":144,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":323,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":494,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testSkipExplicitlySkippedFields":529,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":406,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":356,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":128,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":378,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":413,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":465,"com.google.gson.MixedStreamTest.testReadMixedStreamed":530,"com.google.gson.ObjectTypeAdapterTest.testDeserializeNullValue":587,"com.google.gson.JsonObjectTest.testDeepCopy":178,"com.google.gson.internal.bind.JsonElementReaderTest.testBooleans":79,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":401,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":434,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":521,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":557,"com.google.gson.stream.JsonWriterTest.testNonFiniteDoubles":524,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":575,"com.google.gson.internal.bind.JsonTreeWriterTest.testEmptyWriter":95,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":505,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":554,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":279,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":52,"com.google.gson.JsonArrayTest.testDeepCopy":108,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":495,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":590,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":69,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":162,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":243,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":339,"com.google.gson.stream.JsonWriterTest.testArraysInObjects":232,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":7,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":278,"com.google.gson.JsonPrimitiveTest.testEqualsDoesNotEquateStringAndNonStringTypes":208,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":260,"com.google.gson.JsonPrimitiveTest.testFloatEqualsDouble":201,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":167,"com.google.gson.functional.ObjectTest.testNestedDeserialization":549,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":126,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":450,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":552,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":127,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":504,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":289,"com.google.gson.JsonParserTest.testParseUnquotedStringArrayFails":185,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":556,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":307,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":222,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":384,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":43,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":119,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":435,"com.google.gson.functional.ObjectTest.testNullSerialization":447,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerialization":190,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":296,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":592,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":357,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":455,"com.google.gson.functional.MapTest.testInterfaceTypeMap":170,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":145,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":275,"com.google.gson.JsonObjectTest.testAddingNullOrEmptyPropertyName":56,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":72,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":318,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testNeverSkipExplicitlyExposedAnnotatedFields":528,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":499,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":561,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":475,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":148,"com.google.gson.JsonPrimitiveTest.testIntegerEqualsLong":204,"com.google.gson.MixedStreamTest.testWriteClosed":443,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":431,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":553,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":247,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":379,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":311,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":274,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":38,"com.google.gson.LongSerializationPolicyTest.testStringLongSerialization":189,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":258,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":288,"com.google.gson.JsonPrimitiveTest.testShortEqualsLong":197,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":283,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":248,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":277,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":430,"com.google.gson.JsonPrimitiveTest.testShortEqualsBigInteger":192,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":579,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":340,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":386,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":433,"com.google.gson.internal.bind.JsonElementReaderTest.testSkipValue":80,"com.google.gson.internal.bind.JsonElementReaderTest.testStrings":89,"com.google.gson.DefaultDateTypeAdapterTest.testFormattingInEnUs":102,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":488,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":120,"com.google.gson.JsonPrimitiveTest.testParsingStringAsNumber":213,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":368,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":458,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":25,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":367,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":414,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":37,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":459,"com.google.gson.InnerClassExclusionStrategyTest.testIncludeStaticNestedClassField":586,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":451,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":491,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":580,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":350,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":544,"com.google.gson.stream.JsonWriterTest.testDeepNestingObjects":237,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":481,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":321,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":547,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":427,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":227,"com.google.gson.functional.MapTest.testRawMapSerialization":359,"com.google.gson.JsonParserTest.testParseReader":57,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":74,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":252,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":292,"com.google.gson.JsonPrimitiveTest.testExponential":212,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":19,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":2,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":186,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":168,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":188,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":417,"com.google.gson.functional.PrimitiveTest.testByteSerialization":467,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":23,"com.google.gson.ObjectTypeAdapterTest.testSerialize":225,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":319,"com.google.gson.JsonPrimitiveTest.testEqualsIntegerAndBigInteger":194,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":116,"com.google.gson.JsonPrimitiveTest.testFloatEqualsBigDecimal":191,"com.google.gson.JsonPrimitiveTest.testByteEqualsInteger":203,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":423,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":332,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":312,"com.google.gson.functional.MapTest.testMapWithQuotes":351,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":130,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":152,"com.google.gson.JsonObjectTest.testEqualsOnEmptyObject":523,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":166,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":46,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":129,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":342,"com.google.gson.stream.JsonWriterTest.testLenientWriterPermitsMultipleTopLevelValues":444,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":141,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":306,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":546,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":242,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":68,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":478,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":374,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":425,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":282,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":131,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":118,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":338,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":480,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":518,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":135,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":142,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":415,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":295,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":261,"com.google.gson.JsonPrimitiveTest.testIntegerEqualsBigInteger":205,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":263,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAtSameVersion":583,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":143,"com.google.gson.internal.LinkedHashTreeMapTest.testRemoveRootDoesNotDoubleUnlink":393,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testNeverSkipExposedAnnotatedFields":527,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":49,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":71,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":541,"com.google.gson.internal.LinkedTreeMapTest.testClear":9,"com.google.gson.JsonObjectTest.testAddingStringProperties":179,"com.google.gson.functional.ObjectTest.testNestedSerialization":253,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":272,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":400,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":412,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":399,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":358,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":124,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":138,"com.google.gson.JsonParserTest.testParseUnquotedSingleWordStringFails":182,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":394,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":520,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":250,"com.google.gson.JsonPrimitiveTest.testBoolean":196,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":33,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":574,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":383,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":438,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":381,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":542,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":578,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":75,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":513,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":421,"com.google.gson.functional.CollectionTest.testSetSerialization":330,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":560,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":160,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":396,"com.google.gson.functional.StringTest.testStringValueSerialization":514,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":270,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":369,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":376,"com.google.gson.MixedStreamTest.testWriteInvalidState":442,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":446,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":424,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":268,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":36,"com.google.gson.ObjectTypeAdapterTest.testDeserialize":3,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":333,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":363,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":594,"com.google.gson.JsonStreamParserTest.testParseTwoStrings":112,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":551,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":93,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":503,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":313,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":489,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":24,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":235,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":419},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl"},"failures":[0,1,2],"tindex":"0d4da37c-3f0f-11e6-becf-f5999b7c954c","method":{"position":"com.google.gson.Gson:532","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322941217/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n            toJson(src, typeOfSrc, writer);\n            return writer.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"0d4e66cd-3f0f-11e6-becf-3796e72d6be6","method":{"position":"com.google.gson.TypeAdapter:254","type":"CtMethodImpl","sourcecode":"public final T fromJson(java.io.Reader in) throws java.io.IOException {\n    if (in == null) {\n        {\n            if (in == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322941217/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(in);\n                    return read(reader);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322941217/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:356","type":"CtVariableReadImpl"},"failures":[3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60],"tindex":"0d4e8dde-3f0f-11e6-becf-471c7ecf4a52","method":{"position":"com.google.gson.internal.LinkedTreeMap:310","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (insert) {\n        {\n            if (insert) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322941217/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    for (com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>) {\n                        com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                        com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                        int int = left != null ? left.int : 0;\n                        int int = right != null ? right.int : 0;\n                        int int = leftHeight - rightHeight;\n                        if (delta == (-2)) {\n                            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                            int int = rightRight != null ? rightRight.int : 0;\n                            int int = rightLeft != null ? rightLeft.int : 0;\n                            int int = rightLeftHeight - rightRightHeight;\n                            if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                                rotateLeft(node);\n                            } else {\n                                assert rightDelta == 1;\n                                rotateRight(right);\n                                rotateLeft(node);\n                            }\n                            if (insert) {\n                                break;\n                            } \n                        } else if (delta == 2) {\n                            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                            int int = leftRight != null ? leftRight.int : 0;\n                            int int = leftLeft != null ? leftLeft.int : 0;\n                            int int = leftLeftHeight - leftRightHeight;\n                            if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                                rotateRight(node);\n                            } else {\n                                assert leftDelta == (-1);\n                                rotateLeft(left);\n                                rotateRight(node);\n                            }\n                            if (insert) {\n                                break;\n                            } \n                        } else if (delta == 0) {\n                            node.int = leftHeight + 1;\n                            if (insert) {\n                                break;\n                            } \n                        } else {\n                            assert (delta == (-1)) || (delta == 1);\n                            node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                            if (!insert) {\n                                break;\n                            } \n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322941217/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"insert"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78],"tindex":"0d4f030f-3f0f-11e6-becf-0bc6f876f42d","method":{"position":"com.google.gson.Gson:261","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322941217/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (value == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322941217/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.io.IOException();\n                    } else {\n                        {\n                            if (value == null) {\n                                {\n                                    if (value == null) {\n                                        out.nullValue();\n                                        return ;\n                                    } \n                                    double double = value.doubleValue();\n                                    checkValidFloatingPoint(doubleValue);\n                                    out.value(value);\n                                }\n                            } else {\n                                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322941217/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                throw new java.io.IOException();\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322941217/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:94","type":"CtBinaryOperatorImpl"},"failures":[79,80,81,82,83,84,85,86,87,5,88,89,90,91,92,93,94,95,96,97,6,7,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,15,16,121,122,123,17,124,18,19,20,21,22,23,24,125,25,26,27,28,29,126,127,30,31,32,33,34,128,35,129,130,131,132,133,36,134,135,136,137,138,139,140,37,38,141,142,143,144,145,146,39,40,41,42,43,44,46,147,148,149,150,151,152,153,48,154,155,156,157,158,159,160,161,162,163,49,164,165,166,167,168,50,169,170,171,172,173,174,175,176,177,178,179,180,181,57,58,59,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216],"tindex":"0d503b90-3f0f-11e6-becf-6f7d5d35cc7b","method":{"position":"com.google.gson.JsonPrimitive:93","type":"CtMethodImpl","sourcecode":"void setValue(java.lang.Object primitive) {\n    if (primitive instanceof java.lang.Character) {\n        {\n            if (primitive instanceof java.lang.Character) {\n                char char = ((java.lang.Character)(primitive)).charValue();\n                com.google.gson.JsonPrimitive.this.java.lang.Object = java.lang.String.valueOf(c);\n            } else {\n                com.google.gson.internal.$Gson$Preconditions.checkArgument(((primitive instanceof java.lang.Number) || (com.google.gson.JsonPrimitive.isPrimitiveOrString(primitive))));\n                com.google.gson.JsonPrimitive.this.java.lang.Object = primitive;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322941217/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"primitive"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:218","type":"CtVariableReadImpl"},"failures":[13,42,176],"tindex":"0d5089b1-3f0f-11e6-becf-2f9893fe8369","method":{"position":"com.google.gson.internal.LinkedTreeMap:217","type":"CtMethodImpl","sourcecode":"void removeInternal(com.google.gson.internal.LinkedTreeMap.Node<K, V> node, boolean unlink) {\n    if (node != null) {\n        {\n            if (unlink) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322941217/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (unlink) {\n                        node.com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                        node.com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    } \n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    if ((left != null) && (right != null)) {\n                        com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = (left.int) > (right.int) ? left.last() : right.first();\n                        removeInternal(adjacent, false);\n                        int int = 0;\n                        left = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                        if (left != null) {\n                            leftHeight = left.int;\n                            adjacent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = left;\n                            left.com.google.gson.internal.LinkedTreeMap.Node<K, V> = adjacent;\n                            node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                        } \n                        int int = 0;\n                        right = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                        if (right != null) {\n                            rightHeight = right.int;\n                            adjacent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = right;\n                            right.com.google.gson.internal.LinkedTreeMap.Node<K, V> = adjacent;\n                            node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                        } \n                        adjacent.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                        replaceInParent(node, adjacent);\n                        return ;\n                    } else if (left != null) {\n                        replaceInParent(node, left);\n                        node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                    } else if (right != null) {\n                        replaceInParent(node, right);\n                        node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                    } else {\n                        replaceInParent(node, null);\n                    }\n                    rebalance(originalParent, false);\n                    (int)--;\n                    (int)++;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322941217/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"unlink":"unlink"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:578","type":"CtBinaryOperatorImpl"},"failures":[217],"tindex":"0d50d7d2-3f0f-11e6-becf-93d931e07102","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:429","type":"CtMethodImpl","sourcecode":"private void rotateRight(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root == null) {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivotRight;\n            if (pivotRight != null) {\n                pivotRight.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            } \n            replaceInParent(root, pivot);\n            pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot;\n            root.int = (java.lang.Math.max((right != null ? right.int : 0), (pivotRight != null ? pivotRight.int : 0))) + 1;\n            pivot.int = (java.lang.Math.max(root.int, (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322941217/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"root"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"0d5125f3-3f0f-11e6-becf-cd3446f27336","method":{"position":"com.google.gson.Gson:261","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322941217/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (value == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322941217/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.io.IOException();\n                    } else {\n                        {\n                            if (value == null) {\n                                {\n                                    if (value == null) {\n                                        out.nullValue();\n                                        return ;\n                                    } \n                                    double double = value.doubleValue();\n                                    checkValidFloatingPoint(doubleValue);\n                                    out.value(value);\n                                }\n                            } else {\n                                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322941217/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                throw new java.io.IOException();\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322941217/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:578","type":"CtBinaryOperatorImpl"},"failures":[217],"tindex":"0d514d04-3f0f-11e6-becf-23a739d0cfec","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:401","type":"CtMethodImpl","sourcecode":"private void rotateLeft(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root == null) {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivotLeft;\n            if (pivotLeft != null) {\n                pivotLeft.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            } \n            replaceInParent(root, pivot);\n            pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot;\n            root.int = (java.lang.Math.max((left != null ? left.int : 0), (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n            pivot.int = (java.lang.Math.max(root.int, (pivotRight != null ? pivotRight.int : 0))) + 1;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322941217/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"root"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[218,219],"tindex":"0d523765-3f0f-11e6-becf-11c6b43fa33e","method":{"position":"com.google.gson.Gson:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322941217/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    out.value(value.toString());\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322941217/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[220,221,222],"tindex":"0d523766-3f0f-11e6-becf-8be8aec612d5","method":{"position":"com.google.gson.internal.bind.TypeAdapters:282","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322941217/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"0d525e77-3f0f-11e6-becf-73d16daa4ebb","method":{"position":"com.google.gson.Gson:591","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    if (src != null) {\n        {\n            com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = getAdapter(com.google.gson.reflect.TypeToken.get(typeOfSrc));\n            boolean boolean = writer.isLenient();\n            writer.setLenient(true);\n            boolean boolean = writer.isHtmlSafe();\n            writer.setHtmlSafe(boolean);\n            boolean boolean = writer.getSerializeNulls();\n            writer.setSerializeNulls(boolean);\n            try {\n                ((com.google.gson.TypeAdapter<java.lang.Object>)(adapter)).write(writer, src);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            } finally {\n                writer.setLenient(oldLenient);\n                writer.setHtmlSafe(oldHtmlSafe);\n                writer.setSerializeNulls(oldSerializeNulls);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322941217/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"0d525e78-3f0f-11e6-becf-edab8f003b07","method":{"position":"com.google.gson.Gson:552","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        {\n            if (src != null) {\n                toJson(src, src.getClass(), writer);\n            } else {\n                toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull, writer);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322941217/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl"},"failures":[223,224,225,226,6,7,99,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,14,263,264,265,266,123,124,62,63,64,267,268,269,20,21,22,270,23,24,271,272,26,29,273,274,275,276,277,36,278,279,280,281,282,283,138,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,142,307,308,309,310,70,311,312,313,314,315,316,317,318,319,320,321,72,73,74,76,77,78,322,46,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,156,157,158,160,161,49,167,341,342,343,344,50,345,346,347,348,349,350,351,352,353,354,355,170,356,357,171,358,359,360,361,362,173,363,364,365,366,367,368,369,370,371,372,175,180,59,373],"tindex":"0d528589-3f0f-11e6-becf-d31ef04232d3","method":{"position":"com.google.gson.stream.JsonWriter:385","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter name(java.lang.String name) throws java.io.IOException {\n    if (name == null) {\n        {\n            if (name == null) {\n                throw new java.lang.NullPointerException(\"name == null\");\n            } \n            if ((java.lang.String) != null) {\n                throw new java.lang.IllegalStateException();\n            } \n            if ((int) == 0) {\n                throw new java.lang.IllegalStateException(\"JsonWriter is closed.\");\n            } \n            java.lang.String = name;\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322941217/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:136","type":"CtBinaryOperatorImpl"},"failures":[225,115,116,118,119,374,249,256,257,19,375,62,63,376,377,64,267,268,269,271,272,378,26,30,274,32,379,380,276,34,381,382,0,383,279,283,287,288,289,290,37,38,291,292,293,384,294,295,296,385,386,387,388,314,315,317,46,326,389,330,390,156,341,342,343,344,391,360,363,364,365,366,392,367,368,369,370,371,372],"tindex":"0d52858a-3f0f-11e6-becf-83d32cc1d971","method":{"position":"com.google.gson.internal.ConstructorConstructor:200","type":"CtMethodImpl","sourcecode":"private <T>com.google.gson.internal.ObjectConstructor<T> newUnsafeAllocator(final java.lang.reflect.Type type, final java.lang.Class<? super T> rawType) {\n    if (type instanceof java.lang.reflect.GenericArrayType) {\n        {\n            return new com.google.gson.internal.ObjectConstructor<T>() {\n                private final com.google.gson.internal.UnsafeAllocator unsafeAllocator = com.google.gson.internal.UnsafeAllocator.create();\n\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                public T construct() {\n                    try {\n                        java.lang.Object java.lang.Object = com.google.gson.internal.UnsafeAllocator.newInstance(rawType);\n                        return ((T)(newInstance));\n                    } catch (java.lang.Exception e) {\n                        throw new java.lang.RuntimeException((((\"Unable to invoke no-args constructor for \" + type) + \". \") + \"Register an InstanceCreator with Gson for this type may fix this problem.\") , e);\n                    }\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322941217/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[39,40,41,43,157,158,49],"tindex":"0d52ac9b-3f0f-11e6-becf-9d2b7ed1bcf2","method":{"position":"com.google.gson.JsonObject:89","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Number value) {\n    if (value == null) {\n        {\n            add(property, createJsonElement(value));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322941217/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:363","type":"CtUnaryOperatorImpl"},"failures":[217],"tindex":"0d52d3ac-3f0f-11e6-becf-bb1e42889dd3","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:338","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (!insert) {\n        {\n            for (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) {\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                int int = left != null ? left.int : 0;\n                int int = right != null ? right.int : 0;\n                int int = leftHeight - rightHeight;\n                if (delta == (-2)) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    int int = rightRight != null ? rightRight.int : 0;\n                    int int = rightLeft != null ? rightLeft.int : 0;\n                    int int = rightLeftHeight - rightRightHeight;\n                    if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                        rotateLeft(node);\n                    } else {\n                        assert rightDelta == 1;\n                        rotateRight(right);\n                        rotateLeft(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 2) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    int int = leftRight != null ? leftRight.int : 0;\n                    int int = leftLeft != null ? leftLeft.int : 0;\n                    int int = leftLeftHeight - leftRightHeight;\n                    if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                        rotateRight(node);\n                    } else {\n                        assert leftDelta == (-1);\n                        rotateLeft(left);\n                        rotateRight(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 0) {\n                    node.int = leftHeight + 1;\n                    if (insert) {\n                        break;\n                    } \n                } else {\n                    assert (delta == (-1)) || (delta == 1);\n                    node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                    if (!insert) {\n                        break;\n                    } \n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322941217/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"insert"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"0d52fabd-3f0f-11e6-becf-e7fbb4104dbe","method":{"position":"com.google.gson.Gson:695","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.lang.String json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322941217/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (json == null) {\n                {\n                    java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n                    return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322941217/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:350","type":"CtVariableReadImpl"},"failures":[],"tindex":"0d52fabe-3f0f-11e6-becf-8930d3d3e971","method":{"position":"com.google.gson.internal.LinkedTreeMap:310","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (insert) {\n        {\n            if (insert) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322941217/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    for (com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>) {\n                        com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                        com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                        int int = left != null ? left.int : 0;\n                        int int = right != null ? right.int : 0;\n                        int int = leftHeight - rightHeight;\n                        if (delta == (-2)) {\n                            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                            int int = rightRight != null ? rightRight.int : 0;\n                            int int = rightLeft != null ? rightLeft.int : 0;\n                            int int = rightLeftHeight - rightRightHeight;\n                            if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                                rotateLeft(node);\n                            } else {\n                                assert rightDelta == 1;\n                                rotateRight(right);\n                                rotateLeft(node);\n                            }\n                            if (insert) {\n                                break;\n                            } \n                        } else if (delta == 2) {\n                            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                            int int = leftRight != null ? leftRight.int : 0;\n                            int int = leftLeft != null ? leftLeft.int : 0;\n                            int int = leftLeftHeight - leftRightHeight;\n                            if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                                rotateRight(node);\n                            } else {\n                                assert leftDelta == (-1);\n                                rotateLeft(left);\n                                rotateRight(node);\n                            }\n                            if (insert) {\n                                break;\n                            } \n                        } else if (delta == 0) {\n                            node.int = leftHeight + 1;\n                            if (insert) {\n                                break;\n                            } \n                        } else {\n                            assert (delta == (-1)) || (delta == 1);\n                            node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                            if (!insert) {\n                                break;\n                            } \n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322941217/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"insert"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:246","type":"CtVariableReadImpl"},"failures":[393],"tindex":"0d5348df-3f0f-11e6-becf-7d19e5f4954c","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:245","type":"CtMethodImpl","sourcecode":"void removeInternal(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node, boolean unlink) {\n    if (unlink) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322941217/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (unlink) {\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            if ((left != null) && (right != null)) {\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = (left.int) > (right.int) ? left.last() : right.first();\n                removeInternal(adjacent, false);\n                int int = 0;\n                left = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                if (left != null) {\n                    leftHeight = left.int;\n                    adjacent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left;\n                    left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                } \n                int int = 0;\n                right = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                if (right != null) {\n                    rightHeight = right.int;\n                    adjacent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                } \n                adjacent.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                replaceInParent(node, adjacent);\n                return ;\n            } else if (left != null) {\n                replaceInParent(node, left);\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } else if (right != null) {\n                replaceInParent(node, right);\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } else {\n                replaceInParent(node, null);\n            }\n            rebalance(originalParent, false);\n            (int)--;\n            (int)++;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"unlink":"unlink"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[0,302],"tindex":"0d543340-3f0f-11e6-becf-d514991368db","method":{"position":"com.google.gson.internal.bind.TypeAdapters:267","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322941217/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:198","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"0d543341-3f0f-11e6-becf-193c44367960","method":{"position":"com.google.gson.TypeAdapter:140","type":"CtMethodImpl","sourcecode":"public final void toJson(java.io.Writer out, T value) throws java.io.IOException {\n    if (out == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322941217/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = new com.google.gson.stream.JsonWriter(out);\n            write(writer, value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:79","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"0d543342-3f0f-11e6-becf-c3d94a3a4e57","method":{"position":"com.google.gson.Gson:847","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(com.google.gson.JsonElement json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322941217/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (!(json instanceof com.google.gson.JsonPrimitive)) {\n                {\n                    java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n                    return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322941217/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"0d545a53-3f0f-11e6-becf-bf13dd1e16cf","method":{"position":"com.google.gson.Gson:695","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.lang.String json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322941217/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (json == null) {\n                {\n                    java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n                    return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322941217/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:98","type":"CtBinaryOperatorImpl"},"failures":[223,224,225,226,227,228,61,394,395,239,240,241,396,397,398,242,399,243,115,116,118,119,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,14,263,264,15,265,266,123,124,62,63,64,267,268,269,20,21,22,270,271,272,400,401,402,403,404,69,25,26,27,28,29,127,30,31,273,274,275,32,33,276,277,34,131,405,279,281,406,282,283,138,284,285,286,287,288,289,290,37,38,291,292,293,294,295,296,297,298,299,407,300,301,302,304,305,306,307,308,309,310,70,311,312,313,314,315,317,408,409,146,410,318,411,319,412,413,320,321,71,72,73,74,75,76,77,78,322,46,414,415,416,417,418,419,420,421,422,423,323,424,425,426,324,325,326,427,327,428,429,430,431,432,328,433,329,434,330,435,331,332,333,334,335,436,336,337,338,339,340,152,153,156,158,160,161,167,341,437,342,343,344,50,345,346,347,348,349,350,351,352,353,354,355,170,356,357,171,358,359,360,361,362,173,363,364,365,366,367,368,369,370,371,372,59,186,219,438,373],"tindex":"0d545a54-3f0f-11e6-becf-ede4733a31ac","method":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:74","type":"CtMethodImpl","sourcecode":"private java.lang.reflect.Type getRuntimeTypeIfMoreSpecific(java.lang.reflect.Type type, java.lang.Object value) {\n    if (value instanceof java.lang.reflect.ParameterizedType) {\n        {\n            if ((value != null) && (((type == (java.lang.Object.java.lang.Object.java.lang.Class)) || (type instanceof java.lang.reflect.TypeVariable<?>)) || (type instanceof java.lang.Class<?>))) {\n                type = value.getClass();\n            } \n            return type;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322941217/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:325","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"0d548165-3f0f-11e6-becf-8db8e8cb54e4","method":{"position":"com.google.gson.internal.$Gson$Types:226","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type getGenericSupertype(java.lang.reflect.Type context, java.lang.Class<?> rawType, java.lang.Class<?> toResolve) {\n    if (toResolve == rawType) {\n        return context;\n    } \n    if (toResolve.isInterface()) {\n        java.lang.Class<?>[] java.lang.Class<?>[] = rawType.getInterfaces();\n        for (int int = 0, int int = interfaces.int ; i < length ; i++) {\n            if ((interfaces[i]) == toResolve) {\n                return rawType.getGenericInterfaces()[i];\n            } else if (toResolve.isAssignableFrom(interfaces[i])) {\n                return com.google.gson.internal.$Gson$Types.getGenericSupertype(rawType.getGenericInterfaces()[i], interfaces[i], toResolve);\n            } \n        }\n    } \n    if (!(rawType.isInterface())) {\n        while (rawType != (java.lang.Object.java.lang.Object.java.lang.Class)) {\n            java.lang.Class<?> java.lang.Class<?> = rawType.getSuperclass();\n            if (rawSupertype == toResolve) {\n                return rawType.getGenericSuperclass();\n            } else if (toResolve.isAssignableFrom(rawSupertype)) {\n                return com.google.gson.internal.$Gson$Types.getGenericSupertype(rawType.getGenericSuperclass(), rawSupertype, toResolve);\n            } \n            rawType = rawSupertype;\n        }\n    } \n    return toResolve;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"context"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:92","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"0d548166-3f0f-11e6-becf-b946badf372d","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:839","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof java.util.Iterator) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322941217/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return containsKey(o);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:537","type":"CtFieldReadImpl"},"failures":[223,224,90,91,92,93,97,6,7,98,99,439,440,441,227,228,110,442,61,394,443,444,395,239,240,241,396,397,398,242,399,243,445,115,116,117,118,119,244,245,246,247,248,446,249,447,250,448,449,251,252,253,450,254,255,256,257,258,259,260,261,262,14,263,264,451,15,265,266,123,124,62,63,452,64,267,268,269,453,20,21,22,270,23,24,271,272,454,455,378,456,457,400,458,65,401,459,66,460,67,461,462,220,463,68,464,221,402,465,218,466,467,222,468,469,403,470,471,404,472,69,473,25,26,27,28,29,126,127,30,31,273,274,275,32,33,276,277,34,474,128,475,129,476,130,131,133,477,36,0,478,479,480,481,405,482,483,484,278,279,485,280,486,487,488,489,281,134,406,282,135,490,491,492,283,136,1,493,138,284,140,494,285,286,495,287,288,289,290,37,38,291,292,293,294,295,296,297,298,299,407,496,300,301,302,303,304,2,305,306,142,307,308,309,310,70,311,312,313,314,315,316,144,497,145,317,498,499,408,409,146,410,318,411,500,501,319,412,413,320,321,72,46,414,415,416,502,417,418,419,420,421,422,423,323,424,425,426,324,325,147,503,148,149,504,150,505,506,326,427,327,428,429,430,431,432,328,433,329,434,330,435,151,331,332,333,334,335,507,508,509,510,511,436,512,513,514,515,336,516,337,338,339,340,152,153,156,157,158,160,161,162,49,165,166,167,341,437,342,343,344,168,50,517,518,345,169,346,347,348,349,350,351,352,353,354,355,170,356,357,171,358,359,360,519,361,362,173,363,364,365,366,367,368,369,370,371,372,175,180,59,183,186,187,188,219,438,520,194,198,373,215,216,521],"tindex":"0d54a877-3f0f-11e6-becf-1d91d1c5f403","method":{"position":"com.google.gson.stream.JsonWriter:234","type":"CtMethodImpl","sourcecode":"public final void setLenient(boolean lenient) {\n    if (lenient) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322941217/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = lenient;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"lenient"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:164","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"0d54cf88-3f0f-11e6-becf-41a6cf745653","method":{"position":"com.google.gson.reflect.TypeToken:122","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic boolean isAssignableFrom(java.lang.reflect.Type from) {\n    if (from instanceof java.lang.Class<?>) {\n        {\n            if (from instanceof java.lang.reflect.GenericArrayType) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322941217/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (from == null) {\n                        return false;\n                    } \n                    if (java.lang.reflect.Type.equals(from)) {\n                        return true;\n                    } \n                    if ((java.lang.reflect.Type) instanceof java.lang.Class<?>) {\n                        return java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from));\n                    } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.ParameterizedType) {\n                        return com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n                    } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.GenericArrayType) {\n                        return (java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from))) && (com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.GenericArrayType)(java.lang.reflect.Type))));\n                    } else {\n                        throw com.google.gson.reflect.TypeToken.buildUnexpectedTypeError(java.lang.reflect.Type, java.lang.Class.java.lang.Class.java.lang.Class, java.lang.reflect.ParameterizedType.java.lang.reflect.ParameterizedType.java.lang.Class, java.lang.reflect.GenericArrayType.java.lang.reflect.GenericArrayType.java.lang.Class);\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322941217/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl"},"failures":[115,116,117,118,119,15,25,26,27,28,29,127,30,31,32,33,34,140,37,38,142,173,186,187,188],"tindex":"0d54cf89-3f0f-11e6-becf-69c65cbae61f","method":{"position":"com.google.gson.Gson:491","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322941217/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src == null) {\n                {\n                    if (src == null) {\n                        {\n                            com.google.gson.internal.bind.JsonTreeWriter com.google.gson.internal.bind.JsonTreeWriter = new com.google.gson.internal.bind.JsonTreeWriter();\n                            toJson(src, typeOfSrc, writer);\n                            return writer.get();\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322941217/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322941217/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:278","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"0d54f69a-3f0f-11e6-becf-f9ffec811193","method":{"position":"com.google.gson.internal.LinkedTreeMap:217","type":"CtMethodImpl","sourcecode":"void removeInternal(com.google.gson.internal.LinkedTreeMap.Node<K, V> node, boolean unlink) {\n    if (node != null) {\n        {\n            if (unlink) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322941217/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (unlink) {\n                        node.com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                        node.com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    } \n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    if ((left != null) && (right != null)) {\n                        com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = (left.int) > (right.int) ? left.last() : right.first();\n                        removeInternal(adjacent, false);\n                        int int = 0;\n                        left = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                        if (left != null) {\n                            leftHeight = left.int;\n                            adjacent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = left;\n                            left.com.google.gson.internal.LinkedTreeMap.Node<K, V> = adjacent;\n                            node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                        } \n                        int int = 0;\n                        right = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                        if (right != null) {\n                            rightHeight = right.int;\n                            adjacent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = right;\n                            right.com.google.gson.internal.LinkedTreeMap.Node<K, V> = adjacent;\n                            node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                        } \n                        adjacent.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                        replaceInParent(node, adjacent);\n                        return ;\n                    } else if (left != null) {\n                        replaceInParent(node, left);\n                        node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                    } else if (right != null) {\n                        replaceInParent(node, right);\n                        node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                    } else {\n                        replaceInParent(node, null);\n                    }\n                    rebalance(originalParent, false);\n                    (int)--;\n                    (int)++;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322941217/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"node"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"0d5544bb-3f0f-11e6-becf-397a1ddaddb2","method":{"position":"com.google.gson.Gson:491","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322941217/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src == null) {\n                {\n                    if (src == null) {\n                        {\n                            com.google.gson.internal.bind.JsonTreeWriter com.google.gson.internal.bind.JsonTreeWriter = new com.google.gson.internal.bind.JsonTreeWriter();\n                            toJson(src, typeOfSrc, writer);\n                            return writer.get();\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322941217/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322941217/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"0d5544bc-3f0f-11e6-becf-534c79a937b7","method":{"position":"com.google.gson.DefaultDateTypeAdapter:77","type":"CtMethodImpl","sourcecode":"public java.util.Date deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT, com.google.gson.JsonDeserializationContext context) throws com.google.gson.JsonParseException {\n    if (json == null) {\n        {\n            if (!(json instanceof com.google.gson.JsonPrimitive)) {\n                throw new com.google.gson.JsonParseException(\"The date should be a string value\");\n            } \n            java.util.Date java.util.Date = deserializeToDate(json);\n            if (typeOfT == (java.util.Date.java.util.Date.java.lang.Class)) {\n                return date;\n            } else if (typeOfT == (java.sql.Timestamp.java.sql.Timestamp.java.lang.Class)) {\n                return new java.sql.Timestamp(date.getTime());\n            } else if (typeOfT == (java.sql.Date.java.sql.Date.java.lang.Class)) {\n                return new java.sql.Date(date.getTime());\n            } else {\n                throw new java.lang.IllegalArgumentException((((getClass()) + \" cannot deserialize to \") + typeOfT));\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322941217/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl"},"failures":[91,6,7,99,115,116,118,119,15,20,21,22,25,26,27,28,29,127,30,31,32,33,34,37,38,173,186],"tindex":"0d5544bd-3f0f-11e6-becf-9bdbe04acdaa","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:132","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter name(java.lang.String name) throws java.io.IOException {\n    if (name == null) {\n        {\n            if ((java.util.List<com.google.gson.JsonElement>.isEmpty()) || ((java.lang.String) != null)) {\n                throw new java.lang.IllegalStateException();\n            } \n            com.google.gson.JsonElement com.google.gson.JsonElement = peek();\n            if (element instanceof com.google.gson.JsonObject) {\n                java.lang.String = name;\n                return com.google.gson.internal.bind.JsonTreeWriter.this;\n            } \n            throw new java.lang.IllegalStateException();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322941217/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"0d556bce-3f0f-11e6-becf-8d52779e146d","method":{"position":"com.google.gson.Gson:261","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322941217/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (value == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322941217/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.io.IOException();\n                    } else {\n                        {\n                            if (value == null) {\n                                {\n                                    if (value == null) {\n                                        out.nullValue();\n                                        return ;\n                                    } \n                                    double double = value.doubleValue();\n                                    checkValidFloatingPoint(doubleValue);\n                                    out.value(value);\n                                }\n                            } else {\n                                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322941217/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                throw new java.io.IOException();\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322941217/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"0d556bcf-3f0f-11e6-becf-fdb56062979c","method":{"position":"com.google.gson.FieldNamingPolicy:137","type":"CtMethodImpl","sourcecode":"private static java.lang.String upperCaseFirstLetter(java.lang.String name) {\n    if (name == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322941217/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            int int = 0;\n            char char = name.charAt(index);\n            while (index < ((name.length()) - 1)) {\n                if (java.lang.Character.isLetter(firstCharacter)) {\n                    break;\n                } \n                fieldNameBuilder.append(firstCharacter);\n                firstCharacter = name.charAt((++index));\n            }\n            if (index == (name.length())) {\n                return fieldNameBuilder.toString();\n            } \n            if (!(java.lang.Character.isUpperCase(firstCharacter))) {\n                java.lang.String java.lang.String = com.google.gson.FieldNamingPolicy.modifyString(java.lang.Character.toUpperCase(firstCharacter), name, (++index));\n                return fieldNameBuilder.append(modifiedTarget).toString();\n            } else {\n                return name;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:278","type":"CtBinaryOperatorImpl"},"failures":[3,8,9,10,11,12,13,15,16,25,26,27,28,29,41,42,47,50,176,59],"tindex":"0d5592e0-3f0f-11e6-becf-25f376bcfcc5","method":{"position":"com.google.gson.internal.LinkedTreeMap:284","type":"CtMethodImpl","sourcecode":"private void replaceInParent(com.google.gson.internal.LinkedTreeMap.Node<K, V> node, com.google.gson.internal.LinkedTreeMap.Node<K, V> replacement) {\n    if (node != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322941217/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n            if (replacement != null) {\n                replacement.com.google.gson.internal.LinkedTreeMap.Node<K, V> = parent;\n            } \n            if (parent != null) {\n                if ((parent.com.google.gson.internal.LinkedTreeMap.Node<K, V>) == node) {\n                    parent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                } else {\n                    assert (parent.com.google.gson.internal.LinkedTreeMap.Node<K, V>) == node;\n                    parent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                }\n            } else {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"node"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:462","type":"CtBinaryOperatorImpl"},"failures":[62,63,64,68,69,26,274,70,71,72,73,74,75,76,77,78,423],"tindex":"0d55b9f1-3f0f-11e6-becf-675f1bd56bcf","method":{"position":"com.google.gson.Gson:297","type":"CtMethodImpl","sourcecode":"private void checkValidFloatingPoint(double value) {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                throw new java.lang.IllegalArgumentException(((value + \" is not a valid double value as per JSON specification. To override this\") + \" behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.\"));\n            } \n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322941217/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:274","type":"CtVariableReadImpl"},"failures":[61,220,464,221,222,471,472],"tindex":"0d55b9f2-3f0f-11e6-becf-fb2bdd03ecc3","method":{"position":"com.google.gson.Gson:273","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> floatAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322941217/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return ((float)(in.nextDouble()));\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    float float = value.floatValue();\n                    checkValidFloatingPoint(floatValue);\n                    out.value(value);\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"0d55b9f3-3f0f-11e6-becf-3185d0346b8b","method":{"position":"com.google.gson.Gson:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322941217/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    out.value(value.toString());\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322941217/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"0d55e104-3f0f-11e6-becf-9595cfa4b585","method":{"position":"com.google.gson.Gson:847","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(com.google.gson.JsonElement json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322941217/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (!(json instanceof com.google.gson.JsonPrimitive)) {\n                {\n                    java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n                    return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322941217/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:289","type":"CtBinaryOperatorImpl"},"failures":[23,24],"tindex":"0d55e105-3f0f-11e6-becf-0ff1debb74d0","method":{"position":"com.google.gson.JsonObject:121","type":"CtMethodImpl","sourcecode":"private com.google.gson.JsonElement createJsonElement(java.lang.Object value) {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322941217/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return value == null ? com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull : new com.google.gson.JsonPrimitive(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:127","type":"CtInvocationImpl"},"failures":[376,267,271,378],"tindex":"0d55e106-3f0f-11e6-becf-5d946aab9750","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:125","type":"CtMethodImpl","sourcecode":"private java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> getBoundFields(com.google.gson.Gson context, com.google.gson.reflect.TypeToken<?> type, java.lang.Class<?> raw) {\n    if (raw.isInterface()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322941217/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> = new java.util.LinkedHashMap<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField>();\n            if (raw.isInterface()) {\n                return result;\n            } \n            java.lang.reflect.Type java.lang.reflect.Type = type.getType();\n            while (raw != (java.lang.Object.java.lang.Object.java.lang.Class)) {\n                java.lang.reflect.Field[] java.lang.reflect.Field[] = raw.getDeclaredFields();\n                for (java.lang.reflect.Field java.lang.reflect.Field : fields) {\n                    boolean boolean = excludeField(field, true);\n                    boolean boolean = excludeField(field, false);\n                    if ((!serialize) && (!deserialize)) {\n                        continue;\n                    } \n                    field.setAccessible(true);\n                    java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, field.getGenericType());\n                    com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = createBoundField(context, field, getFieldName(field), com.google.gson.reflect.TypeToken.get(fieldType), serialize, deserialize);\n                    com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = result.put(boundField.java.lang.String, boundField);\n                    if (previous != null) {\n                        throw new java.lang.IllegalArgumentException(((declaredType + \" declares multiple JSON fields named \") + (previous.java.lang.String)));\n                    } \n                }\n                type = com.google.gson.reflect.TypeToken.get(com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, raw.getGenericSuperclass()));\n                raw = type.getRawType();\n            }\n            return result;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"raw"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"0d560817-3f0f-11e6-becf-21431f9fc9d2","method":{"position":"com.google.gson.Gson:719","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.lang.String json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322941217/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (json == null) {\n                {\n                    if (json == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322941217/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new com.google.gson.JsonSyntaxException();\n                    } else {\n                        {\n                            if (json == null) {\n                                return null;\n                            } \n                            java.io.StringReader java.io.StringReader = new java.io.StringReader(json);\n                            T T = ((T)(fromJson(reader, typeOfT)));\n                            return target;\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322941217/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:167","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"0d562f28-3f0f-11e6-becf-a90f481fed35","method":{"position":"com.google.gson.internal.LinkedTreeMap:207","type":"CtMethodImpl","sourcecode":"private boolean equal(java.lang.Object a, java.lang.Object b) {\n    if (b instanceof java.lang.reflect.ParameterizedType) {\n        {\n            return (a == b) || ((a != null) && (a.equals(b)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322941217/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:105","type":"CtBinaryOperatorImpl"},"failures":[522,35,523,55],"tindex":"0d562f29-3f0f-11e6-becf-5d194f8db64e","method":{"position":"com.google.gson.JsonObject:186","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322941217/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (o == (com.google.gson.JsonObject.this)) || ((o instanceof com.google.gson.JsonObject) && (((com.google.gson.JsonObject)(o)).com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.equals(com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:79","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"0d56563a-3f0f-11e6-becf-552d65cbc760","method":{"position":"com.google.gson.Gson:127","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonParseException {\n    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n        {\n            return ((T)(fromJson(json, typeOfT)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322941217/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"0d56563b-3f0f-11e6-becf-e19f4b8c8f81","method":{"position":"com.google.gson.TypeAdapter:268","type":"CtMethodImpl","sourcecode":"public final T fromJson(java.lang.String json) throws java.io.IOException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322941217/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (json == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322941217/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    return fromJson(new java.io.StringReader(json));\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:118","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"0d56563c-3f0f-11e6-becf-4bc9f0b3bed5","method":{"position":"com.google.gson.internal.Primitives:79","type":"CtMethodImpl","sourcecode":"public static boolean isWrapperType(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class<?>) {\n        {\n            return com.google.gson.internal.Primitives.com.google.gson.internal.Primitives.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.containsKey(com.google.gson.internal.$Gson$Preconditions.checkNotNull(type));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322941217/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"0d567d4d-3f0f-11e6-becf-49ce7e2d8623","method":{"position":"com.google.gson.Gson:261","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322941217/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (value == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322941217/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.io.IOException();\n                    } else {\n                        {\n                            if (value == null) {\n                                {\n                                    if (value == null) {\n                                        out.nullValue();\n                                        return ;\n                                    } \n                                    double double = value.doubleValue();\n                                    checkValidFloatingPoint(doubleValue);\n                                    out.value(value);\n                                }\n                            } else {\n                                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322941217/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                throw new java.io.IOException();\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322941217/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory:43","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"0d567d4e-3f0f-11e6-becf-ebb7e630172f","method":{"position":"com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory:50","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nstatic com.google.gson.TypeAdapter<?> getTypeAdapter(com.google.gson.internal.ConstructorConstructor constructorConstructor, com.google.gson.Gson gson, com.google.gson.reflect.TypeToken<?> fieldType, com.google.gson.annotations.JsonAdapter annotation) {\n    if (annotation == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322941217/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.Class<?> java.lang.Class<?> = annotation.value();\n            if (com.google.gson.TypeAdapter.com.google.gson.TypeAdapter.java.lang.Class.isAssignableFrom(value)) {\n                java.lang.Class<com.google.gson.TypeAdapter<?>> java.lang.Class<com.google.gson.TypeAdapter<?>> = ((java.lang.Class<com.google.gson.TypeAdapter<?>>)(value));\n                return constructorConstructor.get(com.google.gson.reflect.TypeToken.get(typeAdapter)).construct();\n            } \n            if (com.google.gson.TypeAdapterFactory.com.google.gson.TypeAdapterFactory.java.lang.Class.isAssignableFrom(value)) {\n                java.lang.Class<com.google.gson.TypeAdapterFactory> java.lang.Class<com.google.gson.TypeAdapterFactory> = ((java.lang.Class<com.google.gson.TypeAdapterFactory>)(value));\n                return constructorConstructor.get(com.google.gson.reflect.TypeToken.get(typeAdapterFactory)).construct().create(gson, fieldType);\n            } \n            throw new java.lang.IllegalArgumentException(\"@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.\");\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Preconditions:41","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"0d567d4f-3f0f-11e6-becf-6b7c97e75465","method":{"position":"com.google.gson.internal.$Gson$Preconditions:40","type":"CtMethodImpl","sourcecode":"public static void checkArgument(boolean condition) {\n    if (!condition) {\n        throw new java.lang.IllegalArgumentException();\n    } \n}"},"series":0,"name":"addParameterCondition","variableMap":{"condition":"condition"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"0d56a460-3f0f-11e6-becf-6fdc0c63b79f","method":{"position":"com.google.gson.TypeAdapter:254","type":"CtMethodImpl","sourcecode":"public final T fromJson(java.io.Reader in) throws java.io.IOException {\n    if (in == null) {\n        {\n            if (in == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322941217/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(in);\n                    return read(reader);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322941217/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[62,64,0,306,309,312,313,354,358],"tindex":"0d56a461-3f0f-11e6-becf-4b2e7d5b4aa4","method":{"position":"com.google.gson.internal.bind.TypeAdapters:245","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322941217/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.JsonObject:54","type":"CtBinaryOperatorImpl"},"failures":[110,117,447,1,2,517,518],"tindex":"0d56a462-3f0f-11e6-becf-e36014ad7701","method":{"position":"com.google.gson.internal.bind.TypeAdapters:680","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, com.google.gson.JsonElement value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322941217/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if ((value == null) || (value.isJsonNull())) {\n                out.nullValue();\n            } else if (value.isJsonPrimitive()) {\n                com.google.gson.JsonPrimitive com.google.gson.JsonPrimitive = value.getAsJsonPrimitive();\n                if (primitive.isNumber()) {\n                    out.value(primitive.getAsNumber());\n                } else if (primitive.isBoolean()) {\n                    out.value(primitive.getAsBoolean());\n                } else {\n                    out.value(primitive.getAsString());\n                }\n            } else if (value.isJsonArray()) {\n                out.beginArray();\n                for (com.google.gson.JsonElement com.google.gson.JsonElement : value.getAsJsonArray()) {\n                    write(out, e);\n                }\n                out.endArray();\n            } else if (value.isJsonObject()) {\n                out.beginObject();\n                for (java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> : value.getAsJsonObject().entrySet()) {\n                    out.name(e.getKey());\n                    write(out, e.getValue());\n                }\n                out.endObject();\n            } else {\n                throw new java.lang.IllegalArgumentException((\"Couldn't write \" + (value.getClass())));\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:462","type":"CtBinaryOperatorImpl"},"failures":[524],"tindex":"0d56cb73-3f0f-11e6-becf-83a4fdff1309","method":{"position":"com.google.gson.stream.JsonWriter:461","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(double value) throws java.io.IOException {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322941217/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                throw new java.lang.IllegalArgumentException((\"Numeric values must be finite, but was \" + value));\n            } \n            writeDeferredName();\n            beforeValue(false);\n            java.io.Writer.append(java.lang.Double.toString(value));\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"0d56cb74-3f0f-11e6-becf-b10dc8eb11c9","method":{"position":"com.google.gson.Gson:576","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322941217/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            try {\n                com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                toJson(src, typeOfSrc, jsonWriter);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"0d56cb75-3f0f-11e6-becf-d35efadc4c8b","method":{"position":"com.google.gson.Gson:491","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322941217/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src == null) {\n                {\n                    if (src == null) {\n                        {\n                            com.google.gson.internal.bind.JsonTreeWriter com.google.gson.internal.bind.JsonTreeWriter = new com.google.gson.internal.bind.JsonTreeWriter();\n                            toJson(src, typeOfSrc, writer);\n                            return writer.get();\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322941217/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322941217/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:166","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"0d585216-3f0f-11e6-becf-6fcdfbf2cd0c","method":{"position":"com.google.gson.reflect.TypeToken:122","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic boolean isAssignableFrom(java.lang.reflect.Type from) {\n    if (from instanceof java.lang.Class<?>) {\n        {\n            if (from instanceof java.lang.reflect.GenericArrayType) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322941217/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (from == null) {\n                        return false;\n                    } \n                    if (java.lang.reflect.Type.equals(from)) {\n                        return true;\n                    } \n                    if ((java.lang.reflect.Type) instanceof java.lang.Class<?>) {\n                        return java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from));\n                    } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.ParameterizedType) {\n                        return com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n                    } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.GenericArrayType) {\n                        return (java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from))) && (com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.GenericArrayType)(java.lang.reflect.Type))));\n                    } else {\n                        throw com.google.gson.reflect.TypeToken.buildUnexpectedTypeError(java.lang.reflect.Type, java.lang.Class.java.lang.Class.java.lang.Class, java.lang.reflect.ParameterizedType.java.lang.reflect.ParameterizedType.java.lang.Class, java.lang.reflect.GenericArrayType.java.lang.reflect.GenericArrayType.java.lang.Class);\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322941217/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl"},"failures":[525,526,527,528,529,223,224,225,227,228,442,443,530,531,240,241,242,243,115,116,118,119,244,245,532,533,246,534,535,247,536,537,248,374,249,538,250,539,540,251,541,252,253,542,254,543,544,255,545,256,257,546,258,547,548,549,550,259,260,261,551,262,14,263,264,15,265,552,266,553,16,122,123,17,124,19,375,554,555,62,556,63,376,452,377,64,267,268,269,20,557,21,22,270,271,272,558,25,26,27,28,29,127,30,31,273,274,275,32,33,379,380,276,277,34,381,382,559,0,383,279,282,283,138,139,284,494,560,285,286,287,288,289,290,37,38,291,292,293,384,294,295,296,385,386,297,561,298,387,388,299,562,563,300,301,564,302,304,305,565,306,566,307,308,309,310,70,567,311,312,313,568,314,569,315,317,318,570,39,40,41,42,43,319,320,321,46,323,571,424,324,572,573,325,326,327,328,389,329,330,331,332,333,334,335,574,575,336,576,337,577,578,338,339,579,580,340,390,155,156,158,160,341,342,343,344,581,50,345,350,391,170,357,171,360,173,363,364,365,366,392,367,368,369,370,371,372,59,582,583,584,585,586,373],"tindex":"0d587927-3f0f-11e6-becf-791c329c37f4","method":{"position":"com.google.gson.internal.Excluder:149","type":"CtMethodImpl","sourcecode":"public boolean excludeField(java.lang.reflect.Field field, boolean serialize) {\n    if (field.isSynthetic()) {\n        {\n            if (((int) & (field.getModifiers())) != 0) {\n                return true;\n            } \n            if (((double) != (com.google.gson.internal.Excluder.com.google.gson.internal.Excluder.double)) && (!(isValidVersion(field.getAnnotation(com.google.gson.annotations.Since.com.google.gson.annotations.Since.java.lang.Class), field.getAnnotation(com.google.gson.annotations.Until.com.google.gson.annotations.Until.java.lang.Class))))) {\n                return true;\n            } \n            if (field.isSynthetic()) {\n                return true;\n            } \n            if (boolean) {\n                com.google.gson.annotations.Expose com.google.gson.annotations.Expose = field.getAnnotation(com.google.gson.annotations.Expose.com.google.gson.annotations.Expose.java.lang.Class);\n                if ((annotation == null) || (serialize ? !(annotation.serialize()) : !(annotation.deserialize()))) {\n                    return true;\n                } \n            } \n            if ((!(boolean)) && (isInnerClass(field.getType()))) {\n                return true;\n            } \n            if (isAnonymousOrLocal(field.getType())) {\n                return true;\n            } \n            java.util.List<com.google.gson.ExclusionStrategy> java.util.List<com.google.gson.ExclusionStrategy> = serialize ? java.util.List<com.google.gson.ExclusionStrategy> : java.util.List<com.google.gson.ExclusionStrategy>;\n            if (!(list.isEmpty())) {\n                com.google.gson.FieldAttributes com.google.gson.FieldAttributes = new com.google.gson.FieldAttributes(field);\n                for (com.google.gson.ExclusionStrategy com.google.gson.ExclusionStrategy : list) {\n                    if (exclusionStrategy.shouldSkipField(fieldAttributes)) {\n                        return true;\n                    } \n                }\n            } \n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322941217/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"field"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:141","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"0d58a038-3f0f-11e6-becf-edb75445cc80","method":{"position":"com.google.gson.internal.$Gson$Types:431","type":"CtMethodImpl","sourcecode":"private static void checkNotPrimitive(java.lang.reflect.Type type) {\n    com.google.gson.internal.$Gson$Preconditions.checkArgument(((!(type instanceof java.lang.Class<?>)) || (!(((java.lang.Class<?>)(type)).isPrimitive()))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.ObjectTypeAdapter:95","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"0d58a039-3f0f-11e6-becf-f9d4b104c6e0","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:108","type":"CtMethodImpl","sourcecode":"public boolean writeField(java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322941217/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (!(boolean))\n                return false;\n            \n            java.lang.Object java.lang.Object = field.get(value);\n            return fieldValue != value;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"0d58a03a-3f0f-11e6-becf-e1e885039443","method":{"position":"com.google.gson.stream.JsonWriter:532","type":"CtMethodImpl","sourcecode":"private void string(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322941217/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            java.lang.String[] java.lang.String[] = boolean ? com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[] : com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[];\n            java.io.Writer.write(\"\\\"\");\n            int int = 0;\n            int int = value.length();\n            for (int int = 0 ; i < length ; i++) {\n                char char = value.charAt(i);\n                java.lang.String java.lang.String;\n                if (c < 128) {\n                    replacement = replacements[c];\n                    if (replacement == null) {\n                        continue;\n                    } \n                } else if (c == '\\u2028') {\n                    replacement = \"\\\\u2028\";\n                } else if (c == '\\u2029') {\n                    replacement = \"\\\\u2029\";\n                } else {\n                    continue;\n                }\n                if (last < i) {\n                    java.io.Writer.write(value, last, (i - last));\n                } \n                java.io.Writer.write(replacement);\n                last = i + 1;\n            }\n            if (last < length) {\n                java.io.Writer.write(value, last, (length - last));\n            } \n            java.io.Writer.write(\"\\\"\");\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"0d58c74b-3f0f-11e6-becf-21111883649b","method":{"position":"com.google.gson.Gson:719","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.lang.String json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322941217/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (json == null) {\n                {\n                    if (json == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322941217/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new com.google.gson.JsonSyntaxException();\n                    } else {\n                        {\n                            if (json == null) {\n                                return null;\n                            } \n                            java.io.StringReader java.io.StringReader = new java.io.StringReader(json);\n                            T T = ((T)(fromJson(reader, typeOfT)));\n                            return target;\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322941217/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"0d58ee5c-3f0f-11e6-becf-0383c87be8d0","method":{"position":"com.google.gson.internal.bind.DateTypeAdapter:69","type":"CtMethodImpl","sourcecode":"private synchronized java.util.Date deserializeToDate(java.lang.String json) {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322941217/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            try {\n                return java.text.DateFormat.parse(json);\n            } catch (java.text.ParseException ignored) {\n            }\n            try {\n                return java.text.DateFormat.parse(json);\n            } catch (java.text.ParseException ignored) {\n            }\n            try {\n                return java.text.DateFormat.parse(json);\n            } catch (java.text.ParseException e) {\n                throw new com.google.gson.JsonSyntaxException(json , e);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"0d58ee5d-3f0f-11e6-becf-31ca789d6de1","method":{"position":"com.google.gson.TypeAdapter:268","type":"CtMethodImpl","sourcecode":"public final T fromJson(java.lang.String json) throws java.io.IOException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322941217/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (json == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322941217/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    return fromJson(new java.io.StringReader(json));\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"0d58ee5e-3f0f-11e6-becf-29a52a06654c","method":{"position":"com.google.gson.Gson:719","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.lang.String json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322941217/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (json == null) {\n                {\n                    if (json == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322941217/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new com.google.gson.JsonSyntaxException();\n                    } else {\n                        {\n                            if (json == null) {\n                                return null;\n                            } \n                            java.io.StringReader java.io.StringReader = new java.io.StringReader(json);\n                            T T = ((T)(fromJson(reader, typeOfT)));\n                            return target;\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322941217/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:243","type":"CtBinaryOperatorImpl"},"failures":[337,577,578,339,579,340],"tindex":"0d59156f-3f0f-11e6-becf-db4f68f813ee","method":{"position":"com.google.gson.internal.Excluder:242","type":"CtMethodImpl","sourcecode":"private boolean isValidUntil(com.google.gson.annotations.Until annotation) {\n    if (annotation != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322941217/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (annotation != null) {\n                double double = annotation.value();\n                if (annotationVersion <= (double)) {\n                    return false;\n                } \n            } \n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:154","type":"CtUnaryOperatorImpl"},"failures":[587,3,8,10,588,589,12,115,116,118,119,120,14,263,15,123,17,124,22,27,29,127,30,31,32,33,34,35,37,38,143,42,45,46,48,154,590,591,592,51,52,53,593,54,174,594,595,55,176,177,178,179,57,58,186],"tindex":"0d591570-3f0f-11e6-becf-63d854f112dd","method":{"position":"com.google.gson.internal.LinkedTreeMap:121","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedTreeMap.Node<K, V> find(K key, boolean create) {\n    if (!create) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322941217/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.util.Comparator<? super K> java.util.Comparator<? super K> = com.google.gson.internal.LinkedTreeMap.this.java.util.Comparator<? super K>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            int int = 0;\n            if (nearest != null) {\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                java.lang.Comparable<java.lang.Object> java.lang.Comparable<java.lang.Object> = comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>) ? ((java.lang.Comparable<java.lang.Object>)(key)) : null;\n                while (true) {\n                    comparison = comparableKey != null ? comparableKey.compareTo(nearest.K) : comparator.compare(key, nearest.K);\n                    if (comparison == 0) {\n                        return nearest;\n                    } \n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = comparison < 0 ? nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> : nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    if (child == null) {\n                        break;\n                    } \n                    nearest = child;\n                }\n            } \n            if (!create) {\n                return null;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.this.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            if (nearest == null) {\n                if ((comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>)) && (!(key instanceof java.lang.Comparable))) {\n                    throw new java.lang.ClassCastException(((key.getClass().getName()) + \" is not Comparable\"));\n                } \n                created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n            } else {\n                created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                if (comparison < 0) {\n                    nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                } else {\n                    nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                }\n                rebalance(nearest, true);\n            }\n            (int)++;\n            (int)++;\n            return created;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"create":"create"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:79","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"0d596391-3f0f-11e6-becf-395c7f414d76","method":{"position":"com.google.gson.Gson:871","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322941217/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (json == null) {\n                return null;\n            } \n            return ((T)(fromJson(new com.google.gson.internal.bind.JsonTreeReader(json), typeOfT)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl"},"failures":[],"tindex":"0d596392-3f0f-11e6-becf-8322299efdd5","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:116","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<?> getFieldAdapter(com.google.gson.Gson gson, java.lang.reflect.Field field, com.google.gson.reflect.TypeToken<?> fieldType) {\n    if (field.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322941217/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.annotations.JsonAdapter com.google.gson.annotations.JsonAdapter = field.getAnnotation(com.google.gson.annotations.JsonAdapter.com.google.gson.annotations.JsonAdapter.java.lang.Class);\n            if (annotation != null) {\n                com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory.getTypeAdapter(com.google.gson.internal.ConstructorConstructor, gson, fieldType, annotation);\n                if (adapter != null)\n                    return adapter;\n                \n            } \n            return gson.getAdapter(fieldType);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"field"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:540","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"0d596393-3f0f-11e6-becf-f98c1ebc3fbb","method":{"position":"com.google.gson.stream.JsonReader:755","type":"CtMethodImpl","sourcecode":"private boolean isLiteral(char c) throws java.io.IOException {\n    if (c < 128) {\n        {\n            switch (c) {\n                case '/' :\n                case '\\\\' :\n                case ';' :\n                case '#' :\n                case '=' :\n                    checkLenient();\n                case '{' :\n                case '}' :\n                case '[' :\n                case ']' :\n                case ':' :\n                case ',' :\n                case ' ' :\n                case '\\t' :\n                case '\\f' :\n                case '\\r' :\n                case '\\n' :\n                    return false;\n                default :\n                    return true;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322941217/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"c"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":72,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
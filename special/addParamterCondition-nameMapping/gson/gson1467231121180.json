{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":527,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":309,"com.google.gson.functional.StringTest.testStringValueDeserialization":307,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":272,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":479,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":190,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":440,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":0,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":140,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":294,"com.google.gson.MixedStreamTest.testWriteLenient":586,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":102,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":199,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":520,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":327,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":100,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":344,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":488,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":64,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":560,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":222,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":449,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":55,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":536,"com.google.gson.functional.ObjectTest.testSingletonLists":98,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":67,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":191,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":310,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":433,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":617,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":43,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":144,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":349,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":209,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":118,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":597,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":491,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":563,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":626,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":323,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":69,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":224,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":480,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":254,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":425,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":573,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":83,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":253,"com.google.gson.functional.EnumTest.testEnumCaseMapping":559,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":308,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":593,"com.google.gson.functional.JsonTreeTest.testToJsonTree":218,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":424,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":229,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":212,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":20,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":63,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":165,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":624,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":400,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":183,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":435,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":539,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":337,"com.google.gson.functional.ObjectTest.testNullDeserialization":130,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":89,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":320,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":112,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":501,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":600,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":441,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":119,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":81,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":422,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":127,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":599,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":220,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":155,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":213,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":305,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":506,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":505,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":208,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":485,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":625,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":464,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":164,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":512,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":131,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":396,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":189,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":462,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":246,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":295,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":477,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":286,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":180,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":416,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":29,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":268,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":301,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":486,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":478,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":126,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":390,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":106,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":384,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":595,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":7,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":264,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":445,"com.google.gson.metrics.PerformanceTest.testDummy":592,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":68,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":11,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":53,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":27,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":31,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":141,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":270,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":197,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":366,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":24,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":182,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":421,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":92,"com.google.gson.functional.CollectionTest.testSetDeserialization":343,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":223,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":111,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":353,"com.google.gson.functional.EnumTest.testEnumSet":550,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":469,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":54,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":30,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithNestedWildcards":618,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":170,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":241,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":120,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":52,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":572,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":482,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":26,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":493,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":78,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":150,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":494,"com.google.gson.functional.MapTest.testHashMapDeserialization":235,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":438,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":333,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":195,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":385,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":529,"com.google.gson.MixedStreamTest.testReadNulls":587,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":277,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":525,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":148,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":412,"com.google.gson.functional.MapTest.testSortedMap":257,"com.google.gson.functional.MapTest.testMapSerialization":252,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":528,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":362,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":475,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":403,"com.google.gson.functional.MapTest.testSerializeMaps":238,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":359,"com.google.gson.functional.MapTest.testComplexKeysSerialization":265,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":352,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":269,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":410,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":91,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":557,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":548,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":289,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":145,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":555,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":227,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":2,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":129,"com.google.gson.functional.MapTest.testStringKeyDeserialization":267,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithBasicWildcards":620,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":407,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":35,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":508,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":271,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":444,"com.google.gson.functional.PrettyPrintingTest.testMap":225,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":370,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":439,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":330,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":146,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":160,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":531,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":409,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":596,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":313,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":317,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":177,"com.google.gson.functional.MapTest.testMapSerializationEmpty":266,"com.google.gson.functional.CollectionTest.testQueueSerialization":334,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":602,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":470,"com.google.gson.functional.MapTest.testMapOfMapSerialization":251,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":461,"com.google.gson.JavaSerializationTest.testMapIsSerializable":614,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":185,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":340,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":472,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":608,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":44,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":311,"com.google.gson.functional.FieldNamingTest.testIdentity":360,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":32,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":73,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":132,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":6,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":97,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":217,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":522,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":427,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":574,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":312,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":418,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":274,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":467,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":201,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":577,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":172,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":179,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":211,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":607,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":232,"com.google.gson.functional.MapTest.testMapSubclassSerialization":237,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":504,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":62,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":292,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":355,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":372,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":459,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":561,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":583,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":159,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":296,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":519,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":143,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":51,"com.google.gson.functional.EnumTest.testEnumSubclass":553,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":481,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":116,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":598,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":426,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":417,"com.google.gson.GsonBuilderTest.testRegisterTypeAdapterForCoreType":609,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":487,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":34,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":284,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":429,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":276,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":465,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":275,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":9,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":399,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":576,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":110,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":471,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":5,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":463,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":204,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":99,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":234,"com.google.gson.MixedStreamTest.testWriteNulls":584,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":398,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":299,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":392,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":48,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":90,"com.google.gson.CommentsTest.testParseComments":579,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":39,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":101,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":542,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":378,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":405,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":484,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":361,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":256,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":315,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":71,"com.google.gson.MixedStreamTest.testReadInvalidState":581,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":219,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":60,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":206,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":503,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":363,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":437,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":411,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithTypeParameters":619,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":375,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":454,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":606,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":187,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":498,"com.google.gson.functional.MapTest.testMapDeserialization":244,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":395,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":181,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":230,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":233,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":535,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":18,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":243,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":541,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":537,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":290,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":216,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":554,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":157,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":117,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":133,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":279,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":373,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":10,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":166,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":59,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":273,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":288,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":226,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":255,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":611,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":210,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":423,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":41,"com.google.gson.functional.PrimitiveTest.testShortSerialization":502,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":544,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":490,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":85,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":460,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":489,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":171,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":436,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":356,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":552,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":329,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":291,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":239,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":453,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":350,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":510,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":297,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":198,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":549,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":591,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":517,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":511,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":622,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":4,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":17,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":33,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":134,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":152,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":562,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":496,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":22,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":36,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":466,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":138,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":105,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":558,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":281,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":354,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":167,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":338,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":368,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":37,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":534,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":188,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":543,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":443,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":174,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":415,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":545,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":193,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":14,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":331,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":430,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":497,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":468,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":514,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":381,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":540,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":551,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":533,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":364,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":103,"com.google.gson.functional.MapTest.testGeneralMapField":261,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":389,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":516,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":369,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":404,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":419,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":200,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":259,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":153,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":304,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":434,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":492,"com.google.gson.MixedStreamTest.testReadMixedStreamed":590,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":168,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":247,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":455,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":345,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":414,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":575,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":66,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":473,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":84,"com.google.gson.JavaSerializationTest.testNumberIsSerializable":613,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":25,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":186,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":248,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":326,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":236,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":40,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":515,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":87,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":566,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":456,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":184,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":300,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":74,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":151,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":339,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":547,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":46,"com.google.gson.functional.ObjectTest.testNestedDeserialization":139,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":70,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":124,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":530,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":8,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":82,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":513,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":377,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":1,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":249,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":314,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":50,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":500,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":280,"com.google.gson.JavaSerializationTest.testListIsSerializable":615,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":298,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":524,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":348,"com.google.gson.functional.ObjectTest.testNullSerialization":113,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":283,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":325,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":240,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":260,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":428,"com.google.gson.functional.MapTest.testInterfaceTypeMap":258,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":401,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":371,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":13,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":431,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":556,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":621,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":287,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":374,"com.google.gson.MixedStreamTest.testReadClosed":582,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":154,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":80,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":447,"com.google.gson.MixedStreamTest.testWriteClosed":589,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":336,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":532,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":16,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":104,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":214,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":56,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":12,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":380,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":136,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":376,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":207,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":19,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":107,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":335,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":567,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":476,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":569,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":285,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":341,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":194,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":75,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":518,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":604,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":452,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":215,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":162,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":93,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":386,"com.google.gson.functional.CollectionTest.testQueueDeserialization":351,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":379,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":458,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":474,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":319,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":526,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":205,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":568,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":128,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":245,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":176,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":137,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":306,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":328,"com.google.gson.functional.MapTest.testRawMapSerialization":263,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":580,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":346,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":192,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":623,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":122,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":278,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":367,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":546,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":610,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":142,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":391,"com.google.gson.functional.PrimitiveTest.testByteSerialization":499,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":612,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":95,"com.google.gson.ObjectTypeAdapterTest.testSerialize":616,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":302,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":442,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":521,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":402,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":357,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":57,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":316,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":571,"com.google.gson.functional.MapTest.testMapWithQuotes":250,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":161,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":450,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":318,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":28,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":413,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":45,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":603,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":507,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":158,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":221,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":538,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":47,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":135,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":231,"com.google.gson.functional.ObjectTest.testEmptyStringDeserialization":115,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":173,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":483,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":109,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":408,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":202,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":163,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":175,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":523,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":565,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":495,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":149,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":342,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":394,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":49,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":203,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":387,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":282,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":76,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":570,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":293,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":147,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":61,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":432,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":42,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":121,"com.google.gson.functional.ObjectTest.testNestedSerialization":123,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":382,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":303,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":322,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":446,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":86,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":262,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":365,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":21,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":588,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":601,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":72,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":114,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":509,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":15,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":65,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":178,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":448,"com.google.gson.GsonBuilderTest.testCreatingMoreThanOnce":578,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":594,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":125,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":156,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":564,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":321,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":397,"com.google.gson.functional.CollectionTest.testSetSerialization":347,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":420,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":38,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":228,"com.google.gson.functional.StringTest.testStringValueSerialization":324,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":94,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":3,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":332,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":605,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":388,"com.google.gson.MixedStreamTest.testWriteInvalidState":585,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":108,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":451,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":406,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":457,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":383,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":169,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":358,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":88,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":77,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":79,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":58,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":196,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":96,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":242,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":23,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":393},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:120","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonNull"},"failures":[],"tindex":"bd540e0d-3e35-11e6-8da7-61b1b878636c","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:839","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonNull) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230380321/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return containsKey(o);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:274","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601],"tindex":"bd54833e-3e35-11e6-8da7-7915dade3bba","method":{"position":"com.google.gson.Gson:249","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> doubleAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return in.nextDouble();\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    double double = value.doubleValue();\n                    checkValidFloatingPoint(doubleValue);\n                    out.value(value);\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230380321/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[485,508,514,586],"tindex":"bd54aa4f-3e35-11e6-8da7-3b556c1275e9","method":{"position":"com.google.gson.internal.bind.TypeAdapters:297","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230380321/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"bd54aa50-3e35-11e6-8da7-ede6aa50f616","method":{"position":"com.google.gson.JsonObject:78","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.String value) {\n    if (property == null) {\n        {\n            if (property == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230380321/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    add(property, createJsonElement(value));\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230380321/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[539],"tindex":"bd54d161-3e35-11e6-8da7-bfc2e693e362","method":{"position":"com.google.gson.Gson:133","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src) {\n    if (src != null) {\n        {\n            if (src == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230380321/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return toJsonTree(src);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230380321/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[],"tindex":"bd54d162-3e35-11e6-8da7-aff096af5c2e","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:132","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter name(java.lang.String name) throws java.io.IOException {\n    if (name == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230380321/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if ((java.util.List<com.google.gson.JsonElement>.isEmpty()) || ((java.lang.String) != null)) {\n                throw new java.lang.IllegalStateException();\n            } \n            com.google.gson.JsonElement com.google.gson.JsonElement = peek();\n            if (element instanceof com.google.gson.JsonObject) {\n                java.lang.String = name;\n                return com.google.gson.internal.bind.JsonTreeWriter.this;\n            } \n            throw new java.lang.IllegalStateException();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"bd54d163-3e35-11e6-8da7-d151b98d3473","method":{"position":"com.google.gson.JsonObject:78","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.String value) {\n    if (property == null) {\n        {\n            if (property == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230380321/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    add(property, createJsonElement(value));\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230380321/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[],"tindex":"bd54f874-3e35-11e6-8da7-2b3e70e39b92","method":{"position":"com.google.gson.Gson:591","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    if (src != null) {\n        {\n            com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = getAdapter(com.google.gson.reflect.TypeToken.get(typeOfSrc));\n            boolean boolean = writer.isLenient();\n            writer.setLenient(true);\n            boolean boolean = writer.isHtmlSafe();\n            writer.setHtmlSafe(boolean);\n            boolean boolean = writer.getSerializeNulls();\n            writer.setSerializeNulls(boolean);\n            try {\n                ((com.google.gson.TypeAdapter<java.lang.Object>)(adapter)).write(writer, src);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            } finally {\n                writer.setLenient(oldLenient);\n                writer.setHtmlSafe(oldHtmlSafe);\n                writer.setSerializeNulls(oldSerializeNulls);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230380321/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:240","type":"CtInvocationImpl","sourcecode":"from.getRawType().equals(to.getRawType())"},"failures":[],"tindex":"bd54f875-3e35-11e6-8da7-31a20eeff885","method":{"position":"com.google.gson.reflect.TypeToken:185","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.ParameterizedType to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeVarMap) {\n    if (from == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230380321/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (from.getRawType().equals(from.getRawType())) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230380321/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (from == null) {\n                        return false;\n                    } \n                    if (to.equals(from)) {\n                        return true;\n                    } \n                    java.lang.Class<?> java.lang.Class<?> = com.google.gson.internal.$Gson$Types.getRawType(from);\n                    java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = null;\n                    if (from instanceof java.lang.reflect.ParameterizedType) {\n                        ptype = ((java.lang.reflect.ParameterizedType)(from));\n                    } \n                    if (ptype != null) {\n                        java.lang.reflect.Type[] java.lang.reflect.Type[] = ptype.getActualTypeArguments();\n                        java.lang.reflect.TypeVariable<?>[] java.lang.reflect.TypeVariable<?>[] = clazz.getTypeParameters();\n                        for (int int = 0 ; i < (tArgs.int) ; i++) {\n                            java.lang.reflect.Type java.lang.reflect.Type = tArgs[i];\n                            java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = tParams[i];\n                            while (arg instanceof java.lang.reflect.TypeVariable<?>) {\n                                java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(arg));\n                                arg = typeVarMap.get(v.getName());\n                            }\n                            typeVarMap.put(var.getName(), arg);\n                        }\n                        if (com.google.gson.reflect.TypeToken.typeEquals(ptype, to, typeVarMap)) {\n                            return true;\n                        } \n                    } \n                    for (java.lang.reflect.Type java.lang.reflect.Type : clazz.getGenericInterfaces()) {\n                        if (com.google.gson.reflect.TypeToken.isAssignableFrom(itype, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap))) {\n                            return true;\n                        } \n                    }\n                    java.lang.reflect.Type java.lang.reflect.Type = clazz.getGenericSuperclass();\n                    return com.google.gson.reflect.TypeToken.isAssignableFrom(sType, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap));\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from","to":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:501","type":"CtBinaryOperatorImpl","sourcecode":"typeAdapter instanceof com.google.gson.TypeAdapter<?>"},"failures":[],"tindex":"bd551f86-3e35-11e6-8da7-99416f7d85fd","method":{"position":"com.google.gson.TreeTypeAdapter:84","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newFactory(com.google.gson.reflect.TypeToken<?> exactType, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n        {\n            if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230380321/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , exactType , false , null);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230380321/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[],"tindex":"bd554697-3e35-11e6-8da7-f77ebccd5c72","method":{"position":"com.google.gson.Gson:510","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src) {\n    if (src != null) {\n        {\n            if (src == null) {\n                return toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull);\n            } \n            return toJson(src, src.getClass());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230380321/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:120","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonNull"},"failures":[],"tindex":"bd554698-3e35-11e6-8da7-b72a8574166a","method":{"position":"com.google.gson.internal.$Gson$Types:511","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    return (o instanceof java.lang.reflect.GenericArrayType) && (com.google.gson.internal.$Gson$Types.equals(com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl.this, ((java.lang.reflect.GenericArrayType)(o))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"bd55bbc9-3e35-11e6-8da7-adabb0a5312a","method":{"position":"com.google.gson.Gson:871","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            if (json == null) {\n                return null;\n            } \n            return ((T)(fromJson(new com.google.gson.internal.bind.JsonTreeReader(json), typeOfT)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230380321/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[602],"tindex":"bd55bbca-3e35-11e6-8da7-b96295463516","method":{"position":"com.google.gson.JsonObject:100","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Boolean value) {\n    if (property == null) {\n        {\n            add(property, createJsonElement(value));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230380321/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:250","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601],"tindex":"bd55bbcb-3e35-11e6-8da7-777c12add716","method":{"position":"com.google.gson.Gson:273","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> floatAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230380321/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230380321/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (serializeSpecialFloatingPointValues) {\n                        {\n                            if (serializeSpecialFloatingPointValues) {\n                                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n                            } \n                            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                                @java.lang.Override\n                                public java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                                        in.nextNull();\n                                        return null;\n                                    } \n                                    return ((float)(in.nextDouble()));\n                                }\n\n                                @java.lang.Override\n                                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                                    if (value == null) {\n                                        out.nullValue();\n                                        return ;\n                                    } \n                                    float float = value.floatValue();\n                                    checkValidFloatingPoint(floatValue);\n                                    out.value(value);\n                                }\n                            };\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230380321/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:455","type":"CtBinaryOperatorImpl","sourcecode":"(typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)"},"failures":[45,69,70,71,83,84,85,119,552,572],"tindex":"bd55e2dc-3e35-11e6-8da7-919a439e28dd","method":{"position":"com.google.gson.GsonBuilder:493","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\npublic com.google.gson.GsonBuilder registerTypeHierarchyAdapter(java.lang.Class<?> baseType, java.lang.Object typeAdapter) {\n    if ((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230380321/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.$Gson$Preconditions.checkArgument((((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) || (typeAdapter instanceof com.google.gson.TypeAdapter<?>)));\n            if ((typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)) {\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(0, com.google.gson.TreeTypeAdapter.newTypeHierarchyFactory(baseType, typeAdapter));\n            } \n            if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.internal.bind.TypeAdapters.newTypeHierarchyFactory(baseType, ((com.google.gson.TypeAdapter)(typeAdapter))));\n            } \n            return com.google.gson.GsonBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"bd5609ed-3e35-11e6-8da7-5b7c66412b9f","method":{"position":"com.google.gson.Gson:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230380321/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    out.value(value.toString());\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230380321/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:111","type":"CtInvocationImpl","sourcecode":"primitive.isString()"},"failures":[],"tindex":"bd5609ee-3e35-11e6-8da7-0d6ee362f4b1","method":{"position":"com.google.gson.JsonPrimitive:93","type":"CtMethodImpl","sourcecode":"void setValue(java.lang.Object primitive) {\n    if (primitive.isString()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230380321/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (primitive instanceof java.lang.Character) {\n                char char = ((java.lang.Character)(primitive)).charValue();\n                com.google.gson.JsonPrimitive.this.java.lang.Object = java.lang.String.valueOf(c);\n            } else {\n                com.google.gson.internal.$Gson$Preconditions.checkArgument(((primitive instanceof java.lang.Number) || (com.google.gson.JsonPrimitive.isPrimitiveOrString(primitive))));\n                com.google.gson.JsonPrimitive.this.java.lang.Object = primitive;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"primitive"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:109","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonPrimitive"},"failures":[],"tindex":"bd5609ef-3e35-11e6-8da7-c33fa46410f0","method":{"position":"com.google.gson.internal.LinkedTreeMap:481","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"rawtypes\")\n@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonPrimitive) {\n        {\n            if (o instanceof java.util.Map.Entry) {\n                java.util.Map.Entry java.util.Map.Entry = ((java.util.Map.Entry)(o));\n                return ((K) == null ? (other.getKey()) == null : K.equals(other.getKey())) && ((V) == null ? (other.getValue()) == null : V.equals(other.getValue()));\n            } \n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230380321/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[171,211,546],"tindex":"bd5609f0-3e35-11e6-8da7-d9eedfda9918","method":{"position":"com.google.gson.Gson:532","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230380321/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n            toJson(src, typeOfSrc, writer);\n            return writer.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:103","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.GenericArrayType"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,72,73,74,75,76,77,603,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,97,98,99,100,101,102,103,104,105,106,107,109,110,111,112,114,116,117,118,119,120,121,122,123,124,125,126,127,128,129,131,132,133,134,135,136,137,138,139,140,141,142,143,144,146,147,148,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,604,605,606,607,608,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,609,610,611,612,579,580,581,583,585,586,587,588,589,590,591,593,594,613,614,615,595,616,617,618,619,620,596,597,598,601],"tindex":"bd563101-3e35-11e6-8da7-7f220a6a347c","method":{"position":"com.google.gson.reflect.TypeToken:295","type":"CtMethodImpl","sourcecode":"public static com.google.gson.reflect.TypeToken<?> get(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.GenericArrayType) {\n        {\n            return new com.google.gson.reflect.TypeToken<java.lang.Object>(type);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230380321/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:250","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[],"tindex":"bd565812-3e35-11e6-8da7-778da2bb3e15","method":{"position":"com.google.gson.Gson:273","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> floatAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230380321/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230380321/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (serializeSpecialFloatingPointValues) {\n                        {\n                            if (serializeSpecialFloatingPointValues) {\n                                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n                            } \n                            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                                @java.lang.Override\n                                public java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                                        in.nextNull();\n                                        return null;\n                                    } \n                                    return ((float)(in.nextDouble()));\n                                }\n\n                                @java.lang.Override\n                                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                                    if (value == null) {\n                                        out.nullValue();\n                                        return ;\n                                    } \n                                    float float = value.floatValue();\n                                    checkValidFloatingPoint(floatValue);\n                                    out.value(value);\n                                }\n                            };\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230380321/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"bd565813-3e35-11e6-8da7-450e5c8a3c05","method":{"position":"com.google.gson.Gson:136","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230380321/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230380321/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return toJsonTree(src, typeOfSrc);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.JsonPrimitive:313","type":"CtBinaryOperatorImpl","sourcecode":"(value) == null"},"failures":[0,2,6,7,8,9,10,11,12,13,14,15,18,19,20,21,34,36,38,47,50,51,52,53,54,56,57,58,60,63,621,622,623,624,625,626,67,69,73,74,76,603,87,88,89,90,91,93,94,97,98,101,104,107,111,114,120,122,123,126,131,133,134,136,144,150,186,202,207,215,216,217,218,219,221,222,223,226,227,231,245,258,260,261,272,273,276,277,278,279,281,282,283,286,288,291,292,293,302,305,306,604,605,606,607,608,327,329,338,344,347,356,357,358,359,360,363,365,372,375,376,377,378,379,380,381,382,383,384,404,412,415,416,417,419,421,422,520,521,523,524,525,527,528,531,534,540,541,543,545,548,556,562,565,566,569,572,576,577,580,583,595,616],"tindex":"bd565814-3e35-11e6-8da7-6deed8ccea78","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:108","type":"CtMethodImpl","sourcecode":"public boolean writeField(java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value == null) {\n        {\n            if (!(boolean))\n                return false;\n            \n            java.lang.Object java.lang.Object = field.get(value);\n            return fieldValue != value;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230380321/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:305","type":"CtBinaryOperatorImpl","sourcecode":"node != null"},"failures":[],"tindex":"bd567f25-3e35-11e6-8da7-3719a7a75437","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:686","type":"CtMethodImpl","sourcecode":"void add(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node) {\n    if (node != null) {\n        {\n            if (node != null) {\n                {\n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                    node.int = 1;\n                    if (((int) > 0) && (((int) & 1) == 0)) {\n                        (int)++;\n                        (int)--;\n                        (int)++;\n                    } \n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node;\n                    (int)++;\n                    if (((int) > 0) && (((int) & 1) == 0)) {\n                        (int)++;\n                        (int)--;\n                        (int)++;\n                    } \n                    for (int int = 4 ; ((int) & (scale - 1)) == (scale - 1) ; scale *= 2) {\n                        if ((int) == 0) {\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                            center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left;\n                            center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                            center.int = (right.int) + 1;\n                            left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                            right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                        } else if ((int) == 1) {\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                            center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                            center.int = (right.int) + 1;\n                            right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                            int = 0;\n                        } else if ((int) == 2) {\n                            int = 0;\n                        } \n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230380321/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230380321/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"node"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[],"tindex":"bd56a636-3e35-11e6-8da7-6f29d85a6ebe","method":{"position":"com.google.gson.Gson:133","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src) {\n    if (src != null) {\n        {\n            if (src == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230380321/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return toJsonTree(src);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230380321/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"bd56a637-3e35-11e6-8da7-3f3deadd3131","method":{"position":"com.google.gson.Gson:285","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230380321/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            float float = value.floatValue();\n            checkValidFloatingPoint(floatValue);\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1435","type":"CtBinaryOperatorImpl","sourcecode":"c == '\\n'"},"failures":[],"tindex":"bd56a638-3e35-11e6-8da7-bffc6c7e4c83","method":{"position":"com.google.gson.stream.JsonReader:755","type":"CtMethodImpl","sourcecode":"private boolean isLiteral(char c) throws java.io.IOException {\n    if (c == '\\n') {\n        {\n            switch (c) {\n                case '/' :\n                case '\\\\' :\n                case ';' :\n                case '#' :\n                case '=' :\n                    checkLenient();\n                case '{' :\n                case '}' :\n                case '[' :\n                case ']' :\n                case ':' :\n                case ',' :\n                case ' ' :\n                case '\\t' :\n                case '\\f' :\n                case '\\r' :\n                case '\\n' :\n                    return false;\n                default :\n                    return true;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230380321/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"c"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"bd56a639-3e35-11e6-8da7-6b644599332c","method":{"position":"com.google.gson.internal.bind.ObjectTypeAdapter:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Object value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230380321/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            com.google.gson.TypeAdapter<java.lang.Object> com.google.gson.TypeAdapter<java.lang.Object> = ((com.google.gson.TypeAdapter<java.lang.Object>)(com.google.gson.Gson.getAdapter(value.getClass())));\n            if (typeAdapter instanceof com.google.gson.internal.bind.ObjectTypeAdapter) {\n                out.beginObject();\n                out.endObject();\n                return ;\n            } \n            typeAdapter.write(out, value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:250","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[],"tindex":"bd56cd4a-3e35-11e6-8da7-b5bd76117ef8","method":{"position":"com.google.gson.Gson:273","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> floatAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230380321/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230380321/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (serializeSpecialFloatingPointValues) {\n                        {\n                            if (serializeSpecialFloatingPointValues) {\n                                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n                            } \n                            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                                @java.lang.Override\n                                public java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                                        in.nextNull();\n                                        return null;\n                                    } \n                                    return ((float)(in.nextDouble()));\n                                }\n\n                                @java.lang.Override\n                                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                                    if (value == null) {\n                                        out.nullValue();\n                                        return ;\n                                    } \n                                    float float = value.floatValue();\n                                    checkValidFloatingPoint(floatValue);\n                                    out.value(value);\n                                }\n                            };\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230380321/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:125","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonObject"},"failures":[],"tindex":"bd56cd4b-3e35-11e6-8da7-53255b87c5a6","method":{"position":"com.google.gson.JsonArray:57","type":"CtMethodImpl","sourcecode":"public void add(com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonObject) {\n        {\n            if (element == null) {\n                element = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            java.util.List<com.google.gson.JsonElement>.add(element);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230380321/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:79","type":"CtUnaryOperatorImpl","sourcecode":"!(json instanceof com.google.gson.JsonPrimitive)"},"failures":[],"tindex":"bd56cd4c-3e35-11e6-8da7-cb4f07357a28","method":{"position":"com.google.gson.Gson:127","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonParseException {\n    if (json == null) {\n        {\n            if (!(json instanceof com.google.gson.JsonPrimitive)) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230380321/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonParseException();\n            } else {\n                {\n                    return ((T)(fromJson(json, typeOfT)));\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230380321/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[],"tindex":"bd56cd4d-3e35-11e6-8da7-d5e26bd05448","method":{"position":"com.google.gson.Gson:136","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230380321/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230380321/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return toJsonTree(src, typeOfSrc);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:103","type":"CtVariableReadImpl","sourcecode":"deserialization"},"failures":[],"tindex":"bd56f45e-3e35-11e6-8da7-1bf9099f22c3","method":{"position":"com.google.gson.internal.Excluder:96","type":"CtMethodImpl","sourcecode":"public com.google.gson.internal.Excluder withExclusionStrategy(com.google.gson.ExclusionStrategy exclusionStrategy, boolean serialization, boolean deserialization) {\n    if (serialization) {\n        {\n            com.google.gson.internal.Excluder com.google.gson.internal.Excluder = clone();\n            if (serialization) {\n                result.java.util.List<com.google.gson.ExclusionStrategy> = new java.util.ArrayList<com.google.gson.ExclusionStrategy>(java.util.List<com.google.gson.ExclusionStrategy>);\n                result.java.util.List<com.google.gson.ExclusionStrategy>.add(exclusionStrategy);\n            } \n            if (deserialization) {\n                result.java.util.List<com.google.gson.ExclusionStrategy> = new java.util.ArrayList<com.google.gson.ExclusionStrategy>(java.util.List<com.google.gson.ExclusionStrategy>);\n                result.java.util.List<com.google.gson.ExclusionStrategy>.add(exclusionStrategy);\n            } \n            return result;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230380321/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deserialization":"serialization"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"bd56f45f-3e35-11e6-8da7-055531a42f3a","method":{"position":"com.google.gson.Gson:127","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonParseException {\n    if (json == null) {\n        {\n            if (!(json instanceof com.google.gson.JsonPrimitive)) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230380321/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonParseException();\n            } else {\n                {\n                    return ((T)(fromJson(json, typeOfT)));\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230380321/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:213","type":"CtBinaryOperatorImpl","sourcecode":"(indent.length()) == 0"},"failures":[],"tindex":"bd56f460-3e35-11e6-8da7-e93050acc227","method":{"position":"com.google.gson.stream.JsonWriter:212","type":"CtMethodImpl","sourcecode":"public final void setIndent(java.lang.String indent) {\n    if ((indent.length()) == 0) {\n        {\n            if ((indent.length()) == 0) {\n                com.google.gson.stream.JsonWriter.this.java.lang.String = null;\n                com.google.gson.stream.JsonWriter.this.java.lang.String = \":\";\n            } else {\n                com.google.gson.stream.JsonWriter.this.java.lang.String = indent;\n                com.google.gson.stream.JsonWriter.this.java.lang.String = \": \";\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230380321/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"indent"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:92","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof java.util.Iterator"},"failures":[],"tindex":"bd56f461-3e35-11e6-8da7-850953e8bbce","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:512","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"rawtypes\")\n@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof java.util.Iterator) {\n        {\n            if (o instanceof java.util.Map.Entry) {\n                java.util.Map.Entry java.util.Map.Entry = ((java.util.Map.Entry)(o));\n                return ((K) == null ? (other.getKey()) == null : K.equals(other.getKey())) && ((V) == null ? (other.getValue()) == null : V.equals(other.getValue()));\n            } \n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230380321/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"bd571b72-3e35-11e6-8da7-0bfa877e2b27","method":{"position":"com.google.gson.Gson:576","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230380321/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            try {\n                com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                toJson(src, typeOfSrc, jsonWriter);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[],"tindex":"bd571b73-3e35-11e6-8da7-91f3b5e13cbc","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:116","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<?> getFieldAdapter(com.google.gson.Gson gson, java.lang.reflect.Field field, com.google.gson.reflect.TypeToken<?> fieldType) {\n    if (field.isSynthetic()) {\n        {\n            com.google.gson.annotations.JsonAdapter com.google.gson.annotations.JsonAdapter = field.getAnnotation(com.google.gson.annotations.JsonAdapter.com.google.gson.annotations.JsonAdapter.java.lang.Class);\n            if (annotation != null) {\n                com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory.getTypeAdapter(com.google.gson.internal.ConstructorConstructor, gson, fieldType, annotation);\n                if (adapter != null)\n                    return adapter;\n                \n            } \n            return gson.getAdapter(fieldType);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230380321/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"field"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:501","type":"CtBinaryOperatorImpl","sourcecode":"typeAdapter instanceof com.google.gson.TypeAdapter<?>"},"failures":[],"tindex":"bd574284-3e35-11e6-8da7-31a790d6eb16","method":{"position":"com.google.gson.TreeTypeAdapter:84","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newFactory(com.google.gson.reflect.TypeToken<?> exactType, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n        {\n            if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230380321/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , exactType , false , null);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230380321/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:305","type":"CtBinaryOperatorImpl","sourcecode":"node != null"},"failures":[],"tindex":"bd574285-3e35-11e6-8da7-7dbe6e48141b","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:686","type":"CtMethodImpl","sourcecode":"void add(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node) {\n    if (node != null) {\n        {\n            if (node != null) {\n                {\n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                    node.int = 1;\n                    if (((int) > 0) && (((int) & 1) == 0)) {\n                        (int)++;\n                        (int)--;\n                        (int)++;\n                    } \n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node;\n                    (int)++;\n                    if (((int) > 0) && (((int) & 1) == 0)) {\n                        (int)++;\n                        (int)--;\n                        (int)++;\n                    } \n                    for (int int = 4 ; ((int) & (scale - 1)) == (scale - 1) ; scale *= 2) {\n                        if ((int) == 0) {\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                            center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left;\n                            center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                            center.int = (right.int) + 1;\n                            left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                            right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                        } else if ((int) == 1) {\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                            center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                            center.int = (right.int) + 1;\n                            right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                            int = 0;\n                        } else if ((int) == 2) {\n                            int = 0;\n                        } \n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230380321/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230380321/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"node"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"bd576996-3e35-11e6-8da7-87092b944cd3","method":{"position":"com.google.gson.Gson:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230380321/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    out.value(value.toString());\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230380321/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:188","type":"CtBinaryOperatorImpl","sourcecode":"from == null"},"failures":[],"tindex":"bd576997-3e35-11e6-8da7-b1f97f9d457a","method":{"position":"com.google.gson.reflect.TypeToken:185","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.ParameterizedType to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeVarMap) {\n    if (from == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230380321/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (from.getRawType().equals(from.getRawType())) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230380321/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (from == null) {\n                        return false;\n                    } \n                    if (to.equals(from)) {\n                        return true;\n                    } \n                    java.lang.Class<?> java.lang.Class<?> = com.google.gson.internal.$Gson$Types.getRawType(from);\n                    java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = null;\n                    if (from instanceof java.lang.reflect.ParameterizedType) {\n                        ptype = ((java.lang.reflect.ParameterizedType)(from));\n                    } \n                    if (ptype != null) {\n                        java.lang.reflect.Type[] java.lang.reflect.Type[] = ptype.getActualTypeArguments();\n                        java.lang.reflect.TypeVariable<?>[] java.lang.reflect.TypeVariable<?>[] = clazz.getTypeParameters();\n                        for (int int = 0 ; i < (tArgs.int) ; i++) {\n                            java.lang.reflect.Type java.lang.reflect.Type = tArgs[i];\n                            java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = tParams[i];\n                            while (arg instanceof java.lang.reflect.TypeVariable<?>) {\n                                java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(arg));\n                                arg = typeVarMap.get(v.getName());\n                            }\n                            typeVarMap.put(var.getName(), arg);\n                        }\n                        if (com.google.gson.reflect.TypeToken.typeEquals(ptype, to, typeVarMap)) {\n                            return true;\n                        } \n                    } \n                    for (java.lang.reflect.Type java.lang.reflect.Type : clazz.getGenericInterfaces()) {\n                        if (com.google.gson.reflect.TypeToken.isAssignableFrom(itype, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap))) {\n                            return true;\n                        } \n                    }\n                    java.lang.reflect.Type java.lang.reflect.Type = clazz.getGenericSuperclass();\n                    return com.google.gson.reflect.TypeToken.isAssignableFrom(sType, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap));\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:127","type":"CtInvocationImpl","sourcecode":"raw.isInterface()"},"failures":[],"tindex":"bd5790a8-3e35-11e6-8da7-39315d49fb7d","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:125","type":"CtMethodImpl","sourcecode":"private java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> getBoundFields(com.google.gson.Gson context, com.google.gson.reflect.TypeToken<?> type, java.lang.Class<?> raw) {\n    if (raw.isInterface()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230380321/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> = new java.util.LinkedHashMap<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField>();\n            if (raw.isInterface()) {\n                return result;\n            } \n            java.lang.reflect.Type java.lang.reflect.Type = type.getType();\n            while (raw != (java.lang.Object.java.lang.Object.java.lang.Class)) {\n                java.lang.reflect.Field[] java.lang.reflect.Field[] = raw.getDeclaredFields();\n                for (java.lang.reflect.Field java.lang.reflect.Field : fields) {\n                    boolean boolean = excludeField(field, true);\n                    boolean boolean = excludeField(field, false);\n                    if ((!serialize) && (!deserialize)) {\n                        continue;\n                    } \n                    field.setAccessible(true);\n                    java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, field.getGenericType());\n                    com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = createBoundField(context, field, getFieldName(field), com.google.gson.reflect.TypeToken.get(fieldType), serialize, deserialize);\n                    com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = result.put(boundField.java.lang.String, boundField);\n                    if (previous != null) {\n                        throw new java.lang.IllegalArgumentException(((declaredType + \" declares multiple JSON fields named \") + (previous.java.lang.String)));\n                    } \n                }\n                type = com.google.gson.reflect.TypeToken.get(com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, raw.getGenericSuperclass()));\n                raw = type.getRawType();\n            }\n            return result;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"raw"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonObject:54","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"bd5790a9-3e35-11e6-8da7-d5069f569204","method":{"position":"com.google.gson.JsonObject:53","type":"CtMethodImpl","sourcecode":"public void add(java.lang.String property, com.google.gson.JsonElement value) {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230380321/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (value == null) {\n                value = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.put(property, value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":45,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
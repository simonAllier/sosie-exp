{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":316,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":203,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":300,"com.google.gson.functional.StringTest.testStringValueDeserialization":597,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":8,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":564,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":464,"com.google.gson.stream.JsonWriterTest.testRepeatedName":297,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":527,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":55,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":511,"com.google.gson.MixedStreamTest.testWriteLenient":370,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":389,"com.google.gson.internal.bind.JsonTreeWriterTest.testPrematureClose":674,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":487,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":162,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":28,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":267,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":275,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":486,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":570,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":250,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":255,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":137,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":536,"com.google.gson.JsonObjectTest.testAddingNullPropertyValue":350,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":616,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":622,"com.google.gson.functional.ObjectTest.testSingletonLists":181,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":159,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":256,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":204,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":522,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":311,"com.google.gson.stream.JsonWriterTest.testStrings":302,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":25,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":171,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":653,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":472,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":498,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":665,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":573,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":266,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":629,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":605,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":284,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":565,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":611,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":408,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":52,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":514,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":43,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":331,"com.google.gson.functional.EnumTest.testEnumCaseMapping":249,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":79,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":202,"com.google.gson.functional.JsonTreeTest.testToJsonTree":319,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":513,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":613,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":474,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":339,"com.google.gson.JsonObjectTest.testEqualsNonEmptyObject":351,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreBehindInVersion":685,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":145,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":242,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":69,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":437,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":461,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":523,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":37,"com.google.gson.internal.LinkedTreeMapTest.testLargeSetOfRandomKeys":359,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":272,"com.google.gson.functional.ObjectTest.testNullDeserialization":505,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":174,"com.google.gson.internal.bind.JsonElementReaderTest.testNestedObjects":395,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":603,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":493,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":309,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":581,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":528,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":378,"com.google.gson.internal.LinkedTreeMapTest.testContainsNonComparableKeyReturnsFalse":360,"com.google.gson.JsonArrayTest.testEqualsOnEmptyArray":688,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":42,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":288,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":502,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":308,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":446,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":169,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":340,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":264,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":586,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":585,"com.google.gson.JsonParserTest.testParseString":346,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":471,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":70,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":384,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testDifferentSerializeAndDeserializeField":679,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":550,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":453,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":590,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":121,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":191,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":463,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":548,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":390,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":405,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":562,"com.google.gson.functional.StreamingTypeAdaptersTest.testFromJsonTree":393,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":110,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":460,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":201,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":675,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":11,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":95,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":568,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":608,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":563,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":190,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":431,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":283,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":292,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":490,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":103,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":332,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":532,"com.google.gson.metrics.PerformanceTest.testDummy":399,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":636,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":113,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":237,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":641,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":13,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":412,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":476,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":5,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":161,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":154,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":638,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":287,"com.google.gson.JsonArrayTest.testEqualsNonEmptyArray":689,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":482,"com.google.gson.functional.CollectionTest.testSetDeserialization":650,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":138,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":185,"com.google.gson.functional.EnumTest.testEnumSet":243,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":415,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":554,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":63,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":12,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithNestedWildcards":372,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":82,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":456,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":187,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":51,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":236,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":566,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":640,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":575,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":39,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":172,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":198,"com.google.gson.functional.MapTest.testHashMapDeserialization":403,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":525,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":645,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":467,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":413,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":656,"com.google.gson.MixedStreamTest.testReadNulls":661,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":97,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":104,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":199,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":481,"com.google.gson.functional.MapTest.testSortedMap":409,"com.google.gson.functional.MapTest.testMapSerialization":87,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":98,"com.google.gson.internal.bind.JsonElementReaderTest.testObject":397,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":1,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":560,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":439,"com.google.gson.functional.MapTest.testSerializeMaps":81,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":128,"com.google.gson.functional.MapTest.testComplexKeysSerialization":94,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":414,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":382,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":387,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":444,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":176,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":627,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":228,"com.google.gson.internal.LinkedTreeMapTest.testRemoveRootDoesNotDoubleUnlink":398,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":425,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":478,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":626,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":220,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":352,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":56,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":504,"com.google.gson.functional.MapTest.testStringKeyDeserialization":333,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithBasicWildcards":374,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":442,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":17,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":385,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":96,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":531,"com.google.gson.functional.PrettyPrintingTest.testMap":218,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":279,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":526,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":642,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":74,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":142,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":479,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":71,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":307,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":443,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":208,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":598,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":151,"com.google.gson.functional.CollectionTest.testQueueSerialization":270,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":353,"com.google.gson.functional.MapTest.testMapSerializationEmpty":411,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":555,"com.google.gson.functional.MapTest.testMapOfMapSerialization":86,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":547,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":462,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":648,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":134,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":557,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":26,"com.google.gson.functional.FieldNamingTest.testIdentity":129,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":205,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":14,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":211,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":506,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":30,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":57,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":180,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":318,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":516,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":53,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testSkipNonAnnotatedFields":678,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":49,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":206,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":483,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":553,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":470,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":78,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":457,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":133,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":152,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":473,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":401,"com.google.gson.functional.MapTest.testMapSubclassSerialization":80,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":584,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":290,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":624,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":416,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":280,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":305,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":545,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":628,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":391,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":451,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":594,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":477,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":235,"com.google.gson.functional.EnumTest.testEnumSubclass":246,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":321,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":496,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":666,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":515,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":286,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":569,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":16,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":422,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":518,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":179,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":551,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":484,"com.google.gson.stream.JsonWriterTest.testNullName":76,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":335,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":77,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":436,"com.google.gson.internal.LinkedTreeMapTest.testEqualsAndHashCode":362,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":492,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":556,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":420,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":549,"com.google.gson.stream.JsonWriterTest.testObjectsInArrays":298,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":165,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":485,"com.google.gson.MixedStreamTest.testWriteNulls":368,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":402,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":435,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":606,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":120,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":175,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":621,"com.google.gson.CommentsTest.testParseComments":664,"com.google.gson.JsonObjectTest.testReadPropertyWithEmptyStringName":348,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":21,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":182,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":617,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":217,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":440,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":567,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":0,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":88,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":207,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":379,"com.google.gson.MixedStreamTest.testReadInvalidState":659,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":135,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":241,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":167,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":583,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":2,"com.google.gson.ObjectTypeAdapterTest.testSerializeObject":671,"com.google.gson.JsonParserTest.testParseMixedArray":381,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":196,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":445,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithTypeParameters":373,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":214,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAheadInVersion":683,"com.google.gson.internal.bind.JsonTreeWriterTest.testWriteAfterClose":676,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":540,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":132,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":157,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":579,"com.google.gson.functional.MapTest.testMapDeserialization":329,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":434,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":153,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":614,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":7,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":293,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":615,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":83,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":115,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":225,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":223,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeMap":344,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":426,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":58,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":625,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":449,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":192,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":497,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":106,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":281,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":336,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":146,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":623,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":111,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":178,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":219,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":383,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":366,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":9,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":512,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":23,"com.google.gson.functional.PrimitiveTest.testShortSerialization":582,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":38,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":572,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":231,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":546,"com.google.gson.internal.LinkedTreeMapTest.testIterationOrder":670,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":571,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":324,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":524,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":125,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":245,"com.google.gson.internal.LinkedTreeMapTest.testEmptyStringValues":361,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":269,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":289,"com.google.gson.internal.LinkedTreeMapTest.testPutOverrides":358,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":327,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":539,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":46,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":322,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":341,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":677,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":469,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":619,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":312,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":663,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":323,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":589,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":66,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":419,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":15,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":193,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":428,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":139,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":251,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":314,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":577,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":34,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":18,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":552,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":509,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":489,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":248,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":102,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":107,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":273,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":454,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":278,"com.google.gson.InnerClassExclusionStrategyTest.testExcludeInnerClassField":686,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":19,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":222,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":158,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":226,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":530,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":200,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":458,"com.google.gson.stream.JsonWriterTest.testNullStringValue":295,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":227,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":466,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":337,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":643,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":519,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":578,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":320,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":386,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":259,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":224,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":244,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":388,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":3,"com.google.gson.functional.MapTest.testGeneralMapField":91,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":488,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":430,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":592,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":47,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":123,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":657,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testSkipExplicitlySkippedFields":682,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":163,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":410,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":140,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":195,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":263,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":574,"com.google.gson.ObjectTypeAdapterTest.testDeserializeNullValue":356,"com.google.gson.MixedStreamTest.testReadMixedStreamed":662,"com.google.gson.JsonObjectTest.testDeepCopy":354,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":406,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":455,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":541,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":54,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":276,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":596,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":635,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":558,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":230,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":639,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":156,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":330,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":232,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":326,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":22,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":62,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":258,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":253,"com.google.gson.stream.JsonWriterTest.testArraysInObjects":296,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":542,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":313,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":155,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":607,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":212,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":447,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":647,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":618,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":27,"com.google.gson.functional.ObjectTest.testNestedDeserialization":510,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":285,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":500,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":73,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":334,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":229,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":591,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":216,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":407,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":417,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":599,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":234,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":580,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":421,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":32,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":392,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":652,"com.google.gson.functional.ObjectTest.testNullSerialization":494,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":109,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":620,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":328,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":90,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":517,"com.google.gson.functional.MapTest.testInterfaceTypeMap":89,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":438,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":48,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":114,"com.google.gson.JsonObjectTest.testAddingNullOrEmptyPropertyName":394,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":520,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":65,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":247,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testNeverSkipExplicitlyExposedAnnotatedFields":681,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":424,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":655,"com.google.gson.MixedStreamTest.testReadClosed":660,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":141,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":41,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":534,"com.google.gson.MixedStreamTest.testWriteClosed":371,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":75,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":271,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":183,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":427,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":475,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":238,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":59,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":343,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":194,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":215,"com.google.gson.stream.JsonWriterTest.testLongs":667,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":168,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":116,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":184,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":646,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":631,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":561,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":254,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":423,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":274,"com.google.gson.internal.bind.JsonElementReaderTest.testSkipValue":396,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":160,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":35,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":130,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":593,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":197,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":317,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":452,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":117,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":177,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":342,"com.google.gson.functional.CollectionTest.testQueueDeserialization":654,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":544,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":559,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":602,"com.google.gson.InnerClassExclusionStrategyTest.testIncludeStaticNestedClassField":687,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":72,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":166,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":632,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":84,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":503,"com.google.gson.stream.JsonWriterTest.testDeepNestingObjects":301,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":150,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":265,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":508,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":268,"com.google.gson.functional.MapTest.testRawMapSerialization":93,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":304,"com.google.gson.JsonParserTest.testParseReader":345,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":651,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":465,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":67,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":105,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":188,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":6,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":365,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":347,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":119,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":170,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":367,"com.google.gson.functional.PrimitiveTest.testByteSerialization":380,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":100,"com.google.gson.ObjectTypeAdapterTest.testSerialize":310,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":261,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromRawTypes":375,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":529,"com.google.gson.JsonPrimitiveTest.testEqualsIntegerAndBigInteger":672,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":29,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":60,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":126,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":50,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":239,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":600,"com.google.gson.functional.MapTest.testMapWithQuotes":85,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":143,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":537,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":601,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":10,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":595,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":377,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":112,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":587,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":450,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":136,"com.google.gson.stream.JsonWriterTest.testLenientWriterPermitsMultipleTopLevelValues":673,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":36,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":233,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":507,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":221,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":61,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":148,"com.google.gson.functional.ObjectTest.testEmptyStringDeserialization":495,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":124,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":491,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":376,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":144,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":31,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":149,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":252,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":576,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":363,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":649,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":433,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":44,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":118,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":164,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":108,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":213,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":633,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":291,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAtSameVersion":684,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":480,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":45,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":521,"com.google.gson.internal.LinkedHashTreeMapTest.testRemoveRootDoesNotDoubleUnlink":325,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testNeverSkipExposedAnnotatedFields":680,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":24,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":64,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":499,"com.google.gson.functional.ObjectTest.testNestedSerialization":189,"com.google.gson.JsonObjectTest.testAddingStringProperties":355,"com.google.gson.internal.LinkedTreeMapTest.testClear":669,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":260,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":262,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":533,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":604,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":257,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":92,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":4,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":33,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":294,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":306,"com.google.gson.stream.JsonWriterTest.testUnicodeLineBreaksEscaped":303,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":186,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":609,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":588,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":338,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":634,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":459,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":315,"com.google.gson.GsonBuilderTest.testCreatingMoreThanOnce":400,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":535,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":448,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":501,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":630,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":68,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":209,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":122,"com.google.gson.functional.CollectionTest.testSetSerialization":277,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":658,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":20,"com.google.gson.functional.StringTest.testStringValueSerialization":210,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":612,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":99,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":131,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":418,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":644,"com.google.gson.MixedStreamTest.testWriteInvalidState":369,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":429,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":364,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":538,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":441,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":543,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":282,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":147,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":127,"com.google.gson.ObjectTypeAdapterTest.testDeserialize":357,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":173,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":349,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":610,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":40,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":668,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":240,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":468,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":101,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":404,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":299,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":432,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":637},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:501","type":"CtBinaryOperatorImpl","sourcecode":"typeAdapter instanceof com.google.gson.TypeAdapter<?>"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54],"tindex":"4e656f99-3e38-11e6-86ba-7f5b9ba32909","method":{"position":"com.google.gson.TreeTypeAdapter:92","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newFactoryWithMatchRawType(com.google.gson.reflect.TypeToken<?> exactType, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                {\n                    boolean boolean = (exactType.getType()) == (exactType.getRawType());\n                    return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , exactType , matchRawType , null);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:462","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71],"tindex":"4e65e4ca-3e38-11e6-86ba-5ddfe833dc82","method":{"position":"com.google.gson.Gson:297","type":"CtMethodImpl","sourcecode":"private void checkValidFloatingPoint(double value) {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                        {\n                            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                                throw new java.lang.IllegalArgumentException(((value + \" is not a valid double value as per JSON specification. To override this\") + \" behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.\"));\n                            } \n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:133","type":"CtBinaryOperatorImpl","sourcecode":"(type) instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"4e65e4cb-3e38-11e6-86ba-697bdc09e3c7","method":{"position":"com.google.gson.internal.$Gson$Types:431","type":"CtMethodImpl","sourcecode":"private static void checkNotPrimitive(java.lang.reflect.Type type) {\n    com.google.gson.internal.$Gson$Preconditions.checkArgument(((!(type instanceof java.lang.Class<?>)) || (!(((java.lang.Class<?>)(type)).isPrimitive()))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:118","type":"CtBinaryOperatorImpl","sourcecode":"annotation != null"},"failures":[],"tindex":"4e65e4cc-3e38-11e6-86ba-49b062ef8585","method":{"position":"com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory:50","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nstatic com.google.gson.TypeAdapter<?> getTypeAdapter(com.google.gson.internal.ConstructorConstructor constructorConstructor, com.google.gson.Gson gson, com.google.gson.reflect.TypeToken<?> fieldType, com.google.gson.annotations.JsonAdapter annotation) {\n    if (annotation != null) {\n        {\n            if (annotation == null) {\n                {\n                    if (annotation != null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            if (annotation != null) {\n                                {\n                                    java.lang.Class<?> java.lang.Class<?> = annotation.value();\n                                    if (com.google.gson.TypeAdapter.com.google.gson.TypeAdapter.java.lang.Class.isAssignableFrom(value)) {\n                                        java.lang.Class<com.google.gson.TypeAdapter<?>> java.lang.Class<com.google.gson.TypeAdapter<?>> = ((java.lang.Class<com.google.gson.TypeAdapter<?>>)(value));\n                                        return constructorConstructor.get(com.google.gson.reflect.TypeToken.get(typeAdapter)).construct();\n                                    } \n                                    if (com.google.gson.TypeAdapterFactory.com.google.gson.TypeAdapterFactory.java.lang.Class.isAssignableFrom(value)) {\n                                        java.lang.Class<com.google.gson.TypeAdapterFactory> java.lang.Class<com.google.gson.TypeAdapterFactory> = ((java.lang.Class<com.google.gson.TypeAdapterFactory>)(value));\n                                        return constructorConstructor.get(com.google.gson.reflect.TypeToken.get(typeAdapterFactory)).construct().create(gson, fieldType);\n                                    } \n                                    throw new java.lang.IllegalArgumentException(\"@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.\");\n                                }\n                            } else {\n                                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                throw new java.lang.RuntimeException();\n                            }\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:120","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonNull"},"failures":[],"tindex":"4e660bdd-3e38-11e6-86ba-dda9fb00eb05","method":{"position":"com.google.gson.internal.$Gson$Types:213","type":"CtMethodImpl","sourcecode":"private static int hashCodeOrZero(java.lang.Object o) {\n    return o != null ? o.hashCode() : 0;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:99","type":"CtVariableReadImpl","sourcecode":"serialization"},"failures":[72,73,74,75],"tindex":"4e660bde-3e38-11e6-86ba-2998f74acf29","method":{"position":"com.google.gson.internal.Excluder:96","type":"CtMethodImpl","sourcecode":"public com.google.gson.internal.Excluder withExclusionStrategy(com.google.gson.ExclusionStrategy exclusionStrategy, boolean serialization, boolean deserialization) {\n    if (deserialization) {\n        {\n            com.google.gson.internal.Excluder com.google.gson.internal.Excluder = clone();\n            if (serialization) {\n                result.java.util.List<com.google.gson.ExclusionStrategy> = new java.util.ArrayList<com.google.gson.ExclusionStrategy>(java.util.List<com.google.gson.ExclusionStrategy>);\n                result.java.util.List<com.google.gson.ExclusionStrategy>.add(exclusionStrategy);\n            } \n            if (deserialization) {\n                result.java.util.List<com.google.gson.ExclusionStrategy> = new java.util.ArrayList<com.google.gson.ExclusionStrategy>(java.util.List<com.google.gson.ExclusionStrategy>);\n                result.java.util.List<com.google.gson.ExclusionStrategy>.add(exclusionStrategy);\n            } \n            return result;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serialization":"deserialization"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:105","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonObject"},"failures":[],"tindex":"4e66810f-3e38-11e6-86ba-951a2d2fbccf","method":{"position":"com.google.gson.internal.LinkedTreeMap:481","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"rawtypes\")\n@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof java.util.Map.Entry) {\n                java.util.Map.Entry java.util.Map.Entry = ((java.util.Map.Entry)(o));\n                return ((K) == null ? (other.getKey()) == null : K.equals(other.getKey())) && ((V) == null ? (other.getValue()) == null : V.equals(other.getValue()));\n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[76],"tindex":"4e66a820-3e38-11e6-86ba-bdeb0c0e0746","method":{"position":"com.google.gson.stream.JsonWriter:385","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter name(java.lang.String name) throws java.io.IOException {\n    if (name == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (name == null) {\n                throw new java.lang.NullPointerException(\"name == null\");\n            } \n            if ((java.lang.String) != null) {\n                throw new java.lang.IllegalStateException();\n            } \n            if ((int) == 0) {\n                throw new java.lang.IllegalStateException(\"JsonWriter is closed.\");\n            } \n            java.lang.String = name;\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[77,78,79,2,4,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,8,97,98,74,99,100,101,102,55,56,57,103,104,105,106,107,108,109,110,111,112,58,113,59,114,115,116,117,118,119,120,121,122,60,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,9,169,170,171,172,173,174,175,176,177,10,12,16,17,18,20,21,22,24,27,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,33,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,38,227,228,39,40,41,42,229,43,230,231,232,233,44,234,235,236,237,63,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,65,66,67,69,70,71,266,267,268,269,270,271,272,273,274,275,276,277,46,278,47,279,48,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,51,54,307,308,309,310,311,312,313,314],"tindex":"4e66a821-3e38-11e6-86ba-138a8686933e","method":{"position":"com.google.gson.stream.JsonWriter:532","type":"CtMethodImpl","sourcecode":"private void string(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        {\n            java.lang.String[] java.lang.String[] = boolean ? com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[] : com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[];\n            java.io.Writer.write(\"\\\"\");\n            int int = 0;\n            int int = value.length();\n            for (int int = 0 ; i < length ; i++) {\n                char char = value.charAt(i);\n                java.lang.String java.lang.String;\n                if (c < 128) {\n                    replacement = replacements[c];\n                    if (replacement == null) {\n                        continue;\n                    } \n                } else if (c == '\\u2028') {\n                    replacement = \"\\\\u2028\";\n                } else if (c == '\\u2029') {\n                    replacement = \"\\\\u2029\";\n                } else {\n                    continue;\n                }\n                if (last < i) {\n                    java.io.Writer.write(value, last, (i - last));\n                } \n                java.io.Writer.write(replacement);\n                last = i + 1;\n            }\n            if (last < length) {\n                java.io.Writer.write(value, last, (length - last));\n            } \n            java.io.Writer.write(\"\\\"\");\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[315,91,97,316,98,74,99,105,317,58,318,319,59,115,60,123,171,172,180,182,186,187,188,189,191,192,194,320,321,322,323,211,212,220,221,63,252,256,258,261,264,265,267,269,273,275,284,292],"tindex":"4e66cf32-3e38-11e6-86ba-83a1dfa98e3b","method":{"position":"com.google.gson.internal.bind.TypeAdapters:267","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[324],"tindex":"4e66cf33-3e38-11e6-86ba-bb04bbeabf63","method":{"position":"com.google.gson.internal.bind.TypeAdapters:223","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:118","type":"CtBinaryOperatorImpl","sourcecode":"annotation != null"},"failures":[],"tindex":"4e66f644-3e38-11e6-86ba-c90bac56933b","method":{"position":"com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory:50","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nstatic com.google.gson.TypeAdapter<?> getTypeAdapter(com.google.gson.internal.ConstructorConstructor constructorConstructor, com.google.gson.Gson gson, com.google.gson.reflect.TypeToken<?> fieldType, com.google.gson.annotations.JsonAdapter annotation) {\n    if (annotation != null) {\n        {\n            if (annotation == null) {\n                {\n                    if (annotation != null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            if (annotation != null) {\n                                {\n                                    java.lang.Class<?> java.lang.Class<?> = annotation.value();\n                                    if (com.google.gson.TypeAdapter.com.google.gson.TypeAdapter.java.lang.Class.isAssignableFrom(value)) {\n                                        java.lang.Class<com.google.gson.TypeAdapter<?>> java.lang.Class<com.google.gson.TypeAdapter<?>> = ((java.lang.Class<com.google.gson.TypeAdapter<?>>)(value));\n                                        return constructorConstructor.get(com.google.gson.reflect.TypeToken.get(typeAdapter)).construct();\n                                    } \n                                    if (com.google.gson.TypeAdapterFactory.com.google.gson.TypeAdapterFactory.java.lang.Class.isAssignableFrom(value)) {\n                                        java.lang.Class<com.google.gson.TypeAdapterFactory> java.lang.Class<com.google.gson.TypeAdapterFactory> = ((java.lang.Class<com.google.gson.TypeAdapterFactory>)(value));\n                                        return constructorConstructor.get(com.google.gson.reflect.TypeToken.get(typeAdapterFactory)).construct().create(gson, fieldType);\n                                    } \n                                    throw new java.lang.IllegalArgumentException(\"@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.\");\n                                }\n                            } else {\n                                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                throw new java.lang.RuntimeException();\n                            }\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:350","type":"CtVariableReadImpl","sourcecode":"insert"},"failures":[325],"tindex":"4e66f645-3e38-11e6-86ba-3fe5db0ddd59","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:338","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (!insert) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (insert) {\n                {\n                    for (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) {\n                        com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                        com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                        int int = left != null ? left.int : 0;\n                        int int = right != null ? right.int : 0;\n                        int int = leftHeight - rightHeight;\n                        if (delta == (-2)) {\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            int int = rightRight != null ? rightRight.int : 0;\n                            int int = rightLeft != null ? rightLeft.int : 0;\n                            int int = rightLeftHeight - rightRightHeight;\n                            if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                                rotateLeft(node);\n                            } else {\n                                assert rightDelta == 1;\n                                rotateRight(right);\n                                rotateLeft(node);\n                            }\n                            if (insert) {\n                                break;\n                            } \n                        } else if (delta == 2) {\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            int int = leftRight != null ? leftRight.int : 0;\n                            int int = leftLeft != null ? leftLeft.int : 0;\n                            int int = leftLeftHeight - leftRightHeight;\n                            if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                                rotateRight(node);\n                            } else {\n                                assert leftDelta == (-1);\n                                rotateLeft(left);\n                                rotateRight(node);\n                            }\n                            if (insert) {\n                                break;\n                            } \n                        } else if (delta == 0) {\n                            node.int = leftHeight + 1;\n                            if (insert) {\n                                break;\n                            } \n                        } else {\n                            assert (delta == (-1)) || (delta == 1);\n                            node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                            if (!insert) {\n                                break;\n                            } \n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"insert"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:167","type":"CtUnaryOperatorImpl","sourcecode":"!create"},"failures":[2,3,4,326,327,328,329,330,331,332,333,316,112,318,334,335,336,337,338,339,340,13,14,201,28,29,31,32,341,35,342,343,45,344,284,290,291,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362],"tindex":"4e671d56-3e38-11e6-86ba-ff8d46530c92","method":{"position":"com.google.gson.internal.LinkedTreeMap:121","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedTreeMap.Node<K, V> find(K key, boolean create) {\n    if (!create) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.util.Comparator<? super K> java.util.Comparator<? super K> = com.google.gson.internal.LinkedTreeMap.this.java.util.Comparator<? super K>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            int int = 0;\n            if (nearest != null) {\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                java.lang.Comparable<java.lang.Object> java.lang.Comparable<java.lang.Object> = comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>) ? ((java.lang.Comparable<java.lang.Object>)(key)) : null;\n                while (true) {\n                    comparison = comparableKey != null ? comparableKey.compareTo(nearest.K) : comparator.compare(key, nearest.K);\n                    if (comparison == 0) {\n                        return nearest;\n                    } \n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = comparison < 0 ? nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> : nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    if (child == null) {\n                        break;\n                    } \n                    nearest = child;\n                }\n            } \n            if (!create) {\n                return null;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.this.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            if (nearest == null) {\n                if ((comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>)) && (!(key instanceof java.lang.Comparable))) {\n                    throw new java.lang.ClassCastException(((key.getClass().getName()) + \" is not Comparable\"));\n                } \n                created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n            } else {\n                created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                if (comparison < 0) {\n                    nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                } else {\n                    nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                }\n                rebalance(nearest, true);\n            }\n            (int)++;\n            (int)++;\n            return created;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"create":"create"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:113","type":"CtInvocationImpl","sourcecode":"primitive.isBoolean()"},"failures":[],"tindex":"4e679287-3e38-11e6-86ba-e15a06c621b4","method":{"position":"com.google.gson.JsonPrimitive:93","type":"CtMethodImpl","sourcecode":"void setValue(java.lang.Object primitive) {\n    if (primitive.isNumber()) {\n        {\n            if (primitive.isBoolean()) {\n                {\n                    if (primitive instanceof java.lang.Character) {\n                        char char = ((java.lang.Character)(primitive)).charValue();\n                        com.google.gson.JsonPrimitive.this.java.lang.Object = java.lang.String.valueOf(c);\n                    } else {\n                        com.google.gson.internal.$Gson$Preconditions.checkArgument(((primitive instanceof java.lang.Number) || (com.google.gson.JsonPrimitive.isPrimitiveOrString(primitive))));\n                        com.google.gson.JsonPrimitive.this.java.lang.Object = primitive;\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"primitive"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:430","type":"CtFieldReadImpl","sourcecode":"serializeNulls"},"failures":[81,84,92,8,97,316,74,100,317,58,318,319,334,335,336,337,338,339,122,363,364,28,29,30,31,32,342,343,222,223,224,225,226,38,227,365,228,44,284,49,347,366,367,304,305,368,369,370,306,371,314],"tindex":"4e679288-3e38-11e6-86ba-f1b77d80887a","method":{"position":"com.google.gson.stream.JsonWriter:268","type":"CtMethodImpl","sourcecode":"public final void setSerializeNulls(boolean serializeNulls) {\n    if (serializeNulls) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = serializeNulls;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeNulls":"serializeNulls"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:298","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[],"tindex":"4e679289-3e38-11e6-86ba-4907cc13bb03","method":{"position":"com.google.gson.Gson:297","type":"CtMethodImpl","sourcecode":"private void checkValidFloatingPoint(double value) {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                        {\n                            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                                throw new java.lang.IllegalArgumentException(((value + \" is not a valid double value as per JSON specification. To override this\") + \" behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.\"));\n                            } \n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"4e67b99a-3e38-11e6-86ba-21b3a280fa93","method":{"position":"com.google.gson.Gson:719","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.lang.String json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (json == null) {\n                {\n                    if (json == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new com.google.gson.JsonSyntaxException();\n                    } else {\n                        {\n                            if (json == null) {\n                                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                throw new com.google.gson.JsonSyntaxException();\n                            } else {\n                                {\n                                    if (json == null) {\n                                        return null;\n                                    } \n                                    java.io.StringReader java.io.StringReader = new java.io.StringReader(json);\n                                    T T = ((T)(fromJson(reader, typeOfT)));\n                                    return target;\n                                }\n                            }\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:459","type":"CtBinaryOperatorImpl","sourcecode":"typeAdapter instanceof com.google.gson.TypeAdapter<?>"},"failures":[],"tindex":"4e67b99b-3e38-11e6-86ba-e3ab22e21960","method":{"position":"com.google.gson.TreeTypeAdapter:92","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newFactoryWithMatchRawType(com.google.gson.reflect.TypeToken<?> exactType, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                {\n                    boolean boolean = (exactType.getType()) == (exactType.getRawType());\n                    return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , exactType , matchRawType , null);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"4e67b99c-3e38-11e6-86ba-b70ecfa9cec3","method":{"position":"com.google.gson.Gson:552","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        {\n            if (src != null) {\n                toJson(src, src.getClass(), writer);\n            } else {\n                toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull, writer);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"4e67b99d-3e38-11e6-86ba-2355abaf4d42","method":{"position":"com.google.gson.Gson:591","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = getAdapter(com.google.gson.reflect.TypeToken.get(typeOfSrc));\n            boolean boolean = writer.isLenient();\n            writer.setLenient(true);\n            boolean boolean = writer.isHtmlSafe();\n            writer.setHtmlSafe(boolean);\n            boolean boolean = writer.getSerializeNulls();\n            writer.setSerializeNulls(boolean);\n            try {\n                ((com.google.gson.TypeAdapter<java.lang.Object>)(adapter)).write(writer, src);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            } finally {\n                writer.setLenient(oldLenient);\n                writer.setHtmlSafe(oldHtmlSafe);\n                writer.setSerializeNulls(oldSerializeNulls);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:118","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.Class<?>"},"failures":[135,136,138,214,215,342,241,242],"tindex":"4e67e0ae-3e38-11e6-86ba-9baee3d9a6c5","method":{"position":"com.google.gson.internal.ConstructorConstructor:200","type":"CtMethodImpl","sourcecode":"private <T>com.google.gson.internal.ObjectConstructor<T> newUnsafeAllocator(final java.lang.reflect.Type type, final java.lang.Class<? super T> rawType) {\n    if (type instanceof java.lang.Class<?>) {\n        {\n            return new com.google.gson.internal.ObjectConstructor<T>() {\n                private final com.google.gson.internal.UnsafeAllocator unsafeAllocator = com.google.gson.internal.UnsafeAllocator.create();\n\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                public T construct() {\n                    try {\n                        java.lang.Object java.lang.Object = com.google.gson.internal.UnsafeAllocator.newInstance(rawType);\n                        return ((T)(newInstance));\n                    } catch (java.lang.Exception e) {\n                        throw new java.lang.RuntimeException((((\"Unable to invoke no-args constructor for \" + type) + \". \") + \"Register an InstanceCreator with Gson for this type may fix this problem.\") , e);\n                    }\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:213","type":"CtBinaryOperatorImpl","sourcecode":"(indent.length()) == 0"},"failures":[],"tindex":"4e67e0af-3e38-11e6-86ba-1fc2a9fc2ec6","method":{"position":"com.google.gson.stream.JsonWriter:212","type":"CtMethodImpl","sourcecode":"public final void setIndent(java.lang.String indent) {\n    if (indent == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((indent.length()) == 0) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if ((indent.length()) == 0) {\n                        com.google.gson.stream.JsonWriter.this.java.lang.String = null;\n                        com.google.gson.stream.JsonWriter.this.java.lang.String = \":\";\n                    } else {\n                        com.google.gson.stream.JsonWriter.this.java.lang.String = indent;\n                        com.google.gson.stream.JsonWriter.this.java.lang.String = \": \";\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"indent"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:103","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.GenericArrayType"},"failures":[99,337,130,131,132,133,134,180,182,186,187,188,28,220,222,224,225,228,233,234,235,236,238,239,240,287],"tindex":"4e67e0b0-3e38-11e6-86ba-17ceb3fdc429","method":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:74","type":"CtMethodImpl","sourcecode":"private java.lang.reflect.Type getRuntimeTypeIfMoreSpecific(java.lang.reflect.Type type, java.lang.Object value) {\n    if (type instanceof java.lang.reflect.GenericArrayType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((value != null) && (((type == (java.lang.Object.java.lang.Object.java.lang.Class)) || (type instanceof java.lang.reflect.TypeVariable<?>)) || (type instanceof java.lang.Class<?>))) {\n                type = value.getClass();\n            } \n            return type;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:123","type":"CtBinaryOperatorImpl","sourcecode":"from == null"},"failures":[372,373,374,375],"tindex":"4e67e0b1-3e38-11e6-86ba-81210f5fb2ee","method":{"position":"com.google.gson.reflect.TypeToken:122","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic boolean isAssignableFrom(java.lang.reflect.Type from) {\n    if (from == null) {\n        {\n            if (from == null) {\n                return false;\n            } \n            if (java.lang.reflect.Type.equals(from)) {\n                return true;\n            } \n            if ((java.lang.reflect.Type) instanceof java.lang.Class<?>) {\n                return java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from));\n            } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.ParameterizedType) {\n                return com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n            } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.GenericArrayType) {\n                return (java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from))) && (com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.GenericArrayType)(java.lang.reflect.Type))));\n            } else {\n                throw com.google.gson.reflect.TypeToken.buildUnexpectedTypeError(java.lang.reflect.Type, java.lang.Class.java.lang.Class.java.lang.Class, java.lang.reflect.ParameterizedType.java.lang.reflect.ParameterizedType.java.lang.Class, java.lang.reflect.GenericArrayType.java.lang.reflect.GenericArrayType.java.lang.Class);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.internal.bind.DateTypeAdapter:86","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[77,78,2,4,84,89,90,91,8,97,316,98,74,99,55,56,57,103,104,105,106,107,108,109,110,111,112,317,58,318,319,334,335,336,113,59,114,337,338,115,116,339,123,125,126,127,128,129,130,131,132,133,134,135,136,137,138,156,376,168,171,172,173,174,175,176,177,16,18,20,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,199,200,201,28,29,31,32,33,211,212,213,214,215,216,217,342,343,219,220,221,222,224,225,226,227,228,233,234,235,236,237,63,238,239,240,241,242,247,251,252,253,254,256,258,259,260,261,264,265,65,66,67,69,70,266,267,269,273,275,277,280,282,283,284,286,287,288,289,290,291,292,304,305,51,310],"tindex":"4e6807c2-3e38-11e6-86ba-c9ec7d4497d5","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n@java.lang.Override\nvoid write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value == null) {\n        {\n            java.lang.Object java.lang.Object = field.get(value);\n            com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n            t.write(writer, fieldValue);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[79,198],"tindex":"4e6807c3-3e38-11e6-86ba-79f21e1b6a09","method":{"position":"com.google.gson.Gson:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                {\n                    if (value == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.io.IOException();\n                    } else {\n                        {\n                            if (value == null) {\n                                {\n                                    if (value == null) {\n                                        out.nullValue();\n                                        return ;\n                                    } \n                                    out.value(value.toString());\n                                }\n                            } else {\n                                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                throw new java.io.IOException();\n                            }\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:340","type":"CtBinaryOperatorImpl","sourcecode":"toResolve instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"4e6807c4-3e38-11e6-86ba-5f8444d237f4","method":{"position":"com.google.gson.internal.$Gson$Types:322","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type resolve(java.lang.reflect.Type context, java.lang.Class<?> contextRawType, java.lang.reflect.Type toResolve) {\n    while (true) {\n        if (toResolve instanceof java.lang.reflect.TypeVariable) {\n            java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(toResolve));\n            toResolve = com.google.gson.internal.$Gson$Types.resolveTypeVariable(context, contextRawType, typeVariable);\n            if (toResolve == typeVariable) {\n                return toResolve;\n            } \n        } else if ((toResolve instanceof java.lang.Class) && (((java.lang.Class<?>)(toResolve)).isArray())) {\n            java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getComponentType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, componentType);\n            return componentType == newComponentType ? original : com.google.gson.internal.$Gson$Types.arrayOf(newComponentType);\n        } else if (toResolve instanceof java.lang.reflect.GenericArrayType) {\n            java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getGenericComponentType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, componentType);\n            return componentType == newComponentType ? original : com.google.gson.internal.$Gson$Types.arrayOf(newComponentType);\n        } else if (toResolve instanceof java.lang.reflect.ParameterizedType) {\n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getOwnerType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, ownerType);\n            boolean boolean = newOwnerType != ownerType;\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getActualTypeArguments();\n            for (int int = 0, int int = args.int ; t < length ; t++) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, args[t]);\n                if (resolvedTypeArgument != (args[t])) {\n                    if (!changed) {\n                        args = args.clone();\n                        changed = true;\n                    } \n                    args[t] = resolvedTypeArgument;\n                } \n            }\n            return changed ? com.google.gson.internal.$Gson$Types.newParameterizedTypeWithOwner(newOwnerType, original.getRawType(), args) : original;\n        } else if (toResolve instanceof java.lang.reflect.WildcardType) {\n            java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(toResolve));\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getLowerBounds();\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getUpperBounds();\n            if ((originalLowerBound.int) == 1) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, originalLowerBound[0]);\n                if (lowerBound != (originalLowerBound[0])) {\n                    return com.google.gson.internal.$Gson$Types.supertypeOf(lowerBound);\n                } \n            } else if ((originalUpperBound.int) == 1) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, originalUpperBound[0]);\n                if (upperBound != (originalUpperBound[0])) {\n                    return com.google.gson.internal.$Gson$Types.subtypeOf(upperBound);\n                } \n            } \n            return original;\n        } else {\n            return toResolve;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"context"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:501","type":"CtBinaryOperatorImpl","sourcecode":"typeAdapter instanceof com.google.gson.TypeAdapter<?>"},"failures":[377,378,43,230,231,245,284,285,379,51],"tindex":"4e682ed5-3e38-11e6-86ba-efd4f20ae9bf","method":{"position":"com.google.gson.TreeTypeAdapter:103","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newTypeHierarchyFactory(java.lang.Class<?> hierarchyType, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n        {\n            if (typeAdapter instanceof com.google.gson.InstanceCreator<?>) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                        {\n                            return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , null , false , hierarchyType);\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[380],"tindex":"4e682ed6-3e38-11e6-86ba-0dd23e560e3a","method":{"position":"com.google.gson.internal.bind.TypeAdapters:201","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                {\n                    out.value(value);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory:43","type":"CtBinaryOperatorImpl","sourcecode":"annotation == null"},"failures":[],"tindex":"4e682ed7-3e38-11e6-86ba-8dc43e66c47c","method":{"position":"com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory:50","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nstatic com.google.gson.TypeAdapter<?> getTypeAdapter(com.google.gson.internal.ConstructorConstructor constructorConstructor, com.google.gson.Gson gson, com.google.gson.reflect.TypeToken<?> fieldType, com.google.gson.annotations.JsonAdapter annotation) {\n    if (annotation != null) {\n        {\n            if (annotation == null) {\n                {\n                    if (annotation != null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            if (annotation != null) {\n                                {\n                                    java.lang.Class<?> java.lang.Class<?> = annotation.value();\n                                    if (com.google.gson.TypeAdapter.com.google.gson.TypeAdapter.java.lang.Class.isAssignableFrom(value)) {\n                                        java.lang.Class<com.google.gson.TypeAdapter<?>> java.lang.Class<com.google.gson.TypeAdapter<?>> = ((java.lang.Class<com.google.gson.TypeAdapter<?>>)(value));\n                                        return constructorConstructor.get(com.google.gson.reflect.TypeToken.get(typeAdapter)).construct();\n                                    } \n                                    if (com.google.gson.TypeAdapterFactory.com.google.gson.TypeAdapterFactory.java.lang.Class.isAssignableFrom(value)) {\n                                        java.lang.Class<com.google.gson.TypeAdapterFactory> java.lang.Class<com.google.gson.TypeAdapterFactory> = ((java.lang.Class<com.google.gson.TypeAdapterFactory>)(value));\n                                        return constructorConstructor.get(com.google.gson.reflect.TypeToken.get(typeAdapterFactory)).construct().create(gson, fieldType);\n                                    } \n                                    throw new java.lang.IllegalArgumentException(\"@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.\");\n                                }\n                            } else {\n                                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                throw new java.lang.RuntimeException();\n                            }\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[109,324],"tindex":"4e6855e8-3e38-11e6-86ba-5946b4263c00","method":{"position":"com.google.gson.Gson:261","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            double double = value.doubleValue();\n            checkValidFloatingPoint(doubleValue);\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:188","type":"CtBinaryOperatorImpl","sourcecode":"a instanceof java.lang.reflect.WildcardType"},"failures":[],"tindex":"4e6855e9-3e38-11e6-86ba-55cb481015f4","method":{"position":"com.google.gson.internal.$Gson$Types:158","type":"CtMethodImpl","sourcecode":"public static boolean equals(java.lang.reflect.Type a, java.lang.reflect.Type b) {\n    if (a == b) {\n        return true;\n    } else if (a instanceof java.lang.Class) {\n        return a.equals(b);\n    } else if (a instanceof java.lang.reflect.ParameterizedType) {\n        if (!(b instanceof java.lang.reflect.ParameterizedType)) {\n            return false;\n        } \n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(a));\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(b));\n        return ((com.google.gson.internal.$Gson$Types.equal(pa.getOwnerType(), pb.getOwnerType())) && (pa.getRawType().equals(pb.getRawType()))) && (java.util.Arrays.equals(pa.getActualTypeArguments(), pb.getActualTypeArguments()));\n    } else if (a instanceof java.lang.reflect.GenericArrayType) {\n        if (!(b instanceof java.lang.reflect.GenericArrayType)) {\n            return false;\n        } \n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(a));\n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(b));\n        return com.google.gson.internal.$Gson$Types.equals(ga.getGenericComponentType(), gb.getGenericComponentType());\n    } else if (a instanceof java.lang.reflect.WildcardType) {\n        if (!(b instanceof java.lang.reflect.WildcardType)) {\n            return false;\n        } \n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(a));\n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(b));\n        return (java.util.Arrays.equals(wa.getUpperBounds(), wb.getUpperBounds())) && (java.util.Arrays.equals(wa.getLowerBounds(), wb.getLowerBounds()));\n    } else if (a instanceof java.lang.reflect.TypeVariable) {\n        if (!(b instanceof java.lang.reflect.TypeVariable)) {\n            return false;\n        } \n        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(a));\n        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(b));\n        return ((va.getGenericDeclaration()) == (vb.getGenericDeclaration())) && (va.getName().equals(vb.getName()));\n    } else {\n        return false;\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:198","type":"CtBinaryOperatorImpl","sourcecode":"out == null"},"failures":[],"tindex":"4e6855ea-3e38-11e6-86ba-d121011e4551","method":{"position":"com.google.gson.TypeAdapter:140","type":"CtMethodImpl","sourcecode":"public final void toJson(java.io.Writer out, T value) throws java.io.IOException {\n    if (out == null) {\n        {\n            if (out == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = new com.google.gson.stream.JsonWriter(out);\n                    write(writer, value);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:137","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonObject"},"failures":[8,100,101,58,16,17,18,24,364,199,200,201,28,29,31,32,38,44,284,381,308,309,382,312,313,314],"tindex":"4e6855eb-3e38-11e6-86ba-d773e183ba2d","method":{"position":"com.google.gson.internal.Streams:67","type":"CtMethodImpl","sourcecode":"public static void write(com.google.gson.JsonElement element, com.google.gson.stream.JsonWriter writer) throws java.io.IOException {\n    if (element instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<com.google.gson.JsonElement>.write(writer, element);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.FieldNamingPolicy:155","type":"CtUnaryOperatorImpl","sourcecode":"!(java.lang.Character.isUpperCase(firstCharacter))"},"failures":[],"tindex":"4e687cfc-3e38-11e6-86ba-b741477b7710","method":{"position":"com.google.gson.FieldNamingPolicy:163","type":"CtMethodImpl","sourcecode":"private static java.lang.String modifyString(char firstCharacter, java.lang.String srcString, int indexOfSubstring) {\n    if (!(java.lang.Character.isUpperCase(firstCharacter))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return indexOfSubstring < (srcString.length()) ? firstCharacter + (srcString.substring(indexOfSubstring)) : java.lang.String.valueOf(firstCharacter);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"firstCharacter":"firstCharacter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[8,318,334,335,336,337,338,339],"tindex":"4e687cfd-3e38-11e6-86ba-353a1a2bcd06","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:144","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (value == null) {\n                        return nullValue();\n                    } \n                    put(new com.google.gson.JsonPrimitive(value));\n                    return com.google.gson.internal.bind.JsonTreeWriter.this;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:198","type":"CtBinaryOperatorImpl","sourcecode":"out == null"},"failures":[],"tindex":"4e687cfe-3e38-11e6-86ba-69ee917e1ba1","method":{"position":"com.google.gson.TypeAdapter:140","type":"CtMethodImpl","sourcecode":"public final void toJson(java.io.Writer out, T value) throws java.io.IOException {\n    if (out == null) {\n        {\n            if (out == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = new com.google.gson.stream.JsonWriter(out);\n                    write(writer, value);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:391","type":"CtUnaryOperatorImpl","sourcecode":"!insert"},"failures":[],"tindex":"4e687cff-3e38-11e6-86ba-bffe8f128c6e","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:338","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (!insert) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (insert) {\n                {\n                    for (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) {\n                        com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                        com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                        int int = left != null ? left.int : 0;\n                        int int = right != null ? right.int : 0;\n                        int int = leftHeight - rightHeight;\n                        if (delta == (-2)) {\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            int int = rightRight != null ? rightRight.int : 0;\n                            int int = rightLeft != null ? rightLeft.int : 0;\n                            int int = rightLeftHeight - rightRightHeight;\n                            if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                                rotateLeft(node);\n                            } else {\n                                assert rightDelta == 1;\n                                rotateRight(right);\n                                rotateLeft(node);\n                            }\n                            if (insert) {\n                                break;\n                            } \n                        } else if (delta == 2) {\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            int int = leftRight != null ? leftRight.int : 0;\n                            int int = leftLeft != null ? leftLeft.int : 0;\n                            int int = leftLeftHeight - leftRightHeight;\n                            if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                                rotateRight(node);\n                            } else {\n                                assert leftDelta == (-1);\n                                rotateLeft(left);\n                                rotateRight(node);\n                            }\n                            if (insert) {\n                                break;\n                            } \n                        } else if (delta == 0) {\n                            node.int = leftHeight + 1;\n                            if (insert) {\n                                break;\n                            } \n                        } else {\n                            assert (delta == (-1)) || (delta == 1);\n                            node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                            if (!insert) {\n                                break;\n                            } \n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"insert"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"4e68a410-3e38-11e6-86ba-2dbc068f2dde","method":{"position":"com.google.gson.TypeAdapter:268","type":"CtMethodImpl","sourcecode":"public final T fromJson(java.lang.String json) throws java.io.IOException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            return fromJson(new java.io.StringReader(json));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[383,92,55,57,324,233,236,239,240],"tindex":"4e68a411-3e38-11e6-86ba-d111e515d90e","method":{"position":"com.google.gson.internal.bind.TypeAdapters:245","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[384,385,386,370],"tindex":"4e68a412-3e38-11e6-86ba-b9c3a43db128","method":{"position":"com.google.gson.internal.bind.TypeAdapters:297","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                {\n                    out.value(value);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"4e68cb23-3e38-11e6-86ba-5742642db6c8","method":{"position":"com.google.gson.Gson:719","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.lang.String json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (json == null) {\n                {\n                    if (json == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new com.google.gson.JsonSyntaxException();\n                    } else {\n                        {\n                            if (json == null) {\n                                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                throw new com.google.gson.JsonSyntaxException();\n                            } else {\n                                {\n                                    if (json == null) {\n                                        return null;\n                                    } \n                                    java.io.StringReader java.io.StringReader = new java.io.StringReader(json);\n                                    T T = ((T)(fromJson(reader, typeOfT)));\n                                    return target;\n                                }\n                            }\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:452","type":"CtBinaryOperatorImpl","sourcecode":"typeAdapter instanceof com.google.gson.InstanceCreator<?>"},"failures":[],"tindex":"4e68cb24-3e38-11e6-86ba-b11760e961fe","method":{"position":"com.google.gson.TreeTypeAdapter:103","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newTypeHierarchyFactory(java.lang.Class<?> hierarchyType, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n        {\n            if (typeAdapter instanceof com.google.gson.InstanceCreator<?>) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                        {\n                            return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , null , false , hierarchyType);\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:188","type":"CtBinaryOperatorImpl","sourcecode":"a instanceof java.lang.reflect.WildcardType"},"failures":[],"tindex":"4e68cb25-3e38-11e6-86ba-9f2e623dfdce","method":{"position":"com.google.gson.internal.$Gson$Types:151","type":"CtMethodImpl","sourcecode":"static boolean equal(java.lang.Object a, java.lang.Object b) {\n    return (a == b) || ((a != null) && (a.equals(b)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"4e68cb26-3e38-11e6-86ba-31c23a382f1a","method":{"position":"com.google.gson.internal.bind.TypeAdapters:297","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                {\n                    out.value(value);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"4e68cb27-3e38-11e6-86ba-3935decef0bc","method":{"position":"com.google.gson.Gson:719","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.lang.String json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (json == null) {\n                {\n                    if (json == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new com.google.gson.JsonSyntaxException();\n                    } else {\n                        {\n                            if (json == null) {\n                                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                throw new com.google.gson.JsonSyntaxException();\n                            } else {\n                                {\n                                    if (json == null) {\n                                        return null;\n                                    } \n                                    java.io.StringReader java.io.StringReader = new java.io.StringReader(json);\n                                    T T = ((T)(fromJson(reader, typeOfT)));\n                                    return target;\n                                }\n                            }\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[0,1,2,3,4,5,6,387,8,316,388,100,101,112,317,58,318,319,334,335,336,337,338,339,340,147,171,13,16,17,18,24,199,200,201,28,29,31,32,389,390,391,341,392,35,342,343,36,38,44,45,393,284,49,345,346,292,347,348,308,349,350,351,352,353,354,355,309,394,312,313,314,395,396,397],"tindex":"4e68f238-3e38-11e6-86ba-7f151f87208a","method":{"position":"com.google.gson.JsonObject:53","type":"CtMethodImpl","sourcecode":"public void add(java.lang.String property, com.google.gson.JsonElement value) {\n    if (property == null) {\n        {\n            if (value == null) {\n                value = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.put(property, value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:360","type":"CtVariableReadImpl","sourcecode":"insert"},"failures":[341,352,398],"tindex":"4e68f239-3e38-11e6-86ba-3d5fb627b54b","method":{"position":"com.google.gson.internal.LinkedTreeMap:310","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (insert) {\n        {\n            for (com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>) {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                int int = left != null ? left.int : 0;\n                int int = right != null ? right.int : 0;\n                int int = leftHeight - rightHeight;\n                if (delta == (-2)) {\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    int int = rightRight != null ? rightRight.int : 0;\n                    int int = rightLeft != null ? rightLeft.int : 0;\n                    int int = rightLeftHeight - rightRightHeight;\n                    if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                        rotateLeft(node);\n                    } else {\n                        assert rightDelta == 1;\n                        rotateRight(right);\n                        rotateLeft(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 2) {\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    int int = leftRight != null ? leftRight.int : 0;\n                    int int = leftLeft != null ? leftLeft.int : 0;\n                    int int = leftLeftHeight - leftRightHeight;\n                    if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                        rotateRight(node);\n                    } else {\n                        assert leftDelta == (-1);\n                        rotateLeft(left);\n                        rotateRight(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 0) {\n                    node.int = leftHeight + 1;\n                    if (insert) {\n                        break;\n                    } \n                } else {\n                    assert (delta == (-1)) || (delta == 1);\n                    node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                    if (!insert) {\n                        break;\n                    } \n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"insert"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:274","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[399,77,78,400,79,315,0,1,2,3,4,5,6,401,7,402,403,326,80,81,327,328,82,404,83,329,84,405,406,330,407,85,86,87,331,408,383,88,409,89,410,90,91,92,93,332,94,411,333,95,387,412,96,8,97,72,316,98,413,73,74,75,388,99,100,101,414,415,102,416,55,417,56,418,419,420,57,103,104,105,106,421,107,108,109,422,423,110,424,111,425,426,317,58,318,319,334,335,336,113,59,114,337,338,427,428,115,116,339,117,118,429,430,431,119,120,432,433,434,121,122,435,436,437,438,60,439,123,440,441,442,124,443,444,445,125,126,127,128,129,135,446,136,137,138,447,139,140,141,340,448,449,450,451,142,143,452,144,453,145,146,454,455,147,456,324,457,148,458,149,150,151,459,152,460,153,154,461,155,462,156,157,158,463,464,159,465,466,160,467,468,161,469,162,163,470,376,164,165,166,167,168,471,472,9,473,474,169,475,476,170,477,171,478,479,480,481,363,172,173,174,175,176,482,177,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,377,27,178,483,484,179,180,181,485,486,182,487,488,183,489,490,184,364,491,492,185,493,494,186,495,496,497,498,378,187,499,188,189,500,501,190,502,503,504,505,191,506,192,193,507,194,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,195,523,524,196,525,526,527,528,529,530,531,532,533,534,535,536,537,538,197,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,320,554,555,556,557,558,559,560,561,562,563,564,565,321,566,61,567,384,568,569,570,571,572,573,574,575,198,576,577,578,579,380,580,581,582,583,584,585,586,587,385,588,322,589,590,591,386,62,592,323,593,594,199,595,596,200,201,28,29,30,31,32,597,202,203,204,205,206,598,599,207,600,208,601,602,603,209,604,605,210,389,390,391,341,392,606,607,608,33,34,609,211,212,35,213,610,214,215,216,217,342,343,611,218,219,220,612,613,614,221,222,615,616,223,36,37,224,225,617,226,38,227,365,618,228,619,39,40,41,42,229,43,230,231,620,232,233,621,44,234,235,236,237,63,622,238,239,240,623,241,45,624,242,243,244,245,246,625,626,247,627,248,249,250,628,251,629,630,252,253,631,632,254,633,255,634,635,256,636,257,258,259,260,637,638,639,640,641,261,262,263,264,265,267,268,269,642,643,644,645,270,646,271,272,273,647,648,274,649,650,275,276,651,277,652,653,46,654,278,47,279,48,280,281,655,282,283,656,284,285,379,286,49,657,658,287,288,289,290,291,292,294,304,659,660,305,368,369,370,661,306,371,662,663,50,51,52,53,54,664,307,665,666,308,309],"tindex":"4e69194a-3e38-11e6-86ba-91faf15a43f1","method":{"position":"com.google.gson.Gson:273","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> floatAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return ((float)(in.nextDouble()));\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    float float = value.floatValue();\n                    checkValidFloatingPoint(floatValue);\n                    out.value(value);\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:120","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonNull"},"failures":[],"tindex":"4e69405b-3e38-11e6-86ba-71c1d759fc9b","method":{"position":"com.google.gson.reflect.TypeToken:283","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic final boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonNull) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (o instanceof com.google.gson.reflect.TypeToken<?>) && (com.google.gson.internal.$Gson$Types.equals(java.lang.reflect.Type, ((com.google.gson.reflect.TypeToken<?>)(o)).java.lang.reflect.Type));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:105","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonObject"},"failures":[],"tindex":"4e69405c-3e38-11e6-86ba-99559d7942c4","method":{"position":"com.google.gson.internal.LinkedTreeMap:570","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonObject) {\n        {\n            return (o instanceof java.util.Map.Entry) && ((findByEntry(((java.util.Map.Entry<?, ?>)(o)))) != null);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[84,89,90,8,318,334,335,336,113,114,337,338,116,339,122,124,131,324,222,223,224,225,365,228,272],"tindex":"4e69405d-3e38-11e6-86ba-8daa18a14f73","method":{"position":"com.google.gson.internal.bind.TypeAdapters:361","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[77,78,79,315,2,4,7,80,81,82,83,84,85,86,87,383,88,89,410,90,91,92,93,94,411,95,96,8,97,72,98,74,99,102,55,56,419,57,103,104,105,106,421,107,108,109,110,111,112,58,113,59,114,115,116,117,118,430,431,119,120,432,121,122,435,60,123,441,124,444,125,126,127,128,129,130,131,132,133,134,135,446,136,137,138,139,140,141,450,142,143,144,145,146,147,148,458,149,150,151,152,153,154,155,156,157,158,463,159,160,468,161,162,163,376,164,165,166,167,168,9,169,170,171,173,174,175,176,177,10,12,16,17,18,20,21,22,24,26,377,27,178,179,180,181,182,183,184,185,186,497,378,187,188,189,500,190,191,192,193,194,515,517,195,196,532,533,197,540,541,544,547,549,550,553,320,557,321,61,384,568,571,574,198,579,380,580,581,582,583,584,385,322,386,62,323,199,200,201,202,203,204,205,206,207,208,209,210,33,211,212,213,214,215,216,217,611,218,219,220,612,613,614,221,222,223,37,224,225,226,38,227,228,39,40,41,42,229,43,230,231,232,233,44,234,235,236,237,63,238,239,240,241,243,244,245,246,247,248,249,250,628,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,65,267,268,269,642,270,646,271,272,273,274,275,276,277,652,46,278,47,279,48,280,281,655,282,283,656,284,285,286,49,657,287,288,289,290,291,292,294,51,52,53,54,307,665,666],"tindex":"4e69676e-3e38-11e6-86ba-818a85ebe594","method":{"position":"com.google.gson.Gson:532","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        {\n            java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n            toJson(src, typeOfSrc, writer);\n            return writer.toString();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:726","type":"CtBinaryOperatorImpl","sourcecode":"value == 0"},"failures":[458,155,158,463,667,296,298,665,666],"tindex":"4e69676f-3e38-11e6-86ba-9bfbe60483c2","method":{"position":"com.google.gson.stream.JsonWriter:476","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(long value) throws java.io.IOException {\n    if (value == 0) {\n        {\n            writeDeferredName();\n            beforeValue(false);\n            java.io.Writer.write(java.lang.Long.toString(value));\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:127","type":"CtInvocationImpl","sourcecode":"raw.isInterface()"},"failures":[77,78,1,2,3,4,6,84,408,89,90,91,94,8,97,316,98,73,74,75,388,99,55,417,56,418,419,420,57,103,104,105,106,421,107,108,109,422,423,110,424,111,425,426,112,317,58,318,319,334,335,336,113,59,114,337,338,427,428,115,116,339,123,440,441,125,126,127,128,129,130,131,132,133,134,135,136,137,138,448,449,454,324,459,156,376,168,477,171,172,173,174,175,176,482,177,11,15,16,18,20,178,483,484,179,180,181,485,486,182,487,488,183,489,490,184,491,185,493,186,496,498,187,499,188,189,500,501,190,502,503,504,191,506,192,193,507,194,508,509,510,511,577,199,596,200,201,28,29,31,32,389,390,391,341,392,33,34,211,212,213,610,214,215,216,217,342,343,219,220,221,222,615,616,224,225,617,226,227,228,619,233,621,234,235,236,237,63,622,238,239,240,623,241,624,242,247,627,251,629,630,252,253,631,632,254,634,635,256,636,258,259,260,638,639,640,261,264,265,267,269,273,650,275,277,280,282,283,284,286,657,658,287,288,289,290,291,292,304,305,369,371,662,663,51,310],"tindex":"4e696770-3e38-11e6-86ba-d7adb11abc32","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:125","type":"CtMethodImpl","sourcecode":"private java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> getBoundFields(com.google.gson.Gson context, com.google.gson.reflect.TypeToken<?> type, java.lang.Class<?> raw) {\n    if (raw.isInterface()) {\n        {\n            java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> = new java.util.LinkedHashMap<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField>();\n            if (raw.isInterface()) {\n                return result;\n            } \n            java.lang.reflect.Type java.lang.reflect.Type = type.getType();\n            while (raw != (java.lang.Object.java.lang.Object.java.lang.Class)) {\n                java.lang.reflect.Field[] java.lang.reflect.Field[] = raw.getDeclaredFields();\n                for (java.lang.reflect.Field java.lang.reflect.Field : fields) {\n                    boolean boolean = excludeField(field, true);\n                    boolean boolean = excludeField(field, false);\n                    if ((!serialize) && (!deserialize)) {\n                        continue;\n                    } \n                    field.setAccessible(true);\n                    java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, field.getGenericType());\n                    com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = createBoundField(context, field, getFieldName(field), com.google.gson.reflect.TypeToken.get(fieldType), serialize, deserialize);\n                    com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = result.put(boundField.java.lang.String, boundField);\n                    if (previous != null) {\n                        throw new java.lang.IllegalArgumentException(((declaredType + \" declares multiple JSON fields named \") + (previous.java.lang.String)));\n                    } \n                }\n                type = com.google.gson.reflect.TypeToken.get(com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, raw.getGenericSuperclass()));\n                raw = type.getRawType();\n            }\n            return result;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"raw"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.TreeTypeAdapter:55","type":"CtInvocationImpl","sourcecode":"value.isJsonNull()"},"failures":[],"tindex":"4e698e81-3e38-11e6-86ba-c913fd39b215","method":{"position":"com.google.gson.JsonObject:121","type":"CtMethodImpl","sourcecode":"private com.google.gson.JsonElement createJsonElement(java.lang.Object value) {\n    if (value == null) {\n        {\n            if (value.isJsonNull()) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return value == null ? com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull : new com.google.gson.JsonPrimitive(value);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"4e69b592-3e38-11e6-86ba-4597b1cced3a","method":{"position":"com.google.gson.Gson:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                {\n                    if (value == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.io.IOException();\n                    } else {\n                        {\n                            if (value == null) {\n                                {\n                                    if (value == null) {\n                                        out.nullValue();\n                                        return ;\n                                    } \n                                    out.value(value.toString());\n                                }\n                            } else {\n                                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                throw new java.io.IOException();\n                            }\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:198","type":"CtBinaryOperatorImpl","sourcecode":"out == null"},"failures":[222,224,225,228,233,235,236,239,240],"tindex":"4e69b593-3e38-11e6-86ba-a55a09dcad72","method":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:84","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Object array) throws java.io.IOException {\n    if (array == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (array == null) {\n                out.nullValue();\n                return ;\n            } \n            out.beginArray();\n            for (int int = 0, int int = java.lang.reflect.Array.getLength(array) ; i < length ; i++) {\n                E E = ((E)(java.lang.reflect.Array.get(array, i)));\n                com.google.gson.TypeAdapter<E>.write(out, value);\n            }\n            out.endArray();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:726","type":"CtBinaryOperatorImpl","sourcecode":"value == 0"},"failures":[668,312],"tindex":"4e69b594-3e38-11e6-86ba-b3cbc94742d0","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:170","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(long value) throws java.io.IOException {\n    if (value == 0) {\n        {\n            if (value == 0) {\n                {\n                    put(new com.google.gson.JsonPrimitive(value));\n                    return com.google.gson.internal.bind.JsonTreeWriter.this;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:287","type":"CtBinaryOperatorImpl","sourcecode":"replacement != null"},"failures":[316,388,317,58,318,319,171,391,341,653,284,292,357,358,669,359,670,362,398],"tindex":"4e69b595-3e38-11e6-86ba-0d198e96557a","method":{"position":"com.google.gson.internal.LinkedTreeMap:284","type":"CtMethodImpl","sourcecode":"private void replaceInParent(com.google.gson.internal.LinkedTreeMap.Node<K, V> node, com.google.gson.internal.LinkedTreeMap.Node<K, V> replacement) {\n    if (node != null) {\n        {\n            if (node != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (replacement != null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                            node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                            if (replacement != null) {\n                                replacement.com.google.gson.internal.LinkedTreeMap.Node<K, V> = parent;\n                            } \n                            if (parent != null) {\n                                if ((parent.com.google.gson.internal.LinkedTreeMap.Node<K, V>) == node) {\n                                    parent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                                } else {\n                                    assert (parent.com.google.gson.internal.LinkedTreeMap.Node<K, V>) == node;\n                                    parent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                                }\n                            } else {\n                                com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"replacement":"replacement"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"4e69dca6-3e38-11e6-86ba-756d88426202","method":{"position":"com.google.gson.JsonObject:121","type":"CtMethodImpl","sourcecode":"private com.google.gson.JsonElement createJsonElement(java.lang.Object value) {\n    if (value == null) {\n        {\n            if (value.isJsonNull()) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return value == null ? com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull : new com.google.gson.JsonPrimitive(value);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:287","type":"CtBinaryOperatorImpl","sourcecode":"replacement != null"},"failures":[],"tindex":"4e69dca7-3e38-11e6-86ba-b595fa545078","method":{"position":"com.google.gson.internal.LinkedTreeMap:284","type":"CtMethodImpl","sourcecode":"private void replaceInParent(com.google.gson.internal.LinkedTreeMap.Node<K, V> node, com.google.gson.internal.LinkedTreeMap.Node<K, V> replacement) {\n    if (node != null) {\n        {\n            if (node != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (replacement != null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                            node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                            if (replacement != null) {\n                                replacement.com.google.gson.internal.LinkedTreeMap.Node<K, V> = parent;\n                            } \n                            if (parent != null) {\n                                if ((parent.com.google.gson.internal.LinkedTreeMap.Node<K, V>) == node) {\n                                    parent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                                } else {\n                                    assert (parent.com.google.gson.internal.LinkedTreeMap.Node<K, V>) == node;\n                                    parent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                                }\n                            } else {\n                                com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"replacement":"node"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"4e6a03b8-3e38-11e6-86ba-7de5f4f4369a","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:144","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (value == null) {\n                        return nullValue();\n                    } \n                    put(new com.google.gson.JsonPrimitive(value));\n                    return com.google.gson.internal.bind.JsonTreeWriter.this;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.ObjectTypeAdapter:95","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[99,123,135,136,137,138,186,273,275,277,671,310,311],"tindex":"4e6a03b9-3e38-11e6-86ba-c547878e5111","method":{"position":"com.google.gson.internal.bind.ObjectTypeAdapter:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Object value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                {\n                    if (value == null) {\n                        {\n                            if (value == null) {\n                                out.nullValue();\n                                return ;\n                            } \n                            com.google.gson.TypeAdapter<java.lang.Object> com.google.gson.TypeAdapter<java.lang.Object> = ((com.google.gson.TypeAdapter<java.lang.Object>)(com.google.gson.Gson.getAdapter(value.getClass())));\n                            if (typeAdapter instanceof com.google.gson.internal.bind.ObjectTypeAdapter) {\n                                out.beginObject();\n                                out.endObject();\n                                return ;\n                            } \n                            typeAdapter.write(out, value);\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.io.IOException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:107","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonArray"},"failures":[],"tindex":"4e6a03ba-3e38-11e6-86ba-9710bba47541","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:839","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonObject) {\n        {\n            if (o instanceof com.google.gson.JsonArray) {\n                {\n                    return containsKey(o);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:578","type":"CtBinaryOperatorImpl","sourcecode":"root == null"},"failures":[],"tindex":"4e6a2acb-3e38-11e6-86ba-2d166e84aa18","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:626","type":"CtMethodImpl","sourcecode":"void reset(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            for (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root ; n != null ; n = n.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) {\n                n.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = stackTop;\n                stackTop = n;\n            }\n            com.google.gson.internal.LinkedHashTreeMap.AvlIterator.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = stackTop;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:109","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonPrimitive"},"failures":[],"tindex":"4e6a2acc-3e38-11e6-86ba-0d6fe93d89bd","method":{"position":"com.google.gson.internal.$Gson$Types:213","type":"CtMethodImpl","sourcecode":"private static int hashCodeOrZero(java.lang.Object o) {\n    return o != null ? o.hashCode() : 0;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[],"tindex":"4e6a78ed-3e38-11e6-86ba-15accd3a043f","method":{"position":"com.google.gson.FieldNamingPolicy:137","type":"CtMethodImpl","sourcecode":"private static java.lang.String upperCaseFirstLetter(java.lang.String name) {\n    if (name == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            int int = 0;\n            char char = name.charAt(index);\n            while (index < ((name.length()) - 1)) {\n                if (java.lang.Character.isLetter(firstCharacter)) {\n                    break;\n                } \n                fieldNameBuilder.append(firstCharacter);\n                firstCharacter = name.charAt((++index));\n            }\n            if (index == (name.length())) {\n                return fieldNameBuilder.toString();\n            } \n            if (!(java.lang.Character.isUpperCase(firstCharacter))) {\n                java.lang.String java.lang.String = com.google.gson.FieldNamingPolicy.modifyString(java.lang.Character.toUpperCase(firstCharacter), name, (++index));\n                return fieldNameBuilder.append(modifiedTarget).toString();\n            } else {\n                return name;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:278","type":"CtBinaryOperatorImpl","sourcecode":"node != null"},"failures":[],"tindex":"4e6a78ee-3e38-11e6-86ba-cbffb1244af9","method":{"position":"com.google.gson.internal.LinkedTreeMap:284","type":"CtMethodImpl","sourcecode":"private void replaceInParent(com.google.gson.internal.LinkedTreeMap.Node<K, V> node, com.google.gson.internal.LinkedTreeMap.Node<K, V> replacement) {\n    if (node != null) {\n        {\n            if (node != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (replacement != null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                            node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                            if (replacement != null) {\n                                replacement.com.google.gson.internal.LinkedTreeMap.Node<K, V> = parent;\n                            } \n                            if (parent != null) {\n                                if ((parent.com.google.gson.internal.LinkedTreeMap.Node<K, V>) == node) {\n                                    parent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                                } else {\n                                    assert (parent.com.google.gson.internal.LinkedTreeMap.Node<K, V>) == node;\n                                    parent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                                }\n                            } else {\n                                com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"node"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1422","type":"CtUnaryOperatorImpl","sourcecode":"!(lenient)"},"failures":[77,78,79,315,2,4,7,80,81,82,83,84,85,86,87,383,88,89,410,90,91,92,93,94,411,95,96,8,97,72,316,98,74,99,100,101,102,55,56,419,57,103,104,105,106,107,108,109,110,111,112,317,58,318,319,334,335,336,113,59,114,337,338,115,116,339,117,118,430,431,119,120,432,121,122,435,60,123,441,124,444,125,126,127,128,129,130,131,132,133,134,135,446,136,137,138,139,140,141,450,142,143,144,145,146,147,324,148,458,149,150,151,152,153,154,155,156,157,158,463,159,160,468,161,162,163,376,164,165,166,167,168,9,473,169,170,171,478,363,172,173,174,175,176,177,10,12,16,17,18,20,21,22,24,26,377,27,178,179,180,181,182,183,184,364,185,494,186,497,378,187,188,189,500,190,191,192,193,194,515,517,195,196,532,533,197,540,541,544,547,549,550,553,320,557,321,61,384,568,571,574,198,579,380,580,581,582,583,584,385,322,386,62,323,199,200,201,28,29,30,31,32,202,203,204,205,206,207,208,209,210,33,211,212,213,214,215,216,217,342,343,611,218,219,220,612,613,614,221,222,223,37,224,225,226,38,227,365,228,39,40,41,42,229,43,230,231,232,233,44,234,235,236,237,63,238,239,240,241,242,243,244,245,246,247,248,249,250,628,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,65,267,268,269,642,270,646,271,272,273,274,275,276,277,652,46,278,47,279,48,280,281,655,282,283,656,284,285,286,49,657,287,288,289,290,291,292,381,347,366,367,672,293,294,673,304,305,368,369,370,306,371,51,52,53,54,307,665,666,308,309,674,382,675,668,676,312,313,677,314],"tindex":"4e6a9fff-3e38-11e6-86ba-b70d2150c102","method":{"position":"com.google.gson.stream.JsonWriter:234","type":"CtMethodImpl","sourcecode":"public final void setLenient(boolean lenient) {\n    if (!lenient) {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = lenient;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"lenient"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:118","type":"CtBinaryOperatorImpl","sourcecode":"annotation != null"},"failures":[],"tindex":"4e6aa000-3e38-11e6-86ba-437a02621e4c","method":{"position":"com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory:50","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nstatic com.google.gson.TypeAdapter<?> getTypeAdapter(com.google.gson.internal.ConstructorConstructor constructorConstructor, com.google.gson.Gson gson, com.google.gson.reflect.TypeToken<?> fieldType, com.google.gson.annotations.JsonAdapter annotation) {\n    if (annotation != null) {\n        {\n            if (annotation == null) {\n                {\n                    if (annotation != null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            if (annotation != null) {\n                                {\n                                    java.lang.Class<?> java.lang.Class<?> = annotation.value();\n                                    if (com.google.gson.TypeAdapter.com.google.gson.TypeAdapter.java.lang.Class.isAssignableFrom(value)) {\n                                        java.lang.Class<com.google.gson.TypeAdapter<?>> java.lang.Class<com.google.gson.TypeAdapter<?>> = ((java.lang.Class<com.google.gson.TypeAdapter<?>>)(value));\n                                        return constructorConstructor.get(com.google.gson.reflect.TypeToken.get(typeAdapter)).construct();\n                                    } \n                                    if (com.google.gson.TypeAdapterFactory.com.google.gson.TypeAdapterFactory.java.lang.Class.isAssignableFrom(value)) {\n                                        java.lang.Class<com.google.gson.TypeAdapterFactory> java.lang.Class<com.google.gson.TypeAdapterFactory> = ((java.lang.Class<com.google.gson.TypeAdapterFactory>)(value));\n                                        return constructorConstructor.get(com.google.gson.reflect.TypeToken.get(typeAdapterFactory)).construct().create(gson, fieldType);\n                                    } \n                                    throw new java.lang.IllegalArgumentException(\"@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.\");\n                                }\n                            } else {\n                                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                throw new java.lang.RuntimeException();\n                            }\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[37],"tindex":"4e6aa001-3e38-11e6-86ba-637cb69cf427","method":{"position":"com.google.gson.Gson:133","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src) {\n    if (src == null) {\n        {\n            if (src == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return toJsonTree(src);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"4e6ac712-3e38-11e6-86ba-89adfa99e8f6","method":{"position":"com.google.gson.Gson:847","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(com.google.gson.JsonElement json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:107","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonArray"},"failures":[],"tindex":"4e6ac713-3e38-11e6-86ba-fb78b28bf233","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:512","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"rawtypes\")\n@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonArray) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof java.util.Map.Entry) {\n                java.util.Map.Entry java.util.Map.Entry = ((java.util.Map.Entry)(o));\n                return ((K) == null ? (other.getKey()) == null : K.equals(other.getKey())) && ((V) == null ? (other.getValue()) == null : V.equals(other.getValue()));\n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"4e6ac714-3e38-11e6-86ba-19e19cafa8ef","method":{"position":"com.google.gson.Gson:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                {\n                    if (value == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.io.IOException();\n                    } else {\n                        {\n                            if (value == null) {\n                                {\n                                    if (value == null) {\n                                        out.nullValue();\n                                        return ;\n                                    } \n                                    out.value(value.toString());\n                                }\n                            } else {\n                                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                throw new java.io.IOException();\n                            }\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[678,679,680,681,682,77,78,1,2,3,4,6,84,408,89,90,91,94,8,97,316,98,73,74,75,388,99,55,417,56,418,419,420,57,103,104,105,106,421,107,108,109,422,423,110,424,111,425,426,112,317,58,318,319,334,335,336,113,59,114,337,338,427,428,115,116,339,123,440,441,125,126,127,128,129,130,131,132,133,134,135,136,137,138,448,449,454,324,459,156,376,168,477,171,172,173,174,175,176,482,177,11,15,16,18,20,178,483,484,179,180,181,485,486,182,487,488,183,489,490,184,491,185,493,186,496,498,187,499,188,189,501,190,502,503,191,506,192,193,507,194,508,509,510,511,577,199,596,200,201,28,29,31,32,389,390,391,341,392,33,34,211,212,213,610,214,215,216,217,342,343,219,220,221,222,615,616,224,225,617,226,227,228,619,233,621,234,235,236,237,63,622,238,239,240,623,241,624,242,247,627,251,629,630,252,253,631,632,254,634,635,256,636,258,259,260,638,639,640,261,264,265,267,269,273,650,275,277,280,282,283,284,286,657,658,287,288,289,290,291,292,683,684,685,304,305,369,371,662,663,51,310,686,687],"tindex":"4e6ac715-3e38-11e6-86ba-11eef9770ce1","method":{"position":"com.google.gson.internal.Excluder:149","type":"CtMethodImpl","sourcecode":"public boolean excludeField(java.lang.reflect.Field field, boolean serialize) {\n    if (field.isSynthetic()) {\n        {\n            if (((int) & (field.getModifiers())) != 0) {\n                return true;\n            } \n            if (((double) != (com.google.gson.internal.Excluder.com.google.gson.internal.Excluder.double)) && (!(isValidVersion(field.getAnnotation(com.google.gson.annotations.Since.com.google.gson.annotations.Since.java.lang.Class), field.getAnnotation(com.google.gson.annotations.Until.com.google.gson.annotations.Until.java.lang.Class))))) {\n                return true;\n            } \n            if (field.isSynthetic()) {\n                return true;\n            } \n            if (boolean) {\n                com.google.gson.annotations.Expose com.google.gson.annotations.Expose = field.getAnnotation(com.google.gson.annotations.Expose.com.google.gson.annotations.Expose.java.lang.Class);\n                if ((annotation == null) || (serialize ? !(annotation.serialize()) : !(annotation.deserialize()))) {\n                    return true;\n                } \n            } \n            if ((!(boolean)) && (isInnerClass(field.getType()))) {\n                return true;\n            } \n            if (isAnonymousOrLocal(field.getType())) {\n                return true;\n            } \n            java.util.List<com.google.gson.ExclusionStrategy> java.util.List<com.google.gson.ExclusionStrategy> = serialize ? java.util.List<com.google.gson.ExclusionStrategy> : java.util.List<com.google.gson.ExclusionStrategy>;\n            if (!(list.isEmpty())) {\n                com.google.gson.FieldAttributes com.google.gson.FieldAttributes = new com.google.gson.FieldAttributes(field);\n                for (com.google.gson.ExclusionStrategy com.google.gson.ExclusionStrategy : list) {\n                    if (exclusionStrategy.shouldSkipField(fieldAttributes)) {\n                        return true;\n                    } \n                }\n            } \n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"field"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:107","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonArray"},"failures":[688,689],"tindex":"4e6aee26-3e38-11e6-86ba-677a7b84446d","method":{"position":"com.google.gson.JsonArray:329","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonArray) {\n        {\n            return (o == (com.google.gson.JsonArray.this)) || ((o instanceof com.google.gson.JsonArray) && (((com.google.gson.JsonArray)(o)).java.util.List<com.google.gson.JsonElement>.equals(java.util.List<com.google.gson.JsonElement>)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:726","type":"CtBinaryOperatorImpl","sourcecode":"value == 0"},"failures":[],"tindex":"4e6aee27-3e38-11e6-86ba-7540bfd67699","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:170","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(long value) throws java.io.IOException {\n    if (value == 0) {\n        {\n            if (value == 0) {\n                {\n                    put(new com.google.gson.JsonPrimitive(value));\n                    return com.google.gson.internal.bind.JsonTreeWriter.this;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[8,316,317,58,318,319,334,335,336,337,338,339,28,29,30,31,32,342,343,44,284,49,347,366,367],"tindex":"4e6aee28-3e38-11e6-86ba-913b8002226e","method":{"position":"com.google.gson.Gson:491","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        {\n            com.google.gson.internal.bind.JsonTreeWriter com.google.gson.internal.bind.JsonTreeWriter = new com.google.gson.internal.bind.JsonTreeWriter();\n            toJson(src, typeOfSrc, writer);\n            return writer.get();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:105","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonObject"},"failures":[],"tindex":"4e6aee29-3e38-11e6-86ba-79dc8a913811","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:839","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonObject) {\n        {\n            if (o instanceof com.google.gson.JsonArray) {\n                {\n                    return containsKey(o);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.JsonPrimitive:313","type":"CtBinaryOperatorImpl","sourcecode":"(value) == null"},"failures":[],"tindex":"4e6b153a-3e38-11e6-86ba-cfcb7b51c503","method":{"position":"com.google.gson.internal.bind.ObjectTypeAdapter:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Object value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                {\n                    if (value == null) {\n                        {\n                            if (value == null) {\n                                out.nullValue();\n                                return ;\n                            } \n                            com.google.gson.TypeAdapter<java.lang.Object> com.google.gson.TypeAdapter<java.lang.Object> = ((com.google.gson.TypeAdapter<java.lang.Object>)(com.google.gson.Gson.getAdapter(value.getClass())));\n                            if (typeAdapter instanceof com.google.gson.internal.bind.ObjectTypeAdapter) {\n                                out.beginObject();\n                                out.endObject();\n                                return ;\n                            } \n                            typeAdapter.write(out, value);\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.io.IOException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:168","type":"CtUnaryOperatorImpl","sourcecode":"!(b instanceof java.lang.reflect.ParameterizedType)"},"failures":[],"tindex":"4e6b153b-3e38-11e6-86ba-23fd781bc098","method":{"position":"com.google.gson.internal.$Gson$Types:158","type":"CtMethodImpl","sourcecode":"public static boolean equals(java.lang.reflect.Type a, java.lang.reflect.Type b) {\n    if (a == b) {\n        return true;\n    } else if (a instanceof java.lang.Class) {\n        return a.equals(b);\n    } else if (a instanceof java.lang.reflect.ParameterizedType) {\n        if (!(b instanceof java.lang.reflect.ParameterizedType)) {\n            return false;\n        } \n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(a));\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(b));\n        return ((com.google.gson.internal.$Gson$Types.equal(pa.getOwnerType(), pb.getOwnerType())) && (pa.getRawType().equals(pb.getRawType()))) && (java.util.Arrays.equals(pa.getActualTypeArguments(), pb.getActualTypeArguments()));\n    } else if (a instanceof java.lang.reflect.GenericArrayType) {\n        if (!(b instanceof java.lang.reflect.GenericArrayType)) {\n            return false;\n        } \n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(a));\n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(b));\n        return com.google.gson.internal.$Gson$Types.equals(ga.getGenericComponentType(), gb.getGenericComponentType());\n    } else if (a instanceof java.lang.reflect.WildcardType) {\n        if (!(b instanceof java.lang.reflect.WildcardType)) {\n            return false;\n        } \n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(a));\n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(b));\n        return (java.util.Arrays.equals(wa.getUpperBounds(), wb.getUpperBounds())) && (java.util.Arrays.equals(wa.getLowerBounds(), wb.getLowerBounds()));\n    } else if (a instanceof java.lang.reflect.TypeVariable) {\n        if (!(b instanceof java.lang.reflect.TypeVariable)) {\n            return false;\n        } \n        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(a));\n        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(b));\n        return ((va.getGenericDeclaration()) == (vb.getGenericDeclaration())) && (va.getName().equals(vb.getName()));\n    } else {\n        return false;\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"4e6b153c-3e38-11e6-86ba-7d95b45914ca","method":{"position":"com.google.gson.Gson:133","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src) {\n    if (src == null) {\n        {\n            if (src == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return toJsonTree(src);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:159","type":"CtBinaryOperatorImpl","sourcecode":"a == b"},"failures":[],"tindex":"4e6b153d-3e38-11e6-86ba-0b04f282b330","method":{"position":"com.google.gson.internal.LinkedTreeMap:207","type":"CtMethodImpl","sourcecode":"private boolean equal(java.lang.Object a, java.lang.Object b) {\n    if (b == b) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (a == b) || ((a != null) && (a.equals(b)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"b","b":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"4e6b153e-3e38-11e6-86ba-f73f6353ce80","method":{"position":"com.google.gson.Gson:695","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.lang.String json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[324],"tindex":"4e6b153f-3e38-11e6-86ba-03047904bc86","method":{"position":"com.google.gson.internal.bind.TypeAdapters:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:109","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonPrimitive"},"failures":[],"tindex":"4e6b3c50-3e38-11e6-86ba-fbaacc8b12d4","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:804","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonPrimitive) {\n        {\n            return (o instanceof java.util.Map.Entry) && ((findByEntry(((java.util.Map.Entry<?, ?>)(o)))) != null);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"4e6b3c51-3e38-11e6-86ba-4b8cd880c946","method":{"position":"com.google.gson.Gson:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                {\n                    if (value == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.io.IOException();\n                    } else {\n                        {\n                            if (value == null) {\n                                {\n                                    if (value == null) {\n                                        out.nullValue();\n                                        return ;\n                                    } \n                                    out.value(value.toString());\n                                }\n                            } else {\n                                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                throw new java.io.IOException();\n                            }\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:501","type":"CtBinaryOperatorImpl","sourcecode":"typeAdapter instanceof com.google.gson.TypeAdapter<?>"},"failures":[],"tindex":"4e6b3c52-3e38-11e6-86ba-99b78c4c8e5a","method":{"position":"com.google.gson.TreeTypeAdapter:103","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newTypeHierarchyFactory(java.lang.Class<?> hierarchyType, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n        {\n            if (typeAdapter instanceof com.google.gson.InstanceCreator<?>) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                        {\n                            return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , null , false , hierarchyType);\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"4e6b3c53-3e38-11e6-86ba-abaf7d0841ae","method":{"position":"com.google.gson.internal.bind.TypeAdapters:201","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                {\n                    out.value(value);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.JsonObject:54","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"4e6b3c54-3e38-11e6-86ba-3dfcd92ced0a","method":{"position":"com.google.gson.internal.bind.ObjectTypeAdapter:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Object value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                {\n                    if (value == null) {\n                        {\n                            if (value == null) {\n                                out.nullValue();\n                                return ;\n                            } \n                            com.google.gson.TypeAdapter<java.lang.Object> com.google.gson.TypeAdapter<java.lang.Object> = ((com.google.gson.TypeAdapter<java.lang.Object>)(com.google.gson.Gson.getAdapter(value.getClass())));\n                            if (typeAdapter instanceof com.google.gson.internal.bind.ObjectTypeAdapter) {\n                                out.beginObject();\n                                out.endObject();\n                                return ;\n                            } \n                            typeAdapter.write(out, value);\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.io.IOException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"4e6b3c55-3e38-11e6-86ba-5d9c76259ea8","method":{"position":"com.google.gson.Gson:719","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.lang.String json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (json == null) {\n                {\n                    if (json == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new com.google.gson.JsonSyntaxException();\n                    } else {\n                        {\n                            if (json == null) {\n                                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                throw new com.google.gson.JsonSyntaxException();\n                            } else {\n                                {\n                                    if (json == null) {\n                                        return null;\n                                    } \n                                    java.io.StringReader java.io.StringReader = new java.io.StringReader(json);\n                                    T T = ((T)(fromJson(reader, typeOfT)));\n                                    return target;\n                                }\n                            }\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:115","type":"CtInvocationImpl","sourcecode":"primitive.isNumber()"},"failures":[],"tindex":"4e6b6366-3e38-11e6-86ba-f17b1b1b368d","method":{"position":"com.google.gson.JsonPrimitive:93","type":"CtMethodImpl","sourcecode":"void setValue(java.lang.Object primitive) {\n    if (primitive.isNumber()) {\n        {\n            if (primitive.isBoolean()) {\n                {\n                    if (primitive instanceof java.lang.Character) {\n                        char char = ((java.lang.Character)(primitive)).charValue();\n                        com.google.gson.JsonPrimitive.this.java.lang.Object = java.lang.String.valueOf(c);\n                    } else {\n                        com.google.gson.internal.$Gson$Preconditions.checkArgument(((primitive instanceof java.lang.Number) || (com.google.gson.JsonPrimitive.isPrimitiveOrString(primitive))));\n                        com.google.gson.JsonPrimitive.this.java.lang.Object = primitive;\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"primitive"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:159","type":"CtBinaryOperatorImpl","sourcecode":"a == b"},"failures":[],"tindex":"4e6b6367-3e38-11e6-86ba-ffd295d92ae0","method":{"position":"com.google.gson.internal.$Gson$Types:158","type":"CtMethodImpl","sourcecode":"public static boolean equals(java.lang.reflect.Type a, java.lang.reflect.Type b) {\n    if (a == b) {\n        return true;\n    } else if (a instanceof java.lang.Class) {\n        return a.equals(b);\n    } else if (a instanceof java.lang.reflect.ParameterizedType) {\n        if (!(b instanceof java.lang.reflect.ParameterizedType)) {\n            return false;\n        } \n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(a));\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(b));\n        return ((com.google.gson.internal.$Gson$Types.equal(pa.getOwnerType(), pb.getOwnerType())) && (pa.getRawType().equals(pb.getRawType()))) && (java.util.Arrays.equals(pa.getActualTypeArguments(), pb.getActualTypeArguments()));\n    } else if (a instanceof java.lang.reflect.GenericArrayType) {\n        if (!(b instanceof java.lang.reflect.GenericArrayType)) {\n            return false;\n        } \n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(a));\n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(b));\n        return com.google.gson.internal.$Gson$Types.equals(ga.getGenericComponentType(), gb.getGenericComponentType());\n    } else if (a instanceof java.lang.reflect.WildcardType) {\n        if (!(b instanceof java.lang.reflect.WildcardType)) {\n            return false;\n        } \n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(a));\n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(b));\n        return (java.util.Arrays.equals(wa.getUpperBounds(), wb.getUpperBounds())) && (java.util.Arrays.equals(wa.getLowerBounds(), wb.getLowerBounds()));\n    } else if (a instanceof java.lang.reflect.TypeVariable) {\n        if (!(b instanceof java.lang.reflect.TypeVariable)) {\n            return false;\n        } \n        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(a));\n        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(b));\n        return ((va.getGenericDeclaration()) == (vb.getGenericDeclaration())) && (va.getName().equals(vb.getName()));\n    } else {\n        return false;\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"a","b":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:298","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[],"tindex":"4e6b6368-3e38-11e6-86ba-b7fd49df1d41","method":{"position":"com.google.gson.Gson:297","type":"CtMethodImpl","sourcecode":"private void checkValidFloatingPoint(double value) {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                        {\n                            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                                throw new java.lang.IllegalArgumentException(((value + \" is not a valid double value as per JSON specification. To override this\") + \" behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.\"));\n                            } \n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[],"tindex":"4e6b6369-3e38-11e6-86ba-37ae3e3c6b6c","method":{"position":"com.google.gson.Gson:576","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            try {\n                com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                toJson(src, typeOfSrc, jsonWriter);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:565","type":"CtBinaryOperatorImpl","sourcecode":"(indent) == null"},"failures":[],"tindex":"4e6b8a7a-3e38-11e6-86ba-95683eb4f01c","method":{"position":"com.google.gson.stream.JsonWriter:212","type":"CtMethodImpl","sourcecode":"public final void setIndent(java.lang.String indent) {\n    if (indent == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((indent.length()) == 0) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if ((indent.length()) == 0) {\n                        com.google.gson.stream.JsonWriter.this.java.lang.String = null;\n                        com.google.gson.stream.JsonWriter.this.java.lang.String = \":\";\n                    } else {\n                        com.google.gson.stream.JsonWriter.this.java.lang.String = indent;\n                        com.google.gson.stream.JsonWriter.this.java.lang.String = \": \";\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"indent"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"4e6b8a7b-3e38-11e6-86ba-091a8ba1da38","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:108","type":"CtMethodImpl","sourcecode":"public boolean writeField(java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    } else {\n        {\n            if (!(boolean))\n                return false;\n            \n            java.lang.Object java.lang.Object = field.get(value);\n            return fieldValue != value;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:278","type":"CtBinaryOperatorImpl","sourcecode":"node != null"},"failures":[341,352,398],"tindex":"4e6b8a7c-3e38-11e6-86ba-ef457d51337d","method":{"position":"com.google.gson.internal.LinkedTreeMap:217","type":"CtMethodImpl","sourcecode":"void removeInternal(com.google.gson.internal.LinkedTreeMap.Node<K, V> node, boolean unlink) {\n    if (node != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230685557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (unlink) {\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            if ((left != null) && (right != null)) {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = (left.int) > (right.int) ? left.last() : right.first();\n                removeInternal(adjacent, false);\n                int int = 0;\n                left = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                if (left != null) {\n                    leftHeight = left.int;\n                    adjacent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = left;\n                    left.com.google.gson.internal.LinkedTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                } \n                int int = 0;\n                right = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                if (right != null) {\n                    rightHeight = right.int;\n                    adjacent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = right;\n                    right.com.google.gson.internal.LinkedTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                } \n                adjacent.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                replaceInParent(node, adjacent);\n                return ;\n            } else if (left != null) {\n                replaceInParent(node, left);\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n            } else if (right != null) {\n                replaceInParent(node, right);\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n            } else {\n                replaceInParent(node, null);\n            }\n            rebalance(originalParent, false);\n            (int)--;\n            (int)++;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"node"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1}],"header":{"groupId":"com.google.code.gson","transformationCount":100,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
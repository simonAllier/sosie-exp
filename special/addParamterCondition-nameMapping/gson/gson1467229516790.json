{"failureDictionary":{"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":121,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":12,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":56,"com.google.gson.functional.MapTest.testComplexKeysSerialization":87,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":99,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":118,"com.google.gson.MixedStreamTest.testWriteLenient":73,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":30,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":107,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":125,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":25,"com.google.gson.internal.LinkedTreeMapTest.testEmptyStringValues":54,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":79,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":144,"com.google.gson.internal.LinkedTreeMapTest.testPutOverrides":51,"com.google.gson.internal.LinkedTreeMapTest.testRemoveRootDoesNotDoubleUnlink":75,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":100,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":127,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":31,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":5,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":114,"com.google.gson.JsonObjectTest.testAddingNullPropertyValue":43,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":45,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":57,"com.google.gson.functional.MapTest.testStringKeyDeserialization":11,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":29,"com.google.gson.JsonParserTest.testParseReader":38,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":68,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":92,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":67,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":72,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":85,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":105,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":133,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":46,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":40,"com.google.gson.ObjectTypeAdapterTest.testSerialize":150,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":60,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":35,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":95,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":26,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":111,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":76,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":86,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":83,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":23,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":9,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":14,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":58,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":18,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":20,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":13,"com.google.gson.JsonObjectTest.testEqualsNonEmptyObject":44,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":140,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":70,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":113,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":141,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":0,"com.google.gson.internal.LinkedTreeMapTest.testLargeSetOfRandomKeys":52,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":77,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":110,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":80,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":2,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":123,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":36,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":62,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":130,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":134,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":147,"com.google.gson.ObjectTypeAdapterTest.testDeserializeNullValue":49,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":81,"com.google.gson.internal.LinkedTreeMapTest.testContainsNonComparableKeyReturnsFalse":53,"com.google.gson.JsonObjectTest.testDeepCopy":47,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":27,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":21,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":129,"com.google.gson.JsonParserTest.testParseString":39,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":98,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":96,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":71,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":120,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":8,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":37,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":61,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":4,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":63,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":33,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":16,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":65,"com.google.gson.JsonObjectTest.testAddingStringProperties":48,"com.google.gson.internal.LinkedTreeMapTest.testEqualsAndHashCode":55,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":142,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":24,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":89,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":3,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":128,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":15,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":137,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":124,"com.google.gson.JsonObjectTest.testReadPropertyWithEmptyStringName":41,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":19,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":149,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":138,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":10,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":90,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":119,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":94,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":116,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":69,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":112,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":139,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":28,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":1,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":22,"com.google.gson.functional.CollectionTest.testSetSerialization":146,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":97,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":88,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":108,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":6,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":74,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":143,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":126,"com.google.gson.functional.CollectionTest.testSetDeserialization":145,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":115,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":135,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":66,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":131,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":59,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":64,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":109,"com.google.gson.functional.MapTest.testMapDeserialization":7,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":148,"com.google.gson.ObjectTypeAdapterTest.testDeserialize":50,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":122,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":42,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":82,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":106,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":78,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":104,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeMap":34,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":101,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":102,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":103,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":117,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":84,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":32,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":132,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":93,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":136,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":17,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":91},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[0],"tindex":"01096b20-3e32-11e6-8a5c-0f981aad24c0","method":{"position":"com.google.gson.Gson:133","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src) {\n    if (src == null) {\n        {\n            if (src == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142548/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return toJsonTree(src);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142548/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:154","type":"CtUnaryOperatorImpl","sourcecode":"!create"},"failures":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55],"tindex":"0109b941-3e32-11e6-8a5c-8d33149781b6","method":{"position":"com.google.gson.internal.LinkedTreeMap:121","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedTreeMap.Node<K, V> find(K key, boolean create) {\n    if (!create) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142548/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.util.Comparator<? super K> java.util.Comparator<? super K> = com.google.gson.internal.LinkedTreeMap.this.java.util.Comparator<? super K>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            int int = 0;\n            if (nearest != null) {\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                java.lang.Comparable<java.lang.Object> java.lang.Comparable<java.lang.Object> = comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>) ? ((java.lang.Comparable<java.lang.Object>)(key)) : null;\n                while (true) {\n                    comparison = comparableKey != null ? comparableKey.compareTo(nearest.K) : comparator.compare(key, nearest.K);\n                    if (comparison == 0) {\n                        return nearest;\n                    } \n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = comparison < 0 ? nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> : nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    if (child == null) {\n                        break;\n                    } \n                    nearest = child;\n                }\n            } \n            if (!create) {\n                return null;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.this.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            if (nearest == null) {\n                if ((comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>)) && (!(key instanceof java.lang.Comparable))) {\n                    throw new java.lang.ClassCastException(((key.getClass().getName()) + \" is not Comparable\"));\n                } \n                created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n            } else {\n                created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                if (comparison < 0) {\n                    nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                } else {\n                    nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                }\n                rebalance(nearest, true);\n            }\n            (int)++;\n            (int)++;\n            return created;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"create":"create"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl","sourcecode":"in == null"},"failures":[],"tindex":"0109e052-3e32-11e6-8a5c-3114fcba500f","method":{"position":"com.google.gson.TypeAdapter:254","type":"CtMethodImpl","sourcecode":"public final T fromJson(java.io.Reader in) throws java.io.IOException {\n    if (in == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142548/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(in);\n            return read(reader);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73],"tindex":"010a0763-3e32-11e6-8a5c-2d5d5807e89a","method":{"position":"com.google.gson.Gson:261","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    double double = value.doubleValue();\n                    checkValidFloatingPoint(doubleValue);\n                    out.value(value);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142548/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142548/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[0],"tindex":"010a0764-3e32-11e6-8a5c-951b95f0133b","method":{"position":"com.google.gson.Gson:468","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142548/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src == null) {\n                return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            return toJsonTree(src, src.getClass());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:384","type":"CtVariableReadImpl","sourcecode":"insert"},"failures":[74],"tindex":"010a2e75-3e32-11e6-8a5c-e330ff5371f6","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:338","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (insert) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142548/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            for (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) {\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                int int = left != null ? left.int : 0;\n                int int = right != null ? right.int : 0;\n                int int = leftHeight - rightHeight;\n                if (delta == (-2)) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    int int = rightRight != null ? rightRight.int : 0;\n                    int int = rightLeft != null ? rightLeft.int : 0;\n                    int int = rightLeftHeight - rightRightHeight;\n                    if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                        rotateLeft(node);\n                    } else {\n                        assert rightDelta == 1;\n                        rotateRight(right);\n                        rotateLeft(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 2) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    int int = leftRight != null ? leftRight.int : 0;\n                    int int = leftLeft != null ? leftLeft.int : 0;\n                    int int = leftLeftHeight - leftRightHeight;\n                    if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                        rotateRight(node);\n                    } else {\n                        assert leftDelta == (-1);\n                        rotateLeft(left);\n                        rotateRight(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 0) {\n                    node.int = leftHeight + 1;\n                    if (insert) {\n                        break;\n                    } \n                } else {\n                    assert (delta == (-1)) || (delta == 1);\n                    node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                    if (!insert) {\n                        break;\n                    } \n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"insert"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"010a7c96-3e32-11e6-8a5c-db33eb22253c","method":{"position":"com.google.gson.JsonParser:44","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement parse(java.lang.String json) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142548/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            return parse(new java.io.StringReader(json));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:85","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[],"tindex":"010a7c97-3e32-11e6-8a5c-291ab4f91f09","method":{"position":"com.google.gson.internal.$Gson$Types:411","type":"CtMethodImpl","sourcecode":"private static int indexOf(java.lang.Object[] array, java.lang.Object toFind) {\n    for (int int = 0 ; i < (array.int) ; i++) {\n        if (toFind.equals(array[i])) {\n            return i;\n        } \n    }\n    throw new java.util.NoSuchElementException();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"toFind"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"010a7c98-3e32-11e6-8a5c-15abdcdc10a7","method":{"position":"com.google.gson.Gson:261","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    double double = value.doubleValue();\n                    checkValidFloatingPoint(doubleValue);\n                    out.value(value);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142548/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142548/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"010aa3a9-3e32-11e6-8a5c-e77970bd61fa","method":{"position":"com.google.gson.stream.JsonWriter:532","type":"CtMethodImpl","sourcecode":"private void string(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142548/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            java.lang.String[] java.lang.String[] = boolean ? com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[] : com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[];\n            java.io.Writer.write(\"\\\"\");\n            int int = 0;\n            int int = value.length();\n            for (int int = 0 ; i < length ; i++) {\n                char char = value.charAt(i);\n                java.lang.String java.lang.String;\n                if (c < 128) {\n                    replacement = replacements[c];\n                    if (replacement == null) {\n                        continue;\n                    } \n                } else if (c == '\\u2028') {\n                    replacement = \"\\\\u2028\";\n                } else if (c == '\\u2029') {\n                    replacement = \"\\\\u2029\";\n                } else {\n                    continue;\n                }\n                if (last < i) {\n                    java.io.Writer.write(value, last, (i - last));\n                } \n                java.io.Writer.write(replacement);\n                last = i + 1;\n            }\n            if (last < length) {\n                java.io.Writer.write(value, last, (length - last));\n            } \n            java.io.Writer.write(\"\\\"\");\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"010aa3aa-3e32-11e6-8a5c-d508b1c8c15e","method":{"position":"com.google.gson.internal.bind.TypeAdapters:282","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142548/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"010acabb-3e32-11e6-8a5c-6d6556c04115","method":{"position":"com.google.gson.Gson:591","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142548/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = getAdapter(com.google.gson.reflect.TypeToken.get(typeOfSrc));\n            boolean boolean = writer.isLenient();\n            writer.setLenient(true);\n            boolean boolean = writer.isHtmlSafe();\n            writer.setHtmlSafe(boolean);\n            boolean boolean = writer.getSerializeNulls();\n            writer.setSerializeNulls(boolean);\n            try {\n                ((com.google.gson.TypeAdapter<java.lang.Object>)(adapter)).write(writer, src);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            } finally {\n                writer.setLenient(oldLenient);\n                writer.setHtmlSafe(oldHtmlSafe);\n                writer.setSerializeNulls(oldSerializeNulls);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"010b18dc-3e32-11e6-8a5c-2bef759060b3","method":{"position":"com.google.gson.internal.bind.TypeAdapters:297","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142548/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"010b18dd-3e32-11e6-8a5c-79d073844df3","method":{"position":"com.google.gson.Gson:510","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142548/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src == null) {\n                return toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull);\n            } \n            return toJson(src, src.getClass());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"010b18de-3e32-11e6-8a5c-49dfe5016bb7","method":{"position":"com.google.gson.DefaultDateTypeAdapter:77","type":"CtMethodImpl","sourcecode":"public java.util.Date deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT, com.google.gson.JsonDeserializationContext context) throws com.google.gson.JsonParseException {\n    if (json == null) {\n        {\n            if (!(json instanceof com.google.gson.JsonPrimitive)) {\n                throw new com.google.gson.JsonParseException(\"The date should be a string value\");\n            } \n            java.util.Date java.util.Date = deserializeToDate(json);\n            if (typeOfT == (java.util.Date.java.util.Date.java.lang.Class)) {\n                return date;\n            } else if (typeOfT == (java.sql.Timestamp.java.sql.Timestamp.java.lang.Class)) {\n                return new java.sql.Timestamp(date.getTime());\n            } else if (typeOfT == (java.sql.Date.java.sql.Date.java.lang.Class)) {\n                return new java.sql.Date(date.getTime());\n            } else {\n                throw new java.lang.IllegalArgumentException((((getClass()) + \" cannot deserialize to \") + typeOfT));\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142548/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:287","type":"CtBinaryOperatorImpl","sourcecode":"replacement != null"},"failures":[29,45,75],"tindex":"010b3fef-3e32-11e6-8a5c-6d8e57a17b99","method":{"position":"com.google.gson.internal.LinkedTreeMap:284","type":"CtMethodImpl","sourcecode":"private void replaceInParent(com.google.gson.internal.LinkedTreeMap.Node<K, V> node, com.google.gson.internal.LinkedTreeMap.Node<K, V> replacement) {\n    if (replacement != null) {\n        {\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n            if (replacement != null) {\n                replacement.com.google.gson.internal.LinkedTreeMap.Node<K, V> = parent;\n            } \n            if (parent != null) {\n                if ((parent.com.google.gson.internal.LinkedTreeMap.Node<K, V>) == node) {\n                    parent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                } else {\n                    assert (parent.com.google.gson.internal.LinkedTreeMap.Node<K, V>) == node;\n                    parent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                }\n            } else {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142548/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"replacement":"replacement"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:85","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[76,77,78,79,80,81,82,83,84],"tindex":"010b3ff0-3e32-11e6-8a5c-a58eb8eb7da7","method":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:84","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Object array) throws java.io.IOException {\n    if (array == null) {\n        {\n            if (array == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142548/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (array == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    out.beginArray();\n                    for (int int = 0, int int = java.lang.reflect.Array.getLength(array) ; i < length ; i++) {\n                        E E = ((E)(java.lang.reflect.Array.get(array, i)));\n                        com.google.gson.TypeAdapter<E>.write(out, value);\n                    }\n                    out.endArray();\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142548/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:132","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.GenericArrayType"},"failures":[85,86,87,56,57,88,89,58,90,91,92,93,94,95,96,97,98,99,100,101,13,102,16,103,18,104,105,106,20,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,25,26,27,28,135,136,137,138,31,32,139,140,141,142,143,144,145,146,147,148,149,150],"tindex":"010b6701-3e32-11e6-8a5c-afc09d5fd685","method":{"position":"com.google.gson.internal.ConstructorConstructor:200","type":"CtMethodImpl","sourcecode":"private <T>com.google.gson.internal.ObjectConstructor<T> newUnsafeAllocator(final java.lang.reflect.Type type, final java.lang.Class<? super T> rawType) {\n    if (type instanceof java.lang.reflect.GenericArrayType) {\n        {\n            return new com.google.gson.internal.ObjectConstructor<T>() {\n                private final com.google.gson.internal.UnsafeAllocator unsafeAllocator = com.google.gson.internal.UnsafeAllocator.create();\n\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                public T construct() {\n                    try {\n                        java.lang.Object java.lang.Object = com.google.gson.internal.UnsafeAllocator.newInstance(rawType);\n                        return ((T)(newInstance));\n                    } catch (java.lang.Exception e) {\n                        throw new java.lang.RuntimeException((((\"Unable to invoke no-args constructor for \" + type) + \". \") + \"Register an InstanceCreator with Gson for this type may fix this problem.\") , e);\n                    }\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142548/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:198","type":"CtBinaryOperatorImpl","sourcecode":"out == null"},"failures":[],"tindex":"010b8e12-3e32-11e6-8a5c-3b540b56e5ca","method":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:84","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Object array) throws java.io.IOException {\n    if (array == null) {\n        {\n            if (array == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142548/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (array == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    out.beginArray();\n                    for (int int = 0, int int = java.lang.reflect.Array.getLength(array) ; i < length ; i++) {\n                        E E = ((E)(java.lang.reflect.Array.get(array, i)));\n                        com.google.gson.TypeAdapter<E>.write(out, value);\n                    }\n                    out.endArray();\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142548/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"array"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"010b8e13-3e32-11e6-8a5c-45d55c30a2cd","method":{"position":"com.google.gson.Gson:719","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.lang.String json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            if (json == null) {\n                return null;\n            } \n            java.io.StringReader java.io.StringReader = new java.io.StringReader(json);\n            T T = ((T)(fromJson(reader, typeOfT)));\n            return target;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142548/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1527","type":"CtBinaryOperatorImpl","sourcecode":"(c >= '0') && (c <= '9')"},"failures":[],"tindex":"010b8e14-3e32-11e6-8a5c-e5ebbb2a0f62","method":{"position":"com.google.gson.stream.JsonReader:755","type":"CtMethodImpl","sourcecode":"private boolean isLiteral(char c) throws java.io.IOException {\n    if ((c >= '0') && (c <= '9')) {\n        {\n            switch (c) {\n                case '/' :\n                case '\\\\' :\n                case ';' :\n                case '#' :\n                case '=' :\n                    checkLenient();\n                case '{' :\n                case '}' :\n                case '[' :\n                case ']' :\n                case ':' :\n                case ',' :\n                case ' ' :\n                case '\\t' :\n                case '\\f' :\n                case '\\r' :\n                case '\\n' :\n                    return false;\n                default :\n                    return true;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142548/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"c"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"010b8e15-3e32-11e6-8a5c-3914162689b3","method":{"position":"com.google.gson.Gson:133","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src) {\n    if (src == null) {\n        {\n            if (src == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142548/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return toJsonTree(src);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142548/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":22,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
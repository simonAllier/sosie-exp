{"failureDictionary":{"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":33,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":112,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":140,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":15,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":206,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":284,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":207,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":95,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":310,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":258,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":75,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":169,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":272,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":237,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":192,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":241,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":22,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":279,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":118,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":215,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":217,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":19,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":190,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":224,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":289,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":252,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":176,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":226,"com.google.gson.functional.ObjectTest.testSingletonLists":188,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":154,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":312,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":213,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":278,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":319,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":197,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":7,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":105,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":302,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":246,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":247,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":135,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":305,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":96,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":138,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":26,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":221,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":232,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":306,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":251,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":88,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":11,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":73,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":87,"com.google.gson.functional.EnumTest.testEnumCaseMapping":27,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":4,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":262,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":143,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":103,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":285,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":108,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":170,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":270,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":52,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":155,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":177,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":2,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":255,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":256,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":182,"com.google.gson.functional.MapTest.testGeneralMapField":91,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":193,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":41,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":228,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":56,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":233,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":293,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":280,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":3,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":115,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":267,"com.google.gson.MixedStreamTest.testReadMixedStreamed":318,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":71,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":296,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":201,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":160,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":271,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":13,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":261,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":287,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":116,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":74,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":265,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":167,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":85,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":137,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":164,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":79,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":48,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":178,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":202,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":309,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":274,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":152,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":84,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":249,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":239,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":263,"com.google.gson.functional.ObjectTest.testNestedDeserialization":205,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":315,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":298,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":97,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":94,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":98,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":72,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":168,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":240,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":147,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":42,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":18,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":1,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":157,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":125,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":171,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":101,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":122,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":300,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":211,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":136,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":184,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":277,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":90,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":153,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":53,"com.google.gson.functional.MapTest.testInterfaceTypeMap":89,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":264,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":295,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":235,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":102,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":290,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":24,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":111,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":128,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":299,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":70,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":198,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":10,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":127,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":266,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":68,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":220,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":320,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":129,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":276,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":150,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":214,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":260,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":107,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":194,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":219,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":180,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":55,"com.google.gson.functional.MapTest.testSerializeMaps":81,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":244,"com.google.gson.functional.MapTest.testComplexKeysSerialization":92,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":250,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":222,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":275,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":62,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":65,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":28,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":25,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":230,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":259,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":38,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":231,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":149,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":162,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":141,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":282,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":83,"com.google.gson.functional.MapTest.testStringKeyDeserialization":93,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":59,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":117,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":304,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":174,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":216,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":316,"com.google.gson.functional.PrettyPrintingTest.testMap":139,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":234,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":110,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":199,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":218,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":6,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":61,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":185,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":14,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":43,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":212,"com.google.gson.ObjectTypeAdapterTest.testSerialize":17,"com.google.gson.functional.MapTest.testMapOfMapSerialization":86,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":163,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":113,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":119,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":32,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":165,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":313,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":208,"com.google.gson.functional.FieldNamingTest.testIdentity":245,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":54,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":242,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":9,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":130,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":210,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":301,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":64,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":203,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":268,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":37,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":120,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":187,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":297,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":314,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":12,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":109,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":292,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":34,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":288,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":254,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":31,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":123,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":204,"com.google.gson.functional.MapTest.testMapSubclassSerialization":80,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":173,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":145,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":20,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":133,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":166,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":60,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":317,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":126,"com.google.gson.functional.EnumTest.testEnumSubclass":23,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":269,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":8,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":196,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":291,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":121,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":223,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":46,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":303,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":39,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":124,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":281,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":66,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":21,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":36,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":35,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":132,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":99,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":311,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":51,"com.google.gson.functional.ObjectTest.testNestedSerialization":200,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":114,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":158,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":151,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":183,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":134,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":189,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":78,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":50,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":238,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":44,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":195,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":175,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":229,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":191,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":308,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":104,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":57,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":148,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":179,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":5,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":209,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":248,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":286,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":172,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":283,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":49,"com.google.gson.ObjectTypeAdapterTest.testSerializeObject":16,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":181,"com.google.gson.functional.CollectionTest.testSetSerialization":225,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":294,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":142,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":307,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":186,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":0,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":29,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":40,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":156,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":63,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":146,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":159,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":30,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":58,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":161,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":273,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":47,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":243,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":144,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":227,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":77,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":82,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":106,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":257,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":67,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":253,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":76,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":69,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":131,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":236,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":100,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":45},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:92","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"55ab69af-3f41-11e6-8f8f-6d9ce649ddc0","method":{"position":"com.google.gson.internal.$Gson$Types:213","type":"CtMethodImpl","sourcecode":"private static int hashCodeOrZero(java.lang.Object o) {\n    return o != null ? o.hashCode() : 0;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:462","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"55ac05f0-3f41-11e6-8f8f-69e0cad3ff78","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:162","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(double value) throws java.io.IOException {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        {\n            if ((!(isLenient())) && ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value)))) {\n                throw new java.lang.IllegalArgumentException((\"JSON forbids NaN and infinities: \" + value));\n            } \n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467345690696/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:120","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"55ac05f1-3f41-11e6-8f8f-eb217448d769","method":{"position":"com.google.gson.internal.LinkedTreeMap:481","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"rawtypes\")\n@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonNull) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467345690696/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof java.util.Map.Entry) {\n                java.util.Map.Entry java.util.Map.Entry = ((java.util.Map.Entry)(o));\n                return ((K) == null ? (other.getKey()) == null : K.equals(other.getKey())) && ((V) == null ? (other.getValue()) == null : V.equals(other.getValue()));\n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:127","type":"CtInvocationImpl"},"failures":[0,1,2,3],"tindex":"55ac2d02-3f41-11e6-8f8f-99249d018b54","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:125","type":"CtMethodImpl","sourcecode":"private java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> getBoundFields(com.google.gson.Gson context, com.google.gson.reflect.TypeToken<?> type, java.lang.Class<?> raw) {\n    if (raw.isInterface()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467345690696/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> = new java.util.LinkedHashMap<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField>();\n            if (raw.isInterface()) {\n                return result;\n            } \n            java.lang.reflect.Type java.lang.reflect.Type = type.getType();\n            while (raw != (java.lang.Object.java.lang.Object.java.lang.Class)) {\n                java.lang.reflect.Field[] java.lang.reflect.Field[] = raw.getDeclaredFields();\n                for (java.lang.reflect.Field java.lang.reflect.Field : fields) {\n                    boolean boolean = excludeField(field, true);\n                    boolean boolean = excludeField(field, false);\n                    if ((!serialize) && (!deserialize)) {\n                        continue;\n                    } \n                    field.setAccessible(true);\n                    java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, field.getGenericType());\n                    com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = createBoundField(context, field, getFieldName(field), com.google.gson.reflect.TypeToken.get(fieldType), serialize, deserialize);\n                    com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = result.put(boundField.java.lang.String, boundField);\n                    if (previous != null) {\n                        throw new java.lang.IllegalArgumentException(((declaredType + \" declares multiple JSON fields named \") + (previous.java.lang.String)));\n                    } \n                }\n                type = com.google.gson.reflect.TypeToken.get(com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, raw.getGenericSuperclass()));\n                raw = type.getRawType();\n            }\n            return result;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"raw"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:105","type":"CtBinaryOperatorImpl"},"failures":[4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319],"tindex":"55ac5413-3f41-11e6-8f8f-eb72ffa265aa","method":{"position":"com.google.gson.reflect.TypeToken:283","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic final boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonObject) {\n        {\n            return (o instanceof com.google.gson.reflect.TypeToken<?>) && (com.google.gson.internal.$Gson$Types.equals(java.lang.reflect.Type, ((com.google.gson.reflect.TypeToken<?>)(o)).java.lang.reflect.Type));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467345690696/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[4,320],"tindex":"55ac7b24-3f41-11e6-8f8f-2924d25be01a","method":{"position":"com.google.gson.Gson:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            out.value(value.toString());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467345690696/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"55aca235-3f41-11e6-8f8f-8912e9e01d35","method":{"position":"com.google.gson.JsonParser:44","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement parse(java.lang.String json) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467345690696/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            return parse(new java.io.StringReader(json));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1435","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"55aca236-3f41-11e6-8f8f-6bf6af03dbbd","method":{"position":"com.google.gson.stream.JsonReader:755","type":"CtMethodImpl","sourcecode":"private boolean isLiteral(char c) throws java.io.IOException {\n    if (c == '\\n') {\n        {\n            switch (c) {\n                case '/' :\n                case '\\\\' :\n                case ';' :\n                case '#' :\n                case '=' :\n                    checkLenient();\n                case '{' :\n                case '}' :\n                case '[' :\n                case ']' :\n                case ':' :\n                case ',' :\n                case ' ' :\n                case '\\t' :\n                case '\\f' :\n                case '\\r' :\n                case '\\n' :\n                    return false;\n                default :\n                    return true;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467345690696/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"c"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:455","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"55acc947-3f41-11e6-8f8f-512188f695a7","method":{"position":"com.google.gson.GsonBuilder:493","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\npublic com.google.gson.GsonBuilder registerTypeHierarchyAdapter(java.lang.Class<?> baseType, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467345690696/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467345690696/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    com.google.gson.internal.$Gson$Preconditions.checkArgument((((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) || (typeAdapter instanceof com.google.gson.TypeAdapter<?>)));\n                    if ((typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)) {\n                        java.util.List<com.google.gson.TypeAdapterFactory>.add(0, com.google.gson.TreeTypeAdapter.newTypeHierarchyFactory(baseType, typeAdapter));\n                    } \n                    if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                        java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.internal.bind.TypeAdapters.newTypeHierarchyFactory(baseType, ((com.google.gson.TypeAdapter)(typeAdapter))));\n                    } \n                    return com.google.gson.GsonBuilder.this;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:459","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"55acc948-3f41-11e6-8f8f-65ab19b918f4","method":{"position":"com.google.gson.GsonBuilder:493","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\npublic com.google.gson.GsonBuilder registerTypeHierarchyAdapter(java.lang.Class<?> baseType, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467345690696/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467345690696/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    com.google.gson.internal.$Gson$Preconditions.checkArgument((((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) || (typeAdapter instanceof com.google.gson.TypeAdapter<?>)));\n                    if ((typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)) {\n                        java.util.List<com.google.gson.TypeAdapterFactory>.add(0, com.google.gson.TreeTypeAdapter.newTypeHierarchyFactory(baseType, typeAdapter));\n                    } \n                    if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                        java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.internal.bind.TypeAdapters.newTypeHierarchyFactory(baseType, ((com.google.gson.TypeAdapter)(typeAdapter))));\n                    } \n                    return com.google.gson.GsonBuilder.this;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"55acf059-3f41-11e6-8f8f-5f7b1fa0f795","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:101","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nvoid read(com.google.gson.stream.JsonReader reader, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467345690696/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    } else {\n        {\n            java.lang.Object java.lang.Object = com.google.gson.TypeAdapter<?>.read(reader);\n            if ((fieldValue != null) || (!isPrimitive)) {\n                field.set(value, fieldValue);\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:105","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"55ad176a-3f41-11e6-8f8f-9d9926f8a475","method":{"position":"com.google.gson.internal.LinkedTreeMap:605","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467345690696/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return containsKey(o);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:103","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"55ad176b-3f41-11e6-8f8f-d544db50a629","method":{"position":"com.google.gson.internal.Primitives:79","type":"CtMethodImpl","sourcecode":"public static boolean isWrapperType(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.GenericArrayType) {\n        {\n            return com.google.gson.internal.Primitives.com.google.gson.internal.Primitives.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.containsKey(com.google.gson.internal.$Gson$Preconditions.checkNotNull(type));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467345690696/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:188","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"55ad176c-3f41-11e6-8f8f-b72c86d256cb","method":{"position":"com.google.gson.reflect.TypeToken:160","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.GenericArrayType to) {\n    if (from == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467345690696/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.reflect.Type java.lang.reflect.Type = to.getGenericComponentType();\n            if (toGenericComponentType instanceof java.lang.reflect.ParameterizedType) {\n                java.lang.reflect.Type java.lang.reflect.Type = from;\n                if (from instanceof java.lang.reflect.GenericArrayType) {\n                    t = ((java.lang.reflect.GenericArrayType)(from)).getGenericComponentType();\n                } else if (from instanceof java.lang.Class<?>) {\n                    java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(from));\n                    while (classType.isArray()) {\n                        classType = classType.getComponentType();\n                    }\n                    t = classType;\n                } \n                return com.google.gson.reflect.TypeToken.isAssignableFrom(t, ((java.lang.reflect.ParameterizedType)(toGenericComponentType)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n            } \n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:103","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"55ad3e7d-3f41-11e6-8f8f-d7a1a79571fc","method":{"position":"com.google.gson.reflect.TypeToken:295","type":"CtMethodImpl","sourcecode":"public static com.google.gson.reflect.TypeToken<?> get(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.GenericArrayType) {\n        {\n            return new com.google.gson.reflect.TypeToken<java.lang.Object>(type);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467345690696/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:79","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"55ad3e7e-3f41-11e6-8f8f-79761aa85487","method":{"position":"com.google.gson.Gson:871","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n        {\n            if (json == null) {\n                return null;\n            } \n            return ((T)(fromJson(new com.google.gson.internal.bind.JsonTreeReader(json), typeOfT)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467345690696/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":16,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
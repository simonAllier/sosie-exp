{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":19,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":210,"com.google.gson.functional.StringTest.testStringValueDeserialization":461,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":70,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":548,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":404,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":521,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":121,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":372,"com.google.gson.MixedStreamTest.testWriteLenient":119,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":453,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":349,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":182,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":97,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":79,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":87,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":348,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":553,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":136,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":288,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":53,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":528,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":332,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":584,"com.google.gson.functional.ObjectTest.testSingletonLists":42,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":137,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":180,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":211,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":516,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":108,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":327,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":167,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":483,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":413,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":360,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":618,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":555,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":594,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":469,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":10,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":190,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":549,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":435,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":294,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":510,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":147,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":434,"com.google.gson.functional.EnumTest.testEnumCaseMapping":593,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":209,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":615,"com.google.gson.functional.JsonTreeTest.testToJsonTree":14,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":509,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":192,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":109,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":313,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":337,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":392,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":37,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":498,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":401,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":517,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":8,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":475,"com.google.gson.functional.ObjectTest.testNullDeserialization":366,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":152,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":467,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":356,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":276,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":621,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":522,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":160,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":145,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":96,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":363,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":620,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":51,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":189,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":383,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":207,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":563,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":562,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":412,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":38,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":114,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":267,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":391,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":567,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":163,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":247,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":179,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":536,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":429,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":454,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":546,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":202,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":400,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":18,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":320,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":69,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":115,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":460,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":547,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":47,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":243,"com.google.gson.JsonPrimitiveTest.testEqualsAcrossTypes":112,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":238,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":299,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":352,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":125,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":259,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":439,"com.google.gson.metrics.PerformanceTest.testDummy":614,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":340,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":308,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":135,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":319,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":322,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":373,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":444,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":181,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":492,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":175,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":316,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":95,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":346,"com.google.gson.functional.CollectionTest.testSetDeserialization":479,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":54,"com.google.gson.functional.EnumTest.testEnumSet":102,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":158,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":487,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":539,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":331,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":321,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithNestedWildcards":0,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":396,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":425,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":45,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":30,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":600,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":550,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":318,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":556,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":142,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":380,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":274,"com.google.gson.functional.MapTest.testHashMapDeserialization":420,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":519,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":473,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":408,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":239,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":579,"com.google.gson.MixedStreamTest.testReadNulls":609,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":195,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":281,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":16,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":378,"com.google.gson.functional.MapTest.testSortedMap":437,"com.google.gson.functional.MapTest.testMapSerialization":433,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":578,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":490,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":544,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":500,"com.google.gson.functional.MapTest.testSerializeMaps":59,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":223,"com.google.gson.functional.MapTest.testComplexKeysSerialization":440,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":486,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":443,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":253,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":154,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":592,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":101,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":451,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":375,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":591,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":57,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":122,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":365,"com.google.gson.functional.MapTest.testStringKeyDeserialization":442,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithBasicWildcards":2,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":502,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":129,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":117,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":445,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":525,"com.google.gson.functional.PrettyPrintingTest.testMap":55,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":229,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":520,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":82,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":170,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":282,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":376,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":503,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":617,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":215,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":462,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":48,"com.google.gson.functional.MapTest.testMapSerializationEmpty":441,"com.google.gson.functional.CollectionTest.testQueueSerialization":474,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":622,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":540,"com.google.gson.functional.MapTest.testMapOfMapSerialization":62,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":265,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":402,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":477,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":78,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":113,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":328,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictBoxedNansAndInfinities":20,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":212,"com.google.gson.functional.FieldNamingTest.testIdentity":224,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":323,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":138,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":367,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":13,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":41,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":124,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":574,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":511,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":295,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":120,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":213,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":268,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":446,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":411,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":298,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":398,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":77,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":173,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":414,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":417,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":278,"com.google.gson.functional.MapTest.testMapSubclassSerialization":422,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":71,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":336,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":488,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":231,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":289,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":534,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":606,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":387,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":455,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":572,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":374,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":29,"com.google.gson.functional.EnumTest.testEnumSubclass":105,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":270,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":359,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":619,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":255,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":94,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":552,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":128,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":448,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":512,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":194,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":537,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":447,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":21,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":297,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":497,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":355,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":541,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":266,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":305,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":185,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":347,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":419,"com.google.gson.MixedStreamTest.testWriteNulls":607,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":93,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":458,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":245,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":153,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":330,"com.google.gson.CommentsTest.testParseComments":602,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":26,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":43,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":586,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":91,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":501,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":551,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":489,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":63,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":214,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":342,"com.google.gson.MixedStreamTest.testReadInvalidState":604,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":50,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":334,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":186,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":277,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":225,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":258,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":504,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithTypeParameters":1,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":89,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":262,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":76,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":275,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":403,"com.google.gson.functional.MapTest.testMapDeserialization":428,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":496,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":174,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":58,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":418,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":583,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":126,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":427,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":100,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":283,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":452,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":12,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":590,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":385,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":159,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":164,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":197,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":232,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":307,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":171,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":333,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":193,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":203,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":56,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":436,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":188,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":508,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":326,"com.google.gson.functional.PrimitiveTest.testShortSerialization":561,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":285,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":554,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":149,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":535,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":272,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":397,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":518,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":220,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":104,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":81,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":204,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":423,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":531,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":279,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":484,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":456,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":410,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":589,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":613,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":570,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":566,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":35,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":123,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":3,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":312,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":324,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":168,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":290,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":558,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":314,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":130,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":538,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":370,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":351,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":106,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":199,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":219,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":85,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":393,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":227,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":325,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":98,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":178,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":284,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":524,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":17,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":172,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":286,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":406,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":23,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":471,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":513,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":559,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":269,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":118,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":235,"com.google.gson.JsonPrimitiveTest.testEquals":111,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":99,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":103,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":582,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":491,"com.google.gson.functional.MapTest.testGeneralMapField":67,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":350,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":242,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":569,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":228,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":250,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":254,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":49,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":65,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":206,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":257,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":382,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":273,"com.google.gson.MixedStreamTest.testReadMixedStreamed":612,"com.google.gson.ObjectTypeAdapterTest.testDeserializeNullValue":623,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":263,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":394,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":430,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":296,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":480,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":506,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":339,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":542,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":148,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":317,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":177,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":431,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":218,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":421,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":132,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":280,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":39,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":292,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":532,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":176,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":459,"com.google.gson.JsonPrimitiveTest.testEqualsDoesNotEquateStringAndNonStringTypes":110,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":139,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":381,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":476,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":588,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":329,"com.google.gson.functional.ObjectTest.testNestedDeserialization":371,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":162,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":341,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":580,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":306,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":146,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":568,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":234,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":303,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":432,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":463,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":28,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":116,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":198,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":457,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":576,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":482,"com.google.gson.functional.ObjectTest.testNullSerialization":357,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":201,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":470,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":424,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":66,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":256,"com.google.gson.functional.MapTest.testInterfaceTypeMap":64,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":499,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":230,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":309,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":514,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":34,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":287,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":233,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":450,"com.google.gson.MixedStreamTest.testReadClosed":605,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":169,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":144,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":526,"com.google.gson.MixedStreamTest.testWriteClosed":611,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":84,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":581,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":156,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":311,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":415,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":31,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":22,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":15,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":90,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":165,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":187,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":127,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":157,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":83,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":596,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":545,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":293,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":449,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":86,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":407,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":344,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":74,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":571,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":261,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":11,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":389,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":155,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":240,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":92,"com.google.gson.functional.CollectionTest.testQueueDeserialization":485,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":264,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":543,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":466,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":577,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":7,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":597,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":60,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":364,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":6,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":208,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":369,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":80,"com.google.gson.functional.MapTest.testRawMapSerialization":68,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":603,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":481,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":405,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":36,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":46,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":196,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":493,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":587,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":166,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":244,"com.google.gson.functional.PrimitiveTest.testByteSerialization":560,"com.google.gson.ObjectTypeAdapterTest.testSerialize":107,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":301,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":205,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":523,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":573,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":249,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":221,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":32,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":464,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":599,"com.google.gson.functional.MapTest.testMapWithQuotes":61,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":388,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":529,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":465,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":25,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":505,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":134,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":141,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":564,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":386,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":52,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":585,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":27,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":368,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":416,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":4,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":271,"com.google.gson.functional.ObjectTest.testEmptyStringDeserialization":358,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":252,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":354,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":183,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":390,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":5,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":291,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":575,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":557,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":379,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":478,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":495,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":9,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":184,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":241,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":200,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":140,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":598,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":72,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":377,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":335,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":515,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":133,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":361,"com.google.gson.functional.ObjectTest.testNestedSerialization":161,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":236,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":73,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":260,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":468,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":150,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":438,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":226,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":24,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":300,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":610,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":44,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":343,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":565,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":310,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":338,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":399,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":527,"com.google.gson.GsonBuilderTest.testCreatingMoreThanOnce":601,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":616,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":362,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":384,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":595,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":216,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":248,"com.google.gson.functional.CollectionTest.testSetSerialization":88,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":507,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":131,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":191,"com.google.gson.functional.StringTest.testStringValueSerialization":217,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":40,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":75,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":304,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":472,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":494,"com.google.gson.MixedStreamTest.testWriteInvalidState":608,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":353,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":530,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":251,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":533,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":237,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":395,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":222,"com.google.gson.ObjectTypeAdapterTest.testDeserialize":624,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":151,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":345,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":143,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":33,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":409,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":302,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":426,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":246,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":315},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:578","type":"CtBinaryOperatorImpl","sourcecode":"root == null"},"failures":[],"tindex":"928b0eca-3e88-11e6-bae2-87731a1d0dd4","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:401","type":"CtMethodImpl","sourcecode":"private void rotateLeft(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915482/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (root == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915482/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivotLeft;\n                    if (pivotLeft != null) {\n                        pivotLeft.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n                    } \n                    replaceInParent(root, pivot);\n                    pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n                    root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot;\n                    root.int = (java.lang.Math.max((left != null ? left.int : 0), (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n                    pivot.int = (java.lang.Math.max(root.int, (pivotRight != null ? pivotRight.int : 0))) + 1;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:192","type":"CtInvocationImpl","sourcecode":"to.equals(from)"},"failures":[0,1,2],"tindex":"928b5ceb-3e88-11e6-bae2-81995d580a55","method":{"position":"com.google.gson.reflect.TypeToken:185","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.ParameterizedType to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeVarMap) {\n    if (from.equals(from)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915482/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (from == null) {\n                return false;\n            } \n            if (to.equals(from)) {\n                return true;\n            } \n            java.lang.Class<?> java.lang.Class<?> = com.google.gson.internal.$Gson$Types.getRawType(from);\n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = null;\n            if (from instanceof java.lang.reflect.ParameterizedType) {\n                ptype = ((java.lang.reflect.ParameterizedType)(from));\n            } \n            if (ptype != null) {\n                java.lang.reflect.Type[] java.lang.reflect.Type[] = ptype.getActualTypeArguments();\n                java.lang.reflect.TypeVariable<?>[] java.lang.reflect.TypeVariable<?>[] = clazz.getTypeParameters();\n                for (int int = 0 ; i < (tArgs.int) ; i++) {\n                    java.lang.reflect.Type java.lang.reflect.Type = tArgs[i];\n                    java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = tParams[i];\n                    while (arg instanceof java.lang.reflect.TypeVariable<?>) {\n                        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(arg));\n                        arg = typeVarMap.get(v.getName());\n                    }\n                    typeVarMap.put(var.getName(), arg);\n                }\n                if (com.google.gson.reflect.TypeToken.typeEquals(ptype, to, typeVarMap)) {\n                    return true;\n                } \n            } \n            for (java.lang.reflect.Type java.lang.reflect.Type : clazz.getGenericInterfaces()) {\n                if (com.google.gson.reflect.TypeToken.isAssignableFrom(itype, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap))) {\n                    return true;\n                } \n            }\n            java.lang.reflect.Type java.lang.reflect.Type = clazz.getGenericSuperclass();\n            return com.google.gson.reflect.TypeToken.isAssignableFrom(sType, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from","to":"from"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.DateTypeAdapter:86","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[3,4,5,6,7],"tindex":"928b83fc-3e88-11e6-bae2-9b05406070f0","method":{"position":"com.google.gson.internal.bind.DateTypeAdapter:85","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized void write(com.google.gson.stream.JsonWriter out, java.util.Date value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            java.lang.String java.lang.String = java.text.DateFormat.format(value);\n            out.value(dateFormatAsString);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915482/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[8],"tindex":"928b83fd-3e88-11e6-bae2-bb3b5233fabd","method":{"position":"com.google.gson.Gson:468","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915482/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src == null) {\n                return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            return toJsonTree(src, src.getClass());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:192","type":"CtInvocationImpl","sourcecode":"to.equals(from)"},"failures":[0,1,2],"tindex":"928bab0e-3e88-11e6-bae2-8bd06f811dff","method":{"position":"com.google.gson.reflect.TypeToken:272","type":"CtMethodImpl","sourcecode":"private static boolean matches(java.lang.reflect.Type from, java.lang.reflect.Type to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeMap) {\n    if (from.equals(to)) {\n        {\n            return (to.equals(from)) || ((from instanceof java.lang.reflect.TypeVariable) && (to.equals(typeMap.get(((java.lang.reflect.TypeVariable<?>)(from)).getName()))));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915482/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"to","to":"from"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[9,10,11,12,13,14,15,16,17,18,19,20],"tindex":"928bab0f-3e88-11e6-bae2-b39c96d7b30d","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:175","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            if (!(isLenient())) {\n                double double = value.doubleValue();\n                if ((java.lang.Double.isNaN(d)) || (java.lang.Double.isInfinite(d))) {\n                    throw new java.lang.IllegalArgumentException((\"JSON forbids NaN and infinities: \" + value));\n                } \n            } \n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915482/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:94","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.Class"},"failures":[21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,3,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,15,93,16,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108],"tindex":"928bab10-3e88-11e6-bae2-e967f495c896","method":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:74","type":"CtMethodImpl","sourcecode":"private java.lang.reflect.Type getRuntimeTypeIfMoreSpecific(java.lang.reflect.Type type, java.lang.Object value) {\n    if (type instanceof java.lang.Class) {\n        {\n            if ((value != null) && (((type == (java.lang.Object.java.lang.Object.java.lang.Class)) || (type instanceof java.lang.reflect.TypeVariable<?>)) || (type instanceof java.lang.Class<?>))) {\n                type = value.getClass();\n            } \n            return type;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915482/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:115","type":"CtInvocationImpl","sourcecode":"primitive.isNumber()"},"failures":[109,11,14,110,111,112],"tindex":"928bd221-3e88-11e6-bae2-c7e5be7caf89","method":{"position":"com.google.gson.JsonPrimitive:333","type":"CtMethodImpl","sourcecode":"private static boolean isIntegral(com.google.gson.JsonPrimitive primitive) {\n    if (primitive.isNumber()) {\n        {\n            if ((primitive.java.lang.Object) instanceof java.lang.Number) {\n                java.lang.Number java.lang.Number = ((java.lang.Number)(primitive.java.lang.Object));\n                return ((((number instanceof java.math.BigInteger) || (number instanceof java.lang.Long)) || (number instanceof java.lang.Integer)) || (number instanceof java.lang.Short)) || (number instanceof java.lang.Byte);\n            } \n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915482/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"primitive"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:250","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[113,114,115,116,117,118,119],"tindex":"928bd222-3e88-11e6-bae2-0b70bb978f0f","method":{"position":"com.google.gson.Gson:273","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> floatAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915482/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return ((float)(in.nextDouble()));\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    float float = value.floatValue();\n                    checkValidFloatingPoint(floatValue);\n                    out.value(value);\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[],"tindex":"928bf933-3e88-11e6-bae2-abf10ae4f747","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:86","type":"CtMethodImpl","sourcecode":"private com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField createBoundField(final com.google.gson.Gson context, final java.lang.reflect.Field field, final java.lang.String name, final com.google.gson.reflect.TypeToken<?> fieldType, boolean serialize, boolean deserialize) {\n    if (name == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915482/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final boolean boolean = com.google.gson.internal.Primitives.isPrimitive(fieldType.getRawType());\n            return new com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField(name, serialize, deserialize) {\n                final com.google.gson.TypeAdapter<?> typeAdapter = getFieldAdapter(context, field, fieldType);\n\n                @java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n                @java.lang.Override\n                void write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                    java.lang.Object java.lang.Object = field.get(value);\n                    com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n                    t.write(writer, fieldValue);\n                }\n\n                @java.lang.Override\n                void read(com.google.gson.stream.JsonReader reader, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                    java.lang.Object java.lang.Object = com.google.gson.TypeAdapter<?>.read(reader);\n                    if ((fieldValue != null) || (!isPrimitive)) {\n                        field.set(value, fieldValue);\n                    } \n                }\n\n                public boolean writeField(java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                    if (!(boolean))\n                        return false;\n                    \n                    java.lang.Object java.lang.Object = field.get(value);\n                    return fieldValue != value;\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"928c2044-3e88-11e6-bae2-4f010dee5810","method":{"position":"com.google.gson.Gson:719","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.lang.String json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915482/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (json == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915482/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            } else {\n                {\n                    if (json == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915482/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new com.google.gson.JsonSyntaxException();\n                    } else {\n                        {\n                            if (json == null) {\n                                return null;\n                            } \n                            java.io.StringReader java.io.StringReader = new java.io.StringReader(json);\n                            T T = ((T)(fromJson(reader, typeOfT)));\n                            return target;\n                        }\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:137","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonObject"},"failures":[],"tindex":"928c2045-3e88-11e6-bae2-9dfa60af6d7a","method":{"position":"com.google.gson.JsonArray:115","type":"CtMethodImpl","sourcecode":"public boolean contains(com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonArray) {\n        {\n            if (element instanceof com.google.gson.JsonObject) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915482/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return java.util.List<com.google.gson.JsonElement>.contains(element);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915482/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"928c2046-3e88-11e6-bae2-af700ca9c7c5","method":{"position":"com.google.gson.Gson:847","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(com.google.gson.JsonElement json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915482/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[9,120],"tindex":"928c4757-3e88-11e6-bae2-e5e09f7d2d6a","method":{"position":"com.google.gson.Gson:133","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src) {\n    if (src == null) {\n        {\n            return toJsonTree(src);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915482/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[121,122,123,124,125,22,126,127,25,128,129,130,131,26,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,39,151,152,153,154,155,40,41,42,43,156,157,158,44,159,160,45,46,161,162,47,163,164,3,165,166,167,168,169,170,171,4,172,5,6,48,173,174,175,176,177,178,179,180,181,182,49,183,184,185,7,186,187,188,189,12,50,51,52,53,54,190,55,56,57,191,192,58,59,60,61,62,63,64,66,67,68,70,193,194,195,196,197,198,199,200,201,202,203,204,71,205,73,206,207,208,209,210,211,212,213,214,215,216,217,74,75,76,77,78,218,79,80,82,83,84,85,86,87,88,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,89,90,234,91,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,94,120,254,95,96,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,113,270,271,114,115,272,273,274,275,116,276,277,278,117,279,118,280,281,282,98,283,8,99,100,284,285,286,101,102,103,104,105,287,106,288,289,290,291,292,293,294,295,296,297,298,299,300],"tindex":"928c4758-3e88-11e6-bae2-bdebe6318c12","method":{"position":"com.google.gson.Gson:510","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src) {\n    if (src == null) {\n        {\n            if (src == null) {\n                return toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull);\n            } \n            return toJson(src, src.getClass());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915482/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:106","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonArray"},"failures":[],"tindex":"928c4759-3e88-11e6-bae2-cd3384f8c8c9","method":{"position":"com.google.gson.JsonArray:115","type":"CtMethodImpl","sourcecode":"public boolean contains(com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonArray) {\n        {\n            if (element instanceof com.google.gson.JsonObject) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915482/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return java.util.List<com.google.gson.JsonElement>.contains(element);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915482/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[301,302],"tindex":"928c6e6a-3e88-11e6-bae2-c9991b0c3296","method":{"position":"com.google.gson.JsonObject:78","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.String value) {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915482/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            add(property, createJsonElement(value));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"928c6e6b-3e88-11e6-bae2-e98de0b7af07","method":{"position":"com.google.gson.Gson:719","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.lang.String json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915482/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (json == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915482/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            } else {\n                {\n                    if (json == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915482/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new com.google.gson.JsonSyntaxException();\n                    } else {\n                        {\n                            if (json == null) {\n                                return null;\n                            } \n                            java.io.StringReader java.io.StringReader = new java.io.StringReader(json);\n                            T T = ((T)(fromJson(reader, typeOfT)));\n                            return target;\n                        }\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:111","type":"CtInvocationImpl","sourcecode":"primitive.isString()"},"failures":[],"tindex":"928c6e6c-3e88-11e6-bae2-9b2a0c2f5de4","method":{"position":"com.google.gson.JsonPrimitive:93","type":"CtMethodImpl","sourcecode":"void setValue(java.lang.Object primitive) {\n    if (primitive.isString()) {\n        {\n            if (primitive instanceof java.lang.Character) {\n                char char = ((java.lang.Character)(primitive)).charValue();\n                com.google.gson.JsonPrimitive.this.java.lang.Object = java.lang.String.valueOf(c);\n            } else {\n                com.google.gson.internal.$Gson$Preconditions.checkArgument(((primitive instanceof java.lang.Number) || (com.google.gson.JsonPrimitive.isPrimitiveOrString(primitive))));\n                com.google.gson.JsonPrimitive.this.java.lang.Object = primitive;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915482/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"primitive"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"928c6e6d-3e88-11e6-bae2-4f9485815e8a","method":{"position":"com.google.gson.Gson:491","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915482/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915482/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    com.google.gson.internal.bind.JsonTreeWriter com.google.gson.internal.bind.JsonTreeWriter = new com.google.gson.internal.bind.JsonTreeWriter();\n                    toJson(src, typeOfSrc, writer);\n                    return writer.get();\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:274","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[121,303,122,304,123,305,124,125,306,21,307,308,22,309,23,310,311,312,126,127,313,24,314,315,316,317,318,319,25,320,321,322,323,324,128,129,130,325,131,26,132,326,133,327,328,134,329,27,330,9,28,29,30,135,331,332,31,32,33,333,334,335,336,337,136,338,339,137,340,10,341,342,343,138,139,344,140,345,142,143,144,145,146,147,148,149,150,39,151,152,153,154,346,155,40,301,302,41,42,347,348,43,349,350,156,351,352,157,353,354,355,158,356,357,44,358,359,159,360,160,45,361,46,161,162,362,47,363,364,365,366,163,367,164,3,368,165,369,370,371,372,373,166,374,167,375,376,377,378,379,380,381,168,382,169,383,384,385,386,387,170,388,389,390,391,392,171,393,394,395,396,397,398,4,172,5,6,48,399,173,400,174,175,401,176,402,177,403,178,179,404,180,405,406,407,408,409,181,410,182,49,411,183,184,185,7,186,187,412,413,188,414,109,189,415,11,12,13,14,50,51,52,53,54,190,55,56,57,191,192,58,416,417,418,419,420,421,422,59,423,424,425,426,427,428,60,429,430,431,432,61,62,433,434,435,436,63,437,64,65,66,67,438,68,439,440,441,442,69,443,444,445,70,193,446,447,194,195,196,197,198,199,200,201,448,449,202,450,203,451,452,204,71,72,453,454,455,456,457,458,459,460,205,73,206,207,208,461,209,210,211,212,213,462,463,214,464,215,465,466,467,216,468,469,217,470,218,79,80,81,82,471,472,473,474,83,84,475,85,476,477,86,478,479,87,480,481,88,482,483,484,485,486,487,219,488,220,221,222,223,224,489,490,225,491,226,492,493,227,228,229,230,231,232,233,89,90,234,91,92,15,235,236,237,238,239,240,241,494,242,243,244,245,246,495,496,247,248,93,497,498,499,249,500,250,501,251,502,252,503,253,504,16,505,506,17,18,94,120,254,507,95,96,508,509,510,255,511,256,512,513,514,515,516,257,517,518,258,519,520,521,522,523,524,525,259,260,526,527,528,529,530,261,531,262,263,532,533,264,534,535,265,536,266,267,537,538,268,269,539,540,541,113,542,543,544,545,546,547,548,549,270,550,271,551,114,115,552,553,272,554,555,273,556,274,557,558,559,275,560,116,276,561,277,278,562,563,564,117,565,279,566,567,568,118,280,569,570,571,572,97,573,574,575,576,281,577,19,578,579,580,282,581,582,98,583,584,283,585,8,99,100,586,284,285,286,587,588,101,589,102,103,104,105,590,591,287,592,106,593,288,289,290,594,595,291,292,596,597,293,598,599,600,294,295,296,297,298,601,602,603,604,605,606,607,608,119,609,610,611,612,613,614,615,616,299,617,618,619,620,621,300],"tindex":"928c957e-3e88-11e6-bae2-75ab01642d2d","method":{"position":"com.google.gson.Gson:249","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> doubleAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return in.nextDouble();\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    double double = value.doubleValue();\n                    checkValidFloatingPoint(doubleValue);\n                    out.value(value);\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915482/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"928c957f-3e88-11e6-bae2-f7bcaf8b2bfe","method":{"position":"com.google.gson.DefaultDateTypeAdapter:77","type":"CtMethodImpl","sourcecode":"public java.util.Date deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT, com.google.gson.JsonDeserializationContext context) throws com.google.gson.JsonParseException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915482/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    } else {\n        {\n            if (!(json instanceof com.google.gson.JsonPrimitive)) {\n                throw new com.google.gson.JsonParseException(\"The date should be a string value\");\n            } \n            java.util.Date java.util.Date = deserializeToDate(json);\n            if (typeOfT == (java.util.Date.java.util.Date.java.lang.Class)) {\n                return date;\n            } else if (typeOfT == (java.sql.Timestamp.java.sql.Timestamp.java.lang.Class)) {\n                return new java.sql.Timestamp(date.getTime());\n            } else if (typeOfT == (java.sql.Date.java.sql.Date.java.lang.Class)) {\n                return new java.sql.Date(date.getTime());\n            } else {\n                throw new java.lang.IllegalArgumentException((((getClass()) + \" cannot deserialize to \") + typeOfT));\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[622],"tindex":"928cbc90-3e88-11e6-bae2-bda811e2e28e","method":{"position":"com.google.gson.JsonObject:100","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Boolean value) {\n    if (property == null) {\n        {\n            add(property, createJsonElement(value));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915482/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:136","type":"CtBinaryOperatorImpl","sourcecode":"(type) instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"928cbc91-3e88-11e6-bae2-65b30bb8a339","method":{"position":"com.google.gson.internal.$Gson$Types:93","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type canonicalize(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class) {\n        java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(type));\n        return c.isArray() ? new com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl(com.google.gson.internal.$Gson$Types.canonicalize(c.getComponentType())) : c;\n    } else if (type instanceof java.lang.reflect.ParameterizedType) {\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(type));\n        return new com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl(p.getOwnerType() , p.getRawType() , p.getActualTypeArguments());\n    } else if (type instanceof java.lang.reflect.GenericArrayType) {\n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(type));\n        return new com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl(g.getGenericComponentType());\n    } else if (type instanceof java.lang.reflect.WildcardType) {\n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(type));\n        return new com.google.gson.internal.$Gson$Types.WildcardTypeImpl(w.getUpperBounds() , w.getLowerBounds());\n    } else {\n        return type;\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.JsonPrimitive:289","type":"CtBinaryOperatorImpl","sourcecode":"(value) == null"},"failures":[],"tindex":"928cbc92-3e88-11e6-bae2-3bbde810dbb8","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:108","type":"CtMethodImpl","sourcecode":"public boolean writeField(java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value == null) {\n        {\n            if (!(boolean))\n                return false;\n            \n            java.lang.Object java.lang.Object = field.get(value);\n            return fieldValue != value;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915482/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl","sourcecode":"in == null"},"failures":[623,624],"tindex":"928cbc93-3e88-11e6-bae2-990b4f012700","method":{"position":"com.google.gson.TypeAdapter:254","type":"CtMethodImpl","sourcecode":"public final T fromJson(java.io.Reader in) throws java.io.IOException {\n    if (in == null) {\n        {\n            com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(in);\n            return read(reader);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915482/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"in"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:547","type":"CtBinaryOperatorImpl","sourcecode":"c == '\\u2029'"},"failures":[],"tindex":"928ce3a4-3e88-11e6-bae2-6dab6185e8a4","method":{"position":"com.google.gson.stream.JsonReader:755","type":"CtMethodImpl","sourcecode":"private boolean isLiteral(char c) throws java.io.IOException {\n    if (c == '\\u2029') {\n        {\n            switch (c) {\n                case '/' :\n                case '\\\\' :\n                case ';' :\n                case '#' :\n                case '=' :\n                    checkLenient();\n                case '{' :\n                case '}' :\n                case '[' :\n                case ']' :\n                case ':' :\n                case ',' :\n                case ' ' :\n                case '\\t' :\n                case '\\f' :\n                case '\\r' :\n                case '\\n' :\n                    return false;\n                default :\n                    return true;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915482/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"c"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:462","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[],"tindex":"928ce3a5-3e88-11e6-bae2-617c42c8b3e4","method":{"position":"com.google.gson.stream.JsonWriter:461","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(double value) throws java.io.IOException {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915482/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                throw new java.lang.IllegalArgumentException((\"Numeric values must be finite, but was \" + value));\n            } \n            writeDeferredName();\n            beforeValue(false);\n            java.io.Writer.append(java.lang.Double.toString(value));\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:726","type":"CtBinaryOperatorImpl","sourcecode":"value == 0"},"failures":[],"tindex":"928ce3a6-3e88-11e6-bae2-3d8823f274c4","method":{"position":"com.google.gson.stream.JsonWriter:476","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(long value) throws java.io.IOException {\n    if (value == 0) {\n        {\n            writeDeferredName();\n            beforeValue(false);\n            java.io.Writer.write(java.lang.Long.toString(value));\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915482/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:105","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonObject"},"failures":[],"tindex":"928ce3a7-3e88-11e6-bae2-b5fe29d01272","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:839","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915482/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return containsKey(o);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:363","type":"CtUnaryOperatorImpl","sourcecode":"!insert"},"failures":[],"tindex":"928d0ab8-3e88-11e6-bae2-5d141aae1172","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:338","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (!insert) {\n        {\n            for (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) {\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                int int = left != null ? left.int : 0;\n                int int = right != null ? right.int : 0;\n                int int = leftHeight - rightHeight;\n                if (delta == (-2)) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    int int = rightRight != null ? rightRight.int : 0;\n                    int int = rightLeft != null ? rightLeft.int : 0;\n                    int int = rightLeftHeight - rightRightHeight;\n                    if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                        rotateLeft(node);\n                    } else {\n                        assert rightDelta == 1;\n                        rotateRight(right);\n                        rotateLeft(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 2) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    int int = leftRight != null ? leftRight.int : 0;\n                    int int = leftLeft != null ? leftLeft.int : 0;\n                    int int = leftLeftHeight - leftRightHeight;\n                    if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                        rotateRight(node);\n                    } else {\n                        assert leftDelta == (-1);\n                        rotateLeft(left);\n                        rotateRight(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 0) {\n                    node.int = leftHeight + 1;\n                    if (insert) {\n                        break;\n                    } \n                } else {\n                    assert (delta == (-1)) || (delta == 1);\n                    node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                    if (!insert) {\n                        break;\n                    } \n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915482/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"insert"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:459","type":"CtBinaryOperatorImpl","sourcecode":"typeAdapter instanceof com.google.gson.TypeAdapter<?>"},"failures":[],"tindex":"928d0ab9-3e88-11e6-bae2-71924e45599e","method":{"position":"com.google.gson.TreeTypeAdapter:92","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newFactoryWithMatchRawType(com.google.gson.reflect.TypeToken<?> exactType, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915482/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            boolean boolean = (exactType.getType()) == (exactType.getRawType());\n            return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , exactType , matchRawType , null);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"928d31ca-3e88-11e6-bae2-8b55bf2a4291","method":{"position":"com.google.gson.Gson:127","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonParseException {\n    if (json == null) {\n        {\n            return ((T)(fromJson(json, typeOfT)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915482/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:180","type":"CtUnaryOperatorImpl","sourcecode":"!(b instanceof java.lang.reflect.GenericArrayType)"},"failures":[],"tindex":"928d31cb-3e88-11e6-bae2-d93773e95ccc","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:223","type":"CtMethodImpl","sourcecode":"private boolean equal(java.lang.Object a, java.lang.Object b) {\n    if (!(b instanceof java.lang.reflect.GenericArrayType)) {\n        {\n            return (a == b) || ((a != null) && (a.equals(b)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915482/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"928d31cc-3e88-11e6-bae2-2bc167605bb8","method":{"position":"com.google.gson.Gson:285","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915482/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            float float = value.floatValue();\n            checkValidFloatingPoint(floatValue);\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"928d31cd-3e88-11e6-bae2-1bf88acc9f22","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:144","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915482/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:363","type":"CtUnaryOperatorImpl","sourcecode":"!insert"},"failures":[],"tindex":"928d58de-3e88-11e6-bae2-a177a13ffca4","method":{"position":"com.google.gson.internal.LinkedTreeMap:310","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (insert) {\n        {\n            if (!insert) {\n                {\n                    for (com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>) {\n                        com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                        com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                        int int = left != null ? left.int : 0;\n                        int int = right != null ? right.int : 0;\n                        int int = leftHeight - rightHeight;\n                        if (delta == (-2)) {\n                            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                            int int = rightRight != null ? rightRight.int : 0;\n                            int int = rightLeft != null ? rightLeft.int : 0;\n                            int int = rightLeftHeight - rightRightHeight;\n                            if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                                rotateLeft(node);\n                            } else {\n                                assert rightDelta == 1;\n                                rotateRight(right);\n                                rotateLeft(node);\n                            }\n                            if (insert) {\n                                break;\n                            } \n                        } else if (delta == 2) {\n                            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                            int int = leftRight != null ? leftRight.int : 0;\n                            int int = leftLeft != null ? leftLeft.int : 0;\n                            int int = leftLeftHeight - leftRightHeight;\n                            if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                                rotateRight(node);\n                            } else {\n                                assert leftDelta == (-1);\n                                rotateLeft(left);\n                                rotateRight(node);\n                            }\n                            if (insert) {\n                                break;\n                            } \n                        } else if (delta == 0) {\n                            node.int = leftHeight + 1;\n                            if (insert) {\n                                break;\n                            } \n                        } else {\n                            assert (delta == (-1)) || (delta == 1);\n                            node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                            if (!insert) {\n                                break;\n                            } \n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915482/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915482/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"insert"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"928d58df-3e88-11e6-bae2-4fd2518496fb","method":{"position":"com.google.gson.Gson:491","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915482/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915482/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    com.google.gson.internal.bind.JsonTreeWriter com.google.gson.internal.bind.JsonTreeWriter = new com.google.gson.internal.bind.JsonTreeWriter();\n                    toJson(src, typeOfSrc, writer);\n                    return writer.get();\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:565","type":"CtBinaryOperatorImpl","sourcecode":"(indent) == null"},"failures":[],"tindex":"928d7ff0-3e88-11e6-bae2-11473b14a86d","method":{"position":"com.google.gson.stream.JsonWriter:212","type":"CtMethodImpl","sourcecode":"public final void setIndent(java.lang.String indent) {\n    if (indent == null) {\n        {\n            if ((indent.length()) == 0) {\n                com.google.gson.stream.JsonWriter.this.java.lang.String = null;\n                com.google.gson.stream.JsonWriter.this.java.lang.String = \":\";\n            } else {\n                com.google.gson.stream.JsonWriter.this.java.lang.String = indent;\n                com.google.gson.stream.JsonWriter.this.java.lang.String = \": \";\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915482/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"indent"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:378","type":"CtVariableReadImpl","sourcecode":"insert"},"failures":[],"tindex":"928d7ff1-3e88-11e6-bae2-73b5784a13b7","method":{"position":"com.google.gson.internal.LinkedTreeMap:310","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (insert) {\n        {\n            if (!insert) {\n                {\n                    for (com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>) {\n                        com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                        com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                        int int = left != null ? left.int : 0;\n                        int int = right != null ? right.int : 0;\n                        int int = leftHeight - rightHeight;\n                        if (delta == (-2)) {\n                            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                            int int = rightRight != null ? rightRight.int : 0;\n                            int int = rightLeft != null ? rightLeft.int : 0;\n                            int int = rightLeftHeight - rightRightHeight;\n                            if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                                rotateLeft(node);\n                            } else {\n                                assert rightDelta == 1;\n                                rotateRight(right);\n                                rotateLeft(node);\n                            }\n                            if (insert) {\n                                break;\n                            } \n                        } else if (delta == 2) {\n                            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                            int int = leftRight != null ? leftRight.int : 0;\n                            int int = leftLeft != null ? leftLeft.int : 0;\n                            int int = leftLeftHeight - leftRightHeight;\n                            if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                                rotateRight(node);\n                            } else {\n                                assert leftDelta == (-1);\n                                rotateLeft(left);\n                                rotateRight(node);\n                            }\n                            if (insert) {\n                                break;\n                            } \n                        } else if (delta == 0) {\n                            node.int = leftHeight + 1;\n                            if (insert) {\n                                break;\n                            } \n                        } else {\n                            assert (delta == (-1)) || (delta == 1);\n                            node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                            if (!insert) {\n                                break;\n                            } \n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915482/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915482/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"insert"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.JsonPrimitive:289","type":"CtBinaryOperatorImpl","sourcecode":"(value) == null"},"failures":[],"tindex":"928da702-3e88-11e6-bae2-5b1f19095755","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:101","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nvoid read(com.google.gson.stream.JsonReader reader, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value == null) {\n        {\n            java.lang.Object java.lang.Object = com.google.gson.TypeAdapter<?>.read(reader);\n            if ((fieldValue != null) || (!isPrimitive)) {\n                field.set(value, fieldValue);\n            } \n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915482/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[],"tindex":"928da703-3e88-11e6-bae2-8defe28be78c","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:116","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<?> getFieldAdapter(com.google.gson.Gson gson, java.lang.reflect.Field field, com.google.gson.reflect.TypeToken<?> fieldType) {\n    if (field.isSynthetic()) {\n        {\n            com.google.gson.annotations.JsonAdapter com.google.gson.annotations.JsonAdapter = field.getAnnotation(com.google.gson.annotations.JsonAdapter.com.google.gson.annotations.JsonAdapter.java.lang.Class);\n            if (annotation != null) {\n                com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory.getTypeAdapter(com.google.gson.internal.ConstructorConstructor, gson, fieldType, annotation);\n                if (adapter != null)\n                    return adapter;\n                \n            } \n            return gson.getAdapter(fieldType);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915482/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"field"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:105","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonObject"},"failures":[],"tindex":"928da704-3e88-11e6-bae2-ad61dda02a62","method":{"position":"com.google.gson.internal.LinkedTreeMap:570","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915482/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (o instanceof java.util.Map.Entry) && ((findByEntry(((java.util.Map.Entry<?, ?>)(o)))) != null);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.TreeTypeAdapter:55","type":"CtInvocationImpl","sourcecode":"value.isJsonNull()"},"failures":[],"tindex":"928da705-3e88-11e6-bae2-33d27b54f459","method":{"position":"com.google.gson.internal.bind.TypeAdapters:680","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, com.google.gson.JsonElement value) throws java.io.IOException {\n    if (value.isJsonNull()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915482/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if ((value == null) || (value.isJsonNull())) {\n                out.nullValue();\n            } else if (value.isJsonPrimitive()) {\n                com.google.gson.JsonPrimitive com.google.gson.JsonPrimitive = value.getAsJsonPrimitive();\n                if (primitive.isNumber()) {\n                    out.value(primitive.getAsNumber());\n                } else if (primitive.isBoolean()) {\n                    out.value(primitive.getAsBoolean());\n                } else {\n                    out.value(primitive.getAsString());\n                }\n            } else if (value.isJsonArray()) {\n                out.beginArray();\n                for (com.google.gson.JsonElement com.google.gson.JsonElement : value.getAsJsonArray()) {\n                    write(out, e);\n                }\n                out.endArray();\n            } else if (value.isJsonObject()) {\n                out.beginObject();\n                for (java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> : value.getAsJsonObject().entrySet()) {\n                    out.name(e.getKey());\n                    write(out, e.getValue());\n                }\n                out.endObject();\n            } else {\n                throw new java.lang.IllegalArgumentException((\"Couldn't write \" + (value.getClass())));\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[],"tindex":"928dce16-3e88-11e6-bae2-cd5045cada84","method":{"position":"com.google.gson.internal.Excluder:149","type":"CtMethodImpl","sourcecode":"public boolean excludeField(java.lang.reflect.Field field, boolean serialize) {\n    if (field.isSynthetic()) {\n        {\n            if (((int) & (field.getModifiers())) != 0) {\n                return true;\n            } \n            if (((double) != (com.google.gson.internal.Excluder.com.google.gson.internal.Excluder.double)) && (!(isValidVersion(field.getAnnotation(com.google.gson.annotations.Since.com.google.gson.annotations.Since.java.lang.Class), field.getAnnotation(com.google.gson.annotations.Until.com.google.gson.annotations.Until.java.lang.Class))))) {\n                return true;\n            } \n            if (field.isSynthetic()) {\n                return true;\n            } \n            if (boolean) {\n                com.google.gson.annotations.Expose com.google.gson.annotations.Expose = field.getAnnotation(com.google.gson.annotations.Expose.com.google.gson.annotations.Expose.java.lang.Class);\n                if ((annotation == null) || (serialize ? !(annotation.serialize()) : !(annotation.deserialize()))) {\n                    return true;\n                } \n            } \n            if ((!(boolean)) && (isInnerClass(field.getType()))) {\n                return true;\n            } \n            if (isAnonymousOrLocal(field.getType())) {\n                return true;\n            } \n            java.util.List<com.google.gson.ExclusionStrategy> java.util.List<com.google.gson.ExclusionStrategy> = serialize ? java.util.List<com.google.gson.ExclusionStrategy> : java.util.List<com.google.gson.ExclusionStrategy>;\n            if (!(list.isEmpty())) {\n                com.google.gson.FieldAttributes com.google.gson.FieldAttributes = new com.google.gson.FieldAttributes(field);\n                for (com.google.gson.ExclusionStrategy com.google.gson.ExclusionStrategy : list) {\n                    if (exclusionStrategy.shouldSkipField(fieldAttributes)) {\n                        return true;\n                    } \n                }\n            } \n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915482/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"field"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:578","type":"CtBinaryOperatorImpl","sourcecode":"root == null"},"failures":[],"tindex":"928dce17-3e88-11e6-bae2-e5075734c78a","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:401","type":"CtMethodImpl","sourcecode":"private void rotateLeft(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915482/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (root == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915482/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivotLeft;\n                    if (pivotLeft != null) {\n                        pivotLeft.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n                    } \n                    replaceInParent(root, pivot);\n                    pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n                    root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot;\n                    root.int = (java.lang.Math.max((left != null ? left.int : 0), (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n                    pivot.int = (java.lang.Math.max(root.int, (pivotRight != null ? pivotRight.int : 0))) + 1;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"928df528-3e88-11e6-bae2-49b3d9d76c24","method":{"position":"com.google.gson.Gson:695","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.lang.String json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915482/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"928df529-3e88-11e6-bae2-63019cf25884","method":{"position":"com.google.gson.Gson:719","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.lang.String json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915482/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (json == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915482/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            } else {\n                {\n                    if (json == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915482/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new com.google.gson.JsonSyntaxException();\n                    } else {\n                        {\n                            if (json == null) {\n                                return null;\n                            } \n                            java.io.StringReader java.io.StringReader = new java.io.StringReader(json);\n                            T T = ((T)(fromJson(reader, typeOfT)));\n                            return target;\n                        }\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":48,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
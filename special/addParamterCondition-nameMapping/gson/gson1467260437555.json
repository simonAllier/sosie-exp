{"failureDictionary":{"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":106,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":115,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":85,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":97,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":189,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":105,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":0,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":180,"com.google.gson.MixedStreamTest.testWriteLenient":211,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":140,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":184,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":129,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":131,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":116,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":136,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":82,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":182,"com.google.gson.functional.ObjectTest.testSingletonLists":56,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":41,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":69,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":34,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":67,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":40,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":201,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":18,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":42,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":84,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":200,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":111,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":134,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":192,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":196,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":213,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":173,"com.google.gson.functional.JsonTreeTest.testToJsonTree":79,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":197,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":88,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":10,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":14,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":31,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":37,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":154,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":194,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":133,"com.google.gson.functional.MapTest.testGeneralMapField":100,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":160,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":50,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":168,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":120,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":177,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":179,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":137,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":121,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":38,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":72,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":65,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":164,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":183,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":48,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":203,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":114,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":44,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":174,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":20,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":4,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":103,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":150,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":157,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":215,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":3,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":22,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":7,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":25,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":187,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":139,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":113,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":73,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":99,"com.google.gson.functional.MapTest.testInterfaceTypeMap":98,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":176,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":9,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":83,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":33,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":199,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":60,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":26,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":16,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":93,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":62,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":24,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":205,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":70,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":58,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":27,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":8,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":153,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":68,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":149,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":108,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":188,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":172,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":75,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":13,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":59,"com.google.gson.functional.MapTest.testMapSerialization":96,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":190,"com.google.gson.functional.MapTest.testSerializeMaps":92,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":143,"com.google.gson.functional.MapTest.testComplexKeysSerialization":102,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":204,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":135,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":171,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":124,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":52,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":198,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":76,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":53,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":158,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":152,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":86,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":1,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":95,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":122,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":130,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":209,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":104,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":35,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":63,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":109,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":191,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":39,"com.google.gson.functional.CollectionTest.testQueueSerialization":132,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":208,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":161,"com.google.gson.ObjectTypeAdapterTest.testSerialize":216,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":119,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":185,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":128,"com.google.gson.functional.FieldNamingTest.testIdentity":144,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":167,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":141,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":28,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":43,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":2,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":55,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":78,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":46,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":81,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":207,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":127,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":21,"com.google.gson.functional.MapTest.testMapSubclassSerialization":91,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":90,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":117,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":170,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":147,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":210,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":74,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":23,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":71,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":175,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":186,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":202,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":17,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":159,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":112,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":45,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":107,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":118,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":5,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":32,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":206,"com.google.gson.functional.ObjectTest.testNestedSerialization":64,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":155,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":178,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":47,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":101,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":146,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":15,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":166,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":212,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":162,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":61,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":51,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":57,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":11,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":151,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":123,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":214,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":36,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":80,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":30,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":181,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":165,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":145,"com.google.gson.functional.CollectionTest.testSetSerialization":138,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":19,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":87,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":54,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":125,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":148,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":126,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":169,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":156,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":142,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":49,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":89,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":12,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":94,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":195,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":193,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":77,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":29,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":66,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":110,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":6,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":163},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:131","type":"CtBinaryOperatorImpl","sourcecode":"(type) instanceof java.lang.Class<?>"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216],"tindex":"ff3f926c-3e79-11e6-abf2-2b7c33d96e06","method":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:74","type":"CtMethodImpl","sourcecode":"private java.lang.reflect.Type getRuntimeTypeIfMoreSpecific(java.lang.reflect.Type type, java.lang.Object value) {\n    if (type instanceof java.lang.Class<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260090330/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((value != null) && (((type == (java.lang.Object.java.lang.Object.java.lang.Class)) || (type instanceof java.lang.reflect.TypeVariable<?>)) || (type instanceof java.lang.Class<?>))) {\n                type = value.getClass();\n            } \n            return type;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"ff40079d-3e79-11e6-abf2-0f16c55dc43a","method":{"position":"com.google.gson.Gson:510","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260090330/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src == null) {\n                return toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull);\n            } \n            return toJson(src, src.getClass());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1413","type":"CtVariableReadImpl","sourcecode":"throwOnEof"},"failures":[],"tindex":"ff40079e-3e79-11e6-abf2-71bf4442d448","method":{"position":"com.google.gson.stream.JsonReader:1331","type":"CtMethodImpl","sourcecode":"private int nextNonWhitespace(boolean throwOnEof) throws java.io.IOException {\n    if (throwOnEof) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260090330/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            char[] char[] = com.google.gson.stream.JsonReader.this.char[];\n            int int = int;\n            int int = int;\n            while (true) {\n                if (p == l) {\n                    int = p;\n                    if (!(fillBuffer(1))) {\n                        break;\n                    } \n                    p = int;\n                    l = int;\n                } \n                int int = buffer[(p++)];\n                if (c == '\\n') {\n                    (int)++;\n                    int = p;\n                    continue;\n                } else if (((c == ' ') || (c == '\\r')) || (c == '\\t')) {\n                    continue;\n                } \n                if (c == '/') {\n                    int = p;\n                    if (p == l) {\n                        (int)--;\n                        boolean boolean = fillBuffer(2);\n                        (int)++;\n                        if (!charsLoaded) {\n                            return c;\n                        } \n                    } \n                    checkLenient();\n                    char char = buffer[int];\n                    switch (peek) {\n                        case '*' :\n                            (int)++;\n                            if (!(skipTo(\"*/\"))) {\n                                throw syntaxError(\"Unterminated comment\");\n                            } \n                            p = (int) + 2;\n                            l = int;\n                            continue;\n                        case '/' :\n                            (int)++;\n                            skipToEndOfLine();\n                            p = int;\n                            l = int;\n                            continue;\n                        default :\n                            return c;\n                    }\n                } else if (c == '#') {\n                    int = p;\n                    checkLenient();\n                    skipToEndOfLine();\n                    p = int;\n                    l = int;\n                } else {\n                    int = p;\n                    return c;\n                }\n            }\n            if (throwOnEof) {\n                throw new java.io.EOFException(((((\"End of input\" + \" at line \") + (getLineNumber())) + \" column \") + (getColumnNumber())));\n            } else {\n                return -1;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"throwOnEof":"throwOnEof"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:118","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.Class<?>"},"failures":[],"tindex":"ff402eaf-3e79-11e6-abf2-1178320ce114","method":{"position":"com.google.gson.reflect.TypeToken:295","type":"CtMethodImpl","sourcecode":"public static com.google.gson.reflect.TypeToken<?> get(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260090330/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new com.google.gson.reflect.TypeToken<java.lang.Object>(type);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"ff402eb0-3e79-11e6-abf2-8f41583aece6","method":{"position":"com.google.gson.internal.bind.TypeAdapters:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260090330/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:109","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonPrimitive"},"failures":[],"tindex":"ff402eb1-3e79-11e6-abf2-330927c3a6a2","method":{"position":"com.google.gson.reflect.TypeToken:283","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic final boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonPrimitive) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260090330/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (o instanceof com.google.gson.reflect.TypeToken<?>) && (com.google.gson.internal.$Gson$Types.equals(java.lang.reflect.Type, ((com.google.gson.reflect.TypeToken<?>)(o)).java.lang.reflect.Type));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"ff4055c2-3e79-11e6-abf2-95ffec2499c1","method":{"position":"com.google.gson.TypeAdapter:268","type":"CtMethodImpl","sourcecode":"public final T fromJson(java.lang.String json) throws java.io.IOException {\n    if (json == null) {\n        {\n            return fromJson(new java.io.StringReader(json));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260090330/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:198","type":"CtBinaryOperatorImpl","sourcecode":"out == null"},"failures":[],"tindex":"ff4055c3-3e79-11e6-abf2-795fb11d34ce","method":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:84","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Object array) throws java.io.IOException {\n    if (array == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260090330/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (array == null) {\n                out.nullValue();\n                return ;\n            } \n            out.beginArray();\n            for (int int = 0, int int = java.lang.reflect.Array.getLength(array) ; i < length ; i++) {\n                E E = ((E)(java.lang.reflect.Array.get(array, i)));\n                com.google.gson.TypeAdapter<E>.write(out, value);\n            }\n            out.endArray();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"array"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"ff407cd4-3e79-11e6-abf2-d7ffca775a91","method":{"position":"com.google.gson.Gson:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260090330/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            out.value(value.toString());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:198","type":"CtBinaryOperatorImpl","sourcecode":"out == null"},"failures":[],"tindex":"ff407cd5-3e79-11e6-abf2-916ddad08485","method":{"position":"com.google.gson.TypeAdapter:140","type":"CtMethodImpl","sourcecode":"public final void toJson(java.io.Writer out, T value) throws java.io.IOException {\n    if (out == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260090330/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = new com.google.gson.stream.JsonWriter(out);\n            write(writer, value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:79","type":"CtUnaryOperatorImpl","sourcecode":"!(json instanceof com.google.gson.JsonPrimitive)"},"failures":[],"tindex":"ff407cd6-3e79-11e6-abf2-41bbc1adef6e","method":{"position":"com.google.gson.Gson:871","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n        {\n            if (json == null) {\n                return null;\n            } \n            return ((T)(fromJson(new com.google.gson.internal.bind.JsonTreeReader(json), typeOfT)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260090330/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:167","type":"CtBinaryOperatorImpl","sourcecode":"a instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"ff40a3e7-3e79-11e6-abf2-4303785bc9b1","method":{"position":"com.google.gson.internal.LinkedTreeMap:207","type":"CtMethodImpl","sourcecode":"private boolean equal(java.lang.Object a, java.lang.Object b) {\n    if (a instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260090330/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (a == b) || ((a != null) && (a.equals(b)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:79","type":"CtUnaryOperatorImpl","sourcecode":"!(json instanceof com.google.gson.JsonPrimitive)"},"failures":[],"tindex":"ff40a3e8-3e79-11e6-abf2-6f4de6e05e21","method":{"position":"com.google.gson.Gson:847","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(com.google.gson.JsonElement json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n        {\n            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260090330/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:726","type":"CtBinaryOperatorImpl","sourcecode":"value == 0"},"failures":[],"tindex":"ff40a3e9-3e79-11e6-abf2-b5c246589ed1","method":{"position":"com.google.gson.stream.JsonWriter:476","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(long value) throws java.io.IOException {\n    if (value == 0) {\n        {\n            writeDeferredName();\n            beforeValue(false);\n            java.io.Writer.write(java.lang.Long.toString(value));\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260090330/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:111","type":"CtInvocationImpl","sourcecode":"primitive.isString()"},"failures":[],"tindex":"ff40cafa-3e79-11e6-abf2-a3bc1a1a32c8","method":{"position":"com.google.gson.JsonPrimitive:333","type":"CtMethodImpl","sourcecode":"private static boolean isIntegral(com.google.gson.JsonPrimitive primitive) {\n    if (primitive.isString()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260090330/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((primitive.java.lang.Object) instanceof java.lang.Number) {\n                java.lang.Number java.lang.Number = ((java.lang.Number)(primitive.java.lang.Object));\n                return ((((number instanceof java.math.BigInteger) || (number instanceof java.lang.Long)) || (number instanceof java.lang.Integer)) || (number instanceof java.lang.Short)) || (number instanceof java.lang.Byte);\n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"primitive"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"ff40cafb-3e79-11e6-abf2-d557396ee61f","method":{"position":"com.google.gson.internal.bind.TypeAdapters:223","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260090330/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"ff40cafc-3e79-11e6-abf2-9de9f3bf3a4e","method":{"position":"com.google.gson.Gson:576","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        {\n            try {\n                com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                toJson(src, typeOfSrc, jsonWriter);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260090330/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.JsonPrimitive:313","type":"CtBinaryOperatorImpl","sourcecode":"(value) == null"},"failures":[],"tindex":"ff40f20d-3e79-11e6-abf2-9f9dcaf250a2","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:101","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nvoid read(com.google.gson.stream.JsonReader reader, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260090330/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    } else {\n        {\n            java.lang.Object java.lang.Object = com.google.gson.TypeAdapter<?>.read(reader);\n            if ((fieldValue != null) || (!isPrimitive)) {\n                field.set(value, fieldValue);\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:120","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonNull"},"failures":[],"tindex":"ff40f20e-3e79-11e6-abf2-939d384c1a42","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:804","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonNull) {\n        {\n            return (o instanceof java.util.Map.Entry) && ((findByEntry(((java.util.Map.Entry<?, ?>)(o)))) != null);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260090330/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"ff40f20f-3e79-11e6-abf2-0d92ced4c314","method":{"position":"com.google.gson.Gson:285","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260090330/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            float float = value.floatValue();\n            checkValidFloatingPoint(floatValue);\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":20,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":148,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":474,"com.google.gson.functional.StringTest.testStringValueDeserialization":472,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":98,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":591,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":428,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":554,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":8,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":70,"com.google.gson.MixedStreamTest.testWriteLenient":6,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":296,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":237,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":435,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":141,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":308,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":235,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":312,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":598,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":46,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":632,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":282,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":563,"com.google.gson.JsonObjectTest.testAddingNullPropertyValue":376,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":43,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":332,"com.google.gson.functional.ObjectTest.testSingletonLists":233,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":49,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":429,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":475,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":547,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":38,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":267,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":382,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":82,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":248,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":192,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":601,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":172,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":488,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":51,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":83,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":592,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":284,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":138,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":182,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":60,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":361,"com.google.gson.functional.EnumTest.testEnumCaseMapping":631,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":189,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":473,"com.google.gson.functional.JsonTreeTest.testToJsonTree":279,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":539,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":88,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":441,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":208,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreBehindInVersion":351,"com.google.gson.JsonObjectTest.testEqualsNonEmptyObject":377,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":221,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":411,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":529,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":425,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":549,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":159,"com.google.gson.internal.LinkedTreeMapTest.testLargeSetOfRandomKeys":370,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":500,"com.google.gson.functional.ObjectTest.testNullDeserialization":394,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":227,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":485,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":245,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":608,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":640,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":555,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":69,"com.google.gson.internal.LinkedTreeMapTest.testContainsNonComparableKeyReturnsFalse":371,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":58,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":330,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":255,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":639,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":444,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":355,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":442,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":301,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":613,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":612,"com.google.gson.JsonParserTest.testParseString":366,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":81,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":1,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testDifferentSerializeAndDeserializeField":345,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":577,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":410,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":618,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":257,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":526,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":427,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":575,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":297,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":451,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":589,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":292,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":422,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":136,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":24,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":463,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":2,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":469,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":590,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":254,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":520,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":129,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":241,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":352,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":15,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":362,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":559,"com.google.gson.metrics.PerformanceTest.testDummy":638,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":50,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":199,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":214,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":22,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":26,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":395,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":465,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":123,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":434,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":19,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":424,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":329,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":229,"com.google.gson.functional.CollectionTest.testSetDeserialization":311,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":283,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":244,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":510,"com.google.gson.functional.EnumTest.testEnumSet":625,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":582,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":215,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":25,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":415,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":448,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":249,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":181,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":213,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":594,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":21,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":603,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":55,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":268,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":140,"com.google.gson.functional.MapTest.testHashMapDeserialization":446,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":552,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":496,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":432,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":130,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":150,"com.google.gson.MixedStreamTest.testReadNulls":637,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":99,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":146,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":132,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":399,"com.google.gson.functional.MapTest.testSortedMap":459,"com.google.gson.functional.MapTest.testMapSerialization":456,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":149,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":119,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":587,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":532,"com.google.gson.functional.MapTest.testSerializeMaps":93,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":116,"com.google.gson.functional.MapTest.testComplexKeysSerialization":286,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":509,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":464,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":536,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":228,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":335,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":167,"com.google.gson.internal.LinkedTreeMapTest.testRemoveRootDoesNotDoubleUnlink":385,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":109,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":397,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":629,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":86,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":378,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":10,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":393,"com.google.gson.functional.MapTest.testStringKeyDeserialization":363,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":533,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":30,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":4,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":466,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":558,"com.google.gson.functional.PrettyPrintingTest.testMap":84,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":126,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":553,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":493,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":71,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":152,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":406,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":191,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":535,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":478,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":482,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":379,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":420,"com.google.gson.functional.MapTest.testMapSerializationEmpty":462,"com.google.gson.functional.CollectionTest.testQueueSerialization":497,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":583,"com.google.gson.functional.MapTest.testMapOfMapSerialization":455,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":574,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":426,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":502,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":0,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":307,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":39,"com.google.gson.functional.FieldNamingTest.testIdentity":117,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":476,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":27,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":222,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":258,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":14,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":143,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":232,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":278,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":541,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":183,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testSkipNonAnnotatedFields":344,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":137,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":477,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":288,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":580,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":437,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":186,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":416,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":195,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":306,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":421,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":445,"com.google.gson.functional.MapTest.testMapSubclassSerialization":447,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":611,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":220,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":294,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":512,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":170,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":314,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":339,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":572,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":298,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":405,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":624,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":266,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":212,"com.google.gson.functional.EnumTest.testEnumSubclass":627,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":593,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":193,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":247,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":540,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":326,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":597,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":29,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":105,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":543,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":290,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":578,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":289,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":197,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":185,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":528,"com.google.gson.internal.LinkedTreeMapTest.testEqualsAndHashCode":373,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":388,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":584,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":13,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":576,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":439,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":234,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":92,"com.google.gson.MixedStreamTest.testWriteNulls":636,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":527,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":467,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":522,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":66,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":210,"com.google.gson.CommentsTest.testParseComments":633,"com.google.gson.JsonObjectTest.testReadPropertyWithEmptyStringName":374,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":34,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":236,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":333,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":318,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":324,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":596,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":118,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":458,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":480,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":53,"com.google.gson.MixedStreamTest.testReadInvalidState":634,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":280,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":219,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":80,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":610,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":120,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":551,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":537,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":315,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAheadInVersion":349,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":567,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":305,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":75,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":606,"com.google.gson.functional.MapTest.testMapDeserialization":359,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":525,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":423,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":89,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":91,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":156,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":206,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":450,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":161,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":157,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":110,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeMap":354,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":277,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":628,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":270,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":259,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":391,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":100,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":514,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":198,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":412,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":44,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":108,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":287,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":85,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":457,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":440,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":538,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":36,"com.google.gson.functional.PrimitiveTest.testShortSerialization":609,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":163,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":600,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":62,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":573,"com.google.gson.internal.LinkedTreeMapTest.testIterationOrder":384,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":599,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":194,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":550,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":113,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":169,"com.google.gson.internal.LinkedTreeMapTest.testEmptyStringValues":372,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":309,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":293,"com.google.gson.internal.LinkedTreeMapTest.testPutOverrides":369,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":357,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":566,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":112,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":616,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":299,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":78,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":168,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":343,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":622,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":617,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":12,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":28,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":205,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":260,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":171,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":401,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":331,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":17,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":31,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":579,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":264,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":240,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":630,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":102,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":511,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":271,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":310,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":513,"com.google.gson.InnerClassExclusionStrategyTest.testExcludeInnerClassField":336,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":32,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":155,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":76,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":162,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":557,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":135,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":417,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":164,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":431,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":202,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":494,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":544,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":605,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":581,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":5,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":321,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":160,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":626,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":154,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":121,"com.google.gson.functional.MapTest.testGeneralMapField":96,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":238,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":519,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":621,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":125,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":323,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":327,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testSkipExplicitlySkippedFields":348,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":436,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":460,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":402,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":471,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":548,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":602,"com.google.gson.MixedStreamTest.testReadMixedStreamed":342,"com.google.gson.ObjectTypeAdapterTest.testDeserializeNullValue":367,"com.google.gson.JsonObjectTest.testDeepCopy":380,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":413,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":452,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":568,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":134,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":184,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":505,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":48,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":585,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":61,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":20,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":273,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":360,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":491,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":356,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":35,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":620,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":64,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":175,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":569,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":74,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":468,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":223,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":400,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":501,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":166,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":41,"com.google.gson.functional.ObjectTest.testNestedDeserialization":265,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":52,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":392,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":151,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":196,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":59,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":619,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":317,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":9,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":453,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":479,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":211,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":3,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":101,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":145,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":300,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":507,"com.google.gson.functional.ObjectTest.testNullSerialization":389,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":104,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":490,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":358,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":285,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":542,"com.google.gson.functional.MapTest.testInterfaceTypeMap":95,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":530,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":127,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":201,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":545,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":334,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testNeverSkipExplicitlyExposedAnnotatedFields":347,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":107,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":515,"com.google.gson.MixedStreamTest.testReadClosed":635,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":403,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":57,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":561,"com.google.gson.MixedStreamTest.testWriteClosed":341,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":153,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":499,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":204,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":239,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":443,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":216,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":200,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":320,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":262,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":316,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":275,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":207,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":242,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":498,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":176,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":588,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":178,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":106,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":503,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":77,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":54,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":303,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":623,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":139,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":276,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":408,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":230,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":516,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":319,"com.google.gson.functional.CollectionTest.testQueueDeserialization":508,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":571,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":586,"com.google.gson.InnerClassExclusionStrategyTest.testIncludeStaticNestedClassField":337,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":484,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":147,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":79,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":177,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":94,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":256,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":419,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":263,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":302,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":492,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":338,"com.google.gson.functional.MapTest.testRawMapSerialization":461,"com.google.gson.JsonParserTest.testParseReader":365,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":506,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":430,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":251,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":291,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":124,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":165,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":364,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":396,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":521,"com.google.gson.functional.PrimitiveTest.testByteSerialization":607,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":67,"com.google.gson.ObjectTypeAdapterTest.testSerialize":353,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":111,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromRawTypes":7,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":556,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":142,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":531,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":114,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":180,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":217,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":481,"com.google.gson.functional.MapTest.testMapWithQuotes":454,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":407,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":564,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":483,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":23,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":133,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":40,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":226,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":614,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":404,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":281,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":158,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":209,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":261,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":90,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":73,"com.google.gson.functional.ObjectTest.testEmptyStringDeserialization":390,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":595,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":243,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":534,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":274,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":409,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":144,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":174,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":418,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":604,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":72,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":504,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":524,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":42,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":438,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":517,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":103,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":224,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":179,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":295,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAtSameVersion":350,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":398,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":45,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":546,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testNeverSkipExposedAnnotatedFields":346,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":37,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":250,"com.google.gson.functional.ObjectTest.testNestedSerialization":252,"com.google.gson.JsonObjectTest.testAddingStringProperties":381,"com.google.gson.internal.LinkedTreeMapTest.testClear":383,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":322,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":470,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":487,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":560,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":63,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":97,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":122,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":16,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":188,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":641,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":246,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":386,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":615,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":203,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":47,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":272,"com.google.gson.GsonBuilderTest.testCreatingMoreThanOnce":187,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":190,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":562,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":253,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":269,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":173,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":486,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":131,"com.google.gson.functional.CollectionTest.testSetSerialization":313,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":328,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":33,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":87,"com.google.gson.functional.StringTest.testStringValueSerialization":489,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":231,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":11,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":304,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":495,"com.google.gson.MixedStreamTest.testWriteInvalidState":340,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":518,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":68,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":565,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":325,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":570,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":128,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":414,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":115,"com.google.gson.ObjectTypeAdapterTest.testDeserialize":368,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":65,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":375,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":225,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":56,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":218,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":433,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":387,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":449,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":18,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":523},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:105","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonObject"},"failures":[],"tindex":"1b5d064d-3e47-11e6-bcf6-cf1ce877cf9e","method":{"position":"com.google.gson.internal.$Gson$Types:213","type":"CtMethodImpl","sourcecode":"private static int hashCodeOrZero(java.lang.Object o) {\n    return o != null ? o.hashCode() : 0;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:455","type":"CtBinaryOperatorImpl","sourcecode":"(typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)"},"failures":[],"tindex":"1b5dc99e-3e47-11e6-bcf6-1371360425c3","method":{"position":"com.google.gson.TreeTypeAdapter:103","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newTypeHierarchyFactory(java.lang.Class<?> hierarchyType, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof com.google.gson.InstanceCreator<?>) {\n        {\n            if ((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) {\n                {\n                    return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , null , false , hierarchyType);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238032775/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238032775/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:274","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[0,1,2,3,4,5,6],"tindex":"1b5dc99f-3e47-11e6-bcf6-9b681c2c162b","method":{"position":"com.google.gson.Gson:249","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> doubleAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238032775/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return in.nextDouble();\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    double double = value.doubleValue();\n                    checkValidFloatingPoint(doubleValue);\n                    out.value(value);\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:166","type":"CtBinaryOperatorImpl","sourcecode":"from instanceof java.lang.Class<?>"},"failures":[7],"tindex":"1b5df0b0-3e47-11e6-bcf6-0d5a905e0fb6","method":{"position":"com.google.gson.reflect.TypeToken:122","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic boolean isAssignableFrom(java.lang.reflect.Type from) {\n    if (from instanceof java.lang.Class<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238032775/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (from == null) {\n                return false;\n            } \n            if (java.lang.reflect.Type.equals(from)) {\n                return true;\n            } \n            if ((java.lang.reflect.Type) instanceof java.lang.Class<?>) {\n                return java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from));\n            } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.ParameterizedType) {\n                return com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n            } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.GenericArrayType) {\n                return (java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from))) && (com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.GenericArrayType)(java.lang.reflect.Type))));\n            } else {\n                throw com.google.gson.reflect.TypeToken.buildUnexpectedTypeError(java.lang.reflect.Type, java.lang.Class.java.lang.Class.java.lang.Class, java.lang.reflect.ParameterizedType.java.lang.reflect.ParameterizedType.java.lang.Class, java.lang.reflect.GenericArrayType.java.lang.reflect.GenericArrayType.java.lang.Class);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:136","type":"CtBinaryOperatorImpl","sourcecode":"(type) instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"1b5df0b1-3e47-11e6-bcf6-17fb5f06a242","method":{"position":"com.google.gson.internal.Primitives:69","type":"CtMethodImpl","sourcecode":"public static boolean isPrimitive(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.GenericArrayType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238032775/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return com.google.gson.internal.Primitives.com.google.gson.internal.Primitives.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.containsKey(type);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:554","type":"CtBinaryOperatorImpl","sourcecode":"(datePattern != null) && (!(\"\".equals(datePattern.trim())))"},"failures":[8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,0,1,2,140,3,4,5,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,6,188,189,190,191,192,193],"tindex":"1b5e17c2-3e47-11e6-bcf6-7733e84ee28a","method":{"position":"com.google.gson.GsonBuilder:551","type":"CtMethodImpl","sourcecode":"private void addTypeAdaptersForDate(java.lang.String datePattern, int dateStyle, int timeStyle, java.util.List<com.google.gson.TypeAdapterFactory> factories) {\n    if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n        {\n            com.google.gson.DefaultDateTypeAdapter com.google.gson.DefaultDateTypeAdapter;\n            if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n                dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(datePattern);\n            } else if ((dateStyle != (java.text.DateFormat.java.text.DateFormat.int)) && (timeStyle != (java.text.DateFormat.java.text.DateFormat.int))) {\n                dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(dateStyle , timeStyle);\n            } else {\n                return ;\n            }\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.util.Date.java.util.Date.java.lang.Class), dateTypeAdapter));\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Timestamp.java.sql.Timestamp.java.lang.Class), dateTypeAdapter));\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Date.java.sql.Date.java.lang.Class), dateTypeAdapter));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238032775/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"datePattern":"datePattern"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:109","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonPrimitive"},"failures":[],"tindex":"1b5e3ed3-3e47-11e6-bcf6-61b017649e16","method":{"position":"com.google.gson.internal.$Gson$Types:511","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    return (o instanceof java.lang.reflect.GenericArrayType) && (com.google.gson.internal.$Gson$Types.equals(com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl.this, ((java.lang.reflect.GenericArrayType)(o))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[194,195,165],"tindex":"1b5e3ed4-3e47-11e6-bcf6-e98655d13696","method":{"position":"com.google.gson.Gson:532","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238032775/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src != null) {\n                {\n                    if (src != null) {\n                        {\n                            java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n                            toJson(src, typeOfSrc, writer);\n                            return writer.toString();\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238032775/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238032775/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"1b5e8cf5-3e47-11e6-bcf6-37cc279ccc4c","method":{"position":"com.google.gson.Gson:510","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238032775/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238032775/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (src == null) {\n                        return toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull);\n                    } \n                    return toJson(src, src.getClass());\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"1b5e8cf6-3e47-11e6-bcf6-6d23ea2c9002","method":{"position":"com.google.gson.Gson:719","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.lang.String json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238032775/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (json == null) {\n                {\n                    if (json == null) {\n                        {\n                            if (json == null) {\n                                return null;\n                            } \n                            java.io.StringReader java.io.StringReader = new java.io.StringReader(json);\n                            T T = ((T)(fromJson(reader, typeOfT)));\n                            return target;\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238032775/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new com.google.gson.JsonSyntaxException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238032775/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"1b5eb407-3e47-11e6-bcf6-a9ba43ba5baf","method":{"position":"com.google.gson.Gson:510","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238032775/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238032775/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (src == null) {\n                        return toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull);\n                    } \n                    return toJson(src, src.getClass());\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:452","type":"CtBinaryOperatorImpl","sourcecode":"typeAdapter instanceof com.google.gson.InstanceCreator<?>"},"failures":[],"tindex":"1b5eb408-3e47-11e6-bcf6-753f75c2d6a7","method":{"position":"com.google.gson.TreeTypeAdapter:103","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newTypeHierarchyFactory(java.lang.Class<?> hierarchyType, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof com.google.gson.InstanceCreator<?>) {\n        {\n            if ((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) {\n                {\n                    return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , null , false , hierarchyType);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238032775/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238032775/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:167","type":"CtBinaryOperatorImpl","sourcecode":"a instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"1b5eb409-3e47-11e6-bcf6-f56505070078","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:223","type":"CtMethodImpl","sourcecode":"private boolean equal(java.lang.Object a, java.lang.Object b) {\n    if (b instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238032775/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (a == b) || ((a != null) && (a.equals(b)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[8,9,10,11,12,13,14,15,196,197,198,199,200,201,202,203,204,205,206,207,208,16,17,19,20,21,24,28,29,31,33,209,210,211,212,213,214,215,43,216,217,218,44,219,220,221,47,48,49,50,51,222,223,224,225,226,64,65,227,66,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,70,266,267,268,269,270,271,194,272,273,274,275,276,277,278,279,280,281,282,283,85,86,90,94,284,95,285,96,286,98,287,288,289,290,99,291,100,101,102,103,104,105,106,292,107,108,109,110,293,294,295,296,297,298,299,300,111,301,302,303,304,305,306,307,308,309,310,311,312,313,113,114,115,116,117,119,120,121,122,124,314,315,316,317,318,319,320,321,322,128,129,323,324,325,132,134,135,136,326,327,328,329,330,331,141,142,144,145,146,148,149,151,152,153,154,155,156,332,160,161,333,162,164,167,168,334,335,171,172,173,174,175,176,177,178,181,336,337,185,186,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353],"tindex":"1b5edb1a-3e47-11e6-bcf6-8535dac4e13e","method":{"position":"com.google.gson.internal.Excluder:149","type":"CtMethodImpl","sourcecode":"public boolean excludeField(java.lang.reflect.Field field, boolean serialize) {\n    if (field.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238032775/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (field.isSynthetic()) {\n                {\n                    if (((int) & (field.getModifiers())) != 0) {\n                        return true;\n                    } \n                    if (((double) != (com.google.gson.internal.Excluder.com.google.gson.internal.Excluder.double)) && (!(isValidVersion(field.getAnnotation(com.google.gson.annotations.Since.com.google.gson.annotations.Since.java.lang.Class), field.getAnnotation(com.google.gson.annotations.Until.com.google.gson.annotations.Until.java.lang.Class))))) {\n                        return true;\n                    } \n                    if (field.isSynthetic()) {\n                        return true;\n                    } \n                    if (boolean) {\n                        com.google.gson.annotations.Expose com.google.gson.annotations.Expose = field.getAnnotation(com.google.gson.annotations.Expose.com.google.gson.annotations.Expose.java.lang.Class);\n                        if ((annotation == null) || (serialize ? !(annotation.serialize()) : !(annotation.deserialize()))) {\n                            return true;\n                        } \n                    } \n                    if ((!(boolean)) && (isInnerClass(field.getType()))) {\n                        return true;\n                    } \n                    if (isAnonymousOrLocal(field.getType())) {\n                        return true;\n                    } \n                    java.util.List<com.google.gson.ExclusionStrategy> java.util.List<com.google.gson.ExclusionStrategy> = serialize ? java.util.List<com.google.gson.ExclusionStrategy> : java.util.List<com.google.gson.ExclusionStrategy>;\n                    if (!(list.isEmpty())) {\n                        com.google.gson.FieldAttributes com.google.gson.FieldAttributes = new com.google.gson.FieldAttributes(field);\n                        for (com.google.gson.ExclusionStrategy com.google.gson.ExclusionStrategy : list) {\n                            if (exclusionStrategy.shouldSkipField(fieldAttributes)) {\n                                return true;\n                            } \n                        }\n                    } \n                    return false;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238032775/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"field"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[],"tindex":"1b5f022b-3e47-11e6-bcf6-4dbce6eab55b","method":{"position":"com.google.gson.Gson:532","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238032775/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src != null) {\n                {\n                    if (src != null) {\n                        {\n                            java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n                            toJson(src, typeOfSrc, writer);\n                            return writer.toString();\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238032775/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238032775/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"1b5f022c-3e47-11e6-bcf6-81294b5ca39b","method":{"position":"com.google.gson.Gson:719","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.lang.String json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238032775/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (json == null) {\n                {\n                    if (json == null) {\n                        {\n                            if (json == null) {\n                                return null;\n                            } \n                            java.io.StringReader java.io.StringReader = new java.io.StringReader(json);\n                            T T = ((T)(fromJson(reader, typeOfT)));\n                            return target;\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238032775/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new com.google.gson.JsonSyntaxException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238032775/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:167","type":"CtUnaryOperatorImpl","sourcecode":"!create"},"failures":[196,197,198,202,203,208,26,27,45,354,51,54,226,355,278,356,357,358,359,360,361,362,363,294,295,299,120,121,122,319,320,136,141,142,144,145,148,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381],"tindex":"1b5f022d-3e47-11e6-bcf6-8d0f82cd13be","method":{"position":"com.google.gson.internal.LinkedTreeMap:121","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedTreeMap.Node<K, V> find(K key, boolean create) {\n    if (!create) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238032775/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.util.Comparator<? super K> java.util.Comparator<? super K> = com.google.gson.internal.LinkedTreeMap.this.java.util.Comparator<? super K>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            int int = 0;\n            if (nearest != null) {\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                java.lang.Comparable<java.lang.Object> java.lang.Comparable<java.lang.Object> = comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>) ? ((java.lang.Comparable<java.lang.Object>)(key)) : null;\n                while (true) {\n                    comparison = comparableKey != null ? comparableKey.compareTo(nearest.K) : comparator.compare(key, nearest.K);\n                    if (comparison == 0) {\n                        return nearest;\n                    } \n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = comparison < 0 ? nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> : nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    if (child == null) {\n                        break;\n                    } \n                    nearest = child;\n                }\n            } \n            if (!create) {\n                return null;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.this.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            if (nearest == null) {\n                if ((comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>)) && (!(key instanceof java.lang.Comparable))) {\n                    throw new java.lang.ClassCastException(((key.getClass().getName()) + \" is not Comparable\"));\n                } \n                created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n            } else {\n                created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                if (comparison < 0) {\n                    nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                } else {\n                    nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                }\n                rebalance(nearest, true);\n            }\n            (int)++;\n            (int)++;\n            return created;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"create":"create"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Preconditions:41","type":"CtUnaryOperatorImpl","sourcecode":"!condition"},"failures":[],"tindex":"1b5f293e-3e47-11e6-bcf6-c169843fda9b","method":{"position":"com.google.gson.internal.$Gson$Preconditions:40","type":"CtMethodImpl","sourcecode":"public static void checkArgument(boolean condition) {\n    if (!condition) {\n        throw new java.lang.IllegalArgumentException();\n    } \n}"},"series":0,"name":"addParameterCondition","variableMap":{"condition":"condition"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"1b5f293f-3e47-11e6-bcf6-6d06bbeab423","method":{"position":"com.google.gson.Gson:719","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.lang.String json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238032775/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (json == null) {\n                {\n                    if (json == null) {\n                        {\n                            if (json == null) {\n                                return null;\n                            } \n                            java.io.StringReader java.io.StringReader = new java.io.StringReader(json);\n                            T T = ((T)(fromJson(reader, typeOfT)));\n                            return target;\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238032775/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new com.google.gson.JsonSyntaxException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238032775/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:92","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof java.util.Iterator"},"failures":[],"tindex":"1b5f4f50-3e47-11e6-bcf6-2b62ff72f129","method":{"position":"com.google.gson.internal.LinkedTreeMap:574","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (o instanceof java.util.Iterator) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238032775/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (!(o instanceof java.util.Map.Entry)) {\n                return false;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n            if (node == null) {\n                return false;\n            } \n            removeInternal(node, true);\n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:278","type":"CtBinaryOperatorImpl","sourcecode":"node != null"},"failures":[51,267,276,277,278,279,298,299,382,148,154,352,368,369,383,370,384,373,385],"tindex":"1b5f4f51-3e47-11e6-bcf6-5b3d9dacbfe2","method":{"position":"com.google.gson.internal.LinkedTreeMap:284","type":"CtMethodImpl","sourcecode":"private void replaceInParent(com.google.gson.internal.LinkedTreeMap.Node<K, V> node, com.google.gson.internal.LinkedTreeMap.Node<K, V> replacement) {\n    if (replacement != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238032775/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n            if (replacement != null) {\n                replacement.com.google.gson.internal.LinkedTreeMap.Node<K, V> = parent;\n            } \n            if (parent != null) {\n                if ((parent.com.google.gson.internal.LinkedTreeMap.Node<K, V>) == node) {\n                    parent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                } else {\n                    assert (parent.com.google.gson.internal.LinkedTreeMap.Node<K, V>) == node;\n                    parent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                }\n            } else {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"replacement"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:274","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[8,9,10,11,12,13,14,15,196,197,198,199,200,201,202,203,204,205,206,207,208,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,209,210,42,211,212,213,214,215,43,216,217,218,44,219,45,220,221,46,47,48,49,50,51,52,53,386,222,223,54,224,225,55,56,57,58,59,60,61,62,63,64,65,227,66,228,229,230,231,67,387,232,233,234,235,236,237,238,239,240,241,242,68,243,388,244,245,389,246,390,247,391,248,69,249,250,251,252,392,253,254,255,256,393,394,257,258,259,260,261,262,263,264,265,70,395,396,266,267,397,71,398,399,72,268,400,401,402,403,355,269,270,404,405,406,407,408,409,410,411,412,271,413,414,415,194,416,73,417,418,419,420,272,421,422,423,424,425,74,426,273,75,76,427,428,429,430,431,77,432,433,434,78,435,436,437,274,438,439,79,80,275,81,82,440,195,441,442,443,276,277,278,279,280,444,281,282,283,83,84,85,86,87,88,89,90,445,91,92,446,356,447,93,357,358,448,449,450,359,94,451,452,360,453,454,455,456,361,284,457,458,459,95,460,285,96,97,461,362,286,462,363,463,464,465,466,98,287,288,289,290,99,291,100,101,102,103,104,105,106,292,107,108,109,110,293,294,295,296,297,298,299,300,467,468,469,111,470,471,301,302,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,308,492,309,493,494,495,496,497,498,499,500,310,501,502,503,504,311,312,505,506,313,507,382,112,508,509,510,511,512,113,114,115,116,117,118,119,120,121,122,123,124,513,125,126,127,314,514,515,315,316,317,318,319,320,321,322,128,129,130,516,517,518,519,520,521,522,523,524,525,526,131,527,528,529,530,531,532,323,324,325,533,534,535,536,537,132,133,134,135,136,326,137,327,328,329,330,538,539,138,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,139,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,0,585,586,587,588,589,590,591,592,593,594,595,596,1,2,597,598,599,600,601,602,603,140,604,331,605,606,607,3,608,609,610,611,612,613,614,4,615,616,617,618,619,5,620,621,622,623,624,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,332,157,158,159,160,161,333,162,163,164,165,166,167,168,625,626,169,627,628,629,334,335,630,631,632,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,633,338,634,635,339,636,340,6,637,188,341,342,343,638,189,190,352,191,192,193,639,640,641],"tindex":"1b5f7662-3e47-11e6-bcf6-ef976413c6c0","method":{"position":"com.google.gson.Gson:273","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> floatAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return ((float)(in.nextDouble()));\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    float float = value.floatValue();\n                    checkValidFloatingPoint(floatValue);\n                    out.value(value);\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238032775/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[367,368],"tindex":"1b5f9d73-3e47-11e6-bcf6-7d6d0cfe5da3","method":{"position":"com.google.gson.TypeAdapter:268","type":"CtMethodImpl","sourcecode":"public final T fromJson(java.lang.String json) throws java.io.IOException {\n    if (json == null) {\n        {\n            return fromJson(new java.io.StringReader(json));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238032775/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"1b5f9d74-3e47-11e6-bcf6-7316f76118aa","method":{"position":"com.google.gson.JsonObject:100","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Boolean value) {\n    if (property == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238032775/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            add(property, createJsonElement(value));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:141","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.WildcardType"},"failures":[],"tindex":"1b5f9d75-3e47-11e6-bcf6-b96008e49056","method":{"position":"com.google.gson.internal.$Gson$Types:117","type":"CtMethodImpl","sourcecode":"public static java.lang.Class<?> getRawType(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class<?>) {\n        return ((java.lang.Class<?>)(type));\n    } else if (type instanceof java.lang.reflect.ParameterizedType) {\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(type));\n        java.lang.reflect.Type java.lang.reflect.Type = parameterizedType.getRawType();\n        com.google.gson.internal.$Gson$Preconditions.checkArgument((rawType instanceof java.lang.Class));\n        return ((java.lang.Class<?>)(rawType));\n    } else if (type instanceof java.lang.reflect.GenericArrayType) {\n        java.lang.reflect.Type java.lang.reflect.Type = ((java.lang.reflect.GenericArrayType)(type)).getGenericComponentType();\n        return java.lang.reflect.Array.newInstance(com.google.gson.internal.$Gson$Types.getRawType(componentType), 0).getClass();\n    } else if (type instanceof java.lang.reflect.TypeVariable) {\n        return java.lang.Object.java.lang.Object.java.lang.Class;\n    } else if (type instanceof java.lang.reflect.WildcardType) {\n        return com.google.gson.internal.$Gson$Types.getRawType(((java.lang.reflect.WildcardType)(type)).getUpperBounds()[0]);\n    } else {\n        java.lang.String java.lang.String = type == null ? \"null\" : type.getClass().getName();\n        throw new java.lang.IllegalArgumentException(((((\"Expected a Class, ParameterizedType, or \" + \"GenericArrayType, but <\") + type) + \"> is of type \") + className));\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[],"tindex":"1b5f9d76-3e47-11e6-bcf6-c79319d71a43","method":{"position":"com.google.gson.internal.Excluder:149","type":"CtMethodImpl","sourcecode":"public boolean excludeField(java.lang.reflect.Field field, boolean serialize) {\n    if (field.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238032775/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (field.isSynthetic()) {\n                {\n                    if (((int) & (field.getModifiers())) != 0) {\n                        return true;\n                    } \n                    if (((double) != (com.google.gson.internal.Excluder.com.google.gson.internal.Excluder.double)) && (!(isValidVersion(field.getAnnotation(com.google.gson.annotations.Since.com.google.gson.annotations.Since.java.lang.Class), field.getAnnotation(com.google.gson.annotations.Until.com.google.gson.annotations.Until.java.lang.Class))))) {\n                        return true;\n                    } \n                    if (field.isSynthetic()) {\n                        return true;\n                    } \n                    if (boolean) {\n                        com.google.gson.annotations.Expose com.google.gson.annotations.Expose = field.getAnnotation(com.google.gson.annotations.Expose.com.google.gson.annotations.Expose.java.lang.Class);\n                        if ((annotation == null) || (serialize ? !(annotation.serialize()) : !(annotation.deserialize()))) {\n                            return true;\n                        } \n                    } \n                    if ((!(boolean)) && (isInnerClass(field.getType()))) {\n                        return true;\n                    } \n                    if (isAnonymousOrLocal(field.getType())) {\n                        return true;\n                    } \n                    java.util.List<com.google.gson.ExclusionStrategy> java.util.List<com.google.gson.ExclusionStrategy> = serialize ? java.util.List<com.google.gson.ExclusionStrategy> : java.util.List<com.google.gson.ExclusionStrategy>;\n                    if (!(list.isEmpty())) {\n                        com.google.gson.FieldAttributes com.google.gson.FieldAttributes = new com.google.gson.FieldAttributes(field);\n                        for (com.google.gson.ExclusionStrategy com.google.gson.ExclusionStrategy : list) {\n                            if (exclusionStrategy.shouldSkipField(fieldAttributes)) {\n                                return true;\n                            } \n                        }\n                    } \n                    return false;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238032775/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"field"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:107","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonArray"},"failures":[],"tindex":"1b5feb97-3e47-11e6-bcf6-8d28dc564512","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:808","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonArray) {\n        {\n            if (!(o instanceof java.util.Map.Entry)) {\n                return false;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n            if (node == null) {\n                return false;\n            } \n            removeInternal(node, true);\n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238032775/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[200,206,215,49,51,222,223,64,231,232,236,246,249,251,252,257,259,262,267,268,276,277,278,279,86,90,96,291,111,301,302,308,309,310,312,531,323,581,593,616,622,146,148,149,152,174,190,352],"tindex":"1b5feb98-3e47-11e6-bcf6-c58eb4678003","method":{"position":"com.google.gson.internal.bind.TypeAdapters:267","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238032775/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:716","type":"CtBinaryOperatorImpl","sourcecode":"(c < '0') || (c > '9')"},"failures":[],"tindex":"1b5feb99-3e47-11e6-bcf6-051688158194","method":{"position":"com.google.gson.stream.JsonReader:755","type":"CtMethodImpl","sourcecode":"private boolean isLiteral(char c) throws java.io.IOException {\n    if ((c < '0') || (c > '9')) {\n        {\n            switch (c) {\n                case '/' :\n                case '\\\\' :\n                case ';' :\n                case '#' :\n                case '=' :\n                    checkLenient();\n                case '{' :\n                case '}' :\n                case '[' :\n                case ']' :\n                case ':' :\n                case ',' :\n                case ' ' :\n                case '\\t' :\n                case '\\f' :\n                case '\\r' :\n                case '\\n' :\n                    return false;\n                default :\n                    return true;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238032775/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"c"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[],"tindex":"1b6039ba-3e47-11e6-bcf6-3b5a3842b696","method":{"position":"com.google.gson.Gson:136","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238032775/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return toJsonTree(src, typeOfSrc);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"1b6060cb-3e47-11e6-bcf6-53c386e6b843","method":{"position":"com.google.gson.Gson:532","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238032775/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src != null) {\n                {\n                    if (src != null) {\n                        {\n                            java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n                            toJson(src, typeOfSrc, writer);\n                            return writer.toString();\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238032775/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238032775/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:274","type":"CtBinaryOperatorImpl","sourcecode":"target instanceof java.lang.String"},"failures":[],"tindex":"1b6060cc-3e47-11e6-bcf6-6dd9d7a46406","method":{"position":"com.google.gson.JsonPrimitive:273","type":"CtMethodImpl","sourcecode":"private static boolean isPrimitiveOrString(java.lang.Object target) {\n    if (target instanceof java.lang.String) {\n        {\n            if (target instanceof java.lang.String) {\n                return true;\n            } \n            java.lang.Class<?> java.lang.Class<?> = target.getClass();\n            for (java.lang.Class<?> java.lang.Class<?> : com.google.gson.JsonPrimitive.com.google.gson.JsonPrimitive.java.lang.Class<?>[]) {\n                if (standardPrimitive.isAssignableFrom(classOfPrimitive)) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238032775/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"target":"target"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"1b6060cd-3e47-11e6-bcf6-4ff15d7e078e","method":{"position":"com.google.gson.Gson:261","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            double double = value.doubleValue();\n            checkValidFloatingPoint(doubleValue);\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238032775/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":33,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
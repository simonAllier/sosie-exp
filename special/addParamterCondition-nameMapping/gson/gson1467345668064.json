{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":65,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":320,"com.google.gson.functional.StringTest.testStringValueDeserialization":577,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":231,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":435,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":499,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":398,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":79,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":56,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":174,"com.google.gson.MixedStreamTest.testWriteLenient":277,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":27,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":249,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":18,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":190,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":25,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":194,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":442,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":328,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":537,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":220,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":407,"com.google.gson.JsonObjectTest.testAddingNullPropertyValue":245,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":147,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":162,"com.google.gson.functional.ObjectTest.testSingletonLists":23,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":203,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":500,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":321,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":393,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":596,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":223,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":574,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":512,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":38,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":347,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":445,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":206,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":304,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":585,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":96,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":353,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":436,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":226,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":385,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":639,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":561,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":621,"com.google.gson.functional.EnumTest.testEnumCaseMapping":536,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":319,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":635,"com.google.gson.functional.JsonTreeTest.testToJsonTree":95,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":384,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":356,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":254,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":109,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreBehindInVersion":276,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":170,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":248,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":657,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":549,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":394,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":493,"com.google.gson.internal.LinkedHashTreeMapTest.testAvlBuilder":646,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":519,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":316,"com.google.gson.functional.ObjectTest.testNullDeserialization":370,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":233,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":583,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":35,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":453,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":634,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":399,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":367,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":559,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":124,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":45,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":633,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":600,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":252,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":514,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":180,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":458,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":457,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":511,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":279,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":658,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":421,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":253,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":463,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":47,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":309,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":419,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":498,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":175,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":433,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":616,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":140,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":490,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":88,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":213,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":337,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":280,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":540,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":434,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":44,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":543,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":31,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":84,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":243,"com.google.gson.JsonPrimitiveTest.testEqualsAcrossTypes":270,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":1,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":403,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":627,"com.google.gson.metrics.PerformanceTest.testDummy":345,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":204,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":100,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":160,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":378,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":588,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":601,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":631,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":297,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":376,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":76,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":492,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":123,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":236,"com.google.gson.functional.CollectionTest.testSetDeserialization":193,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":221,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":34,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":359,"com.google.gson.functional.EnumTest.testEnumSet":529,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":426,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":161,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":587,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":332,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":483,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":39,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":159,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":244,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":438,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":78,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":447,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":224,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":556,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":448,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":396,"com.google.gson.functional.MapTest.testHashMapDeserialization":610,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":567,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":504,"com.google.gson.MixedStreamTest.testReadNulls":352,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":374,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":381,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":64,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":131,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":85,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":605,"com.google.gson.functional.MapTest.testSortedMap":624,"com.google.gson.functional.MapTest.testMapSerialization":620,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":66,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":71,"com.google.gson.JsonPrimitiveTest.testByteEqualsShort":269,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":431,"com.google.gson.JsonPrimitiveTest.testByteEqualsBigInteger":261,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":551,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":199,"com.google.gson.functional.MapTest.testSerializeMaps":331,"com.google.gson.functional.MapTest.testComplexKeysSerialization":230,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":358,"com.google.gson.JsonPrimitiveTest.testLongEqualsBigInteger":263,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":630,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":642,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":554,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":173,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":235,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":153,"com.google.gson.internal.LinkedTreeMapTest.testRemoveRootDoesNotDoubleUnlink":661,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":143,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":602,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":534,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":15,"com.google.gson.internal.bind.JsonElementReaderTest.testWrongType":286,"com.google.gson.internal.LinkedHashTreeMapTest.testDoubleCapacity":647,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":80,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":369,"com.google.gson.functional.MapTest.testStringKeyDeserialization":629,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":552,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":590,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":282,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":402,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":632,"com.google.gson.functional.PrettyPrintingTest.testMap":354,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":397,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":525,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":564,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":68,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":477,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":603,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":346,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":553,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":659,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":325,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":578,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":296,"com.google.gson.functional.CollectionTest.testQueueSerialization":314,"com.google.gson.functional.MapTest.testMapSerializationEmpty":628,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":427,"com.google.gson.functional.MapTest.testMapOfMapSerialization":335,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":418,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":495,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":570,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":242,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":278,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":597,"com.google.gson.functional.FieldNamingTest.testIdentity":200,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":322,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":589,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":57,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":48,"com.google.gson.internal.bind.JsonElementReaderTest.testNestedArrays":287,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":22,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":82,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":94,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":361,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":387,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":640,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":323,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":342,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":187,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":424,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":507,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":6,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":484,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":241,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":489,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":513,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":607,"com.google.gson.functional.MapTest.testMapSubclassSerialization":330,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":456,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":62,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":169,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":360,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":9,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":171,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":272,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":416,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":176,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":469,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":476,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":222,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":158,"com.google.gson.functional.EnumTest.testEnumSubclass":532,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":437,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":37,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":348,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":386,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":120,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":441,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":215,"com.google.gson.JsonPrimitiveTest.testShortEqualsInteger":267,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":138,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":389,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":189,"com.google.gson.JsonPrimitiveTest.testByteEqualsLong":257,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":422,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":188,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":98,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":5,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":548,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":363,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":428,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":81,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":420,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":508,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":24,"com.google.gson.MixedStreamTest.testWriteNulls":351,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":609,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":547,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":538,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":308,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":156,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":234,"com.google.gson.CommentsTest.testParseComments":641,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":26,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":150,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":592,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":128,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":184,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":440,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":375,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":324,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":623,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":471,"com.google.gson.MixedStreamTest.testReadInvalidState":349,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":218,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":167,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":455,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":510,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":72,"com.google.gson.JsonParserTest.testParseMixedArray":652,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":294,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":645,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":555,"com.google.gson.JsonPrimitiveTest.testDoubleEqualsBigDecimal":259,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":125,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAheadInVersion":274,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":411,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":240,"com.google.gson.JsonArrayTest.testRemove":284,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":451,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":496,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":546,"com.google.gson.functional.MapTest.testMapDeserialization":615,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":491,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":357,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":608,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":146,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":107,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":333,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":149,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":299,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":144,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":93,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":533,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":111,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":49,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":366,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":133,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":527,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":99,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":480,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":166,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":142,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":186,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":14,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":622,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":251,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":383,"com.google.gson.functional.PrimitiveTest.testShortSerialization":454,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":594,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":520,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":444,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":563,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":417,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":443,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":113,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":395,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":196,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":531,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":191,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":61,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":612,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":410,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":461,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":575,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":177,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":288,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":154,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":506,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":13,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":650,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":467,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":462,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":655,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":380,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":50,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":106,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":214,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":205,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":473,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":643,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":91,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":119,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":216,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":423,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":54,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":30,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":535,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":135,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":293,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":112,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":192,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":523,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":591,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":145,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":151,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":497,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":401,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":87,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":486,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":152,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":502,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":103,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":565,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":390,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":450,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":425,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":283,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":2,"com.google.gson.JsonPrimitiveTest.testEquals":268,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":148,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":530,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":70,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":73,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":28,"com.google.gson.functional.MapTest.testGeneralMapField":229,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":542,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":466,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":121,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":183,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":524,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":298,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":625,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":3,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":246,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":302,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":446,"com.google.gson.MixedStreamTest.testReadMixedStreamed":12,"com.google.gson.ObjectTypeAdapterTest.testDeserializeNullValue":648,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":412,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":481,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":617,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":86,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":318,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":339,"com.google.gson.stream.JsonWriterTest.testNonFiniteDoubles":4,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":202,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":429,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":562,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":77,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":115,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":618,"com.google.gson.JsonArrayTest.testDeepCopy":289,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":517,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":611,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":465,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":593,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":17,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":209,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":413,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":651,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":494,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":539,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":58,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":472,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":569,"com.google.gson.JsonPrimitiveTest.testFloatEqualsDouble":262,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":522,"com.google.gson.functional.ObjectTest.testNestedDeserialization":55,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":599,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":368,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":470,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":67,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":97,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":560,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":464,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":127,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":379,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":579,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":619,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":157,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":281,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":134,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":21,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":178,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":573,"com.google.gson.functional.ObjectTest.testNullSerialization":364,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":137,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":516,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":613,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":228,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":388,"com.google.gson.functional.MapTest.testInterfaceTypeMap":227,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":550,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":526,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":102,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":391,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":172,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":654,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":141,"com.google.gson.MixedStreamTest.testReadClosed":350,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":528,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":474,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":558,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":405,"com.google.gson.JsonPrimitiveTest.testIntegerEqualsLong":265,"com.google.gson.MixedStreamTest.testWriteClosed":11,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":69,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":315,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":29,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":105,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":515,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":163,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":101,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":130,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":52,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":126,"com.google.gson.JsonPrimitiveTest.testShortEqualsLong":260,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":117,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":32,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":108,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":568,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":210,"com.google.gson.JsonPrimitiveTest.testShortEqualsBigInteger":256,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":432,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":212,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":139,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":317,"com.google.gson.internal.bind.JsonElementReaderTest.testSkipValue":285,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":503,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":372,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":238,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":468,"com.google.gson.JsonParserTest.testParseInvalidJson":290,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":295,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":92,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":479,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":237,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":305,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":129,"com.google.gson.functional.CollectionTest.testQueueDeserialization":576,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":415,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":430,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":582,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":373,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":211,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":509,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":46,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":225,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":488,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":53,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":181,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":313,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":8,"com.google.gson.functional.MapTest.testRawMapSerialization":336,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":572,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":501,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":303,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":41,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":132,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":75,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":521,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":338,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":307,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":329,"com.google.gson.functional.PrimitiveTest.testByteSerialization":452,"com.google.gson.ObjectTypeAdapterTest.testSerialize":7,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":340,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":179,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":400,"com.google.gson.JsonPrimitiveTest.testEqualsIntegerAndBigInteger":258,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":19,"com.google.gson.JsonPrimitiveTest.testFloatEqualsBigDecimal":255,"com.google.gson.JsonPrimitiveTest.testByteEqualsInteger":264,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":311,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":197,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":164,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":580,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":638,"com.google.gson.functional.MapTest.testMapWithQuotes":334,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":408,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":478,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":581,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":586,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":382,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":598,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":182,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":459,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":475,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":219,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":518,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":155,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":51,"com.google.gson.internal.LinkedHashTreeMapTest.testDoubleCapacityAllNodesOnLeft":644,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":16,"com.google.gson.functional.ObjectTest.testEmptyStringDeserialization":365,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":439,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":485,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":33,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":312,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":116,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":247,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":20,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":208,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":487,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":449,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":606,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":571,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":545,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":250,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":300,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":306,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":136,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":59,"com.google.gson.JsonPrimitiveTest.testIntegerEqualsBigInteger":266,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":273,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":63,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAtSameVersion":275,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":604,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":168,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":392,"com.google.gson.internal.LinkedHashTreeMapTest.testRemoveRootDoesNotDoubleUnlink":660,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":595,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":653,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":40,"com.google.gson.functional.ObjectTest.testNestedSerialization":42,"com.google.gson.JsonObjectTest.testAddingStringProperties":343,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":90,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":301,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":404,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":584,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":292,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":626,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":74,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":118,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":291,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":637,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":36,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":371,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":460,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":104,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":201,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":114,"com.google.gson.GsonBuilderTest.testCreatingMoreThanOnce":344,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":406,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":636,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":43,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":110,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":207,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":656,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":326,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":310,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":122,"com.google.gson.functional.CollectionTest.testSetSerialization":195,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":217,"com.google.gson.functional.StringTest.testStringValueSerialization":327,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":355,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":89,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":0,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":239,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":566,"com.google.gson.MixedStreamTest.testWriteInvalidState":10,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":541,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":362,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":409,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":185,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":414,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":83,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":482,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":198,"com.google.gson.ObjectTypeAdapterTest.testDeserialize":649,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":232,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":271,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":60,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":557,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":165,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":505,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":341,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":614,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":377,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":544},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:127","type":"CtInvocationImpl"},"failures":[0,1,2,3],"tindex":"709c58d3-3f40-11e6-82cb-0b87b14413f7","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:125","type":"CtMethodImpl","sourcecode":"private java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> getBoundFields(com.google.gson.Gson context, com.google.gson.reflect.TypeToken<?> type, java.lang.Class<?> raw) {\n    if (raw.isInterface()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344217407/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (raw.isInterface()) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344217407/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> = new java.util.LinkedHashMap<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField>();\n                    if (raw.isInterface()) {\n                        return result;\n                    } \n                    java.lang.reflect.Type java.lang.reflect.Type = type.getType();\n                    while (raw != (java.lang.Object.java.lang.Object.java.lang.Class)) {\n                        java.lang.reflect.Field[] java.lang.reflect.Field[] = raw.getDeclaredFields();\n                        for (java.lang.reflect.Field java.lang.reflect.Field : fields) {\n                            boolean boolean = excludeField(field, true);\n                            boolean boolean = excludeField(field, false);\n                            if ((!serialize) && (!deserialize)) {\n                                continue;\n                            } \n                            field.setAccessible(true);\n                            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, field.getGenericType());\n                            com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = createBoundField(context, field, getFieldName(field), com.google.gson.reflect.TypeToken.get(fieldType), serialize, deserialize);\n                            com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = result.put(boundField.java.lang.String, boundField);\n                            if (previous != null) {\n                                throw new java.lang.IllegalArgumentException(((declaredType + \" declares multiple JSON fields named \") + (previous.java.lang.String)));\n                            } \n                        }\n                        type = com.google.gson.reflect.TypeToken.get(com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, raw.getGenericSuperclass()));\n                        raw = type.getRawType();\n                    }\n                    return result;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"raw"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:462","type":"CtBinaryOperatorImpl"},"failures":[4],"tindex":"709d4334-3f40-11e6-82cb-e733a34abd25","method":{"position":"com.google.gson.stream.JsonWriter:461","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(double value) throws java.io.IOException {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344217407/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                throw new java.lang.IllegalArgumentException((\"Numeric values must be finite, but was \" + value));\n            } \n            writeDeferredName();\n            beforeValue(false);\n            java.io.Writer.append(java.lang.Double.toString(value));\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:462","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"709d6a45-3f40-11e6-82cb-53523cd3493a","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:162","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(double value) throws java.io.IOException {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        {\n            if ((!(isLenient())) && ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value)))) {\n                throw new java.lang.IllegalArgumentException((\"JSON forbids NaN and infinities: \" + value));\n            } \n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344217407/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:118","type":"CtBinaryOperatorImpl"},"failures":[5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,0,81,82,1,83,84,85,86,87,88,89,2,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244],"tindex":"709db866-3f40-11e6-82cb-bb697f2ac461","method":{"position":"com.google.gson.internal.Primitives:69","type":"CtMethodImpl","sourcecode":"public static boolean isPrimitive(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344217407/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (type instanceof java.lang.Class<?>) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344217407/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return com.google.gson.internal.Primitives.com.google.gson.internal.Primitives.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.containsKey(type);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonObject:54","type":"CtBinaryOperatorImpl"},"failures":[245],"tindex":"709e2d97-3f40-11e6-82cb-c537bc33430f","method":{"position":"com.google.gson.JsonObject:53","type":"CtMethodImpl","sourcecode":"public void add(java.lang.String property, com.google.gson.JsonElement value) {\n    if (property == null) {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344217407/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (value == null) {\n                        value = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n                    } \n                    com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.put(property, value);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344217407/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:554","type":"CtBinaryOperatorImpl"},"failures":[246,247,248,249,250,251],"tindex":"709e54a8-3f40-11e6-82cb-175dc28ad3c4","method":{"position":"com.google.gson.GsonBuilder:551","type":"CtMethodImpl","sourcecode":"private void addTypeAdaptersForDate(java.lang.String datePattern, int dateStyle, int timeStyle, java.util.List<com.google.gson.TypeAdapterFactory> factories) {\n    if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344217407/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.DefaultDateTypeAdapter com.google.gson.DefaultDateTypeAdapter;\n            if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n                dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(datePattern);\n            } else if ((dateStyle != (java.text.DateFormat.java.text.DateFormat.int)) && (timeStyle != (java.text.DateFormat.java.text.DateFormat.int))) {\n                dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(dateStyle , timeStyle);\n            } else {\n                return ;\n            }\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.util.Date.java.util.Date.java.lang.Class), dateTypeAdapter));\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Timestamp.java.sql.Timestamp.java.lang.Class), dateTypeAdapter));\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Date.java.sql.Date.java.lang.Class), dateTypeAdapter));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"datePattern":"datePattern"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl"},"failures":[5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,0,81,82,1,83,84,85,86,87,88,89,2,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244],"tindex":"709e7bb9-3f40-11e6-82cb-43e18ec56339","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:116","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<?> getFieldAdapter(com.google.gson.Gson gson, java.lang.reflect.Field field, com.google.gson.reflect.TypeToken<?> fieldType) {\n    if (field.isSynthetic()) {\n        {\n            com.google.gson.annotations.JsonAdapter com.google.gson.annotations.JsonAdapter = field.getAnnotation(com.google.gson.annotations.JsonAdapter.com.google.gson.annotations.JsonAdapter.java.lang.Class);\n            if (annotation != null) {\n                com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory.getTypeAdapter(com.google.gson.internal.ConstructorConstructor, gson, fieldType, annotation);\n                if (adapter != null)\n                    return adapter;\n                \n            } \n            return gson.getAdapter(fieldType);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344217407/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"field"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:92","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"709ea2ca-3f40-11e6-82cb-1b56fa1b30dc","method":{"position":"com.google.gson.internal.LinkedTreeMap:574","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (o instanceof java.util.Iterator) {\n        {\n            if (!(o instanceof java.util.Map.Entry)) {\n                return false;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n            if (node == null) {\n                return false;\n            } \n            removeInternal(node, true);\n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344217407/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:111","type":"CtInvocationImpl"},"failures":[92,95,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270],"tindex":"709ec9db-3f40-11e6-82cb-cbb7b37e16a9","method":{"position":"com.google.gson.JsonPrimitive:333","type":"CtMethodImpl","sourcecode":"private static boolean isIntegral(com.google.gson.JsonPrimitive primitive) {\n    if (primitive.isString()) {\n        {\n            if ((primitive.java.lang.Object) instanceof java.lang.Number) {\n                java.lang.Number java.lang.Number = ((java.lang.Number)(primitive.java.lang.Object));\n                return ((((number instanceof java.math.BigInteger) || (number instanceof java.lang.Long)) || (number instanceof java.lang.Integer)) || (number instanceof java.lang.Short)) || (number instanceof java.lang.Byte);\n            } \n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344217407/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"primitive"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:127","type":"CtInvocationImpl"},"failures":[],"tindex":"709ec9dc-3f40-11e6-82cb-a77f158e6664","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:125","type":"CtMethodImpl","sourcecode":"private java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> getBoundFields(com.google.gson.Gson context, com.google.gson.reflect.TypeToken<?> type, java.lang.Class<?> raw) {\n    if (raw.isInterface()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344217407/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (raw.isInterface()) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344217407/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> = new java.util.LinkedHashMap<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField>();\n                    if (raw.isInterface()) {\n                        return result;\n                    } \n                    java.lang.reflect.Type java.lang.reflect.Type = type.getType();\n                    while (raw != (java.lang.Object.java.lang.Object.java.lang.Class)) {\n                        java.lang.reflect.Field[] java.lang.reflect.Field[] = raw.getDeclaredFields();\n                        for (java.lang.reflect.Field java.lang.reflect.Field : fields) {\n                            boolean boolean = excludeField(field, true);\n                            boolean boolean = excludeField(field, false);\n                            if ((!serialize) && (!deserialize)) {\n                                continue;\n                            } \n                            field.setAccessible(true);\n                            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, field.getGenericType());\n                            com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = createBoundField(context, field, getFieldName(field), com.google.gson.reflect.TypeToken.get(fieldType), serialize, deserialize);\n                            com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = result.put(boundField.java.lang.String, boundField);\n                            if (previous != null) {\n                                throw new java.lang.IllegalArgumentException(((declaredType + \" declares multiple JSON fields named \") + (previous.java.lang.String)));\n                            } \n                        }\n                        type = com.google.gson.reflect.TypeToken.get(com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, raw.getGenericSuperclass()));\n                        raw = type.getRawType();\n                    }\n                    return result;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"raw"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[113,137],"tindex":"709f17fd-3f40-11e6-82cb-81f705932e98","method":{"position":"com.google.gson.Gson:261","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344217407/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    double double = value.doubleValue();\n                    checkValidFloatingPoint(doubleValue);\n                    out.value(value);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344217407/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:578","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"709f3f0e-3f40-11e6-82cb-6fc9c617e599","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:429","type":"CtMethodImpl","sourcecode":"private void rotateRight(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344217407/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivotRight;\n            if (pivotRight != null) {\n                pivotRight.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            } \n            replaceInParent(root, pivot);\n            pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot;\n            root.int = (java.lang.Math.max((right != null ? right.int : 0), (pivotRight != null ? pivotRight.int : 0))) + 1;\n            pivot.int = (java.lang.Math.max(root.int, (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl"},"failures":[271],"tindex":"709f661f-3f40-11e6-82cb-4938e808c22c","method":{"position":"com.google.gson.JsonObject:111","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Character value) {\n    if (property == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344217407/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (property == null) {\n                {\n                    add(property, createJsonElement(value));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344217407/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:233","type":"CtBinaryOperatorImpl"},"failures":[272,205,206,207,209,210,212,273,274,275,276],"tindex":"709f8d30-3f40-11e6-82cb-d391206f00f2","method":{"position":"com.google.gson.internal.Excluder:232","type":"CtMethodImpl","sourcecode":"private boolean isValidSince(com.google.gson.annotations.Since annotation) {\n    if (annotation != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344217407/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (annotation != null) {\n                double double = annotation.value();\n                if (annotationVersion > (double)) {\n                    return false;\n                } \n            } \n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:274","type":"CtVariableReadImpl"},"failures":[277,278,279,280,281,282,283],"tindex":"709f8d31-3f40-11e6-82cb-652e57e372a8","method":{"position":"com.google.gson.Gson:249","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> doubleAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344217407/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return in.nextDouble();\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    double double = value.doubleValue();\n                    checkValidFloatingPoint(doubleValue);\n                    out.value(value);\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:86","type":"CtBinaryOperatorImpl"},"failures":[284],"tindex":"709fb442-3f40-11e6-82cb-f37ef20cce12","method":{"position":"com.google.gson.JsonArray:92","type":"CtMethodImpl","sourcecode":"public boolean remove(com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonArray) {\n        {\n            return java.util.List<com.google.gson.JsonElement>.remove(element);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344217407/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:133","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"709fb443-3f40-11e6-82cb-25f553c31a45","method":{"position":"com.google.gson.internal.Primitives:69","type":"CtMethodImpl","sourcecode":"public static boolean isPrimitive(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344217407/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (type instanceof java.lang.Class<?>) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344217407/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return com.google.gson.internal.Primitives.com.google.gson.internal.Primitives.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.containsKey(type);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:106","type":"CtBinaryOperatorImpl"},"failures":[285,286,287,288,289,290],"tindex":"709fb444-3f40-11e6-82cb-67a8a7068bff","method":{"position":"com.google.gson.JsonArray:57","type":"CtMethodImpl","sourcecode":"public void add(com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonArray) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344217407/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (element == null) {\n                element = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            java.util.List<com.google.gson.JsonElement>.add(element);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"709fdb55-3f40-11e6-82cb-63097c7e94a6","method":{"position":"com.google.gson.JsonParser:44","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement parse(java.lang.String json) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344217407/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            return parse(new java.io.StringReader(json));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl"},"failures":[5,6,8,9,291,15,16,292,17,293,23,26,29,32,36,39,42,47,52,57,58,62,63,64,65,66,72,74,83,84,87,88,89,2,90,3,294,295,92,93,95,96,97,98,99,100,102,103,104,107,108,109,296,297,298,118,125,126,129,131,133,135,136,140,299,300,161,171,179,301,302,180,181,303,304,305,306,307,308,309,310,311,183,312,186,189,190,313,314,315,316,192,317,194,318,319,320,321,322,323,324,325,326,327,328,203,208,329,223,224,330,331,332,333,225,334,335,227,228,229,336,230,337,231,238,239,240,241,242,243,338,244,339],"tindex":"709fdb56-3f40-11e6-82cb-2376564c00b5","method":{"position":"com.google.gson.internal.bind.TypeAdapters:361","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344217407/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"70a00267-3f40-11e6-82cb-a5b7ba6f4d63","method":{"position":"com.google.gson.Gson:576","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src != null) {\n        {\n            if (src == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344217407/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            } else {\n                {\n                    if (src == null) {\n                        {\n                            try {\n                                com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                                toJson(src, typeOfSrc, jsonWriter);\n                            } catch (java.io.IOException e) {\n                                throw new com.google.gson.JsonIOException(e);\n                            }\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344217407/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new com.google.gson.JsonIOException();\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344217407/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl"},"failures":[18,19,20,21,340,341,342,174,175,176,177,178,215,343],"tindex":"70a00268-3f40-11e6-82cb-27931d0bfae5","method":{"position":"com.google.gson.JsonObject:78","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.String value) {\n    if (value == null) {\n        {\n            add(property, createJsonElement(value));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344217407/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.JsonPrimitive:313","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"70a00269-3f40-11e6-82cb-9b5afec040f6","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:108","type":"CtMethodImpl","sourcecode":"public boolean writeField(java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344217407/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (!(boolean))\n                return false;\n            \n            java.lang.Object java.lang.Object = field.get(value);\n            return fieldValue != value;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:274","type":"CtVariableReadImpl"},"failures":[5,6,344,345,346,347,348,8,349,350,9,351,10,277,352,291,11,12,13,353,354,14,15,355,356,357,16,292,17,358,359,293,360,18,19,361,20,21,22,23,24,25,26,27,28,29,30,31,32,362,33,363,34,35,364,36,365,37,366,38,367,39,40,41,42,368,43,44,45,46,369,370,47,48,49,50,51,52,53,54,55,56,371,57,58,372,59,60,61,62,63,64,373,65,66,374,67,68,69,70,375,71,72,73,74,376,75,377,76,77,78,378,79,379,80,0,380,81,82,1,83,84,381,85,382,86,87,88,89,340,341,2,90,383,384,385,386,387,388,389,390,391,392,393,3,394,395,294,396,397,398,399,400,401,402,403,404,405,406,407,408,409,295,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,278,429,430,431,432,433,434,435,436,437,438,439,440,279,280,441,442,443,444,445,446,447,448,449,91,450,451,452,281,453,454,455,456,457,458,459,282,460,461,462,463,464,283,465,466,467,468,469,92,93,94,95,96,470,471,97,98,99,100,101,102,103,104,105,106,107,108,109,472,473,246,474,252,110,111,475,476,477,478,479,247,253,248,480,112,481,482,483,113,484,485,486,487,488,296,114,489,490,491,492,493,494,495,115,496,497,498,499,500,501,502,503,504,505,297,506,249,298,507,116,250,508,509,510,117,511,512,251,513,254,514,515,118,119,120,342,121,122,123,124,516,517,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,299,518,519,148,149,150,151,520,152,521,522,153,154,155,156,300,157,158,159,160,161,162,163,164,165,166,167,168,169,170,523,524,525,526,171,527,528,529,530,531,532,533,534,172,173,535,536,537,174,175,176,177,178,538,539,540,179,301,302,180,181,305,306,541,542,543,307,308,544,545,546,309,310,547,548,549,550,311,551,183,184,185,552,312,553,554,555,186,187,188,189,556,557,558,559,560,561,562,563,190,313,191,564,565,566,567,314,568,315,316,192,569,570,317,571,193,194,318,572,195,573,574,575,576,196,197,198,199,200,577,319,320,321,322,323,578,579,324,580,325,581,582,583,326,584,585,327,328,201,202,203,204,272,205,206,207,208,209,210,211,212,273,586,213,587,588,589,214,215,590,216,591,217,592,593,594,595,596,597,598,599,218,600,219,220,221,601,329,222,223,602,603,604,605,606,224,607,608,609,610,611,330,331,612,613,332,614,333,615,225,616,617,618,619,334,335,620,621,226,622,623,624,227,625,228,229,626,336,627,230,628,629,337,630,631,632,231,232,233,234,235,236,237,633,634,243,635,636,637,638,244,639,640,339,641],"tindex":"70a0297a-3f40-11e6-82cb-159ee7c6f64e","method":{"position":"com.google.gson.Gson:273","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> floatAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return ((float)(in.nextDouble()));\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    float float = value.floatValue();\n                    checkValidFloatingPoint(floatValue);\n                    out.value(value);\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344217407/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"70a0779b-3f40-11e6-82cb-f1c025c83d5f","method":{"position":"com.google.gson.DefaultDateTypeAdapter:94","type":"CtMethodImpl","sourcecode":"private java.util.Date deserializeToDate(com.google.gson.JsonElement json) {\n    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344217407/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (json == null) {\n                {\n                    if (json == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344217407/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            synchronized(java.text.DateFormat) {\n                                try {\n                                    return java.text.DateFormat.parse(json.getAsString());\n                                } catch (java.text.ParseException ignored) {\n                                }\n                                try {\n                                    return java.text.DateFormat.parse(json.getAsString());\n                                } catch (java.text.ParseException ignored) {\n                                }\n                                try {\n                                    return java.text.DateFormat.parse(json.getAsString());\n                                } catch (java.text.ParseException e) {\n                                    throw new com.google.gson.JsonSyntaxException(json.getAsString() , e);\n                                }\n                            }\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344217407/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"70a0779c-3f40-11e6-82cb-5f99cab8c38b","method":{"position":"com.google.gson.JsonObject:89","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Number value) {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344217407/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            add(property, createJsonElement(value));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:198","type":"CtBinaryOperatorImpl"},"failures":[145,148,149,153,155,158,159,164,165],"tindex":"70a0779d-3f40-11e6-82cb-89f12753b3e1","method":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:84","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Object array) throws java.io.IOException {\n    if (array == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344217407/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (array == null) {\n                out.nullValue();\n                return ;\n            } \n            out.beginArray();\n            for (int int = 0, int int = java.lang.reflect.Array.getLength(array) ; i < length ; i++) {\n                E E = ((E)(java.lang.reflect.Array.get(array, i)));\n                com.google.gson.TypeAdapter<E>.write(out, value);\n            }\n            out.endArray();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"70a113de-3f40-11e6-82cb-cfd848838f88","method":{"position":"com.google.gson.Gson:719","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.lang.String json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            if (json == null) {\n                return null;\n            } \n            java.io.StringReader java.io.StringReader = new java.io.StringReader(json);\n            T T = ((T)(fromJson(reader, typeOfT)));\n            return target;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344217407/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.TreeTypeAdapter:55","type":"CtInvocationImpl"},"failures":[642,643,361,94,97,98,99,103,104,109,129,130,231],"tindex":"70a13aef-3f40-11e6-82cb-992c1cad55c3","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:75","type":"CtMethodImpl","sourcecode":"private void put(com.google.gson.JsonElement value) {\n    if (value.isJsonNull()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344217407/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((java.lang.String) != null) {\n                if ((!(value.isJsonNull())) || (getSerializeNulls())) {\n                    com.google.gson.JsonObject com.google.gson.JsonObject = ((com.google.gson.JsonObject)(peek()));\n                    object.add(java.lang.String, value);\n                } \n                java.lang.String = null;\n            } else if (java.util.List<com.google.gson.JsonElement>.isEmpty()) {\n                com.google.gson.JsonElement = value;\n            } else {\n                com.google.gson.JsonElement com.google.gson.JsonElement = peek();\n                if (element instanceof com.google.gson.JsonArray) {\n                    ((com.google.gson.JsonArray)(element)).add(value);\n                } else {\n                    throw new java.lang.IllegalStateException();\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:305","type":"CtBinaryOperatorImpl"},"failures":[644,645,646,647],"tindex":"70a13af0-3f40-11e6-82cb-ad5682ecbba7","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:686","type":"CtMethodImpl","sourcecode":"void add(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node) {\n    if (node != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344217407/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (node != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344217407/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                    node.int = 1;\n                    if (((int) > 0) && (((int) & 1) == 0)) {\n                        (int)++;\n                        (int)--;\n                        (int)++;\n                    } \n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node;\n                    (int)++;\n                    if (((int) > 0) && (((int) & 1) == 0)) {\n                        (int)++;\n                        (int)--;\n                        (int)++;\n                    } \n                    for (int int = 4 ; ((int) & (scale - 1)) == (scale - 1) ; scale *= 2) {\n                        if ((int) == 0) {\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                            center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left;\n                            center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                            center.int = (right.int) + 1;\n                            left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                            right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                        } else if ((int) == 1) {\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                            center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                            center.int = (right.int) + 1;\n                            right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                            int = 0;\n                        } else if ((int) == 2) {\n                            int = 0;\n                        } \n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"node"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"70a18911-3f40-11e6-82cb-3342bcd5eddf","method":{"position":"com.google.gson.Gson:127","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonParseException {\n    if (json == null) {\n        {\n            if (json == null) {\n                {\n                    return ((T)(fromJson(json, typeOfT)));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344217407/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonParseException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344217407/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:501","type":"CtBinaryOperatorImpl"},"failures":[559,562],"tindex":"70a1b022-3f40-11e6-82cb-2d92a36f388d","method":{"position":"com.google.gson.GsonBuilder:493","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\npublic com.google.gson.GsonBuilder registerTypeHierarchyAdapter(java.lang.Class<?> baseType, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344217407/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.$Gson$Preconditions.checkArgument((((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) || (typeAdapter instanceof com.google.gson.TypeAdapter<?>)));\n            if ((typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)) {\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(0, com.google.gson.TreeTypeAdapter.newTypeHierarchyFactory(baseType, typeAdapter));\n            } \n            if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.internal.bind.TypeAdapters.newTypeHierarchyFactory(baseType, ((com.google.gson.TypeAdapter)(typeAdapter))));\n            } \n            return com.google.gson.GsonBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"70a1b023-3f40-11e6-82cb-6f16bf1505d9","method":{"position":"com.google.gson.Gson:285","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344217407/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    float float = value.floatValue();\n                    checkValidFloatingPoint(floatValue);\n                    out.value(value);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344217407/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"70a1d734-3f40-11e6-82cb-b1ec10746224","method":{"position":"com.google.gson.Gson:695","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.lang.String json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344217407/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl"},"failures":[648,649],"tindex":"70a1d735-3f40-11e6-82cb-f9bb78803842","method":{"position":"com.google.gson.TypeAdapter:268","type":"CtMethodImpl","sourcecode":"public final T fromJson(java.lang.String json) throws java.io.IOException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344217407/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (json == null) {\n                {\n                    return fromJson(new java.io.StringReader(json));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344217407/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:103","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"70a1d736-3f40-11e6-82cb-5f6efc034476","method":{"position":"com.google.gson.internal.ConstructorConstructor:128","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nprivate <T>com.google.gson.internal.ObjectConstructor<T> newDefaultImplementationConstructor(final java.lang.reflect.Type type, java.lang.Class<? super T> rawType) {\n    if (type instanceof java.lang.reflect.GenericArrayType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344217407/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (java.util.Collection.java.util.Collection.java.lang.Class.isAssignableFrom(rawType)) {\n                if (java.util.SortedSet.java.util.SortedSet.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.TreeSet<java.lang.Object>()));\n                        }\n                    };\n                } else if (java.util.EnumSet.java.util.EnumSet.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        @java.lang.SuppressWarnings(value = \"rawtypes\")\n                        public T construct() {\n                            if (type instanceof java.lang.reflect.ParameterizedType) {\n                                java.lang.reflect.Type java.lang.reflect.Type = ((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0];\n                                if (elementType instanceof java.lang.Class) {\n                                    return ((T)(java.util.EnumSet.noneOf(((java.lang.Class)(elementType)))));\n                                } else {\n                                    throw new com.google.gson.JsonIOException((\"Invalid EnumSet type: \" + (type.toString())));\n                                }\n                            } else {\n                                throw new com.google.gson.JsonIOException((\"Invalid EnumSet type: \" + (type.toString())));\n                            }\n                        }\n                    };\n                } else if (java.util.Set.java.util.Set.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedHashSet<java.lang.Object>()));\n                        }\n                    };\n                } else if (java.util.Queue.java.util.Queue.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedList<java.lang.Object>()));\n                        }\n                    };\n                } else {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.ArrayList<java.lang.Object>()));\n                        }\n                    };\n                }\n            } \n            if (java.util.Map.java.util.Map.java.lang.Class.isAssignableFrom(rawType)) {\n                if (java.util.SortedMap.java.util.SortedMap.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.TreeMap<java.lang.Object, java.lang.Object>()));\n                        }\n                    };\n                } else if ((type instanceof java.lang.reflect.ParameterizedType) && (!(java.lang.String.java.lang.String.java.lang.Class.isAssignableFrom(com.google.gson.reflect.TypeToken.get(((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0]).getRawType())))) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedHashMap<java.lang.Object, java.lang.Object>()));\n                        }\n                    };\n                } else {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new com.google.gson.internal.LinkedTreeMap<java.lang.String, java.lang.Object>()));\n                        }\n                    };\n                }\n            } \n            return null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:120","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"70a1fe47-3f40-11e6-82cb-03d1e38da3b6","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:804","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonArray) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344217407/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof com.google.gson.JsonNull) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344217407/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return (o instanceof java.util.Map.Entry) && ((findByEntry(((java.util.Map.Entry<?, ?>)(o)))) != null);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:137","type":"CtBinaryOperatorImpl"},"failures":[642,650,651,643,18,19,20,21,362,85,87,88,340,341,93,96,520,300,215,590,216,595,231,633,634,652],"tindex":"70a22558-3f40-11e6-82cb-3b83d08f9309","method":{"position":"com.google.gson.internal.Streams:67","type":"CtMethodImpl","sourcecode":"public static void write(com.google.gson.JsonElement element, com.google.gson.stream.JsonWriter writer) throws java.io.IOException {\n    if (element instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344217407/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<com.google.gson.JsonElement>.write(writer, element);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"70a22559-3f40-11e6-82cb-75a93700591e","method":{"position":"com.google.gson.DefaultDateTypeAdapter:94","type":"CtMethodImpl","sourcecode":"private java.util.Date deserializeToDate(com.google.gson.JsonElement json) {\n    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344217407/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (json == null) {\n                {\n                    if (json == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344217407/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            synchronized(java.text.DateFormat) {\n                                try {\n                                    return java.text.DateFormat.parse(json.getAsString());\n                                } catch (java.text.ParseException ignored) {\n                                }\n                                try {\n                                    return java.text.DateFormat.parse(json.getAsString());\n                                } catch (java.text.ParseException ignored) {\n                                }\n                                try {\n                                    return java.text.DateFormat.parse(json.getAsString());\n                                } catch (java.text.ParseException e) {\n                                    throw new com.google.gson.JsonSyntaxException(json.getAsString() , e);\n                                }\n                            }\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344217407/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[452],"tindex":"70a24c6a-3f40-11e6-82cb-2710c3ed43ad","method":{"position":"com.google.gson.internal.bind.TypeAdapters:201","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344217407/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"70a30fbb-3f40-11e6-82cb-092e0cc824ca","method":{"position":"com.google.gson.JsonObject:53","type":"CtMethodImpl","sourcecode":"public void add(java.lang.String property, com.google.gson.JsonElement value) {\n    if (property == null) {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344217407/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (value == null) {\n                        value = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n                    } \n                    com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.put(property, value);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344217407/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:98","type":"CtBinaryOperatorImpl"},"failures":[377,300,162,166,168,575,608],"tindex":"70a336cc-3f40-11e6-82cb-4192f8a0de8a","method":{"position":"com.google.gson.GsonBuilder:447","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\npublic com.google.gson.GsonBuilder registerTypeAdapter(java.lang.reflect.Type type, java.lang.Object typeAdapter) {\n    if (type instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344217407/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.$Gson$Preconditions.checkArgument(((((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) || (typeAdapter instanceof com.google.gson.InstanceCreator<?>)) || (typeAdapter instanceof com.google.gson.TypeAdapter<?>)));\n            if (typeAdapter instanceof com.google.gson.InstanceCreator<?>) {\n                java.util.Map<java.lang.reflect.Type, com.google.gson.InstanceCreator<?>>.put(type, ((com.google.gson.InstanceCreator)(typeAdapter)));\n            } \n            if ((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) {\n                com.google.gson.reflect.TypeToken<?> com.google.gson.reflect.TypeToken<?> = com.google.gson.reflect.TypeToken.get(type);\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.TreeTypeAdapter.newFactoryWithMatchRawType(typeToken, typeAdapter));\n            } \n            if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.internal.bind.TypeAdapters.newFactory(com.google.gson.reflect.TypeToken.get(type), ((com.google.gson.TypeAdapter)(typeAdapter))));\n            } \n            return com.google.gson.GsonBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"70a336cd-3f40-11e6-82cb-b393bd09c205","method":{"position":"com.google.gson.Gson:871","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            if (json == null) {\n                return null;\n            } \n            return ((T)(fromJson(new com.google.gson.internal.bind.JsonTreeReader(json), typeOfT)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344217407/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"70a384ee-3f40-11e6-82cb-27bb8f75eb7b","method":{"position":"com.google.gson.JsonObject:111","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Character value) {\n    if (property == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344217407/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (property == null) {\n                {\n                    add(property, createJsonElement(value));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344217407/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"70a384ef-3f40-11e6-82cb-71af4edceb2e","method":{"position":"com.google.gson.Gson:285","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344217407/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    float float = value.floatValue();\n                    checkValidFloatingPoint(floatValue);\n                    out.value(value);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344217407/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:298","type":"CtBinaryOperatorImpl"},"failures":[79,80,82,439,465,93,101,161,653,654,655,303,656,657,658,659,311],"tindex":"70a3ac00-3f40-11e6-82cb-17ef4ead35fd","method":{"position":"com.google.gson.Gson:297","type":"CtMethodImpl","sourcecode":"private void checkValidFloatingPoint(double value) {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                throw new java.lang.IllegalArgumentException(((value + \" is not a valid double value as per JSON specification. To override this\") + \" behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.\"));\n            } \n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344217407/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"70a3ac01-3f40-11e6-82cb-af9a614d2652","method":{"position":"com.google.gson.Gson:127","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonParseException {\n    if (json == null) {\n        {\n            if (json == null) {\n                {\n                    return ((T)(fromJson(json, typeOfT)));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344217407/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonParseException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344217407/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:105","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"70a44842-3f40-11e6-82cb-4fbedaa29989","method":{"position":"com.google.gson.reflect.TypeToken:283","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic final boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonPrimitive) {\n        {\n            if (o instanceof com.google.gson.JsonObject) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344217407/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return (o instanceof com.google.gson.reflect.TypeToken<?>) && (com.google.gson.internal.$Gson$Types.equals(java.lang.reflect.Type, ((com.google.gson.reflect.TypeToken<?>)(o)).java.lang.reflect.Type));\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344217407/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:378","type":"CtVariableReadImpl"},"failures":[660],"tindex":"70a46f53-3f40-11e6-82cb-7d536809d3a4","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:338","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (insert) {\n        {\n            for (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) {\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                int int = left != null ? left.int : 0;\n                int int = right != null ? right.int : 0;\n                int int = leftHeight - rightHeight;\n                if (delta == (-2)) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    int int = rightRight != null ? rightRight.int : 0;\n                    int int = rightLeft != null ? rightLeft.int : 0;\n                    int int = rightLeftHeight - rightRightHeight;\n                    if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                        rotateLeft(node);\n                    } else {\n                        assert rightDelta == 1;\n                        rotateRight(right);\n                        rotateLeft(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 2) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    int int = leftRight != null ? leftRight.int : 0;\n                    int int = leftLeft != null ? leftLeft.int : 0;\n                    int int = leftLeftHeight - leftRightHeight;\n                    if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                        rotateRight(node);\n                    } else {\n                        assert leftDelta == (-1);\n                        rotateLeft(left);\n                        rotateRight(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 0) {\n                    node.int = leftHeight + 1;\n                    if (insert) {\n                        break;\n                    } \n                } else {\n                    assert (delta == (-1)) || (delta == 1);\n                    node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                    if (!insert) {\n                        break;\n                    } \n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344217407/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"insert"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"70a49664-3f40-11e6-82cb-97e68a40b01b","method":{"position":"com.google.gson.TypeAdapter:268","type":"CtMethodImpl","sourcecode":"public final T fromJson(java.lang.String json) throws java.io.IOException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344217407/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (json == null) {\n                {\n                    return fromJson(new java.io.StringReader(json));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344217407/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:141","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"70a4bd75-3f40-11e6-82cb-adcb68d60eaa","method":{"position":"com.google.gson.internal.$Gson$Types:431","type":"CtMethodImpl","sourcecode":"private static void checkNotPrimitive(java.lang.reflect.Type type) {\n    com.google.gson.internal.$Gson$Preconditions.checkArgument(((!(type instanceof java.lang.Class<?>)) || (!(((java.lang.Class<?>)(type)).isPrimitive()))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl"},"failures":[519],"tindex":"70a4bd76-3f40-11e6-82cb-43fcef387adb","method":{"position":"com.google.gson.Gson:468","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src) {\n    if (src == null) {\n        {\n            if (src == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344217407/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (src == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344217407/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            if (src == null) {\n                                return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n                            } \n                            return toJsonTree(src, src.getClass());\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344217407/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"70a532a7-3f40-11e6-82cb-b91e52921597","method":{"position":"com.google.gson.Gson:468","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src) {\n    if (src == null) {\n        {\n            if (src == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344217407/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (src == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344217407/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            if (src == null) {\n                                return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n                            } \n                            return toJsonTree(src, src.getClass());\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344217407/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"70a559b8-3f40-11e6-82cb-1304b28f4ade","method":{"position":"com.google.gson.internal.bind.DateTypeAdapter:69","type":"CtMethodImpl","sourcecode":"private synchronized java.util.Date deserializeToDate(java.lang.String json) {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344217407/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            try {\n                return java.text.DateFormat.parse(json);\n            } catch (java.text.ParseException ignored) {\n            }\n            try {\n                return java.text.DateFormat.parse(json);\n            } catch (java.text.ParseException ignored) {\n            }\n            try {\n                return java.text.DateFormat.parse(json);\n            } catch (java.text.ParseException e) {\n                throw new com.google.gson.JsonSyntaxException(json , e);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl"},"failures":[519],"tindex":"70a5a7d9-3f40-11e6-82cb-bfca2e11c7c1","method":{"position":"com.google.gson.Gson:133","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344217407/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return toJsonTree(src);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"70a5a7da-3f40-11e6-82cb-f3bf60656e4f","method":{"position":"com.google.gson.Gson:576","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src != null) {\n        {\n            if (src == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344217407/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            } else {\n                {\n                    if (src == null) {\n                        {\n                            try {\n                                com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                                toJson(src, typeOfSrc, jsonWriter);\n                            } catch (java.io.IOException e) {\n                                throw new com.google.gson.JsonIOException(e);\n                            }\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344217407/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new com.google.gson.JsonIOException();\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344217407/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:79","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"70a5ceeb-3f40-11e6-82cb-955e47fc7aea","method":{"position":"com.google.gson.DefaultDateTypeAdapter:94","type":"CtMethodImpl","sourcecode":"private java.util.Date deserializeToDate(com.google.gson.JsonElement json) {\n    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344217407/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (json == null) {\n                {\n                    if (json == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344217407/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            synchronized(java.text.DateFormat) {\n                                try {\n                                    return java.text.DateFormat.parse(json.getAsString());\n                                } catch (java.text.ParseException ignored) {\n                                }\n                                try {\n                                    return java.text.DateFormat.parse(json.getAsString());\n                                } catch (java.text.ParseException ignored) {\n                                }\n                                try {\n                                    return java.text.DateFormat.parse(json.getAsString());\n                                } catch (java.text.ParseException e) {\n                                    throw new com.google.gson.JsonSyntaxException(json.getAsString() , e);\n                                }\n                            }\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344217407/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl"},"failures":[133,135,136,138,139,143,197,198,199],"tindex":"70a5ceec-3f40-11e6-82cb-e394784fac54","method":{"position":"com.google.gson.FieldNamingPolicy:122","type":"CtMethodImpl","sourcecode":"private static java.lang.String separateCamelCase(java.lang.String name, java.lang.String separator) {\n    if (separator == null) {\n        {\n            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            for (int int = 0 ; i < (name.length()) ; i++) {\n                char char = name.charAt(i);\n                if ((java.lang.Character.isUpperCase(character)) && ((translation.length()) != 0)) {\n                    translation.append(separator);\n                } \n                translation.append(character);\n            }\n            return translation.toString();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344217407/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"separator"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"70a5f5fd-3f40-11e6-82cb-4d153c0203fa","method":{"position":"com.google.gson.Gson:468","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src) {\n    if (src == null) {\n        {\n            if (src == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344217407/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (src == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344217407/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            if (src == null) {\n                                return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n                            } \n                            return toJsonTree(src, src.getClass());\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344217407/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:218","type":"CtVariableReadImpl"},"failures":[661],"tindex":"70a5f5fe-3f40-11e6-82cb-c36d802a8560","method":{"position":"com.google.gson.internal.LinkedTreeMap:217","type":"CtMethodImpl","sourcecode":"void removeInternal(com.google.gson.internal.LinkedTreeMap.Node<K, V> node, boolean unlink) {\n    if (unlink) {\n        {\n            if (unlink) {\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            if ((left != null) && (right != null)) {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = (left.int) > (right.int) ? left.last() : right.first();\n                removeInternal(adjacent, false);\n                int int = 0;\n                left = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                if (left != null) {\n                    leftHeight = left.int;\n                    adjacent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = left;\n                    left.com.google.gson.internal.LinkedTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                } \n                int int = 0;\n                right = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                if (right != null) {\n                    rightHeight = right.int;\n                    adjacent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = right;\n                    right.com.google.gson.internal.LinkedTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                } \n                adjacent.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                replaceInParent(node, adjacent);\n                return ;\n            } else if (left != null) {\n                replaceInParent(node, left);\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n            } else if (right != null) {\n                replaceInParent(node, right);\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n            } else {\n                replaceInParent(node, null);\n            }\n            rebalance(originalParent, false);\n            (int)--;\n            (int)++;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344217407/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"unlink":"unlink"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"70a6b94f-3f40-11e6-82cb-9b09ac578dcb","method":{"position":"com.google.gson.Gson:576","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src != null) {\n        {\n            if (src == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344217407/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            } else {\n                {\n                    if (src == null) {\n                        {\n                            try {\n                                com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                                toJson(src, typeOfSrc, jsonWriter);\n                            } catch (java.io.IOException e) {\n                                throw new com.google.gson.JsonIOException(e);\n                            }\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344217407/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new com.google.gson.JsonIOException();\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344217407/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"70a6b950-3f40-11e6-82cb-65f86bf6459c","method":{"position":"com.google.gson.Gson:261","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344217407/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    double double = value.doubleValue();\n                    checkValidFloatingPoint(doubleValue);\n                    out.value(value);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344217407/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"70a75491-3f40-11e6-82cb-8b518f04e618","method":{"position":"com.google.gson.internal.LinkedTreeMap:207","type":"CtMethodImpl","sourcecode":"private boolean equal(java.lang.Object a, java.lang.Object b) {\n    if (!(b instanceof java.lang.reflect.GenericArrayType)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344217407/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (a == b) || ((a != null) && (a.equals(b)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:92","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"70a75492-3f40-11e6-82cb-6bb538682b6a","method":{"position":"com.google.gson.internal.LinkedTreeMap:570","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof java.util.Iterator) {\n        {\n            return (o instanceof java.util.Map.Entry) && ((findByEntry(((java.util.Map.Entry<?, ?>)(o)))) != null);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344217407/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:305","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"70a7c9c3-3f40-11e6-82cb-d5ee76bb9309","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:686","type":"CtMethodImpl","sourcecode":"void add(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node) {\n    if (node != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344217407/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (node != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344217407/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                    node.int = 1;\n                    if (((int) > 0) && (((int) & 1) == 0)) {\n                        (int)++;\n                        (int)--;\n                        (int)++;\n                    } \n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node;\n                    (int)++;\n                    if (((int) > 0) && (((int) & 1) == 0)) {\n                        (int)++;\n                        (int)--;\n                        (int)++;\n                    } \n                    for (int int = 4 ; ((int) & (scale - 1)) == (scale - 1) ; scale *= 2) {\n                        if ((int) == 0) {\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                            center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left;\n                            center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                            center.int = (right.int) + 1;\n                            left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                            right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                        } else if ((int) == 1) {\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                            center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                            center.int = (right.int) + 1;\n                            right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                            int = 0;\n                        } else if ((int) == 2) {\n                            int = 0;\n                        } \n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"node"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:109","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"70a817e4-3f40-11e6-82cb-d9ca49ce0373","method":{"position":"com.google.gson.reflect.TypeToken:283","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic final boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonPrimitive) {\n        {\n            if (o instanceof com.google.gson.JsonObject) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344217407/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return (o instanceof com.google.gson.reflect.TypeToken<?>) && (com.google.gson.internal.$Gson$Types.equals(java.lang.reflect.Type, ((com.google.gson.reflect.TypeToken<?>)(o)).java.lang.reflect.Type));\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344217407/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:107","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"70a83ef5-3f40-11e6-82cb-dd47d0f97997","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:804","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonArray) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344217407/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof com.google.gson.JsonNull) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344217407/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return (o instanceof java.util.Map.Entry) && ((findByEntry(((java.util.Map.Entry<?, ?>)(o)))) != null);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"70a83ef6-3f40-11e6-82cb-b1efba5706be","method":{"position":"com.google.gson.Gson:591","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    if (src != null) {\n        {\n            com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = getAdapter(com.google.gson.reflect.TypeToken.get(typeOfSrc));\n            boolean boolean = writer.isLenient();\n            writer.setLenient(true);\n            boolean boolean = writer.isHtmlSafe();\n            writer.setHtmlSafe(boolean);\n            boolean boolean = writer.getSerializeNulls();\n            writer.setSerializeNulls(boolean);\n            try {\n                ((com.google.gson.TypeAdapter<java.lang.Object>)(adapter)).write(writer, src);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            } finally {\n                writer.setLenient(oldLenient);\n                writer.setHtmlSafe(oldHtmlSafe);\n                writer.setSerializeNulls(oldSerializeNulls);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344217407/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:716","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"70a88d17-3f40-11e6-82cb-c72b92cede8f","method":{"position":"com.google.gson.stream.JsonReader:755","type":"CtMethodImpl","sourcecode":"private boolean isLiteral(char c) throws java.io.IOException {\n    if ((c < '0') || (c > '9')) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344217407/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            switch (c) {\n                case '/' :\n                case '\\\\' :\n                case ';' :\n                case '#' :\n                case '=' :\n                    checkLenient();\n                case '{' :\n                case '}' :\n                case '[' :\n                case ']' :\n                case ':' :\n                case ',' :\n                case ' ' :\n                case '\\t' :\n                case '\\f' :\n                case '\\r' :\n                case '\\n' :\n                    return false;\n                default :\n                    return true;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"c"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:537","type":"CtFieldReadImpl"},"failures":[],"tindex":"70a97778-3f40-11e6-82cb-a9d8c8e7da7f","method":{"position":"com.google.gson.stream.JsonWriter:234","type":"CtMethodImpl","sourcecode":"public final void setLenient(boolean lenient) {\n    if (lenient) {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = lenient;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344217407/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"lenient"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":70,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":36,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":444,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":34,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":43,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":153,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":163,"com.google.gson.MixedStreamTest.testWriteLenient":263,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":124,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":419,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":159,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":231,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":122,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":235,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":92,"com.google.gson.JsonObjectTest.testAddingNullPropertyValue":465,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":185,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":200,"com.google.gson.functional.ObjectTest.testSingletonLists":120,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":220,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":425,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":5,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":354,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":12,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":331,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":135,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":385,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":306,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":211,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":240,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":449,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":29,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":381,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":366,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":281,"com.google.gson.functional.EnumTest.testEnumCaseMapping":457,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":1,"com.google.gson.functional.JsonTreeTest.testToJsonTree":9,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":452,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":11,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":76,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":207,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":414,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":294,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":426,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":359,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":324,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":105,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":132,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":19,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":364,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":245,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":142,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":295,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":229,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":258,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":435,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":144,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":402,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":416,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":164,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":390,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":58,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":158,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":110,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":289,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":259,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":448,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":141,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":396,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":13,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":128,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":239,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":48,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":286,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":428,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":221,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":67,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":198,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":371,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":350,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":291,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":298,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":339,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":418,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":225,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":244,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":108,"com.google.gson.functional.CollectionTest.testSetDeserialization":234,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":93,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":131,"com.google.gson.functional.EnumTest.testEnumSet":312,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":199,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":300,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":273,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":136,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":197,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":255,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":227,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":103,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":361,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":2,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":417,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":35,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":49,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":155,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":299,"com.google.gson.functional.MapTest.testSortedMap":283,"com.google.gson.functional.MapTest.testMapSerialization":280,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":37,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":23,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":407,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":83,"com.google.gson.functional.MapTest.testSerializeMaps":389,"com.google.gson.functional.MapTest.testComplexKeysSerialization":33,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":290,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":411,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":107,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":209,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":191,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":61,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":181,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":44,"com.google.gson.functional.MapTest.testStringKeyDeserialization":288,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":408,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":264,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":261,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":292,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":377,"com.google.gson.functional.PrettyPrintingTest.testMap":450,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":319,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":39,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":384,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":410,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":18,"com.google.gson.functional.MapTest.testMapSerializationEmpty":287,"com.google.gson.functional.CollectionTest.testQueueSerialization":322,"com.google.gson.functional.MapTest.testMapOfMapSerialization":391,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":434,"com.google.gson.JavaSerializationTest.testMapIsSerializable":267,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":326,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":89,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":257,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":355,"com.google.gson.functional.FieldNamingTest.testIdentity":84,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":445,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":301,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":170,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":145,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":8,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":47,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":119,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":356,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":382,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":379,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":116,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":22,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":88,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":269,"com.google.gson.functional.MapTest.testMapSubclassSerialization":388,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":440,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":206,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":247,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":237,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":250,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":165,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":102,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":196,"com.google.gson.functional.EnumTest.testEnumSubclass":315,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":134,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":386,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":241,"com.google.gson.GsonBuilderTest.testRegisterTypeAdapterForCoreType":337,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":112,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":56,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":118,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":117,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":65,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":21,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":404,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":304,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":46,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":121,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":341,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":293,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":308,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":398,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":106,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":194,"com.google.gson.CommentsTest.testParseComments":336,"com.google.gson.JsonObjectTest.testReadPropertyWithEmptyStringName":17,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":123,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":188,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":352,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":78,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":177,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":338,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":446,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":90,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":205,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":347,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":439,"com.google.gson.ObjectTypeAdapterTest.testSerializeObject":3,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":24,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":427,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":412,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":174,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":430,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":87,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":344,"com.google.gson.functional.MapTest.testMapDeserialization":276,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":401,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":311,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":340,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":184,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":74,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":275,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":187,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":453,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":62,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":7,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":316,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":95,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":146,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":51,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":463,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":66,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":204,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":60,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":115,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":180,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":282,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":334,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":348,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":302,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":360,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":367,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":437,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":97,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":80,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":314,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":232,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":246,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":271,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":375,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":442,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":166,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":192,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":346,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":254,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":469,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":373,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":343,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":73,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":111,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":147,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":210,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":154,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":169,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":113,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":151,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":127,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":317,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":53,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":96,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":233,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":462,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":351,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":183,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":189,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":157,"com.google.gson.stream.JsonWriterTest.testNullStringValue":467,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":190,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":70,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":320,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":438,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":262,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":223,"com.google.gson.JsonPrimitiveTest.testEquals":16,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":186,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":313,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":41,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":25,"com.google.gson.functional.MapTest.testGeneralMapField":32,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":125,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":395,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":77,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":242,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":376,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":297,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":284,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":305,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":413,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":460,"com.google.gson.MixedStreamTest.testReadMixedStreamed":253,"com.google.gson.internal.bind.JsonElementReaderTest.testBooleans":20,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":277,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":415,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":431,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":156,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":383,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":219,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":454,"com.google.gson.JavaSerializationTest.testNumberIsSerializable":266,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":226,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":99,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":278,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":456,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":270,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":353,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":443,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":222,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":214,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":309,"com.google.gson.JsonPrimitiveTest.testEqualsDoesNotEquateStringAndNonStringTypes":15,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":171,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":325,"com.google.gson.functional.ObjectTest.testNestedDeserialization":152,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":303,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":464,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":38,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":64,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":365,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":176,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":279,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":342,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":195,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":260,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":52,"com.google.gson.JavaSerializationTest.testListIsSerializable":268,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":162,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":167,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":330,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":55,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":455,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":272,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":31,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":424,"com.google.gson.functional.MapTest.testInterfaceTypeMap":30,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":405,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":378,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":69,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":208,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":372,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":59,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":363,"com.google.gson.MixedStreamTest.testWriteClosed":252,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":40,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":461,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":72,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":126,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":201,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":68,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":179,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":149,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":175,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":101,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":75,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":129,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":323,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":215,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeWithCustomTypeAdapter":374,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":217,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":57,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":327,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":345,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":357,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":85,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":6,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":109,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":392,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":178,"com.google.gson.functional.CollectionTest.testQueueDeserialization":332,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":433,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":216,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":421,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":28,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":143,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":150,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":230,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":318,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":249,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":329,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":50,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":138,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":27,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":466,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":333,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":397,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":422,"com.google.gson.ObjectTypeAdapterTest.testSerialize":4,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":228,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":160,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":406,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":81,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":202,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":380,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":447,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":10,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":349,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":307,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":423,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":63,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":91,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":358,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":193,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":148,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":182,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":436,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":130,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":409,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":100,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":296,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":161,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":213,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":328,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":400,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":368,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":393,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":420,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":54,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":172,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":248,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":369,"com.google.gson.internal.LinkedHashTreeMapTest.testRemoveRootDoesNotDoubleUnlink":0,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":265,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":137,"com.google.gson.functional.ObjectTest.testNestedSerialization":139,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":224,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":429,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":459,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":458,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":285,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":26,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":168,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":335,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":133,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":310,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":441,"com.google.gson.JsonPrimitiveTest.testBoolean":14,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":71,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":218,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":98,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":387,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":94,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":140,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":212,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":403,"com.google.gson.functional.CollectionTest.testSetSerialization":236,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":243,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":114,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":451,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":42,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":45,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":86,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":321,"com.google.gson.MixedStreamTest.testWriteInvalidState":251,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":394,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":79,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":432,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":238,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":82,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":104,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":256,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":173,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":362,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":468,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":203,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":274,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":370,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":399},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:378","type":"CtVariableReadImpl","sourcecode":"insert"},"failures":[0],"tindex":"4060bd83-3e7b-11e6-828c-61c74c46ea3d","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:338","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (insert) {\n        {\n            for (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) {\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                int int = left != null ? left.int : 0;\n                int int = right != null ? right.int : 0;\n                int int = leftHeight - rightHeight;\n                if (delta == (-2)) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    int int = rightRight != null ? rightRight.int : 0;\n                    int int = rightLeft != null ? rightLeft.int : 0;\n                    int int = rightLeftHeight - rightRightHeight;\n                    if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                        rotateLeft(node);\n                    } else {\n                        assert rightDelta == 1;\n                        rotateRight(right);\n                        rotateLeft(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 2) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    int int = leftRight != null ? leftRight.int : 0;\n                    int int = leftLeft != null ? leftLeft.int : 0;\n                    int int = leftLeftHeight - leftRightHeight;\n                    if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                        rotateRight(node);\n                    } else {\n                        assert leftDelta == (-1);\n                        rotateLeft(left);\n                        rotateRight(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 0) {\n                    node.int = leftHeight + 1;\n                    if (insert) {\n                        break;\n                    } \n                } else {\n                    assert (delta == (-1)) || (delta == 1);\n                    node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                    if (!insert) {\n                        break;\n                    } \n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260295972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"insert"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[1,2],"tindex":"406132b4-3e7b-11e6-828c-4f71c4a91a4e","method":{"position":"com.google.gson.Gson:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            out.value(value.toString());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260295972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:136","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.TypeVariable"},"failures":[],"tindex":"406132b5-3e7b-11e6-828c-f1fb2eac8c6c","method":{"position":"com.google.gson.internal.$Gson$Types:431","type":"CtMethodImpl","sourcecode":"private static void checkNotPrimitive(java.lang.reflect.Type type) {\n    com.google.gson.internal.$Gson$Preconditions.checkArgument(((!(type instanceof java.lang.Class<?>)) || (!(((java.lang.Class<?>)(type)).isPrimitive()))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:198","type":"CtBinaryOperatorImpl","sourcecode":"out == null"},"failures":[3,4,5],"tindex":"406132b6-3e7b-11e6-828c-97fb2beeaa72","method":{"position":"com.google.gson.TypeAdapter:140","type":"CtMethodImpl","sourcecode":"public final void toJson(java.io.Writer out, T value) throws java.io.IOException {\n    if (out == null) {\n        {\n            com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = new com.google.gson.stream.JsonWriter(out);\n            write(writer, value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260295972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"out"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:565","type":"CtBinaryOperatorImpl","sourcecode":"(indent) == null"},"failures":[],"tindex":"406132b7-3e7b-11e6-828c-ab5f8797df5f","method":{"position":"com.google.gson.stream.JsonWriter:212","type":"CtMethodImpl","sourcecode":"public final void setIndent(java.lang.String indent) {\n    if ((indent.length()) == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260295972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (indent == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260295972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if ((indent.length()) == 0) {\n                        com.google.gson.stream.JsonWriter.this.java.lang.String = null;\n                        com.google.gson.stream.JsonWriter.this.java.lang.String = \":\";\n                    } else {\n                        com.google.gson.stream.JsonWriter.this.java.lang.String = indent;\n                        com.google.gson.stream.JsonWriter.this.java.lang.String = \": \";\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"indent"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:137","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonObject"},"failures":[],"tindex":"406159c8-3e7b-11e6-828c-93c1ba1dafc0","method":{"position":"com.google.gson.JsonArray:81","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement set(int index, com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonArray) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260295972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (element instanceof com.google.gson.JsonObject) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260295972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return java.util.List<com.google.gson.JsonElement>.set(index, element);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:118","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.Class<?>"},"failures":[],"tindex":"406159c9-3e7b-11e6-828c-6d8a3669570c","method":{"position":"com.google.gson.internal.$Gson$Types:217","type":"CtMethodImpl","sourcecode":"public static java.lang.String typeToString(java.lang.reflect.Type type) {\n    return type instanceof java.lang.Class ? ((java.lang.Class<?>)(type)).getName() : type.toString();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:106","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonArray"},"failures":[],"tindex":"406159ca-3e7b-11e6-828c-fd027722048a","method":{"position":"com.google.gson.JsonArray:81","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement set(int index, com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonArray) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260295972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (element instanceof com.google.gson.JsonObject) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260295972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return java.util.List<com.google.gson.JsonElement>.set(index, element);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:274","type":"CtBinaryOperatorImpl","sourcecode":"target instanceof java.lang.String"},"failures":[6,7,8,9,10,11,12,13,14,15,16,17,18,19,20],"tindex":"4061f60b-3e7b-11e6-828c-490975a13f10","method":{"position":"com.google.gson.JsonPrimitive:273","type":"CtMethodImpl","sourcecode":"private static boolean isPrimitiveOrString(java.lang.Object target) {\n    if (target instanceof java.lang.String) {\n        {\n            if (target instanceof java.lang.String) {\n                return true;\n            } \n            java.lang.Class<?> java.lang.Class<?> = target.getClass();\n            for (java.lang.Class<?> java.lang.Class<?> : com.google.gson.JsonPrimitive.com.google.gson.JsonPrimitive.java.lang.Class<?>[]) {\n                if (standardPrimitive.isAssignableFrom(classOfPrimitive)) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260295972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"target":"target"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:240","type":"CtInvocationImpl","sourcecode":"from.getRawType().equals(to.getRawType())"},"failures":[],"tindex":"4062442c-3e7b-11e6-828c-6f6bb5903ed6","method":{"position":"com.google.gson.reflect.TypeToken:272","type":"CtMethodImpl","sourcecode":"private static boolean matches(java.lang.reflect.Type from, java.lang.reflect.Type to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeMap) {\n    if (to.getRawType().equals(from.getRawType())) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260295972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (to.equals(from)) || ((from instanceof java.lang.reflect.TypeVariable) && (to.equals(typeMap.get(((java.lang.reflect.TypeVariable<?>)(from)).getName()))));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"to","to":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,6,7,8,9,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,12,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,13,249,250,251,252,253,254,255,4],"tindex":"4062442d-3e7b-11e6-828c-f58b7ed38559","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:116","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<?> getFieldAdapter(com.google.gson.Gson gson, java.lang.reflect.Field field, com.google.gson.reflect.TypeToken<?> fieldType) {\n    if (field.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260295972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (field.isSynthetic()) {\n                {\n                    com.google.gson.annotations.JsonAdapter com.google.gson.annotations.JsonAdapter = field.getAnnotation(com.google.gson.annotations.JsonAdapter.com.google.gson.annotations.JsonAdapter.java.lang.Class);\n                    if (annotation != null) {\n                        com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory.getTypeAdapter(com.google.gson.internal.ConstructorConstructor, gson, fieldType, annotation);\n                        if (adapter != null)\n                            return adapter;\n                        \n                    } \n                    return gson.getAdapter(fieldType);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260295972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"field"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[97],"tindex":"40626b3e-3e7b-11e6-828c-3b28a7d32310","method":{"position":"com.google.gson.Gson:285","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260295972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260295972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    float float = value.floatValue();\n                    checkValidFloatingPoint(floatValue);\n                    out.value(value);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[256],"tindex":"4062924f-3e7b-11e6-828c-c3c9f86d1808","method":{"position":"com.google.gson.JsonObject:111","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Character value) {\n    if (property == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260295972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (property == null) {\n                {\n                    add(property, createJsonElement(value));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260295972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:274","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[257,258,259,260,261,262,263],"tindex":"40629250-3e7b-11e6-828c-39e09319e4d9","method":{"position":"com.google.gson.Gson:273","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> floatAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260295972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260295972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (serializeSpecialFloatingPointValues) {\n                        return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n                    } \n                    return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                        @java.lang.Override\n                        public java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                            if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                                in.nextNull();\n                                return null;\n                            } \n                            return ((float)(in.nextDouble()));\n                        }\n\n                        @java.lang.Override\n                        public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                            if (value == null) {\n                                out.nullValue();\n                                return ;\n                            } \n                            float float = value.floatValue();\n                            checkValidFloatingPoint(floatValue);\n                            out.value(value);\n                        }\n                    };\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[264,113,265,163,164,165,167],"tindex":"40629251-3e7b-11e6-828c-21be7277f3bd","method":{"position":"com.google.gson.JsonObject:89","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Number value) {\n    if (value == null) {\n        {\n            if (property == null) {\n                {\n                    add(property, createJsonElement(value));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260295972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260295972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.ObjectTypeAdapter:95","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[42,77,90,91,92,93,133,233,235,236,3,4,5],"tindex":"40629252-3e7b-11e6-828c-592bd7ad8962","method":{"position":"com.google.gson.internal.bind.ObjectTypeAdapter:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Object value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            com.google.gson.TypeAdapter<java.lang.Object> com.google.gson.TypeAdapter<java.lang.Object> = ((com.google.gson.TypeAdapter<java.lang.Object>)(com.google.gson.Gson.getAdapter(value.getClass())));\n            if (typeAdapter instanceof com.google.gson.internal.bind.ObjectTypeAdapter) {\n                out.beginObject();\n                out.endObject();\n                return ;\n            } \n            typeAdapter.write(out, value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260295972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:274","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[257,258,259,260,261,262,263],"tindex":"4062b963-3e7b-11e6-828c-4b116f30c41e","method":{"position":"com.google.gson.Gson:249","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> doubleAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260295972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return in.nextDouble();\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    double double = value.doubleValue();\n                    checkValidFloatingPoint(doubleValue);\n                    out.value(value);\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:578","type":"CtBinaryOperatorImpl","sourcecode":"root == null"},"failures":[],"tindex":"4062b964-3e7b-11e6-828c-1deaf07db9d6","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:429","type":"CtMethodImpl","sourcecode":"private void rotateRight(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260295972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivotRight;\n            if (pivotRight != null) {\n                pivotRight.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            } \n            replaceInParent(root, pivot);\n            pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot;\n            root.int = (java.lang.Math.max((right != null ? right.int : 0), (pivotRight != null ? pivotRight.int : 0))) + 1;\n            pivot.int = (java.lang.Math.max(root.int, (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"4062e075-3e7b-11e6-828c-7d872c0e713a","method":{"position":"com.google.gson.Gson:285","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260295972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260295972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    float float = value.floatValue();\n                    checkValidFloatingPoint(floatValue);\n                    out.value(value);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"4062e076-3e7b-11e6-828c-fd0d08493594","method":{"position":"com.google.gson.Gson:576","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260295972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            try {\n                com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                toJson(src, typeOfSrc, jsonWriter);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:132","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.GenericArrayType"},"failures":[266,267,268,27,269,270,271,272,273,274,275,276,28,277,278,279,280,281,29,282,283,30,284,31,32,285,286,33,287,288,289,290,291,292,34,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,61,62,63,7,65,68,70,72,73,74,76,293,294,85,86,87,88,89,90,295,91,92,93,94,95,296,97,98,99,297,101,298,299,104,105,106,107,108,109,110,300,301,112,302,303,120,130,304,131,141,146,147,150,305,306,155,307,156,157,158,159,160,161,162,308,309,168,169,310,174,175,176,177,178,179,180,311,182,183,186,187,191,193,195,196,197,201,202,203,205,207,312,313,314,315,316,317,222,223,224,225,231,318,319,320,321,322,323,324,233,325,326,327,328,234,329,236,330,331,332,237,238,239,241,243,245,247,248,333,334,263,335,336,4],"tindex":"4062e077-3e7b-11e6-828c-3576cf3566a0","method":{"position":"com.google.gson.internal.ConstructorConstructor:128","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nprivate <T>com.google.gson.internal.ObjectConstructor<T> newDefaultImplementationConstructor(final java.lang.reflect.Type type, java.lang.Class<? super T> rawType) {\n    if (type instanceof java.lang.reflect.GenericArrayType) {\n        {\n            if (java.util.Collection.java.util.Collection.java.lang.Class.isAssignableFrom(rawType)) {\n                if (java.util.SortedSet.java.util.SortedSet.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.TreeSet<java.lang.Object>()));\n                        }\n                    };\n                } else if (java.util.EnumSet.java.util.EnumSet.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        @java.lang.SuppressWarnings(value = \"rawtypes\")\n                        public T construct() {\n                            if (type instanceof java.lang.reflect.ParameterizedType) {\n                                java.lang.reflect.Type java.lang.reflect.Type = ((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0];\n                                if (elementType instanceof java.lang.Class) {\n                                    return ((T)(java.util.EnumSet.noneOf(((java.lang.Class)(elementType)))));\n                                } else {\n                                    throw new com.google.gson.JsonIOException((\"Invalid EnumSet type: \" + (type.toString())));\n                                }\n                            } else {\n                                throw new com.google.gson.JsonIOException((\"Invalid EnumSet type: \" + (type.toString())));\n                            }\n                        }\n                    };\n                } else if (java.util.Set.java.util.Set.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedHashSet<java.lang.Object>()));\n                        }\n                    };\n                } else if (java.util.Queue.java.util.Queue.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedList<java.lang.Object>()));\n                        }\n                    };\n                } else {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.ArrayList<java.lang.Object>()));\n                        }\n                    };\n                }\n            } \n            if (java.util.Map.java.util.Map.java.lang.Class.isAssignableFrom(rawType)) {\n                if (java.util.SortedMap.java.util.SortedMap.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.TreeMap<java.lang.Object, java.lang.Object>()));\n                        }\n                    };\n                } else if ((type instanceof java.lang.reflect.ParameterizedType) && (!(java.lang.String.java.lang.String.java.lang.Class.isAssignableFrom(com.google.gson.reflect.TypeToken.get(((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0]).getRawType())))) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedHashMap<java.lang.Object, java.lang.Object>()));\n                        }\n                    };\n                } else {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new com.google.gson.internal.LinkedTreeMap<java.lang.String, java.lang.Object>()));\n                        }\n                    };\n                }\n            } \n            return null;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260295972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"40630788-3e7b-11e6-828c-c703bdda6fbf","method":{"position":"com.google.gson.JsonObject:111","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Character value) {\n    if (property == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260295972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (property == null) {\n                {\n                    add(property, createJsonElement(value));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260295972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:103","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.GenericArrayType"},"failures":[337,338,23,24,25,26,339,27,340,341,34,43,342,44,45,343,46,47,48,344,345,346,347,348,104,106,349,110,300,350,301,111,112,264,113,351,114,352,353,302,265,354,355,303,153,159,160,356,161,162,168,169,357,358,359,360,361,362,363,364,365,366,367,368,200,204,369,370,225,226,227,371,372,373,374,375,376,377,378,379,380,255,381,382,383,384,385,386],"tindex":"40630789-3e7b-11e6-828c-57e16eb175e4","method":{"position":"com.google.gson.GsonBuilder:447","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\npublic com.google.gson.GsonBuilder registerTypeAdapter(java.lang.reflect.Type type, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof java.lang.reflect.GenericArrayType) {\n        {\n            com.google.gson.internal.$Gson$Preconditions.checkArgument(((((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) || (typeAdapter instanceof com.google.gson.InstanceCreator<?>)) || (typeAdapter instanceof com.google.gson.TypeAdapter<?>)));\n            if (typeAdapter instanceof com.google.gson.InstanceCreator<?>) {\n                java.util.Map<java.lang.reflect.Type, com.google.gson.InstanceCreator<?>>.put(type, ((com.google.gson.InstanceCreator)(typeAdapter)));\n            } \n            if ((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) {\n                com.google.gson.reflect.TypeToken<?> com.google.gson.reflect.TypeToken<?> = com.google.gson.reflect.TypeToken.get(type);\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.TreeTypeAdapter.newFactoryWithMatchRawType(typeToken, typeAdapter));\n            } \n            if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.internal.bind.TypeAdapters.newFactory(com.google.gson.reflect.TypeToken.get(type), ((com.google.gson.TypeAdapter)(typeAdapter))));\n            } \n            return com.google.gson.GsonBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260295972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"typeAdapter"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:274","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[],"tindex":"40632e9a-3e7b-11e6-828c-b9585ad083fc","method":{"position":"com.google.gson.Gson:273","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> floatAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260295972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260295972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (serializeSpecialFloatingPointValues) {\n                        return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n                    } \n                    return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                        @java.lang.Override\n                        public java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                            if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                                in.nextNull();\n                                return null;\n                            } \n                            return ((float)(in.nextDouble()));\n                        }\n\n                        @java.lang.Override\n                        public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                            if (value == null) {\n                                out.nullValue();\n                                return ;\n                            } \n                            float float = value.floatValue();\n                            checkValidFloatingPoint(floatValue);\n                            out.value(value);\n                        }\n                    };\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:120","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonNull"},"failures":[],"tindex":"40632e9b-3e7b-11e6-828c-1798ce2a0020","method":{"position":"com.google.gson.internal.LinkedTreeMap:574","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonNull) {\n        {\n            if (!(o instanceof java.util.Map.Entry)) {\n                return false;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n            if (node == null) {\n                return false;\n            } \n            removeInternal(node, true);\n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260295972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:107","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonArray"},"failures":[],"tindex":"40632e9c-3e7b-11e6-828c-b9d25fae83a3","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:804","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonArray) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260295972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (o instanceof java.util.Map.Entry) && ((findByEntry(((java.util.Map.Entry<?, ?>)(o)))) != null);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:305","type":"CtBinaryOperatorImpl","sourcecode":"node != null"},"failures":[],"tindex":"406355ad-3e7b-11e6-828c-6d9b473f4e4f","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:245","type":"CtMethodImpl","sourcecode":"void removeInternal(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node, boolean unlink) {\n    if (node != null) {\n        {\n            if (unlink) {\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            if ((left != null) && (right != null)) {\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = (left.int) > (right.int) ? left.last() : right.first();\n                removeInternal(adjacent, false);\n                int int = 0;\n                left = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                if (left != null) {\n                    leftHeight = left.int;\n                    adjacent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left;\n                    left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                } \n                int int = 0;\n                right = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                if (right != null) {\n                    rightHeight = right.int;\n                    adjacent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                } \n                adjacent.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                replaceInParent(node, adjacent);\n                return ;\n            } else if (left != null) {\n                replaceInParent(node, left);\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } else if (right != null) {\n                replaceInParent(node, right);\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } else {\n                replaceInParent(node, null);\n            }\n            rebalance(originalParent, false);\n            (int)--;\n            (int)++;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260295972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"node"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"406355ae-3e7b-11e6-828c-996bf11baceb","method":{"position":"com.google.gson.Gson:510","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260295972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src == null) {\n                return toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull);\n            } \n            return toJson(src, src.getClass());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:105","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonObject"},"failures":[1,387,338,23,24,25,26,339,27,340,341,270,388,389,275,28,390,278,391,281,29,30,31,32,33,288,289,34,36,42,47,50,59,60,63,7,64,65,66,67,69,70,71,73,74,75,76,392,393,394,395,396,397,398,399,400,401,402,403,293,404,294,405,406,407,77,78,79,408,409,410,411,412,80,81,82,83,84,85,86,87,88,89,90,295,91,92,93,413,10,296,414,415,97,344,416,345,417,418,346,419,297,420,421,347,348,11,298,422,12,299,104,105,106,107,109,349,110,300,350,301,111,112,264,113,351,114,352,353,302,265,354,355,423,303,115,116,117,118,119,120,121,122,123,124,125,129,133,134,135,136,138,139,142,144,145,148,152,424,425,426,427,428,429,430,431,432,433,434,435,257,436,258,259,437,438,260,439,440,261,441,442,262,443,155,156,157,158,159,160,356,161,162,444,445,446,447,163,308,309,448,168,169,170,357,172,173,174,176,177,178,179,449,450,180,181,451,452,311,182,183,185,453,358,359,186,187,360,191,361,362,363,364,365,366,454,367,455,456,193,368,195,196,197,199,201,202,203,369,206,314,315,208,209,317,457,210,211,212,214,217,458,222,225,226,227,228,459,460,229,230,231,318,232,319,323,461,233,327,328,235,236,375,462,376,377,378,463,240,464,241,379,242,243,244,245,246,247,248,13,333,334,249,250,253,254,380,255,381,382,383,384,385,386,3,4],"tindex":"40637cbf-3e7b-11e6-828c-3be0f322caec","method":{"position":"com.google.gson.reflect.TypeToken:283","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic final boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonObject) {\n        {\n            return (o instanceof com.google.gson.reflect.TypeToken<?>) && (com.google.gson.internal.$Gson$Types.equals(java.lang.reflect.Type, ((com.google.gson.reflect.TypeToken<?>)(o)).java.lang.reflect.Type));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260295972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonObject:54","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[465],"tindex":"40637cc0-3e7b-11e6-828c-13295ab8f3c4","method":{"position":"com.google.gson.JsonObject:53","type":"CtMethodImpl","sourcecode":"public void add(java.lang.String property, com.google.gson.JsonElement value) {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260295972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (value == null) {\n                value = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.put(property, value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[28,30,31,34,67,69,75,403,409,86,97,100,183,453,186,187,466,191,324,467],"tindex":"40637cc1-3e7b-11e6-828c-c3f5231c2f8c","method":{"position":"com.google.gson.stream.JsonWriter:413","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260295972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            writeDeferredName();\n            beforeValue(false);\n            string(value);\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.DateTypeAdapter:86","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[97],"tindex":"40637cc2-3e7b-11e6-828c-775a65962e51","method":{"position":"com.google.gson.internal.bind.DateTypeAdapter:85","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized void write(com.google.gson.stream.JsonWriter out, java.util.Date value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260295972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            java.lang.String java.lang.String = java.text.DateFormat.format(value);\n            out.value(dateFormatAsString);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[359],"tindex":"4063a3d3-3e7b-11e6-828c-2955a4fa64d0","method":{"position":"com.google.gson.Gson:468","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src) {\n    if (src != null) {\n        {\n            if (src == null) {\n                return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            return toJsonTree(src, src.getClass());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260295972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"4063a3d4-3e7b-11e6-828c-a316a6c5bd0d","method":{"position":"com.google.gson.JsonObject:89","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Number value) {\n    if (value == null) {\n        {\n            if (property == null) {\n                {\n                    add(property, createJsonElement(value));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260295972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260295972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:726","type":"CtBinaryOperatorImpl","sourcecode":"value == 0"},"failures":[468,469],"tindex":"4063a3d5-3e7b-11e6-828c-0f83f813cb63","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:170","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(long value) throws java.io.IOException {\n    if (value == 0) {\n        {\n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260295972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:213","type":"CtBinaryOperatorImpl","sourcecode":"(indent.length()) == 0"},"failures":[],"tindex":"4063a3d6-3e7b-11e6-828c-6de10c8c2b0c","method":{"position":"com.google.gson.stream.JsonWriter:212","type":"CtMethodImpl","sourcecode":"public final void setIndent(java.lang.String indent) {\n    if ((indent.length()) == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260295972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (indent == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260295972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if ((indent.length()) == 0) {\n                        com.google.gson.stream.JsonWriter.this.java.lang.String = null;\n                        com.google.gson.stream.JsonWriter.this.java.lang.String = \":\";\n                    } else {\n                        com.google.gson.stream.JsonWriter.this.java.lang.String = indent;\n                        com.google.gson.stream.JsonWriter.this.java.lang.String = \": \";\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"indent"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[97],"tindex":"4063cae7-3e7b-11e6-828c-697aedd01933","method":{"position":"com.google.gson.internal.bind.TypeAdapters:201","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260295972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:332","type":"CtBinaryOperatorImpl","sourcecode":"(toResolve instanceof java.lang.Class) && (((java.lang.Class<?>)(toResolve)).isArray())"},"failures":[],"tindex":"4063cae8-3e7b-11e6-828c-b7d9e4caea61","method":{"position":"com.google.gson.internal.$Gson$Types:226","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type getGenericSupertype(java.lang.reflect.Type context, java.lang.Class<?> rawType, java.lang.Class<?> toResolve) {\n    if (toResolve == rawType) {\n        return context;\n    } \n    if (toResolve.isInterface()) {\n        java.lang.Class<?>[] java.lang.Class<?>[] = rawType.getInterfaces();\n        for (int int = 0, int int = interfaces.int ; i < length ; i++) {\n            if ((interfaces[i]) == toResolve) {\n                return rawType.getGenericInterfaces()[i];\n            } else if (toResolve.isAssignableFrom(interfaces[i])) {\n                return com.google.gson.internal.$Gson$Types.getGenericSupertype(rawType.getGenericInterfaces()[i], interfaces[i], toResolve);\n            } \n        }\n    } \n    if (!(rawType.isInterface())) {\n        while (rawType != (java.lang.Object.java.lang.Object.java.lang.Class)) {\n            java.lang.Class<?> java.lang.Class<?> = rawType.getSuperclass();\n            if (rawSupertype == toResolve) {\n                return rawType.getGenericSuperclass();\n            } else if (toResolve.isAssignableFrom(rawSupertype)) {\n                return com.google.gson.internal.$Gson$Types.getGenericSupertype(rawType.getGenericSuperclass(), rawSupertype, toResolve);\n            } \n            rawType = rawSupertype;\n        }\n    } \n    return toResolve;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"context"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:537","type":"CtFieldReadImpl","sourcecode":"lenient"},"failures":[],"tindex":"4063cae9-3e7b-11e6-828c-b9651f9a4925","method":{"position":"com.google.gson.stream.JsonReader:325","type":"CtMethodImpl","sourcecode":"public final void setLenient(boolean lenient) {\n    if (lenient) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260295972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.stream.JsonReader.this.boolean = lenient;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"lenient"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[],"tindex":"4063caea-3e7b-11e6-828c-85ec81f37eca","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:116","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<?> getFieldAdapter(com.google.gson.Gson gson, java.lang.reflect.Field field, com.google.gson.reflect.TypeToken<?> fieldType) {\n    if (field.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260295972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (field.isSynthetic()) {\n                {\n                    com.google.gson.annotations.JsonAdapter com.google.gson.annotations.JsonAdapter = field.getAnnotation(com.google.gson.annotations.JsonAdapter.com.google.gson.annotations.JsonAdapter.java.lang.Class);\n                    if (annotation != null) {\n                        com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory.getTypeAdapter(com.google.gson.internal.ConstructorConstructor, gson, fieldType, annotation);\n                        if (adapter != null)\n                            return adapter;\n                        \n                    } \n                    return gson.getAdapter(fieldType);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260295972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"field"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:85","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[],"tindex":"4063caeb-3e7b-11e6-828c-abe8e80e6356","method":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:84","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Object array) throws java.io.IOException {\n    if (array == null) {\n        {\n            if (array == null) {\n                out.nullValue();\n                return ;\n            } \n            out.beginArray();\n            for (int int = 0, int int = java.lang.reflect.Array.getLength(array) ; i < length ; i++) {\n                E E = ((E)(java.lang.reflect.Array.get(array, i)));\n                com.google.gson.TypeAdapter<E>.write(out, value);\n            }\n            out.endArray();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260295972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"4063f1fc-3e7b-11e6-828c-2d1c51c8845e","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:144","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260295972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":42,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
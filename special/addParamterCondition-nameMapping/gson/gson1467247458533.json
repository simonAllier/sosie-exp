{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":276,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":164,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":144,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":326,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":360,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":155,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":76,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":105,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":271,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":175,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":74,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":184,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":116,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":278,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":335,"com.google.gson.functional.ObjectTest.testSingletonLists":72,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":341,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":246,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":33,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":92,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":81,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":314,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":293,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":48,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":118,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":137,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":299,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":60,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":136,"com.google.gson.functional.EnumTest.testEnumCaseMapping":291,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":308,"com.google.gson.functional.JsonTreeTest.testToJsonTree":372,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":123,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":111,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":12,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreBehindInVersion":321,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":97,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":338,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":223,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":247,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":281,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":66,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":350,"com.google.gson.JsonArrayTest.testEqualsOnEmptyArray":411,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":58,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":244,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":85,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":114,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":162,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":259,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":256,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":410,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":86,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":219,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":100,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":133,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":380,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":378,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":238,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":19,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":143,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":158,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":260,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":213,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":353,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":310,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":347,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":390,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":249,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":330,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":342,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":5,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":334,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":21,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":90,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":103,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":197,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":15,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":243,"com.google.gson.JsonArrayTest.testEqualsNonEmptyArray":412,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":344,"com.google.gson.functional.CollectionTest.testSetDeserialization":384,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":117,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":349,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":42,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":20,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":82,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":41,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":298,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":17,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":55,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":362,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":102,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":322,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":392,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":93,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":235,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":393,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":193,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":226,"com.google.gson.functional.MapTest.testSerializeMaps":130,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":190,"com.google.gson.functional.MapTest.testComplexKeysSerialization":141,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":233,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":68,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":289,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":285,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":379,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":121,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":327,"com.google.gson.functional.MapTest.testStringKeyDeserialization":142,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":230,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":25,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":266,"com.google.gson.functional.PrettyPrintingTest.testMap":119,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":201,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":178,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":395,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":232,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":313,"com.google.gson.functional.MapTest.testMapOfMapSerialization":135,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":255,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":172,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":257,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":34,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":165,"com.google.gson.functional.FieldNamingTest.testIdentity":191,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":22,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":50,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":87,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":1,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":71,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":273,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":371,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":300,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":240,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":146,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":406,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":171,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":413,"com.google.gson.functional.MapTest.testMapSubclassSerialization":129,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":265,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":47,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":153,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":305,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":316,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":385,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":381,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":361,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":40,"com.google.gson.functional.EnumTest.testEnumSubclass":287,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":80,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":315,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":239,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":24,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":324,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":148,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":147,"com.google.gson.stream.JsonWriterTest.testNullName":409,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":3,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":222,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":405,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":329,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":73,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":127,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":221,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":156,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":215,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":67,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":333,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":29,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":75,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":399,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":206,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":228,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":192,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":166,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":113,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":337,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":109,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":264,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":194,"com.google.gson.ObjectTypeAdapterTest.testSerializeObject":311,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":248,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":234,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":204,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAheadInVersion":319,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":251,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":170,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":99,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":218,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":124,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":126,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":398,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":10,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":131,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":283,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":279,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":325,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":112,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":364,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":355,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":373,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":203,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":4,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":336,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":145,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":151,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":120,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":303,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":110,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":31,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":284,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":62,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":261,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":0,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":187,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":286,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":177,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":152,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":186,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":268,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":382,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":104,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":402,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":307,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":9,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":23,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":356,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":292,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":391,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":14,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":26,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":359,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":346,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":290,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":375,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":181,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":365,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":199,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":27,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":277,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":400,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":237,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":401,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":7,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":262,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":269,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":387,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":282,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":397,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":195,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":77,"com.google.gson.functional.MapTest.testGeneralMapField":140,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":212,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":200,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":227,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":241,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":106,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":94,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":161,"com.google.gson.MixedStreamTest.testReadMixedStreamed":306,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":98,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":252,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":236,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":301,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":340,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":61,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":16,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":367,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":134,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":174,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":128,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":30,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":270,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":64,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":295,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":157,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":343,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":36,"com.google.gson.functional.ObjectTest.testNestedDeserialization":89,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":49,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":394,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":2,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":59,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":205,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":39,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":263,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":374,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":275,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":383,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":376,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":173,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":139,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":245,"com.google.gson.functional.MapTest.testInterfaceTypeMap":138,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":224,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":202,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":6,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":288,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":150,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":57,"com.google.gson.MixedStreamTest.testWriteClosed":408,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":180,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":396,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":332,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":345,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":43,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":331,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":208,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":357,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":386,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":369,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":11,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":78,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":179,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":317,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":296,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":377,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":182,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":101,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":51,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":168,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":370,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":69,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":209,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":207,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":254,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":108,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":404,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":132,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":354,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":163,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":358,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":176,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":304,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":83,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":149,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":198,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":414,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":302,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":91,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":214,"com.google.gson.ObjectTypeAdapterTest.testSerialize":312,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":159,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":272,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":225,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":188,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":44,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":167,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":297,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":95,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":18,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":35,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":54,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":115,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":280,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":37,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":88,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":125,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":258,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":231,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":348,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":368,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":96,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":274,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":403,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":183,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":217,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":38,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":107,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":210,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":323,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":52,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":318,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":154,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAtSameVersion":320,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":46,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":32,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":351,"com.google.gson.functional.ObjectTest.testNestedSerialization":84,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":388,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":160,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":250,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":63,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":196,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":13,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":79,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":267,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":8,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":339,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":366,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":309,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":352,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":363,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":294,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":220,"com.google.gson.functional.CollectionTest.testSetSerialization":185,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":242,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":28,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":122,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":70,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":169,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":328,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":211,"com.google.gson.MixedStreamTest.testWriteInvalidState":407,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":229,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":253,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":389,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":189,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":65,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":53,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":56,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":45,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":216},"transformations":[{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:79","type":"CtUnaryOperatorImpl","sourcecode":"!(json instanceof com.google.gson.JsonPrimitive)"},"failures":[],"tindex":"c7262305-3e5b-11e6-999a-854392fc43ff","method":{"position":"com.google.gson.Gson:871","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n        {\n            if (json == null) {\n                return null;\n            } \n            return ((T)(fromJson(new com.google.gson.internal.bind.JsonTreeReader(json), typeOfT)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871413/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[0],"tindex":"c7267126-3e5b-11e6-999a-a71630d2752a","method":{"position":"com.google.gson.Gson:285","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871413/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            float float = value.floatValue();\n            checkValidFloatingPoint(floatValue);\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:109","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonPrimitive"},"failures":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,0,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315],"tindex":"c7269837-3e5b-11e6-999a-a3335a7bcb78","method":{"position":"com.google.gson.reflect.TypeToken:283","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic final boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonPrimitive) {\n        {\n            return (o instanceof com.google.gson.reflect.TypeToken<?>) && (com.google.gson.internal.$Gson$Types.equals(java.lang.reflect.Type, ((com.google.gson.reflect.TypeToken<?>)(o)).java.lang.reflect.Type));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871413/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:94","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.Class"},"failures":[],"tindex":"c726bf48-3e5b-11e6-999a-f3cbedaf4d8c","method":{"position":"com.google.gson.internal.Primitives:79","type":"CtMethodImpl","sourcecode":"public static boolean isWrapperType(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class) {\n        {\n            return com.google.gson.internal.Primitives.com.google.gson.internal.Primitives.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.containsKey(com.google.gson.internal.$Gson$Preconditions.checkNotNull(type));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871413/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:578","type":"CtBinaryOperatorImpl","sourcecode":"root == null"},"failures":[],"tindex":"c726bf49-3e5b-11e6-999a-038377aa34c7","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:626","type":"CtMethodImpl","sourcecode":"void reset(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root == null) {\n        {\n            if (root == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871413/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                    for (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root ; n != null ; n = n.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) {\n                        n.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = stackTop;\n                        stackTop = n;\n                    }\n                    com.google.gson.internal.LinkedHashTreeMap.AvlIterator.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = stackTop;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871413/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:233","type":"CtBinaryOperatorImpl","sourcecode":"annotation != null"},"failures":[316,292,293,294,295,317,296,318,319,320,321],"tindex":"c726bf4a-3e5b-11e6-999a-573abcf485d3","method":{"position":"com.google.gson.internal.Excluder:232","type":"CtMethodImpl","sourcecode":"private boolean isValidSince(com.google.gson.annotations.Since annotation) {\n    if (annotation != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871413/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (annotation != null) {\n                double double = annotation.value();\n                if (annotationVersion > (double)) {\n                    return false;\n                } \n            } \n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.FieldNamingPolicy:143","type":"CtInvocationImpl","sourcecode":"java.lang.Character.isLetter(firstCharacter)"},"failures":[322,323,324,325,187,190],"tindex":"c726e65b-3e5b-11e6-999a-41f1d3aafe28","method":{"position":"com.google.gson.FieldNamingPolicy:163","type":"CtMethodImpl","sourcecode":"private static java.lang.String modifyString(char firstCharacter, java.lang.String srcString, int indexOfSubstring) {\n    if (java.lang.Character.isLetter(firstCharacter)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871413/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (java.lang.Character.isLetter(firstCharacter)) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871413/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return indexOfSubstring < (srcString.length()) ? firstCharacter + (srcString.substring(indexOfSubstring)) : java.lang.String.valueOf(firstCharacter);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"firstCharacter":"firstCharacter"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:92","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof java.util.Iterator"},"failures":[],"tindex":"c726e65c-3e5b-11e6-999a-455632806ec0","method":{"position":"com.google.gson.internal.LinkedTreeMap:605","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof java.util.Iterator) {\n        {\n            return containsKey(o);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871413/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:227","type":"CtBinaryOperatorImpl","sourcecode":"toResolve == rawType"},"failures":[],"tindex":"c726e65d-3e5b-11e6-999a-0dabb1e9aa77","method":{"position":"com.google.gson.internal.$Gson$Types:226","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type getGenericSupertype(java.lang.reflect.Type context, java.lang.Class<?> rawType, java.lang.Class<?> toResolve) {\n    if (toResolve == rawType) {\n        return context;\n    } \n    if (toResolve.isInterface()) {\n        java.lang.Class<?>[] java.lang.Class<?>[] = rawType.getInterfaces();\n        for (int int = 0, int int = interfaces.int ; i < length ; i++) {\n            if ((interfaces[i]) == toResolve) {\n                return rawType.getGenericInterfaces()[i];\n            } else if (toResolve.isAssignableFrom(interfaces[i])) {\n                return com.google.gson.internal.$Gson$Types.getGenericSupertype(rawType.getGenericInterfaces()[i], interfaces[i], toResolve);\n            } \n        }\n    } \n    if (!(rawType.isInterface())) {\n        while (rawType != (java.lang.Object.java.lang.Object.java.lang.Class)) {\n            java.lang.Class<?> java.lang.Class<?> = rawType.getSuperclass();\n            if (rawSupertype == toResolve) {\n                return rawType.getGenericSuperclass();\n            } else if (toResolve.isAssignableFrom(rawSupertype)) {\n                return com.google.gson.internal.$Gson$Types.getGenericSupertype(rawType.getGenericSuperclass(), rawSupertype, toResolve);\n            } \n            rawType = rawSupertype;\n        }\n    } \n    return toResolve;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"rawType":"rawType","toResolve":"rawType"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:180","type":"CtUnaryOperatorImpl","sourcecode":"!(b instanceof java.lang.reflect.GenericArrayType)"},"failures":[],"tindex":"c7270d6e-3e5b-11e6-999a-494cba87e4c1","method":{"position":"com.google.gson.internal.$Gson$Types:151","type":"CtMethodImpl","sourcecode":"static boolean equal(java.lang.Object a, java.lang.Object b) {\n    return (a == b) || ((a != null) && (a.equals(b)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:109","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonPrimitive"},"failures":[],"tindex":"c7270d6f-3e5b-11e6-999a-91a0fd1d28ee","method":{"position":"com.google.gson.internal.$Gson$Types:213","type":"CtMethodImpl","sourcecode":"private static int hashCodeOrZero(java.lang.Object o) {\n    return o != null ? o.hashCode() : 0;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:118","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.Class<?>"},"failures":[326,327,328,329,1,330,2,3,4,5,331,6,7,8,332,9,10,11,12,13,14,15,16,17,19,23,24,26,28,37,333,39,40,41,334,42,335,43,44,45,336,337,46,47,338,339,340,341,342,48,50,343,52,53,54,64,65,66,67,68,344,69,70,71,72,73,74,75,76,77,345,346,347,78,348,349,350,79,80,81,82,351,83,84,352,353,85,354,86,87,355,356,88,357,358,359,89,360,361,92,362,363,364,365,0,366,367,368,369,370,112,371,372,113,115,116,117,120,121,125,132,137,138,139,140,141,144,145,146,147,148,322,149,373,374,375,323,376,324,377,378,150,151,379,325,152,153,154,155,380,381,382,383,159,162,163,168,169,170,171,172,175,177,181,384,184,185,187,188,189,190,191,193,194,195,196,198,385,204,386,205,206,207,208,387,388,389,390,227,228,229,235,236,237,238,239,241,242,243,244,391,271,272,274,275,392,276,393,394,395,396,397,277,398,278,282,283,399,400,401,285,402,288,289,292,293,294,403,295,317,404,296,298,405,406,304,305,407,408,306,307,310,312],"tindex":"c7270d70-3e5b-11e6-999a-4bcd54e85485","method":{"position":"com.google.gson.internal.Primitives:69","type":"CtMethodImpl","sourcecode":"public static boolean isPrimitive(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871413/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return com.google.gson.internal.Primitives.com.google.gson.internal.Primitives.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.containsKey(type);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:243","type":"CtBinaryOperatorImpl","sourcecode":"annotation != null"},"failures":[292,293,294,403,295,317,404,296,320,321],"tindex":"c7273481-3e5b-11e6-999a-495585afb920","method":{"position":"com.google.gson.internal.Excluder:242","type":"CtMethodImpl","sourcecode":"private boolean isValidUntil(com.google.gson.annotations.Until annotation) {\n    if (annotation != null) {\n        {\n            if (annotation != null) {\n                double double = annotation.value();\n                if (annotationVersion <= (double)) {\n                    return false;\n                } \n            } \n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871413/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[409],"tindex":"c7273482-3e5b-11e6-999a-693077f49033","method":{"position":"com.google.gson.stream.JsonWriter:385","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter name(java.lang.String name) throws java.io.IOException {\n    if (name == null) {\n        {\n            if (name == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871413/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (name == null) {\n                        throw new java.lang.NullPointerException(\"name == null\");\n                    } \n                    if ((java.lang.String) != null) {\n                        throw new java.lang.IllegalStateException();\n                    } \n                    if ((int) == 0) {\n                        throw new java.lang.IllegalStateException(\"JsonWriter is closed.\");\n                    } \n                    java.lang.String = name;\n                    return com.google.gson.stream.JsonWriter.this;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871413/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:120","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonNull"},"failures":[410,411,412],"tindex":"c727f7d3-3e5b-11e6-999a-0fab7bb147e1","method":{"position":"com.google.gson.JsonArray:329","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonNull) {\n        {\n            return (o == (com.google.gson.JsonArray.this)) || ((o instanceof com.google.gson.JsonArray) && (((com.google.gson.JsonArray)(o)).java.util.List<com.google.gson.JsonElement>.equals(java.util.List<com.google.gson.JsonElement>)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871413/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[0,413,414],"tindex":"c727f7d4-3e5b-11e6-999a-059149bc2753","method":{"position":"com.google.gson.Gson:532","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871413/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871413/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n                    toJson(src, typeOfSrc, writer);\n                    return writer.toString();\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"c727f7d5-3e5b-11e6-999a-b9d15e3dd5eb","method":{"position":"com.google.gson.Gson:532","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871413/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871413/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n                    toJson(src, typeOfSrc, writer);\n                    return writer.toString();\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:537","type":"CtFieldReadImpl","sourcecode":"lenient"},"failures":[],"tindex":"c727f7d6-3e5b-11e6-999a-c5662a57a017","method":{"position":"com.google.gson.stream.JsonReader:325","type":"CtMethodImpl","sourcecode":"public final void setLenient(boolean lenient) {\n    if (lenient) {\n        {\n            com.google.gson.stream.JsonReader.this.boolean = lenient;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871413/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"lenient"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[],"tindex":"c7281ee7-3e5b-11e6-999a-d98544de3227","method":{"position":"com.google.gson.Gson:576","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src != null) {\n        {\n            try {\n                com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                toJson(src, typeOfSrc, jsonWriter);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871413/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:274","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[],"tindex":"c7281ee8-3e5b-11e6-999a-efa04096b4fb","method":{"position":"com.google.gson.Gson:273","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> floatAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871413/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return ((float)(in.nextDouble()));\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    float float = value.floatValue();\n                    checkValidFloatingPoint(floatValue);\n                    out.value(value);\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1413","type":"CtVariableReadImpl","sourcecode":"throwOnEof"},"failures":[],"tindex":"c7281ee9-3e5b-11e6-999a-237f2c11d612","method":{"position":"com.google.gson.stream.JsonReader:1331","type":"CtMethodImpl","sourcecode":"private int nextNonWhitespace(boolean throwOnEof) throws java.io.IOException {\n    if (throwOnEof) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871413/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            char[] char[] = com.google.gson.stream.JsonReader.this.char[];\n            int int = int;\n            int int = int;\n            while (true) {\n                if (p == l) {\n                    int = p;\n                    if (!(fillBuffer(1))) {\n                        break;\n                    } \n                    p = int;\n                    l = int;\n                } \n                int int = buffer[(p++)];\n                if (c == '\\n') {\n                    (int)++;\n                    int = p;\n                    continue;\n                } else if (((c == ' ') || (c == '\\r')) || (c == '\\t')) {\n                    continue;\n                } \n                if (c == '/') {\n                    int = p;\n                    if (p == l) {\n                        (int)--;\n                        boolean boolean = fillBuffer(2);\n                        (int)++;\n                        if (!charsLoaded) {\n                            return c;\n                        } \n                    } \n                    checkLenient();\n                    char char = buffer[int];\n                    switch (peek) {\n                        case '*' :\n                            (int)++;\n                            if (!(skipTo(\"*/\"))) {\n                                throw syntaxError(\"Unterminated comment\");\n                            } \n                            p = (int) + 2;\n                            l = int;\n                            continue;\n                        case '/' :\n                            (int)++;\n                            skipToEndOfLine();\n                            p = int;\n                            l = int;\n                            continue;\n                        default :\n                            return c;\n                    }\n                } else if (c == '#') {\n                    int = p;\n                    checkLenient();\n                    skipToEndOfLine();\n                    p = int;\n                    l = int;\n                } else {\n                    int = p;\n                    return c;\n                }\n            }\n            if (throwOnEof) {\n                throw new java.io.EOFException(((((\"End of input\" + \" at line \") + (getLineNumber())) + \" column \") + (getColumnNumber())));\n            } else {\n                return -1;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"throwOnEof":"throwOnEof"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.JsonPrimitive:297","type":"CtBinaryOperatorImpl","sourcecode":"(value) instanceof java.lang.Number"},"failures":[],"tindex":"c72845fa-3e5b-11e6-999a-c16b524925cb","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n@java.lang.Override\nvoid write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value instanceof java.lang.Number) {\n        {\n            java.lang.Object java.lang.Object = field.get(value);\n            com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n            t.write(writer, fieldValue);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871413/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"c72845fb-3e5b-11e6-999a-2f2a9d48251f","method":{"position":"com.google.gson.Gson:468","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871413/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src == null) {\n                return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            return toJsonTree(src, src.getClass());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"c7286d0c-3e5b-11e6-999a-3d262ddef3b5","method":{"position":"com.google.gson.Gson:136","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        {\n            return toJsonTree(src, typeOfSrc);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871413/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:305","type":"CtBinaryOperatorImpl","sourcecode":"node != null"},"failures":[],"tindex":"c7286d0d-3e5b-11e6-999a-fdcb19c4bdd1","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:686","type":"CtMethodImpl","sourcecode":"void add(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node) {\n    if (node != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871413/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            node.int = 1;\n            if (((int) > 0) && (((int) & 1) == 0)) {\n                (int)++;\n                (int)--;\n                (int)++;\n            } \n            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node;\n            (int)++;\n            if (((int) > 0) && (((int) & 1) == 0)) {\n                (int)++;\n                (int)--;\n                (int)++;\n            } \n            for (int int = 4 ; ((int) & (scale - 1)) == (scale - 1) ; scale *= 2) {\n                if ((int) == 0) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                    center.int = (right.int) + 1;\n                    left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                } else if ((int) == 1) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                    center.int = (right.int) + 1;\n                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    int = 0;\n                } else if ((int) == 2) {\n                    int = 0;\n                } \n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"node"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"c728941e-3e5b-11e6-999a-095beafc4fb7","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:175","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871413/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            if (!(isLenient())) {\n                double double = value.doubleValue();\n                if ((java.lang.Double.isNaN(d)) || (java.lang.Double.isInfinite(d))) {\n                    throw new java.lang.IllegalArgumentException((\"JSON forbids NaN and infinities: \" + value));\n                } \n            } \n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory:43","type":"CtBinaryOperatorImpl","sourcecode":"annotation == null"},"failures":[],"tindex":"c728bb2f-3e5b-11e6-999a-c5647cf9a787","method":{"position":"com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory:50","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nstatic com.google.gson.TypeAdapter<?> getTypeAdapter(com.google.gson.internal.ConstructorConstructor constructorConstructor, com.google.gson.Gson gson, com.google.gson.reflect.TypeToken<?> fieldType, com.google.gson.annotations.JsonAdapter annotation) {\n    if (annotation == null) {\n        {\n            java.lang.Class<?> java.lang.Class<?> = annotation.value();\n            if (com.google.gson.TypeAdapter.com.google.gson.TypeAdapter.java.lang.Class.isAssignableFrom(value)) {\n                java.lang.Class<com.google.gson.TypeAdapter<?>> java.lang.Class<com.google.gson.TypeAdapter<?>> = ((java.lang.Class<com.google.gson.TypeAdapter<?>>)(value));\n                return constructorConstructor.get(com.google.gson.reflect.TypeToken.get(typeAdapter)).construct();\n            } \n            if (com.google.gson.TypeAdapterFactory.com.google.gson.TypeAdapterFactory.java.lang.Class.isAssignableFrom(value)) {\n                java.lang.Class<com.google.gson.TypeAdapterFactory> java.lang.Class<com.google.gson.TypeAdapterFactory> = ((java.lang.Class<com.google.gson.TypeAdapterFactory>)(value));\n                return constructorConstructor.get(com.google.gson.reflect.TypeToken.get(typeAdapterFactory)).construct().create(gson, fieldType);\n            } \n            throw new java.lang.IllegalArgumentException(\"@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.\");\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871413/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"c728bb30-3e5b-11e6-999a-198ecb5e14e8","method":{"position":"com.google.gson.JsonObject:53","type":"CtMethodImpl","sourcecode":"public void add(java.lang.String property, com.google.gson.JsonElement value) {\n    if (property == null) {\n        {\n            if (value == null) {\n                value = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.put(property, value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871413/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:360","type":"CtVariableReadImpl","sourcecode":"insert"},"failures":[],"tindex":"c728bb31-3e5b-11e6-999a-1586cb472a67","method":{"position":"com.google.gson.internal.LinkedTreeMap:310","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (insert) {\n        {\n            for (com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>) {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                int int = left != null ? left.int : 0;\n                int int = right != null ? right.int : 0;\n                int int = leftHeight - rightHeight;\n                if (delta == (-2)) {\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    int int = rightRight != null ? rightRight.int : 0;\n                    int int = rightLeft != null ? rightLeft.int : 0;\n                    int int = rightLeftHeight - rightRightHeight;\n                    if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                        rotateLeft(node);\n                    } else {\n                        assert rightDelta == 1;\n                        rotateRight(right);\n                        rotateLeft(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 2) {\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    int int = leftRight != null ? leftRight.int : 0;\n                    int int = leftLeft != null ? leftLeft.int : 0;\n                    int int = leftLeftHeight - leftRightHeight;\n                    if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                        rotateRight(node);\n                    } else {\n                        assert leftDelta == (-1);\n                        rotateLeft(left);\n                        rotateRight(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 0) {\n                    node.int = leftHeight + 1;\n                    if (insert) {\n                        break;\n                    } \n                } else {\n                    assert (delta == (-1)) || (delta == 1);\n                    node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                    if (!insert) {\n                        break;\n                    } \n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871413/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"insert"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"c728e242-3e5b-11e6-999a-ab935b6d8778","method":{"position":"com.google.gson.Gson:510","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src) {\n    if (src == null) {\n        {\n            if (src == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871413/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (src == null) {\n                        return toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull);\n                    } \n                    return toJson(src, src.getClass());\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871413/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:274","type":"CtBinaryOperatorImpl","sourcecode":"target instanceof java.lang.String"},"failures":[],"tindex":"c728e243-3e5b-11e6-999a-45f3d8532849","method":{"position":"com.google.gson.JsonPrimitive:273","type":"CtMethodImpl","sourcecode":"private static boolean isPrimitiveOrString(java.lang.Object target) {\n    if (target instanceof java.lang.String) {\n        {\n            if (target instanceof java.lang.String) {\n                return true;\n            } \n            java.lang.Class<?> java.lang.Class<?> = target.getClass();\n            for (java.lang.Class<?> java.lang.Class<?> : com.google.gson.JsonPrimitive.com.google.gson.JsonPrimitive.java.lang.Class<?>[]) {\n                if (standardPrimitive.isAssignableFrom(classOfPrimitive)) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871413/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"target":"target"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:85","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[],"tindex":"c728e244-3e5b-11e6-999a-cb7be30ebea9","method":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:84","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Object array) throws java.io.IOException {\n    if (array == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871413/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (array == null) {\n                out.nullValue();\n                return ;\n            } \n            out.beginArray();\n            for (int int = 0, int int = java.lang.reflect.Array.getLength(array) ; i < length ; i++) {\n                E E = ((E)(java.lang.reflect.Array.get(array, i)));\n                com.google.gson.TypeAdapter<E>.write(out, value);\n            }\n            out.endArray();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:274","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[],"tindex":"c7290955-3e5b-11e6-999a-dbe56dfa7d89","method":{"position":"com.google.gson.Gson:249","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> doubleAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return in.nextDouble();\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    double double = value.doubleValue();\n                    checkValidFloatingPoint(doubleValue);\n                    out.value(value);\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871413/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"c7290956-3e5b-11e6-999a-a56dbeed2209","method":{"position":"com.google.gson.Gson:510","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src) {\n    if (src == null) {\n        {\n            if (src == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871413/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (src == null) {\n                        return toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull);\n                    } \n                    return toJson(src, src.getClass());\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871413/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[],"tindex":"c7290957-3e5b-11e6-999a-a3d5e200e897","method":{"position":"com.google.gson.stream.JsonWriter:385","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter name(java.lang.String name) throws java.io.IOException {\n    if (name == null) {\n        {\n            if (name == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871413/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (name == null) {\n                        throw new java.lang.NullPointerException(\"name == null\");\n                    } \n                    if ((java.lang.String) != null) {\n                        throw new java.lang.IllegalStateException();\n                    } \n                    if ((int) == 0) {\n                        throw new java.lang.IllegalStateException(\"JsonWriter is closed.\");\n                    } \n                    java.lang.String = name;\n                    return com.google.gson.stream.JsonWriter.this;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871413/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.FieldNamingPolicy:143","type":"CtInvocationImpl","sourcecode":"java.lang.Character.isLetter(firstCharacter)"},"failures":[],"tindex":"c7290958-3e5b-11e6-999a-a17b1d9197ae","method":{"position":"com.google.gson.FieldNamingPolicy:163","type":"CtMethodImpl","sourcecode":"private static java.lang.String modifyString(char firstCharacter, java.lang.String srcString, int indexOfSubstring) {\n    if (java.lang.Character.isLetter(firstCharacter)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871413/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (java.lang.Character.isLetter(firstCharacter)) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871413/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return indexOfSubstring < (srcString.length()) ? firstCharacter + (srcString.substring(indexOfSubstring)) : java.lang.String.valueOf(firstCharacter);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"firstCharacter":"firstCharacter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:578","type":"CtBinaryOperatorImpl","sourcecode":"root == null"},"failures":[],"tindex":"c7293069-3e5b-11e6-999a-c93fdcaafa08","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:626","type":"CtMethodImpl","sourcecode":"void reset(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root == null) {\n        {\n            if (root == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871413/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                    for (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root ; n != null ; n = n.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) {\n                        n.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = stackTop;\n                        stackTop = n;\n                    }\n                    com.google.gson.internal.LinkedHashTreeMap.AvlIterator.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = stackTop;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871413/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":37,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
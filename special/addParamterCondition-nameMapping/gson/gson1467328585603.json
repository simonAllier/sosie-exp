{"failureDictionary":{"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":45,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":282,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":290,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":302,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":197,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":136,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":79,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":354,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":328,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":65,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":215,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":301,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":254,"com.google.gson.MixedStreamTest.testWriteLenient":6,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":307,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":34,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":191,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":234,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":148,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":154,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":26,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":39,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":260,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":284,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":156,"com.google.gson.functional.ObjectTest.testSingletonLists":123,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":27,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":188,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":137,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":8,"com.google.gson.stream.JsonWriterTest.testStrings":24,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":356,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":146,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":333,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":343,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":345,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":115,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":264,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":275,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":131,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":225,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":349,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":117,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":172,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":313,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":314,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":287,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":351,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":80,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":288,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":37,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":92,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":144,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":152,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":162,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":352,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":321,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":221,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":267,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":294,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":63,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":327,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":342,"com.google.gson.functional.EnumTest.testEnumCaseMapping":38,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":12,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":135,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":170,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":329,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":292,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":223,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":226,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":178,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":239,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":5,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":82,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":324,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":33,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":325,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":304,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":151,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":297,"com.google.gson.functional.MapTest.testGeneralMapField":75,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":9,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":158,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":54,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":163,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":192,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":97,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":110,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":173,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":300,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":61,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":15,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":20,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":155,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":336,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":198,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":98,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":271,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":64,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":344,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":338,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":1,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":256,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":103,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":51,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":130,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":203,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":109,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":316,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":341,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":94,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":57,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":171,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":331,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":204,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":262,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":81,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":212,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":78,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":2,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":62,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":240,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":19,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":29,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":209,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":220,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":274,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":3,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":272,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":228,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":84,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":237,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":340,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":347,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":229,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":190,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":298,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":74,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":208,"com.google.gson.functional.MapTest.testInterfaceTypeMap":73,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":186,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":251,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":165,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":86,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":250,"com.google.gson.functional.CollectionTest.testSetDeserialization":248,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":261,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":36,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":114,"com.google.gson.functional.EnumTest.testEnumSet":32,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":246,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":281,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":101,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":200,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":174,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":60,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":68,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":128,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":14,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":339,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":58,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":147,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":150,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":214,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":113,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":125,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":224,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":85,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":243,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":107,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":132,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":273,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":303,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":90,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":133,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":334,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":257,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":88,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":126,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":317,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":134,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":296,"com.google.gson.functional.MapTest.testSerializeMaps":10,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":310,"com.google.gson.functional.MapTest.testComplexKeysSerialization":77,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":319,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":231,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":153,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":189,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":276,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":40,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":160,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":112,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":332,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":47,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":161,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":232,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":242,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":211,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":104,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":195,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":318,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":216,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":70,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":182,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":99,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":350,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":4,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":11,"com.google.gson.functional.MapTest.testRawMapSerialization":76,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":205,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":164,"com.google.gson.functional.PrettyPrintingTest.testMap":289,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":116,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":227,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":175,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":213,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":305,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":13,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":244,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":141,"com.google.gson.functional.CollectionTest.testQueueSerialization":149,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":183,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":330,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnValue":22,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":49,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":145,"com.google.gson.ObjectTypeAdapterTest.testSerialize":7,"com.google.gson.functional.MapTest.testMapOfMapSerialization":72,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":121,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":95,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":235,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":0,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":44,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":357,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":138,"com.google.gson.functional.FieldNamingTest.testIdentity":311,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":53,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":308,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":266,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":348,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":56,"com.google.gson.functional.MapTest.testMapWithQuotes":71,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":176,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":219,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":283,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":199,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":335,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":358,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":89,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":268,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":139,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":346,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":259,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":18,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":323,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":43,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":184,"com.google.gson.functional.MapTest.testMapSubclassSerialization":67,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":210,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":105,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":30,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":180,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":55,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":245,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":166,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":206,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":312,"com.google.gson.functional.EnumTest.testEnumSubclass":35,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":177,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":265,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":168,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":181,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":236,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":306,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":201,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":48,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":100,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":193,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":230,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":93,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":320,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":31,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":46,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":286,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":222,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":355,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":17,"com.google.gson.functional.ObjectTest.testNestedSerialization":129,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":83,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":96,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":108,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":218,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":279,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":119,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":194,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":102,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":278,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":16,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":207,"com.google.gson.stream.JsonWriterTest.testUnicodeLineBreaksEscaped":25,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":50,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":127,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":159,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":124,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":202,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":270,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":241,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":295,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":255,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":140,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":263,"com.google.gson.GsonBuilderTest.testCreatingMoreThanOnce":269,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":252,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":280,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":315,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":258,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":142,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":238,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":196,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":52,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":118,"com.google.gson.functional.CollectionTest.testSetSerialization":249,"com.google.gson.functional.StringTest.testStringValueSerialization":143,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":291,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":353,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":120,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":41,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":217,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":111,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":299,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":106,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":42,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":187,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":28,"com.google.gson.stream.JsonWriterTest.testWrongTopLevelType":23,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":185,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":309,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":157,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":293,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":277,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":21,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":322,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":69,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":87,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":326,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":169,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":233,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":66,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":59,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":253,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":247,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":91,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":122,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":167,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":179,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":285,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":337},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:250","type":"CtVariableReadImpl"},"failures":[0,1,2,3,4,5,6],"tindex":"aaa8258f-3f18-11e6-8b75-4121eddee702","method":{"position":"com.google.gson.Gson:249","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> doubleAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328042018/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return in.nextDouble();\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    double double = value.doubleValue();\n                    checkValidFloatingPoint(doubleValue);\n                    out.value(value);\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl"},"failures":[7,8,9,10,11],"tindex":"aaa8c1d0-3f18-11e6-8b75-67588aa68bd2","method":{"position":"com.google.gson.internal.bind.ObjectTypeAdapter:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Object value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328042018/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            com.google.gson.TypeAdapter<java.lang.Object> com.google.gson.TypeAdapter<java.lang.Object> = ((com.google.gson.TypeAdapter<java.lang.Object>)(com.google.gson.Gson.getAdapter(value.getClass())));\n            if (typeAdapter instanceof com.google.gson.internal.bind.ObjectTypeAdapter) {\n                out.beginObject();\n                out.endObject();\n                return ;\n            } \n            typeAdapter.write(out, value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl"},"failures":[12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,10,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,11,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207],"tindex":"aaa8e8e1-3f18-11e6-8b75-6d3fdc59fdbb","method":{"position":"com.google.gson.stream.JsonWriter:413","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328042018/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                {\n                    if (value == null) {\n                        return nullValue();\n                    } \n                    writeDeferredName();\n                    beforeValue(false);\n                    string(value);\n                    return com.google.gson.stream.JsonWriter.this;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328042018/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[53,66,85,101,208,209,210],"tindex":"aaa90ff2-3f18-11e6-8b75-75b4d35aafa0","method":{"position":"com.google.gson.Gson:285","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            float float = value.floatValue();\n            checkValidFloatingPoint(floatValue);\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328042018/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:103","type":"CtVariableReadImpl"},"failures":[211,212,213,214],"tindex":"aaa90ff3-3f18-11e6-8b75-1d0eb1c5cc7d","method":{"position":"com.google.gson.internal.Excluder:96","type":"CtMethodImpl","sourcecode":"public com.google.gson.internal.Excluder withExclusionStrategy(com.google.gson.ExclusionStrategy exclusionStrategy, boolean serialization, boolean deserialization) {\n    if (serialization) {\n        {\n            if (deserialization) {\n                {\n                    com.google.gson.internal.Excluder com.google.gson.internal.Excluder = clone();\n                    if (serialization) {\n                        result.java.util.List<com.google.gson.ExclusionStrategy> = new java.util.ArrayList<com.google.gson.ExclusionStrategy>(java.util.List<com.google.gson.ExclusionStrategy>);\n                        result.java.util.List<com.google.gson.ExclusionStrategy>.add(exclusionStrategy);\n                    } \n                    if (deserialization) {\n                        result.java.util.List<com.google.gson.ExclusionStrategy> = new java.util.ArrayList<com.google.gson.ExclusionStrategy>(java.util.List<com.google.gson.ExclusionStrategy>);\n                        result.java.util.List<com.google.gson.ExclusionStrategy>.add(exclusionStrategy);\n                    } \n                    return result;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328042018/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328042018/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deserialization":"deserialization"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:103","type":"CtBinaryOperatorImpl"},"failures":[7,28,29,40,41,42,43,44,215,216,217,218,219,220,66,221,77,82,83,222,85,223,224,225,87,226,89,90,227,91,228,92,93,229,230,231,232,233,234,235,236,237,238,239,106,107,240,241,242,243,110,244,245,246,247,131,148,248,249,157,158,159,160,250,161,166,251,252,253,254,255,256,257,258,259,260,261,262,201],"tindex":"aaa93704-3f18-11e6-8b75-d3e88ac32807","method":{"position":"com.google.gson.internal.ConstructorConstructor:200","type":"CtMethodImpl","sourcecode":"private <T>com.google.gson.internal.ObjectConstructor<T> newUnsafeAllocator(final java.lang.reflect.Type type, final java.lang.Class<? super T> rawType) {\n    if (type instanceof java.lang.reflect.GenericArrayType) {\n        {\n            return new com.google.gson.internal.ObjectConstructor<T>() {\n                private final com.google.gson.internal.UnsafeAllocator unsafeAllocator = com.google.gson.internal.UnsafeAllocator.create();\n\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                public T construct() {\n                    try {\n                        java.lang.Object java.lang.Object = com.google.gson.internal.UnsafeAllocator.newInstance(rawType);\n                        return ((T)(newInstance));\n                    } catch (java.lang.Exception e) {\n                        throw new java.lang.RuntimeException((((\"Unable to invoke no-args constructor for \" + type) + \". \") + \"Register an InstanceCreator with Gson for this type may fix this problem.\") , e);\n                    }\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328042018/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"aaa93705-3f18-11e6-8b75-b7bd38f650ef","method":{"position":"com.google.gson.stream.JsonWriter:413","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328042018/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                {\n                    if (value == null) {\n                        return nullValue();\n                    } \n                    writeDeferredName();\n                    beforeValue(false);\n                    string(value);\n                    return com.google.gson.stream.JsonWriter.this;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328042018/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:120","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"aaa95e16-3f18-11e6-8b75-eb2b11b5e84b","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:839","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonNull) {\n        {\n            return containsKey(o);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328042018/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:554","type":"CtBinaryOperatorImpl"},"failures":[12,263,13,264,265,266,14,267,268,15,17,18,269,26,270,271,27,272,28,29,273,34,215,274,216,217,275,218,219,220,52,276,58,59,60,61,62,63,64,65,277,278,10,70,73,75,279,79,80,81,280,90,91,228,92,93,229,230,231,281,282,232,233,95,234,235,283,236,237,100,284,285,286,102,287,288,289,290,104,291,292,293,105,108,109,294,112,0,1,2,113,3,4,5,295,296,118,297,119,298,244,121,299,300,301,133,211,302,134,303,212,213,214,304,305,306,156,157,159,163,164,165,307,308,309,310,311,312,313,314,315,168,316,317,318,319,320,321,322,169,323,324,325,326,327,328,329,330,331,332,333,334,335,336,170,171,337,251,338,339,340,180,341,187,342,189,343,195,196,344,345,346,199,262,200,347,348,349,201,350,351,352,353,202,203,354,355,356,357,358,204,6,207],"tindex":"aaa98527-3f18-11e6-8b75-15dc2842d5e8","method":{"position":"com.google.gson.GsonBuilder:551","type":"CtMethodImpl","sourcecode":"private void addTypeAdaptersForDate(java.lang.String datePattern, int dateStyle, int timeStyle, java.util.List<com.google.gson.TypeAdapterFactory> factories) {\n    if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n        {\n            com.google.gson.DefaultDateTypeAdapter com.google.gson.DefaultDateTypeAdapter;\n            if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n                dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(datePattern);\n            } else if ((dateStyle != (java.text.DateFormat.java.text.DateFormat.int)) && (timeStyle != (java.text.DateFormat.java.text.DateFormat.int))) {\n                dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(dateStyle , timeStyle);\n            } else {\n                return ;\n            }\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.util.Date.java.util.Date.java.lang.Class), dateTypeAdapter));\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Timestamp.java.sql.Timestamp.java.lang.Class), dateTypeAdapter));\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Date.java.sql.Date.java.lang.Class), dateTypeAdapter));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328042018/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"datePattern":"datePattern"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"aaa98528-3f18-11e6-8b75-c9b65e9053c6","method":{"position":"com.google.gson.Gson:847","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(com.google.gson.JsonElement json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328042018/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:198","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"aaa9ac39-3f18-11e6-8b75-9b2e498dfe30","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:223","type":"CtMethodImpl","sourcecode":"private boolean equal(java.lang.Object a, java.lang.Object b) {\n    if (b instanceof java.lang.reflect.TypeVariable) {\n        {\n            return (a == b) || ((a != null) && (a.equals(b)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328042018/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:79","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"aaa9ac3a-3f18-11e6-8b75-37dabaf31db1","method":{"position":"com.google.gson.Gson:871","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328042018/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (json == null) {\n                return null;\n            } \n            return ((T)(fromJson(new com.google.gson.internal.bind.JsonTreeReader(json), typeOfT)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"aaa9d34b-3f18-11e6-8b75-33c8052d796c","method":{"position":"com.google.gson.Gson:552","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328042018/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            if (src != null) {\n                toJson(src, src.getClass(), writer);\n            } else {\n                toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull, writer);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:716","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"aaa9d34c-3f18-11e6-8b75-516e88b6a76e","method":{"position":"com.google.gson.stream.JsonReader:755","type":"CtMethodImpl","sourcecode":"private boolean isLiteral(char c) throws java.io.IOException {\n    if ((c < '0') || (c > '9')) {\n        {\n            switch (c) {\n                case '/' :\n                case '\\\\' :\n                case ';' :\n                case '#' :\n                case '=' :\n                    checkLenient();\n                case '{' :\n                case '}' :\n                case '[' :\n                case ']' :\n                case ':' :\n                case ',' :\n                case ' ' :\n                case '\\t' :\n                case '\\f' :\n                case '\\r' :\n                case '\\n' :\n                    return false;\n                default :\n                    return true;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328042018/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"c"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:99","type":"CtVariableReadImpl"},"failures":[],"tindex":"aaa9fa5d-3f18-11e6-8b75-a3afe9f2d99f","method":{"position":"com.google.gson.internal.Excluder:96","type":"CtMethodImpl","sourcecode":"public com.google.gson.internal.Excluder withExclusionStrategy(com.google.gson.ExclusionStrategy exclusionStrategy, boolean serialization, boolean deserialization) {\n    if (serialization) {\n        {\n            if (deserialization) {\n                {\n                    com.google.gson.internal.Excluder com.google.gson.internal.Excluder = clone();\n                    if (serialization) {\n                        result.java.util.List<com.google.gson.ExclusionStrategy> = new java.util.ArrayList<com.google.gson.ExclusionStrategy>(java.util.List<com.google.gson.ExclusionStrategy>);\n                        result.java.util.List<com.google.gson.ExclusionStrategy>.add(exclusionStrategy);\n                    } \n                    if (deserialization) {\n                        result.java.util.List<com.google.gson.ExclusionStrategy> = new java.util.ArrayList<com.google.gson.ExclusionStrategy>(java.util.List<com.google.gson.ExclusionStrategy>);\n                        result.java.util.List<com.google.gson.ExclusionStrategy>.add(exclusionStrategy);\n                    } \n                    return result;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328042018/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328042018/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serialization":"serialization"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"aaa9fa5e-3f18-11e6-8b75-a741f03f006e","method":{"position":"com.google.gson.Gson:510","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src) {\n    if (src == null) {\n        {\n            if (src == null) {\n                return toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull);\n            } \n            return toJson(src, src.getClass());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328042018/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonArray:58","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"aaaa216f-3f18-11e6-8b75-e38ef65905e4","method":{"position":"com.google.gson.JsonArray:81","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement set(int index, com.google.gson.JsonElement element) {\n    if (element == null) {\n        {\n            return java.util.List<com.google.gson.JsonElement>.set(index, element);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328042018/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:246","type":"CtVariableReadImpl"},"failures":[],"tindex":"aaaa2170-3f18-11e6-8b75-4921900a6d03","method":{"position":"com.google.gson.internal.LinkedTreeMap:217","type":"CtMethodImpl","sourcecode":"void removeInternal(com.google.gson.internal.LinkedTreeMap.Node<K, V> node, boolean unlink) {\n    if (node != null) {\n        {\n            if (unlink) {\n                {\n                    if (unlink) {\n                        node.com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                        node.com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    } \n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    if ((left != null) && (right != null)) {\n                        com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = (left.int) > (right.int) ? left.last() : right.first();\n                        removeInternal(adjacent, false);\n                        int int = 0;\n                        left = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                        if (left != null) {\n                            leftHeight = left.int;\n                            adjacent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = left;\n                            left.com.google.gson.internal.LinkedTreeMap.Node<K, V> = adjacent;\n                            node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                        } \n                        int int = 0;\n                        right = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                        if (right != null) {\n                            rightHeight = right.int;\n                            adjacent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = right;\n                            right.com.google.gson.internal.LinkedTreeMap.Node<K, V> = adjacent;\n                            node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                        } \n                        adjacent.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                        replaceInParent(node, adjacent);\n                        return ;\n                    } else if (left != null) {\n                        replaceInParent(node, left);\n                        node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                    } else if (right != null) {\n                        replaceInParent(node, right);\n                        node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                    } else {\n                        replaceInParent(node, null);\n                    }\n                    rebalance(originalParent, false);\n                    (int)--;\n                    (int)++;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328042018/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328042018/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"unlink":"unlink"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:278","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"aaaa6f91-3f18-11e6-8b75-55696686834d","method":{"position":"com.google.gson.internal.LinkedTreeMap:217","type":"CtMethodImpl","sourcecode":"void removeInternal(com.google.gson.internal.LinkedTreeMap.Node<K, V> node, boolean unlink) {\n    if (node != null) {\n        {\n            if (unlink) {\n                {\n                    if (unlink) {\n                        node.com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                        node.com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    } \n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    if ((left != null) && (right != null)) {\n                        com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = (left.int) > (right.int) ? left.last() : right.first();\n                        removeInternal(adjacent, false);\n                        int int = 0;\n                        left = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                        if (left != null) {\n                            leftHeight = left.int;\n                            adjacent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = left;\n                            left.com.google.gson.internal.LinkedTreeMap.Node<K, V> = adjacent;\n                            node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                        } \n                        int int = 0;\n                        right = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                        if (right != null) {\n                            rightHeight = right.int;\n                            adjacent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = right;\n                            right.com.google.gson.internal.LinkedTreeMap.Node<K, V> = adjacent;\n                            node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                        } \n                        adjacent.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                        replaceInParent(node, adjacent);\n                        return ;\n                    } else if (left != null) {\n                        replaceInParent(node, left);\n                        node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                    } else if (right != null) {\n                        replaceInParent(node, right);\n                        node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                    } else {\n                        replaceInParent(node, null);\n                    }\n                    rebalance(originalParent, false);\n                    (int)--;\n                    (int)++;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328042018/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328042018/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"node"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:92","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"aaaa96a2-3f18-11e6-8b75-792cb72c5d18","method":{"position":"com.google.gson.internal.LinkedTreeMap:570","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof java.util.Iterator) {\n        {\n            return (o instanceof java.util.Map.Entry) && ((findByEntry(((java.util.Map.Entry<?, ?>)(o)))) != null);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328042018/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"aaaabdb3-3f18-11e6-8b75-f9555dae5815","method":{"position":"com.google.gson.internal.bind.TypeAdapters:297","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328042018/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                {\n                    out.value(value);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328042018/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:79","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"aaaabdb4-3f18-11e6-8b75-85532137eb10","method":{"position":"com.google.gson.DefaultDateTypeAdapter:94","type":"CtMethodImpl","sourcecode":"private java.util.Date deserializeToDate(com.google.gson.JsonElement json) {\n    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n        {\n            synchronized(java.text.DateFormat) {\n                try {\n                    return java.text.DateFormat.parse(json.getAsString());\n                } catch (java.text.ParseException ignored) {\n                }\n                try {\n                    return java.text.DateFormat.parse(json.getAsString());\n                } catch (java.text.ParseException ignored) {\n                }\n                try {\n                    return java.text.DateFormat.parse(json.getAsString());\n                } catch (java.text.ParseException e) {\n                    throw new com.google.gson.JsonSyntaxException(json.getAsString() , e);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328042018/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"aaaabdb5-3f18-11e6-8b75-2984e7f44815","method":{"position":"com.google.gson.internal.bind.TypeAdapters:297","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328042018/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                {\n                    out.value(value);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328042018/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"aaaabdb6-3f18-11e6-8b75-6392b2f1c190","method":{"position":"com.google.gson.JsonObject:78","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.String value) {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328042018/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            add(property, createJsonElement(value));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"aaaae4c7-3f18-11e6-8b75-bdf52f526ac8","method":{"position":"com.google.gson.stream.JsonWriter:385","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter name(java.lang.String name) throws java.io.IOException {\n    if (name == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328042018/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (name == null) {\n                throw new java.lang.NullPointerException(\"name == null\");\n            } \n            if ((java.lang.String) != null) {\n                throw new java.lang.IllegalStateException();\n            } \n            if ((int) == 0) {\n                throw new java.lang.IllegalStateException(\"JsonWriter is closed.\");\n            } \n            java.lang.String = name;\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:233","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"aaaae4c8-3f18-11e6-8b75-134bf289153c","method":{"position":"com.google.gson.internal.Excluder:232","type":"CtMethodImpl","sourcecode":"private boolean isValidSince(com.google.gson.annotations.Since annotation) {\n    if (annotation != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328042018/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (annotation != null) {\n                double double = annotation.value();\n                if (annotationVersion > (double)) {\n                    return false;\n                } \n            } \n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":26,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":166,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":327,"com.google.gson.functional.StringTest.testStringValueDeserialization":579,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":72,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":553,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":625,"com.google.gson.internal.LinkedHashTreeMapTest.testIterationOrder":652,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":526,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":28,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":446,"com.google.gson.MixedStreamTest.testWriteLenient":235,"com.google.gson.internal.bind.JsonTreeWriterTest.testPrematureClose":239,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":390,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":429,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":365,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":101,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":172,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":182,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":428,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":558,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":270,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":273,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":221,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":533,"com.google.gson.JsonObjectTest.testAddingNullPropertyValue":385,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":419,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":454,"com.google.gson.functional.ObjectTest.testSingletonLists":152,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":9,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":362,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":328,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":521,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":5,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":639,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":170,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":602,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":632,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":436,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":257,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":560,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":147,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":396,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":587,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":73,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":117,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":554,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":412,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":264,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":515,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":281,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":506,"com.google.gson.functional.EnumTest.testEnumCaseMapping":272,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":0,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":326,"com.google.gson.functional.JsonTreeTest.testToJsonTree":52,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":514,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":122,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":633,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":86,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":115,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":255,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":144,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":486,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":522,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":623,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":345,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":179,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":187,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":585,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":434,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":269,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":313,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":527,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":322,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":279,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":225,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":439,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":268,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":219,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":371,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":615,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":99,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":565,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":564,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":631,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":145,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":306,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":300,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":569,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":618,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":38,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":161,"com.google.gson.DefaultDateTypeAdapterTest.testFormatUsesDefaultTimezone":252,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":260,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":541,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":391,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":502,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":551,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":94,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":622,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":210,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":241,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":466,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":70,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":307,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":606,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":552,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":275,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":324,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":8,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":11,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":432,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":31,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":294,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":508,"com.google.gson.internal.LinkedHashTreeMapTest.testEmptyStringValues":651,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":404,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":79,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":109,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":613,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":635,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":511,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":591,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":214,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":575,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":358,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":458,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":224,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":452,"com.google.gson.functional.CollectionTest.testSetDeserialization":451,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":222,"com.google.gson.functional.EnumTest.testEnumSet":15,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":156,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":589,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":544,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":110,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":227,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithNestedWildcards":470,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":55,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":620,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":158,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":2,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":108,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":555,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":460,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":561,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":171,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":276,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":309,"com.google.gson.internal.LinkedHashTreeMapTest.testContainsNullKeyIsAlwaysFalse":654,"com.google.gson.functional.MapTest.testHashMapDeserialization":496,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":524,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":597,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":628,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":271,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":578,"com.google.gson.MixedStreamTest.testReadNulls":641,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":88,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":165,"com.google.gson.DefaultDateTypeAdapterTest.testParsingDatesFormattedWithSystemLocale":251,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":208,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":594,"com.google.gson.functional.MapTest.testSortedMap":507,"com.google.gson.functional.MapTest.testMapSerialization":60,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":167,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":424,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":549,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":488,"com.google.gson.functional.MapTest.testSerializeMaps":54,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":195,"com.google.gson.functional.MapTest.testComplexKeysSerialization":69,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":588,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":240,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":510,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":45,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":189,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":405,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":207,"com.google.gson.internal.LinkedTreeMapTest.testRemoveRootDoesNotDoubleUnlink":642,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":417,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":336,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":480,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":120,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":643,"com.google.gson.internal.LinkedHashTreeMapTest.testDoubleCapacity":647,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":29,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":577,"com.google.gson.functional.MapTest.testStringKeyDeserialization":509,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithBasicWildcards":472,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":489,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":374,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":316,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":71,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":530,"com.google.gson.functional.PrettyPrintingTest.testMap":118,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":340,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":525,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":175,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":168,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":349,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":592,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":146,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":262,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":490,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":331,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":580,"com.google.gson.functional.CollectionTest.testQueueSerialization":176,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":212,"com.google.gson.functional.MapTest.testMapSerializationEmpty":285,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":387,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":545,"com.google.gson.functional.MapTest.testMapOfMapSerialization":59,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":298,"com.google.gson.JavaSerializationTest.testMapIsSerializable":474,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":624,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":599,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":25,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":303,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":377,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictBoxedNansAndInfinities":244,"com.google.gson.functional.FieldNamingTest.testIdentity":196,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":329,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":636,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":46,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":441,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":30,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":51,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":151,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":288,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":516,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":265,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":330,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":372,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":301,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":406,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":630,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":7,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":621,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":24,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":356,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":370,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":494,"com.google.gson.functional.MapTest.testMapSubclassSerialization":53,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":315,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":13,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":421,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":590,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":191,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":234,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":344,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":539,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":392,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":573,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":616,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":450,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":107,"com.google.gson.functional.EnumTest.testEnumSubclass":18,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":304,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":263,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":435,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":290,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":223,"com.google.gson.GsonBuilderTest.testRegisterTypeAdapterForCoreType":478,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":557,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":228,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":400,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":517,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":27,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":542,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":407,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":77,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":6,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":485,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":546,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":576,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":299,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":409,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":366,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":427,"com.google.gson.MixedStreamTest.testWriteNulls":379,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":495,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":40,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":604,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":36,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":188,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":418,"com.google.gson.CommentsTest.testParseComments":476,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":153,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":231,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":455,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":128,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":410,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":556,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":574,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":62,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":169,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":658,"com.google.gson.MixedStreamTest.testReadInvalidState":640,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":218,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":114,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":136,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":368,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":148,"com.google.gson.DefaultDateTypeAdapterTest.testParsingDatesFormattedWithUsLocale":253,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":293,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":645,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":491,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithTypeParameters":471,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":125,"com.google.gson.internal.bind.JsonTreeWriterTest.testWriteAfterClose":245,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":296,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":23,"com.google.gson.JsonArrayTest.testRemove":395,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":310,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":360,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":484,"com.google.gson.functional.MapTest.testMapDeserialization":501,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":357,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":123,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":284,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":453,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":56,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":84,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":204,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":202,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":401,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":50,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":479,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":462,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":162,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":321,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":90,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":342,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":78,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":351,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":420,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":26,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":95,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":61,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":119,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":237,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":369,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":513,"com.google.gson.functional.PrimitiveTest.testShortSerialization":314,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":638,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":609,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":559,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictNansAndInfinities":243,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":283,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":540,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":135,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":261,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":523,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":192,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":17,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":174,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":12,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":498,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":536,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":137,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":337,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":393,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":248,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":456,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":629,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":246,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":469,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":318,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":568,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":141,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":274,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":163,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":414,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":467,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":197,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":249,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":346,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":423,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":422,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":229,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":543,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":444,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":431,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":20,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":91,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":334,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":180,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":463,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":338,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":637,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":201,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":205,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":361,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":529,"com.google.gson.internal.LinkedHashTreeMapTest.testClear":649,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":209,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":259,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":206,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":627,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":82,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":595,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":518,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":563,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":302,"com.google.gson.JsonArrayTest.testSet":384,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":317,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":74,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":16,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":203,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":449,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":425,"com.google.gson.functional.MapTest.testGeneralMapField":66,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":430,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":34,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":571,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":42,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":339,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":373,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":215,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":64,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":98,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":254,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":292,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":308,"com.google.gson.MixedStreamTest.testReadMixedStreamed":468,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":134,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":503,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":619,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":183,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":266,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":457,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":403,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":547,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":282,"com.google.gson.JavaSerializationTest.testNumberIsSerializable":473,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":459,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":213,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":504,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":289,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":497,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":138,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":375,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":132,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":199,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":537,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":247,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":359,"com.google.gson.internal.LinkedHashTreeMapTest.testEqualsAndHashCode":655,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":605,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":47,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":598,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":614,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":610,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":232,"com.google.gson.functional.ObjectTest.testNestedDeserialization":445,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":286,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":323,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":447,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":76,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":280,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":570,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":127,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":481,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":505,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":581,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":106,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":312,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":287,"com.google.gson.JavaSerializationTest.testListIsSerializable":475,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":104,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":394,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":185,"com.google.gson.functional.ObjectTest.testNullSerialization":320,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":93,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":512,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":499,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":65,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":291,"com.google.gson.functional.MapTest.testInterfaceTypeMap":63,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":487,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":341,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":81,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":519,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":19,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":140,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":343,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":416,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":347,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":278,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":531,"com.google.gson.MixedStreamTest.testWriteClosed":381,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":178,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":448,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":154,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":413,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":634,"com.google.gson.internal.LinkedHashTreeMapTest.testPutNonComparableKeyFails":653,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":111,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":80,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":130,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":126,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":164,"com.google.gson.stream.JsonWriterTest.testLongs":258,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":217,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":85,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":155,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":177,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":398,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":550,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":200,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":415,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":181,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":363,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":493,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":21,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":572,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":295,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":49,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":617,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":32,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":190,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":129,"com.google.gson.functional.CollectionTest.testQueueDeserialization":603,"com.google.gson.internal.LinkedHashTreeMapTest.testPutOverrides":648,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":297,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":548,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":584,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":325,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":367,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":399,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":57,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":440,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":355,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":100,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":443,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":173,"com.google.gson.functional.MapTest.testRawMapSerialization":68,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":233,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":601,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":626,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":142,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":89,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":159,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":426,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":383,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":3,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":35,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":238,"com.google.gson.functional.PrimitiveTest.testByteSerialization":311,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":335,"com.google.gson.ObjectTypeAdapterTest.testSerialize":4,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":389,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":96,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":528,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":102,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":41,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":193,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":112,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":477,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":582,"com.google.gson.functional.MapTest.testMapWithQuotes":58,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":350,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":534,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":583,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":226,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":611,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":378,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":87,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":566,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":348,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":220,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":608,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":105,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":442,"com.google.gson.internal.LinkedHashTreeMapTest.testDoubleCapacityAllNodesOnLeft":644,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":124,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":305,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":353,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":44,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":433,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":216,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":211,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":103,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":198,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":354,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":562,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":382,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":600,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":483,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":33,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":250,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":256,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":92,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":48,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":607,"com.google.gson.internal.LinkedHashTreeMapTest.testContainsNonComparableKeyReturnsFalse":650,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":14,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":593,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":520,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":659,"com.google.gson.internal.LinkedHashTreeMapTest.testRemoveRootDoesNotDoubleUnlink":656,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":139,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":376,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":437,"com.google.gson.functional.ObjectTest.testNestedSerialization":160,"com.google.gson.JsonObjectTest.testAddingStringProperties":388,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":75,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":97,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":133,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":586,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":131,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":67,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":149,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":116,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":236,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":267,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":157,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":492,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":567,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":83,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":402,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":464,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":1,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":532,"com.google.gson.GsonBuilderTest.testCreatingMoreThanOnce":657,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":438,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":461,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":397,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":143,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":332,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":39,"com.google.gson.functional.CollectionTest.testSetSerialization":184,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":465,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":121,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":230,"com.google.gson.functional.StringTest.testStringValueSerialization":333,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":150,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":22,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":408,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":596,"com.google.gson.MixedStreamTest.testWriteInvalidState":380,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":482,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":660,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":535,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":43,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":538,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":10,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":352,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":194,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":186,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":386,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":411,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":242,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":277,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":113,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":364,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":319,"com.google.gson.internal.LinkedHashTreeMapTest.testAvlWalker":646,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":500,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":37,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":612},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:133","type":"CtBinaryOperatorImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236],"tindex":"bf3e30d7-3f56-11e6-81c1-4d09013cd2a9","method":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:74","type":"CtMethodImpl","sourcecode":"private java.lang.reflect.Type getRuntimeTypeIfMoreSpecific(java.lang.reflect.Type type, java.lang.Object value) {\n    if (type instanceof java.lang.reflect.ParameterizedType) {\n        {\n            if (type instanceof java.lang.reflect.ParameterizedType) {\n                {\n                    if ((value != null) && (((type == (java.lang.Object.java.lang.Object.java.lang.Class)) || (type instanceof java.lang.reflect.TypeVariable<?>)) || (type instanceof java.lang.Class<?>))) {\n                        type = value.getClass();\n                    } \n                    return type;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972460/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972460/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:497","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"bf3ef428-3f56-11e6-81c1-71452a010784","method":{"position":"com.google.gson.TreeTypeAdapter:84","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newFactory(com.google.gson.reflect.TypeToken<?> exactType, java.lang.Object typeAdapter) {\n    if ((typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)) {\n        {\n            return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , exactType , false , null);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972460/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:105","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"bf3ef429-3f56-11e6-81c1-e54c982ae132","method":{"position":"com.google.gson.internal.LinkedTreeMap:605","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonObject) {\n        {\n            return containsKey(o);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972460/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"bf3f1b3a-3f56-11e6-81c1-374fd13e8da1","method":{"position":"com.google.gson.Gson:136","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src != null) {\n        {\n            if (src == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972460/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return toJsonTree(src, typeOfSrc);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972460/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.TreeTypeAdapter:55","type":"CtInvocationImpl"},"failures":[3,237,238,239,240,241,242,243,244,245,246,247,248,249,49,50,51,52,63,66,72,73,76,77,78,82,83,86,101,102,103,104,250,129,130,166,208,209,210],"tindex":"bf3f1b3b-3f56-11e6-81c1-1742fc0d9fd7","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:75","type":"CtMethodImpl","sourcecode":"private void put(com.google.gson.JsonElement value) {\n    if (value.isJsonNull()) {\n        {\n            if ((java.lang.String) != null) {\n                if ((!(value.isJsonNull())) || (getSerializeNulls())) {\n                    com.google.gson.JsonObject com.google.gson.JsonObject = ((com.google.gson.JsonObject)(peek()));\n                    object.add(java.lang.String, value);\n                } \n                java.lang.String = null;\n            } else if (java.util.List<com.google.gson.JsonElement>.isEmpty()) {\n                com.google.gson.JsonElement = value;\n            } else {\n                com.google.gson.JsonElement com.google.gson.JsonElement = peek();\n                if (element instanceof com.google.gson.JsonArray) {\n                    ((com.google.gson.JsonArray)(element)).add(value);\n                } else {\n                    throw new java.lang.IllegalStateException();\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972460/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl"},"failures":[251,252,253,254,211,255,256],"tindex":"bf3f424c-3f56-11e6-81c1-05791c80e622","method":{"position":"com.google.gson.DefaultDateTypeAdapter:94","type":"CtMethodImpl","sourcecode":"private java.util.Date deserializeToDate(com.google.gson.JsonElement json) {\n    if (json == null) {\n        {\n            synchronized(java.text.DateFormat) {\n                try {\n                    return java.text.DateFormat.parse(json.getAsString());\n                } catch (java.text.ParseException ignored) {\n                }\n                try {\n                    return java.text.DateFormat.parse(json.getAsString());\n                } catch (java.text.ParseException ignored) {\n                }\n                try {\n                    return java.text.DateFormat.parse(json.getAsString());\n                } catch (java.text.ParseException e) {\n                    throw new com.google.gson.JsonSyntaxException(json.getAsString() , e);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972460/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:726","type":"CtBinaryOperatorImpl"},"failures":[257,258,259,260],"tindex":"bf3f695d-3f56-11e6-81c1-c1103a6d259a","method":{"position":"com.google.gson.stream.JsonWriter:476","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(long value) throws java.io.IOException {\n    if (value == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972460/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            writeDeferredName();\n            beforeValue(false);\n            java.io.Writer.write(java.lang.Long.toString(value));\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[28,30,61,67,105,108,112,113,205,261],"tindex":"bf3f695e-3f56-11e6-81c1-d5271b4ea9ce","method":{"position":"com.google.gson.stream.JsonWriter:490","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972460/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            writeDeferredName();\n            java.lang.String java.lang.String = value.toString();\n            if ((!(boolean)) && (((string.equals(\"-Infinity\")) || (string.equals(\"Infinity\"))) || (string.equals(\"NaN\")))) {\n                throw new java.lang.IllegalArgumentException((\"Numeric values must be finite, but was \" + value));\n            } \n            beforeValue(false);\n            java.io.Writer.append(string);\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:430","type":"CtFieldReadImpl"},"failures":[0,1,262,257,263,2,264,265,266,267,3,237,238,6,7,8,240,268,269,270,9,10,11,271,12,13,14,15,16,17,18,19,20,272,273,21,22,23,24,25,26,27,28,29,274,30,31,32,33,34,275,35,36,37,38,40,41,42,43,44,45,46,47,48,276,277,278,279,280,281,282,283,49,50,51,52,284,53,54,55,56,58,59,60,61,62,63,64,65,66,68,69,285,70,71,72,73,286,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,287,91,92,93,94,95,96,97,98,99,100,101,102,288,103,104,105,250,106,107,108,109,110,111,112,113,114,115,116,289,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,290,291,292,293,294,133,295,296,134,297,298,299,300,301,302,303,304,305,306,307,135,308,309,310,311,312,313,314,136,315,316,137,317,138,318,140,148,149,150,319,151,152,153,154,155,156,320,157,321,322,158,159,160,323,324,161,162,163,164,325,167,326,327,328,329,330,169,331,332,333,334,335,170,336,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,337,186,187,188,189,190,338,339,340,341,191,342,343,192,193,194,195,196,344,197,198,199,200,202,345,207,208,209,210,346,254,347,348,349,350,211,255,351,352,261,353,259,354,355,212,356,357,358,359,213,360,361,260,362,363,364,214,365,215,216,256,366,367,368,217,369,370,371,218,219,220,221,222,223,372,373,224,225,226,227,228,374,229,230,231,375,376,377,378,232,233,234,379,380,235,236,381],"tindex":"bf3f906f-3f56-11e6-81c1-03d0d0f96816","method":{"position":"com.google.gson.stream.JsonWriter:268","type":"CtMethodImpl","sourcecode":"public final void setSerializeNulls(boolean serializeNulls) {\n    if (serializeNulls) {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = serializeNulls;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972460/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeNulls":"serializeNulls"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"bf3fb780-3f56-11e6-81c1-f3e06a195033","method":{"position":"com.google.gson.JsonObject:111","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Character value) {\n    if (property == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972460/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            add(property, createJsonElement(value));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:109","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"bf3fb781-3f56-11e6-81c1-85f557989dcb","method":{"position":"com.google.gson.internal.$Gson$Types:511","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    return (o instanceof java.lang.reflect.GenericArrayType) && (com.google.gson.internal.$Gson$Types.equals(com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl.this, ((java.lang.reflect.GenericArrayType)(o))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"bf3fde92-3f56-11e6-81c1-412cd87b1369","method":{"position":"com.google.gson.Gson:510","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972460/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src == null) {\n                return toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull);\n            } \n            return toJson(src, src.getClass());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:120","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"bf3fde93-3f56-11e6-81c1-2d5bc182d923","method":{"position":"com.google.gson.internal.LinkedTreeMap:570","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonNull) {\n        {\n            return (o instanceof java.util.Map.Entry) && ((findByEntry(((java.util.Map.Entry<?, ?>)(o)))) != null);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972460/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"bf4005a4-3f56-11e6-81c1-3162a29de799","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:108","type":"CtMethodImpl","sourcecode":"public boolean writeField(java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972460/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (!(boolean))\n                return false;\n            \n            java.lang.Object java.lang.Object = field.get(value);\n            return fieldValue != value;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:105","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"bf402cb5-3f56-11e6-81c1-1bf29328681b","method":{"position":"com.google.gson.internal.LinkedTreeMap:481","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"rawtypes\")\n@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972460/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof java.util.Map.Entry) {\n                java.util.Map.Entry java.util.Map.Entry = ((java.util.Map.Entry)(o));\n                return ((K) == null ? (other.getKey()) == null : K.equals(other.getKey())) && ((V) == null ? (other.getValue()) == null : V.equals(other.getValue()));\n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.JsonObject:54","type":"CtBinaryOperatorImpl"},"failures":[288,320,336,382,383,370,379],"tindex":"bf4053c6-3f56-11e6-81c1-730a688d75b9","method":{"position":"com.google.gson.internal.bind.TypeAdapters:680","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, com.google.gson.JsonElement value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972460/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if ((value == null) || (value.isJsonNull())) {\n                out.nullValue();\n            } else if (value.isJsonPrimitive()) {\n                com.google.gson.JsonPrimitive com.google.gson.JsonPrimitive = value.getAsJsonPrimitive();\n                if (primitive.isNumber()) {\n                    out.value(primitive.getAsNumber());\n                } else if (primitive.isBoolean()) {\n                    out.value(primitive.getAsBoolean());\n                } else {\n                    out.value(primitive.getAsString());\n                }\n            } else if (value.isJsonArray()) {\n                out.beginArray();\n                for (com.google.gson.JsonElement com.google.gson.JsonElement : value.getAsJsonArray()) {\n                    write(out, e);\n                }\n                out.endArray();\n            } else if (value.isJsonObject()) {\n                out.beginObject();\n                for (java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> : value.getAsJsonObject().entrySet()) {\n                    out.name(e.getKey());\n                    write(out, e.getValue());\n                }\n                out.endObject();\n            } else {\n                throw new java.lang.IllegalArgumentException((\"Couldn't write \" + (value.getClass())));\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:109","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"bf4053c7-3f56-11e6-81c1-3f5d97464e56","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:804","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonPrimitive) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972460/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (o instanceof java.util.Map.Entry) && ((findByEntry(((java.util.Map.Entry<?, ?>)(o)))) != null);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:98","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"bf407ad8-3f56-11e6-81c1-4ba015713685","method":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:74","type":"CtMethodImpl","sourcecode":"private java.lang.reflect.Type getRuntimeTypeIfMoreSpecific(java.lang.reflect.Type type, java.lang.Object value) {\n    if (type instanceof java.lang.reflect.ParameterizedType) {\n        {\n            if (type instanceof java.lang.reflect.ParameterizedType) {\n                {\n                    if ((value != null) && (((type == (java.lang.Object.java.lang.Object.java.lang.Class)) || (type instanceof java.lang.reflect.TypeVariable<?>)) || (type instanceof java.lang.Class<?>))) {\n                        type = value.getClass();\n                    } \n                    return type;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972460/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972460/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:79","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"bf407ad9-3f56-11e6-81c1-ff4e6e8ae67f","method":{"position":"com.google.gson.Gson:871","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972460/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (!(json instanceof com.google.gson.JsonPrimitive)) {\n                {\n                    if (json == null) {\n                        return null;\n                    } \n                    return ((T)(fromJson(new com.google.gson.internal.bind.JsonTreeReader(json), typeOfT)));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972460/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"bf40a1ea-3f56-11e6-81c1-9f8a583c5a45","method":{"position":"com.google.gson.TypeAdapter:254","type":"CtMethodImpl","sourcecode":"public final T fromJson(java.io.Reader in) throws java.io.IOException {\n    if (in == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972460/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(in);\n            return read(reader);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:137","type":"CtBinaryOperatorImpl"},"failures":[384],"tindex":"bf40a1eb-3f56-11e6-81c1-776e794184f2","method":{"position":"com.google.gson.JsonArray:81","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement set(int index, com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonObject) {\n        {\n            return java.util.List<com.google.gson.JsonElement>.set(index, element);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972460/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl"},"failures":[],"tindex":"bf40c8fc-3f56-11e6-81c1-bb7dcaa7d8d9","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:116","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<?> getFieldAdapter(com.google.gson.Gson gson, java.lang.reflect.Field field, com.google.gson.reflect.TypeToken<?> fieldType) {\n    if (field.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972460/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.annotations.JsonAdapter com.google.gson.annotations.JsonAdapter = field.getAnnotation(com.google.gson.annotations.JsonAdapter.com.google.gson.annotations.JsonAdapter.java.lang.Class);\n            if (annotation != null) {\n                com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory.getTypeAdapter(com.google.gson.internal.ConstructorConstructor, gson, fieldType, annotation);\n                if (adapter != null)\n                    return adapter;\n                \n            } \n            return gson.getAdapter(fieldType);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"field"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"bf40c8fd-3f56-11e6-81c1-edbbc8897dd8","method":{"position":"com.google.gson.JsonParser:44","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement parse(java.lang.String json) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            if (json == null) {\n                {\n                    return parse(new java.io.StringReader(json));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972460/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972460/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"bf40f00e-3f56-11e6-81c1-47ac94ac8d28","method":{"position":"com.google.gson.Gson:871","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972460/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (!(json instanceof com.google.gson.JsonPrimitive)) {\n                {\n                    if (json == null) {\n                        return null;\n                    } \n                    return ((T)(fromJson(new com.google.gson.internal.bind.JsonTreeReader(json), typeOfT)));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972460/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonObject:54","type":"CtBinaryOperatorImpl"},"failures":[385],"tindex":"bf40f00f-3f56-11e6-81c1-a3c4420488cc","method":{"position":"com.google.gson.JsonObject:53","type":"CtMethodImpl","sourcecode":"public void add(java.lang.String property, com.google.gson.JsonElement value) {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972460/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (value == null) {\n                value = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.put(property, value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:297","type":"CtBinaryOperatorImpl"},"failures":[386,387,388,101,102,103,104,389,319,390,391,392,393,394,372,228],"tindex":"bf40f010-3f56-11e6-81c1-cd2489da4864","method":{"position":"com.google.gson.JsonObject:121","type":"CtMethodImpl","sourcecode":"private com.google.gson.JsonElement createJsonElement(java.lang.Object value) {\n    if (value instanceof java.lang.Number) {\n        {\n            return value == null ? com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull : new com.google.gson.JsonPrimitive(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972460/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:137","type":"CtBinaryOperatorImpl"},"failures":[395],"tindex":"bf40f011-3f56-11e6-81c1-a12d623b2a75","method":{"position":"com.google.gson.JsonArray:115","type":"CtMethodImpl","sourcecode":"public boolean contains(com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonObject) {\n        {\n            return java.util.List<com.google.gson.JsonElement>.contains(element);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972460/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:233","type":"CtBinaryOperatorImpl"},"failures":[197,396,397,198,199,398,399,200],"tindex":"bf411722-3f56-11e6-81c1-ede045caf5d6","method":{"position":"com.google.gson.internal.Excluder:232","type":"CtMethodImpl","sourcecode":"private boolean isValidSince(com.google.gson.annotations.Since annotation) {\n    if (annotation != null) {\n        {\n            if (annotation != null) {\n                double double = annotation.value();\n                if (annotationVersion > (double)) {\n                    return false;\n                } \n            } \n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972460/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl"},"failures":[88,92,400,401,192,195],"tindex":"bf411723-3f56-11e6-81c1-5dfa4dcec69c","method":{"position":"com.google.gson.FieldNamingPolicy:137","type":"CtMethodImpl","sourcecode":"private static java.lang.String upperCaseFirstLetter(java.lang.String name) {\n    if (name == null) {\n        {\n            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            int int = 0;\n            char char = name.charAt(index);\n            while (index < ((name.length()) - 1)) {\n                if (java.lang.Character.isLetter(firstCharacter)) {\n                    break;\n                } \n                fieldNameBuilder.append(firstCharacter);\n                firstCharacter = name.charAt((++index));\n            }\n            if (index == (name.length())) {\n                return fieldNameBuilder.toString();\n            } \n            if (!(java.lang.Character.isUpperCase(firstCharacter))) {\n                java.lang.String java.lang.String = com.google.gson.FieldNamingPolicy.modifyString(java.lang.Character.toUpperCase(firstCharacter), name, (++index));\n                return fieldNameBuilder.append(modifiedTarget).toString();\n            } else {\n                return name;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972460/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"bf411724-3f56-11e6-81c1-79e04ee8ba28","method":{"position":"com.google.gson.internal.bind.TypeAdapters:282","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972460/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"bf411725-3f56-11e6-81c1-65bf90c3a9f7","method":{"position":"com.google.gson.Gson:136","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src != null) {\n        {\n            if (src == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972460/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return toJsonTree(src, typeOfSrc);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972460/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl"},"failures":[2,4,6,7,8,402,403,9,404,10,11,12,13,14,19,405,21,22,23,24,25,26,406,407,27,28,29,408,409,30,31,42,410,43,46,47,48,411,49,50,51,52,57,412,63,65,66,69,72,73,74,75,76,77,78,79,80,81,82,83,413,414,84,85,86,87,88,89,90,287,91,92,93,400,415,94,416,95,417,401,96,99,100,101,102,103,104,105,418,106,107,108,109,110,419,111,112,113,420,114,421,115,116,422,119,120,124,125,126,127,128,129,130,132,423,424,148,425,149,426,150,151,152,427,428,153,429,430,154,431,432,155,433,156,434,157,435,436,158,437,159,160,438,324,439,440,161,441,162,163,442,164,443,444,445,446,165,166,167,447,168,448,449,450,170,171,172,174,180,451,182,184,186,187,188,189,452,190,191,390,391,392,393,394,192,193,194,195,196,197,396,397,198,199,398,399,200,201,453,454,203,204,455,205,206,207,456,208,457,209,210,458,459,460,461,462,463,261,464,213,216,217,218,220,221,222,223,373,465,224,225,466,467,228,229,230,233,234,380,381,468,469],"tindex":"bf413e36-3f56-11e6-81c1-896c764e89b5","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:86","type":"CtMethodImpl","sourcecode":"private com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField createBoundField(final com.google.gson.Gson context, final java.lang.reflect.Field field, final java.lang.String name, final com.google.gson.reflect.TypeToken<?> fieldType, boolean serialize, boolean deserialize) {\n    if (name == null) {\n        {\n            final boolean boolean = com.google.gson.internal.Primitives.isPrimitive(fieldType.getRawType());\n            return new com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField(name, serialize, deserialize) {\n                final com.google.gson.TypeAdapter<?> typeAdapter = getFieldAdapter(context, field, fieldType);\n\n                @java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n                @java.lang.Override\n                void write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                    java.lang.Object java.lang.Object = field.get(value);\n                    com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n                    t.write(writer, fieldValue);\n                }\n\n                @java.lang.Override\n                void read(com.google.gson.stream.JsonReader reader, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                    java.lang.Object java.lang.Object = com.google.gson.TypeAdapter<?>.read(reader);\n                    if ((fieldValue != null) || (!isPrimitive)) {\n                        field.set(value, fieldValue);\n                    } \n                }\n\n                public boolean writeField(java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                    if (!(boolean))\n                        return false;\n                    \n                    java.lang.Object java.lang.Object = field.get(value);\n                    return fieldValue != value;\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972460/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:188","type":"CtBinaryOperatorImpl"},"failures":[470,471,472],"tindex":"bf418c57-3f56-11e6-81c1-9f3f5e8fd0eb","method":{"position":"com.google.gson.reflect.TypeToken:272","type":"CtMethodImpl","sourcecode":"private static boolean matches(java.lang.reflect.Type from, java.lang.reflect.Type to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeMap) {\n    if (to == null) {\n        {\n            return (to.equals(from)) || ((from instanceof java.lang.reflect.TypeVariable) && (to.equals(typeMap.get(((java.lang.reflect.TypeVariable<?>)(from)).getName()))));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972460/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"to"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:98","type":"CtBinaryOperatorImpl"},"failures":[0,1,473,474,475,262,257,263,476,477,2,264,265,266,267,3,237,238,4,5,6,7,478,8,270,402,403,9,404,10,11,271,12,13,14,15,16,17,18,479,480,19,405,20,272,273,21,22,23,24,25,26,406,407,27,28,481,29,408,274,409,30,31,32,33,482,34,275,35,36,37,483,484,38,39,40,485,486,487,41,488,42,410,43,489,44,490,45,491,492,46,47,493,48,411,276,277,278,279,280,281,282,283,49,50,51,52,494,495,496,497,53,54,498,499,55,500,56,501,57,502,503,504,505,58,59,60,506,412,61,62,507,63,64,65,66,67,68,508,69,285,509,70,510,511,71,72,73,286,74,75,76,77,78,79,80,81,82,83,413,414,84,85,86,87,88,89,90,287,91,92,93,400,415,94,416,95,417,401,96,97,98,99,100,101,102,288,103,104,105,418,250,106,107,108,109,110,419,111,112,113,420,114,421,115,116,422,512,289,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,513,514,515,290,516,291,517,518,519,520,521,292,522,523,293,524,525,526,527,528,529,530,294,133,531,532,533,534,535,295,536,296,134,537,538,297,539,540,298,541,299,300,542,543,301,302,544,545,546,303,547,548,549,550,551,552,553,554,304,555,305,556,306,307,557,558,135,559,560,308,561,309,562,423,563,310,311,312,313,314,136,315,564,565,566,316,567,137,568,569,570,317,138,571,318,572,573,574,424,148,425,149,575,426,150,151,152,427,428,153,429,430,154,431,432,155,433,576,156,434,157,435,321,436,322,158,437,159,160,323,438,324,439,440,577,161,441,162,163,442,164,443,444,445,446,165,325,166,167,578,447,168,448,449,579,326,327,328,329,330,580,581,169,582,331,583,584,585,332,586,587,333,588,589,334,590,591,335,450,170,592,593,594,171,172,173,174,175,595,596,597,176,177,178,179,180,598,599,181,600,451,182,183,601,184,185,602,603,186,187,188,189,452,190,338,339,340,341,191,342,343,390,391,392,393,394,604,605,606,192,193,194,195,196,344,197,396,397,198,199,398,399,200,607,201,453,454,202,608,345,203,204,455,205,609,206,383,610,207,456,208,611,457,209,210,612,458,459,460,613,614,346,254,347,615,461,462,348,616,349,350,617,211,618,255,351,463,619,352,620,261,621,353,259,354,355,212,464,356,622,357,358,623,359,624,213,360,361,260,625,362,626,627,363,628,364,214,629,365,215,630,216,256,366,367,368,217,631,632,369,370,633,371,634,218,219,220,221,222,223,372,373,465,224,225,226,466,227,635,636,467,228,374,229,637,230,231,375,638,376,639,377,378,232,233,640,234,380,235,641,236,381,468,469],"tindex":"bf41b368-3f56-11e6-81c1-8b78870d161f","method":{"position":"com.google.gson.reflect.TypeToken:295","type":"CtMethodImpl","sourcecode":"public static com.google.gson.reflect.TypeToken<?> get(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.ParameterizedType) {\n        {\n            return new com.google.gson.reflect.TypeToken<java.lang.Object>(type);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972460/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"bf41da79-3f56-11e6-81c1-a5cc64b1e09b","method":{"position":"com.google.gson.Gson:576","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src != null) {\n        {\n            if (src != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972460/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            } else {\n                {\n                    try {\n                        com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                        toJson(src, typeOfSrc, jsonWriter);\n                    } catch (java.io.IOException e) {\n                        throw new com.google.gson.JsonIOException(e);\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972460/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:109","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"bf41da7a-3f56-11e6-81c1-930fe7350d4e","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:808","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonPrimitive) {\n        {\n            if (!(o instanceof java.util.Map.Entry)) {\n                return false;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n            if (node == null) {\n                return false;\n            } \n            removeInternal(node, true);\n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972460/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:287","type":"CtBinaryOperatorImpl"},"failures":[642,643,393],"tindex":"bf42018b-3f56-11e6-81c1-812caf0e9230","method":{"position":"com.google.gson.internal.LinkedTreeMap:284","type":"CtMethodImpl","sourcecode":"private void replaceInParent(com.google.gson.internal.LinkedTreeMap.Node<K, V> node, com.google.gson.internal.LinkedTreeMap.Node<K, V> replacement) {\n    if (replacement != null) {\n        {\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n            if (replacement != null) {\n                replacement.com.google.gson.internal.LinkedTreeMap.Node<K, V> = parent;\n            } \n            if (parent != null) {\n                if ((parent.com.google.gson.internal.LinkedTreeMap.Node<K, V>) == node) {\n                    parent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                } else {\n                    assert (parent.com.google.gson.internal.LinkedTreeMap.Node<K, V>) == node;\n                    parent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                }\n            } else {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972460/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"replacement":"replacement"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:578","type":"CtBinaryOperatorImpl"},"failures":[644,645,646,647],"tindex":"bf42289c-3f56-11e6-81c1-a72714ccd43e","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:626","type":"CtMethodImpl","sourcecode":"void reset(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root == null) {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            for (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root ; n != null ; n = n.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) {\n                n.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = stackTop;\n                stackTop = n;\n            }\n            com.google.gson.internal.LinkedHashTreeMap.AvlIterator.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = stackTop;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972460/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"root"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:384","type":"CtVariableReadImpl"},"failures":[642,643,393],"tindex":"bf42289d-3f56-11e6-81c1-e5027ce629d4","method":{"position":"com.google.gson.internal.LinkedTreeMap:310","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (insert) {\n        {\n            for (com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>) {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                int int = left != null ? left.int : 0;\n                int int = right != null ? right.int : 0;\n                int int = leftHeight - rightHeight;\n                if (delta == (-2)) {\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    int int = rightRight != null ? rightRight.int : 0;\n                    int int = rightLeft != null ? rightLeft.int : 0;\n                    int int = rightLeftHeight - rightRightHeight;\n                    if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                        rotateLeft(node);\n                    } else {\n                        assert rightDelta == 1;\n                        rotateRight(right);\n                        rotateLeft(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 2) {\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    int int = leftRight != null ? leftRight.int : 0;\n                    int int = leftLeft != null ? leftLeft.int : 0;\n                    int int = leftLeftHeight - leftRightHeight;\n                    if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                        rotateRight(node);\n                    } else {\n                        assert leftDelta == (-1);\n                        rotateLeft(left);\n                        rotateRight(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 0) {\n                    node.int = leftHeight + 1;\n                    if (insert) {\n                        break;\n                    } \n                } else {\n                    assert (delta == (-1)) || (delta == 1);\n                    node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                    if (!insert) {\n                        break;\n                    } \n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972460/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"insert"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"bf4276be-3f56-11e6-81c1-7b4f23500108","method":{"position":"com.google.gson.TypeAdapter:268","type":"CtMethodImpl","sourcecode":"public final T fromJson(java.lang.String json) throws java.io.IOException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972460/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            return fromJson(new java.io.StringReader(json));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:167","type":"CtUnaryOperatorImpl"},"failures":[645,648,649,650,651,652,653,654,655,656],"tindex":"bf4276bf-3f56-11e6-81c1-c937a3b4674a","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:131","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedHashTreeMap.Node<K, V> find(K key, boolean create) {\n    if (!create) {\n        {\n            java.util.Comparator<? super K> java.util.Comparator<? super K> = com.google.gson.internal.LinkedHashTreeMap.this.java.util.Comparator<? super K>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[] com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[] = com.google.gson.internal.LinkedHashTreeMap.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[];\n            int int = com.google.gson.internal.LinkedHashTreeMap.secondaryHash(key.hashCode());\n            int int = hash & ((table.int) - 1);\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = table[index];\n            int int = 0;\n            if (nearest != null) {\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                java.lang.Comparable<java.lang.Object> java.lang.Comparable<java.lang.Object> = comparator == (com.google.gson.internal.LinkedHashTreeMap.com.google.gson.internal.LinkedHashTreeMap.java.util.Comparator<java.lang.Comparable>) ? ((java.lang.Comparable<java.lang.Object>)(key)) : null;\n                while (true) {\n                    comparison = comparableKey != null ? comparableKey.compareTo(nearest.K) : comparator.compare(key, nearest.K);\n                    if (comparison == 0) {\n                        return nearest;\n                    } \n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = comparison < 0 ? nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> : nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    if (child == null) {\n                        break;\n                    } \n                    nearest = child;\n                }\n            } \n            if (!create) {\n                return null;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            if (nearest == null) {\n                if ((comparator == (com.google.gson.internal.LinkedHashTreeMap.com.google.gson.internal.LinkedHashTreeMap.java.util.Comparator<java.lang.Comparable>)) && (!(key instanceof java.lang.Comparable))) {\n                    throw new java.lang.ClassCastException(((key.getClass().getName()) + \" is not Comparable\"));\n                } \n                created = new com.google.gson.internal.LinkedHashTreeMap.Node<K, V>(nearest , key , hash , header , header.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>);\n                table[index] = created;\n            } else {\n                created = new com.google.gson.internal.LinkedHashTreeMap.Node<K, V>(nearest , key , hash , header , header.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>);\n                if (comparison < 0) {\n                    nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = created;\n                } else {\n                    nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = created;\n                }\n                rebalance(nearest, true);\n            }\n            if (((int)++) > (int)) {\n                doubleCapacity();\n            } \n            (int)++;\n            return created;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972460/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"create":"create"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:92","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"bf429dd0-3f56-11e6-81c1-573fe03f8a3b","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:839","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof java.util.Iterator) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972460/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return containsKey(o);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:79","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"bf42c4e1-3f56-11e6-81c1-fdbdaa3d058d","method":{"position":"com.google.gson.Gson:847","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(com.google.gson.JsonElement json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            if (json == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972460/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            } else {\n                {\n                    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972460/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new com.google.gson.JsonSyntaxException();\n                    } else {\n                        {\n                            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n                            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972460/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"bf42ebf2-3f56-11e6-81c1-bd0f91290a3b","method":{"position":"com.google.gson.JsonParser:44","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement parse(java.lang.String json) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            if (json == null) {\n                {\n                    return parse(new java.io.StringReader(json));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972460/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972460/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"bf42ebf3-3f56-11e6-81c1-fdb8854322cd","method":{"position":"com.google.gson.Gson:847","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(com.google.gson.JsonElement json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            if (json == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972460/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            } else {\n                {\n                    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972460/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new com.google.gson.JsonSyntaxException();\n                    } else {\n                        {\n                            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n                            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972460/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Preconditions:41","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"bf42ebf4-3f56-11e6-81c1-3f79fad04a33","method":{"position":"com.google.gson.internal.$Gson$Preconditions:40","type":"CtMethodImpl","sourcecode":"public static void checkArgument(boolean condition) {\n    if (!condition) {\n        throw new java.lang.IllegalArgumentException();\n    } \n}"},"series":0,"name":"addParameterCondition","variableMap":{"condition":"condition"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"bf42ebf5-3f56-11e6-81c1-b195c4055841","method":{"position":"com.google.gson.Gson:576","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src != null) {\n        {\n            if (src != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972460/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            } else {\n                {\n                    try {\n                        com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                        toJson(src, typeOfSrc, jsonWriter);\n                    } catch (java.io.IOException e) {\n                        throw new com.google.gson.JsonIOException(e);\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972460/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"bf431306-3f56-11e6-81c1-f3dda34c001c","method":{"position":"com.google.gson.Gson:591","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    if (src != null) {\n        {\n            com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = getAdapter(com.google.gson.reflect.TypeToken.get(typeOfSrc));\n            boolean boolean = writer.isLenient();\n            writer.setLenient(true);\n            boolean boolean = writer.isHtmlSafe();\n            writer.setHtmlSafe(boolean);\n            boolean boolean = writer.getSerializeNulls();\n            writer.setSerializeNulls(boolean);\n            try {\n                ((com.google.gson.TypeAdapter<java.lang.Object>)(adapter)).write(writer, src);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            } finally {\n                writer.setLenient(oldLenient);\n                writer.setHtmlSafe(oldHtmlSafe);\n                writer.setSerializeNulls(oldSerializeNulls);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972460/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:554","type":"CtBinaryOperatorImpl"},"failures":[0,1,262,257,263,477,2,264,265,266,6,7,657,270,402,403,9,404,10,11,271,17,28,481,29,408,274,409,30,31,39,493,276,277,278,279,280,281,282,283,284,495,54,57,63,66,67,72,73,286,658,88,90,287,91,92,93,400,415,416,95,417,401,96,101,102,288,103,104,250,419,420,659,116,422,117,118,119,120,121,122,123,124,131,132,515,295,303,306,307,309,312,316,317,574,424,148,425,149,575,426,389,660,322,446,165,325,166,167,578,447,168,448,449,592,382,337,186,188,339,340,341,192,193,194,195,196,344,197,396,397,198,199,398,399,200,607,201,453,202,608,345,203,204,205,609,206,383,610,207,456,208,611,457,209,210,612,458,459,460,613,353,359,360,361,363,629,367,368,631,632,372,226,466,227,635,636,467,228,374,229,637,230,231,375,638,376,639,377,378,232,235,236],"tindex":"bf431307-3f56-11e6-81c1-b7c8d0ee87d1","method":{"position":"com.google.gson.GsonBuilder:551","type":"CtMethodImpl","sourcecode":"private void addTypeAdaptersForDate(java.lang.String datePattern, int dateStyle, int timeStyle, java.util.List<com.google.gson.TypeAdapterFactory> factories) {\n    if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n        {\n            com.google.gson.DefaultDateTypeAdapter com.google.gson.DefaultDateTypeAdapter;\n            if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n                dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(datePattern);\n            } else if ((dateStyle != (java.text.DateFormat.java.text.DateFormat.int)) && (timeStyle != (java.text.DateFormat.java.text.DateFormat.int))) {\n                dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(dateStyle , timeStyle);\n            } else {\n                return ;\n            }\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.util.Date.java.util.Date.java.lang.Class), dateTypeAdapter));\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Timestamp.java.sql.Timestamp.java.lang.Class), dateTypeAdapter));\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Date.java.sql.Date.java.lang.Class), dateTypeAdapter));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972460/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"datePattern":"datePattern"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"bf433a18-3f56-11e6-81c1-77164a4f891d","method":{"position":"com.google.gson.Gson:719","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.lang.String json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            if (json == null) {\n                return null;\n            } \n            java.io.StringReader java.io.StringReader = new java.io.StringReader(json);\n            T T = ((T)(fromJson(reader, typeOfT)));\n            return target;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972460/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"bf433a19-3f56-11e6-81c1-ab2a38fd30be","method":{"position":"com.google.gson.JsonObject:100","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Boolean value) {\n    if (property == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972460/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            add(property, createJsonElement(value));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1413","type":"CtVariableReadImpl"},"failures":[],"tindex":"bf433a1a-3f56-11e6-81c1-dfb05bcd2093","method":{"position":"com.google.gson.stream.JsonReader:1331","type":"CtMethodImpl","sourcecode":"private int nextNonWhitespace(boolean throwOnEof) throws java.io.IOException {\n    if (throwOnEof) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972460/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            char[] char[] = com.google.gson.stream.JsonReader.this.char[];\n            int int = int;\n            int int = int;\n            while (true) {\n                if (p == l) {\n                    int = p;\n                    if (!(fillBuffer(1))) {\n                        break;\n                    } \n                    p = int;\n                    l = int;\n                } \n                int int = buffer[(p++)];\n                if (c == '\\n') {\n                    (int)++;\n                    int = p;\n                    continue;\n                } else if (((c == ' ') || (c == '\\r')) || (c == '\\t')) {\n                    continue;\n                } \n                if (c == '/') {\n                    int = p;\n                    if (p == l) {\n                        (int)--;\n                        boolean boolean = fillBuffer(2);\n                        (int)++;\n                        if (!charsLoaded) {\n                            return c;\n                        } \n                    } \n                    checkLenient();\n                    char char = buffer[int];\n                    switch (peek) {\n                        case '*' :\n                            (int)++;\n                            if (!(skipTo(\"*/\"))) {\n                                throw syntaxError(\"Unterminated comment\");\n                            } \n                            p = (int) + 2;\n                            l = int;\n                            continue;\n                        case '/' :\n                            (int)++;\n                            skipToEndOfLine();\n                            p = int;\n                            l = int;\n                            continue;\n                        default :\n                            return c;\n                    }\n                } else if (c == '#') {\n                    int = p;\n                    checkLenient();\n                    skipToEndOfLine();\n                    p = int;\n                    l = int;\n                } else {\n                    int = p;\n                    return c;\n                }\n            }\n            if (throwOnEof) {\n                throw new java.io.EOFException(((((\"End of input\" + \" at line \") + (getLineNumber())) + \" column \") + (getColumnNumber())));\n            } else {\n                return -1;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"throwOnEof":"throwOnEof"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"bf43883b-3f56-11e6-81c1-71aa3ed5153e","method":{"position":"com.google.gson.Gson:847","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(com.google.gson.JsonElement json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            if (json == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972460/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            } else {\n                {\n                    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972460/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new com.google.gson.JsonSyntaxException();\n                    } else {\n                        {\n                            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n                            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972460/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:305","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"bf43af4c-3f56-11e6-81c1-536cb50613b1","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:686","type":"CtMethodImpl","sourcecode":"void add(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node) {\n    if (node != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972460/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            node.int = 1;\n            if (((int) > 0) && (((int) & 1) == 0)) {\n                (int)++;\n                (int)--;\n                (int)++;\n            } \n            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node;\n            (int)++;\n            if (((int) > 0) && (((int) & 1) == 0)) {\n                (int)++;\n                (int)--;\n                (int)++;\n            } \n            for (int int = 4 ; ((int) & (scale - 1)) == (scale - 1) ; scale *= 2) {\n                if ((int) == 0) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                    center.int = (right.int) + 1;\n                    left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                } else if ((int) == 1) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                    center.int = (right.int) + 1;\n                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    int = 0;\n                } else if ((int) == 2) {\n                    int = 0;\n                } \n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"node"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":54,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":574,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":176,"com.google.gson.functional.StringTest.testStringValueDeserialization":463,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":155,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":547,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":416,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":520,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":5,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":392,"com.google.gson.MixedStreamTest.testWriteLenient":327,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":456,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":369,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":110,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":569,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":190,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":200,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":368,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":552,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":39,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":306,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":124,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":527,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":353,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":580,"com.google.gson.functional.ObjectTest.testSingletonLists":64,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":40,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":106,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":177,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":515,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":351,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":82,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":481,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":423,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":380,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":322,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":554,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":589,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":625,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":471,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":41,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":126,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":548,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":443,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":313,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":509,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":52,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":442,"com.google.gson.functional.EnumTest.testEnumCaseMapping":305,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":175,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":318,"com.google.gson.functional.JsonTreeTest.testToJsonTree":429,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":508,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":131,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":425,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":338,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":90,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":357,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":622,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":497,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":414,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":516,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":292,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":197,"com.google.gson.functional.ObjectTest.testNullDeserialization":386,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":58,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":469,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":376,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":277,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":610,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":521,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":71,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":50,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":250,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":383,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":609,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":122,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":119,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":402,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":173,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":560,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":559,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":422,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":269,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":623,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":263,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":407,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":564,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":77,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":236,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":105,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":535,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":438,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":457,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":545,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":165,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":413,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":246,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":345,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":153,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":270,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":462,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":546,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":76,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":232,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":227,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":320,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":372,"com.google.gson.JsonPrimitiveTest.testEqualsAcrossTypes":613,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":9,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":255,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":445,"com.google.gson.metrics.PerformanceTest.testDummy":608,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":360,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":10,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":32,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":344,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":346,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":393,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":448,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":109,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":489,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":100,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":341,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":249,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":364,"com.google.gson.functional.CollectionTest.testSetDeserialization":479,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":125,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":68,"com.google.gson.functional.EnumTest.testEnumSet":299,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":484,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":538,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":33,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":17,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":137,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":410,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":72,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":31,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":312,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":549,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":343,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":555,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":47,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":400,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":273,"com.google.gson.functional.MapTest.testHashMapDeserialization":432,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":518,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":475,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":419,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":228,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":575,"com.google.gson.MixedStreamTest.testReadNulls":603,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":158,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":286,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":244,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":398,"com.google.gson.functional.MapTest.testSortedMap":444,"com.google.gson.functional.MapTest.testMapSerialization":142,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":288,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":487,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":543,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":499,"com.google.gson.functional.MapTest.testSerializeMaps":136,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":209,"com.google.gson.functional.MapTest.testComplexKeysSerialization":151,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":483,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":447,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":243,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":60,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":588,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":298,"com.google.gson.internal.LinkedTreeMapTest.testRemoveRootDoesNotDoubleUnlink":3,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":454,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":395,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":587,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":4,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":129,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":6,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":385,"com.google.gson.functional.MapTest.testStringKeyDeserialization":446,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":501,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":19,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":281,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":154,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":524,"com.google.gson.functional.PrettyPrintingTest.testMap":127,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":215,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":519,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":193,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":87,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":289,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":396,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":321,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":502,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":624,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":181,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":464,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":97,"com.google.gson.functional.MapTest.testMapSerializationEmpty":152,"com.google.gson.functional.CollectionTest.testQueueSerialization":194,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":539,"com.google.gson.functional.MapTest.testMapOfMapSerialization":141,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":261,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":415,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":477,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":188,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":266,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":25,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictBoxedNansAndInfinities":618,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":178,"com.google.gson.functional.FieldNamingTest.testIdentity":210,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":347,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":43,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":387,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":8,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":63,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":428,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":571,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":510,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":314,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":1,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":179,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":264,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":449,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":421,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":317,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":411,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":98,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":187,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":424,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":430,"com.google.gson.functional.MapTest.testMapSubclassSerialization":135,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":280,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":168,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":356,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":485,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":217,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":307,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":533,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":600,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":405,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":458,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":568,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":394,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":30,"com.google.gson.functional.EnumTest.testEnumSubclass":302,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":267,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":323,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":379,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":251,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":247,"com.google.gson.GsonBuilderTest.testRegisterTypeAdapterForCoreType":617,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":551,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":18,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":451,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":511,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":157,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":536,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":450,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":332,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":316,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":496,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":375,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":540,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":262,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":330,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":114,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":367,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":431,"com.google.gson.MixedStreamTest.testWriteNulls":601,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":238,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":460,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":234,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":59,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":352,"com.google.gson.CommentsTest.testParseComments":596,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":22,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":65,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":582,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":223,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":500,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":550,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":486,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":144,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":180,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":325,"com.google.gson.MixedStreamTest.testReadInvalidState":598,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":121,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":37,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":116,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":279,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":211,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":254,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":503,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":220,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":258,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":186,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":103,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":274,"com.google.gson.functional.MapTest.testMapDeserialization":437,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":495,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":99,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":132,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":134,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":579,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":13,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":138,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":294,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":291,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":455,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":120,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":586,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":404,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":70,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":78,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":160,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":218,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":333,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":91,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":354,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":156,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":166,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":128,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":143,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":118,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":507,"com.google.gson.functional.PrimitiveTest.testShortSerialization":278,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":350,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":296,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":553,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":54,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":534,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":271,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":326,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":517,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":206,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":301,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":192,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":167,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":434,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":530,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":204,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":282,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":2,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":420,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":585,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":607,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":285,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":563,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":615,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":7,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":79,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":337,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":348,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":83,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":308,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":557,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":339,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":20,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":537,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":390,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":371,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":304,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":162,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":205,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":198,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":408,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":213,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":349,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":290,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":104,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":295,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":523,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":94,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":245,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":297,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":418,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":334,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":473,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":512,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":558,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":265,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":283,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":224,"com.google.gson.JsonPrimitiveTest.testEquals":612,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":293,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":300,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":578,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":488,"com.google.gson.functional.MapTest.testGeneralMapField":148,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":370,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":231,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":566,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":214,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":240,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":248,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":111,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":146,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":84,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":172,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":253,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":272,"com.google.gson.MixedStreamTest.testReadMixedStreamed":606,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":259,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":409,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":439,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":201,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":315,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":505,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":359,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":541,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":53,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":342,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":102,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":440,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":189,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":433,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":23,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":284,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":56,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":310,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":531,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":101,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":461,"com.google.gson.JsonPrimitiveTest.testEqualsDoesNotEquateStringAndNonStringTypes":611,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":44,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":401,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":476,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":584,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":27,"com.google.gson.functional.ObjectTest.testNestedDeserialization":391,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":42,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":75,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":576,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":331,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":51,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":565,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":222,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":328,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":441,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":465,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":29,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":276,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":161,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":459,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":573,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":203,"com.google.gson.functional.ObjectTest.testNullSerialization":377,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":164,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":472,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":435,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":147,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":252,"com.google.gson.functional.MapTest.testInterfaceTypeMap":145,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":498,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":216,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":12,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":513,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":38,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":303,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":219,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":453,"com.google.gson.MixedStreamTest.testReadClosed":599,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":85,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":49,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":525,"com.google.gson.MixedStreamTest.testWriteClosed":605,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":196,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":577,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":66,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":336,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":426,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":34,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":11,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":492,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":80,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":221,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":117,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":14,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":67,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":195,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":591,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeWithCustomTypeAdapter":616,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":544,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":311,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":452,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":199,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":107,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":362,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":184,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":567,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":257,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":427,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":406,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":61,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":229,"com.google.gson.functional.CollectionTest.testQueueDeserialization":482,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":491,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":260,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":542,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":468,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":287,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":115,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":592,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":139,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":384,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":96,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":174,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":389,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":191,"com.google.gson.functional.MapTest.testRawMapSerialization":150,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":597,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":480,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":417,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":620,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":73,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":159,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":490,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":583,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":626,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":81,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":233,"com.google.gson.functional.PrimitiveTest.testByteSerialization":275,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":365,"com.google.gson.ObjectTypeAdapterTest.testSerialize":614,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":170,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":522,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":570,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":239,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":207,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":35,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":466,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":594,"com.google.gson.functional.MapTest.testMapWithQuotes":140,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":88,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":528,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":467,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":16,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":504,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":26,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":46,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":561,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":86,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":123,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":581,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":28,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":388,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":133,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":93,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":268,"com.google.gson.functional.ObjectTest.testEmptyStringDeserialization":378,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":242,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":374,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":112,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":89,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":95,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":309,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":572,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":556,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":399,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":478,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":494,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":0,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":113,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":230,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":163,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":45,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":593,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":169,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":397,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":355,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":514,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":24,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":619,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":381,"com.google.gson.functional.ObjectTest.testNestedSerialization":74,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":225,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":171,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":256,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":470,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":55,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":149,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":212,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":15,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":324,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":604,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":69,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":361,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":562,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":335,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":358,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":412,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":319,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":526,"com.google.gson.GsonBuilderTest.testCreatingMoreThanOnce":595,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":382,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":403,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":590,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":621,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":182,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":237,"com.google.gson.functional.CollectionTest.testSetSerialization":202,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":506,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":21,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":130,"com.google.gson.functional.StringTest.testStringValueSerialization":183,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":62,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":185,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":329,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":474,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":493,"com.google.gson.MixedStreamTest.testWriteInvalidState":602,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":373,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":529,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":241,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":532,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":226,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":92,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":208,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":57,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":363,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":48,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":36,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":108,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":366,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":436,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":235,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":340},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[0,1],"tindex":"436e548d-3e3d-11e6-9b5f-5fd5f1e3b42d","method":{"position":"com.google.gson.Gson:133","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233604036/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src == null) {\n                {\n                    if (src != null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233604036/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            return toJsonTree(src);\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233604036/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:360","type":"CtVariableReadImpl","sourcecode":"insert"},"failures":[2,3,4],"tindex":"436ec9be-3e3d-11e6-9b5f-adfcd1d22898","method":{"position":"com.google.gson.internal.LinkedTreeMap:310","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (insert) {\n        {\n            for (com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>) {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                int int = left != null ? left.int : 0;\n                int int = right != null ? right.int : 0;\n                int int = leftHeight - rightHeight;\n                if (delta == (-2)) {\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    int int = rightRight != null ? rightRight.int : 0;\n                    int int = rightLeft != null ? rightLeft.int : 0;\n                    int int = rightLeftHeight - rightRightHeight;\n                    if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                        rotateLeft(node);\n                    } else {\n                        assert rightDelta == 1;\n                        rotateRight(right);\n                        rotateLeft(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 2) {\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    int int = leftRight != null ? leftRight.int : 0;\n                    int int = leftLeft != null ? leftLeft.int : 0;\n                    int int = leftLeftHeight - leftRightHeight;\n                    if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                        rotateRight(node);\n                    } else {\n                        assert leftDelta == (-1);\n                        rotateLeft(left);\n                        rotateRight(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 0) {\n                    node.int = leftHeight + 1;\n                    if (insert) {\n                        break;\n                    } \n                } else {\n                    assert (delta == (-1)) || (delta == 1);\n                    node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                    if (!insert) {\n                        break;\n                    } \n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233604036/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"insert"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.TreeTypeAdapter:55","type":"CtInvocationImpl","sourcecode":"value.isJsonNull()"},"failures":[],"tindex":"436ef0cf-3e3d-11e6-9b5f-439ec46992c4","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:108","type":"CtMethodImpl","sourcecode":"public boolean writeField(java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value.isJsonNull()) {\n        {\n            if (!(boolean))\n                return false;\n            \n            java.lang.Object java.lang.Object = field.get(value);\n            return fieldValue != value;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233604036/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonObject:54","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"436ef0d0-3e3d-11e6-9b5f-b7b33b3a57dc","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:75","type":"CtMethodImpl","sourcecode":"private void put(com.google.gson.JsonElement value) {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233604036/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((java.lang.String) != null) {\n                if ((!(value.isJsonNull())) || (getSerializeNulls())) {\n                    com.google.gson.JsonObject com.google.gson.JsonObject = ((com.google.gson.JsonObject)(peek()));\n                    object.add(java.lang.String, value);\n                } \n                java.lang.String = null;\n            } else if (java.util.List<com.google.gson.JsonElement>.isEmpty()) {\n                com.google.gson.JsonElement = value;\n            } else {\n                com.google.gson.JsonElement com.google.gson.JsonElement = peek();\n                if (element instanceof com.google.gson.JsonArray) {\n                    ((com.google.gson.JsonArray)(element)).add(value);\n                } else {\n                    throw new java.lang.IllegalStateException();\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"436f17e1-3e3d-11e6-9b5f-510de9258046","method":{"position":"com.google.gson.Gson:127","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonParseException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233604036/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    } else {\n        {\n            return ((T)(fromJson(json, typeOfT)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,0,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,1,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324],"tindex":"436f17e2-3e3d-11e6-9b5f-e702ea9be193","method":{"position":"com.google.gson.Gson:532","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        {\n            java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n            toJson(src, typeOfSrc, writer);\n            return writer.toString();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233604036/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:459","type":"CtBinaryOperatorImpl","sourcecode":"typeAdapter instanceof com.google.gson.TypeAdapter<?>"},"failures":[26,41,42,325,52,53,54,71,301,312],"tindex":"436f3ef3-3e3d-11e6-9b5f-b5d260204535","method":{"position":"com.google.gson.GsonBuilder:493","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\npublic com.google.gson.GsonBuilder registerTypeHierarchyAdapter(java.lang.Class<?> baseType, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n        {\n            com.google.gson.internal.$Gson$Preconditions.checkArgument((((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) || (typeAdapter instanceof com.google.gson.TypeAdapter<?>)));\n            if ((typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)) {\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(0, com.google.gson.TreeTypeAdapter.newTypeHierarchyFactory(baseType, typeAdapter));\n            } \n            if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.internal.bind.TypeAdapters.newTypeHierarchyFactory(baseType, ((com.google.gson.TypeAdapter)(typeAdapter))));\n            } \n            return com.google.gson.GsonBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233604036/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"436f3ef4-3e3d-11e6-9b5f-35b209e4e16f","method":{"position":"com.google.gson.internal.bind.TypeAdapters:297","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233604036/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:111","type":"CtInvocationImpl","sourcecode":"primitive.isString()"},"failures":[],"tindex":"436f6605-3e3d-11e6-9b5f-b9fad7b111f2","method":{"position":"com.google.gson.JsonPrimitive:93","type":"CtMethodImpl","sourcecode":"void setValue(java.lang.Object primitive) {\n    if (primitive.isString()) {\n        {\n            if (primitive instanceof java.lang.Character) {\n                char char = ((java.lang.Character)(primitive)).charValue();\n                com.google.gson.JsonPrimitive.this.java.lang.Object = java.lang.String.valueOf(c);\n            } else {\n                com.google.gson.internal.$Gson$Preconditions.checkArgument(((primitive instanceof java.lang.Number) || (com.google.gson.JsonPrimitive.isPrimitiveOrString(primitive))));\n                com.google.gson.JsonPrimitive.this.java.lang.Object = primitive;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233604036/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"primitive"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:459","type":"CtBinaryOperatorImpl","sourcecode":"typeAdapter instanceof com.google.gson.TypeAdapter<?>"},"failures":[],"tindex":"436f6606-3e3d-11e6-9b5f-e1e97658be6a","method":{"position":"com.google.gson.TreeTypeAdapter:84","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newFactory(com.google.gson.reflect.TypeToken<?> exactType, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233604036/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , exactType , false , null);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[5,8,28,31,35,36,326,143,149,295],"tindex":"436f6607-3e3d-11e6-9b5f-21775f266549","method":{"position":"com.google.gson.stream.JsonWriter:490","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233604036/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (value == null) {\n                        return nullValue();\n                    } \n                    writeDeferredName();\n                    java.lang.String java.lang.String = value.toString();\n                    if ((!(boolean)) && (((string.equals(\"-Infinity\")) || (string.equals(\"Infinity\"))) || (string.equals(\"NaN\")))) {\n                        throw new java.lang.IllegalArgumentException((\"Numeric values must be finite, but was \" + value));\n                    } \n                    beforeValue(false);\n                    java.io.Writer.append(string);\n                    return com.google.gson.stream.JsonWriter.this;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233604036/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:462","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[252,255,258,261,263,280,327],"tindex":"436f8d18-3e3d-11e6-9b5f-af7c7e565d07","method":{"position":"com.google.gson.Gson:297","type":"CtMethodImpl","sourcecode":"private void checkValidFloatingPoint(double value) {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233604036/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                throw new java.lang.IllegalArgumentException(((value + \" is not a valid double value as per JSON specification. To override this\") + \" behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.\"));\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:278","type":"CtBinaryOperatorImpl","sourcecode":"node != null"},"failures":[],"tindex":"436f8d19-3e3d-11e6-9b5f-655127b88d1e","method":{"position":"com.google.gson.internal.LinkedTreeMap:217","type":"CtMethodImpl","sourcecode":"void removeInternal(com.google.gson.internal.LinkedTreeMap.Node<K, V> node, boolean unlink) {\n    if (node != null) {\n        {\n            if (unlink) {\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            if ((left != null) && (right != null)) {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = (left.int) > (right.int) ? left.last() : right.first();\n                removeInternal(adjacent, false);\n                int int = 0;\n                left = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                if (left != null) {\n                    leftHeight = left.int;\n                    adjacent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = left;\n                    left.com.google.gson.internal.LinkedTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                } \n                int int = 0;\n                right = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                if (right != null) {\n                    rightHeight = right.int;\n                    adjacent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = right;\n                    right.com.google.gson.internal.LinkedTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                } \n                adjacent.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                replaceInParent(node, adjacent);\n                return ;\n            } else if (left != null) {\n                replaceInParent(node, left);\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n            } else if (right != null) {\n                replaceInParent(node, right);\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n            } else {\n                replaceInParent(node, null);\n            }\n            rebalance(originalParent, false);\n            (int)--;\n            (int)++;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233604036/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"node"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:274","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[5,328,6,329,7,330,8,9,331,332,333,10,11,12,334,335,336,337,13,14,338,15,339,340,341,342,343,344,16,345,17,346,347,348,18,19,20,349,21,22,23,350,24,351,25,26,27,28,352,0,29,30,31,32,33,353,34,35,36,354,37,355,356,357,39,358,359,40,360,41,42,325,361,43,44,362,45,363,47,48,49,50,51,52,53,54,55,56,57,58,59,60,364,61,62,365,366,63,64,367,368,65,369,370,66,371,372,67,373,374,375,68,376,377,69,378,379,70,380,71,72,381,73,74,75,382,76,383,384,385,386,77,387,78,79,388,80,389,390,391,392,393,81,394,82,395,396,397,398,399,400,401,83,84,85,402,403,404,86,405,87,88,406,89,407,90,91,408,409,92,410,326,411,93,94,95,96,97,412,98,413,99,100,414,101,415,102,103,104,105,416,106,417,418,107,419,108,109,420,110,111,421,112,113,114,115,116,117,422,423,118,424,425,119,426,427,120,428,429,121,122,123,124,125,126,127,128,129,130,131,132,133,430,134,431,432,433,135,136,434,435,137,436,138,437,139,438,439,440,441,140,141,142,442,443,143,144,444,145,146,147,148,149,150,445,151,152,446,153,447,448,154,155,156,449,450,157,158,159,160,161,162,163,164,451,452,165,453,166,454,455,167,168,169,456,457,458,2,459,460,461,462,170,171,172,173,174,463,175,176,177,178,179,464,465,180,466,181,467,468,469,182,470,471,183,472,189,190,191,192,193,473,474,475,194,195,196,197,198,476,477,199,478,479,200,201,480,202,203,481,204,482,483,484,205,485,206,207,208,209,210,486,487,211,488,212,489,490,213,214,215,216,217,218,219,220,221,222,223,491,492,224,225,226,227,228,229,230,493,231,232,233,234,235,494,495,236,237,238,496,497,498,239,499,240,500,241,501,242,502,243,503,244,504,505,245,246,247,1,248,506,249,250,507,508,509,251,510,252,511,512,513,514,515,253,516,517,254,518,519,520,521,522,523,524,255,256,525,526,527,528,529,257,530,258,259,531,532,260,533,534,261,535,262,263,536,537,264,265,538,539,540,266,541,542,543,544,545,546,547,548,267,549,268,550,269,270,551,552,271,553,554,272,555,273,556,557,558,274,275,276,277,278,279,280,559,560,561,281,562,282,563,564,565,283,284,566,285,567,568,569,570,571,572,573,286,287,574,288,575,576,289,577,578,290,579,580,291,581,292,293,294,582,295,296,297,583,584,298,585,299,300,301,302,586,587,303,588,304,305,306,307,308,589,590,309,310,591,592,311,593,594,312,313,314,315,316,317,595,596,597,598,599,600,601,602,327,603,604,605,606,607,608,318,319,320,321,322,323,609,610,324],"tindex":"4370024a-3e3d-11e6-9b5f-437e7ddbdb50","method":{"position":"com.google.gson.Gson:249","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> doubleAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return in.nextDouble();\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    double double = value.doubleValue();\n                    checkValidFloatingPoint(doubleValue);\n                    out.value(value);\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233604036/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"4370295b-3e3d-11e6-9b5f-e752458f8208","method":{"position":"com.google.gson.JsonObject:78","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.String value) {\n    if (property == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233604036/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            add(property, createJsonElement(value));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[266,270,276],"tindex":"4370295c-3e3d-11e6-9b5f-0bb6d53d70f0","method":{"position":"com.google.gson.internal.bind.TypeAdapters:282","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233604036/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:122","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"4370295d-3e3d-11e6-9b5f-7da7323c184d","method":{"position":"com.google.gson.internal.$Gson$Types:93","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type canonicalize(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class) {\n        java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(type));\n        return c.isArray() ? new com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl(com.google.gson.internal.$Gson$Types.canonicalize(c.getComponentType())) : c;\n    } else if (type instanceof java.lang.reflect.ParameterizedType) {\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(type));\n        return new com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl(p.getOwnerType() , p.getRawType() , p.getActualTypeArguments());\n    } else if (type instanceof java.lang.reflect.GenericArrayType) {\n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(type));\n        return new com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl(g.getGenericComponentType());\n    } else if (type instanceof java.lang.reflect.WildcardType) {\n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(type));\n        return new com.google.gson.internal.$Gson$Types.WildcardTypeImpl(w.getUpperBounds() , w.getLowerBounds());\n    } else {\n        return type;\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"4370506e-3e3d-11e6-9b5f-abe9d857a825","method":{"position":"com.google.gson.Gson:136","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233604036/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return toJsonTree(src, typeOfSrc);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[326],"tindex":"4370506f-3e3d-11e6-9b5f-a93eeb7af762","method":{"position":"com.google.gson.Gson:285","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233604036/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    float float = value.floatValue();\n                    checkValidFloatingPoint(floatValue);\n                    out.value(value);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233604036/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:111","type":"CtInvocationImpl","sourcecode":"primitive.isString()"},"failures":[425,427,429,611,612,613],"tindex":"43705070-3e3d-11e6-9b5f-39035a6080fb","method":{"position":"com.google.gson.JsonPrimitive:333","type":"CtMethodImpl","sourcecode":"private static boolean isIntegral(com.google.gson.JsonPrimitive primitive) {\n    if (primitive.isBoolean()) {\n        {\n            if (primitive.isString()) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233604036/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if ((primitive.java.lang.Object) instanceof java.lang.Number) {\n                        java.lang.Number java.lang.Number = ((java.lang.Number)(primitive.java.lang.Object));\n                        return ((((number instanceof java.math.BigInteger) || (number instanceof java.lang.Long)) || (number instanceof java.lang.Integer)) || (number instanceof java.lang.Short)) || (number instanceof java.lang.Byte);\n                    } \n                    return false;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233604036/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"primitive"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.JsonObject:54","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"43705071-3e3d-11e6-9b5f-e7a840e0bbf1","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:101","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nvoid read(com.google.gson.stream.JsonReader reader, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233604036/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            java.lang.Object java.lang.Object = com.google.gson.TypeAdapter<?>.read(reader);\n            if ((fieldValue != null) || (!isPrimitive)) {\n                field.set(value, fieldValue);\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:92","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof java.util.Iterator"},"failures":[],"tindex":"43707782-3e3d-11e6-9b5f-fd07f788cdeb","method":{"position":"com.google.gson.internal.LinkedTreeMap:481","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"rawtypes\")\n@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof java.util.Iterator) {\n        {\n            if (o instanceof java.util.Map.Entry) {\n                java.util.Map.Entry java.util.Map.Entry = ((java.util.Map.Entry)(o));\n                return ((K) == null ? (other.getKey()) == null : K.equals(other.getKey())) && ((V) == null ? (other.getValue()) == null : V.equals(other.getValue()));\n            } \n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233604036/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:127","type":"CtInvocationImpl","sourcecode":"raw.isInterface()"},"failures":[5,328,6,329,7,330,8,9,331,332,333,10,11,12,334,335,336,337,13,14,338,15,339,341,342,343,345,348,18,20,21,28,352,29,30,31,32,33,353,34,35,36,354,37,356,357,358,359,40,360,41,43,44,45,363,46,56,57,58,59,60,364,61,62,63,64,367,368,65,369,370,66,371,372,67,374,68,376,69,379,380,72,381,73,74,75,382,76,383,384,385,77,387,78,79,388,80,389,390,391,392,394,82,400,403,404,408,326,412,102,112,117,427,120,428,429,121,123,124,125,128,129,133,139,443,145,147,148,151,155,156,449,450,157,158,159,160,161,162,163,164,451,452,165,453,166,454,455,167,168,169,456,457,458,2,459,170,173,174,184,185,186,187,188,190,192,198,479,200,202,206,207,208,209,210,487,211,488,212,490,217,220,221,222,223,491,492,224,225,226,227,240,500,241,244,505,245,246,247,248,506,249,250,557,569,570,572,573,286,574,288,576,289,577,578,290,579,580,293,294,582,295,297,298,585,303,588,308,589,590,309,310,591,592,311,312,316,317,597,600,602,605,606,607,320,614],"tindex":"43707783-3e3d-11e6-9b5f-1f6c997e01be","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:125","type":"CtMethodImpl","sourcecode":"private java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> getBoundFields(com.google.gson.Gson context, com.google.gson.reflect.TypeToken<?> type, java.lang.Class<?> raw) {\n    if (raw.isInterface()) {\n        {\n            java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> = new java.util.LinkedHashMap<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField>();\n            if (raw.isInterface()) {\n                return result;\n            } \n            java.lang.reflect.Type java.lang.reflect.Type = type.getType();\n            while (raw != (java.lang.Object.java.lang.Object.java.lang.Class)) {\n                java.lang.reflect.Field[] java.lang.reflect.Field[] = raw.getDeclaredFields();\n                for (java.lang.reflect.Field java.lang.reflect.Field : fields) {\n                    boolean boolean = excludeField(field, true);\n                    boolean boolean = excludeField(field, false);\n                    if ((!serialize) && (!deserialize)) {\n                        continue;\n                    } \n                    field.setAccessible(true);\n                    java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, field.getGenericType());\n                    com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = createBoundField(context, field, getFieldName(field), com.google.gson.reflect.TypeToken.get(fieldType), serialize, deserialize);\n                    com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = result.put(boundField.java.lang.String, boundField);\n                    if (previous != null) {\n                        throw new java.lang.IllegalArgumentException(((declaredType + \" declares multiple JSON fields named \") + (previous.java.lang.String)));\n                    } \n                }\n                type = com.google.gson.reflect.TypeToken.get(com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, raw.getGenericSuperclass()));\n                raw = type.getRawType();\n            }\n            return result;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233604036/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"raw"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:113","type":"CtInvocationImpl","sourcecode":"primitive.isBoolean()"},"failures":[],"tindex":"43709e94-3e3d-11e6-9b5f-d189e7d9b0df","method":{"position":"com.google.gson.JsonPrimitive:333","type":"CtMethodImpl","sourcecode":"private static boolean isIntegral(com.google.gson.JsonPrimitive primitive) {\n    if (primitive.isBoolean()) {\n        {\n            if (primitive.isString()) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233604036/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if ((primitive.java.lang.Object) instanceof java.lang.Number) {\n                        java.lang.Number java.lang.Number = ((java.lang.Number)(primitive.java.lang.Object));\n                        return ((((number instanceof java.math.BigInteger) || (number instanceof java.lang.Long)) || (number instanceof java.lang.Integer)) || (number instanceof java.lang.Short)) || (number instanceof java.lang.Byte);\n                    } \n                    return false;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233604036/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"primitive"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"43709e95-3e3d-11e6-9b5f-35475a3e4ffa","method":{"position":"com.google.gson.stream.JsonWriter:490","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233604036/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (value == null) {\n                        return nullValue();\n                    } \n                    writeDeferredName();\n                    java.lang.String java.lang.String = value.toString();\n                    if ((!(boolean)) && (((string.equals(\"-Infinity\")) || (string.equals(\"Infinity\"))) || (string.equals(\"NaN\")))) {\n                        throw new java.lang.IllegalArgumentException((\"Numeric values must be finite, but was \" + value));\n                    } \n                    beforeValue(false);\n                    java.io.Writer.append(string);\n                    return com.google.gson.stream.JsonWriter.this;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233604036/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[],"tindex":"43709e96-3e3d-11e6-9b5f-e1289d86fe77","method":{"position":"com.google.gson.Gson:576","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src != null) {\n        {\n            try {\n                com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                toJson(src, typeOfSrc, jsonWriter);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233604036/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"43709e97-3e3d-11e6-9b5f-e9538759ce48","method":{"position":"com.google.gson.Gson:133","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233604036/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src == null) {\n                {\n                    if (src != null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233604036/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            return toJsonTree(src);\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233604036/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[],"tindex":"4370c5a8-3e3d-11e6-9b5f-5b449195bc1b","method":{"position":"com.google.gson.Gson:552","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233604036/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            if (src != null) {\n                toJson(src, src.getClass(), writer);\n            } else {\n                toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull, writer);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"4370c5a9-3e3d-11e6-9b5f-f125d73f19eb","method":{"position":"com.google.gson.Gson:133","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233604036/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src == null) {\n                {\n                    if (src != null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233604036/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            return toJsonTree(src);\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233604036/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[5,6,7,8,9,11,13,14,16,18,19,20,21,22,23,24,26,32,39,40,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,85,87,91,93,94,95,96,97,98,99,100,101,102,104,105,106,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,136,139,140,141,144,145,147,148,150,155,156,157,158,159,160,161,162,163,164,165,166,167,168,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,193,195,196,198,199,200,202,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,239,240,241,242,243,247,1,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,276,277,279,280,281,282,283,284,286,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,306,307,308,309,310,311,313,314,315,316,317,320,324],"tindex":"4370c5aa-3e3d-11e6-9b5f-413103e4b163","method":{"position":"com.google.gson.Gson:510","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src) {\n    if (src == null) {\n        {\n            if (src == null) {\n                return toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull);\n            } \n            return toJson(src, src.getClass());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233604036/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:159","type":"CtBinaryOperatorImpl","sourcecode":"a == b"},"failures":[],"tindex":"4370c5ab-3e3d-11e6-9b5f-f5a9dc2ab2dd","method":{"position":"com.google.gson.internal.$Gson$Types:158","type":"CtMethodImpl","sourcecode":"public static boolean equals(java.lang.reflect.Type a, java.lang.reflect.Type b) {\n    if (a == b) {\n        return true;\n    } else if (a instanceof java.lang.Class) {\n        return a.equals(b);\n    } else if (a instanceof java.lang.reflect.ParameterizedType) {\n        if (!(b instanceof java.lang.reflect.ParameterizedType)) {\n            return false;\n        } \n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(a));\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(b));\n        return ((com.google.gson.internal.$Gson$Types.equal(pa.getOwnerType(), pb.getOwnerType())) && (pa.getRawType().equals(pb.getRawType()))) && (java.util.Arrays.equals(pa.getActualTypeArguments(), pb.getActualTypeArguments()));\n    } else if (a instanceof java.lang.reflect.GenericArrayType) {\n        if (!(b instanceof java.lang.reflect.GenericArrayType)) {\n            return false;\n        } \n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(a));\n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(b));\n        return com.google.gson.internal.$Gson$Types.equals(ga.getGenericComponentType(), gb.getGenericComponentType());\n    } else if (a instanceof java.lang.reflect.WildcardType) {\n        if (!(b instanceof java.lang.reflect.WildcardType)) {\n            return false;\n        } \n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(a));\n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(b));\n        return (java.util.Arrays.equals(wa.getUpperBounds(), wb.getUpperBounds())) && (java.util.Arrays.equals(wa.getLowerBounds(), wb.getLowerBounds()));\n    } else if (a instanceof java.lang.reflect.TypeVariable) {\n        if (!(b instanceof java.lang.reflect.TypeVariable)) {\n            return false;\n        } \n        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(a));\n        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(b));\n        return ((va.getGenericDeclaration()) == (vb.getGenericDeclaration())) && (va.getName().equals(vb.getName()));\n    } else {\n        return false;\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"a","b":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.FieldNamingPolicy:155","type":"CtUnaryOperatorImpl","sourcecode":"!(java.lang.Character.isUpperCase(firstCharacter))"},"failures":[158,163,451,455,206,209],"tindex":"4370ecbc-3e3d-11e6-9b5f-b970e621a49d","method":{"position":"com.google.gson.FieldNamingPolicy:163","type":"CtMethodImpl","sourcecode":"private static java.lang.String modifyString(char firstCharacter, java.lang.String srcString, int indexOfSubstring) {\n    if (!(java.lang.Character.isUpperCase(firstCharacter))) {\n        {\n            return indexOfSubstring < (srcString.length()) ? firstCharacter + (srcString.substring(indexOfSubstring)) : java.lang.String.valueOf(firstCharacter);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233604036/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"firstCharacter":"firstCharacter"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:123","type":"CtBinaryOperatorImpl","sourcecode":"from == null"},"failures":[],"tindex":"4370ecbd-3e3d-11e6-9b5f-99badafee2d6","method":{"position":"com.google.gson.reflect.TypeToken:160","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.GenericArrayType to) {\n    if (from == null) {\n        {\n            java.lang.reflect.Type java.lang.reflect.Type = to.getGenericComponentType();\n            if (toGenericComponentType instanceof java.lang.reflect.ParameterizedType) {\n                java.lang.reflect.Type java.lang.reflect.Type = from;\n                if (from instanceof java.lang.reflect.GenericArrayType) {\n                    t = ((java.lang.reflect.GenericArrayType)(from)).getGenericComponentType();\n                } else if (from instanceof java.lang.Class<?>) {\n                    java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(from));\n                    while (classType.isArray()) {\n                        classType = classType.getComponentType();\n                    }\n                    t = classType;\n                } \n                return com.google.gson.reflect.TypeToken.isAssignableFrom(t, ((java.lang.reflect.ParameterizedType)(toGenericComponentType)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n            } \n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233604036/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:94","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.Class"},"failures":[5,328,6,329,7,330,8,9,15,339,341,342,343,344,16,345,17,346,347,348,18,19,20,349,21,22,23,350,24,351,25,27,38,615,616,362,47,48,49,50,51,52,54,57,59,392,103,107,420,116,118,431,155,486,487,211,488,212,489,490,214,215,216,1,569,570,571,572,573,581,292,296,594,312,313,314,315,617,321,322,323],"tindex":"4370ecbe-3e3d-11e6-9b5f-19f016eaa257","method":{"position":"com.google.gson.GsonBuilder:447","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\npublic com.google.gson.GsonBuilder registerTypeAdapter(java.lang.reflect.Type type, java.lang.Object typeAdapter) {\n    if (type instanceof java.lang.Class) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233604036/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.$Gson$Preconditions.checkArgument(((((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) || (typeAdapter instanceof com.google.gson.InstanceCreator<?>)) || (typeAdapter instanceof com.google.gson.TypeAdapter<?>)));\n            if (typeAdapter instanceof com.google.gson.InstanceCreator<?>) {\n                java.util.Map<java.lang.reflect.Type, com.google.gson.InstanceCreator<?>>.put(type, ((com.google.gson.InstanceCreator)(typeAdapter)));\n            } \n            if ((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) {\n                com.google.gson.reflect.TypeToken<?> com.google.gson.reflect.TypeToken<?> = com.google.gson.reflect.TypeToken.get(type);\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.TreeTypeAdapter.newFactoryWithMatchRawType(typeToken, typeAdapter));\n            } \n            if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.internal.bind.TypeAdapters.newFactory(com.google.gson.reflect.TypeToken.get(type), ((com.google.gson.TypeAdapter)(typeAdapter))));\n            } \n            return com.google.gson.GsonBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:107","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonArray"},"failures":[],"tindex":"437113cf-3e3d-11e6-9b5f-d7e426eb5468","method":{"position":"com.google.gson.internal.LinkedTreeMap:574","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonArray) {\n        {\n            if (!(o instanceof java.util.Map.Entry)) {\n                return false;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n            if (node == null) {\n                return false;\n            } \n            removeInternal(node, true);\n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233604036/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[0,41,427,120,428,429,492,244,245,246,574,618],"tindex":"437113d0-3e3d-11e6-9b5f-e714be8ccb23","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:175","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            if (!(isLenient())) {\n                double double = value.doubleValue();\n                if ((java.lang.Double.isNaN(d)) || (java.lang.Double.isInfinite(d))) {\n                    throw new java.lang.IllegalArgumentException((\"JSON forbids NaN and infinities: \" + value));\n                } \n            } \n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233604036/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[5,6,8,9,331,332,333,10,11,12,334,335,13,14,338,15,16,17,18,20,21,22,27,28,29,30,31,32,33,34,35,36,37,357,619,38,615,620,621,622,623,624,625,40,41,43,44,45,46,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,72,73,74,76,77,78,79,80,82,400,89,97,102,109,111,117,427,120,428,429,121,122,123,124,125,126,127,128,129,130,131,132,133,135,136,137,138,139,140,141,142,144,145,147,148,150,151,153,154,155,156,157,158,159,160,162,163,164,165,166,167,168,169,170,171,172,173,174,180,184,185,186,187,188,190,191,192,193,194,195,196,197,198,199,200,201,202,203,206,207,208,209,210,211,212,217,220,221,222,223,491,492,224,225,226,227,229,230,233,234,235,236,237,238,239,240,242,243,244,245,246,247,249,250,256,259,271,279,282,284,569,570,572,573,286,574,288,289,291,299,300,301,302,303,304,308,309,310,311,312,316,317,626,597,600,327,604,318,319,320,614],"tindex":"43713ae1-3e3d-11e6-9b5f-97d1d6b79a38","method":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:74","type":"CtMethodImpl","sourcecode":"private java.lang.reflect.Type getRuntimeTypeIfMoreSpecific(java.lang.reflect.Type type, java.lang.Object value) {\n    if (value == null) {\n        {\n            if ((value != null) && (((type == (java.lang.Object.java.lang.Object.java.lang.Class)) || (type instanceof java.lang.reflect.TypeVariable<?>)) || (type instanceof java.lang.Class<?>))) {\n                type = value.getClass();\n            } \n            return type;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233604036/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:462","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[],"tindex":"43713ae2-3e3d-11e6-9b5f-2fb5f6ff2840","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:162","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(double value) throws java.io.IOException {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        {\n            if ((!(isLenient())) && ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value)))) {\n                throw new java.lang.IllegalArgumentException((\"JSON forbids NaN and infinities: \" + value));\n            } \n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233604036/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:545","type":"CtBinaryOperatorImpl","sourcecode":"c == '\\u2028'"},"failures":[],"tindex":"43713ae3-3e3d-11e6-9b5f-d38dca891915","method":{"position":"com.google.gson.stream.JsonReader:755","type":"CtMethodImpl","sourcecode":"private boolean isLiteral(char c) throws java.io.IOException {\n    if (c == '\\u2028') {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233604036/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            switch (c) {\n                case '/' :\n                case '\\\\' :\n                case ';' :\n                case '#' :\n                case '=' :\n                    checkLenient();\n                case '{' :\n                case '}' :\n                case '[' :\n                case ']' :\n                case ':' :\n                case ',' :\n                case ' ' :\n                case '\\t' :\n                case '\\f' :\n                case '\\r' :\n                case '\\n' :\n                    return false;\n                default :\n                    return true;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"c"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"437161f4-3e3d-11e6-9b5f-d762cb0ef9e4","method":{"position":"com.google.gson.Gson:285","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233604036/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    float float = value.floatValue();\n                    checkValidFloatingPoint(floatValue);\n                    out.value(value);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233604036/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:459","type":"CtBinaryOperatorImpl","sourcecode":"typeAdapter instanceof com.google.gson.TypeAdapter<?>"},"failures":[],"tindex":"437161f5-3e3d-11e6-9b5f-e7f091d6aac4","method":{"position":"com.google.gson.TreeTypeAdapter:103","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newTypeHierarchyFactory(java.lang.Class<?> hierarchyType, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233604036/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , null , false , hierarchyType);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[],"tindex":"437161f6-3e3d-11e6-9b5f-71b955c1f655","method":{"position":"com.google.gson.stream.JsonWriter:385","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter name(java.lang.String name) throws java.io.IOException {\n    if (name == null) {\n        {\n            if (name == null) {\n                throw new java.lang.NullPointerException(\"name == null\");\n            } \n            if ((java.lang.String) != null) {\n                throw new java.lang.IllegalStateException();\n            } \n            if ((int) == 0) {\n                throw new java.lang.IllegalStateException(\"JsonWriter is closed.\");\n            } \n            java.lang.String = name;\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233604036/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"437161f7-3e3d-11e6-9b5f-c11cfd182875","method":{"position":"com.google.gson.stream.JsonWriter:413","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            writeDeferredName();\n            beforeValue(false);\n            string(value);\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233604036/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:578","type":"CtBinaryOperatorImpl","sourcecode":"root == null"},"failures":[],"tindex":"437161f8-3e3d-11e6-9b5f-018431a58a7f","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:429","type":"CtMethodImpl","sourcecode":"private void rotateRight(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root == null) {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivotRight;\n            if (pivotRight != null) {\n                pivotRight.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            } \n            replaceInParent(root, pivot);\n            pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot;\n            root.int = (java.lang.Math.max((right != null ? right.int : 0), (pivotRight != null ? pivotRight.int : 0))) + 1;\n            pivot.int = (java.lang.Math.max(root.int, (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233604036/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:332","type":"CtVariableReadImpl","sourcecode":"insert"},"failures":[],"tindex":"43718909-3e3d-11e6-9b5f-3f72e0a99461","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:338","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (insert) {\n        {\n            for (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) {\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                int int = left != null ? left.int : 0;\n                int int = right != null ? right.int : 0;\n                int int = leftHeight - rightHeight;\n                if (delta == (-2)) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    int int = rightRight != null ? rightRight.int : 0;\n                    int int = rightLeft != null ? rightLeft.int : 0;\n                    int int = rightLeftHeight - rightRightHeight;\n                    if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                        rotateLeft(node);\n                    } else {\n                        assert rightDelta == 1;\n                        rotateRight(right);\n                        rotateLeft(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 2) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    int int = leftRight != null ? leftRight.int : 0;\n                    int int = leftLeft != null ? leftLeft.int : 0;\n                    int int = leftLeftHeight - leftRightHeight;\n                    if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                        rotateRight(node);\n                    } else {\n                        assert leftDelta == (-1);\n                        rotateLeft(left);\n                        rotateRight(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 0) {\n                    node.int = leftHeight + 1;\n                    if (insert) {\n                        break;\n                    } \n                } else {\n                    assert (delta == (-1)) || (delta == 1);\n                    node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                    if (!insert) {\n                        break;\n                    } \n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233604036/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"insert"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"4371b01a-3e3d-11e6-9b5f-49d0f90fad97","method":{"position":"com.google.gson.Gson:847","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(com.google.gson.JsonElement json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233604036/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":46,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
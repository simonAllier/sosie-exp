{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":332,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":201,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":28,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":35,"com.google.gson.MixedStreamTest.testWriteLenient":409,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":113,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":343,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":279,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":289,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":261,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":267,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":84,"com.google.gson.JsonObjectTest.testAddingNullPropertyValue":358,"com.google.gson.functional.ObjectTest.testSingletonLists":145,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":109,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":268,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":202,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":376,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":124,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":321,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":304,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":217,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":317,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":239,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":329,"com.google.gson.functional.EnumTest.testEnumCaseMapping":260,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":3,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":200,"com.google.gson.functional.JsonTreeTest.testToJsonTree":394,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":222,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":339,"com.google.gson.JsonObjectTest.testEqualsNonEmptyObject":359,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":93,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":402,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":227,"com.google.gson.internal.LinkedTreeMapTest.testLargeSetOfRandomKeys":366,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":286,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":126,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":188,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":385,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":152,"com.google.gson.internal.LinkedTreeMapTest.testContainsNonComparableKeyReturnsFalse":367,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":237,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":310,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":384,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":82,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":122,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":340,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":276,"com.google.gson.JsonParserTest.testParseString":354,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":180,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":174,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":63,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":158,"com.google.gson.DefaultDateTypeAdapterTest.testFormatUsesDefaultTimezone":372,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":108,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":47,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":199,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":387,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":26,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":181,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":59,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":157,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":302,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":314,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":39,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":166,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":330,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":51,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":248,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":341,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":112,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":103,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":309,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":85,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":149,"com.google.gson.functional.EnumTest.testEnumSet":254,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":249,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":131,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":10,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":153,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":247,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":316,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":234,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":398,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":184,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":303,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":29,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":40,"com.google.gson.DefaultDateTypeAdapterTest.testParsingDatesFormattedWithSystemLocale":371,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":197,"com.google.gson.functional.MapTest.testMapSerialization":15,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":31,"com.google.gson.functional.MapTest.testSerializeMaps":9,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":74,"com.google.gson.functional.MapTest.testComplexKeysSerialization":24,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":386,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":70,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":128,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":233,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":396,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":220,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":360,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":36,"com.google.gson.functional.MapTest.testStringKeyDeserialization":331,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":133,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":192,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":27,"com.google.gson.functional.PrettyPrintingTest.testMap":218,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":296,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":282,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":32,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":90,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":320,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":206,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":0,"com.google.gson.functional.MapTest.testMapSerializationEmpty":25,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":100,"com.google.gson.functional.CollectionTest.testQueueSerialization":283,"com.google.gson.functional.MapTest.testMapOfMapSerialization":14,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":172,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":80,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":177,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":139,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictBoxedNansAndInfinities":413,"com.google.gson.functional.FieldNamingTest.testIdentity":75,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":203,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":342,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":210,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":38,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":144,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":333,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":400,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":318,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":204,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":307,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":175,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":2,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":79,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":101,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":395,"com.google.gson.functional.MapTest.testMapSubclassSerialization":8,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":191,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":312,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":262,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":298,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":406,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":246,"com.google.gson.functional.EnumTest.testEnumSubclass":257,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":178,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":322,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":162,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":306,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":132,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":143,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":335,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":1,"com.google.gson.internal.LinkedTreeMapTest.testEqualsAndHashCode":369,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":173,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":117,"com.google.gson.MixedStreamTest.testWriteNulls":407,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":65,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":61,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":127,"com.google.gson.JsonObjectTest.testReadPropertyWithEmptyStringName":356,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":136,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":146,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":216,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":17,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":205,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":81,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":253,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":119,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":190,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":5,"com.google.gson.ObjectTypeAdapterTest.testSerializeObject":374,"com.google.gson.JsonParserTest.testParseMixedArray":381,"com.google.gson.DefaultDateTypeAdapterTest.testParsingDatesFormattedWithUsLocale":373,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":165,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":213,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":169,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":78,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":106,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":185,"com.google.gson.functional.MapTest.testMapDeserialization":327,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":102,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":223,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":7,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":383,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":11,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":54,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":229,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":226,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeMap":352,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":50,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":151,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":159,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":42,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":299,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":336,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":94,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":48,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":142,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":16,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":219,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":403,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":121,"com.google.gson.functional.PrimitiveTest.testShortSerialization":189,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":231,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":241,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictNansAndInfinities":412,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":182,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":370,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":71,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":256,"com.google.gson.internal.LinkedTreeMapTest.testEmptyStringValues":368,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":281,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":311,"com.google.gson.internal.LinkedTreeMapTest.testPutOverrides":365,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":325,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":193,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":293,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":347,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":391,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":389,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":196,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":37,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":160,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":86,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":263,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":392,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":134,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":259,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":34,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":44,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":287,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":294,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":225,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":107,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":230,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":97,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":198,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":232,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":337,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":176,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":194,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":271,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":228,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":255,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":323,"com.google.gson.functional.MapTest.testGeneralMapField":21,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":58,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":67,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":295,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":308,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":114,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":19,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":87,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":164,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":275,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":183,"com.google.gson.ObjectTypeAdapterTest.testDeserializeNullValue":363,"com.google.gson.JsonObjectTest.testDeepCopy":361,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":170,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":290,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":319,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":240,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":105,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":328,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":242,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":324,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":137,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":195,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":270,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":265,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":390,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":104,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":211,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":141,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":156,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":305,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":334,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":238,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":215,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":245,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":187,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":43,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":346,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":292,"com.google.gson.functional.ObjectTest.testNullSerialization":399,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":46,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":326,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":20,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":163,"com.google.gson.functional.MapTest.testInterfaceTypeMap":18,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":297,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":53,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":258,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":278,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":300,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":88,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":236,"com.google.gson.MixedStreamTest.testWriteClosed":411,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":285,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":147,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":250,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":52,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":350,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":161,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":214,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":120,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":55,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":148,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":284,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":266,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":288,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":110,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":348,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":76,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":168,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":393,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":56,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":129,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":349,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":171,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":30,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":118,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":12,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":99,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":277,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":280,"com.google.gson.functional.MapTest.testRawMapSerialization":23,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":405,"com.google.gson.JsonParserTest.testParseReader":353,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":41,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":154,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":401,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":355,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":60,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":123,"com.google.gson.functional.PrimitiveTest.testByteSerialization":186,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":404,"com.google.gson.ObjectTypeAdapterTest.testSerialize":375,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":378,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":273,"com.google.gson.JsonPrimitiveTest.testEqualsIntegerAndBigInteger":382,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":344,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":66,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":72,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":251,"com.google.gson.functional.MapTest.testMapWithQuotes":13,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":91,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":130,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":140,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":49,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":89,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":83,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":243,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":224,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":96,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":179,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":69,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":115,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":92,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":98,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":264,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":345,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":397,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":57,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":116,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":244,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":45,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":212,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":313,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":351,"com.google.gson.internal.LinkedHashTreeMapTest.testRemoveRootDoesNotDoubleUnlink":377,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":138,"com.google.gson.functional.ObjectTest.testNestedSerialization":155,"com.google.gson.JsonObjectTest.testAddingStringProperties":362,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":272,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":167,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":274,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":269,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":22,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":6,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":209,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":315,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":410,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":150,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":338,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":4,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":207,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":64,"com.google.gson.functional.CollectionTest.testSetSerialization":291,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":135,"com.google.gson.functional.StringTest.testStringValueSerialization":208,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":221,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":33,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":77,"com.google.gson.MixedStreamTest.testWriteInvalidState":408,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":380,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":68,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":301,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":95,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":73,"com.google.gson.ObjectTypeAdapterTest.testDeserialize":364,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":125,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":357,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":235,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":388,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":252,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":111,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":379,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":62},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:278","type":"CtBinaryOperatorImpl","sourcecode":"node != null"},"failures":[],"tindex":"ec6244c9-3e8e-11e6-b19d-a91599eb8348","method":{"position":"com.google.gson.internal.LinkedTreeMap:217","type":"CtMethodImpl","sourcecode":"void removeInternal(com.google.gson.internal.LinkedTreeMap.Node<K, V> node, boolean unlink) {\n    if (node != null) {\n        {\n            if (unlink) {\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            if ((left != null) && (right != null)) {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = (left.int) > (right.int) ? left.last() : right.first();\n                removeInternal(adjacent, false);\n                int int = 0;\n                left = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                if (left != null) {\n                    leftHeight = left.int;\n                    adjacent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = left;\n                    left.com.google.gson.internal.LinkedTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                } \n                int int = 0;\n                right = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                if (right != null) {\n                    rightHeight = right.int;\n                    adjacent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = right;\n                    right.com.google.gson.internal.LinkedTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                } \n                adjacent.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                replaceInParent(node, adjacent);\n                return ;\n            } else if (left != null) {\n                replaceInParent(node, left);\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n            } else if (right != null) {\n                replaceInParent(node, right);\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n            } else {\n                replaceInParent(node, null);\n            }\n            rebalance(originalParent, false);\n            (int)--;\n            (int)++;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268864468/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"node"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[0],"tindex":"ec62e10a-3e8e-11e6-b19d-fb5844c28a75","method":{"position":"com.google.gson.JsonObject:100","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Boolean value) {\n    if (property == null) {\n        {\n            add(property, createJsonElement(value));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268864468/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322],"tindex":"ec62e10b-3e8e-11e6-b19d-875051e42cc5","method":{"position":"com.google.gson.Gson:532","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        {\n            java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n            toJson(src, typeOfSrc, writer);\n            return writer.toString();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268864468/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:154","type":"CtUnaryOperatorImpl","sourcecode":"!create"},"failures":[5,323,6,324,325,326,327,328,329,330,331,332,49,333,334,335,336,337,338,339,340,341,342,199,343,344,345,346,347,348,349,350,351,352,304,312,313,353,354,355,356,357,358,359,360,0,361,362,363,364,365,366,367,368,369],"tindex":"ec63081c-3e8e-11e6-b19d-cd0a153ad8f2","method":{"position":"com.google.gson.internal.LinkedTreeMap:121","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedTreeMap.Node<K, V> find(K key, boolean create) {\n    if (!create) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268864468/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.util.Comparator<? super K> java.util.Comparator<? super K> = com.google.gson.internal.LinkedTreeMap.this.java.util.Comparator<? super K>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            int int = 0;\n            if (nearest != null) {\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                java.lang.Comparable<java.lang.Object> java.lang.Comparable<java.lang.Object> = comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>) ? ((java.lang.Comparable<java.lang.Object>)(key)) : null;\n                while (true) {\n                    comparison = comparableKey != null ? comparableKey.compareTo(nearest.K) : comparator.compare(key, nearest.K);\n                    if (comparison == 0) {\n                        return nearest;\n                    } \n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = comparison < 0 ? nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> : nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    if (child == null) {\n                        break;\n                    } \n                    nearest = child;\n                }\n            } \n            if (!create) {\n                return null;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.this.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            if (nearest == null) {\n                if ((comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>)) && (!(key instanceof java.lang.Comparable))) {\n                    throw new java.lang.ClassCastException(((key.getClass().getName()) + \" is not Comparable\"));\n                } \n                created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n            } else {\n                created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                if (comparison < 0) {\n                    nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                } else {\n                    nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                }\n                rebalance(nearest, true);\n            }\n            (int)++;\n            (int)++;\n            return created;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"create":"create"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[16,22,35,38,370,243,247,251,252],"tindex":"ec632f2d-3e8e-11e6-b19d-c7d48bcd029d","method":{"position":"com.google.gson.internal.bind.TypeAdapters:245","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268864468/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:188","type":"CtBinaryOperatorImpl","sourcecode":"from == null"},"failures":[],"tindex":"ec632f2e-3e8e-11e6-b19d-f5aafd1024c0","method":{"position":"com.google.gson.reflect.TypeToken:160","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.GenericArrayType to) {\n    if (from instanceof java.lang.Class<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268864468/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (from == null) {\n                {\n                    java.lang.reflect.Type java.lang.reflect.Type = to.getGenericComponentType();\n                    if (toGenericComponentType instanceof java.lang.reflect.ParameterizedType) {\n                        java.lang.reflect.Type java.lang.reflect.Type = from;\n                        if (from instanceof java.lang.reflect.GenericArrayType) {\n                            t = ((java.lang.reflect.GenericArrayType)(from)).getGenericComponentType();\n                        } else if (from instanceof java.lang.Class<?>) {\n                            java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(from));\n                            while (classType.isArray()) {\n                                classType = classType.getComponentType();\n                            }\n                            t = classType;\n                        } \n                        return com.google.gson.reflect.TypeToken.isAssignableFrom(t, ((java.lang.reflect.ParameterizedType)(toGenericComponentType)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n                    } \n                    return true;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268864468/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[227],"tindex":"ec63563f-3e8e-11e6-b19d-d593c1d1d81e","method":{"position":"com.google.gson.Gson:468","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src) {\n    if (src != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268864468/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src != null) {\n                {\n                    if (src == null) {\n                        return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n                    } \n                    return toJsonTree(src, src.getClass());\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268864468/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[371,372,373,87,92,93,116],"tindex":"ec635640-3e8e-11e6-b19d-4f6015d32ba5","method":{"position":"com.google.gson.DefaultDateTypeAdapter:94","type":"CtMethodImpl","sourcecode":"private java.util.Date deserializeToDate(com.google.gson.JsonElement json) {\n    if (json == null) {\n        {\n            synchronized(java.text.DateFormat) {\n                try {\n                    return java.text.DateFormat.parse(json.getAsString());\n                } catch (java.text.ParseException ignored) {\n                }\n                try {\n                    return java.text.DateFormat.parse(json.getAsString());\n                } catch (java.text.ParseException ignored) {\n                }\n                try {\n                    return java.text.DateFormat.parse(json.getAsString());\n                } catch (java.text.ParseException e) {\n                    throw new com.google.gson.JsonSyntaxException(json.getAsString() , e);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268864468/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[176],"tindex":"ec637d51-3e8e-11e6-b19d-7b50b2337e1c","method":{"position":"com.google.gson.internal.bind.TypeAdapters:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268864468/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:164","type":"CtBinaryOperatorImpl","sourcecode":"from instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"ec637d52-3e8e-11e6-b19d-e3495cab5ba1","method":{"position":"com.google.gson.reflect.TypeToken:272","type":"CtMethodImpl","sourcecode":"private static boolean matches(java.lang.reflect.Type from, java.lang.reflect.Type to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeMap) {\n    if (from instanceof java.lang.reflect.GenericArrayType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268864468/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (to.equals(from)) || ((from instanceof java.lang.reflect.TypeVariable) && (to.equals(typeMap.get(((java.lang.reflect.TypeVariable<?>)(from)).getName()))));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"ec637d53-3e8e-11e6-b19d-534bb902deff","method":{"position":"com.google.gson.Gson:695","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.lang.String json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268864468/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (json == null) {\n                {\n                    java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n                    return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268864468/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[33,67,81,83,84,85,150,287,289,291,374,375,376],"tindex":"ec63a464-3e8e-11e6-b19d-e74540e1a1d6","method":{"position":"com.google.gson.internal.bind.ObjectTypeAdapter:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Object value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            com.google.gson.TypeAdapter<java.lang.Object> com.google.gson.TypeAdapter<java.lang.Object> = ((com.google.gson.TypeAdapter<java.lang.Object>)(com.google.gson.Gson.getAdapter(value.getClass())));\n            if (typeAdapter instanceof com.google.gson.internal.bind.ObjectTypeAdapter) {\n                out.beginObject();\n                out.endObject();\n                return ;\n            } \n            typeAdapter.write(out, value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268864468/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:332","type":"CtVariableReadImpl","sourcecode":"insert"},"failures":[377],"tindex":"ec63a465-3e8e-11e6-b19d-6f4fd1f60784","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:338","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (insert) {\n        {\n            for (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) {\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                int int = left != null ? left.int : 0;\n                int int = right != null ? right.int : 0;\n                int int = leftHeight - rightHeight;\n                if (delta == (-2)) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    int int = rightRight != null ? rightRight.int : 0;\n                    int int = rightLeft != null ? rightLeft.int : 0;\n                    int int = rightLeftHeight - rightRightHeight;\n                    if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                        rotateLeft(node);\n                    } else {\n                        assert rightDelta == 1;\n                        rotateRight(right);\n                        rotateLeft(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 2) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    int int = leftRight != null ? leftRight.int : 0;\n                    int int = leftLeft != null ? leftLeft.int : 0;\n                    int int = leftLeftHeight - leftRightHeight;\n                    if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                        rotateRight(node);\n                    } else {\n                        assert leftDelta == (-1);\n                        rotateLeft(left);\n                        rotateRight(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 0) {\n                    node.int = leftHeight + 1;\n                    if (insert) {\n                        break;\n                    } \n                } else {\n                    assert (delta == (-1)) || (delta == 1);\n                    node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                    if (!insert) {\n                        break;\n                    } \n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268864468/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"insert"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[],"tindex":"ec648ec6-3e8e-11e6-b19d-2d57cdc0e3b8","method":{"position":"com.google.gson.Gson:491","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src != null) {\n        {\n            com.google.gson.internal.bind.JsonTreeWriter com.google.gson.internal.bind.JsonTreeWriter = new com.google.gson.internal.bind.JsonTreeWriter();\n            toJson(src, typeOfSrc, writer);\n            return writer.get();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268864468/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"ec648ec7-3e8e-11e6-b19d-978367806641","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:101","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nvoid read(com.google.gson.stream.JsonReader reader, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268864468/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            java.lang.Object java.lang.Object = com.google.gson.TypeAdapter<?>.read(reader);\n            if ((fieldValue != null) || (!isPrimitive)) {\n                field.set(value, fieldValue);\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:166","type":"CtBinaryOperatorImpl","sourcecode":"from instanceof java.lang.Class<?>"},"failures":[],"tindex":"ec64b5d8-3e8e-11e6-b19d-abd7184cad68","method":{"position":"com.google.gson.reflect.TypeToken:160","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.GenericArrayType to) {\n    if (from instanceof java.lang.Class<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268864468/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (from == null) {\n                {\n                    java.lang.reflect.Type java.lang.reflect.Type = to.getGenericComponentType();\n                    if (toGenericComponentType instanceof java.lang.reflect.ParameterizedType) {\n                        java.lang.reflect.Type java.lang.reflect.Type = from;\n                        if (from instanceof java.lang.reflect.GenericArrayType) {\n                            t = ((java.lang.reflect.GenericArrayType)(from)).getGenericComponentType();\n                        } else if (from instanceof java.lang.Class<?>) {\n                            java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(from));\n                            while (classType.isArray()) {\n                                classType = classType.getComponentType();\n                            }\n                            t = classType;\n                        } \n                        return com.google.gson.reflect.TypeToken.isAssignableFrom(t, ((java.lang.reflect.ParameterizedType)(toGenericComponentType)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n                    } \n                    return true;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268864468/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonObject:54","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"ec64b5d9-3e8e-11e6-b19d-9759572a4e25","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:75","type":"CtMethodImpl","sourcecode":"private void put(com.google.gson.JsonElement value) {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268864468/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((java.lang.String) != null) {\n                if ((!(value.isJsonNull())) || (getSerializeNulls())) {\n                    com.google.gson.JsonObject com.google.gson.JsonObject = ((com.google.gson.JsonObject)(peek()));\n                    object.add(java.lang.String, value);\n                } \n                java.lang.String = null;\n            } else if (java.util.List<com.google.gson.JsonElement>.isEmpty()) {\n                com.google.gson.JsonElement = value;\n            } else {\n                com.google.gson.JsonElement com.google.gson.JsonElement = peek();\n                if (element instanceof com.google.gson.JsonArray) {\n                    ((com.google.gson.JsonArray)(element)).add(value);\n                } else {\n                    throw new java.lang.IllegalStateException();\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:103","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"ec64b5da-3e8e-11e6-b19d-178190adb0eb","method":{"position":"com.google.gson.internal.$Gson$Types:217","type":"CtMethodImpl","sourcecode":"public static java.lang.String typeToString(java.lang.reflect.Type type) {\n    return type instanceof java.lang.Class ? ((java.lang.Class<?>)(type)).getName() : type.toString();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[],"tindex":"ec64b5db-3e8e-11e6-b19d-2f81fbaa9f74","method":{"position":"com.google.gson.Gson:552","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268864468/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            if (src != null) {\n                toJson(src, src.getClass(), writer);\n            } else {\n                toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull, writer);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:79","type":"CtUnaryOperatorImpl","sourcecode":"!(json instanceof com.google.gson.JsonPrimitive)"},"failures":[],"tindex":"ec64dcec-3e8e-11e6-b19d-fbd0477865a2","method":{"position":"com.google.gson.Gson:847","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(com.google.gson.JsonElement json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n        {\n            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268864468/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[189],"tindex":"ec64dced-3e8e-11e6-b19d-2d632f3404ab","method":{"position":"com.google.gson.internal.bind.TypeAdapters:223","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268864468/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"ec64dcee-3e8e-11e6-b19d-193a3428aa1a","method":{"position":"com.google.gson.Gson:127","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonParseException {\n    if (json == null) {\n        {\n            return ((T)(fromJson(json, typeOfT)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268864468/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"ec64dcef-3e8e-11e6-b19d-37a1d3ac75ab","method":{"position":"com.google.gson.Gson:591","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        {\n            com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = getAdapter(com.google.gson.reflect.TypeToken.get(typeOfSrc));\n            boolean boolean = writer.isLenient();\n            writer.setLenient(true);\n            boolean boolean = writer.isHtmlSafe();\n            writer.setHtmlSafe(boolean);\n            boolean boolean = writer.getSerializeNulls();\n            writer.setSerializeNulls(boolean);\n            try {\n                ((com.google.gson.TypeAdapter<java.lang.Object>)(adapter)).write(writer, src);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            } finally {\n                writer.setLenient(oldLenient);\n                writer.setHtmlSafe(oldHtmlSafe);\n                writer.setSerializeNulls(oldSerializeNulls);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268864468/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.JsonArray:58","type":"CtBinaryOperatorImpl","sourcecode":"element == null"},"failures":[7,28,378,379,50,87,92,93,113,116,121,130,131,132,133,134,135,136,137,138,139,140,141,380,197,198,199,343,344,345,346,209,227,231,234,236,237,239,244,256,293,297,304,305,381,382,383,318,384,385,386,387,388,389,390,391,392],"tindex":"ec64dcf0-3e8e-11e6-b19d-a773dc923935","method":{"position":"com.google.gson.internal.Streams:67","type":"CtMethodImpl","sourcecode":"public static void write(com.google.gson.JsonElement element, com.google.gson.stream.JsonWriter writer) throws java.io.IOException {\n    if (element == null) {\n        {\n            com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<com.google.gson.JsonElement>.write(writer, element);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268864468/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:497","type":"CtBinaryOperatorImpl","sourcecode":"(typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)"},"failures":[87,92,93,113,116,121],"tindex":"ec650401-3e8e-11e6-b19d-79c069cc6384","method":{"position":"com.google.gson.TreeTypeAdapter:84","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newFactory(com.google.gson.reflect.TypeToken<?> exactType, java.lang.Object typeAdapter) {\n    if ((typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268864468/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , exactType , false , null);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[],"tindex":"ec650402-3e8e-11e6-b19d-ab4ac6200306","method":{"position":"com.google.gson.Gson:468","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src) {\n    if (src != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268864468/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src != null) {\n                {\n                    if (src == null) {\n                        return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n                    } \n                    return toJsonTree(src, src.getClass());\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268864468/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:537","type":"CtFieldReadImpl","sourcecode":"lenient"},"failures":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,332,31,32,33,378,379,34,35,36,37,38,39,40,41,42,44,45,46,47,48,49,393,50,333,394,334,335,336,51,52,53,337,338,54,55,339,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,370,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,395,122,123,124,396,397,398,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,380,149,399,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,343,344,400,345,346,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,349,350,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,401,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,402,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,355,403,404,315,405,406,407,408,409,410,411,316,317,318,319,320,321,322,384,385,412,413],"tindex":"ec650403-3e8e-11e6-b19d-5d79b9fe67d7","method":{"position":"com.google.gson.stream.JsonWriter:234","type":"CtMethodImpl","sourcecode":"public final void setLenient(boolean lenient) {\n    if (lenient) {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = lenient;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268864468/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"lenient"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"ec652b14-3e8e-11e6-b19d-b5df6097ffac","method":{"position":"com.google.gson.Gson:695","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.lang.String json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268864468/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (json == null) {\n                {\n                    java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n                    return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268864468/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1413","type":"CtVariableReadImpl","sourcecode":"throwOnEof"},"failures":[],"tindex":"ec652b15-3e8e-11e6-b19d-01bdab4435a7","method":{"position":"com.google.gson.stream.JsonReader:1331","type":"CtMethodImpl","sourcecode":"private int nextNonWhitespace(boolean throwOnEof) throws java.io.IOException {\n    if (throwOnEof) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268864468/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            char[] char[] = com.google.gson.stream.JsonReader.this.char[];\n            int int = int;\n            int int = int;\n            while (true) {\n                if (p == l) {\n                    int = p;\n                    if (!(fillBuffer(1))) {\n                        break;\n                    } \n                    p = int;\n                    l = int;\n                } \n                int int = buffer[(p++)];\n                if (c == '\\n') {\n                    (int)++;\n                    int = p;\n                    continue;\n                } else if (((c == ' ') || (c == '\\r')) || (c == '\\t')) {\n                    continue;\n                } \n                if (c == '/') {\n                    int = p;\n                    if (p == l) {\n                        (int)--;\n                        boolean boolean = fillBuffer(2);\n                        (int)++;\n                        if (!charsLoaded) {\n                            return c;\n                        } \n                    } \n                    checkLenient();\n                    char char = buffer[int];\n                    switch (peek) {\n                        case '*' :\n                            (int)++;\n                            if (!(skipTo(\"*/\"))) {\n                                throw syntaxError(\"Unterminated comment\");\n                            } \n                            p = (int) + 2;\n                            l = int;\n                            continue;\n                        case '/' :\n                            (int)++;\n                            skipToEndOfLine();\n                            p = int;\n                            l = int;\n                            continue;\n                        default :\n                            return c;\n                    }\n                } else if (c == '#') {\n                    int = p;\n                    checkLenient();\n                    skipToEndOfLine();\n                    p = int;\n                    l = int;\n                } else {\n                    int = p;\n                    return c;\n                }\n            }\n            if (throwOnEof) {\n                throw new java.io.EOFException(((((\"End of input\" + \" at line \") + (getLineNumber())) + \" column \") + (getColumnNumber())));\n            } else {\n                return -1;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"throwOnEof":"throwOnEof"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"ec655226-3e8e-11e6-b19d-915143ea9d2e","method":{"position":"com.google.gson.Gson:133","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src) {\n    if (src == null) {\n        {\n            return toJsonTree(src);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268864468/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:120","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonNull"},"failures":[],"tindex":"ec655227-3e8e-11e6-b19d-4350f14649a9","method":{"position":"com.google.gson.reflect.TypeToken:283","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic final boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonNull) {\n        {\n            return (o instanceof com.google.gson.reflect.TypeToken<?>) && (com.google.gson.internal.$Gson$Types.equals(java.lang.reflect.Type, ((com.google.gson.reflect.TypeToken<?>)(o)).java.lang.reflect.Type));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268864468/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:274","type":"CtBinaryOperatorImpl","sourcecode":"target instanceof java.lang.String"},"failures":[],"tindex":"ec655228-3e8e-11e6-b19d-bd4967319388","method":{"position":"com.google.gson.JsonPrimitive:273","type":"CtMethodImpl","sourcecode":"private static boolean isPrimitiveOrString(java.lang.Object target) {\n    if (target instanceof java.lang.String) {\n        {\n            if (target instanceof java.lang.String) {\n                return true;\n            } \n            java.lang.Class<?> java.lang.Class<?> = target.getClass();\n            for (java.lang.Class<?> java.lang.Class<?> : com.google.gson.JsonPrimitive.com.google.gson.JsonPrimitive.java.lang.Class<?>[]) {\n                if (standardPrimitive.isAssignableFrom(classOfPrimitive)) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268864468/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"target":"target"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"ec655229-3e8e-11e6-b19d-ed626bd300da","method":{"position":"com.google.gson.Gson:510","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268864468/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src == null) {\n                return toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull);\n            } \n            return toJson(src, src.getClass());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:120","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonNull"},"failures":[],"tindex":"ec65793a-3e8e-11e6-b19d-f909dbeaa13e","method":{"position":"com.google.gson.internal.LinkedTreeMap:605","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonNull) {\n        {\n            return containsKey(o);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268864468/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":34,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":352,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":115,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":413,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":99,"com.google.gson.stream.JsonWriterTest.testRepeatedName":410,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":229,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":290,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":321,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":268,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":75,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":227,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":129,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":136,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":267,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":18,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":179,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":305,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":254,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":359,"com.google.gson.functional.ObjectTest.testSingletonLists":43,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":19,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":72,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":116,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":416,"com.google.gson.stream.JsonWriterTest.testStrings":192,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":54,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":276,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":17,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":369,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":20,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":210,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":308,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":30,"com.google.gson.functional.EnumTest.testEnumCaseMapping":178,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":114,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":189,"com.google.gson.functional.JsonTreeTest.testToJsonTree":302,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":212,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":242,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":62,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":259,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":395,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":198,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":133,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":36,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":274,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":389,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":420,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":28,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":347,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":281,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":196,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":382,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":82,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":112,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":396,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":50,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":158,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":322,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":106,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":164,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":436,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":247,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":98,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":215,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":280,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":153,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":194,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":271,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":235,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":262,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":0,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":253,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":74,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":70,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":244,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":220,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":265,"com.google.gson.functional.CollectionTest.testSetDeserialization":327,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":306,"com.google.gson.functional.EnumTest.testEnumSet":172,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":273,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":13,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":7,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":88,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":48,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":181,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":203,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":246,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":25,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":55,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":168,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":102,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":169,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":342,"com.google.gson.functional.MapTest.testMapSerialization":384,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":170,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":334,"com.google.gson.functional.MapTest.testSerializeMaps":87,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":332,"com.google.gson.functional.MapTest.testComplexKeysSerialization":97,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":435,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":219,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":38,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":367,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":365,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":318,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":425,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":84,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":231,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":283,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":393,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":385,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":144,"com.google.gson.functional.PrettyPrintingTest.testMap":383,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":386,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":59,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":354,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":195,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":397,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":120,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":67,"com.google.gson.functional.CollectionTest.testQueueSerialization":131,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":381,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnValue":190,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnName":415,"com.google.gson.functional.MapTest.testMapOfMapSerialization":92,"com.google.gson.stream.JsonWriterTest.testNameWithoutValue":407,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":127,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":421,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":117,"com.google.gson.functional.FieldNamingTest.testIdentity":333,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":22,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":284,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":199,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":208,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":301,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":429,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":431,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":118,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":380,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":309,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":184,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":68,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":126,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":428,"com.google.gson.functional.MapTest.testMapSubclassSerialization":86,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":107,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":258,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":146,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":186,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":323,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":291,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":252,"com.google.gson.functional.EnumTest.testEnumSubclass":175,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":275,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":344,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":8,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":314,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":101,"com.google.gson.stream.JsonWriterTest.testTwoNames":406,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":310,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":237,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":183,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":234,"com.google.gson.stream.JsonWriterTest.testObjectsInArrays":411,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":78,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":266,"com.google.gson.MixedStreamTest.testWriteNulls":432,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":217,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":157,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":37,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":251,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":9,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":44,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":362,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":338,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":341,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":119,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":402,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":303,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":257,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":80,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":224,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":140,"com.google.gson.JsonParserTest.testParseMixedArray":434,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":166,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":148,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":125,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":71,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":69,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":213,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":392,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":188,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":358,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":3,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":89,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":361,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":171,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":319,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":83,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":293,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":285,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":103,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":147,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":238,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":63,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":256,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":100,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":317,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":307,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":401,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":81,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":405,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":32,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":223,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":295,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":329,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":174,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":326,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":320,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":138,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":225,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":324,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":438,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":366,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":378,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":417,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":15,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":233,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":51,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":241,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":248,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":56,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":368,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":419,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":348,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":243,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":249,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":288,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":270,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":177,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":104,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":139,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":134,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":294,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":142,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":357,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":363,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":400,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":163,"com.google.gson.stream.JsonWriterTest.testNullStringValue":408,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":364,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":200,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":150,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":173,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":360,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":356,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":335,"com.google.gson.functional.MapTest.testGeneralMapField":95,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":269,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":214,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":143,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":161,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":345,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":76,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":403,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":57,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":111,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":165,"com.google.gson.MixedStreamTest.testReadMixedStreamed":377,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":222,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":137,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":182,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":343,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":261,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":31,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":245,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":297,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":128,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":10,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":226,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":34,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":371,"com.google.gson.stream.JsonWriterTest.testArraysInObjects":409,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":418,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":399,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":23,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":11,"com.google.gson.functional.ObjectTest.testNestedDeserialization":289,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":21,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":278,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":353,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":236,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":29,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":337,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":230,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":202,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":312,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":325,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":351,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":388,"com.google.gson.functional.ObjectTest.testNullSerialization":424,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":313,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":94,"com.google.gson.functional.MapTest.testInterfaceTypeMap":93,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":145,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":2,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":14,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":176,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":316,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":58,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":27,"com.google.gson.MixedStreamTest.testWriteClosed":376,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":132,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":355,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":45,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":240,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":204,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":1,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":340,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":52,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":149,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":299,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":4,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":46,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":387,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":372,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":374,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":315,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":135,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":73,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":123,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":167,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":300,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":39,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":154,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":339,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":79,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":373,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":90,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":282,"com.google.gson.stream.JsonWriterTest.testDeepNestingObjects":414,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":66,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":113,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":287,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":130,"com.google.gson.functional.MapTest.testRawMapSerialization":96,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":185,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":16,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":209,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":311,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":336,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":430,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":53,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":156,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":41,"com.google.gson.ObjectTypeAdapterTest.testSerialize":379,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":109,"com.google.gson.JsonPrimitiveTest.testEqualsIntegerAndBigInteger":433,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":349,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":160,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":330,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":205,"com.google.gson.functional.MapTest.testMapWithQuotes":91,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":60,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":6,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":422,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":24,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":427,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":304,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":201,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":286,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":85,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":64,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":162,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":272,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":298,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":61,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":65,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":180,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":350,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":426,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":12,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":77,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":155,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":105,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":263,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":108,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":391,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":206,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":394,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":277,"com.google.gson.functional.ObjectTest.testNestedSerialization":49,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":151,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":110,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":221,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":33,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":404,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":141,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":5,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":187,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":197,"com.google.gson.stream.JsonWriterTest.testUnicodeLineBreaksEscaped":193,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":47,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":239,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":260,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":296,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":228,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":279,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":292,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":370,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":207,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":121,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":159,"com.google.gson.functional.CollectionTest.testSetSerialization":328,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":346,"com.google.gson.functional.StringTest.testStringValueSerialization":122,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":211,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":250,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":40,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":124,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":232,"com.google.gson.MixedStreamTest.testWriteInvalidState":375,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":423,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":218,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":152,"com.google.gson.stream.JsonWriterTest.testWrongTopLevelType":191,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":398,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":331,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":35,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":264,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":26,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":437,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":255,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":42,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":412,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":216,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":390},"transformations":[{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197],"tindex":"f02d0250-3e3c-11e6-b68e-6d7c588849c6","method":{"position":"com.google.gson.stream.JsonWriter:413","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            writeDeferredName();\n            beforeValue(false);\n            string(value);\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603850/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[198],"tindex":"f02efe21-3e3c-11e6-b68e-4be074b9eb6c","method":{"position":"com.google.gson.Gson:468","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603850/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src == null) {\n                return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            return toJsonTree(src, src.getClass());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:85","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[199,200,201,202,203,204,205,206,207,20,33,40,208,44,47,48,209,210,84,211,212,213,87,95,111,119,123,124,125,126,127,154,155,214,215,156,157,216,158,159,217,160,161,218,162,219,220,221,222,223,224,225,226,227,171,189,228],"tindex":"f02f2532-3e3c-11e6-b68e-e55f9a80b011","method":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:84","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Object array) throws java.io.IOException {\n    if (array == null) {\n        {\n            if (array == null) {\n                out.nullValue();\n                return ;\n            } \n            out.beginArray();\n            for (int int = 0, int int = java.lang.reflect.Array.getLength(array) ; i < length ; i++) {\n                E E = ((E)(java.lang.reflect.Array.get(array, i)));\n                com.google.gson.TypeAdapter<E>.write(out, value);\n            }\n            out.endArray();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603850/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:92","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof java.util.Iterator"},"failures":[],"tindex":"f02f2533-3e3c-11e6-b68e-1980bb6e7fc8","method":{"position":"com.google.gson.internal.LinkedTreeMap:605","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof java.util.Iterator) {\n        {\n            return containsKey(o);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603850/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:127","type":"CtInvocationImpl","sourcecode":"raw.isInterface()"},"failures":[229,230,231,232,233,234,199,235,236,237,238,0,1,2,200,239,240,241,3,4,242,5,243,244,245,246,247,248,8,249,250,201,251,202,252,203,253,13,254,204,205,255,256,257,258,259,260,261,19,262,20,22,23,263,264,24,34,35,36,37,38,265,39,40,208,43,266,267,44,268,269,45,270,271,46,272,273,274,47,275,276,48,277,209,49,278,279,280,281,282,283,50,284,285,51,286,52,287,288,289,290,291,54,55,292,293,294,295,296,297,298,299,300,83,301,302,303,304,305,306,307,84,85,90,308,93,94,95,97,99,100,309,310,101,102,311,103,312,104,105,313,314,315,106,316,317,318,319,320,107,108,321,322,323,324,325,109,112,113,123,124,125,126,127,129,326,134,327,136,328,329,330,331,332,333,334,140,335,141,336,146,148,149,337,338,339,340,150,151,152,153,161,341,218,342,343,163,164,344,345,346,220,347,348,227,349,350,351,169,352,170,353,354,355,356,357,358,359,360,361,362,363,364,365,366,176,367,368,369,370,180,371,372,373,374,181,183,184,185,186,375,376,377,378,194,379],"tindex":"f02f4c44-3e3c-11e6-b68e-abc59cec655b","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:125","type":"CtMethodImpl","sourcecode":"private java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> getBoundFields(com.google.gson.Gson context, com.google.gson.reflect.TypeToken<?> type, java.lang.Class<?> raw) {\n    if (raw.isInterface()) {\n        {\n            if (raw.isInterface()) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603850/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (raw.isInterface()) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603850/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            if (raw.isInterface()) {\n                                {\n                                    java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> = new java.util.LinkedHashMap<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField>();\n                                    if (raw.isInterface()) {\n                                        return result;\n                                    } \n                                    java.lang.reflect.Type java.lang.reflect.Type = type.getType();\n                                    while (raw != (java.lang.Object.java.lang.Object.java.lang.Class)) {\n                                        java.lang.reflect.Field[] java.lang.reflect.Field[] = raw.getDeclaredFields();\n                                        for (java.lang.reflect.Field java.lang.reflect.Field : fields) {\n                                            boolean boolean = excludeField(field, true);\n                                            boolean boolean = excludeField(field, false);\n                                            if ((!serialize) && (!deserialize)) {\n                                                continue;\n                                            } \n                                            field.setAccessible(true);\n                                            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, field.getGenericType());\n                                            com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = createBoundField(context, field, getFieldName(field), com.google.gson.reflect.TypeToken.get(fieldType), serialize, deserialize);\n                                            com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = result.put(boundField.java.lang.String, boundField);\n                                            if (previous != null) {\n                                                throw new java.lang.IllegalArgumentException(((declaredType + \" declares multiple JSON fields named \") + (previous.java.lang.String)));\n                                            } \n                                        }\n                                        type = com.google.gson.reflect.TypeToken.get(com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, raw.getGenericSuperclass()));\n                                        raw = type.getRawType();\n                                    }\n                                    return result;\n                                }\n                            } else {\n                                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603850/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                throw new java.lang.RuntimeException();\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603850/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"raw"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:127","type":"CtInvocationImpl","sourcecode":"raw.isInterface()"},"failures":[],"tindex":"f02f7355-3e3c-11e6-b68e-c19344e30a3c","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:125","type":"CtMethodImpl","sourcecode":"private java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> getBoundFields(com.google.gson.Gson context, com.google.gson.reflect.TypeToken<?> type, java.lang.Class<?> raw) {\n    if (raw.isInterface()) {\n        {\n            if (raw.isInterface()) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603850/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (raw.isInterface()) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603850/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            if (raw.isInterface()) {\n                                {\n                                    java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> = new java.util.LinkedHashMap<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField>();\n                                    if (raw.isInterface()) {\n                                        return result;\n                                    } \n                                    java.lang.reflect.Type java.lang.reflect.Type = type.getType();\n                                    while (raw != (java.lang.Object.java.lang.Object.java.lang.Class)) {\n                                        java.lang.reflect.Field[] java.lang.reflect.Field[] = raw.getDeclaredFields();\n                                        for (java.lang.reflect.Field java.lang.reflect.Field : fields) {\n                                            boolean boolean = excludeField(field, true);\n                                            boolean boolean = excludeField(field, false);\n                                            if ((!serialize) && (!deserialize)) {\n                                                continue;\n                                            } \n                                            field.setAccessible(true);\n                                            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, field.getGenericType());\n                                            com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = createBoundField(context, field, getFieldName(field), com.google.gson.reflect.TypeToken.get(fieldType), serialize, deserialize);\n                                            com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = result.put(boundField.java.lang.String, boundField);\n                                            if (previous != null) {\n                                                throw new java.lang.IllegalArgumentException(((declaredType + \" declares multiple JSON fields named \") + (previous.java.lang.String)));\n                                            } \n                                        }\n                                        type = com.google.gson.reflect.TypeToken.get(com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, raw.getGenericSuperclass()));\n                                        raw = type.getRawType();\n                                    }\n                                    return result;\n                                }\n                            } else {\n                                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603850/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                throw new java.lang.RuntimeException();\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603850/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"raw"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[12,380],"tindex":"f02f9a66-3e3c-11e6-b68e-2b52ca963bef","method":{"position":"com.google.gson.Gson:133","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src) {\n    if (src == null) {\n        {\n            if (src == null) {\n                {\n                    return toJsonTree(src);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603850/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603850/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[381],"tindex":"f02f9a67-3e3c-11e6-b68e-e76af67a7f45","method":{"position":"com.google.gson.JsonObject:100","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Boolean value) {\n    if (property == null) {\n        {\n            add(property, createJsonElement(value));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603850/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[],"tindex":"f02fc178-3e3c-11e6-b68e-0ff75c4a40c4","method":{"position":"com.google.gson.Gson:491","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src != null) {\n        {\n            com.google.gson.internal.bind.JsonTreeWriter com.google.gson.internal.bind.JsonTreeWriter = new com.google.gson.internal.bind.JsonTreeWriter();\n            toJson(src, typeOfSrc, writer);\n            return writer.get();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603850/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"f02fc179-3e3c-11e6-b68e-73019a1cc05d","method":{"position":"com.google.gson.internal.bind.DateTypeAdapter:69","type":"CtMethodImpl","sourcecode":"private synchronized java.util.Date deserializeToDate(java.lang.String json) {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603850/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            try {\n                return java.text.DateFormat.parse(json);\n            } catch (java.text.ParseException ignored) {\n            }\n            try {\n                return java.text.DateFormat.parse(json);\n            } catch (java.text.ParseException ignored) {\n            }\n            try {\n                return java.text.DateFormat.parse(json);\n            } catch (java.text.ParseException e) {\n                throw new com.google.gson.JsonSyntaxException(json , e);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"f02fc17a-3e3c-11e6-b68e-c17604eef6c5","method":{"position":"com.google.gson.Gson:552","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603850/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            if (src == null) {\n                {\n                    if (src != null) {\n                        toJson(src, src.getClass(), writer);\n                    } else {\n                        toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull, writer);\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603850/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:109","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonPrimitive"},"failures":[],"tindex":"f02fe88b-3e3c-11e6-b68e-b7ba65888ee9","method":{"position":"com.google.gson.internal.LinkedTreeMap:574","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonPrimitive) {\n        {\n            if (!(o instanceof java.util.Map.Entry)) {\n                return false;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n            if (node == null) {\n                return false;\n            } \n            removeInternal(node, true);\n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603850/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[231,199,1,3,5,249,250,201,12,202,252,203,253,13,204,205,255,257,259,16,19,22,23,24,34,40,44,273,47,48,49,50,285,52,54,55,300,83,301,302,303,382,304,305,306,210,383,307,84,211,212,213,85,87,384,95,96,385,100,101,313,317,107,108,109,112,113,129,386,387,134,136,328,388,329,330,331,332,333,337,338,340,155,216,217,160,161,219,342,163,164,168,389,224,169,352,170,368,180,371,374,185,186,194,379],"tindex":"f02fe88c-3e3c-11e6-b68e-ef72e16121ed","method":{"position":"com.google.gson.internal.bind.TypeAdapters:245","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603850/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:118","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.Class<?>"},"failures":[390,12,254,256,391,392,138],"tindex":"f02fe88d-3e3c-11e6-b68e-d928b8721c94","method":{"position":"com.google.gson.GsonBuilder:447","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\npublic com.google.gson.GsonBuilder registerTypeAdapter(java.lang.reflect.Type type, java.lang.Object typeAdapter) {\n    if (type instanceof java.lang.Class<?>) {\n        {\n            com.google.gson.internal.$Gson$Preconditions.checkArgument(((((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) || (typeAdapter instanceof com.google.gson.InstanceCreator<?>)) || (typeAdapter instanceof com.google.gson.TypeAdapter<?>)));\n            if (typeAdapter instanceof com.google.gson.InstanceCreator<?>) {\n                java.util.Map<java.lang.reflect.Type, com.google.gson.InstanceCreator<?>>.put(type, ((com.google.gson.InstanceCreator)(typeAdapter)));\n            } \n            if ((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) {\n                com.google.gson.reflect.TypeToken<?> com.google.gson.reflect.TypeToken<?> = com.google.gson.reflect.TypeToken.get(type);\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.TreeTypeAdapter.newFactoryWithMatchRawType(typeToken, typeAdapter));\n            } \n            if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.internal.bind.TypeAdapters.newFactory(com.google.gson.reflect.TypeToken.get(type), ((com.google.gson.TypeAdapter)(typeAdapter))));\n            } \n            return com.google.gson.GsonBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603850/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"f0300f9e-3e3c-11e6-b68e-efc0997b075e","method":{"position":"com.google.gson.Gson:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603850/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603850/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    out.value(value.toString());\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[295,363],"tindex":"f0300f9f-3e3c-11e6-b68e-aff7e02c13d9","method":{"position":"com.google.gson.internal.bind.TypeAdapters:267","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603850/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"f0300fa0-3e3c-11e6-b68e-5f1ceac8e56d","method":{"position":"com.google.gson.Gson:133","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src) {\n    if (src == null) {\n        {\n            if (src == null) {\n                {\n                    return toJsonTree(src);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603850/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603850/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[229,231,199,235,0,1,2,3,4,5,8,393,249,250,9,394,11,201,12,202,252,203,253,13,204,205,255,257,259,14,15,16,395,396,397,17,19,20,22,23,263,24,34,35,36,37,38,39,40,41,42,208,43,44,45,46,273,47,48,209,49,280,50,285,51,52,54,55,398,399,297,400,74,298,299,83,303,304,305,306,383,307,84,85,86,87,88,89,90,91,92,384,401,402,93,403,94,95,404,96,97,98,385,99,100,101,102,311,103,104,105,313,106,317,320,107,108,109,112,113,123,124,125,126,127,129,326,134,136,328,329,330,331,332,333,140,141,142,146,148,149,337,338,150,151,152,153,161,342,163,164,344,220,347,169,170,354,357,360,361,363,405,364,365,176,368,180,371,374,181,183,184,185,186,406,407,408,409,410,411,412,413,414,415,194,379,416,417,418,419,196,420],"tindex":"f0300fa1-3e3c-11e6-b68e-6b0135e91f34","method":{"position":"com.google.gson.stream.JsonWriter:385","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter name(java.lang.String name) throws java.io.IOException {\n    if (name == null) {\n        {\n            if (name == null) {\n                throw new java.lang.NullPointerException(\"name == null\");\n            } \n            if ((java.lang.String) != null) {\n                throw new java.lang.IllegalStateException();\n            } \n            if ((int) == 0) {\n                throw new java.lang.IllegalStateException(\"JsonWriter is closed.\");\n            } \n            java.lang.String = name;\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603850/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"f03035b2-3e3c-11e6-b68e-2fe1a138deb3","method":{"position":"com.google.gson.Gson:695","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.lang.String json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603850/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.TreeTypeAdapter:55","type":"CtInvocationImpl","sourcecode":"value.isJsonNull()"},"failures":[5,6,7,8,393,249,250,9,10,394,421,422,11,12,20,21,25,27,28,30,41,42,423,424,425,426,57,427,60,61,62,398,75,77,81,428,83,392,99,138,145,342,163,164,227,349,429,350,351,405,430,174,431,432,433,188,434,435,436,437,417,418,438,419,196,420],"tindex":"f03035b3-3e3c-11e6-b68e-49d3c6352177","method":{"position":"com.google.gson.internal.bind.TypeAdapters:680","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, com.google.gson.JsonElement value) throws java.io.IOException {\n    if (value.isJsonNull()) {\n        {\n            if ((value == null) || (value.isJsonNull())) {\n                out.nullValue();\n            } else if (value.isJsonPrimitive()) {\n                com.google.gson.JsonPrimitive com.google.gson.JsonPrimitive = value.getAsJsonPrimitive();\n                if (primitive.isNumber()) {\n                    out.value(primitive.getAsNumber());\n                } else if (primitive.isBoolean()) {\n                    out.value(primitive.getAsBoolean());\n                } else {\n                    out.value(primitive.getAsString());\n                }\n            } else if (value.isJsonArray()) {\n                out.beginArray();\n                for (com.google.gson.JsonElement com.google.gson.JsonElement : value.getAsJsonArray()) {\n                    write(out, e);\n                }\n                out.endArray();\n            } else if (value.isJsonObject()) {\n                out.beginObject();\n                for (java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> : value.getAsJsonObject().entrySet()) {\n                    out.name(e.getKey());\n                    write(out, e.getValue());\n                }\n                out.endObject();\n            } else {\n                throw new java.lang.IllegalArgumentException((\"Couldn't write \" + (value.getClass())));\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603850/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[236,237,238,0,2,200,239,4,242,295,301,90,93,94,99,124,133,159,162,357,171,360,361,430,365],"tindex":"f03035b4-3e3c-11e6-b68e-c38f76334797","method":{"position":"com.google.gson.internal.bind.TypeAdapters:361","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603850/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[],"tindex":"f0305cc5-3e3c-11e6-b68e-e104aaf45b59","method":{"position":"com.google.gson.Gson:576","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        {\n            if (src != null) {\n                {\n                    try {\n                        com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                        toJson(src, typeOfSrc, jsonWriter);\n                    } catch (java.io.IOException e) {\n                        throw new com.google.gson.JsonIOException(e);\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603850/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603850/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:109","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonPrimitive"},"failures":[],"tindex":"f0305cc6-3e3c-11e6-b68e-d1e14b8893a5","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:808","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonPrimitive) {\n        {\n            if (!(o instanceof java.util.Map.Entry)) {\n                return false;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n            if (node == null) {\n                return false;\n            } \n            removeInternal(node, true);\n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603850/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[],"tindex":"f0305cc7-3e3c-11e6-b68e-e9d6ea44edfc","method":{"position":"com.google.gson.Gson:552","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603850/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            if (src == null) {\n                {\n                    if (src != null) {\n                        toJson(src, src.getClass(), writer);\n                    } else {\n                        toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull, writer);\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603850/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:127","type":"CtInvocationImpl","sourcecode":"raw.isInterface()"},"failures":[],"tindex":"f0305cc8-3e3c-11e6-b68e-0dcd57ac446d","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:125","type":"CtMethodImpl","sourcecode":"private java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> getBoundFields(com.google.gson.Gson context, com.google.gson.reflect.TypeToken<?> type, java.lang.Class<?> raw) {\n    if (raw.isInterface()) {\n        {\n            if (raw.isInterface()) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603850/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (raw.isInterface()) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603850/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            if (raw.isInterface()) {\n                                {\n                                    java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> = new java.util.LinkedHashMap<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField>();\n                                    if (raw.isInterface()) {\n                                        return result;\n                                    } \n                                    java.lang.reflect.Type java.lang.reflect.Type = type.getType();\n                                    while (raw != (java.lang.Object.java.lang.Object.java.lang.Class)) {\n                                        java.lang.reflect.Field[] java.lang.reflect.Field[] = raw.getDeclaredFields();\n                                        for (java.lang.reflect.Field java.lang.reflect.Field : fields) {\n                                            boolean boolean = excludeField(field, true);\n                                            boolean boolean = excludeField(field, false);\n                                            if ((!serialize) && (!deserialize)) {\n                                                continue;\n                                            } \n                                            field.setAccessible(true);\n                                            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, field.getGenericType());\n                                            com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = createBoundField(context, field, getFieldName(field), com.google.gson.reflect.TypeToken.get(fieldType), serialize, deserialize);\n                                            com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = result.put(boundField.java.lang.String, boundField);\n                                            if (previous != null) {\n                                                throw new java.lang.IllegalArgumentException(((declaredType + \" declares multiple JSON fields named \") + (previous.java.lang.String)));\n                                            } \n                                        }\n                                        type = com.google.gson.reflect.TypeToken.get(com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, raw.getGenericSuperclass()));\n                                        raw = type.getRawType();\n                                    }\n                                    return result;\n                                }\n                            } else {\n                                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603850/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                throw new java.lang.RuntimeException();\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603850/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"raw"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"f03083d9-3e3c-11e6-b68e-db75c64b04be","method":{"position":"com.google.gson.Gson:576","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        {\n            if (src != null) {\n                {\n                    try {\n                        com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                        toJson(src, typeOfSrc, jsonWriter);\n                    } catch (java.io.IOException e) {\n                        throw new com.google.gson.JsonIOException(e);\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603850/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603850/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:115","type":"CtInvocationImpl","sourcecode":"primitive.isNumber()"},"failures":[],"tindex":"f03083da-3e3c-11e6-b68e-c754094eba17","method":{"position":"com.google.gson.JsonPrimitive:93","type":"CtMethodImpl","sourcecode":"void setValue(java.lang.Object primitive) {\n    if (primitive.isNumber()) {\n        {\n            if (primitive instanceof java.lang.Character) {\n                char char = ((java.lang.Character)(primitive)).charValue();\n                com.google.gson.JsonPrimitive.this.java.lang.Object = java.lang.String.valueOf(c);\n            } else {\n                com.google.gson.internal.$Gson$Preconditions.checkArgument(((primitive instanceof java.lang.Number) || (com.google.gson.JsonPrimitive.isPrimitiveOrString(primitive))));\n                com.google.gson.JsonPrimitive.this.java.lang.Object = primitive;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603850/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"primitive"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:98","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.ParameterizedType"},"failures":[229,231,232,234,199,235,237,1,200,240,241,3,242,244,247,8,24,35,36,37,38,265,39,272,273,285,51,292,293,295,296,297,299,83,303,304,305,306,308,97,102,311,103,312,104,105,313,314,315,318,319,123,124,125,126,127,129,327,328,336,146,148,149,337,338,339,340,150,151,152,153,165,227,349,350,351,379],"tindex":"f030aaeb-3e3c-11e6-b68e-d9423d017976","method":{"position":"com.google.gson.internal.ConstructorConstructor:200","type":"CtMethodImpl","sourcecode":"private <T>com.google.gson.internal.ObjectConstructor<T> newUnsafeAllocator(final java.lang.reflect.Type type, final java.lang.Class<? super T> rawType) {\n    if (type instanceof java.lang.reflect.ParameterizedType) {\n        {\n            return new com.google.gson.internal.ObjectConstructor<T>() {\n                private final com.google.gson.internal.UnsafeAllocator unsafeAllocator = com.google.gson.internal.UnsafeAllocator.create();\n\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                public T construct() {\n                    try {\n                        java.lang.Object java.lang.Object = com.google.gson.internal.UnsafeAllocator.newInstance(rawType);\n                        return ((T)(newInstance));\n                    } catch (java.lang.Exception e) {\n                        throw new java.lang.RuntimeException((((\"Unable to invoke no-args constructor for \" + type) + \". \") + \"Register an InstanceCreator with Gson for this type may fix this problem.\") , e);\n                    }\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603850/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:127","type":"CtInvocationImpl","sourcecode":"raw.isInterface()"},"failures":[],"tindex":"f030f90c-3e3c-11e6-b68e-e37a2491d238","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:125","type":"CtMethodImpl","sourcecode":"private java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> getBoundFields(com.google.gson.Gson context, com.google.gson.reflect.TypeToken<?> type, java.lang.Class<?> raw) {\n    if (raw.isInterface()) {\n        {\n            if (raw.isInterface()) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603850/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (raw.isInterface()) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603850/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            if (raw.isInterface()) {\n                                {\n                                    java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> = new java.util.LinkedHashMap<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField>();\n                                    if (raw.isInterface()) {\n                                        return result;\n                                    } \n                                    java.lang.reflect.Type java.lang.reflect.Type = type.getType();\n                                    while (raw != (java.lang.Object.java.lang.Object.java.lang.Class)) {\n                                        java.lang.reflect.Field[] java.lang.reflect.Field[] = raw.getDeclaredFields();\n                                        for (java.lang.reflect.Field java.lang.reflect.Field : fields) {\n                                            boolean boolean = excludeField(field, true);\n                                            boolean boolean = excludeField(field, false);\n                                            if ((!serialize) && (!deserialize)) {\n                                                continue;\n                                            } \n                                            field.setAccessible(true);\n                                            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, field.getGenericType());\n                                            com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = createBoundField(context, field, getFieldName(field), com.google.gson.reflect.TypeToken.get(fieldType), serialize, deserialize);\n                                            com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = result.put(boundField.java.lang.String, boundField);\n                                            if (previous != null) {\n                                                throw new java.lang.IllegalArgumentException(((declaredType + \" declares multiple JSON fields named \") + (previous.java.lang.String)));\n                                            } \n                                        }\n                                        type = com.google.gson.reflect.TypeToken.get(com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, raw.getGenericSuperclass()));\n                                        raw = type.getRawType();\n                                    }\n                                    return result;\n                                }\n                            } else {\n                                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603850/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                throw new java.lang.RuntimeException();\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603850/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"raw"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:622","type":"CtBinaryOperatorImpl","sourcecode":"(c == 'n') || (c == 'N')"},"failures":[],"tindex":"f031201d-3e3c-11e6-b68e-1beee6ce1826","method":{"position":"com.google.gson.stream.JsonReader:755","type":"CtMethodImpl","sourcecode":"private boolean isLiteral(char c) throws java.io.IOException {\n    if ((c == 'n') || (c == 'N')) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603850/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            switch (c) {\n                case '/' :\n                case '\\\\' :\n                case ';' :\n                case '#' :\n                case '=' :\n                    checkLenient();\n                case '{' :\n                case '}' :\n                case '[' :\n                case ']' :\n                case ':' :\n                case ',' :\n                case ' ' :\n                case '\\t' :\n                case '\\f' :\n                case '\\r' :\n                case '\\n' :\n                    return false;\n                default :\n                    return true;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"c"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"f031201e-3e3c-11e6-b68e-4b26be8b8363","method":{"position":"com.google.gson.Gson:127","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonParseException {\n    if (json == null) {\n        {\n            return ((T)(fromJson(json, typeOfT)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603850/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:233","type":"CtBinaryOperatorImpl","sourcecode":"annotation != null"},"failures":[],"tindex":"f031201f-3e3c-11e6-b68e-61a6deef80b9","method":{"position":"com.google.gson.internal.Excluder:232","type":"CtMethodImpl","sourcecode":"private boolean isValidSince(com.google.gson.annotations.Since annotation) {\n    if (annotation != null) {\n        {\n            if (annotation != null) {\n                double double = annotation.value();\n                if (annotationVersion > (double)) {\n                    return false;\n                } \n            } \n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603850/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"f0312020-3e3c-11e6-b68e-715fee0a11fb","method":{"position":"com.google.gson.Gson:510","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src) {\n    if (src == null) {\n        {\n            if (src == null) {\n                return toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull);\n            } \n            return toJson(src, src.getClass());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603850/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:305","type":"CtBinaryOperatorImpl","sourcecode":"node != null"},"failures":[],"tindex":"f0312021-3e3c-11e6-b68e-11c1985fbd63","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:245","type":"CtMethodImpl","sourcecode":"void removeInternal(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node, boolean unlink) {\n    if (node != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603850/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (unlink) {\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            if ((left != null) && (right != null)) {\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = (left.int) > (right.int) ? left.last() : right.first();\n                removeInternal(adjacent, false);\n                int int = 0;\n                left = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                if (left != null) {\n                    leftHeight = left.int;\n                    adjacent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left;\n                    left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                } \n                int int = 0;\n                right = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                if (right != null) {\n                    rightHeight = right.int;\n                    adjacent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                } \n                adjacent.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                replaceInParent(node, adjacent);\n                return ;\n            } else if (left != null) {\n                replaceInParent(node, left);\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } else if (right != null) {\n                replaceInParent(node, right);\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } else {\n                replaceInParent(node, null);\n            }\n            rebalance(originalParent, false);\n            (int)--;\n            (int)++;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"node"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:106","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonArray"},"failures":[],"tindex":"f0314732-3e3c-11e6-b68e-31311b01e764","method":{"position":"com.google.gson.JsonArray:92","type":"CtMethodImpl","sourcecode":"public boolean remove(com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonArray) {\n        {\n            return java.util.List<com.google.gson.JsonElement>.remove(element);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603850/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"f0316e43-3e3c-11e6-b68e-6f8b4641543f","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:144","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603850/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"f0316e44-3e3c-11e6-b68e-915b3c57d1ec","method":{"position":"com.google.gson.Gson:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603850/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603850/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    out.value(value.toString());\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":37,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":236,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":122,"com.google.gson.functional.StringTest.testStringValueDeserialization":579,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":29,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":551,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":474,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":522,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":2,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":509,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":335,"com.google.gson.MixedStreamTest.testWriteLenient":632,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":293,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":81,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":329,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":173,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":180,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":292,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":557,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":156,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":158,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":266,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":529,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":354,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":600,"com.google.gson.functional.ObjectTest.testSingletonLists":105,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":78,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":159,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":123,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":303,"com.google.gson.stream.JsonWriterTest.testStrings":200,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":285,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":90,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":623,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":481,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":296,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":395,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":559,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":172,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":369,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":586,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":191,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":347,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":552,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":234,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":393,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":512,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":143,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":233,"com.google.gson.functional.EnumTest.testEnumCaseMapping":155,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":13,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":121,"com.google.gson.functional.JsonTreeTest.testToJsonTree":399,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":511,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":351,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":272,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":221,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":68,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":603,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":249,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":304,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":469,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":356,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":177,"com.google.gson.functional.ObjectTest.testNullDeserialization":505,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":93,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":584,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":494,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":406,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":566,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":523,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":498,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":141,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":386,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":298,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":208,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":264,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":88,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":457,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":167,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":569,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":568,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":480,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":315,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":312,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":462,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":572,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":52,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":112,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":269,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":536,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":231,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":549,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":587,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":40,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":468,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":120,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":408,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":275,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":28,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":316,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":338,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":550,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":243,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":502,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":190,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":195,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":490,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":305,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":429,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":448,"com.google.gson.metrics.PerformanceTest.testDummy":415,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":612,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":43,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":599,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":614,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":276,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":273,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":432,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":80,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":226,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":76,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":373,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":385,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":488,"com.google.gson.functional.CollectionTest.testSetDeserialization":620,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":267,"com.google.gson.functional.EnumTest.testEnumSet":149,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":441,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":493,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":542,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":148,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":98,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":18,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":464,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":110,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":6,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":205,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":554,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":375,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":561,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":91,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":138,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":118,"com.google.gson.functional.MapTest.testHashMapDeserialization":418,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":520,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":617,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":270,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":435,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":626,"com.google.gson.MixedStreamTest.testReadNulls":633,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":30,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":36,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":274,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":327,"com.google.gson.functional.MapTest.testSortedMap":427,"com.google.gson.functional.MapTest.testMapSerialization":425,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":31,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":224,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":547,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":251,"com.google.gson.functional.MapTest.testSerializeMaps":17,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":261,"com.google.gson.functional.MapTest.testComplexKeysSerialization":27,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":440,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":407,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":431,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":256,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":95,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":367,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":360,"com.google.gson.internal.LinkedTreeMapTest.testRemoveRootDoesNotDoubleUnlink":209,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":452,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":484,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":605,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":135,"com.google.gson.internal.LinkedHashTreeMapTest.testDoubleCapacity":214,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":444,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":504,"com.google.gson.functional.MapTest.testStringKeyDeserialization":235,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":254,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":279,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":322,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":433,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":526,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":185,"com.google.gson.functional.PrettyPrintingTest.testMap":348,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":521,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":377,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":65,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":437,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":485,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":207,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":255,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":127,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":580,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":73,"com.google.gson.functional.CollectionTest.testQueueSerialization":175,"com.google.gson.functional.MapTest.testMapSerializationEmpty":430,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnValue":198,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":543,"com.google.gson.functional.MapTest.testMapOfMapSerialization":22,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":311,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":471,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":619,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":61,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":313,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":286,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":124,"com.google.gson.functional.FieldNamingTest.testIdentity":262,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":277,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":131,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":299,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":3,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":215,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":290,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":331,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":514,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":394,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":125,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":382,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":288,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":540,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":477,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":12,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":465,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":60,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":74,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":210,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":417,"com.google.gson.functional.MapTest.testMapSubclassSerialization":16,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":321,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":193,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":366,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":442,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":187,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":203,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":534,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":606,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":460,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":577,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":588,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":483,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":363,"com.google.gson.functional.EnumTest.testEnumSubclass":152,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":553,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":295,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":396,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":513,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":381,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":556,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":99,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":450,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":515,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":104,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":538,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":289,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":217,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":11,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":248,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":492,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":544,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":447,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":537,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":84,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":291,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":229,"com.google.gson.MixedStreamTest.testWriteNulls":630,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":247,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":336,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":51,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":94,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":598,"com.google.gson.CommentsTest.testParseComments":635,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":100,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":106,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":593,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":252,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":344,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":555,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":223,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":126,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":426,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":627,"com.google.gson.MixedStreamTest.testReadInvalidState":628,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":263,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":602,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":86,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":320,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":14,"com.google.gson.ObjectTypeAdapterTest.testSerializeObject":397,"com.google.gson.JsonParserTest.testParseMixedArray":404,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":116,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":10,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":257,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":133,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":307,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":59,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":77,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":564,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":246,"com.google.gson.functional.MapTest.testMapDeserialization":422,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":75,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":352,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":228,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":196,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":592,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":19,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":46,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":358,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":137,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":453,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":42,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":604,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":459,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":497,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":506,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":37,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":188,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":218,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":69,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":601,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":103,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":239,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":0,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":349,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":389,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":87,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":510,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":283,"com.google.gson.functional.PrimitiveTest.testShortSerialization":567,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":359,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":558,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":145,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":535,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":317,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":4,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":519,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":258,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":151,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":376,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":387,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":419,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":532,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":182,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":324,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":589,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":412,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":271,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":597,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":391,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":410,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":575,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":571,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":170,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":446,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":113,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":240,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":278,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":62,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":368,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":413,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":563,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":339,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":280,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":539,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":508,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":489,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":154,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":35,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":38,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":178,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":463,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":183,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":281,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":353,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":473,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":594,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":525,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":119,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":466,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":595,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":476,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":219,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":615,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":516,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":318,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":541,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":325,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":162,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":150,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":357,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":439,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":225,"com.google.gson.functional.MapTest.testGeneralMapField":25,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":294,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":242,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":574,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":55,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":184,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":383,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":82,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":428,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":63,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":115,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":166,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":560,"com.google.gson.MixedStreamTest.testReadMixedStreamed":390,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":268,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":308,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":423,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":181,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":206,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":328,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":611,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":545,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":144,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":374,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":472,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":232,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":146,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":230,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":101,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":326,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":161,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":371,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":533,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":411,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":470,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":337,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":132,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":456,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":618,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":596,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":102,"com.google.gson.functional.ObjectTest.testNestedDeserialization":301,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":192,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":500,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":436,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":216,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":142,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":573,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":343,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":424,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":443,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":581,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":362,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":319,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":449,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":333,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":590,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":622,"com.google.gson.functional.ObjectTest.testNullSerialization":495,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":414,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":361,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":420,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":24,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":302,"com.google.gson.functional.MapTest.testInterfaceTypeMap":23,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":250,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":186,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":45,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":517,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":153,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":169,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":238,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":625,"com.google.gson.MixedStreamTest.testReadClosed":629,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":64,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":140,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":527,"com.google.gson.MixedStreamTest.testWriteClosed":634,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":176,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":438,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":107,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":455,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":482,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":364,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":44,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":346,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":114,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":134,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":479,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":47,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":108,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":378,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":607,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":548,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":372,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":451,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":179,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":79,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":340,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":57,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":576,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":117,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":454,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":461,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":48,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":96,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":345,"com.google.gson.functional.CollectionTest.testQueueDeserialization":624,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":310,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":546,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":583,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":434,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":85,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":608,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":20,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":503,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":72,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":168,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":507,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":174,"com.google.gson.functional.MapTest.testRawMapSerialization":26,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":202,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":621,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":475,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":171,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":237,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":297,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":227,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":211,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":388,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":50,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":89,"com.google.gson.functional.PrimitiveTest.testByteSerialization":565,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":33,"com.google.gson.ObjectTypeAdapterTest.testSerialize":398,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":164,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":524,"com.google.gson.JsonPrimitiveTest.testEqualsIntegerAndBigInteger":405,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":330,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":54,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":259,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":7,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":334,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":392,"com.google.gson.functional.MapTest.testMapWithQuotes":21,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":66,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":530,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":582,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":97,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":578,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":287,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":41,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":570,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":400,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":265,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":355,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":5,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":300,"com.google.gson.internal.LinkedHashTreeMapTest.testDoubleCapacityAllNodesOnLeft":212,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":136,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":70,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":314,"com.google.gson.functional.ObjectTest.testEmptyStringDeserialization":496,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":56,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":491,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":478,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":67,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":71,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":157,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":332,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":562,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":487,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":379,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":245,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":49,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":83,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":147,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":39,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":341,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":609,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":194,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":486,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":365,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":518,"com.google.gson.internal.LinkedHashTreeMapTest.testRemoveRootDoesNotDoubleUnlink":9,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":284,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":637,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":499,"com.google.gson.functional.ObjectTest.testNestedSerialization":111,"com.google.gson.JsonObjectTest.testAddingStringProperties":636,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":163,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":165,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":306,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":585,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":160,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":1,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":15,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":130,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":197,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":204,"com.google.gson.stream.JsonWriterTest.testUnicodeLineBreaksEscaped":201,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":109,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":591,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":323,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":220,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":610,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":467,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":222,"com.google.gson.GsonBuilderTest.testCreatingMoreThanOnce":416,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":528,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":458,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":501,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":370,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":638,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":128,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":53,"com.google.gson.functional.CollectionTest.testSetSerialization":380,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":384,"com.google.gson.functional.StringTest.testStringValueSerialization":129,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":282,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":350,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":32,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":58,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":445,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":616,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":241,"com.google.gson.MixedStreamTest.testWriteInvalidState":631,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":403,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":531,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":253,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":309,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":189,"com.google.gson.stream.JsonWriterTest.testWrongTopLevelType":199,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":401,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":260,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":92,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":342,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":139,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":409,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":8,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":402,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":34,"com.google.gson.internal.LinkedHashTreeMapTest.testAvlWalker":213,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":421,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":244,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":613},"transformations":[{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[0,1,2,3,4,5,6,7,8],"tindex":"39505a30-3e7d-11e6-ba05-c5c21be01b62","method":{"position":"com.google.gson.internal.bind.TypeAdapters:245","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260985574/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    out.value(value);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260985574/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:305","type":"CtBinaryOperatorImpl","sourcecode":"node != null"},"failures":[9],"tindex":"3950a851-3e7d-11e6-ba05-4d27cb22c624","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:245","type":"CtMethodImpl","sourcecode":"void removeInternal(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node, boolean unlink) {\n    if (node != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260985574/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (unlink) {\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            if ((left != null) && (right != null)) {\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = (left.int) > (right.int) ? left.last() : right.first();\n                removeInternal(adjacent, false);\n                int int = 0;\n                left = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                if (left != null) {\n                    leftHeight = left.int;\n                    adjacent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left;\n                    left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                } \n                int int = 0;\n                right = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                if (right != null) {\n                    rightHeight = right.int;\n                    adjacent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                } \n                adjacent.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                replaceInParent(node, adjacent);\n                return ;\n            } else if (left != null) {\n                replaceInParent(node, left);\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } else if (right != null) {\n                replaceInParent(node, right);\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } else {\n                replaceInParent(node, null);\n            }\n            rebalance(originalParent, false);\n            (int)--;\n            (int)++;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"node"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:305","type":"CtBinaryOperatorImpl","sourcecode":"node != null"},"failures":[10],"tindex":"3950cf62-3e7d-11e6-ba05-b1fa0a67aa42","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:311","type":"CtMethodImpl","sourcecode":"private void replaceInParent(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node, com.google.gson.internal.LinkedHashTreeMap.Node<K, V> replacement) {\n    if (replacement != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260985574/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            if (replacement != null) {\n                replacement.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = parent;\n            } \n            if (parent != null) {\n                if ((parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) == node) {\n                    parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = replacement;\n                } else {\n                    assert (parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) == node;\n                    parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = replacement;\n                }\n            } else {\n                int int = (node.int) & ((com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[].int) - 1);\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[][index] = replacement;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"replacement"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:120","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonNull"},"failures":[],"tindex":"3950f673-3e7d-11e6-ba05-d55e42612f12","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:839","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonNull) {\n        {\n            return containsKey(o);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260985574/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208],"tindex":"3950f674-3e7d-11e6-ba05-c5a87b4bae03","method":{"position":"com.google.gson.stream.JsonWriter:413","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            writeDeferredName();\n            beforeValue(false);\n            string(value);\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260985574/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:218","type":"CtVariableReadImpl","sourcecode":"unlink"},"failures":[209],"tindex":"39516ba5-3e7d-11e6-ba05-0986cec641ec","method":{"position":"com.google.gson.internal.LinkedTreeMap:217","type":"CtMethodImpl","sourcecode":"void removeInternal(com.google.gson.internal.LinkedTreeMap.Node<K, V> node, boolean unlink) {\n    if (unlink) {\n        {\n            if (unlink) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260985574/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (unlink) {\n                        {\n                            if (unlink) {\n                                node.com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                                node.com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                            } \n                            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                            if ((left != null) && (right != null)) {\n                                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = (left.int) > (right.int) ? left.last() : right.first();\n                                removeInternal(adjacent, false);\n                                int int = 0;\n                                left = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                                if (left != null) {\n                                    leftHeight = left.int;\n                                    adjacent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = left;\n                                    left.com.google.gson.internal.LinkedTreeMap.Node<K, V> = adjacent;\n                                    node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                                } \n                                int int = 0;\n                                right = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                                if (right != null) {\n                                    rightHeight = right.int;\n                                    adjacent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = right;\n                                    right.com.google.gson.internal.LinkedTreeMap.Node<K, V> = adjacent;\n                                    node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                                } \n                                adjacent.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                                replaceInParent(node, adjacent);\n                                return ;\n                            } else if (left != null) {\n                                replaceInParent(node, left);\n                                node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                            } else if (right != null) {\n                                replaceInParent(node, right);\n                                node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                            } else {\n                                replaceInParent(node, null);\n                            }\n                            rebalance(originalParent, false);\n                            (int)--;\n                            (int)++;\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260985574/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260985574/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"unlink":"unlink"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:94","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.Class"},"failures":[],"tindex":"39522ef6-3e7d-11e6-ba05-1bd43a3793fe","method":{"position":"com.google.gson.internal.$Gson$Types:93","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type canonicalize(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class) {\n        java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(type));\n        return c.isArray() ? new com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl(com.google.gson.internal.$Gson$Types.canonicalize(c.getComponentType())) : c;\n    } else if (type instanceof java.lang.reflect.ParameterizedType) {\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(type));\n        return new com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl(p.getOwnerType() , p.getRawType() , p.getActualTypeArguments());\n    } else if (type instanceof java.lang.reflect.GenericArrayType) {\n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(type));\n        return new com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl(g.getGenericComponentType());\n    } else if (type instanceof java.lang.reflect.WildcardType) {\n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(type));\n        return new com.google.gson.internal.$Gson$Types.WildcardTypeImpl(w.getUpperBounds() , w.getLowerBounds());\n    } else {\n        return type;\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.FieldNamingPolicy:155","type":"CtUnaryOperatorImpl","sourcecode":"!(java.lang.Character.isUpperCase(firstCharacter))"},"failures":[],"tindex":"39525607-3e7d-11e6-ba05-2d1760fbffbf","method":{"position":"com.google.gson.FieldNamingPolicy:163","type":"CtMethodImpl","sourcecode":"private static java.lang.String modifyString(char firstCharacter, java.lang.String srcString, int indexOfSubstring) {\n    if (!(java.lang.Character.isUpperCase(firstCharacter))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260985574/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return indexOfSubstring < (srcString.length()) ? firstCharacter + (srcString.substring(indexOfSubstring)) : java.lang.String.valueOf(firstCharacter);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"firstCharacter":"firstCharacter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[4,210,211],"tindex":"39525608-3e7d-11e6-ba05-43637f57d9e5","method":{"position":"com.google.gson.Gson:532","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260985574/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260985574/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n                    toJson(src, typeOfSrc, writer);\n                    return writer.toString();\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"39525609-3e7d-11e6-ba05-93f43f96faba","method":{"position":"com.google.gson.JsonObject:89","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Number value) {\n    if (property == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260985574/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            add(property, createJsonElement(value));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"39527d1a-3e7d-11e6-ba05-999f397aba2c","method":{"position":"com.google.gson.Gson:695","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.lang.String json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260985574/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:578","type":"CtBinaryOperatorImpl","sourcecode":"root == null"},"failures":[212,10,213,214],"tindex":"39527d1b-3e7d-11e6-ba05-47a76d305a23","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:626","type":"CtMethodImpl","sourcecode":"void reset(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root == null) {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            for (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root ; n != null ; n = n.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) {\n                n.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = stackTop;\n                stackTop = n;\n            }\n            com.google.gson.internal.LinkedHashTreeMap.AvlIterator.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = stackTop;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260985574/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"root"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[4],"tindex":"39527d1c-3e7d-11e6-ba05-871aea950344","method":{"position":"com.google.gson.internal.bind.TypeAdapters:201","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260985574/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    out.value(value);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260985574/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[29,215,216,217,218,219,220,221],"tindex":"39527d1d-3e7d-11e6-ba05-1bed712e3c1f","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:144","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260985574/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (value == null) {\n                        return nullValue();\n                    } \n                    put(new com.google.gson.JsonPrimitive(value));\n                    return com.google.gson.internal.bind.JsonTreeWriter.this;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260985574/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:107","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonArray"},"failures":[13,222,223,224,14,225,15,226,227,228,229,230,16,17,19,20,231,232,22,233,234,23,24,25,27,235,28,29,236,32,3,237,238,239,41,42,216,217,218,43,45,219,220,240,46,47,221,48,49,241,242,243,50,51,244,245,246,52,53,247,248,249,250,54,251,55,252,253,254,56,255,256,257,258,259,260,261,262,57,58,59,60,61,263,264,265,266,267,63,66,67,68,268,4,77,269,79,270,80,271,81,82,83,85,86,87,272,273,89,90,274,92,93,94,95,96,97,275,98,276,277,278,99,279,280,281,282,100,101,283,284,285,286,287,102,103,288,289,104,290,105,291,292,106,293,294,108,109,295,296,110,297,111,298,112,299,300,301,302,303,304,116,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,119,120,329,330,331,332,333,122,124,126,334,335,336,337,338,130,339,131,340,341,342,133,343,344,345,346,347,348,349,135,350,351,352,136,353,354,137,355,356,357,358,359,360,138,139,140,141,142,143,144,145,361,146,5,147,362,363,6,148,364,7,8,365,366,151,152,153,367,154,155,368,369,370,371,372,160,161,373,374,375,164,165,166,167,168,173,174,376,377,378,176,178,179,379,180,380,182,183,184,185,186,188,191,192,381,382,383,384,385,386,387,193,194,195,388,389,202,203,390,391,392,205,393,394,206,207,395,396,397,398],"tindex":"3952a42e-3e7d-11e6-ba05-1972c0f5da20","method":{"position":"com.google.gson.reflect.TypeToken:283","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic final boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260985574/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof com.google.gson.JsonArray) {\n                {\n                    if (o instanceof com.google.gson.JsonObject) {\n                        {\n                            if (o instanceof com.google.gson.JsonArray) {\n                                {\n                                    return (o instanceof com.google.gson.reflect.TypeToken<?>) && (com.google.gson.internal.$Gson$Types.equals(java.lang.reflect.Type, ((com.google.gson.reflect.TypeToken<?>)(o)).java.lang.reflect.Type));\n                                }\n                            } else {\n                                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260985574/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                throw new java.lang.RuntimeException();\n                            }\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260985574/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260985574/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[236,399,217,219,220,221,329,330,331,332,333,345,346,147,382],"tindex":"3952a42f-3e7d-11e6-ba05-e5baa508855e","method":{"position":"com.google.gson.Gson:468","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src) {\n    if (src == null) {\n        {\n            if (src == null) {\n                return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            return toJsonTree(src, src.getClass());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260985574/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.JsonObject:54","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[228,29,33,34,42,63,400,66,67,68,401,402,81,83,87,97,98,99,279,280,282,100,101,284,286,287,102,403,327,119,120,329,330,332,333,130,356,359,138,140,141,143,147,151,182,186,191,192,404,405,196,394,208,406,407,408,409,410,411,412,413],"tindex":"3952a430-3e7d-11e6-ba05-d9c511c44bd7","method":{"position":"com.google.gson.internal.bind.TypeAdapters:680","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, com.google.gson.JsonElement value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260985574/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                {\n                    if ((value == null) || (value.isJsonNull())) {\n                        out.nullValue();\n                    } else if (value.isJsonPrimitive()) {\n                        com.google.gson.JsonPrimitive com.google.gson.JsonPrimitive = value.getAsJsonPrimitive();\n                        if (primitive.isNumber()) {\n                            out.value(primitive.getAsNumber());\n                        } else if (primitive.isBoolean()) {\n                            out.value(primitive.getAsBoolean());\n                        } else {\n                            out.value(primitive.getAsString());\n                        }\n                    } else if (value.isJsonArray()) {\n                        out.beginArray();\n                        for (com.google.gson.JsonElement com.google.gson.JsonElement : value.getAsJsonArray()) {\n                            write(out, e);\n                        }\n                        out.endArray();\n                    } else if (value.isJsonObject()) {\n                        out.beginObject();\n                        for (java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> : value.getAsJsonObject().entrySet()) {\n                            out.name(e.getKey());\n                            write(out, e.getValue());\n                        }\n                        out.endObject();\n                    } else {\n                        throw new java.lang.IllegalArgumentException((\"Couldn't write \" + (value.getClass())));\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260985574/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:554","type":"CtBinaryOperatorImpl","sourcecode":"(datePattern != null) && (!(\"\".equals(datePattern.trim())))"},"failures":[63,67,68,81,83,87],"tindex":"3952cb41-3e7d-11e6-ba05-33d001484257","method":{"position":"com.google.gson.GsonBuilder:551","type":"CtMethodImpl","sourcecode":"private void addTypeAdaptersForDate(java.lang.String datePattern, int dateStyle, int timeStyle, java.util.List<com.google.gson.TypeAdapterFactory> factories) {\n    if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260985574/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.DefaultDateTypeAdapter com.google.gson.DefaultDateTypeAdapter;\n            if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n                dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(datePattern);\n            } else if ((dateStyle != (java.text.DateFormat.java.text.DateFormat.int)) && (timeStyle != (java.text.DateFormat.java.text.DateFormat.int))) {\n                dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(dateStyle , timeStyle);\n            } else {\n                return ;\n            }\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.util.Date.java.util.Date.java.lang.Class), dateTypeAdapter));\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Timestamp.java.sql.Timestamp.java.lang.Class), dateTypeAdapter));\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Date.java.sql.Date.java.lang.Class), dateTypeAdapter));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"datePattern":"datePattern"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[414,4],"tindex":"3952cb42-3e7d-11e6-ba05-adb6cd3157aa","method":{"position":"com.google.gson.Gson:261","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260985574/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            double double = value.doubleValue();\n            checkValidFloatingPoint(doubleValue);\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:246","type":"CtVariableReadImpl","sourcecode":"unlink"},"failures":[],"tindex":"3952cb43-3e7d-11e6-ba05-814e23465cf0","method":{"position":"com.google.gson.internal.LinkedTreeMap:217","type":"CtMethodImpl","sourcecode":"void removeInternal(com.google.gson.internal.LinkedTreeMap.Node<K, V> node, boolean unlink) {\n    if (unlink) {\n        {\n            if (unlink) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260985574/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (unlink) {\n                        {\n                            if (unlink) {\n                                node.com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                                node.com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                            } \n                            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                            if ((left != null) && (right != null)) {\n                                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = (left.int) > (right.int) ? left.last() : right.first();\n                                removeInternal(adjacent, false);\n                                int int = 0;\n                                left = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                                if (left != null) {\n                                    leftHeight = left.int;\n                                    adjacent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = left;\n                                    left.com.google.gson.internal.LinkedTreeMap.Node<K, V> = adjacent;\n                                    node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                                } \n                                int int = 0;\n                                right = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                                if (right != null) {\n                                    rightHeight = right.int;\n                                    adjacent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = right;\n                                    right.com.google.gson.internal.LinkedTreeMap.Node<K, V> = adjacent;\n                                    node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                                } \n                                adjacent.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                                replaceInParent(node, adjacent);\n                                return ;\n                            } else if (left != null) {\n                                replaceInParent(node, left);\n                                node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                            } else if (right != null) {\n                                replaceInParent(node, right);\n                                node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                            } else {\n                                replaceInParent(node, null);\n                            }\n                            rebalance(originalParent, false);\n                            (int)--;\n                            (int)++;\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260985574/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260985574/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"unlink":"unlink"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:274","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[415,11,12,416,13,222,223,224,14,225,15,226,227,417,228,229,418,230,16,17,419,420,18,421,19,422,20,231,423,232,424,21,22,425,233,234,0,426,427,23,428,24,25,1,26,429,27,430,235,28,431,432,433,29,30,434,236,31,435,436,437,438,439,32,33,34,440,441,35,442,2,443,444,445,446,447,3,448,36,237,37,449,38,39,414,450,451,40,238,239,452,453,454,42,215,399,216,217,218,43,44,45,219,220,455,240,46,47,221,48,49,241,242,243,50,51,244,245,246,52,53,247,248,249,250,54,251,55,252,253,254,56,255,256,257,258,259,260,261,262,263,264,265,266,267,456,62,63,64,457,458,459,400,460,65,66,461,67,462,68,69,463,268,401,464,4,465,70,466,71,72,73,467,74,468,75,76,469,470,471,472,77,473,269,474,78,475,476,79,270,402,80,271,81,82,477,478,83,84,85,86,479,480,481,87,210,272,88,482,273,89,483,90,484,485,486,274,487,91,92,93,94,95,488,96,97,275,98,276,277,278,99,279,280,281,282,100,101,283,284,285,286,287,102,103,288,289,104,290,105,291,292,106,293,294,107,489,490,108,403,491,492,493,494,495,109,496,295,497,296,498,110,499,297,111,500,501,502,298,503,504,505,112,299,506,113,300,114,507,508,301,509,510,511,512,513,514,302,515,516,517,518,303,115,304,519,116,520,521,522,523,524,525,526,305,306,527,528,529,530,531,117,532,307,308,533,309,310,534,535,311,536,537,312,538,539,540,541,542,543,544,313,545,546,547,548,549,550,551,552,553,554,314,555,315,316,556,557,317,558,559,560,561,118,562,563,318,564,565,319,566,567,320,321,568,569,570,322,323,324,571,572,573,325,326,574,575,576,577,327,578,328,119,120,329,330,331,332,333,579,121,122,123,124,125,580,581,126,334,127,582,583,584,128,585,586,129,335,587,588,589,590,336,337,338,130,339,591,131,132,340,341,342,133,134,343,344,345,346,347,348,349,135,350,351,352,136,353,592,354,137,355,356,357,358,593,594,359,595,211,596,360,597,138,139,140,141,142,143,144,145,361,146,5,598,147,362,363,6,599,148,600,364,7,8,601,602,365,366,603,149,150,151,152,604,605,153,367,154,155,156,606,368,369,370,157,371,607,608,372,609,158,610,611,159,612,160,161,162,163,613,373,374,375,614,164,165,166,167,168,173,174,376,377,615,616,617,175,378,176,177,178,618,619,179,379,620,180,181,621,380,622,623,182,624,183,184,185,186,187,188,625,189,190,626,191,192,627,381,382,383,384,385,386,387,193,194,195,197,202,628,629,203,630,631,632,633,204,634,390,391,392,205,393,394,206,635,207,395,396,208,406],"tindex":"39531964-3e7d-11e6-ba05-a56112186038","method":{"position":"com.google.gson.Gson:273","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> floatAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                {\n                    if (serializeSpecialFloatingPointValues) {\n                        return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n                    } \n                    return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                        @java.lang.Override\n                        public java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                            if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                                in.nextNull();\n                                return null;\n                            } \n                            return ((float)(in.nextDouble()));\n                        }\n\n                        @java.lang.Override\n                        public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                            if (value == null) {\n                                out.nullValue();\n                                return ;\n                            } \n                            float float = value.floatValue();\n                            checkValidFloatingPoint(floatValue);\n                            out.value(value);\n                        }\n                    };\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260985574/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260985574/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[],"tindex":"39531965-3e7d-11e6-ba05-1b544a7959b3","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:86","type":"CtMethodImpl","sourcecode":"private com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField createBoundField(final com.google.gson.Gson context, final java.lang.reflect.Field field, final java.lang.String name, final com.google.gson.reflect.TypeToken<?> fieldType, boolean serialize, boolean deserialize) {\n    if (name == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260985574/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final boolean boolean = com.google.gson.internal.Primitives.isPrimitive(fieldType.getRawType());\n            return new com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField(name, serialize, deserialize) {\n                final com.google.gson.TypeAdapter<?> typeAdapter = getFieldAdapter(context, field, fieldType);\n\n                @java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n                @java.lang.Override\n                void write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                    java.lang.Object java.lang.Object = field.get(value);\n                    com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n                    t.write(writer, fieldValue);\n                }\n\n                @java.lang.Override\n                void read(com.google.gson.stream.JsonReader reader, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                    java.lang.Object java.lang.Object = com.google.gson.TypeAdapter<?>.read(reader);\n                    if ((fieldValue != null) || (!isPrimitive)) {\n                        field.set(value, fieldValue);\n                    } \n                }\n\n                public boolean writeField(java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                    if (!(boolean))\n                        return false;\n                    \n                    java.lang.Object java.lang.Object = field.get(value);\n                    return fieldValue != value;\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:218","type":"CtVariableReadImpl","sourcecode":"unlink"},"failures":[],"tindex":"39534076-3e7d-11e6-ba05-a16e3eb4f3d6","method":{"position":"com.google.gson.internal.LinkedTreeMap:217","type":"CtMethodImpl","sourcecode":"void removeInternal(com.google.gson.internal.LinkedTreeMap.Node<K, V> node, boolean unlink) {\n    if (unlink) {\n        {\n            if (unlink) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260985574/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (unlink) {\n                        {\n                            if (unlink) {\n                                node.com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                                node.com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                            } \n                            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                            if ((left != null) && (right != null)) {\n                                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = (left.int) > (right.int) ? left.last() : right.first();\n                                removeInternal(adjacent, false);\n                                int int = 0;\n                                left = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                                if (left != null) {\n                                    leftHeight = left.int;\n                                    adjacent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = left;\n                                    left.com.google.gson.internal.LinkedTreeMap.Node<K, V> = adjacent;\n                                    node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                                } \n                                int int = 0;\n                                right = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                                if (right != null) {\n                                    rightHeight = right.int;\n                                    adjacent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = right;\n                                    right.com.google.gson.internal.LinkedTreeMap.Node<K, V> = adjacent;\n                                    node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                                } \n                                adjacent.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                                replaceInParent(node, adjacent);\n                                return ;\n                            } else if (left != null) {\n                                replaceInParent(node, left);\n                                node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                            } else if (right != null) {\n                                replaceInParent(node, right);\n                                node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                            } else {\n                                replaceInParent(node, null);\n                            }\n                            rebalance(originalParent, false);\n                            (int)--;\n                            (int)++;\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260985574/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260985574/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"unlink":"unlink"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[33,34,99,329,330,332,333,335,587,588,589,590,382,636],"tindex":"39536787-3e7d-11e6-ba05-615e76e6c1c4","method":{"position":"com.google.gson.JsonObject:78","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.String value) {\n    if (value == null) {\n        {\n            add(property, createJsonElement(value));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260985574/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"39536788-3e7d-11e6-ba05-a5e091d372c2","method":{"position":"com.google.gson.internal.bind.TypeAdapters:245","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260985574/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    out.value(value);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260985574/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:167","type":"CtBinaryOperatorImpl","sourcecode":"a instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"39536789-3e7d-11e6-ba05-5904af2023f7","method":{"position":"com.google.gson.internal.$Gson$Types:158","type":"CtMethodImpl","sourcecode":"public static boolean equals(java.lang.reflect.Type a, java.lang.reflect.Type b) {\n    if (a == b) {\n        return true;\n    } else if (a instanceof java.lang.Class) {\n        return a.equals(b);\n    } else if (a instanceof java.lang.reflect.ParameterizedType) {\n        if (!(b instanceof java.lang.reflect.ParameterizedType)) {\n            return false;\n        } \n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(a));\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(b));\n        return ((com.google.gson.internal.$Gson$Types.equal(pa.getOwnerType(), pb.getOwnerType())) && (pa.getRawType().equals(pb.getRawType()))) && (java.util.Arrays.equals(pa.getActualTypeArguments(), pb.getActualTypeArguments()));\n    } else if (a instanceof java.lang.reflect.GenericArrayType) {\n        if (!(b instanceof java.lang.reflect.GenericArrayType)) {\n            return false;\n        } \n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(a));\n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(b));\n        return com.google.gson.internal.$Gson$Types.equals(ga.getGenericComponentType(), gb.getGenericComponentType());\n    } else if (a instanceof java.lang.reflect.WildcardType) {\n        if (!(b instanceof java.lang.reflect.WildcardType)) {\n            return false;\n        } \n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(a));\n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(b));\n        return (java.util.Arrays.equals(wa.getUpperBounds(), wb.getUpperBounds())) && (java.util.Arrays.equals(wa.getLowerBounds(), wb.getLowerBounds()));\n    } else if (a instanceof java.lang.reflect.TypeVariable) {\n        if (!(b instanceof java.lang.reflect.TypeVariable)) {\n            return false;\n        } \n        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(a));\n        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(b));\n        return ((va.getGenericDeclaration()) == (vb.getGenericDeclaration())) && (va.getName().equals(vb.getName()));\n    } else {\n        return false;\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"39538e9a-3e7d-11e6-ba05-dd9bb6a04fa0","method":{"position":"com.google.gson.internal.bind.TypeAdapters:201","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260985574/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    out.value(value);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260985574/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:726","type":"CtBinaryOperatorImpl","sourcecode":"value == 0"},"failures":[],"tindex":"39538e9b-3e7d-11e6-ba05-e5d729bf9899","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:170","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(long value) throws java.io.IOException {\n    if (value == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260985574/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:459","type":"CtBinaryOperatorImpl","sourcecode":"typeAdapter instanceof com.google.gson.TypeAdapter<?>"},"failures":[287,498,143,144,145,151,191,192,627,205],"tindex":"39538e9c-3e7d-11e6-ba05-87a9ddebe02c","method":{"position":"com.google.gson.GsonBuilder:493","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\npublic com.google.gson.GsonBuilder registerTypeHierarchyAdapter(java.lang.Class<?> baseType, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n        {\n            com.google.gson.internal.$Gson$Preconditions.checkArgument((((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) || (typeAdapter instanceof com.google.gson.TypeAdapter<?>)));\n            if ((typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)) {\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(0, com.google.gson.TreeTypeAdapter.newTypeHierarchyFactory(baseType, typeAdapter));\n            } \n            if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.internal.bind.TypeAdapters.newTypeHierarchyFactory(baseType, ((com.google.gson.TypeAdapter)(typeAdapter))));\n            } \n            return com.google.gson.GsonBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260985574/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.JsonObject:54","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"39538e9d-3e7d-11e6-ba05-3101f1bc68aa","method":{"position":"com.google.gson.internal.bind.TypeAdapters:680","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, com.google.gson.JsonElement value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260985574/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                {\n                    if ((value == null) || (value.isJsonNull())) {\n                        out.nullValue();\n                    } else if (value.isJsonPrimitive()) {\n                        com.google.gson.JsonPrimitive com.google.gson.JsonPrimitive = value.getAsJsonPrimitive();\n                        if (primitive.isNumber()) {\n                            out.value(primitive.getAsNumber());\n                        } else if (primitive.isBoolean()) {\n                            out.value(primitive.getAsBoolean());\n                        } else {\n                            out.value(primitive.getAsString());\n                        }\n                    } else if (value.isJsonArray()) {\n                        out.beginArray();\n                        for (com.google.gson.JsonElement com.google.gson.JsonElement : value.getAsJsonArray()) {\n                            write(out, e);\n                        }\n                        out.endArray();\n                    } else if (value.isJsonObject()) {\n                        out.beginObject();\n                        for (java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> : value.getAsJsonObject().entrySet()) {\n                            out.name(e.getKey());\n                            write(out, e.getValue());\n                        }\n                        out.endObject();\n                    } else {\n                        throw new java.lang.IllegalArgumentException((\"Couldn't write \" + (value.getClass())));\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260985574/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:85","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[13,222,17,25,32,3,219,48,49,242,243,50,51,244,52,53,247,54,55,253,56,256,57,58,59,60,61,290,106,109,110,297,306,308,317,320,324,326,329,126,347,135,350,351,352,137,5,362,6,364,7,160,166,637,638,191,385],"tindex":"3953b5ae-3e7d-11e6-ba05-a73fb5a59285","method":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:84","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Object array) throws java.io.IOException {\n    if (array == null) {\n        {\n            if (array == null) {\n                out.nullValue();\n                return ;\n            } \n            out.beginArray();\n            for (int int = 0, int int = java.lang.reflect.Array.getLength(array) ; i < length ; i++) {\n                E E = ((E)(java.lang.reflect.Array.get(array, i)));\n                com.google.gson.TypeAdapter<E>.write(out, value);\n            }\n            out.endArray();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260985574/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[11,12,14,15,17,20,21,22,426,23,24,25,26,29,30,437,32,35,2,444,446,3,448,36,237,37,449,38,39,414,40,239,41,42,44,46,47,48,49,242,243,50,51,244,52,53,54,55,253,56,256,258,259,260,261,262,57,58,59,60,61,263,264,265,266,267,62,64,65,69,70,466,71,72,73,74,75,76,470,472,473,269,78,80,81,82,478,83,84,85,86,479,87,88,89,90,92,93,94,95,96,97,99,279,280,282,100,101,284,287,103,104,290,105,106,107,108,493,109,497,498,110,297,111,500,502,112,506,113,114,513,302,115,116,305,306,117,307,308,310,311,537,312,540,541,313,553,314,315,316,317,560,118,564,319,566,320,321,322,324,325,326,121,122,123,124,125,126,127,128,129,131,132,341,133,134,343,344,347,348,349,135,350,351,352,353,137,356,357,358,594,359,595,360,138,139,140,141,142,143,144,145,146,599,149,150,151,152,153,154,156,606,368,157,371,372,158,159,160,161,162,163,164,165,166,167,168,173,174,377,378,176,178,179,180,380,183,184,185,186,187,188,625,189,190,626,381,382,383,385,386,387,193,195,197,393,394,206],"tindex":"3953b5af-3e7d-11e6-ba05-45836b91e64e","method":{"position":"com.google.gson.Gson:510","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src) {\n    if (src != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260985574/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src == null) {\n                {\n                    if (src == null) {\n                        return toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull);\n                    } \n                    return toJson(src, src.getClass());\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260985574/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"3953b5b0-3e7d-11e6-ba05-1dc11786df03","method":{"position":"com.google.gson.Gson:719","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.lang.String json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            if (json == null) {\n                return null;\n            } \n            java.io.StringReader java.io.StringReader = new java.io.StringReader(json);\n            T T = ((T)(fromJson(reader, typeOfT)));\n            return target;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260985574/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"3953dcc1-3e7d-11e6-ba05-95109db5088f","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:144","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260985574/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (value == null) {\n                        return nullValue();\n                    } \n                    put(new com.google.gson.JsonPrimitive(value));\n                    return com.google.gson.internal.bind.JsonTreeWriter.this;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260985574/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:298","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[302,305,307,311,312,321,632],"tindex":"3953dcc2-3e7d-11e6-ba05-cfe33ef8c3dc","method":{"position":"com.google.gson.Gson:297","type":"CtMethodImpl","sourcecode":"private void checkValidFloatingPoint(double value) {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260985574/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                throw new java.lang.IllegalArgumentException(((value + \" is not a valid double value as per JSON specification. To override this\") + \" behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.\"));\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"3953dcc3-3e7d-11e6-ba05-f315cd1ea210","method":{"position":"com.google.gson.Gson:285","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260985574/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            float float = value.floatValue();\n            checkValidFloatingPoint(floatValue);\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[567],"tindex":"3953dcc4-3e7d-11e6-ba05-31937fd01860","method":{"position":"com.google.gson.internal.bind.TypeAdapters:223","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260985574/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[315,322,325,632],"tindex":"395403d5-3e7d-11e6-ba05-f7d41e9a5178","method":{"position":"com.google.gson.internal.bind.TypeAdapters:297","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                {\n                    out.value(value);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260985574/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260985574/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"395403d6-3e7d-11e6-ba05-9b5d044a70cd","method":{"position":"com.google.gson.Gson:847","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(com.google.gson.JsonElement json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260985574/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:120","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonNull"},"failures":[],"tindex":"395403d7-3e7d-11e6-ba05-89bccac34ee1","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:808","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonNull) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260985574/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (!(o instanceof java.util.Map.Entry)) {\n                return false;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n            if (node == null) {\n                return false;\n            } \n            removeInternal(node, true);\n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[],"tindex":"395403d8-3e7d-11e6-ba05-f5a9e56039d4","method":{"position":"com.google.gson.Gson:532","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260985574/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260985574/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n                    toJson(src, typeOfSrc, writer);\n                    return writer.toString();\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:167","type":"CtBinaryOperatorImpl","sourcecode":"a instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"395403d9-3e7d-11e6-ba05-dd4ca93d8ae5","method":{"position":"com.google.gson.internal.$Gson$Types:151","type":"CtMethodImpl","sourcecode":"static boolean equal(java.lang.Object a, java.lang.Object b) {\n    return (a == b) || ((a != null) && (a.equals(b)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:198","type":"CtBinaryOperatorImpl","sourcecode":"a instanceof java.lang.reflect.TypeVariable"},"failures":[],"tindex":"395403da-3e7d-11e6-ba05-57d797fa0c05","method":{"position":"com.google.gson.internal.LinkedTreeMap:207","type":"CtMethodImpl","sourcecode":"private boolean equal(java.lang.Object a, java.lang.Object b) {\n    if (b instanceof java.lang.reflect.TypeVariable) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260985574/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (a == b) || ((a != null) && (a.equals(b)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[],"tindex":"39542aeb-3e7d-11e6-ba05-ab916994c2cb","method":{"position":"com.google.gson.Gson:510","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src) {\n    if (src != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260985574/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src == null) {\n                {\n                    if (src == null) {\n                        return toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull);\n                    } \n                    return toJson(src, src.getClass());\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260985574/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:105","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonObject"},"failures":[],"tindex":"39542aec-3e7d-11e6-ba05-4961ba2f7d28","method":{"position":"com.google.gson.reflect.TypeToken:283","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic final boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260985574/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof com.google.gson.JsonArray) {\n                {\n                    if (o instanceof com.google.gson.JsonObject) {\n                        {\n                            if (o instanceof com.google.gson.JsonArray) {\n                                {\n                                    return (o instanceof com.google.gson.reflect.TypeToken<?>) && (com.google.gson.internal.$Gson$Types.equals(java.lang.reflect.Type, ((com.google.gson.reflect.TypeToken<?>)(o)).java.lang.reflect.Type));\n                                }\n                            } else {\n                                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260985574/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                throw new java.lang.RuntimeException();\n                            }\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260985574/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260985574/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1531","type":"CtBinaryOperatorImpl","sourcecode":"(c >= 'A') && (c <= 'F')"},"failures":[],"tindex":"39542aed-3e7d-11e6-ba05-0355ddfc4f8f","method":{"position":"com.google.gson.stream.JsonReader:755","type":"CtMethodImpl","sourcecode":"private boolean isLiteral(char c) throws java.io.IOException {\n    if ((c >= 'A') && (c <= 'F')) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260985574/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            switch (c) {\n                case '/' :\n                case '\\\\' :\n                case ';' :\n                case '#' :\n                case '=' :\n                    checkLenient();\n                case '{' :\n                case '}' :\n                case '[' :\n                case ']' :\n                case ':' :\n                case ',' :\n                case ' ' :\n                case '\\t' :\n                case '\\f' :\n                case '\\r' :\n                case '\\n' :\n                    return false;\n                default :\n                    return true;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"c"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:107","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonArray"},"failures":[],"tindex":"39542aee-3e7d-11e6-ba05-cdc0751fecd5","method":{"position":"com.google.gson.reflect.TypeToken:283","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic final boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260985574/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof com.google.gson.JsonArray) {\n                {\n                    if (o instanceof com.google.gson.JsonObject) {\n                        {\n                            if (o instanceof com.google.gson.JsonArray) {\n                                {\n                                    return (o instanceof com.google.gson.reflect.TypeToken<?>) && (com.google.gson.internal.$Gson$Types.equals(java.lang.reflect.Type, ((com.google.gson.reflect.TypeToken<?>)(o)).java.lang.reflect.Type));\n                                }\n                            } else {\n                                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260985574/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                throw new java.lang.RuntimeException();\n                            }\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260985574/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260985574/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"395451ff-3e7d-11e6-ba05-bf09163af9ca","method":{"position":"com.google.gson.TypeAdapter:268","type":"CtMethodImpl","sourcecode":"public final T fromJson(java.lang.String json) throws java.io.IOException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260985574/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            return fromJson(new java.io.StringReader(json));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:274","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[],"tindex":"39545200-3e7d-11e6-ba05-5f54a0570c3a","method":{"position":"com.google.gson.Gson:273","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> floatAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                {\n                    if (serializeSpecialFloatingPointValues) {\n                        return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n                    } \n                    return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                        @java.lang.Override\n                        public java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                            if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                                in.nextNull();\n                                return null;\n                            } \n                            return ((float)(in.nextDouble()));\n                        }\n\n                        @java.lang.Override\n                        public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                            if (value == null) {\n                                out.nullValue();\n                                return ;\n                            } \n                            float float = value.floatValue();\n                            checkValidFloatingPoint(floatValue);\n                            out.value(value);\n                        }\n                    };\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260985574/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260985574/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:105","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonObject"},"failures":[],"tindex":"39545201-3e7d-11e6-ba05-4d24befedbf1","method":{"position":"com.google.gson.reflect.TypeToken:283","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic final boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260985574/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof com.google.gson.JsonArray) {\n                {\n                    if (o instanceof com.google.gson.JsonObject) {\n                        {\n                            if (o instanceof com.google.gson.JsonArray) {\n                                {\n                                    return (o instanceof com.google.gson.reflect.TypeToken<?>) && (com.google.gson.internal.$Gson$Types.equals(java.lang.reflect.Type, ((com.google.gson.reflect.TypeToken<?>)(o)).java.lang.reflect.Type));\n                                }\n                            } else {\n                                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260985574/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                throw new java.lang.RuntimeException();\n                            }\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260985574/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260985574/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"39545202-3e7d-11e6-ba05-41f3a00c255f","method":{"position":"com.google.gson.internal.bind.TypeAdapters:297","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                {\n                    out.value(value);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260985574/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260985574/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":51,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
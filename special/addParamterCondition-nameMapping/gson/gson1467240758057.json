{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":68,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":394,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":454,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":1,"com.google.gson.internal.LinkedHashTreeMapTest.testIterationOrder":95,"com.google.gson.stream.JsonWriterTest.testRepeatedName":513,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":109,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":476,"com.google.gson.MixedStreamTest.testWriteLenient":226,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":347,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":527,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":11,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":34,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":211,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":216,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":526,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":401,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":508,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":132,"com.google.gson.JsonObjectTest.testAddingNullPropertyValue":364,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":480,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":545,"com.google.gson.functional.ObjectTest.testSingletonLists":278,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":198,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":502,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":395,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":322,"com.google.gson.stream.JsonWriterTest.testStrings":515,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":475,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":136,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":358,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":533,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":463,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":434,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":85,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":306,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":50,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":178,"com.google.gson.internal.LinkedTreeMapTest.testContainsNullKeyIsAlwaysFalse":383,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":409,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":490,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":45,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":339,"com.google.gson.functional.EnumTest.testEnumCaseMapping":507,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":393,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":403,"com.google.gson.functional.JsonTreeTest.testToJsonTree":70,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":183,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":80,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":76,"com.google.gson.JsonObjectTest.testEqualsNonEmptyObject":365,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":9,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":196,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":208,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":422,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":477,"com.google.gson.internal.LinkedTreeMapTest.testLargeSetOfRandomKeys":378,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":310,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":274,"com.google.gson.internal.bind.JsonElementReaderTest.testNestedObjects":373,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":531,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":58,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":166,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":323,"com.google.gson.internal.LinkedTreeMapTest.testContainsNonComparableKeyReturnsFalse":379,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":44,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":318,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":536,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":57,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":130,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":344,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":505,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":201,"com.google.gson.JsonParserTest.testParseString":361,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":158,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":209,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":147,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":260,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":459,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":348,"com.google.gson.functional.StreamingTypeAdaptersTest.testFromJsonTree":356,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":251,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":33,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":60,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":429,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":245,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":159,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":281,"com.google.gson.JsonPrimitiveTest.testEqualsAcrossTypes":83,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":221,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":315,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":530,"com.google.gson.internal.LinkedHashTreeMapTest.testEmptyStringValues":94,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":246,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":340,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":554,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":253,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":190,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":485,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":345,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":412,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":426,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":270,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":331,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":441,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":501,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":317,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":428,"com.google.gson.functional.CollectionTest.testSetDeserialization":447,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":133,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":142,"com.google.gson.functional.EnumTest.testEnumSet":296,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":191,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":18,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":234,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":144,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":189,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":321,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":484,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":42,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":137,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":162,"com.google.gson.internal.LinkedHashTreeMapTest.testContainsNullKeyIsAlwaysFalse":97,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":105,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":247,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":31,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":427,"com.google.gson.functional.MapTest.testSortedMap":410,"com.google.gson.functional.MapTest.testMapSerialization":102,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":106,"com.google.gson.internal.bind.JsonElementReaderTest.testObject":375,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":329,"com.google.gson.functional.MapTest.testSerializeMaps":101,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":127,"com.google.gson.functional.MapTest.testComplexKeysSerialization":244,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":59,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":342,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":123,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":276,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":550,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":295,"com.google.gson.internal.LinkedTreeMapTest.testRemoveRootDoesNotDoubleUnlink":385,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":418,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":15,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":181,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":366,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":110,"com.google.gson.functional.MapTest.testStringKeyDeserialization":341,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":20,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":169,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":104,"com.google.gson.functional.PrettyPrintingTest.testMap":179,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":488,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":213,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":107,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":494,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":210,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":491,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":398,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":269,"com.google.gson.functional.CollectionTest.testQueueSerialization":308,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":367,"com.google.gson.functional.MapTest.testMapSerializationEmpty":411,"com.google.gson.functional.MapTest.testMapOfMapSerialization":238,"com.google.gson.JavaSerializationTest.testMapIsSerializable":327,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":445,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":155,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":268,"com.google.gson.internal.LinkedTreeMapTest.testPutNonComparableKeyFails":382,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":26,"com.google.gson.functional.FieldNamingTest.testIdentity":128,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":396,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":346,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":174,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":538,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":36,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":111,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":140,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":252,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":56,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":359,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":397,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":153,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":523,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":230,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":14,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":267,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":499,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":406,"com.google.gson.functional.MapTest.testMapSubclassSerialization":233,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":219,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":549,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":225,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":313,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":349,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":522,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":188,"com.google.gson.functional.EnumTest.testEnumSubclass":298,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":156,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":464,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":532,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":150,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":316,"com.google.gson.GsonBuilderTest.testRegisterTypeAdapterForCoreType":465,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":19,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":416,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":139,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":524,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":72,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":229,"com.google.gson.internal.LinkedTreeMapTest.testEqualsAndHashCode":384,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":432,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":152,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":414,"com.google.gson.stream.JsonWriterTest.testObjectsInArrays":462,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":503,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":525,"com.google.gson.MixedStreamTest.testWriteNulls":55,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":466,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":120,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":352,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":259,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":275,"com.google.gson.CommentsTest.testParseComments":452,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":548,"com.google.gson.JsonObjectTest.testReadPropertyWithEmptyStringName":362,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":23,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":141,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":546,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":177,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":520,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":328,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":240,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":284,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":326,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":129,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":195,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":168,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":472,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":231,"com.google.gson.JsonParserTest.testParseMixedArray":52,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":391,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":90,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":286,"com.google.gson.internal.bind.JsonTreeWriterTest.testWriteAfterClose":79,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":266,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":163,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":469,"com.google.gson.functional.MapTest.testMapDeserialization":337,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":500,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":184,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":0,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":54,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":544,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":117,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":235,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":292,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":290,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeMap":357,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":419,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":4,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":440,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":424,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":148,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":248,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":510,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":73,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":495,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":481,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":114,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":138,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":180,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":239,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":451,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":13,"com.google.gson.functional.PrimitiveTest.testShortSerialization":167,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":430,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":40,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":325,"com.google.gson.internal.LinkedTreeMapTest.testIterationOrder":381,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":160,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":228,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":124,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":47,"com.google.gson.internal.LinkedTreeMapTest.testEmptyStringValues":380,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":212,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":319,"com.google.gson.internal.LinkedTreeMapTest.testPutOverrides":376,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":334,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":48,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":170,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":350,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":64,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":471,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":547,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":62,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":559,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":173,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":205,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":468,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":282,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":421,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":473,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":65,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":84,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":492,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":542,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":438,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":21,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":540,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":529,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":300,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":249,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":388,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":215,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":521,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":509,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":474,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":289,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":293,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":458,"com.google.gson.internal.LinkedHashTreeMapTest.testClear":92,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":32,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":456,"com.google.gson.stream.JsonWriterTest.testNullStringValue":512,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":294,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":74,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":442,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":154,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":171,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":302,"com.google.gson.JsonPrimitiveTest.testEquals":82,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":291,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":297,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":343,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":330,"com.google.gson.functional.MapTest.testGeneralMapField":67,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":528,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":257,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":122,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":487,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":555,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":271,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":241,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":5,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":305,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":390,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":161,"com.google.gson.ObjectTypeAdapterTest.testDeserializeNullValue":371,"com.google.gson.MixedStreamTest.testReadMixedStreamed":558,"com.google.gson.JsonObjectTest.testDeepCopy":368,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":283,"com.google.gson.internal.bind.JsonElementReaderTest.testBooleans":387,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":407,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":312,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":402,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":436,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":553,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":324,"com.google.gson.JavaSerializationTest.testNumberIsSerializable":404,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":483,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":134,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":338,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":506,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":333,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":24,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":172,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":199,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":87,"com.google.gson.stream.JsonWriterTest.testArraysInObjects":461,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":63,"com.google.gson.internal.LinkedHashTreeMapTest.testEqualsAndHashCode":98,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":457,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":437,"com.google.gson.JsonPrimitiveTest.testEqualsDoesNotEquateStringAndNonStringTypes":81,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":175,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":444,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":28,"com.google.gson.functional.ObjectTest.testNestedDeserialization":541,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":51,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":517,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":71,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":479,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":176,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":408,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":467,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":187,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":165,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":415,"com.google.gson.JavaSerializationTest.testListIsSerializable":405,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":38,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":351,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":218,"com.google.gson.functional.ObjectTest.testNullSerialization":30,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":113,"com.google.gson.stream.JsonWriterTest.testDoubles":455,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":335,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":242,"com.google.gson.functional.MapTest.testInterfaceTypeMap":66,"com.google.gson.stream.JsonWriterTest.testNonFiniteBoxedDoubles":222,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":49,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":254,"com.google.gson.JsonObjectTest.testAddingNullOrEmptyPropertyName":370,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":204,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":299,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":519,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":493,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":43,"com.google.gson.MixedStreamTest.testWriteClosed":557,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":309,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":518,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":279,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":420,"com.google.gson.internal.LinkedHashTreeMapTest.testPutNonComparableKeyFails":96,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":192,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":116,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":288,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":149,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":287,"com.google.gson.stream.JsonWriterTest.testLongs":460,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":135,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":255,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":280,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":214,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":88,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeWithCustomTypeAdapter":486,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":89,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":417,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":311,"com.google.gson.internal.bind.JsonElementReaderTest.testSkipValue":374,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":470,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":353,"com.google.gson.stream.JsonWriterTest.testNumbers":223,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":264,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":392,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":69,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":256,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":277,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":77,"com.google.gson.internal.LinkedHashTreeMapTest.testPutOverrides":91,"com.google.gson.functional.CollectionTest.testQueueDeserialization":449,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":560,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":504,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":551,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":236,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":537,"com.google.gson.stream.JsonWriterTest.testDeepNestingObjects":514,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":498,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":202,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":433,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":307,"com.google.gson.functional.MapTest.testRawMapSerialization":103,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":224,"com.google.gson.JsonParserTest.testParseReader":360,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":448,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":206,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":112,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":145,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":332,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":41,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":78,"com.google.gson.functional.PrimitiveTest.testByteSerialization":164,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":258,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":389,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":2,"com.google.gson.ObjectTypeAdapterTest.testSerialize":227,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":200,"com.google.gson.JsonPrimitiveTest.testEqualsIntegerAndBigInteger":53,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":35,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":121,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":125,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":193,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":489,"com.google.gson.functional.MapTest.testMapWithQuotes":237,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":7,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":17,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":435,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":27,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":115,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":6,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":131,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":354,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":186,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":539,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":185,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":157,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":496,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":263,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":431,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":272,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":8,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":37,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":197,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":497,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":16,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":446,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":12,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":46,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":118,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":250,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":285,"com.google.gson.internal.LinkedHashTreeMapTest.testContainsNonComparableKeyReturnsFalse":93,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":220,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":355,"com.google.gson.internal.LinkedHashTreeMapTest.testRemoveRootDoesNotDoubleUnlink":99,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":25,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":203,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":534,"com.google.gson.functional.ObjectTest.testNestedSerialization":146,"com.google.gson.JsonObjectTest.testAddingStringProperties":369,"com.google.gson.internal.LinkedTreeMapTest.testClear":377,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":303,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":151,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":304,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":301,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":243,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":232,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":39,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":320,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":511,"com.google.gson.stream.JsonWriterTest.testUnicodeLineBreaksEscaped":516,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":143,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":439,"com.google.gson.JsonPrimitiveTest.testBoolean":386,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":75,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":552,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":425,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":100,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":423,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":535,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":86,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":207,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":399,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":261,"com.google.gson.functional.CollectionTest.testSetSerialization":217,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":450,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":22,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":182,"com.google.gson.functional.StringTest.testStringValueSerialization":400,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":108,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":265,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":413,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":443,"com.google.gson.MixedStreamTest.testWriteInvalidState":556,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":29,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":262,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":314,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":10,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":126,"com.google.gson.ObjectTypeAdapterTest.testDeserialize":372,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":273,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":363,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":543,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":61,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":478,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":194,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":3,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":336,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":453,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":119,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":482},"transformations":[{"exception":"java.io.IOException","condition":{"position":"com.google.gson.TreeTypeAdapter:55","type":"CtInvocationImpl","sourcecode":"value.isJsonNull()"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65],"tindex":"2d5a7b8b-3e4c-11e6-9058-313f1a52404b","method":{"position":"com.google.gson.internal.bind.TypeAdapters:680","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, com.google.gson.JsonElement value) throws java.io.IOException {\n    if (value.isJsonNull()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239614057/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value.isJsonNull()) {\n                {\n                    if ((value == null) || (value.isJsonNull())) {\n                        out.nullValue();\n                    } else if (value.isJsonPrimitive()) {\n                        com.google.gson.JsonPrimitive com.google.gson.JsonPrimitive = value.getAsJsonPrimitive();\n                        if (primitive.isNumber()) {\n                            out.value(primitive.getAsNumber());\n                        } else if (primitive.isBoolean()) {\n                            out.value(primitive.getAsBoolean());\n                        } else {\n                            out.value(primitive.getAsString());\n                        }\n                    } else if (value.isJsonArray()) {\n                        out.beginArray();\n                        for (com.google.gson.JsonElement com.google.gson.JsonElement : value.getAsJsonArray()) {\n                            write(out, e);\n                        }\n                        out.endArray();\n                    } else if (value.isJsonObject()) {\n                        out.beginObject();\n                        for (java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> : value.getAsJsonObject().entrySet()) {\n                            out.name(e.getKey());\n                            write(out, e.getValue());\n                        }\n                        out.endObject();\n                    } else {\n                        throw new java.lang.IllegalArgumentException((\"Couldn't write \" + (value.getClass())));\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239614057/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.FieldNamingPolicy:155","type":"CtUnaryOperatorImpl","sourcecode":"!(java.lang.Character.isUpperCase(firstCharacter))"},"failures":[],"tindex":"2d5af0bc-3e4c-11e6-9058-1bb84d47c2eb","method":{"position":"com.google.gson.FieldNamingPolicy:163","type":"CtMethodImpl","sourcecode":"private static java.lang.String modifyString(char firstCharacter, java.lang.String srcString, int indexOfSubstring) {\n    if (!(java.lang.Character.isUpperCase(firstCharacter))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239614057/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return indexOfSubstring < (srcString.length()) ? firstCharacter + (srcString.substring(indexOfSubstring)) : java.lang.String.valueOf(firstCharacter);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"firstCharacter":"firstCharacter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[66,67,1,68,69,4,70,71,72,73,74,75,76,33,34,35,37,38,77,46,50,78,79],"tindex":"2d5af0bd-3e4c-11e6-9058-7b80e0157cb0","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:144","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239614057/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:115","type":"CtInvocationImpl","sourcecode":"primitive.isNumber()"},"failures":[69,70,80,81,82,83],"tindex":"2d5af0be-3e4c-11e6-9058-63e02caad292","method":{"position":"com.google.gson.JsonPrimitive:333","type":"CtMethodImpl","sourcecode":"private static boolean isIntegral(com.google.gson.JsonPrimitive primitive) {\n    if (primitive.isNumber()) {\n        {\n            if ((primitive.java.lang.Object) instanceof java.lang.Number) {\n                java.lang.Number java.lang.Number = ((java.lang.Number)(primitive.java.lang.Object));\n                return ((((number instanceof java.math.BigInteger) || (number instanceof java.lang.Long)) || (number instanceof java.lang.Integer)) || (number instanceof java.lang.Short)) || (number instanceof java.lang.Byte);\n            } \n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239614057/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"primitive"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"2d5b17cf-3e4c-11e6-9058-15736895754d","method":{"position":"com.google.gson.Gson:719","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.lang.String json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            if (json == null) {\n                return null;\n            } \n            java.io.StringReader java.io.StringReader = new java.io.StringReader(json);\n            T T = ((T)(fromJson(reader, typeOfT)));\n            return target;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239614057/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"2d5b17d0-3e4c-11e6-9058-c7ecd50f2234","method":{"position":"com.google.gson.Gson:847","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(com.google.gson.JsonElement json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239614057/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:578","type":"CtBinaryOperatorImpl","sourcecode":"root == null"},"failures":[],"tindex":"2d5b17d1-3e4c-11e6-9058-35b0f012b8b5","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:401","type":"CtMethodImpl","sourcecode":"private void rotateLeft(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239614057/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivotLeft;\n            if (pivotLeft != null) {\n                pivotLeft.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            } \n            replaceInParent(root, pivot);\n            pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot;\n            root.int = (java.lang.Math.max((left != null ? left.int : 0), (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n            pivot.int = (java.lang.Math.max(root.int, (pivotRight != null ? pivotRight.int : 0))) + 1;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:243","type":"CtBinaryOperatorImpl","sourcecode":"annotation != null"},"failures":[84,85,86,87,88,89],"tindex":"2d5b3ee2-3e4c-11e6-9058-6b1482d3f8b2","method":{"position":"com.google.gson.internal.Excluder:242","type":"CtMethodImpl","sourcecode":"private boolean isValidUntil(com.google.gson.annotations.Until annotation) {\n    if (annotation != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239614057/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (annotation != null) {\n                double double = annotation.value();\n                if (annotationVersion <= (double)) {\n                    return false;\n                } \n            } \n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:167","type":"CtUnaryOperatorImpl","sourcecode":"!create"},"failures":[90,91,92,93,94,95,96,97,98,99],"tindex":"2d5b3ee3-3e4c-11e6-9058-1948c5bd3aed","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:131","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedHashTreeMap.Node<K, V> find(K key, boolean create) {\n    if (!create) {\n        {\n            java.util.Comparator<? super K> java.util.Comparator<? super K> = com.google.gson.internal.LinkedHashTreeMap.this.java.util.Comparator<? super K>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[] com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[] = com.google.gson.internal.LinkedHashTreeMap.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[];\n            int int = com.google.gson.internal.LinkedHashTreeMap.secondaryHash(key.hashCode());\n            int int = hash & ((table.int) - 1);\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = table[index];\n            int int = 0;\n            if (nearest != null) {\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                java.lang.Comparable<java.lang.Object> java.lang.Comparable<java.lang.Object> = comparator == (com.google.gson.internal.LinkedHashTreeMap.com.google.gson.internal.LinkedHashTreeMap.java.util.Comparator<java.lang.Comparable>) ? ((java.lang.Comparable<java.lang.Object>)(key)) : null;\n                while (true) {\n                    comparison = comparableKey != null ? comparableKey.compareTo(nearest.K) : comparator.compare(key, nearest.K);\n                    if (comparison == 0) {\n                        return nearest;\n                    } \n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = comparison < 0 ? nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> : nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    if (child == null) {\n                        break;\n                    } \n                    nearest = child;\n                }\n            } \n            if (!create) {\n                return null;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            if (nearest == null) {\n                if ((comparator == (com.google.gson.internal.LinkedHashTreeMap.com.google.gson.internal.LinkedHashTreeMap.java.util.Comparator<java.lang.Comparable>)) && (!(key instanceof java.lang.Comparable))) {\n                    throw new java.lang.ClassCastException(((key.getClass().getName()) + \" is not Comparable\"));\n                } \n                created = new com.google.gson.internal.LinkedHashTreeMap.Node<K, V>(nearest , key , hash , header , header.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>);\n                table[index] = created;\n            } else {\n                created = new com.google.gson.internal.LinkedHashTreeMap.Node<K, V>(nearest , key , hash , header , header.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>);\n                if (comparison < 0) {\n                    nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = created;\n                } else {\n                    nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = created;\n                }\n                rebalance(nearest, true);\n            }\n            if (((int)++) > (int)) {\n                doubleCapacity();\n            } \n            (int)++;\n            return created;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239614057/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"create":"create"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[100,0,101,102,67,103,104,105,106,107,108,109,110,111,112,113,114,115,4,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,6,7,10,134,135,136,137,20,21,22,25,26,27,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,31,32,33,39,174,175,176,177,178,179,180,181,182,183,184,185,186,46,187,188,189,190,191,192,193,194,195,196,84,197,87,89,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,50,219,220,221,53,54,222,223,224,225,226,56,227,60,61,62],"tindex":"2d5b65f4-3e4c-11e6-9058-e1254519a935","method":{"position":"com.google.gson.stream.JsonWriter:490","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            writeDeferredName();\n            java.lang.String java.lang.String = value.toString();\n            if ((!(boolean)) && (((string.equals(\"-Infinity\")) || (string.equals(\"Infinity\"))) || (string.equals(\"NaN\")))) {\n                throw new java.lang.IllegalArgumentException((\"Numeric values must be finite, but was \" + value));\n            } \n            beforeValue(false);\n            java.io.Writer.append(string);\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239614057/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"2d5b8d05-3e4c-11e6-9058-cf47f557b3f2","method":{"position":"com.google.gson.JsonObject:111","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Character value) {\n    if (property == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239614057/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            add(property, createJsonElement(value));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[228],"tindex":"2d5bb416-3e4c-11e6-9058-2b26fd994d05","method":{"position":"com.google.gson.internal.bind.TypeAdapters:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239614057/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239614057/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    out.value(value);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[228,14,41],"tindex":"2d5bb417-3e4c-11e6-9058-bf25b1bbf7b5","method":{"position":"com.google.gson.Gson:532","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239614057/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src != null) {\n                {\n                    java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n                    toJson(src, typeOfSrc, writer);\n                    return writer.toString();\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239614057/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"2d5bb418-3e4c-11e6-9058-7560e008b19f","method":{"position":"com.google.gson.Gson:576","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        {\n            try {\n                com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                toJson(src, typeOfSrc, jsonWriter);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239614057/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:159","type":"CtBinaryOperatorImpl","sourcecode":"a == b"},"failures":[],"tindex":"2d5bb419-3e4c-11e6-9058-19be098f9990","method":{"position":"com.google.gson.internal.LinkedTreeMap:207","type":"CtMethodImpl","sourcecode":"private boolean equal(java.lang.Object a, java.lang.Object b) {\n    if (!(b instanceof java.lang.reflect.ParameterizedType)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239614057/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (a == b) {\n                {\n                    return (a == b) || ((a != null) && (a.equals(b)));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239614057/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"a","b":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:297","type":"CtBinaryOperatorImpl","sourcecode":"(value) instanceof java.lang.Number"},"failures":[229,230,231,232,233,101,234,235,236,237,238,239,240,66,241,242,67,243,103,244,245,1,105,68,106,108,109,111,246,247,248,249,250,113,251,115,69,4,252,70,71,72,73,253,116,254,74,75,117,255,76,256,118,257,258,259,119,260,261,120,121,122,262,263,264,265,266,267,268,129,131,132,133,8,269,270,271,272,136,137,273,274,275,276,277,17,18,19,22,23,28,138,139,140,278,141,279,280,143,144,145,146,281,147,148,282,149,283,31,32,33,34,35,37,38,284,39,174,175,285,286,287,176,177,77,288,178,180,181,182,184,185,289,290,291,292,293,294,295,186,187,188,189,191,192,193,194,296,297,47,298,299,300,197,198,301,199,302,303,200,304,305,201,202,203,204,205,206,208,209,306,211,307,212,308,309,310,215,311,216,312,217,313,314,315,50,316,317,318,319,219,220,221,78,224,225,320,321,227,322],"tindex":"2d5bdb2a-3e4c-11e6-9058-916ec214cd7b","method":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:74","type":"CtMethodImpl","sourcecode":"private java.lang.reflect.Type getRuntimeTypeIfMoreSpecific(java.lang.reflect.Type type, java.lang.Object value) {\n    if (value instanceof java.lang.Number) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239614057/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (value instanceof java.lang.Number) {\n                {\n                    if ((value != null) && (((type == (java.lang.Object.java.lang.Object.java.lang.Class)) || (type instanceof java.lang.reflect.TypeVariable<?>)) || (type instanceof java.lang.Class<?>))) {\n                        type = value.getClass();\n                    } \n                    return type;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239614057/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:501","type":"CtBinaryOperatorImpl","sourcecode":"typeAdapter instanceof com.google.gson.TypeAdapter<?>"},"failures":[27,323,45,324,325,47,50,51,326,321],"tindex":"2d5bdb2b-3e4c-11e6-9058-87573e5fd41d","method":{"position":"com.google.gson.TreeTypeAdapter:103","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newTypeHierarchyFactory(java.lang.Class<?> hierarchyType, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n        {\n            return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , null , false , hierarchyType);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239614057/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:79","type":"CtUnaryOperatorImpl","sourcecode":"!(json instanceof com.google.gson.JsonPrimitive)"},"failures":[],"tindex":"2d5bdb2c-3e4c-11e6-9058-09551030a607","method":{"position":"com.google.gson.Gson:127","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonParseException {\n    if (json == null) {\n        {\n            if (!(json instanceof com.google.gson.JsonPrimitive)) {\n                {\n                    return ((T)(fromJson(json, typeOfT)));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239614057/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonParseException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239614057/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:168","type":"CtUnaryOperatorImpl","sourcecode":"!(b instanceof java.lang.reflect.ParameterizedType)"},"failures":[],"tindex":"2d5bdb2d-3e4c-11e6-9058-4d8f1ae1f12d","method":{"position":"com.google.gson.internal.$Gson$Types:151","type":"CtMethodImpl","sourcecode":"static boolean equal(java.lang.Object a, java.lang.Object b) {\n    return (a == b) || ((a != null) && (a.equals(b)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"2d5c023e-3e4c-11e6-9058-2730f21979e4","method":{"position":"com.google.gson.internal.bind.TypeAdapters:297","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239614057/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:154","type":"CtUnaryOperatorImpl","sourcecode":"!create"},"failures":[327,328,329,231,330,232,331,332,333,334,335,336,337,338,339,340,341,342,1,68,343,2,3,115,69,4,252,70,71,72,73,74,75,76,344,10,136,345,346,19,20,21,25,31,32,33,34,35,37,38,347,348,349,350,351,352,353,77,288,354,40,46,355,356,357,358,50,359,219,220,360,361,221,78,362,57,363,364,365,366,367,368,369,58,370,371,372,62,63,65,373,374,375,376,377,378,379,380,381,382,383,384,385],"tindex":"2d5c023f-3e4c-11e6-9058-89429eadc5c0","method":{"position":"com.google.gson.internal.LinkedTreeMap:121","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedTreeMap.Node<K, V> find(K key, boolean create) {\n    if (!create) {\n        {\n            java.util.Comparator<? super K> java.util.Comparator<? super K> = com.google.gson.internal.LinkedTreeMap.this.java.util.Comparator<? super K>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            int int = 0;\n            if (nearest != null) {\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                java.lang.Comparable<java.lang.Object> java.lang.Comparable<java.lang.Object> = comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>) ? ((java.lang.Comparable<java.lang.Object>)(key)) : null;\n                while (true) {\n                    comparison = comparableKey != null ? comparableKey.compareTo(nearest.K) : comparator.compare(key, nearest.K);\n                    if (comparison == 0) {\n                        return nearest;\n                    } \n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = comparison < 0 ? nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> : nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    if (child == null) {\n                        break;\n                    } \n                    nearest = child;\n                }\n            } \n            if (!create) {\n                return null;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.this.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            if (nearest == null) {\n                if ((comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>)) && (!(key instanceof java.lang.Comparable))) {\n                    throw new java.lang.ClassCastException(((key.getClass().getName()) + \" is not Comparable\"));\n                } \n                created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n            } else {\n                created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                if (comparison < 0) {\n                    nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                } else {\n                    nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                }\n                rebalance(nearest, true);\n            }\n            (int)++;\n            (int)++;\n            return created;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239614057/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"create":"create"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:189","type":"CtUnaryOperatorImpl","sourcecode":"!(b instanceof java.lang.reflect.WildcardType)"},"failures":[],"tindex":"2d5c2950-3e4c-11e6-9058-1f1e8ad589ee","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:223","type":"CtMethodImpl","sourcecode":"private boolean equal(java.lang.Object a, java.lang.Object b) {\n    if (!(b instanceof java.lang.reflect.WildcardType)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239614057/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (a == b) || ((a != null) && (a.equals(b)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.ObjectTypeAdapter:95","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[229,230,231,232,236,66,242,67,1,105,68,106,107,108,109,110,111,246,247,112,248,249,250,113,251,114,115,69,4,252,70,71,72,73,253,116,254,74,75,117,255,76,122,124,125,126,127,128,264,265,266,267,268,129,131,132,133,134,272,135,136,137,273,274,275,276,277,19,21,22,138,139,140,278,141,279,280,142,143,144,145,146,281,147,148,282,149,31,32,33,34,35,37,38,39,174,175,285,286,287,176,177,77,288,180,181,185,289,291,292,293,294,295,186,187,188,189,190,191,192,193,194,195,196,299,84,197,87,89,198,199,302,303,200,201,202,204,205,206,208,209,306,211,212,215,216,217,313,314,315,50,316,317,318,319,219,220,221,224,225,321,227],"tindex":"2d5c2951-3e4c-11e6-9058-910fbf9c63eb","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n@java.lang.Override\nvoid write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value == null) {\n        {\n            java.lang.Object java.lang.Object = field.get(value);\n            com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n            t.write(writer, fieldValue);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239614057/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:274","type":"CtBinaryOperatorImpl","sourcecode":"target instanceof java.lang.String"},"failures":[69,4,252,70,7,80,136,221,386,81,82,362,367,58,387],"tindex":"2d5c2952-3e4c-11e6-9058-9fd4d57ed0a1","method":{"position":"com.google.gson.JsonPrimitive:273","type":"CtMethodImpl","sourcecode":"private static boolean isPrimitiveOrString(java.lang.Object target) {\n    if (target instanceof java.lang.String) {\n        {\n            if (target instanceof java.lang.String) {\n                return true;\n            } \n            java.lang.Class<?> java.lang.Class<?> = target.getClass();\n            for (java.lang.Class<?> java.lang.Class<?> : com.google.gson.JsonPrimitive.com.google.gson.JsonPrimitive.java.lang.Class<?>[]) {\n                if (standardPrimitive.isAssignableFrom(classOfPrimitive)) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239614057/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"target":"target"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:250","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[155,158,159,165,169,171,226],"tindex":"2d5c5063-3e4c-11e6-9058-f7a63a791d96","method":{"position":"com.google.gson.Gson:273","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> floatAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239614057/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return ((float)(in.nextDouble()));\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    float float = value.floatValue();\n                    checkValidFloatingPoint(floatValue);\n                    out.value(value);\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[229,230,231,232,233,101,234,235,236,237,238,66,242,67,103,244,245,1,105,68,106,108,388,247,248,249,250,251,69,4,70,71,72,73,253,254,74,75,117,255,76,256,118,258,259,260,261,121,122,263,264,265,266,267,268,269,270,271,389,136,137,138,139,278,141,279,280,143,144,146,147,149,390,391,392,32,33,393,394,395,396,397,284,398,399,400,39,174,175,286,287,77,181,185,290,46,191,197,401,198,301,199,302,303,200,304,305,201,202,206,306,211,307,308,309,310,215,311,216,312,313,314,315,50,219,220,221,78,224,225,320,321,402],"tindex":"2d5c5064-3e4c-11e6-9058-3b2c02fcfc39","method":{"position":"com.google.gson.internal.bind.TypeAdapters:361","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239614057/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"2d5c5065-3e4c-11e6-9058-adb84b20a9c6","method":{"position":"com.google.gson.JsonObject:89","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Number value) {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239614057/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            add(property, createJsonElement(value));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:168","type":"CtUnaryOperatorImpl","sourcecode":"!(b instanceof java.lang.reflect.ParameterizedType)"},"failures":[],"tindex":"2d5c5066-3e4c-11e6-9058-5f3718a3957b","method":{"position":"com.google.gson.internal.LinkedTreeMap:207","type":"CtMethodImpl","sourcecode":"private boolean equal(java.lang.Object a, java.lang.Object b) {\n    if (!(b instanceof java.lang.reflect.ParameterizedType)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239614057/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (a == b) {\n                {\n                    return (a == b) || ((a != null) && (a.equals(b)));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239614057/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:141","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.WildcardType"},"failures":[],"tindex":"2d5c5067-3e4c-11e6-9058-fb5c45d4940d","method":{"position":"com.google.gson.internal.ConstructorConstructor:200","type":"CtMethodImpl","sourcecode":"private <T>com.google.gson.internal.ObjectConstructor<T> newUnsafeAllocator(final java.lang.reflect.Type type, final java.lang.Class<? super T> rawType) {\n    if (type instanceof java.lang.reflect.WildcardType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239614057/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new com.google.gson.internal.ObjectConstructor<T>() {\n                private final com.google.gson.internal.UnsafeAllocator unsafeAllocator = com.google.gson.internal.UnsafeAllocator.create();\n\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                public T construct() {\n                    try {\n                        java.lang.Object java.lang.Object = com.google.gson.internal.UnsafeAllocator.newInstance(rawType);\n                        return ((T)(newInstance));\n                    } catch (java.lang.Exception e) {\n                        throw new java.lang.RuntimeException((((\"Unable to invoke no-args constructor for \" + type) + \". \") + \"Register an InstanceCreator with Gson for this type may fix this problem.\") , e);\n                    }\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[68,70,72,74,75,76,34,35,36,37,38,77,288,46,359],"tindex":"2d5c7778-3e4c-11e6-9058-1de682f2a16e","method":{"position":"com.google.gson.Gson:468","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src) {\n    if (src == null) {\n        {\n            if (src == null) {\n                {\n                    if (src == null) {\n                        return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n                    } \n                    return toJsonTree(src, src.getClass());\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239614057/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239614057/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"2d5c7779-3e4c-11e6-9058-afee6376e2be","method":{"position":"com.google.gson.Gson:532","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239614057/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src != null) {\n                {\n                    java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n                    toJson(src, typeOfSrc, writer);\n                    return writer.toString();\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239614057/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[403,162],"tindex":"2d5c777a-3e4c-11e6-9058-1bea0913aac2","method":{"position":"com.google.gson.Gson:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            out.value(value.toString());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239614057/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:297","type":"CtBinaryOperatorImpl","sourcecode":"(value) instanceof java.lang.Number"},"failures":[],"tindex":"2d5c777b-3e4c-11e6-9058-9d3599d0b764","method":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:74","type":"CtMethodImpl","sourcecode":"private java.lang.reflect.Type getRuntimeTypeIfMoreSpecific(java.lang.reflect.Type type, java.lang.Object value) {\n    if (value instanceof java.lang.Number) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239614057/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (value instanceof java.lang.Number) {\n                {\n                    if ((value != null) && (((type == (java.lang.Object.java.lang.Object.java.lang.Class)) || (type instanceof java.lang.reflect.TypeVariable<?>)) || (type instanceof java.lang.Class<?>))) {\n                        type = value.getClass();\n                    } \n                    return type;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239614057/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[367],"tindex":"2d5c777c-3e4c-11e6-9058-4f82bc1960f8","method":{"position":"com.google.gson.JsonObject:100","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Boolean value) {\n    if (property == null) {\n        {\n            add(property, createJsonElement(value));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239614057/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:314","type":"CtBinaryOperatorImpl","sourcecode":"replacement != null"},"failures":[90],"tindex":"2d5c9e8d-3e4c-11e6-9058-7f80c3adc9fe","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:311","type":"CtMethodImpl","sourcecode":"private void replaceInParent(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node, com.google.gson.internal.LinkedHashTreeMap.Node<K, V> replacement) {\n    if (replacement != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239614057/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            if (replacement != null) {\n                replacement.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = parent;\n            } \n            if (parent != null) {\n                if ((parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) == node) {\n                    parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = replacement;\n                } else {\n                    assert (parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) == node;\n                    parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = replacement;\n                }\n            } else {\n                int int = (node.int) & ((com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[].int) - 1);\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[][index] = replacement;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"replacement":"replacement"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"2d5c9e8e-3e4c-11e6-9058-89181f6f53eb","method":{"position":"com.google.gson.Gson:468","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src) {\n    if (src == null) {\n        {\n            if (src == null) {\n                {\n                    if (src == null) {\n                        return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n                    } \n                    return toJsonTree(src, src.getClass());\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239614057/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239614057/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:103","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.GenericArrayType"},"failures":[404,327,405,332,406,333,334,335,234,336,235,337,236,407,338,408,102,339,409,239,410,66,241,242,67,243,340,244,411,341,245,342,412,104,1,109,110,413,414,111,246,247,112,248,415,249,250,113,416,417,418,419,115,4,72,116,74,420,421,117,76,120,422,264,265,266,267,268,129,130,131,132,133,423,424,8,228,425,134,271,135,426,427,273,274,275,276,428,277,429,18,346,19,430,28,278,431,432,142,281,148,282,433,390,434,31,435,436,32,33,34,35,37,38,352,437,39,438,439,286,287,176,177,77,288,180,184,185,289,291,292,295,186,187,188,189,192,193,194,195,196,296,297,47,298,440,300,199,302,303,441,211,307,213,442,443,308,214,310,215,444,445,311,446,447,448,217,218,358,449,313,314,315,316,450,318,219,220,78,451,226,320,452,227],"tindex":"2d5c9e8f-3e4c-11e6-9058-592b29457283","method":{"position":"com.google.gson.internal.ConstructorConstructor:128","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nprivate <T>com.google.gson.internal.ObjectConstructor<T> newDefaultImplementationConstructor(final java.lang.reflect.Type type, java.lang.Class<? super T> rawType) {\n    if (type instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239614057/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (type instanceof java.lang.reflect.GenericArrayType) {\n                {\n                    if (java.util.Collection.java.util.Collection.java.lang.Class.isAssignableFrom(rawType)) {\n                        if (java.util.SortedSet.java.util.SortedSet.java.lang.Class.isAssignableFrom(rawType)) {\n                            return new com.google.gson.internal.ObjectConstructor<T>() {\n                                public T construct() {\n                                    return ((T)(new java.util.TreeSet<java.lang.Object>()));\n                                }\n                            };\n                        } else if (java.util.EnumSet.java.util.EnumSet.java.lang.Class.isAssignableFrom(rawType)) {\n                            return new com.google.gson.internal.ObjectConstructor<T>() {\n                                @java.lang.SuppressWarnings(value = \"rawtypes\")\n                                public T construct() {\n                                    if (type instanceof java.lang.reflect.ParameterizedType) {\n                                        java.lang.reflect.Type java.lang.reflect.Type = ((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0];\n                                        if (elementType instanceof java.lang.Class) {\n                                            return ((T)(java.util.EnumSet.noneOf(((java.lang.Class)(elementType)))));\n                                        } else {\n                                            throw new com.google.gson.JsonIOException((\"Invalid EnumSet type: \" + (type.toString())));\n                                        }\n                                    } else {\n                                        throw new com.google.gson.JsonIOException((\"Invalid EnumSet type: \" + (type.toString())));\n                                    }\n                                }\n                            };\n                        } else if (java.util.Set.java.util.Set.java.lang.Class.isAssignableFrom(rawType)) {\n                            return new com.google.gson.internal.ObjectConstructor<T>() {\n                                public T construct() {\n                                    return ((T)(new java.util.LinkedHashSet<java.lang.Object>()));\n                                }\n                            };\n                        } else if (java.util.Queue.java.util.Queue.java.lang.Class.isAssignableFrom(rawType)) {\n                            return new com.google.gson.internal.ObjectConstructor<T>() {\n                                public T construct() {\n                                    return ((T)(new java.util.LinkedList<java.lang.Object>()));\n                                }\n                            };\n                        } else {\n                            return new com.google.gson.internal.ObjectConstructor<T>() {\n                                public T construct() {\n                                    return ((T)(new java.util.ArrayList<java.lang.Object>()));\n                                }\n                            };\n                        }\n                    } \n                    if (java.util.Map.java.util.Map.java.lang.Class.isAssignableFrom(rawType)) {\n                        if (java.util.SortedMap.java.util.SortedMap.java.lang.Class.isAssignableFrom(rawType)) {\n                            return new com.google.gson.internal.ObjectConstructor<T>() {\n                                public T construct() {\n                                    return ((T)(new java.util.TreeMap<java.lang.Object, java.lang.Object>()));\n                                }\n                            };\n                        } else if ((type instanceof java.lang.reflect.ParameterizedType) && (!(java.lang.String.java.lang.String.java.lang.Class.isAssignableFrom(com.google.gson.reflect.TypeToken.get(((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0]).getRawType())))) {\n                            return new com.google.gson.internal.ObjectConstructor<T>() {\n                                public T construct() {\n                                    return ((T)(new java.util.LinkedHashMap<java.lang.Object, java.lang.Object>()));\n                                }\n                            };\n                        } else {\n                            return new com.google.gson.internal.ObjectConstructor<T>() {\n                                public T construct() {\n                                    return ((T)(new com.google.gson.internal.LinkedTreeMap<java.lang.String, java.lang.Object>()));\n                                }\n                            };\n                        }\n                    } \n                    return null;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239614057/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:98","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"2d5cc5a0-3e4c-11e6-9058-21b95ff8bdab","method":{"position":"com.google.gson.internal.ConstructorConstructor:128","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nprivate <T>com.google.gson.internal.ObjectConstructor<T> newDefaultImplementationConstructor(final java.lang.reflect.Type type, java.lang.Class<? super T> rawType) {\n    if (type instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239614057/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (type instanceof java.lang.reflect.GenericArrayType) {\n                {\n                    if (java.util.Collection.java.util.Collection.java.lang.Class.isAssignableFrom(rawType)) {\n                        if (java.util.SortedSet.java.util.SortedSet.java.lang.Class.isAssignableFrom(rawType)) {\n                            return new com.google.gson.internal.ObjectConstructor<T>() {\n                                public T construct() {\n                                    return ((T)(new java.util.TreeSet<java.lang.Object>()));\n                                }\n                            };\n                        } else if (java.util.EnumSet.java.util.EnumSet.java.lang.Class.isAssignableFrom(rawType)) {\n                            return new com.google.gson.internal.ObjectConstructor<T>() {\n                                @java.lang.SuppressWarnings(value = \"rawtypes\")\n                                public T construct() {\n                                    if (type instanceof java.lang.reflect.ParameterizedType) {\n                                        java.lang.reflect.Type java.lang.reflect.Type = ((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0];\n                                        if (elementType instanceof java.lang.Class) {\n                                            return ((T)(java.util.EnumSet.noneOf(((java.lang.Class)(elementType)))));\n                                        } else {\n                                            throw new com.google.gson.JsonIOException((\"Invalid EnumSet type: \" + (type.toString())));\n                                        }\n                                    } else {\n                                        throw new com.google.gson.JsonIOException((\"Invalid EnumSet type: \" + (type.toString())));\n                                    }\n                                }\n                            };\n                        } else if (java.util.Set.java.util.Set.java.lang.Class.isAssignableFrom(rawType)) {\n                            return new com.google.gson.internal.ObjectConstructor<T>() {\n                                public T construct() {\n                                    return ((T)(new java.util.LinkedHashSet<java.lang.Object>()));\n                                }\n                            };\n                        } else if (java.util.Queue.java.util.Queue.java.lang.Class.isAssignableFrom(rawType)) {\n                            return new com.google.gson.internal.ObjectConstructor<T>() {\n                                public T construct() {\n                                    return ((T)(new java.util.LinkedList<java.lang.Object>()));\n                                }\n                            };\n                        } else {\n                            return new com.google.gson.internal.ObjectConstructor<T>() {\n                                public T construct() {\n                                    return ((T)(new java.util.ArrayList<java.lang.Object>()));\n                                }\n                            };\n                        }\n                    } \n                    if (java.util.Map.java.util.Map.java.lang.Class.isAssignableFrom(rawType)) {\n                        if (java.util.SortedMap.java.util.SortedMap.java.lang.Class.isAssignableFrom(rawType)) {\n                            return new com.google.gson.internal.ObjectConstructor<T>() {\n                                public T construct() {\n                                    return ((T)(new java.util.TreeMap<java.lang.Object, java.lang.Object>()));\n                                }\n                            };\n                        } else if ((type instanceof java.lang.reflect.ParameterizedType) && (!(java.lang.String.java.lang.String.java.lang.Class.isAssignableFrom(com.google.gson.reflect.TypeToken.get(((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0]).getRawType())))) {\n                            return new com.google.gson.internal.ObjectConstructor<T>() {\n                                public T construct() {\n                                    return ((T)(new java.util.LinkedHashMap<java.lang.Object, java.lang.Object>()));\n                                }\n                            };\n                        } else {\n                            return new com.google.gson.internal.ObjectConstructor<T>() {\n                                public T construct() {\n                                    return ((T)(new com.google.gson.internal.LinkedTreeMap<java.lang.String, java.lang.Object>()));\n                                }\n                            };\n                        }\n                    } \n                    return null;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239614057/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"2d5cecb1-3e4c-11e6-9058-c713c4e4463a","method":{"position":"com.google.gson.Gson:127","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonParseException {\n    if (json == null) {\n        {\n            if (!(json instanceof com.google.gson.JsonPrimitive)) {\n                {\n                    return ((T)(fromJson(json, typeOfT)));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239614057/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonParseException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239614057/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"2d5cecb2-3e4c-11e6-9058-67ba29414b15","method":{"position":"com.google.gson.Gson:285","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239614057/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239614057/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    float float = value.floatValue();\n                    checkValidFloatingPoint(floatValue);\n                    out.value(value);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:298","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[453,454,455],"tindex":"2d5cecb3-3e4c-11e6-9058-556a66463c17","method":{"position":"com.google.gson.stream.JsonWriter:461","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(double value) throws java.io.IOException {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                throw new java.lang.IllegalArgumentException((\"Numeric values must be finite, but was \" + value));\n            } \n            writeDeferredName();\n            beforeValue(false);\n            java.io.Writer.append(java.lang.Double.toString(value));\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239614057/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:726","type":"CtBinaryOperatorImpl","sourcecode":"value == 0"},"failures":[456,457,458,459,460,461,462,463,464],"tindex":"2d5cecb4-3e4c-11e6-9058-497bc920e872","method":{"position":"com.google.gson.stream.JsonWriter:476","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(long value) throws java.io.IOException {\n    if (value == 0) {\n        {\n            writeDeferredName();\n            beforeValue(false);\n            java.io.Writer.write(java.lang.Long.toString(value));\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239614057/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:120","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonNull"},"failures":[],"tindex":"2d5d13c5-3e4c-11e6-9058-e192fb0161c7","method":{"position":"com.google.gson.JsonArray:329","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonNull) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239614057/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (o == (com.google.gson.JsonArray.this)) || ((o instanceof com.google.gson.JsonArray) && (((com.google.gson.JsonArray)(o)).java.util.List<com.google.gson.JsonElement>.equals(java.util.List<com.google.gson.JsonElement>)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:94","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.Class"},"failures":[465,328,329,231,330,232,331,332,0,466,1,109,467,110,413,468,414,111,246,469,470,471,472,13,273,275,17,429,18,345,346,473,19,20,21,474,22,23,24,430,25,475,26,28,476,34,35,36,37,38,39,438,353,354,477,40,42,478,43,44,479,45,325,46,480,481,355,482,441,483,484,485,204,205,486,48,487,488,49,359,489,321,490,56,402,491,463,464],"tindex":"2d5d13c6-3e4c-11e6-9058-15a26aa31e05","method":{"position":"com.google.gson.GsonBuilder:447","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\npublic com.google.gson.GsonBuilder registerTypeAdapter(java.lang.reflect.Type type, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof java.lang.Class) {\n        {\n            com.google.gson.internal.$Gson$Preconditions.checkArgument(((((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) || (typeAdapter instanceof com.google.gson.InstanceCreator<?>)) || (typeAdapter instanceof com.google.gson.TypeAdapter<?>)));\n            if (typeAdapter instanceof com.google.gson.InstanceCreator<?>) {\n                java.util.Map<java.lang.reflect.Type, com.google.gson.InstanceCreator<?>>.put(type, ((com.google.gson.InstanceCreator)(typeAdapter)));\n            } \n            if ((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) {\n                com.google.gson.reflect.TypeToken<?> com.google.gson.reflect.TypeToken<?> = com.google.gson.reflect.TypeToken.get(type);\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.TreeTypeAdapter.newFactoryWithMatchRawType(typeToken, typeAdapter));\n            } \n            if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.internal.bind.TypeAdapters.newFactory(com.google.gson.reflect.TypeToken.get(type), ((com.google.gson.TypeAdapter)(typeAdapter))));\n            } \n            return com.google.gson.GsonBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239614057/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"typeAdapter"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"2d5d3ad7-3e4c-11e6-9058-1752c1c8ba43","method":{"position":"com.google.gson.Gson:591","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        {\n            if (src != null) {\n                {\n                    if (src == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239614057/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new com.google.gson.JsonIOException();\n                    } else {\n                        {\n                            com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = getAdapter(com.google.gson.reflect.TypeToken.get(typeOfSrc));\n                            boolean boolean = writer.isLenient();\n                            writer.setLenient(true);\n                            boolean boolean = writer.isHtmlSafe();\n                            writer.setHtmlSafe(boolean);\n                            boolean boolean = writer.getSerializeNulls();\n                            writer.setSerializeNulls(boolean);\n                            try {\n                                ((com.google.gson.TypeAdapter<java.lang.Object>)(adapter)).write(writer, src);\n                            } catch (java.io.IOException e) {\n                                throw new com.google.gson.JsonIOException(e);\n                            } finally {\n                                writer.setLenient(oldLenient);\n                                writer.setHtmlSafe(oldHtmlSafe);\n                                writer.setSerializeNulls(oldSerializeNulls);\n                            }\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239614057/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239614057/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[],"tindex":"2d5d3ad8-3e4c-11e6-9058-7193dec5e628","method":{"position":"com.google.gson.Gson:591","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        {\n            if (src != null) {\n                {\n                    if (src == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239614057/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new com.google.gson.JsonIOException();\n                    } else {\n                        {\n                            com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = getAdapter(com.google.gson.reflect.TypeToken.get(typeOfSrc));\n                            boolean boolean = writer.isLenient();\n                            writer.setLenient(true);\n                            boolean boolean = writer.isHtmlSafe();\n                            writer.setHtmlSafe(boolean);\n                            boolean boolean = writer.getSerializeNulls();\n                            writer.setSerializeNulls(boolean);\n                            try {\n                                ((com.google.gson.TypeAdapter<java.lang.Object>)(adapter)).write(writer, src);\n                            } catch (java.io.IOException e) {\n                                throw new com.google.gson.JsonIOException(e);\n                            } finally {\n                                writer.setLenient(oldLenient);\n                                writer.setHtmlSafe(oldHtmlSafe);\n                                writer.setSerializeNulls(oldSerializeNulls);\n                            }\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239614057/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239614057/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[46,359],"tindex":"2d5d61e9-3e4c-11e6-9058-776c53c4b594","method":{"position":"com.google.gson.Gson:133","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src) {\n    if (src != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239614057/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return toJsonTree(src);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[229,230,403,231,232,233,101,234,235,236,237,238,102,240,66,242,67,243,103,244,245,104,1,105,106,107,108,2,3,388,109,110,111,246,247,112,248,249,250,113,251,114,115,4,253,116,254,117,255,256,118,258,259,260,261,121,122,263,124,125,126,127,128,264,265,266,267,268,129,131,132,133,492,5,493,494,7,8,9,495,10,496,497,498,269,499,500,501,457,134,469,458,502,470,270,11,271,12,503,504,472,135,13,505,389,136,137,273,274,275,276,277,17,18,19,20,21,22,23,24,25,28,138,139,140,278,141,279,280,142,143,144,145,146,281,147,148,282,149,390,391,392,162,31,32,33,393,394,395,396,397,284,398,399,400,39,174,175,285,286,287,176,177,179,180,181,185,289,290,291,292,293,40,294,295,42,478,43,44,479,45,324,325,506,186,46,187,188,189,190,191,192,193,194,195,196,296,297,47,298,299,300,507,508,84,197,87,89,401,198,301,199,302,303,200,304,305,201,202,204,205,206,208,209,210,306,211,307,212,308,309,310,215,311,216,312,217,48,509,487,488,49,313,510,314,315,50,51,316,317,318,319,219,220,221,54,511,512,461,513,462,453,454,514,515,516,224,225,320,321,402,491,57,58,227,322,62,63,65],"tindex":"2d5d61ea-3e4c-11e6-9058-e356c448b95f","method":{"position":"com.google.gson.stream.JsonWriter:532","type":"CtMethodImpl","sourcecode":"private void string(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                {\n                    java.lang.String[] java.lang.String[] = boolean ? com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[] : com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[];\n                    java.io.Writer.write(\"\\\"\");\n                    int int = 0;\n                    int int = value.length();\n                    for (int int = 0 ; i < length ; i++) {\n                        char char = value.charAt(i);\n                        java.lang.String java.lang.String;\n                        if (c < 128) {\n                            replacement = replacements[c];\n                            if (replacement == null) {\n                                continue;\n                            } \n                        } else if (c == '\\u2028') {\n                            replacement = \"\\\\u2028\";\n                        } else if (c == '\\u2029') {\n                            replacement = \"\\\\u2029\";\n                        } else {\n                            continue;\n                        }\n                        if (last < i) {\n                            java.io.Writer.write(value, last, (i - last));\n                        } \n                        java.io.Writer.write(replacement);\n                        last = i + 1;\n                    }\n                    if (last < length) {\n                        java.io.Writer.write(value, last, (length - last));\n                    } \n                    java.io.Writer.write(\"\\\"\");\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239614057/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239614057/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"2d5d61eb-3e4c-11e6-9058-8714e74b519f","method":{"position":"com.google.gson.stream.JsonWriter:532","type":"CtMethodImpl","sourcecode":"private void string(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                {\n                    java.lang.String[] java.lang.String[] = boolean ? com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[] : com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[];\n                    java.io.Writer.write(\"\\\"\");\n                    int int = 0;\n                    int int = value.length();\n                    for (int int = 0 ; i < length ; i++) {\n                        char char = value.charAt(i);\n                        java.lang.String java.lang.String;\n                        if (c < 128) {\n                            replacement = replacements[c];\n                            if (replacement == null) {\n                                continue;\n                            } \n                        } else if (c == '\\u2028') {\n                            replacement = \"\\\\u2028\";\n                        } else if (c == '\\u2029') {\n                            replacement = \"\\\\u2029\";\n                        } else {\n                            continue;\n                        }\n                        if (last < i) {\n                            java.io.Writer.write(value, last, (i - last));\n                        } \n                        java.io.Writer.write(replacement);\n                        last = i + 1;\n                    }\n                    if (last < length) {\n                        java.io.Writer.write(value, last, (length - last));\n                    } \n                    java.io.Writer.write(\"\\\"\");\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239614057/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239614057/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:278","type":"CtBinaryOperatorImpl","sourcecode":"node != null"},"failures":[350,366,385],"tindex":"2d5d88fc-3e4c-11e6-9058-05e9776a3e6a","method":{"position":"com.google.gson.internal.LinkedTreeMap:284","type":"CtMethodImpl","sourcecode":"private void replaceInParent(com.google.gson.internal.LinkedTreeMap.Node<K, V> node, com.google.gson.internal.LinkedTreeMap.Node<K, V> replacement) {\n    if (replacement != null) {\n        {\n            if (replacement != null) {\n                {\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                    if (replacement != null) {\n                        replacement.com.google.gson.internal.LinkedTreeMap.Node<K, V> = parent;\n                    } \n                    if (parent != null) {\n                        if ((parent.com.google.gson.internal.LinkedTreeMap.Node<K, V>) == node) {\n                            parent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                        } else {\n                            assert (parent.com.google.gson.internal.LinkedTreeMap.Node<K, V>) == node;\n                            parent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                        }\n                    } else {\n                        com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239614057/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239614057/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"replacement"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[229,230,329,231,330,232,332,236,409,66,242,67,244,1,105,68,106,517,107,518,343,108,109,110,413,414,111,246,247,112,248,415,249,250,113,416,417,251,519,114,418,419,115,69,4,252,70,71,72,73,253,116,254,74,75,420,421,117,255,76,122,520,262,124,125,126,127,128,264,265,266,267,268,129,131,132,133,423,424,521,228,425,134,272,135,522,136,137,273,274,275,276,428,277,429,473,19,21,22,138,523,524,139,140,278,525,526,141,527,528,279,529,530,280,431,142,531,143,532,533,144,534,145,146,535,281,536,537,147,538,148,282,539,149,433,540,541,476,542,31,436,32,33,34,35,37,38,347,348,349,350,351,39,438,174,175,285,543,286,287,176,177,77,288,180,181,185,289,544,545,291,292,546,293,294,295,547,186,548,187,188,189,190,191,480,192,193,194,481,195,549,196,299,550,84,85,86,197,87,88,551,89,552,553,198,554,199,302,303,441,483,484,200,201,202,211,212,215,447,216,217,313,314,315,50,316,555,450,317,318,319,219,220,221,224,225,556,557,558,559,321,227],"tindex":"2d5d88fd-3e4c-11e6-9058-af2b0ad22ee2","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:86","type":"CtMethodImpl","sourcecode":"private com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField createBoundField(final com.google.gson.Gson context, final java.lang.reflect.Field field, final java.lang.String name, final com.google.gson.reflect.TypeToken<?> fieldType, boolean serialize, boolean deserialize) {\n    if (field.isSynthetic()) {\n        {\n            final boolean boolean = com.google.gson.internal.Primitives.isPrimitive(fieldType.getRawType());\n            return new com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField(name, serialize, deserialize) {\n                final com.google.gson.TypeAdapter<?> typeAdapter = getFieldAdapter(context, field, fieldType);\n\n                @java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n                @java.lang.Override\n                void write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                    java.lang.Object java.lang.Object = field.get(value);\n                    com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n                    t.write(writer, fieldValue);\n                }\n\n                @java.lang.Override\n                void read(com.google.gson.stream.JsonReader reader, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                    java.lang.Object java.lang.Object = com.google.gson.TypeAdapter<?>.read(reader);\n                    if ((fieldValue != null) || (!isPrimitive)) {\n                        field.set(value, fieldValue);\n                    } \n                }\n\n                public boolean writeField(java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                    if (!(boolean))\n                        return false;\n                    \n                    java.lang.Object java.lang.Object = field.get(value);\n                    return fieldValue != value;\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239614057/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"field"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[],"tindex":"2d5db00e-3e4c-11e6-9058-9358409b8c2d","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:132","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter name(java.lang.String name) throws java.io.IOException {\n    if (name == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239614057/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if ((java.util.List<com.google.gson.JsonElement>.isEmpty()) || ((java.lang.String) != null)) {\n                throw new java.lang.IllegalStateException();\n            } \n            com.google.gson.JsonElement com.google.gson.JsonElement = peek();\n            if (element instanceof com.google.gson.JsonObject) {\n                java.lang.String = name;\n                return com.google.gson.internal.bind.JsonTreeWriter.this;\n            } \n            throw new java.lang.IllegalStateException();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:287","type":"CtBinaryOperatorImpl","sourcecode":"replacement != null"},"failures":[],"tindex":"2d5db00f-3e4c-11e6-9058-c1c3435c83bd","method":{"position":"com.google.gson.internal.LinkedTreeMap:284","type":"CtMethodImpl","sourcecode":"private void replaceInParent(com.google.gson.internal.LinkedTreeMap.Node<K, V> node, com.google.gson.internal.LinkedTreeMap.Node<K, V> replacement) {\n    if (replacement != null) {\n        {\n            if (replacement != null) {\n                {\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                    if (replacement != null) {\n                        replacement.com.google.gson.internal.LinkedTreeMap.Node<K, V> = parent;\n                    } \n                    if (parent != null) {\n                        if ((parent.com.google.gson.internal.LinkedTreeMap.Node<K, V>) == node) {\n                            parent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                        } else {\n                            assert (parent.com.google.gson.internal.LinkedTreeMap.Node<K, V>) == node;\n                            parent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                        }\n                    } else {\n                        com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239614057/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239614057/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"replacement":"replacement"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"2d5dd720-3e4c-11e6-9058-f389fd3567ca","method":{"position":"com.google.gson.internal.bind.TypeAdapters:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239614057/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239614057/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    out.value(value);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:99","type":"CtVariableReadImpl","sourcecode":"serialization"},"failures":[560,517,107,518],"tindex":"2d5dd721-3e4c-11e6-9058-bfe2a01eecb6","method":{"position":"com.google.gson.internal.Excluder:96","type":"CtMethodImpl","sourcecode":"public com.google.gson.internal.Excluder withExclusionStrategy(com.google.gson.ExclusionStrategy exclusionStrategy, boolean serialization, boolean deserialization) {\n    if (serialization) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239614057/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.Excluder com.google.gson.internal.Excluder = clone();\n            if (serialization) {\n                result.java.util.List<com.google.gson.ExclusionStrategy> = new java.util.ArrayList<com.google.gson.ExclusionStrategy>(java.util.List<com.google.gson.ExclusionStrategy>);\n                result.java.util.List<com.google.gson.ExclusionStrategy>.add(exclusionStrategy);\n            } \n            if (deserialization) {\n                result.java.util.List<com.google.gson.ExclusionStrategy> = new java.util.ArrayList<com.google.gson.ExclusionStrategy>(java.util.List<com.google.gson.ExclusionStrategy>);\n                result.java.util.List<com.google.gson.ExclusionStrategy>.add(exclusionStrategy);\n            } \n            return result;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serialization":"serialization"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:622","type":"CtBinaryOperatorImpl","sourcecode":"(c == 'n') || (c == 'N')"},"failures":[],"tindex":"2d5dd722-3e4c-11e6-9058-df88420741e9","method":{"position":"com.google.gson.stream.JsonReader:755","type":"CtMethodImpl","sourcecode":"private boolean isLiteral(char c) throws java.io.IOException {\n    if ((c == 'n') || (c == 'N')) {\n        {\n            switch (c) {\n                case '/' :\n                case '\\\\' :\n                case ';' :\n                case '#' :\n                case '=' :\n                    checkLenient();\n                case '{' :\n                case '}' :\n                case '[' :\n                case ']' :\n                case ':' :\n                case ',' :\n                case ' ' :\n                case '\\t' :\n                case '\\f' :\n                case '\\r' :\n                case '\\n' :\n                    return false;\n                default :\n                    return true;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239614057/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"c"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1422","type":"CtUnaryOperatorImpl","sourcecode":"!(lenient)"},"failures":[],"tindex":"2d5dd723-3e4c-11e6-9058-0dcba68eee91","method":{"position":"com.google.gson.stream.JsonWriter:234","type":"CtMethodImpl","sourcecode":"public final void setLenient(boolean lenient) {\n    if (!lenient) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239614057/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = lenient;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"lenient"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"2d5dd724-3e4c-11e6-9058-29df535edc2d","method":{"position":"com.google.gson.Gson:591","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        {\n            if (src != null) {\n                {\n                    if (src == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239614057/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new com.google.gson.JsonIOException();\n                    } else {\n                        {\n                            com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = getAdapter(com.google.gson.reflect.TypeToken.get(typeOfSrc));\n                            boolean boolean = writer.isLenient();\n                            writer.setLenient(true);\n                            boolean boolean = writer.isHtmlSafe();\n                            writer.setHtmlSafe(boolean);\n                            boolean boolean = writer.getSerializeNulls();\n                            writer.setSerializeNulls(boolean);\n                            try {\n                                ((com.google.gson.TypeAdapter<java.lang.Object>)(adapter)).write(writer, src);\n                            } catch (java.io.IOException e) {\n                                throw new com.google.gson.JsonIOException(e);\n                            } finally {\n                                writer.setLenient(oldLenient);\n                                writer.setHtmlSafe(oldHtmlSafe);\n                                writer.setSerializeNulls(oldSerializeNulls);\n                            }\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239614057/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239614057/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"2d5dfe35-3e4c-11e6-9058-533d4b6c999a","method":{"position":"com.google.gson.Gson:552","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        {\n            if (src != null) {\n                toJson(src, src.getClass(), writer);\n            } else {\n                toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull, writer);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239614057/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.TreeTypeAdapter:55","type":"CtInvocationImpl","sourcecode":"value.isJsonNull()"},"failures":[],"tindex":"2d5dfe36-3e4c-11e6-9058-0d9e79089be3","method":{"position":"com.google.gson.internal.bind.TypeAdapters:680","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, com.google.gson.JsonElement value) throws java.io.IOException {\n    if (value.isJsonNull()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239614057/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value.isJsonNull()) {\n                {\n                    if ((value == null) || (value.isJsonNull())) {\n                        out.nullValue();\n                    } else if (value.isJsonPrimitive()) {\n                        com.google.gson.JsonPrimitive com.google.gson.JsonPrimitive = value.getAsJsonPrimitive();\n                        if (primitive.isNumber()) {\n                            out.value(primitive.getAsNumber());\n                        } else if (primitive.isBoolean()) {\n                            out.value(primitive.getAsBoolean());\n                        } else {\n                            out.value(primitive.getAsString());\n                        }\n                    } else if (value.isJsonArray()) {\n                        out.beginArray();\n                        for (com.google.gson.JsonElement com.google.gson.JsonElement : value.getAsJsonArray()) {\n                            write(out, e);\n                        }\n                        out.endArray();\n                    } else if (value.isJsonObject()) {\n                        out.beginObject();\n                        for (java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> : value.getAsJsonObject().entrySet()) {\n                            out.name(e.getKey());\n                            write(out, e.getValue());\n                        }\n                        out.endObject();\n                    } else {\n                        throw new java.lang.IllegalArgumentException((\"Couldn't write \" + (value.getClass())));\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239614057/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:278","type":"CtBinaryOperatorImpl","sourcecode":"node != null"},"failures":[],"tindex":"2d5dfe37-3e4c-11e6-9058-bbe433e1795b","method":{"position":"com.google.gson.internal.LinkedTreeMap:217","type":"CtMethodImpl","sourcecode":"void removeInternal(com.google.gson.internal.LinkedTreeMap.Node<K, V> node, boolean unlink) {\n    if (node != null) {\n        {\n            if (unlink) {\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            if ((left != null) && (right != null)) {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = (left.int) > (right.int) ? left.last() : right.first();\n                removeInternal(adjacent, false);\n                int int = 0;\n                left = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                if (left != null) {\n                    leftHeight = left.int;\n                    adjacent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = left;\n                    left.com.google.gson.internal.LinkedTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                } \n                int int = 0;\n                right = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                if (right != null) {\n                    rightHeight = right.int;\n                    adjacent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = right;\n                    right.com.google.gson.internal.LinkedTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                } \n                adjacent.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                replaceInParent(node, adjacent);\n                return ;\n            } else if (left != null) {\n                replaceInParent(node, left);\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n            } else if (right != null) {\n                replaceInParent(node, right);\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n            } else {\n                replaceInParent(node, null);\n            }\n            rebalance(originalParent, false);\n            (int)--;\n            (int)++;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239614057/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"node"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:356","type":"CtVariableReadImpl","sourcecode":"insert"},"failures":[],"tindex":"2d5e2548-3e4c-11e6-9058-a74472d0df8e","method":{"position":"com.google.gson.internal.LinkedTreeMap:310","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (insert) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239614057/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            for (com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>) {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                int int = left != null ? left.int : 0;\n                int int = right != null ? right.int : 0;\n                int int = leftHeight - rightHeight;\n                if (delta == (-2)) {\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    int int = rightRight != null ? rightRight.int : 0;\n                    int int = rightLeft != null ? rightLeft.int : 0;\n                    int int = rightLeftHeight - rightRightHeight;\n                    if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                        rotateLeft(node);\n                    } else {\n                        assert rightDelta == 1;\n                        rotateRight(right);\n                        rotateLeft(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 2) {\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    int int = leftRight != null ? leftRight.int : 0;\n                    int int = leftLeft != null ? leftLeft.int : 0;\n                    int int = leftLeftHeight - leftRightHeight;\n                    if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                        rotateRight(node);\n                    } else {\n                        assert leftDelta == (-1);\n                        rotateLeft(left);\n                        rotateRight(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 0) {\n                    node.int = leftHeight + 1;\n                    if (insert) {\n                        break;\n                    } \n                } else {\n                    assert (delta == (-1)) || (delta == 1);\n                    node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                    if (!insert) {\n                        break;\n                    } \n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"insert"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:106","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonArray"},"failures":[],"tindex":"2d5e4c59-3e4c-11e6-9058-a52cf37e6301","method":{"position":"com.google.gson.JsonArray:81","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement set(int index, com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonArray) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239614057/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return java.util.List<com.google.gson.JsonElement>.set(index, element);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"2d5e4c5a-3e4c-11e6-9058-0fc35d0fde04","method":{"position":"com.google.gson.Gson:285","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239614057/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239614057/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    float float = value.floatValue();\n                    checkValidFloatingPoint(floatValue);\n                    out.value(value);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:127","type":"CtInvocationImpl","sourcecode":"raw.isInterface()"},"failures":[],"tindex":"2d5e4c5b-3e4c-11e6-9058-09d46c2d79cc","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:125","type":"CtMethodImpl","sourcecode":"private java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> getBoundFields(com.google.gson.Gson context, com.google.gson.reflect.TypeToken<?> type, java.lang.Class<?> raw) {\n    if (raw.isInterface()) {\n        {\n            java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> = new java.util.LinkedHashMap<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField>();\n            if (raw.isInterface()) {\n                return result;\n            } \n            java.lang.reflect.Type java.lang.reflect.Type = type.getType();\n            while (raw != (java.lang.Object.java.lang.Object.java.lang.Class)) {\n                java.lang.reflect.Field[] java.lang.reflect.Field[] = raw.getDeclaredFields();\n                for (java.lang.reflect.Field java.lang.reflect.Field : fields) {\n                    boolean boolean = excludeField(field, true);\n                    boolean boolean = excludeField(field, false);\n                    if ((!serialize) && (!deserialize)) {\n                        continue;\n                    } \n                    field.setAccessible(true);\n                    java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, field.getGenericType());\n                    com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = createBoundField(context, field, getFieldName(field), com.google.gson.reflect.TypeToken.get(fieldType), serialize, deserialize);\n                    com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = result.put(boundField.java.lang.String, boundField);\n                    if (previous != null) {\n                        throw new java.lang.IllegalArgumentException(((declaredType + \" declares multiple JSON fields named \") + (previous.java.lang.String)));\n                    } \n                }\n                type = com.google.gson.reflect.TypeToken.get(com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, raw.getGenericSuperclass()));\n                raw = type.getRawType();\n            }\n            return result;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239614057/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"raw"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"2d5e736c-3e4c-11e6-9058-99b71a4e3673","method":{"position":"com.google.gson.Gson:261","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            double double = value.doubleValue();\n            checkValidFloatingPoint(doubleValue);\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239614057/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:79","type":"CtUnaryOperatorImpl","sourcecode":"!(json instanceof com.google.gson.JsonPrimitive)"},"failures":[],"tindex":"2d5e736d-3e4c-11e6-9058-89fe3d622ebb","method":{"position":"com.google.gson.Gson:871","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n        {\n            if (json == null) {\n                return null;\n            } \n            return ((T)(fromJson(new com.google.gson.internal.bind.JsonTreeReader(json), typeOfT)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239614057/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:497","type":"CtBinaryOperatorImpl","sourcecode":"(typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)"},"failures":[],"tindex":"2d5e736e-3e4c-11e6-9058-e58bb61431ff","method":{"position":"com.google.gson.TreeTypeAdapter:84","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newFactory(com.google.gson.reflect.TypeToken<?> exactType, java.lang.Object typeAdapter) {\n    if ((typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239614057/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , exactType , false , null);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"2d5e736f-3e4c-11e6-9058-c5a4eb358938","method":{"position":"com.google.gson.internal.bind.TypeAdapters:282","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239614057/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"2d5e7370-3e4c-11e6-9058-ab52aff4cee6","method":{"position":"com.google.gson.TypeAdapter:268","type":"CtMethodImpl","sourcecode":"public final T fromJson(java.lang.String json) throws java.io.IOException {\n    if (json == null) {\n        {\n            return fromJson(new java.io.StringReader(json));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239614057/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"2d5e7371-3e4c-11e6-9058-fb1f7165139e","method":{"position":"com.google.gson.Gson:491","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        {\n            com.google.gson.internal.bind.JsonTreeWriter com.google.gson.internal.bind.JsonTreeWriter = new com.google.gson.internal.bind.JsonTreeWriter();\n            toJson(src, typeOfSrc, writer);\n            return writer.get();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239614057/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:107","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonArray"},"failures":[],"tindex":"2d5e9a82-3e4c-11e6-9058-7dcf66a5dd46","method":{"position":"com.google.gson.internal.LinkedTreeMap:481","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"rawtypes\")\n@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonArray) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239614057/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof java.util.Map.Entry) {\n                java.util.Map.Entry java.util.Map.Entry = ((java.util.Map.Entry)(o));\n                return ((K) == null ? (other.getKey()) == null : K.equals(other.getKey())) && ((V) == null ? (other.getValue()) == null : V.equals(other.getValue()));\n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":72,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
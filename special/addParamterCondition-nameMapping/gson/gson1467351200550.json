{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":62,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":343,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":90,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":13,"com.google.gson.MixedStreamTest.testWriteLenient":44,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":130,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":264,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":55,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":332,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":339,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":303,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":351,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":366,"com.google.gson.JsonObjectTest.testAddingNullPropertyValue":160,"com.google.gson.functional.ObjectTest.testSingletonLists":184,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":262,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":352,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":344,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":146,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":139,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":67,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":173,"com.google.gson.internal.LinkedTreeMapTest.testContainsNullKeyIsAlwaysFalse":109,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":387,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":329,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":153,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":342,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":390,"com.google.gson.functional.JsonTreeTest.testToJsonTree":24,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":178,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":27,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":73,"com.google.gson.JsonObjectTest.testEqualsNonEmptyObject":161,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":288,"com.google.gson.internal.LinkedTreeMapTest.testLargeSetOfRandomKeys":104,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":377,"com.google.gson.internal.bind.JsonElementReaderTest.testNestedObjects":97,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":165,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":238,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":191,"com.google.gson.internal.LinkedTreeMapTest.testContainsNonComparableKeyReturnsFalse":105,"com.google.gson.JsonArrayTest.testEqualsOnEmptyArray":392,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":327,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":277,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":158,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":364,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":25,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":273,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":307,"com.google.gson.JsonParserTest.testParseString":168,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":45,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":226,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":26,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":197,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":316,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":261,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":131,"com.google.gson.functional.StreamingTypeAdaptersTest.testFromJsonTree":136,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":286,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":125,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":232,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":196,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":312,"com.google.gson.JsonPrimitiveTest.testEqualsAcrossTypes":43,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":169,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":209,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":154,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":207,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":218,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":289,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":140,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":121,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":263,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":257,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":276,"com.google.gson.JsonArrayTest.testEqualsNonEmptyArray":393,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":367,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":188,"com.google.gson.functional.EnumTest.testEnumSet":297,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":192,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":18,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":324,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":235,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":210,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":0,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":61,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":123,"com.google.gson.internal.bind.JsonElementReaderTest.testObject":99,"com.google.gson.JsonPrimitiveTest.testByteEqualsShort":42,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":117,"com.google.gson.JsonPrimitiveTest.testByteEqualsBigInteger":34,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":5,"com.google.gson.functional.MapTest.testSerializeMaps":88,"com.google.gson.JsonPrimitiveTest.testLongEqualsBigInteger":36,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":156,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":391,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":321,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":379,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":84,"com.google.gson.internal.LinkedTreeMapTest.testRemoveRootDoesNotDoubleUnlink":111,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":10,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":162,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":176,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":205,"com.google.gson.functional.MapTest.testStringKeyDeserialization":155,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":143,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":46,"com.google.gson.functional.PrettyPrintingTest.testMap":174,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":292,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":334,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":63,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":248,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":348,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":94,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":254,"com.google.gson.functional.MapTest.testMapOfMapSerialization":370,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":224,"com.google.gson.JavaSerializationTest.testMapIsSerializable":170,"com.google.gson.internal.LinkedTreeMapTest.testPutNonComparableKeyFails":108,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":229,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":385,"com.google.gson.functional.FieldNamingTest.testIdentity":341,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":345,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":141,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":201,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":14,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":57,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":66,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":183,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":388,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":74,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":346,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":227,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":172,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":255,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":384,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":240,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":113,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":50,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":294,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":353,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":132,"com.google.gson.functional.EnumTest.testEnumSubclass":300,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":230,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":214,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":274,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":142,"com.google.gson.JsonPrimitiveTest.testShortEqualsInteger":40,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":2,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":323,"com.google.gson.JsonPrimitiveTest.testByteEqualsLong":30,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":69,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":171,"com.google.gson.internal.LinkedTreeMapTest.testEqualsAndHashCode":110,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":225,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":268,"com.google.gson.MixedStreamTest.testWriteNulls":51,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":135,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":314,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":378,"com.google.gson.JsonObjectTest.testReadPropertyWithEmptyStringName":157,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":185,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":360,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":282,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":116,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":347,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":371,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":363,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":239,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":270,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":118,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":217,"com.google.gson.JsonPrimitiveTest.testDoubleEqualsBigDecimal":32,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":279,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":221,"com.google.gson.JsonArrayTest.testRemove":6,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":383,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":236,"com.google.gson.functional.MapTest.testMapDeserialization":151,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":256,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":179,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":244,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":80,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":78,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":3,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeMap":137,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":65,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":190,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":198,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":7,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":295,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":70,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":249,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":287,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":322,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":21,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":175,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":92,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":272,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":81,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":331,"com.google.gson.internal.LinkedTreeMapTest.testIterationOrder":107,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":233,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":15,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":4,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":299,"com.google.gson.internal.LinkedTreeMapTest.testEmptyStringValues":106,"com.google.gson.internal.LinkedTreeMapTest.testPutOverrides":102,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":204,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":148,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":241,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":133,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":100,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":206,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":199,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":48,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":246,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":354,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":144,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":302,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":8,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":182,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":337,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":290,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":77,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":16,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":260,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":124,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":251,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":82,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":71,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":228,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":47,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":212,"com.google.gson.JsonPrimitiveTest.testEquals":41,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":79,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":298,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":115,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":119,"com.google.gson.functional.MapTest.testGeneralMapField":374,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":311,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":275,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":291,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":318,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":265,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":216,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":306,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":234,"com.google.gson.ObjectTypeAdapterTest.testDeserializeNullValue":95,"com.google.gson.JsonObjectTest.testDeepCopy":163,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":222,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":389,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":330,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":259,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":152,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":278,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":147,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":242,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":361,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":181,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":356,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":101,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":258,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":202,"com.google.gson.JsonPrimitiveTest.testFloatEqualsDouble":35,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":195,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":68,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":328,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":281,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":237,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":284,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":59,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":134,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":285,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":149,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":215,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":373,"com.google.gson.functional.MapTest.testInterfaceTypeMap":372,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":293,"com.google.gson.JsonObjectTest.testAddingNullOrEmptyPropertyName":166,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":301,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":296,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":247,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":326,"com.google.gson.JsonPrimitiveTest.testIntegerEqualsLong":38,"com.google.gson.MixedStreamTest.testWriteClosed":54,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":336,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":186,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":243,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":76,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":200,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":280,"com.google.gson.JsonPrimitiveTest.testShortEqualsLong":33,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":271,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":187,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":245,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":335,"com.google.gson.JsonPrimitiveTest.testShortEqualsBigInteger":29,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":357,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":9,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":338,"com.google.gson.internal.bind.JsonElementReaderTest.testSkipValue":98,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":112,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":381,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":220,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":23,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":309,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":380,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":75,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":223,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":269,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":89,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":253,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":308,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":333,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":49,"com.google.gson.functional.MapTest.testRawMapSerialization":375,"com.google.gson.JsonParserTest.testParseReader":167,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":193,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":283,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":122,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":83,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":91,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":93,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":313,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":368,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":64,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":304,"com.google.gson.JsonPrimitiveTest.testEqualsIntegerAndBigInteger":31,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":56,"com.google.gson.JsonPrimitiveTest.testFloatEqualsBigDecimal":28,"com.google.gson.JsonPrimitiveTest.testByteEqualsInteger":37,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":317,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":11,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":19,"com.google.gson.functional.MapTest.testMapWithQuotes":369,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":358,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":362,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":138,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":365,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":128,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":17,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":231,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":250,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":320,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":266,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":58,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":252,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":355,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":87,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":85,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":267,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":310,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":1,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":203,"com.google.gson.JsonPrimitiveTest.testIntegerEqualsBigInteger":39,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":114,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":129,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":145,"com.google.gson.internal.LinkedTreeMapTest.testClear":103,"com.google.gson.JsonObjectTest.testAddingStringProperties":164,"com.google.gson.functional.ObjectTest.testNestedSerialization":194,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":213,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":219,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":305,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":180,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":22,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":120,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":53,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":386,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":189,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":72,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":349,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":86,"com.google.gson.functional.CollectionTest.testSetSerialization":340,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":177,"com.google.gson.functional.StringTest.testStringValueSerialization":350,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":359,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":211,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":382,"com.google.gson.MixedStreamTest.testWriteInvalidState":52,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":60,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":319,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":208,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":127,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":12,"com.google.gson.ObjectTypeAdapterTest.testDeserialize":96,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":376,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":159,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":325,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":20,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":126,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":150,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":315},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:123","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"523845d7-3f4d-11e6-b652-c97a2a688199","method":{"position":"com.google.gson.reflect.TypeToken:122","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic boolean isAssignableFrom(java.lang.reflect.Type from) {\n    if (from == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350441681/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (from == null) {\n                return false;\n            } \n            if (java.lang.reflect.Type.equals(from)) {\n                return true;\n            } \n            if ((java.lang.reflect.Type) instanceof java.lang.Class<?>) {\n                return java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from));\n            } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.ParameterizedType) {\n                return com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n            } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.GenericArrayType) {\n                return (java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from))) && (com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.GenericArrayType)(java.lang.reflect.Type))));\n            } else {\n                throw com.google.gson.reflect.TypeToken.buildUnexpectedTypeError(java.lang.reflect.Type, java.lang.Class.java.lang.Class.java.lang.Class, java.lang.reflect.ParameterizedType.java.lang.reflect.ParameterizedType.java.lang.Class, java.lang.reflect.GenericArrayType.java.lang.reflect.GenericArrayType.java.lang.Class);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"52393038-3f4d-11e6-b652-5133e370f39f","method":{"position":"com.google.gson.Gson:847","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(com.google.gson.JsonElement json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350441681/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"52393039-3f4d-11e6-b652-bb30b0b50bbe","method":{"position":"com.google.gson.Gson:576","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src != null) {\n        {\n            if (src != null) {\n                {\n                    try {\n                        com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                        toJson(src, typeOfSrc, jsonWriter);\n                    } catch (java.io.IOException e) {\n                        throw new com.google.gson.JsonIOException(e);\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350441681/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350441681/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl"},"failures":[0,1,2,3,4,5],"tindex":"5239574a-3f4d-11e6-b652-39e1fa867c11","method":{"position":"com.google.gson.FieldNamingPolicy:137","type":"CtMethodImpl","sourcecode":"private static java.lang.String upperCaseFirstLetter(java.lang.String name) {\n    if (name == null) {\n        {\n            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            int int = 0;\n            char char = name.charAt(index);\n            while (index < ((name.length()) - 1)) {\n                if (java.lang.Character.isLetter(firstCharacter)) {\n                    break;\n                } \n                fieldNameBuilder.append(firstCharacter);\n                firstCharacter = name.charAt((++index));\n            }\n            if (index == (name.length())) {\n                return fieldNameBuilder.toString();\n            } \n            if (!(java.lang.Character.isUpperCase(firstCharacter))) {\n                java.lang.String java.lang.String = com.google.gson.FieldNamingPolicy.modifyString(java.lang.Character.toUpperCase(firstCharacter), name, (++index));\n                return fieldNameBuilder.append(modifiedTarget).toString();\n            } else {\n                return name;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350441681/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"52397e5b-3f4d-11e6-b652-739c88f7c794","method":{"position":"com.google.gson.Gson:576","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src != null) {\n        {\n            if (src != null) {\n                {\n                    try {\n                        com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                        toJson(src, typeOfSrc, jsonWriter);\n                    } catch (java.io.IOException e) {\n                        throw new com.google.gson.JsonIOException(e);\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350441681/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350441681/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:137","type":"CtBinaryOperatorImpl"},"failures":[6],"tindex":"5239a56c-3f4d-11e6-b652-23caf114e756","method":{"position":"com.google.gson.JsonArray:115","type":"CtMethodImpl","sourcecode":"public boolean contains(com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonObject) {\n        {\n            return java.util.List<com.google.gson.JsonElement>.contains(element);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350441681/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:79","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"5239a56d-3f4d-11e6-b652-1b3cd7d11478","method":{"position":"com.google.gson.DefaultDateTypeAdapter:77","type":"CtMethodImpl","sourcecode":"public java.util.Date deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT, com.google.gson.JsonDeserializationContext context) throws com.google.gson.JsonParseException {\n    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n        {\n            if (!(json instanceof com.google.gson.JsonPrimitive)) {\n                throw new com.google.gson.JsonParseException(\"The date should be a string value\");\n            } \n            java.util.Date java.util.Date = deserializeToDate(json);\n            if (typeOfT == (java.util.Date.java.util.Date.java.lang.Class)) {\n                return date;\n            } else if (typeOfT == (java.sql.Timestamp.java.sql.Timestamp.java.lang.Class)) {\n                return new java.sql.Timestamp(date.getTime());\n            } else if (typeOfT == (java.sql.Date.java.sql.Date.java.lang.Class)) {\n                return new java.sql.Date(date.getTime());\n            } else {\n                throw new java.lang.IllegalArgumentException((((getClass()) + \" cannot deserialize to \") + typeOfT));\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350441681/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:79","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"5239cc7e-3f4d-11e6-b652-0fd5bea5e1ec","method":{"position":"com.google.gson.Gson:127","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonParseException {\n    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350441681/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    } else {\n        {\n            return ((T)(fromJson(json, typeOfT)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl"},"failures":[7,8,1,2,9,10,11,12,5],"tindex":"5239cc7f-3f4d-11e6-b652-6fbd6edaa58d","method":{"position":"com.google.gson.FieldNamingPolicy:122","type":"CtMethodImpl","sourcecode":"private static java.lang.String separateCamelCase(java.lang.String name, java.lang.String separator) {\n    if (name == null) {\n        {\n            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            for (int int = 0 ; i < (name.length()) ; i++) {\n                char char = name.charAt(i);\n                if ((java.lang.Character.isUpperCase(character)) && ((translation.length()) != 0)) {\n                    translation.append(separator);\n                } \n                translation.append(character);\n            }\n            return translation.toString();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350441681/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[13,14,15,16,17,18,19,20,21,22],"tindex":"5239f390-3f4d-11e6-b652-975aea80e314","method":{"position":"com.google.gson.stream.JsonWriter:490","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350441681/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            writeDeferredName();\n            java.lang.String java.lang.String = value.toString();\n            if ((!(boolean)) && (((string.equals(\"-Infinity\")) || (string.equals(\"Infinity\"))) || (string.equals(\"NaN\")))) {\n                throw new java.lang.IllegalArgumentException((\"Numeric values must be finite, but was \" + value));\n            } \n            beforeValue(false);\n            java.io.Writer.append(string);\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:120","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"523a1aa1-3f4d-11e6-b652-8fd93f73927f","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:839","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonNull) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350441681/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return containsKey(o);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:111","type":"CtInvocationImpl"},"failures":[23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43],"tindex":"523a1aa2-3f4d-11e6-b652-6f2f7733fc0a","method":{"position":"com.google.gson.JsonPrimitive:333","type":"CtMethodImpl","sourcecode":"private static boolean isIntegral(com.google.gson.JsonPrimitive primitive) {\n    if (primitive.isNumber()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350441681/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (primitive.isString()) {\n                {\n                    if ((primitive.java.lang.Object) instanceof java.lang.Number) {\n                        java.lang.Number java.lang.Number = ((java.lang.Number)(primitive.java.lang.Object));\n                        return ((((number instanceof java.math.BigInteger) || (number instanceof java.lang.Long)) || (number instanceof java.lang.Integer)) || (number instanceof java.lang.Short)) || (number instanceof java.lang.Byte);\n                    } \n                    return false;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350441681/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"primitive"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[44,45,46,47],"tindex":"523a41b3-3f4d-11e6-b652-df58d49b208a","method":{"position":"com.google.gson.internal.bind.TypeAdapters:297","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350441681/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:430","type":"CtFieldReadImpl"},"failures":[48,49,50,51,52,44,53,54,55,56,57,58,59,60,61,62,63,64,23,65,66,24,67,68,69,70,71,72,73,74,75,76,77,78,79,80,16,81,82,83,84,85,86,87,88,89,22,90,91,92,93],"tindex":"523a68c4-3f4d-11e6-b652-c1a53386dac4","method":{"position":"com.google.gson.stream.JsonWriter:268","type":"CtMethodImpl","sourcecode":"public final void setSerializeNulls(boolean serializeNulls) {\n    if (serializeNulls) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350441681/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = serializeNulls;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeNulls":"serializeNulls"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl"},"failures":[94],"tindex":"523a68c5-3f4d-11e6-b652-01a741ff328a","method":{"position":"com.google.gson.JsonObject:100","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Boolean value) {\n    if (property == null) {\n        {\n            add(property, createJsonElement(value));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350441681/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:154","type":"CtUnaryOperatorImpl"},"failures":[95,96,97,98,99,100,101,48,102,103,104,105,106,107,108,109,110,111,55,56,58,59,112,113,114,62,115,116,117,118,119,120,121,122,123,124,125,64,126,23,65,66,24,67,68,69,70,71,72,73,25,127,74,75,76,128,81,85,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,90,157,158,159,160,161,162,94,163,164,165,166,167,168,169,91,170],"tindex":"523a68c6-3f4d-11e6-b652-63ed1c9fd005","method":{"position":"com.google.gson.internal.LinkedTreeMap:121","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedTreeMap.Node<K, V> find(K key, boolean create) {\n    if (!create) {\n        {\n            java.util.Comparator<? super K> java.util.Comparator<? super K> = com.google.gson.internal.LinkedTreeMap.this.java.util.Comparator<? super K>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            int int = 0;\n            if (nearest != null) {\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                java.lang.Comparable<java.lang.Object> java.lang.Comparable<java.lang.Object> = comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>) ? ((java.lang.Comparable<java.lang.Object>)(key)) : null;\n                while (true) {\n                    comparison = comparableKey != null ? comparableKey.compareTo(nearest.K) : comparator.compare(key, nearest.K);\n                    if (comparison == 0) {\n                        return nearest;\n                    } \n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = comparison < 0 ? nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> : nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    if (child == null) {\n                        break;\n                    } \n                    nearest = child;\n                }\n            } \n            if (!create) {\n                return null;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.this.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            if (nearest == null) {\n                if ((comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>)) && (!(key instanceof java.lang.Comparable))) {\n                    throw new java.lang.ClassCastException(((key.getClass().getName()) + \" is not Comparable\"));\n                } \n                created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n            } else {\n                created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                if (comparison < 0) {\n                    nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                } else {\n                    nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                }\n                rebalance(nearest, true);\n            }\n            (int)++;\n            (int)++;\n            return created;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350441681/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"create":"create"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl"},"failures":[171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,113,61,63,118,120,13,205,206,14,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,45,232,233,234,235,236,237,238,239,240,46,241,47,242,65,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,74,275,276,277,278,279,280,281,282,0,283,7,284,8,1,285,286,287,77,78,288,79,80,16,81,82,84,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,138,309,310,311,312,313,314,315,316,86,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,4,11,12,5,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,142,143,144,359,360,361,145,362,363,364,365,366,367,368,146,88,89,369,370,371,372,373,374,375,90,376,377,378,379,380,381,382,383,384,385,169,386,387,388,389],"tindex":"523ab6e7-3f4d-11e6-b652-fba00687fa3f","method":{"position":"com.google.gson.Gson:510","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src) {\n    if (src != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350441681/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src == null) {\n                return toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull);\n            } \n            return toJson(src, src.getClass());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[235,390],"tindex":"523addf8-3f4d-11e6-b652-d962cb184029","method":{"position":"com.google.gson.Gson:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            out.value(value.toString());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350441681/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[15],"tindex":"523b0509-3f4d-11e6-b652-b92332081138","method":{"position":"com.google.gson.internal.bind.TypeAdapters:223","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350441681/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"523b050a-3f4d-11e6-b652-393e501c6191","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:223","type":"CtMethodImpl","sourcecode":"private boolean equal(java.lang.Object a, java.lang.Object b) {\n    if (!(b instanceof java.lang.reflect.GenericArrayType)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350441681/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (a == b) || ((a != null) && (a.equals(b)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl"},"failures":[288],"tindex":"523b050b-3f4d-11e6-b652-a50a54741739","method":{"position":"com.google.gson.Gson:468","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350441681/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src == null) {\n                return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            return toJsonTree(src, src.getClass());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.TreeTypeAdapter:55","type":"CtInvocationImpl"},"failures":[391,48,57,66,68,69,70,71,72,73,75,76,90],"tindex":"523b2c1c-3f4d-11e6-b652-e164a1d4b5e3","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:75","type":"CtMethodImpl","sourcecode":"private void put(com.google.gson.JsonElement value) {\n    if (value.isJsonNull()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350441681/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((java.lang.String) != null) {\n                if ((!(value.isJsonNull())) || (getSerializeNulls())) {\n                    com.google.gson.JsonObject com.google.gson.JsonObject = ((com.google.gson.JsonObject)(peek()));\n                    object.add(java.lang.String, value);\n                } \n                java.lang.String = null;\n            } else if (java.util.List<com.google.gson.JsonElement>.isEmpty()) {\n                com.google.gson.JsonElement = value;\n            } else {\n                com.google.gson.JsonElement com.google.gson.JsonElement = peek();\n                if (element instanceof com.google.gson.JsonArray) {\n                    ((com.google.gson.JsonArray)(element)).add(value);\n                } else {\n                    throw new java.lang.IllegalStateException();\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:115","type":"CtInvocationImpl"},"failures":[],"tindex":"523b2c1d-3f4d-11e6-b652-b9d6fd06d3a7","method":{"position":"com.google.gson.JsonPrimitive:333","type":"CtMethodImpl","sourcecode":"private static boolean isIntegral(com.google.gson.JsonPrimitive primitive) {\n    if (primitive.isNumber()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350441681/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (primitive.isString()) {\n                {\n                    if ((primitive.java.lang.Object) instanceof java.lang.Number) {\n                        java.lang.Number java.lang.Number = ((java.lang.Number)(primitive.java.lang.Object));\n                        return ((((number instanceof java.math.BigInteger) || (number instanceof java.lang.Long)) || (number instanceof java.lang.Integer)) || (number instanceof java.lang.Short)) || (number instanceof java.lang.Byte);\n                    } \n                    return false;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350441681/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"primitive"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:122","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"523b532e-3f4d-11e6-b652-6fde20980a05","method":{"position":"com.google.gson.internal.$Gson$Types:217","type":"CtMethodImpl","sourcecode":"public static java.lang.String typeToString(java.lang.reflect.Type type) {\n    return type instanceof java.lang.Class ? ((java.lang.Class<?>)(type)).getName() : type.toString();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:109","type":"CtBinaryOperatorImpl"},"failures":[392,393,26],"tindex":"523b532f-3f4d-11e6-b652-3ba1c6057ba5","method":{"position":"com.google.gson.JsonArray:329","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonPrimitive) {\n        {\n            return (o == (com.google.gson.JsonArray.this)) || ((o instanceof com.google.gson.JsonArray) && (((com.google.gson.JsonArray)(o)).java.util.List<com.google.gson.JsonElement>.equals(java.util.List<com.google.gson.JsonElement>)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350441681/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl"},"failures":[55,56,58,59,64,126,74,130,131,132,133,134,142,143,144,145,159,94,164],"tindex":"523b5330-3f4d-11e6-b652-91a16aed7ef0","method":{"position":"com.google.gson.JsonObject:121","type":"CtMethodImpl","sourcecode":"private com.google.gson.JsonElement createJsonElement(java.lang.Object value) {\n    if (value == null) {\n        {\n            return value == null ? com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull : new com.google.gson.JsonPrimitive(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350441681/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:370","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"523b7a41-3f4d-11e6-b652-29d7909433c9","method":{"position":"com.google.gson.internal.$Gson$Types:322","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type resolve(java.lang.reflect.Type context, java.lang.Class<?> contextRawType, java.lang.reflect.Type toResolve) {\n    while (true) {\n        if (toResolve instanceof java.lang.reflect.TypeVariable) {\n            java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(toResolve));\n            toResolve = com.google.gson.internal.$Gson$Types.resolveTypeVariable(context, contextRawType, typeVariable);\n            if (toResolve == typeVariable) {\n                return toResolve;\n            } \n        } else if ((toResolve instanceof java.lang.Class) && (((java.lang.Class<?>)(toResolve)).isArray())) {\n            java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getComponentType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, componentType);\n            return componentType == newComponentType ? original : com.google.gson.internal.$Gson$Types.arrayOf(newComponentType);\n        } else if (toResolve instanceof java.lang.reflect.GenericArrayType) {\n            java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getGenericComponentType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, componentType);\n            return componentType == newComponentType ? original : com.google.gson.internal.$Gson$Types.arrayOf(newComponentType);\n        } else if (toResolve instanceof java.lang.reflect.ParameterizedType) {\n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getOwnerType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, ownerType);\n            boolean boolean = newOwnerType != ownerType;\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getActualTypeArguments();\n            for (int int = 0, int int = args.int ; t < length ; t++) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, args[t]);\n                if (resolvedTypeArgument != (args[t])) {\n                    if (!changed) {\n                        args = args.clone();\n                        changed = true;\n                    } \n                    args[t] = resolvedTypeArgument;\n                } \n            }\n            return changed ? com.google.gson.internal.$Gson$Types.newParameterizedTypeWithOwner(newOwnerType, original.getRawType(), args) : original;\n        } else if (toResolve instanceof java.lang.reflect.WildcardType) {\n            java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(toResolve));\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getLowerBounds();\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getUpperBounds();\n            if ((originalLowerBound.int) == 1) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, originalLowerBound[0]);\n                if (lowerBound != (originalLowerBound[0])) {\n                    return com.google.gson.internal.$Gson$Types.supertypeOf(lowerBound);\n                } \n            } else if ((originalUpperBound.int) == 1) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, originalUpperBound[0]);\n                if (upperBound != (originalUpperBound[0])) {\n                    return com.google.gson.internal.$Gson$Types.subtypeOf(upperBound);\n                } \n            } \n            return original;\n        } else {\n            return toResolve;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"context"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1413","type":"CtVariableReadImpl"},"failures":[],"tindex":"523b7a42-3f4d-11e6-b652-e5a4da3dec7f","method":{"position":"com.google.gson.stream.JsonReader:1331","type":"CtMethodImpl","sourcecode":"private int nextNonWhitespace(boolean throwOnEof) throws java.io.IOException {\n    if (throwOnEof) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350441681/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            char[] char[] = com.google.gson.stream.JsonReader.this.char[];\n            int int = int;\n            int int = int;\n            while (true) {\n                if (p == l) {\n                    int = p;\n                    if (!(fillBuffer(1))) {\n                        break;\n                    } \n                    p = int;\n                    l = int;\n                } \n                int int = buffer[(p++)];\n                if (c == '\\n') {\n                    (int)++;\n                    int = p;\n                    continue;\n                } else if (((c == ' ') || (c == '\\r')) || (c == '\\t')) {\n                    continue;\n                } \n                if (c == '/') {\n                    int = p;\n                    if (p == l) {\n                        (int)--;\n                        boolean boolean = fillBuffer(2);\n                        (int)++;\n                        if (!charsLoaded) {\n                            return c;\n                        } \n                    } \n                    checkLenient();\n                    char char = buffer[int];\n                    switch (peek) {\n                        case '*' :\n                            (int)++;\n                            if (!(skipTo(\"*/\"))) {\n                                throw syntaxError(\"Unterminated comment\");\n                            } \n                            p = (int) + 2;\n                            l = int;\n                            continue;\n                        case '/' :\n                            (int)++;\n                            skipToEndOfLine();\n                            p = int;\n                            l = int;\n                            continue;\n                        default :\n                            return c;\n                    }\n                } else if (c == '#') {\n                    int = p;\n                    checkLenient();\n                    skipToEndOfLine();\n                    p = int;\n                    l = int;\n                } else {\n                    int = p;\n                    return c;\n                }\n            }\n            if (throwOnEof) {\n                throw new java.io.EOFException(((((\"End of input\" + \" at line \") + (getLineNumber())) + \" column \") + (getColumnNumber())));\n            } else {\n                return -1;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"throwOnEof":"throwOnEof"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:274","type":"CtVariableReadImpl"},"failures":[],"tindex":"523ba153-3f4d-11e6-b652-e324b650cb75","method":{"position":"com.google.gson.Gson:273","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> floatAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                {\n                    if (serializeSpecialFloatingPointValues) {\n                        return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n                    } \n                    return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                        @java.lang.Override\n                        public java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                            if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                                in.nextNull();\n                                return null;\n                            } \n                            return ((float)(in.nextDouble()));\n                        }\n\n                        @java.lang.Override\n                        public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                            if (value == null) {\n                                out.nullValue();\n                                return ;\n                            } \n                            float float = value.floatValue();\n                            checkValidFloatingPoint(floatValue);\n                            out.value(value);\n                        }\n                    };\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350441681/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350441681/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:274","type":"CtVariableReadImpl"},"failures":[],"tindex":"523bc864-3f4d-11e6-b652-bd7b023bf031","method":{"position":"com.google.gson.Gson:273","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> floatAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                {\n                    if (serializeSpecialFloatingPointValues) {\n                        return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n                    } \n                    return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                        @java.lang.Override\n                        public java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                            if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                                in.nextNull();\n                                return null;\n                            } \n                            return ((float)(in.nextDouble()));\n                        }\n\n                        @java.lang.Override\n                        public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                            if (value == null) {\n                                out.nullValue();\n                                return ;\n                            } \n                            float float = value.floatValue();\n                            checkValidFloatingPoint(floatValue);\n                            out.value(value);\n                        }\n                    };\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350441681/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350441681/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"523bef75-3f4d-11e6-b652-1123bc31d638","method":{"position":"com.google.gson.Gson:591","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    if (src != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350441681/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = getAdapter(com.google.gson.reflect.TypeToken.get(typeOfSrc));\n            boolean boolean = writer.isLenient();\n            writer.setLenient(true);\n            boolean boolean = writer.isHtmlSafe();\n            writer.setHtmlSafe(boolean);\n            boolean boolean = writer.getSerializeNulls();\n            writer.setSerializeNulls(boolean);\n            try {\n                ((com.google.gson.TypeAdapter<java.lang.Object>)(adapter)).write(writer, src);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            } finally {\n                writer.setLenient(oldLenient);\n                writer.setHtmlSafe(oldHtmlSafe);\n                writer.setSerializeNulls(oldSerializeNulls);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:274","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"523bef76-3f4d-11e6-b652-c5cce21ac674","method":{"position":"com.google.gson.JsonPrimitive:273","type":"CtMethodImpl","sourcecode":"private static boolean isPrimitiveOrString(java.lang.Object target) {\n    if (target instanceof java.lang.String) {\n        {\n            if (target instanceof java.lang.String) {\n                return true;\n            } \n            java.lang.Class<?> java.lang.Class<?> = target.getClass();\n            for (java.lang.Class<?> java.lang.Class<?> : com.google.gson.JsonPrimitive.com.google.gson.JsonPrimitive.java.lang.Class<?>[]) {\n                if (standardPrimitive.isAssignableFrom(classOfPrimitive)) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350441681/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"target":"target"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:107","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"523c1687-3f4d-11e6-b652-39933c1298ec","method":{"position":"com.google.gson.reflect.TypeToken:295","type":"CtMethodImpl","sourcecode":"public static com.google.gson.reflect.TypeToken<?> get(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.WildcardType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350441681/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new com.google.gson.reflect.TypeToken<java.lang.Object>(type);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:120","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"523c1688-3f4d-11e6-b652-951f544dced9","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:804","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonNull) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350441681/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (o instanceof java.util.Map.Entry) && ((findByEntry(((java.util.Map.Entry<?, ?>)(o)))) != null);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"523c1689-3f4d-11e6-b652-5fddd8d1dc29","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:175","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            if (!(isLenient())) {\n                double double = value.doubleValue();\n                if ((java.lang.Double.isNaN(d)) || (java.lang.Double.isInfinite(d))) {\n                    throw new java.lang.IllegalArgumentException((\"JSON forbids NaN and infinities: \" + value));\n                } \n            } \n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350441681/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"523c3d9a-3f4d-11e6-b652-b54fdce57a14","method":{"position":"com.google.gson.Gson:491","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350441681/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.bind.JsonTreeWriter com.google.gson.internal.bind.JsonTreeWriter = new com.google.gson.internal.bind.JsonTreeWriter();\n            toJson(src, typeOfSrc, writer);\n            return writer.get();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:243","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"523c3d9b-3f4d-11e6-b652-49c259c1872c","method":{"position":"com.google.gson.internal.Excluder:242","type":"CtMethodImpl","sourcecode":"private boolean isValidUntil(com.google.gson.annotations.Until annotation) {\n    if (annotation != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350441681/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (annotation != null) {\n                double double = annotation.value();\n                if (annotationVersion <= (double)) {\n                    return false;\n                } \n            } \n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"523c3d9c-3f4d-11e6-b652-2bbc959149c7","method":{"position":"com.google.gson.internal.bind.TypeAdapters:267","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350441681/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.TreeTypeAdapter:55","type":"CtInvocationImpl"},"failures":[],"tindex":"523c64ad-3f4d-11e6-b652-e1c73307ff37","method":{"position":"com.google.gson.JsonObject:53","type":"CtMethodImpl","sourcecode":"public void add(java.lang.String property, com.google.gson.JsonElement value) {\n    if (value.isJsonNull()) {\n        {\n            if (value == null) {\n                value = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.put(property, value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350441681/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:166","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"523c64ae-3f4d-11e6-b652-db8b40de7be8","method":{"position":"com.google.gson.reflect.TypeToken:160","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.GenericArrayType to) {\n    if (from instanceof java.lang.Class<?>) {\n        {\n            java.lang.reflect.Type java.lang.reflect.Type = to.getGenericComponentType();\n            if (toGenericComponentType instanceof java.lang.reflect.ParameterizedType) {\n                java.lang.reflect.Type java.lang.reflect.Type = from;\n                if (from instanceof java.lang.reflect.GenericArrayType) {\n                    t = ((java.lang.reflect.GenericArrayType)(from)).getGenericComponentType();\n                } else if (from instanceof java.lang.Class<?>) {\n                    java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(from));\n                    while (classType.isArray()) {\n                        classType = classType.getComponentType();\n                    }\n                    t = classType;\n                } \n                return com.google.gson.reflect.TypeToken.isAssignableFrom(t, ((java.lang.reflect.ParameterizedType)(toGenericComponentType)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n            } \n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350441681/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:455","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"523c64af-3f4d-11e6-b652-631bcc189e1c","method":{"position":"com.google.gson.TreeTypeAdapter:84","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newFactory(com.google.gson.reflect.TypeToken<?> exactType, java.lang.Object typeAdapter) {\n    if ((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) {\n        {\n            return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , exactType , false , null);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350441681/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":41,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
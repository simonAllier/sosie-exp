{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":120,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":527,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":1,"com.google.gson.functional.StringTest.testStringValueDeserialization":525,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":65,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":471,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":602,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":437,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":40,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":117,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":3,"com.google.gson.MixedStreamTest.testWriteLenient":199,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":501,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":608,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":77,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":246,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":249,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":500,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":477,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":31,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":376,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":359,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":445,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":83,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":569,"com.google.gson.functional.ObjectTest.testSingletonLists":332,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":34,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":603,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":430,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":528,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":251,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":195,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":244,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":560,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":181,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":512,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":21,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":479,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":140,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":331,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":540,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":66,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":88,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":472,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":406,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":25,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":98,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":55,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":405,"com.google.gson.functional.EnumTest.testEnumCaseMapping":375,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":18,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":526,"com.google.gson.functional.JsonTreeTest.testToJsonTree":223,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":422,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":93,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":615,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":297,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":311,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":584,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":328,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":384,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":432,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":599,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":152,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":341,"com.google.gson.functional.ObjectTest.testNullDeserialization":519,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":346,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":537,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":507,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":366,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":371,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":438,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":116,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":53,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":363,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":516,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":370,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":357,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":575,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":616,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":227,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":490,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":489,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":180,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":101,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":329,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":458,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":494,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":583,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":241,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":270,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":456,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":601,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":4,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":401,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":469,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":299,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":596,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":166,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":184,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":285,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":102,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":568,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":470,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":335,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":380,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":37,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":215,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":504,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":47,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":410,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":442,"com.google.gson.metrics.PerformanceTest.testDummy":369,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":35,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":292,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":306,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":171,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":186,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":414,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":546,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":112,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":353,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":168,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":598,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":362,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":562,"com.google.gson.functional.CollectionTest.testSetDeserialization":558,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":360,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":207,"com.google.gson.functional.EnumTest.testEnumSet":258,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":543,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":462,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":229,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":185,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithNestedWildcards":212,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":276,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":589,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":238,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":24,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":305,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":473,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":170,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":481,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":50,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":245,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":103,"com.google.gson.functional.MapTest.testHashMapDeserialization":395,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":435,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":554,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":606,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":38,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":122,"com.google.gson.MixedStreamTest.testReadNulls":624,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":10,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":118,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":162,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":551,"com.google.gson.functional.MapTest.testSortedMap":408,"com.google.gson.functional.MapTest.testMapSerialization":280,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":121,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":108,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":467,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":386,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":15,"com.google.gson.functional.MapTest.testSerializeMaps":60,"com.google.gson.functional.MapTest.testComplexKeysSerialization":284,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":542,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":413,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":273,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":347,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":374,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":160,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":75,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":549,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":373,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":91,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":42,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":518,"com.google.gson.functional.MapTest.testStringKeyDeserialization":412,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithBasicWildcards":214,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":389,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":7,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":105,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":286,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":441,"com.google.gson.functional.PrettyPrintingTest.testMap":89,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":133,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":436,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":337,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":124,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":127,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":580,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":20,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":330,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":390,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":531,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":534,"com.google.gson.functional.CollectionTest.testQueueSerialization":338,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":351,"com.google.gson.functional.MapTest.testMapSerializationEmpty":411,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":463,"com.google.gson.functional.MapTest.testMapOfMapSerialization":279,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":455,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":600,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":556,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":100,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":206,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":196,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictBoxedNansAndInfinities":631,"com.google.gson.functional.FieldNamingTest.testIdentity":137,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":529,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":187,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":218,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":520,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":46,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":79,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":222,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":235,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":424,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":26,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":182,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":530,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":377,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":461,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":609,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":29,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":590,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":205,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":595,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":614,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":394,"com.google.gson.functional.MapTest.testMapSubclassSerialization":275,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":488,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":256,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":418,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":545,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":138,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":349,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":365,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":453,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":5,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":498,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":579,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":548,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":304,"com.google.gson.functional.EnumTest.testEnumSubclass":260,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":231,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":22,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":510,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":423,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":361,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":476,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":189,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":12,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":426,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":264,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":459,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":378,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":290,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":28,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":383,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":464,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":506,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":45,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":457,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":612,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":499,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":59,"com.google.gson.MixedStreamTest.testWriteNulls":622,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":271,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":566,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":268,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":131,"com.google.gson.CommentsTest.testParseComments":367,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":417,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":192,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":236,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":570,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":315,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":387,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":475,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":107,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":281,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":336,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":68,"com.google.gson.MixedStreamTest.testReadInvalidState":620,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":356,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":310,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":179,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":321,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":109,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":434,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":250,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":391,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithTypeParameters":213,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":312,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":449,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":204,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":174,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":485,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":382,"com.google.gson.functional.MapTest.testMapDeserialization":400,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":597,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":94,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":58,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":149,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":225,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":277,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":154,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":150,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":13,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":221,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":372,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":577,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":242,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":511,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":69,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":564,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":291,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":585,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":84,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":74,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":263,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":90,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":407,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":628,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":613,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":421,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":194,"com.google.gson.functional.PrimitiveTest.testShortSerialization":487,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":156,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":478,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":57,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictNansAndInfinities":630,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":454,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":320,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":17,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":433,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":14,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":39,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":247,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":255,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":397,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":448,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":129,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":232,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":211,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":161,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":177,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":627,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":233,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":493,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":325,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":44,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":188,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":208,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":416,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":139,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":572,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":483,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":87,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":8,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":460,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":523,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":503,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":262,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":71,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":544,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":248,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":586,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":563,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":190,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":148,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":155,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":175,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":440,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":165,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":591,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":157,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":605,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":294,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":552,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":427,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":484,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":230,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":106,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":287,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":153,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":259,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":126,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":110,"com.google.gson.functional.MapTest.testGeneralMapField":63,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":502,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":252,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":496,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":132,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":217,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":618,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":354,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":409,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":301,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":431,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":573,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":480,"com.google.gson.MixedStreamTest.testReadMixedStreamed":626,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":319,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":402,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":587,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":27,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":164,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":343,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":33,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":465,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":56,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":169,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":352,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":403,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":420,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":396,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":193,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":322,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":97,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":143,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":450,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":173,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":567,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":219,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":555,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":571,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":159,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":198,"com.google.gson.functional.ObjectTest.testNestedDeserialization":524,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":67,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":514,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":123,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":289,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":54,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":495,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":314,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":41,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":404,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":532,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":303,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":104,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":70,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":6,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":81,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":345,"com.google.gson.functional.ObjectTest.testNullSerialization":508,"com.google.gson.stream.JsonWriterTest.testDoubles":2,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":16,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":419,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":398,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":282,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":425,"com.google.gson.functional.MapTest.testInterfaceTypeMap":62,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":385,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":134,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":293,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":428,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":261,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":324,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":73,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":565,"com.google.gson.MixedStreamTest.testReadClosed":621,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":574,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":52,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":443,"com.google.gson.MixedStreamTest.testWriteClosed":625,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":125,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":340,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":333,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":415,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":617,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":307,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":224,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":317,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":243,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":313,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":355,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":296,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":334,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":339,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":144,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":468,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":146,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":72,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":342,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":176,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":49,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":202,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":497,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":99,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":220,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":582,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":265,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":348,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":316,"com.google.gson.functional.CollectionTest.testQueueDeserialization":561,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":452,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":466,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":536,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":119,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":145,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":178,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":61,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":517,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":593,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":228,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":522,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":253,"com.google.gson.functional.MapTest.testRawMapSerialization":283,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":364,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":559,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":604,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":326,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":226,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":239,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":113,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":158,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":254,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":267,"com.google.gson.functional.PrimitiveTest.testByteSerialization":486,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":547,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":629,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":114,"com.google.gson.ObjectTypeAdapterTest.testSerialize":201,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":76,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":439,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":78,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":216,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":135,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":23,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":308,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":533,"com.google.gson.functional.MapTest.testMapWithQuotes":278,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":446,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":581,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":535,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":183,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":163,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":197,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":298,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":491,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":578,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":358,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":151,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":302,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":521,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":95,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":172,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":474,"com.google.gson.functional.ObjectTest.testEmptyStringDeserialization":509,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":272,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":505,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":610,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":350,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":80,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":142,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":592,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":482,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":128,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":557,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":381,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":82,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":266,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":611,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":11,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":274,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":147,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":257,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":550,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":85,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":429,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":9,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":323,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":513,"com.google.gson.JsonObjectTest.testAddingStringProperties":209,"com.google.gson.functional.ObjectTest.testNestedSerialization":240,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":288,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":300,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":318,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":539,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":96,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":64,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":111,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":86,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":200,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":368,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":237,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":392,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":492,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":295,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":32,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":594,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":19,"com.google.gson.GsonBuilderTest.testCreatingMoreThanOnce":30,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":444,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":515,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":576,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":141,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":327,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":538,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":48,"com.google.gson.functional.CollectionTest.testSetSerialization":344,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":619,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":92,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":191,"com.google.gson.functional.StringTest.testStringValueSerialization":541,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":234,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":43,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":203,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":553,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":379,"com.google.gson.MixedStreamTest.testWriteInvalidState":623,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":115,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":447,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":388,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":451,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":36,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":588,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":136,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":130,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":393,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":51,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":309,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":607,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":210,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":399,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":0,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":167,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":269},"transformations":[{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:298","type":"CtBinaryOperatorImpl"},"failures":[0,1,2],"tindex":"aa9eb3c7-3f11-11e6-a736-0549bae3dbed","method":{"position":"com.google.gson.stream.JsonWriter:461","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(double value) throws java.io.IOException {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324738638/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                {\n                    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                        throw new java.lang.IllegalArgumentException((\"Numeric values must be finite, but was \" + value));\n                    } \n                    writeDeferredName();\n                    beforeValue(false);\n                    java.io.Writer.append(java.lang.Double.toString(value));\n                    return com.google.gson.stream.JsonWriter.this;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324738638/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[3,4,5,6,7,8,9],"tindex":"aa9f28f8-3f11-11e6-a736-7ff198c8b463","method":{"position":"com.google.gson.JsonObject:89","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Number value) {\n    if (value == null) {\n        {\n            add(property, createJsonElement(value));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324738638/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl"},"failures":[10,11,12,13,14,15],"tindex":"aa9f28f9-3f11-11e6-a736-9fe92d78d5a8","method":{"position":"com.google.gson.FieldNamingPolicy:137","type":"CtMethodImpl","sourcecode":"private static java.lang.String upperCaseFirstLetter(java.lang.String name) {\n    if (name == null) {\n        {\n            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            int int = 0;\n            char char = name.charAt(index);\n            while (index < ((name.length()) - 1)) {\n                if (java.lang.Character.isLetter(firstCharacter)) {\n                    break;\n                } \n                fieldNameBuilder.append(firstCharacter);\n                firstCharacter = name.charAt((++index));\n            }\n            if (index == (name.length())) {\n                return fieldNameBuilder.toString();\n            } \n            if (!(java.lang.Character.isUpperCase(firstCharacter))) {\n                java.lang.String java.lang.String = com.google.gson.FieldNamingPolicy.modifyString(java.lang.Character.toUpperCase(firstCharacter), name, (++index));\n                return fieldNameBuilder.append(modifiedTarget).toString();\n            } else {\n                return name;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324738638/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:94","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"aa9f500a-3f11-11e6-a736-67f33e7eb7d6","method":{"position":"com.google.gson.internal.$Gson$Types:431","type":"CtMethodImpl","sourcecode":"private static void checkNotPrimitive(java.lang.reflect.Type type) {\n    com.google.gson.internal.$Gson$Preconditions.checkArgument(((!(type instanceof java.lang.Class<?>)) || (!(((java.lang.Class<?>)(type)).isPrimitive()))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"aa9f500b-3f11-11e6-a736-b52590b2e748","method":{"position":"com.google.gson.Gson:510","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324738638/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src == null) {\n                return toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull);\n            } \n            return toJson(src, src.getClass());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[16,17],"tindex":"aa9f500c-3f11-11e6-a736-3377d1cbb882","method":{"position":"com.google.gson.Gson:261","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324738638/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            double double = value.doubleValue();\n            checkValidFloatingPoint(doubleValue);\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:455","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"aa9f771d-3f11-11e6-a736-5b3ec159da22","method":{"position":"com.google.gson.TreeTypeAdapter:84","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newFactory(com.google.gson.reflect.TypeToken<?> exactType, java.lang.Object typeAdapter) {\n    if ((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) {\n        {\n            return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , exactType , false , null);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324738638/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:554","type":"CtBinaryOperatorImpl"},"failures":[18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,10,69,70,71,11,16,12,72,73,74,75,13,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,14,135,136,15,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,7,8,190,191,192,193,194,9,195,196,197,198,199,200],"tindex":"aa9f771e-3f11-11e6-a736-f9664fb94ea5","method":{"position":"com.google.gson.GsonBuilder:551","type":"CtMethodImpl","sourcecode":"private void addTypeAdaptersForDate(java.lang.String datePattern, int dateStyle, int timeStyle, java.util.List<com.google.gson.TypeAdapterFactory> factories) {\n    if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n        {\n            com.google.gson.DefaultDateTypeAdapter com.google.gson.DefaultDateTypeAdapter;\n            if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n                dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(datePattern);\n            } else if ((dateStyle != (java.text.DateFormat.java.text.DateFormat.int)) && (timeStyle != (java.text.DateFormat.java.text.DateFormat.int))) {\n                dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(dateStyle , timeStyle);\n            } else {\n                return ;\n            }\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.util.Date.java.util.Date.java.lang.Class), dateTypeAdapter));\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Timestamp.java.sql.Timestamp.java.lang.Class), dateTypeAdapter));\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Date.java.sql.Date.java.lang.Class), dateTypeAdapter));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324738638/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"datePattern":"datePattern"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:298","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"aa9f9e2f-3f11-11e6-a736-e591ea28633b","method":{"position":"com.google.gson.stream.JsonWriter:461","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(double value) throws java.io.IOException {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324738638/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                {\n                    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                        throw new java.lang.IllegalArgumentException((\"Numeric values must be finite, but was \" + value));\n                    } \n                    writeDeferredName();\n                    beforeValue(false);\n                    java.io.Writer.append(java.lang.Double.toString(value));\n                    return com.google.gson.stream.JsonWriter.this;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324738638/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"aa9fc540-3f11-11e6-a736-93c23cab7a5a","method":{"position":"com.google.gson.Gson:695","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.lang.String json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324738638/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"aa9fc541-3f11-11e6-a736-5db2bcf73a98","method":{"position":"com.google.gson.Gson:847","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(com.google.gson.JsonElement json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324738638/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl"},"failures":[201,36,37,202,203,204,205,206,207,208,117],"tindex":"aa9fec52-3f11-11e6-a736-57f137642c0d","method":{"position":"com.google.gson.internal.Excluder:149","type":"CtMethodImpl","sourcecode":"public boolean excludeField(java.lang.reflect.Field field, boolean serialize) {\n    if (field.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324738638/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (((int) & (field.getModifiers())) != 0) {\n                return true;\n            } \n            if (((double) != (com.google.gson.internal.Excluder.com.google.gson.internal.Excluder.double)) && (!(isValidVersion(field.getAnnotation(com.google.gson.annotations.Since.com.google.gson.annotations.Since.java.lang.Class), field.getAnnotation(com.google.gson.annotations.Until.com.google.gson.annotations.Until.java.lang.Class))))) {\n                return true;\n            } \n            if (field.isSynthetic()) {\n                return true;\n            } \n            if (boolean) {\n                com.google.gson.annotations.Expose com.google.gson.annotations.Expose = field.getAnnotation(com.google.gson.annotations.Expose.com.google.gson.annotations.Expose.java.lang.Class);\n                if ((annotation == null) || (serialize ? !(annotation.serialize()) : !(annotation.deserialize()))) {\n                    return true;\n                } \n            } \n            if ((!(boolean)) && (isInnerClass(field.getType()))) {\n                return true;\n            } \n            if (isAnonymousOrLocal(field.getType())) {\n                return true;\n            } \n            java.util.List<com.google.gson.ExclusionStrategy> java.util.List<com.google.gson.ExclusionStrategy> = serialize ? java.util.List<com.google.gson.ExclusionStrategy> : java.util.List<com.google.gson.ExclusionStrategy>;\n            if (!(list.isEmpty())) {\n                com.google.gson.FieldAttributes com.google.gson.FieldAttributes = new com.google.gson.FieldAttributes(field);\n                for (com.google.gson.ExclusionStrategy com.google.gson.ExclusionStrategy : list) {\n                    if (exclusionStrategy.shouldSkipField(fieldAttributes)) {\n                        return true;\n                    } \n                }\n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"field"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl"},"failures":[209,77,78,80,81,114,210,3,4,5,211,6,182,189],"tindex":"aaa01363-3f11-11e6-a736-cfc5abcec607","method":{"position":"com.google.gson.JsonObject:78","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.String value) {\n    if (property == null) {\n        {\n            add(property, createJsonElement(value));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324738638/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:199","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"aaa03a74-3f11-11e6-a736-cf092ca30ca3","method":{"position":"com.google.gson.reflect.TypeToken:160","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.GenericArrayType to) {\n    if (from instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324738638/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.reflect.Type java.lang.reflect.Type = to.getGenericComponentType();\n            if (toGenericComponentType instanceof java.lang.reflect.ParameterizedType) {\n                java.lang.reflect.Type java.lang.reflect.Type = from;\n                if (from instanceof java.lang.reflect.GenericArrayType) {\n                    t = ((java.lang.reflect.GenericArrayType)(from)).getGenericComponentType();\n                } else if (from instanceof java.lang.Class<?>) {\n                    java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(from));\n                    while (classType.isArray()) {\n                        classType = classType.getComponentType();\n                    }\n                    t = classType;\n                } \n                return com.google.gson.reflect.TypeToken.isAssignableFrom(t, ((java.lang.reflect.ParameterizedType)(toGenericComponentType)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n            } \n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[17],"tindex":"aaa03a75-3f11-11e6-a736-4fb8cce46571","method":{"position":"com.google.gson.internal.bind.TypeAdapters:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324738638/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    out.value(value);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324738638/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:287","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"aaa06186-3f11-11e6-a736-257e5330b367","method":{"position":"com.google.gson.internal.LinkedTreeMap:284","type":"CtMethodImpl","sourcecode":"private void replaceInParent(com.google.gson.internal.LinkedTreeMap.Node<K, V> node, com.google.gson.internal.LinkedTreeMap.Node<K, V> replacement) {\n    if (node != null) {\n        {\n            if (node != null) {\n                {\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                    if (replacement != null) {\n                        replacement.com.google.gson.internal.LinkedTreeMap.Node<K, V> = parent;\n                    } \n                    if (parent != null) {\n                        if ((parent.com.google.gson.internal.LinkedTreeMap.Node<K, V>) == node) {\n                            parent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                        } else {\n                            assert (parent.com.google.gson.internal.LinkedTreeMap.Node<K, V>) == node;\n                            parent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                        }\n                    } else {\n                        com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324738638/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324738638/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"replacement":"node"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:109","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"aaa0d6b7-3f11-11e6-a736-195a558a47a4","method":{"position":"com.google.gson.internal.LinkedTreeMap:570","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonPrimitive) {\n        {\n            return (o instanceof java.util.Map.Entry) && ((findByEntry(((java.util.Map.Entry<?, ?>)(o)))) != null);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324738638/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:287","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"aaa0d6b8-3f11-11e6-a736-83d06a67bf8f","method":{"position":"com.google.gson.internal.LinkedTreeMap:284","type":"CtMethodImpl","sourcecode":"private void replaceInParent(com.google.gson.internal.LinkedTreeMap.Node<K, V> node, com.google.gson.internal.LinkedTreeMap.Node<K, V> replacement) {\n    if (node != null) {\n        {\n            if (node != null) {\n                {\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                    if (replacement != null) {\n                        replacement.com.google.gson.internal.LinkedTreeMap.Node<K, V> = parent;\n                    } \n                    if (parent != null) {\n                        if ((parent.com.google.gson.internal.LinkedTreeMap.Node<K, V>) == node) {\n                            parent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                        } else {\n                            assert (parent.com.google.gson.internal.LinkedTreeMap.Node<K, V>) == node;\n                            parent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                        }\n                    } else {\n                        com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324738638/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324738638/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"replacement":"node"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:240","type":"CtInvocationImpl"},"failures":[212,213,214],"tindex":"aaa0fdc9-3f11-11e6-a736-39382587c894","method":{"position":"com.google.gson.reflect.TypeToken:238","type":"CtMethodImpl","sourcecode":"private static boolean typeEquals(java.lang.reflect.ParameterizedType from, java.lang.reflect.ParameterizedType to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeVarMap) {\n    if (from.getRawType().equals(from.getRawType())) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324738638/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (from.getRawType().equals(to.getRawType())) {\n                java.lang.reflect.Type[] java.lang.reflect.Type[] = from.getActualTypeArguments();\n                java.lang.reflect.Type[] java.lang.reflect.Type[] = to.getActualTypeArguments();\n                for (int int = 0 ; i < (fromArgs.int) ; i++) {\n                    if (!(com.google.gson.reflect.TypeToken.matches(fromArgs[i], toArgs[i], typeVarMap))) {\n                        return false;\n                    } \n                }\n                return true;\n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from","to":"from"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:497","type":"CtBinaryOperatorImpl"},"failures":[24,39,55,56,57,66,67,68,116,197],"tindex":"aaa124da-3f11-11e6-a736-cd5568b38ba6","method":{"position":"com.google.gson.GsonBuilder:493","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\npublic com.google.gson.GsonBuilder registerTypeHierarchyAdapter(java.lang.Class<?> baseType, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n        {\n            if ((typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324738638/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    com.google.gson.internal.$Gson$Preconditions.checkArgument((((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) || (typeAdapter instanceof com.google.gson.TypeAdapter<?>)));\n                    if ((typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)) {\n                        java.util.List<com.google.gson.TypeAdapterFactory>.add(0, com.google.gson.TreeTypeAdapter.newTypeHierarchyFactory(baseType, typeAdapter));\n                    } \n                    if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                        java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.internal.bind.TypeAdapters.newTypeHierarchyFactory(baseType, ((com.google.gson.TypeAdapter)(typeAdapter))));\n                    } \n                    return com.google.gson.GsonBuilder.this;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324738638/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[19,215,34,216,217,218,219,220,221,222,223,63,66,224,225,226,76,227,228,229,91,95,97,230,231,232,233,234,235,236,237,238,239,240,241,242,243,118,120,121,124,244,245,246,247,248,249,142],"tindex":"aaa14beb-3f11-11e6-a736-b3c69171a97d","method":{"position":"com.google.gson.internal.bind.TypeAdapters:267","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324738638/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:578","type":"CtBinaryOperatorImpl"},"failures":[250],"tindex":"aaa172fc-3f11-11e6-a736-5da79fe7c149","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:429","type":"CtMethodImpl","sourcecode":"private void rotateRight(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root == null) {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivotRight;\n            if (pivotRight != null) {\n                pivotRight.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            } \n            replaceInParent(root, pivot);\n            pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot;\n            root.int = (java.lang.Math.max((right != null ? right.int : 0), (pivotRight != null ? pivotRight.int : 0))) + 1;\n            pivot.int = (java.lang.Math.max(root.int, (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324738638/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"root"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[201,251,252,60,253],"tindex":"aaa19a0d-3f11-11e6-a736-055f2789824c","method":{"position":"com.google.gson.internal.bind.ObjectTypeAdapter:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Object value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324738638/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            com.google.gson.TypeAdapter<java.lang.Object> com.google.gson.TypeAdapter<java.lang.Object> = ((com.google.gson.TypeAdapter<java.lang.Object>)(com.google.gson.Gson.getAdapter(value.getClass())));\n            if (typeAdapter instanceof com.google.gson.internal.bind.ObjectTypeAdapter) {\n                out.beginObject();\n                out.endObject();\n                return ;\n            } \n            typeAdapter.write(out, value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl"},"failures":[18,19,24,254,201,28,29,215,34,36,37,255,256,257,258,259,39,260,261,262,202,203,204,205,206,263,264,40,42,46,47,265,266,267,268,269,270,48,271,216,217,272,273,218,219,274,220,221,222,223,275,60,276,277,61,278,279,280,281,62,282,63,283,284,285,286,65,66,287,288,289,290,291,292,224,293,294,295,225,296,297,298,10,226,69,71,11,16,299,74,76,300,301,227,228,77,78,80,81,302,303,304,305,306,229,307,308,309,310,311,86,88,89,90,91,92,93,94,95,312,313,314,315,316,317,96,97,318,319,320,321,232,322,323,324,325,326,327,328,329,330,331,109,111,234,235,332,236,333,334,207,237,238,239,240,335,241,242,208,243,118,120,121,124,336,244,245,246,253,247,337,338,339,340,341,248,342,249,343,344,345,130,346,131,347,348,349,14,135,136,15,137,139,142,143,146,150,162,165,166,350,351,352,353,354,355,356,357,358,359,360,361,362,363,183,185,189,8,191,192,198,364,365,199,200],"tindex":"aaa1c11e-3f11-11e6-a736-fd978691a5f2","method":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:74","type":"CtMethodImpl","sourcecode":"private java.lang.reflect.Type getRuntimeTypeIfMoreSpecific(java.lang.reflect.Type type, java.lang.Object value) {\n    if (value == null) {\n        {\n            if ((value != null) && (((type == (java.lang.Object.java.lang.Object.java.lang.Class)) || (type instanceof java.lang.reflect.TypeVariable<?>)) || (type instanceof java.lang.Class<?>))) {\n                type = value.getClass();\n            } \n            return type;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324738638/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[201,215,34,256,257,263,264,42,46,266,269,271,216,217,273,218,219,220,221,222,223,60,280,63,283,286,224,225,298,16,74,76,227,228,302,82,303,304,305,306,229,307,308,309,310,311,86,88,89,90,91,92,93,94,95,314,315,317,97,103,366,321,326,234,236,207,237,238,240,241,242,243,118,120,121,244,245,246,337,339,248,249,344,345,14,135,136,15,137,139,142,143,146,162,165,166,356,357,358,359,360,8,191,364,365],"tindex":"aaa1c11f-3f11-11e6-a736-3117d166263b","method":{"position":"com.google.gson.internal.bind.TypeAdapters:245","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324738638/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:250","type":"CtVariableReadImpl"},"failures":[18,19,20,21,22,367,23,24,25,26,27,368,369,28,29,30,215,370,371,31,32,33,34,35,36,37,38,255,256,257,258,259,39,260,372,373,261,374,262,375,376,263,377,378,264,40,41,42,43,44,45,46,47,265,266,379,252,380,267,268,269,381,382,270,48,271,383,384,385,216,386,217,387,388,389,272,390,273,391,392,218,219,49,274,393,50,51,52,53,54,55,56,57,220,221,222,223,394,58,59,395,396,275,60,397,398,276,399,277,400,61,401,402,403,404,278,279,280,405,406,407,281,408,62,409,282,63,64,283,410,284,411,412,285,413,414,286,65,66,67,68,287,288,289,290,291,292,224,293,294,295,415,416,225,296,297,10,226,69,70,71,11,16,12,72,299,73,74,75,13,76,300,301,227,228,77,78,79,80,81,302,417,82,303,304,305,306,229,83,307,308,309,84,310,85,418,311,86,87,419,420,88,89,90,91,92,93,94,95,312,313,314,315,316,317,96,97,421,422,98,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,318,443,444,445,446,447,99,448,449,319,450,451,452,453,454,455,456,457,458,459,460,461,230,462,463,464,100,465,466,467,468,469,470,471,472,231,473,474,475,101,102,476,477,320,478,479,480,481,103,482,483,484,485,486,104,366,487,321,488,489,490,491,105,492,232,493,494,495,106,322,496,233,497,498,107,108,109,110,111,112,113,234,114,210,235,332,499,500,236,501,502,333,503,504,334,115,505,506,207,507,508,237,509,510,511,512,116,238,513,239,240,514,515,335,516,517,518,519,241,520,242,208,521,243,522,523,524,117,118,119,120,121,122,123,124,125,126,525,526,527,528,529,530,531,532,336,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,244,549,127,550,551,128,245,246,253,247,337,552,553,554,338,339,340,341,248,555,556,342,557,558,249,343,559,344,345,560,129,561,130,346,131,347,562,348,563,132,133,134,349,564,565,3,4,5,211,6,566,567,568,14,135,136,15,137,138,139,140,141,142,143,144,145,146,147,148,149,569,150,151,152,153,154,570,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,571,572,573,574,575,576,577,578,579,580,581,582,350,583,584,585,586,587,588,589,17,590,172,591,592,593,351,594,595,596,597,598,599,173,600,352,174,175,601,602,603,604,605,176,606,607,353,177,608,354,609,610,611,612,178,179,355,180,181,613,614,615,616,617,356,357,358,359,360,361,182,618,619,362,363,183,184,185,186,187,188,189,7,8,190,191,192,193,194,9,195,196,197,198,364,620,621,365,622,623,199,624,200,625,626,627],"tindex":"aaa1e830-3f11-11e6-a736-69216369fcd6","method":{"position":"com.google.gson.Gson:273","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> floatAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return ((float)(in.nextDouble()));\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    float float = value.floatValue();\n                    checkValidFloatingPoint(floatValue);\n                    out.value(value);\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324738638/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:370","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"aaa23651-3f11-11e6-a736-a51a9aeed10f","method":{"position":"com.google.gson.internal.$Gson$Types:226","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type getGenericSupertype(java.lang.reflect.Type context, java.lang.Class<?> rawType, java.lang.Class<?> toResolve) {\n    if (toResolve == rawType) {\n        return context;\n    } \n    if (toResolve.isInterface()) {\n        java.lang.Class<?>[] java.lang.Class<?>[] = rawType.getInterfaces();\n        for (int int = 0, int int = interfaces.int ; i < length ; i++) {\n            if ((interfaces[i]) == toResolve) {\n                return rawType.getGenericInterfaces()[i];\n            } else if (toResolve.isAssignableFrom(interfaces[i])) {\n                return com.google.gson.internal.$Gson$Types.getGenericSupertype(rawType.getGenericInterfaces()[i], interfaces[i], toResolve);\n            } \n        }\n    } \n    if (!(rawType.isInterface())) {\n        while (rawType != (java.lang.Object.java.lang.Object.java.lang.Class)) {\n            java.lang.Class<?> java.lang.Class<?> = rawType.getSuperclass();\n            if (rawSupertype == toResolve) {\n                return rawType.getGenericSuperclass();\n            } else if (toResolve.isAssignableFrom(rawSupertype)) {\n                return com.google.gson.internal.$Gson$Types.getGenericSupertype(rawType.getGenericSuperclass(), rawSupertype, toResolve);\n            } \n            rawType = rawSupertype;\n        }\n    } \n    return toResolve;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"context"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"aaa25d62-3f11-11e6-a736-89a67608006a","method":{"position":"com.google.gson.Gson:871","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            if (json == null) {\n                return null;\n            } \n            return ((T)(fromJson(new com.google.gson.internal.bind.JsonTreeReader(json), typeOfT)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324738638/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:164","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"aaa25d63-3f11-11e6-a736-5931681a89e4","method":{"position":"com.google.gson.reflect.TypeToken:272","type":"CtMethodImpl","sourcecode":"private static boolean matches(java.lang.reflect.Type from, java.lang.reflect.Type to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeMap) {\n    if (to instanceof java.lang.reflect.GenericArrayType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324738638/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (to.equals(from)) || ((from instanceof java.lang.reflect.TypeVariable) && (to.equals(typeMap.get(((java.lang.reflect.TypeVariable<?>)(from)).getName()))));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"to"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:459","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"aaa28474-3f11-11e6-a736-715540a138aa","method":{"position":"com.google.gson.GsonBuilder:493","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\npublic com.google.gson.GsonBuilder registerTypeHierarchyAdapter(java.lang.Class<?> baseType, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n        {\n            if ((typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324738638/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    com.google.gson.internal.$Gson$Preconditions.checkArgument((((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) || (typeAdapter instanceof com.google.gson.TypeAdapter<?>)));\n                    if ((typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)) {\n                        java.util.List<com.google.gson.TypeAdapterFactory>.add(0, com.google.gson.TreeTypeAdapter.newTypeHierarchyFactory(baseType, typeAdapter));\n                    } \n                    if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                        java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.internal.bind.TypeAdapters.newTypeHierarchyFactory(baseType, ((com.google.gson.TypeAdapter)(typeAdapter))));\n                    } \n                    return com.google.gson.GsonBuilder.this;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324738638/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"aaa2ab85-3f11-11e6-a736-251abd79d34d","method":{"position":"com.google.gson.internal.bind.TypeAdapters:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324738638/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    out.value(value);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324738638/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:602","type":"CtUnaryOperatorImpl"},"failures":[18,19,20,21,22,24,25,26,27,368,254,628,629,28,29,215,630,631,370,371,31,34,36,37,38,255,256,257,258,259,39,260,261,262,375,376,202,203,204,205,206,263,264,40,42,44,46,47,265,266,252,380,267,268,269,270,48,271,216,217,388,272,273,218,219,274,50,51,52,53,54,55,56,57,220,221,222,223,58,275,60,276,277,61,278,279,280,407,281,62,409,282,63,64,283,284,411,285,286,65,66,67,287,288,289,290,291,292,224,293,294,295,225,296,297,298,10,226,69,71,11,16,299,74,76,300,301,227,228,77,78,79,80,81,302,82,303,304,305,306,229,307,308,309,310,311,86,420,88,89,90,91,92,93,94,95,312,313,314,315,316,317,96,97,423,425,431,434,442,318,99,449,319,452,455,457,458,461,230,100,231,474,101,102,320,480,103,485,486,104,366,487,321,488,105,232,106,322,233,324,109,111,234,114,210,235,332,236,333,334,115,207,508,237,511,116,238,239,240,514,335,241,242,208,243,118,119,120,121,124,526,527,528,529,530,336,534,538,541,544,547,244,549,128,245,246,253,247,337,338,339,340,341,248,342,249,343,344,345,129,130,346,131,347,348,563,132,133,134,349,564,565,14,135,136,15,137,138,139,142,143,146,148,150,152,153,154,155,156,157,158,160,162,165,166,572,573,574,578,580,581,350,584,585,588,17,172,591,592,593,351,595,597,598,173,352,174,175,601,603,176,607,353,608,354,610,611,612,178,179,355,613,614,616,356,357,358,359,360,361,182,618,362,363,183,185,189,7,8,191,192,193,9,196,197,198,364,365,622,623,199,200,625],"tindex":"aaa2ab86-3f11-11e6-a736-a3bff0ba28e9","method":{"position":"com.google.gson.stream.JsonWriter:234","type":"CtMethodImpl","sourcecode":"public final void setLenient(boolean lenient) {\n    if (!lenient) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324738638/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = lenient;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"lenient"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:622","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"aaa2d297-3f11-11e6-a736-f56e4869cf76","method":{"position":"com.google.gson.stream.JsonReader:755","type":"CtMethodImpl","sourcecode":"private boolean isLiteral(char c) throws java.io.IOException {\n    if ((c == 'n') || (c == 'N')) {\n        {\n            switch (c) {\n                case '/' :\n                case '\\\\' :\n                case ';' :\n                case '#' :\n                case '=' :\n                    checkLenient();\n                case '{' :\n                case '}' :\n                case '[' :\n                case ']' :\n                case ':' :\n                case ',' :\n                case ' ' :\n                case '\\t' :\n                case '\\f' :\n                case '\\r' :\n                case '\\n' :\n                    return false;\n                default :\n                    return true;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324738638/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"c"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"aaa2f9a8-3f11-11e6-a736-7bf71b2882aa","method":{"position":"com.google.gson.JsonObject:111","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Character value) {\n    if (property == null) {\n        {\n            add(property, createJsonElement(value));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324738638/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonArray:58","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"aaa2f9a9-3f11-11e6-a736-0fb40a22edcf","method":{"position":"com.google.gson.JsonArray:115","type":"CtMethodImpl","sourcecode":"public boolean contains(com.google.gson.JsonElement element) {\n    if (element == null) {\n        {\n            return java.util.List<com.google.gson.JsonElement>.contains(element);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324738638/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":35,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
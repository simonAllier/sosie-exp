{"failureDictionary":{"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":51,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":101,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":128,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":179,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":265,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":10,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":275,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":55,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":177,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":239,"com.google.gson.MixedStreamTest.testWriteLenient":6,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":201,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":148,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":206,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":107,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":188,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":189,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":41,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":146,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":192,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":246,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":118,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":221,"com.google.gson.functional.ObjectTest.testSingletonLists":144,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":204,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":37,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":186,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":228,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":263,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":159,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":59,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":86,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":171,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":254,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":8,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":211,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":212,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":136,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":127,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":256,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":175,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":151,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":79,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":94,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":190,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":238,"com.google.gson.InnerClassExclusionStrategyTest.testExcludeInnerClassField":20,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":219,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":74,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":225,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":231,"com.google.gson.functional.JsonTreeTest.testToJsonTree":72,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":226,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":14,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":16,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreBehindInVersion":24,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":125,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":5,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":80,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":222,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":184,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":139,"com.google.gson.functional.MapTest.testGeneralMapField":77,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":149,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":195,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":63,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":249,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":156,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testSkipExplicitlySkippedFields":34,"com.google.gson.MixedStreamTest.testReadMixedStreamed":262,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":252,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":166,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":230,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":36,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":105,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":234,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":1,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testDifferentSerializeAndDeserializeField":31,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":241,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":168,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":135,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":202,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":215,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":99,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":67,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":232,"com.google.gson.functional.ObjectTest.testNestedDeserialization":176,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":253,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":181,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":11,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":2,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":133,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":165,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":29,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":40,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":152,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":56,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":62,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":113,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":3,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":38,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":93,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":82,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":116,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":110,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":205,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":96,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":76,"com.google.gson.functional.MapTest.testInterfaceTypeMap":75,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":233,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":251,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":84,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":198,"com.google.gson.functional.CollectionTest.testSetDeserialization":191,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":247,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":44,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":155,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testNeverSkipExplicitlyExposedAnnotatedFields":33,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":100,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":117,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":160,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":25,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":115,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":235,"com.google.gson.MixedStreamTest.testWriteClosed":261,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":183,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":187,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":85,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":150,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":119,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":83,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":19,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":132,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":173,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":90,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":178,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":229,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":243,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":88,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":153,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":216,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":180,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":137,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":209,"com.google.gson.functional.MapTest.testSerializeMaps":268,"com.google.gson.functional.MapTest.testComplexKeysSerialization":78,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":218,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":98,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":7,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":46,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":45,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":197,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":227,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":70,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":102,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":199,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":18,"com.google.gson.InnerClassExclusionStrategyTest.testIncludeStaticNestedClassField":21,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":129,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":217,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":57,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":73,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":167,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":106,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":174,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":4,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":258,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":91,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":162,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":182,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":141,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":276,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":264,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":266,"com.google.gson.ObjectTypeAdapterTest.testSerialize":26,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":271,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":104,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":108,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":0,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":50,"com.google.gson.functional.FieldNamingTest.testIdentity":210,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":207,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":120,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":66,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":169,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":9,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":17,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":61,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":143,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":89,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testSkipNonAnnotatedFields":30,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":277,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":52,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":245,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":28,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":49,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":111,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":172,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":130,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":42,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":124,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":154,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":200,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":259,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":203,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":242,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":185,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":114,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":158,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":248,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":109,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":214,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":273,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":255,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":97,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":270,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":95,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":68,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAtSameVersion":23,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":43,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":54,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":53,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":12,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testNeverSkipExposedAnnotatedFields":32,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":27,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":161,"com.google.gson.functional.ObjectTest.testNestedSerialization":163,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":81,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":60,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":269,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":140,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":126,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":145,"com.google.gson.MixedStreamTest.testWriteNulls":278,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":279,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":157,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":112,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":196,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":147,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":224,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":15,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":35,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":64,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":134,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":240,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":164,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":236,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":213,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":244,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":123,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":267,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":138,"com.google.gson.functional.CollectionTest.testSetSerialization":193,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":250,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":257,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":142,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":47,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":58,"com.google.gson.MixedStreamTest.testWriteInvalidState":260,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":272,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAheadInVersion":22,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":131,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":48,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":65,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":39,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":208,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":194,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":220,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":87,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":223,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":69,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":274,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":103,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":71,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":237,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":121,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":170,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":92,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":13,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":122},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:250","type":"CtVariableReadImpl"},"failures":[0,1,2,3,4,5,6],"tindex":"2b7c68ca-3f3c-11e6-9f94-c31d4370d9e8","method":{"position":"com.google.gson.Gson:273","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> floatAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343497904/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return ((float)(in.nextDouble()));\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    float float = value.floatValue();\n                    checkValidFloatingPoint(floatValue);\n                    out.value(value);\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.TreeTypeAdapter:55","type":"CtInvocationImpl"},"failures":[7,8,9,10,11,12,13,14,15,16,17,18,19],"tindex":"2b7d050b-3f3c-11e6-9f94-8b069eed6ffe","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:75","type":"CtMethodImpl","sourcecode":"private void put(com.google.gson.JsonElement value) {\n    if (value.isJsonNull()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343497904/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((java.lang.String) != null) {\n                if ((!(value.isJsonNull())) || (getSerializeNulls())) {\n                    com.google.gson.JsonObject com.google.gson.JsonObject = ((com.google.gson.JsonObject)(peek()));\n                    object.add(java.lang.String, value);\n                } \n                java.lang.String = null;\n            } else if (java.util.List<com.google.gson.JsonElement>.isEmpty()) {\n                com.google.gson.JsonElement = value;\n            } else {\n                com.google.gson.JsonElement com.google.gson.JsonElement = peek();\n                if (element instanceof com.google.gson.JsonArray) {\n                    ((com.google.gson.JsonArray)(element)).add(value);\n                } else {\n                    throw new java.lang.IllegalStateException();\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl"},"failures":[20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,9,72,73,74,75,76,77,78,10,79,80,81,11,12,13,82,83,84,14,15,85,86,87,88,16,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,18,19,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263],"tindex":"2b7d2c1c-3f3c-11e6-9f94-510299c5a2f8","method":{"position":"com.google.gson.internal.Excluder:149","type":"CtMethodImpl","sourcecode":"public boolean excludeField(java.lang.reflect.Field field, boolean serialize) {\n    if (field.isSynthetic()) {\n        {\n            if (((int) & (field.getModifiers())) != 0) {\n                return true;\n            } \n            if (((double) != (com.google.gson.internal.Excluder.com.google.gson.internal.Excluder.double)) && (!(isValidVersion(field.getAnnotation(com.google.gson.annotations.Since.com.google.gson.annotations.Since.java.lang.Class), field.getAnnotation(com.google.gson.annotations.Until.com.google.gson.annotations.Until.java.lang.Class))))) {\n                return true;\n            } \n            if (field.isSynthetic()) {\n                return true;\n            } \n            if (boolean) {\n                com.google.gson.annotations.Expose com.google.gson.annotations.Expose = field.getAnnotation(com.google.gson.annotations.Expose.com.google.gson.annotations.Expose.java.lang.Class);\n                if ((annotation == null) || (serialize ? !(annotation.serialize()) : !(annotation.deserialize()))) {\n                    return true;\n                } \n            } \n            if ((!(boolean)) && (isInnerClass(field.getType()))) {\n                return true;\n            } \n            if (isAnonymousOrLocal(field.getType())) {\n                return true;\n            } \n            java.util.List<com.google.gson.ExclusionStrategy> java.util.List<com.google.gson.ExclusionStrategy> = serialize ? java.util.List<com.google.gson.ExclusionStrategy> : java.util.List<com.google.gson.ExclusionStrategy>;\n            if (!(list.isEmpty())) {\n                com.google.gson.FieldAttributes com.google.gson.FieldAttributes = new com.google.gson.FieldAttributes(field);\n                for (com.google.gson.ExclusionStrategy com.google.gson.ExclusionStrategy : list) {\n                    if (exclusionStrategy.shouldSkipField(fieldAttributes)) {\n                        return true;\n                    } \n                }\n            } \n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343497904/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"field"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:159","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"2b7d7a3d-3f3c-11e6-9f94-a74bc45cbd52","method":{"position":"com.google.gson.internal.$Gson$Types:158","type":"CtMethodImpl","sourcecode":"public static boolean equals(java.lang.reflect.Type a, java.lang.reflect.Type b) {\n    if (a == b) {\n        return true;\n    } else if (a instanceof java.lang.Class) {\n        return a.equals(b);\n    } else if (a instanceof java.lang.reflect.ParameterizedType) {\n        if (!(b instanceof java.lang.reflect.ParameterizedType)) {\n            return false;\n        } \n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(a));\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(b));\n        return ((com.google.gson.internal.$Gson$Types.equal(pa.getOwnerType(), pb.getOwnerType())) && (pa.getRawType().equals(pb.getRawType()))) && (java.util.Arrays.equals(pa.getActualTypeArguments(), pb.getActualTypeArguments()));\n    } else if (a instanceof java.lang.reflect.GenericArrayType) {\n        if (!(b instanceof java.lang.reflect.GenericArrayType)) {\n            return false;\n        } \n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(a));\n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(b));\n        return com.google.gson.internal.$Gson$Types.equals(ga.getGenericComponentType(), gb.getGenericComponentType());\n    } else if (a instanceof java.lang.reflect.WildcardType) {\n        if (!(b instanceof java.lang.reflect.WildcardType)) {\n            return false;\n        } \n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(a));\n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(b));\n        return (java.util.Arrays.equals(wa.getUpperBounds(), wb.getUpperBounds())) && (java.util.Arrays.equals(wa.getLowerBounds(), wb.getLowerBounds()));\n    } else if (a instanceof java.lang.reflect.TypeVariable) {\n        if (!(b instanceof java.lang.reflect.TypeVariable)) {\n            return false;\n        } \n        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(a));\n        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(b));\n        return ((va.getGenericDeclaration()) == (vb.getGenericDeclaration())) && (va.getName().equals(vb.getName()));\n    } else {\n        return false;\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"b","b":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:430","type":"CtFieldReadImpl"},"failures":[264,265,266,8,267,70,71,9,72,268,73,269,10,79,11,12,13,14,15,16,107,108,17,109,110,270,18,19,271,272,178,179,182,273,219,274,222,223,225,275,226,276,227,277,258,259,278,260,6,279,261],"tindex":"2b7da14e-3f3c-11e6-9f94-1d3c342b2602","method":{"position":"com.google.gson.stream.JsonWriter:268","type":"CtMethodImpl","sourcecode":"public final void setSerializeNulls(boolean serializeNulls) {\n    if (serializeNulls) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343497904/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = serializeNulls;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeNulls":"serializeNulls"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"2b7da14f-3f3c-11e6-9f94-df2e811c7865","method":{"position":"com.google.gson.Gson:871","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343497904/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (json == null) {\n                return null;\n            } \n            return ((T)(fromJson(new com.google.gson.internal.bind.JsonTreeReader(json), typeOfT)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:131","type":"CtBinaryOperatorImpl"},"failures":[118,122,123,125],"tindex":"2b7dc860-3f3c-11e6-9f94-8d20c57e297e","method":{"position":"com.google.gson.internal.Primitives:79","type":"CtMethodImpl","sourcecode":"public static boolean isWrapperType(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343497904/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return com.google.gson.internal.Primitives.com.google.gson.internal.Primitives.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.containsKey(com.google.gson.internal.$Gson$Preconditions.checkNotNull(type));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"2b7dc861-3f3c-11e6-9f94-291209007d5a","method":{"position":"com.google.gson.DefaultDateTypeAdapter:77","type":"CtMethodImpl","sourcecode":"public java.util.Date deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT, com.google.gson.JsonDeserializationContext context) throws com.google.gson.JsonParseException {\n    if (json == null) {\n        {\n            if (!(json instanceof com.google.gson.JsonPrimitive)) {\n                throw new com.google.gson.JsonParseException(\"The date should be a string value\");\n            } \n            java.util.Date java.util.Date = deserializeToDate(json);\n            if (typeOfT == (java.util.Date.java.util.Date.java.lang.Class)) {\n                return date;\n            } else if (typeOfT == (java.sql.Timestamp.java.sql.Timestamp.java.lang.Class)) {\n                return new java.sql.Timestamp(date.getTime());\n            } else if (typeOfT == (java.sql.Date.java.sql.Date.java.lang.Class)) {\n                return new java.sql.Date(date.getTime());\n            } else {\n                throw new java.lang.IllegalArgumentException((((getClass()) + \" cannot deserialize to \") + typeOfT));\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343497904/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl"},"failures":[],"tindex":"2b7def72-3f3c-11e6-9f94-dfea1d34961b","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:86","type":"CtMethodImpl","sourcecode":"private com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField createBoundField(final com.google.gson.Gson context, final java.lang.reflect.Field field, final java.lang.String name, final com.google.gson.reflect.TypeToken<?> fieldType, boolean serialize, boolean deserialize) {\n    if (field.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343497904/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final boolean boolean = com.google.gson.internal.Primitives.isPrimitive(fieldType.getRawType());\n            return new com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField(name, serialize, deserialize) {\n                final com.google.gson.TypeAdapter<?> typeAdapter = getFieldAdapter(context, field, fieldType);\n\n                @java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n                @java.lang.Override\n                void write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                    java.lang.Object java.lang.Object = field.get(value);\n                    com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n                    t.write(writer, fieldValue);\n                }\n\n                @java.lang.Override\n                void read(com.google.gson.stream.JsonReader reader, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                    java.lang.Object java.lang.Object = com.google.gson.TypeAdapter<?>.read(reader);\n                    if ((fieldValue != null) || (!isPrimitive)) {\n                        field.set(value, fieldValue);\n                    } \n                }\n\n                public boolean writeField(java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                    if (!(boolean))\n                        return false;\n                    \n                    java.lang.Object java.lang.Object = field.get(value);\n                    return fieldValue != value;\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"field"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"2b7e1683-3f3c-11e6-9f94-a337c7fdeee1","method":{"position":"com.google.gson.FieldNamingPolicy:122","type":"CtMethodImpl","sourcecode":"private static java.lang.String separateCamelCase(java.lang.String name, java.lang.String separator) {\n    if (separator == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343497904/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            for (int int = 0 ; i < (name.length()) ; i++) {\n                char char = name.charAt(i);\n                if ((java.lang.Character.isUpperCase(character)) && ((translation.length()) != 0)) {\n                    translation.append(separator);\n                } \n                translation.append(character);\n            }\n            return translation.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"separator"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:537","type":"CtFieldReadImpl"},"failures":[],"tindex":"2b7e3d94-3f3c-11e6-9f94-15dfaa87a458","method":{"position":"com.google.gson.stream.JsonReader:325","type":"CtMethodImpl","sourcecode":"public final void setLenient(boolean lenient) {\n    if (lenient) {\n        {\n            com.google.gson.stream.JsonReader.this.boolean = lenient;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343497904/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"lenient"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"2b7e3d95-3f3c-11e6-9f94-eb1d2daa0d2c","method":{"position":"com.google.gson.Gson:552","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src != null) {\n        {\n            if (src != null) {\n                toJson(src, src.getClass(), writer);\n            } else {\n                toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull, writer);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343497904/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:199","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"2b7e64a6-3f3c-11e6-9f94-d9cf4eb69f2d","method":{"position":"com.google.gson.reflect.TypeToken:272","type":"CtMethodImpl","sourcecode":"private static boolean matches(java.lang.reflect.Type from, java.lang.reflect.Type to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeMap) {\n    if (from instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343497904/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (to.equals(from)) || ((from instanceof java.lang.reflect.TypeVariable) && (to.equals(typeMap.get(((java.lang.reflect.TypeVariable<?>)(from)).getName()))));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":13,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
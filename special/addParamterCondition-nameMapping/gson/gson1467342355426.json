{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":25,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":289,"com.google.gson.functional.StringTest.testStringValueDeserialization":572,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":636,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":235,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":423,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":494,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":385,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":136,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":348,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":118,"com.google.gson.MixedStreamTest.testWriteLenient":125,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":324,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":502,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":105,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":73,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":77,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":323,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":432,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":297,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":544,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":95,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":394,"com.google.gson.JsonObjectTest.testAddingNullPropertyValue":642,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":255,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":522,"com.google.gson.functional.ObjectTest.testSingletonLists":127,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":85,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":495,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":290,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":380,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":598,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":97,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":199,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":510,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":334,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":308,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":147,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":279,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":585,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":580,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":267,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":3,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":424,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":221,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":372,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":617,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":566,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":220,"com.google.gson.functional.EnumTest.testEnumCaseMapping":543,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":288,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":613,"com.google.gson.functional.JsonTreeTest.testToJsonTree":39,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":371,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":8,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":513,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":113,"com.google.gson.JsonObjectTest.testEqualsNonEmptyObject":631,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":59,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":473,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":645,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":187,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":381,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":488,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":304,"com.google.gson.internal.LinkedTreeMapTest.testLargeSetOfRandomKeys":626,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":192,"com.google.gson.functional.ObjectTest.testNullDeserialization":343,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":237,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":578,"com.google.gson.internal.bind.JsonElementReaderTest.testNestedObjects":620,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":329,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":34,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":612,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":386,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":335,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":564,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":161,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":340,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":611,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":93,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":466,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":514,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":61,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":446,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":445,"com.google.gson.JsonParserTest.testParseString":634,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":509,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":429,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":646,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":408,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":452,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":472,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":17,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":283,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":406,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":493,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":119,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":421,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":609,"com.google.gson.functional.StreamingTypeAdaptersTest.testFromJsonTree":629,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":275,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":485,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":31,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":201,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":232,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":430,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":545,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":422,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":130,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":548,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":104,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":141,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":327,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":139,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":228,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":390,"com.google.gson.metrics.PerformanceTest.testDummy":306,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":583,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":270,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":53,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":366,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":591,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":206,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":234,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":274,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":362,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":135,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":487,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":517,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":240,"com.google.gson.functional.CollectionTest.testSetDeserialization":197,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":96,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":13,"com.google.gson.functional.EnumTest.testEnumSet":179,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":319,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":413,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":54,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":202,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":212,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":478,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":15,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":52,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":302,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":426,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":365,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":436,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":98,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":561,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":33,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":383,"com.google.gson.functional.MapTest.testHashMapDeserialization":608,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":570,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":499,"com.google.gson.MixedStreamTest.testReadNulls":314,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":354,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":369,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":24,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":164,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":29,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":207,"com.google.gson.functional.MapTest.testSortedMap":223,"com.google.gson.functional.MapTest.testMapSerialization":100,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":26,"com.google.gson.internal.bind.JsonElementReaderTest.testObject":621,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":360,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":419,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":553,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":83,"com.google.gson.functional.MapTest.testSerializeMaps":99,"com.google.gson.functional.MapTest.testComplexKeysSerialization":229,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":318,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":233,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":70,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":239,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":542,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":177,"com.google.gson.internal.LinkedTreeMapTest.testRemoveRootDoesNotDoubleUnlink":253,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":172,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":602,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":540,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":6,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":254,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":27,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":342,"com.google.gson.functional.MapTest.testStringKeyDeserialization":231,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":556,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":593,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":448,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":103,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":389,"com.google.gson.functional.PrettyPrintingTest.testMap":4,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":384,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":536,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":74,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":356,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":469,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":603,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":307,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":557,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":647,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":294,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":573,"com.google.gson.functional.CollectionTest.testQueueSerialization":191,"com.google.gson.functional.MapTest.testMapSerializationEmpty":230,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":273,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":414,"com.google.gson.functional.MapTest.testMapOfMapSerialization":301,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":405,"com.google.gson.JavaSerializationTest.testMapIsSerializable":250,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":490,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":194,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":246,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":416,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":599,"com.google.gson.functional.FieldNamingTest.testIdentity":84,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":291,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":203,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":20,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":344,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":28,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":38,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":107,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":321,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":374,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":618,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":114,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":292,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":411,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":559,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":503,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":258,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":479,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":245,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":484,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":512,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":208,"com.google.gson.functional.MapTest.testMapSubclassSerialization":299,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":444,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":22,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":533,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":320,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":2,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":178,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":403,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":584,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":120,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":459,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":468,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":601,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":51,"com.google.gson.functional.EnumTest.testEnumSubclass":182,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":425,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":309,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":332,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":373,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":159,"com.google.gson.GsonBuilderTest.testRegisterTypeAdapterForCoreType":638,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":431,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":123,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":170,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":376,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":72,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":409,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":560,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":110,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":257,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":551,"com.google.gson.internal.LinkedTreeMapTest.testEqualsAndHashCode":628,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":129,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":415,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":138,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":407,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":506,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":322,"com.google.gson.MixedStreamTest.testWriteNulls":312,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":607,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":67,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":185,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":282,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":238,"com.google.gson.CommentsTest.testParseComments":252,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":531,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":12,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":524,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":595,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":44,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":428,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":554,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":359,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":293,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":610,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":461,"com.google.gson.MixedStreamTest.testReadInvalidState":310,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":92,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":58,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":35,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":508,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":263,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":265,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":648,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":558,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":162,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":398,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":244,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":440,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":491,"com.google.gson.functional.MapTest.testMapDeserialization":215,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":550,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":486,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":9,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":606,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":521,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":41,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":214,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":176,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":276,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":173,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeMap":630,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":37,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":183,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":151,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":18,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":333,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":166,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":538,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":269,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":474,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":256,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":47,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":71,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":5,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":222,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":248,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":511,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":370,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":204,"com.google.gson.functional.PrimitiveTest.testShortSerialization":443,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":526,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":434,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":568,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":404,"com.google.gson.internal.LinkedTreeMapTest.testIterationOrder":627,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":433,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":153,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":382,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":80,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":181,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":569,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":352,"com.google.gson.internal.LinkedTreeMapTest.testPutOverrides":624,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":210,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":397,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":450,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":571,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":121,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":501,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":530,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":317,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":622,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":457,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":451,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":640,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":368,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":131,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":149,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":592,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":86,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":463,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":438,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":158,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":90,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":410,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":346,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":326,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":184,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":168,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":260,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":76,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":475,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":534,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":594,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":174,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":492,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":525,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":388,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":30,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":481,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":527,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":497,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":111,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":189,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":377,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":439,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":412,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":454,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":144,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":175,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":180,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":358,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":361,"com.google.gson.functional.MapTest.testGeneralMapField":101,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":325,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":547,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":456,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":69,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":516,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":535,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":156,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":225,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":146,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":278,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":464,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":435,"com.google.gson.MixedStreamTest.testReadMixedStreamed":316,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":217,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":399,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":476,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":143,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":287,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":303,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":582,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":417,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":567,"com.google.gson.JavaSerializationTest.testNumberIsSerializable":249,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":364,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":155,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":218,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":519,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":209,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":455,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":596,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":11,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":88,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":400,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":623,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":489,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":186,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":21,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":193,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":462,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":529,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":205,"com.google.gson.functional.ObjectTest.testNestedDeserialization":347,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":338,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":460,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":355,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":268,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":565,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":453,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":43,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":219,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":367,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":574,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":50,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":442,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":167,"com.google.gson.JavaSerializationTest.testListIsSerializable":251,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":109,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":122,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":79,"com.google.gson.functional.ObjectTest.testNullSerialization":330,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":46,"com.google.gson.stream.JsonWriterTest.testDoubles":637,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":518,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":211,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":226,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":375,"com.google.gson.functional.MapTest.testInterfaceTypeMap":224,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":552,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":537,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":271,"com.google.gson.JsonObjectTest.testAddingNullOrEmptyPropertyName":632,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":378,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":541,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":639,"com.google.gson.MixedStreamTest.testReadClosed":311,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":520,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":539,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":465,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":563,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":392,"com.google.gson.MixedStreamTest.testWriteClosed":315,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":286,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":357,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":148,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":261,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":515,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":55,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":40,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":45,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":19,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":163,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":157,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":262,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":272,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":75,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":587,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeWithCustomTypeAdapter":641,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":420,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":89,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":171,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":195,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":498,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":349,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":242,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":458,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":266,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":36,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":471,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":241,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":280,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":115,"com.google.gson.functional.CollectionTest.testQueueDeserialization":200,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":402,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":418,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":577,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":353,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":507,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":588,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":216,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":341,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":483,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":62,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":132,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":188,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":1,"com.google.gson.functional.MapTest.testRawMapSerialization":102,"com.google.gson.JsonParserTest.testParseReader":633,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":198,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":496,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":63,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":165,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":337,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":134,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":528,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":247,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":281,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":298,"com.google.gson.functional.PrimitiveTest.testByteSerialization":441,"com.google.gson.ObjectTypeAdapterTest.testSerialize":0,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":116,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":60,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":387,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":106,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":68,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":81,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":56,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":575,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":616,"com.google.gson.functional.MapTest.testMapWithQuotes":300,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":395,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":470,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":576,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":590,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":142,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":600,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":64,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":447,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":467,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":94,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":523,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":48,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":345,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":10,"com.google.gson.functional.ObjectTest.testEmptyStringDeserialization":331,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":427,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":480,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":128,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":285,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":504,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":152,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":87,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":108,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":482,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":437,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":605,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":196,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":549,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":49,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":65,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":505,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":169,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":350,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":589,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":23,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":604,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":379,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":532,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":597,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":643,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":336,"com.google.gson.functional.ObjectTest.testNestedSerialization":16,"com.google.gson.JsonObjectTest.testAddingStringProperties":124,"com.google.gson.internal.LinkedTreeMapTest.testClear":625,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":145,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":277,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":391,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":579,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":259,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":227,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":264,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":42,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":126,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":615,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":14,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":133,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":449,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":112,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":581,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":154,"com.google.gson.GsonBuilderTest.testCreatingMoreThanOnce":305,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":393,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":614,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":150,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":339,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":586,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":644,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":295,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":284,"com.google.gson.functional.CollectionTest.testSetSerialization":78,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":160,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":7,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":91,"com.google.gson.functional.StringTest.testStringValueSerialization":296,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":32,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":137,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":190,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":243,"com.google.gson.MixedStreamTest.testWriteInvalidState":313,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":546,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":328,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":396,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":401,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":555,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":140,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":477,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":82,"com.google.gson.ObjectTypeAdapterTest.testDeserialize":619,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":236,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":351,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":562,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":57,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":500,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":117,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":213,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":635,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":66,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":363},"transformations":[{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104],"tindex":"ba1dc368-3f38-11e6-9728-2b71368b6bf3","method":{"position":"com.google.gson.internal.bind.TypeAdapters:245","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341142832/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                {\n                    out.value(value);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341142832/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl"},"failures":[105,106,107,108,109,25,39,110,111,112,113,114,115,45,49],"tindex":"ba1e86b9-3f38-11e6-9728-5941b6a008a7","method":{"position":"com.google.gson.Gson:468","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src) {\n    if (src == null) {\n        {\n            if (src == null) {\n                {\n                    if (src == null) {\n                        return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n                    } \n                    return toJsonTree(src, src.getClass());\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341142832/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341142832/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl"},"failures":[105,106,108,109,116,117,114,118,119,120,121,122,123,124],"tindex":"ba1eadca-3f38-11e6-9728-9d8d218b8306","method":{"position":"com.google.gson.JsonObject:78","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.String value) {\n    if (property == null) {\n        {\n            add(property, createJsonElement(value));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341142832/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:136","type":"CtBinaryOperatorImpl"},"failures":[0,125,126,5,9,10,11,105,106,108,109,127,128,129,13,130,18,131,132,133,22,23,134,135,136,27,137,138,28,139,140,141,29,142,143,30,31,144,145,146,147,37,110,40,111,148,149,41,113,150,151,152,153,154,155,156,157,42,158,159,160,161,162,163,43,44,115,45,164,165,166,167,168,169,46,170,171,172,173,174,175,176,177,48,50,51,52,55,56,57,58,59,178,179,180,181,182,183,184,185,186,64,67,187,73,188,74,189,190,191,75,192,76,193,194,195,196,197,198,78,79,199,200,201,202,203,123,204,205,92,93,94,95,96,206,207,208,209,210,211,212,213,214,215,216,217,218,219,100,220,221,222,223,224,225,226,101,227,228,229,230,231,232,233,234,103,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252],"tindex":"ba1f711b-3f38-11e6-9728-752d7e2724aa","method":{"position":"com.google.gson.internal.ConstructorConstructor:128","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nprivate <T>com.google.gson.internal.ObjectConstructor<T> newDefaultImplementationConstructor(final java.lang.reflect.Type type, java.lang.Class<? super T> rawType) {\n    if (type instanceof java.lang.reflect.TypeVariable) {\n        {\n            if (java.util.Collection.java.util.Collection.java.lang.Class.isAssignableFrom(rawType)) {\n                if (java.util.SortedSet.java.util.SortedSet.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.TreeSet<java.lang.Object>()));\n                        }\n                    };\n                } else if (java.util.EnumSet.java.util.EnumSet.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        @java.lang.SuppressWarnings(value = \"rawtypes\")\n                        public T construct() {\n                            if (type instanceof java.lang.reflect.ParameterizedType) {\n                                java.lang.reflect.Type java.lang.reflect.Type = ((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0];\n                                if (elementType instanceof java.lang.Class) {\n                                    return ((T)(java.util.EnumSet.noneOf(((java.lang.Class)(elementType)))));\n                                } else {\n                                    throw new com.google.gson.JsonIOException((\"Invalid EnumSet type: \" + (type.toString())));\n                                }\n                            } else {\n                                throw new com.google.gson.JsonIOException((\"Invalid EnumSet type: \" + (type.toString())));\n                            }\n                        }\n                    };\n                } else if (java.util.Set.java.util.Set.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedHashSet<java.lang.Object>()));\n                        }\n                    };\n                } else if (java.util.Queue.java.util.Queue.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedList<java.lang.Object>()));\n                        }\n                    };\n                } else {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.ArrayList<java.lang.Object>()));\n                        }\n                    };\n                }\n            } \n            if (java.util.Map.java.util.Map.java.lang.Class.isAssignableFrom(rawType)) {\n                if (java.util.SortedMap.java.util.SortedMap.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.TreeMap<java.lang.Object, java.lang.Object>()));\n                        }\n                    };\n                } else if ((type instanceof java.lang.reflect.ParameterizedType) && (!(java.lang.String.java.lang.String.java.lang.Class.isAssignableFrom(com.google.gson.reflect.TypeToken.get(((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0]).getRawType())))) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedHashMap<java.lang.Object, java.lang.Object>()));\n                        }\n                    };\n                } else {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new com.google.gson.internal.LinkedTreeMap<java.lang.String, java.lang.Object>()));\n                        }\n                    };\n                }\n            } \n            return null;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341142832/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:246","type":"CtVariableReadImpl"},"failures":[253,121,254],"tindex":"ba1fe64c-3f38-11e6-9728-51c92582409b","method":{"position":"com.google.gson.internal.LinkedTreeMap:217","type":"CtMethodImpl","sourcecode":"void removeInternal(com.google.gson.internal.LinkedTreeMap.Node<K, V> node, boolean unlink) {\n    if (node != null) {\n        {\n            if (unlink) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341142832/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (unlink) {\n                        node.com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                        node.com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    } \n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    if ((left != null) && (right != null)) {\n                        com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = (left.int) > (right.int) ? left.last() : right.first();\n                        removeInternal(adjacent, false);\n                        int int = 0;\n                        left = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                        if (left != null) {\n                            leftHeight = left.int;\n                            adjacent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = left;\n                            left.com.google.gson.internal.LinkedTreeMap.Node<K, V> = adjacent;\n                            node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                        } \n                        int int = 0;\n                        right = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                        if (right != null) {\n                            rightHeight = right.int;\n                            adjacent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = right;\n                            right.com.google.gson.internal.LinkedTreeMap.Node<K, V> = adjacent;\n                            node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                        } \n                        adjacent.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                        replaceInParent(node, adjacent);\n                        return ;\n                    } else if (left != null) {\n                        replaceInParent(node, left);\n                        node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                    } else if (right != null) {\n                        replaceInParent(node, right);\n                        node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                    } else {\n                        replaceInParent(node, null);\n                    }\n                    rebalance(originalParent, false);\n                    (int)--;\n                    (int)++;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341142832/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"unlink":"unlink"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:136","type":"CtBinaryOperatorImpl"},"failures":[255,256,58,59],"tindex":"ba205b7d-3f38-11e6-9728-454519bba43a","method":{"position":"com.google.gson.internal.Primitives:79","type":"CtMethodImpl","sourcecode":"public static boolean isWrapperType(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.GenericArrayType) {\n        {\n            return com.google.gson.internal.Primitives.com.google.gson.internal.Primitives.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.containsKey(com.google.gson.internal.$Gson$Preconditions.checkNotNull(type));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341142832/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl"},"failures":[257,258,1,2,126,6,10,259,11,260,127,12,261,262,14,15,16,17,19,20,21,22,23,24,25,26,263,264,140,141,30,31,32,144,145,146,265,266,36,37,39,267,268,110,269,270,271,111,112,41,272,113,273,274,156,42,162,163,115,164,166,168,169,275,276,49,54,178,60,277,278,61,62,63,279,280,65,281,282,283,284,68,69,285,71,72,73,188,191,286,192,76,195,77,287,288,289,290,291,292,293,294,295,296,297,85,87,298,97,98,299,99,212,214,216,300,301,224,226,101,102,229,232,235,242,243,244,245,246,104,247,302,303],"tindex":"ba205b7e-3f38-11e6-9728-bb112dc25ec7","method":{"position":"com.google.gson.internal.bind.TypeAdapters:361","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341142832/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                {\n                    out.value(value);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341142832/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"ba20828f-3f38-11e6-9728-2fb59c6b8e13","method":{"position":"com.google.gson.internal.bind.TypeAdapters:361","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341142832/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                {\n                    out.value(value);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341142832/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"ba20a9a0-3f38-11e6-9728-af6770108e3e","method":{"position":"com.google.gson.Gson:468","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src) {\n    if (src == null) {\n        {\n            if (src == null) {\n                {\n                    if (src == null) {\n                        return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n                    } \n                    return toJsonTree(src, src.getClass());\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341142832/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341142832/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"ba20a9a1-3f38-11e6-9728-1d1ca896de4d","method":{"position":"com.google.gson.Gson:552","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341142832/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            if (src != null) {\n                {\n                    if (src == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341142832/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new com.google.gson.JsonIOException();\n                    } else {\n                        {\n                            if (src != null) {\n                                toJson(src, src.getClass(), writer);\n                            } else {\n                                toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull, writer);\n                            }\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341142832/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:85","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"ba20d0b2-3f38-11e6-9728-13bc9fe94092","method":{"position":"com.google.gson.internal.$Gson$Types:411","type":"CtMethodImpl","sourcecode":"private static int indexOf(java.lang.Object[] array, java.lang.Object toFind) {\n    for (int int = 0 ; i < (array.int) ; i++) {\n        if (toFind.equals(array[i])) {\n            return i;\n        } \n    }\n    throw new java.util.NoSuchElementException();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"toFind"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl"},"failures":[304],"tindex":"ba20f7c3-3f38-11e6-9728-8bc0864b21b4","method":{"position":"com.google.gson.Gson:133","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src) {\n    if (src == null) {\n        {\n            if (src != null) {\n                {\n                    return toJsonTree(src);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341142832/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341142832/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"ba20f7c4-3f38-11e6-9728-cb42b8393991","method":{"position":"com.google.gson.FieldNamingPolicy:122","type":"CtMethodImpl","sourcecode":"private static java.lang.String separateCamelCase(java.lang.String name, java.lang.String separator) {\n    if (name == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341142832/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            for (int int = 0 ; i < (name.length()) ; i++) {\n                char char = name.charAt(i);\n                if ((java.lang.Character.isUpperCase(character)) && ((translation.length()) != 0)) {\n                    translation.append(separator);\n                } \n                translation.append(character);\n            }\n            return translation.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:726","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"ba211ed5-3f38-11e6-9728-d79c9ad3993c","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:170","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(long value) throws java.io.IOException {\n    if (value == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341142832/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"ba211ed6-3f38-11e6-9728-938ac34213bf","method":{"position":"com.google.gson.Gson:552","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341142832/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            if (src != null) {\n                {\n                    if (src == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341142832/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new com.google.gson.JsonIOException();\n                    } else {\n                        {\n                            if (src != null) {\n                                toJson(src, src.getClass(), writer);\n                            } else {\n                                toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull, writer);\n                            }\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341142832/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:250","type":"CtVariableReadImpl"},"failures":[257,258,305,306,307,308,309,1,310,311,2,312,313,125,314,126,315,316,317,3,4,5,6,7,8,9,10,259,11,318,319,260,320,105,106,107,108,109,321,127,322,323,12,324,325,261,326,327,262,328,128,129,13,329,330,14,331,332,333,334,335,15,336,337,16,338,339,130,340,341,342,343,17,344,18,131,345,19,132,346,347,348,133,20,21,349,350,351,352,22,23,24,353,25,26,354,355,356,357,358,359,360,263,361,264,362,134,363,135,364,365,366,136,367,27,137,368,138,28,139,140,141,369,29,142,143,30,31,32,116,117,144,145,370,371,372,373,374,375,376,377,378,379,380,146,381,382,265,383,384,385,386,387,388,389,390,391,392,393,394,395,396,266,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,147,435,436,33,437,438,439,440,441,442,34,443,35,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,36,37,38,39,267,460,461,268,110,269,270,40,271,111,112,148,149,41,272,113,462,463,464,465,466,150,151,467,468,469,470,471,152,472,473,474,475,476,477,478,153,479,480,481,482,483,273,154,484,485,486,487,488,489,490,155,491,492,493,494,495,496,497,498,499,500,274,501,502,156,503,504,505,506,507,508,157,509,510,511,512,513,514,515,42,158,159,114,516,160,517,161,518,519,162,163,43,44,115,45,164,165,166,167,168,169,46,170,171,275,520,47,172,173,174,521,522,276,523,304,175,176,524,525,526,527,528,529,177,530,48,531,49,50,51,52,53,54,255,55,56,57,256,58,532,533,59,534,535,536,537,178,538,539,179,180,181,182,183,540,541,542,184,543,544,118,119,120,121,122,185,186,545,60,277,278,61,62,280,65,546,547,548,281,282,66,549,550,283,284,67,551,187,552,68,553,69,554,555,556,285,557,70,558,71,559,560,72,561,562,563,564,565,566,567,568,73,188,569,74,189,190,570,191,75,286,192,76,193,194,195,196,197,77,287,198,78,79,199,571,200,80,81,82,83,84,572,288,289,290,291,292,573,574,293,575,294,576,577,578,295,579,580,296,297,581,582,85,583,584,86,585,586,87,88,587,588,89,589,590,201,202,591,203,592,123,593,90,594,91,595,596,204,597,598,599,600,205,92,93,94,95,96,206,298,601,97,602,603,604,207,605,98,208,606,607,608,209,299,99,210,211,212,213,214,215,216,609,217,218,219,300,301,100,220,221,222,610,223,224,225,226,101,227,102,228,229,230,231,232,233,234,103,235,236,237,238,239,240,241,611,612,104,613,614,615,616,302,617,618,303,252],"tindex":"ba216cf7-3f38-11e6-9728-31a0e05a228e","method":{"position":"com.google.gson.Gson:273","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> floatAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                {\n                    if (serializeSpecialFloatingPointValues) {\n                        return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n                    } \n                    return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                        @java.lang.Override\n                        public java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                            if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                                in.nextNull();\n                                return null;\n                            } \n                            return ((float)(in.nextDouble()));\n                        }\n\n                        @java.lang.Override\n                        public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                            if (value == null) {\n                                out.nullValue();\n                                return ;\n                            } \n                            float float = value.floatValue();\n                            checkValidFloatingPoint(floatValue);\n                            out.value(value);\n                        }\n                    };\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341142832/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341142832/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"ba21bb18-3f38-11e6-9728-9345ac1b8025","method":{"position":"com.google.gson.Gson:127","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonParseException {\n    if (json == null) {\n        {\n            return ((T)(fromJson(json, typeOfT)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341142832/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"ba21bb19-3f38-11e6-9728-99a19182e900","method":{"position":"com.google.gson.Gson:552","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341142832/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            if (src != null) {\n                {\n                    if (src == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341142832/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new com.google.gson.JsonIOException();\n                    } else {\n                        {\n                            if (src != null) {\n                                toJson(src, src.getClass(), writer);\n                            } else {\n                                toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull, writer);\n                            }\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341142832/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:109","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"ba21e22a-3f38-11e6-9728-41a08b641a33","method":{"position":"com.google.gson.internal.$Gson$Types:511","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    return (o instanceof java.lang.reflect.GenericArrayType) && (com.google.gson.internal.$Gson$Types.equals(com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl.this, ((java.lang.reflect.GenericArrayType)(o))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:274","type":"CtVariableReadImpl"},"failures":[],"tindex":"ba21e22b-3f38-11e6-9728-9bd87efd3c2d","method":{"position":"com.google.gson.Gson:273","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> floatAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                {\n                    if (serializeSpecialFloatingPointValues) {\n                        return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n                    } \n                    return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                        @java.lang.Override\n                        public java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                            if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                                in.nextNull();\n                                return null;\n                            } \n                            return ((float)(in.nextDouble()));\n                        }\n\n                        @java.lang.Override\n                        public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                            if (value == null) {\n                                out.nullValue();\n                                return ;\n                            } \n                            float float = value.floatValue();\n                            checkValidFloatingPoint(floatValue);\n                            out.value(value);\n                        }\n                    };\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341142832/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341142832/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:109","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"ba22304c-3f38-11e6-9728-11611437dce7","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:839","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonPrimitive) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341142832/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return containsKey(o);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:384","type":"CtVariableReadImpl"},"failures":[619,620,621,622,623,624,625,626,627,628,253,22,25,358,361,362,134,29,30,31,116,117,36,37,38,39,267,110,269,111,112,113,466,477,115,45,118,119,120,121,122,629,630,64,199,591,597,97,215,218,220,231,631,632,633,634,104,250],"tindex":"ba22304d-3f38-11e6-9728-050fc34448fe","method":{"position":"com.google.gson.internal.LinkedTreeMap:310","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (insert) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341142832/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            for (com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>) {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                int int = left != null ? left.int : 0;\n                int int = right != null ? right.int : 0;\n                int int = leftHeight - rightHeight;\n                if (delta == (-2)) {\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    int int = rightRight != null ? rightRight.int : 0;\n                    int int = rightLeft != null ? rightLeft.int : 0;\n                    int int = rightLeftHeight - rightRightHeight;\n                    if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                        rotateLeft(node);\n                    } else {\n                        assert rightDelta == 1;\n                        rotateRight(right);\n                        rotateLeft(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 2) {\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    int int = leftRight != null ? leftRight.int : 0;\n                    int int = leftLeft != null ? leftLeft.int : 0;\n                    int int = leftLeftHeight - leftRightHeight;\n                    if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                        rotateRight(node);\n                    } else {\n                        assert leftDelta == (-1);\n                        rotateLeft(left);\n                        rotateRight(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 0) {\n                    node.int = leftHeight + 1;\n                    if (insert) {\n                        break;\n                    } \n                } else {\n                    assert (delta == (-1)) || (delta == 1);\n                    node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                    if (!insert) {\n                        break;\n                    } \n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"insert"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:85","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"ba227e6e-3f38-11e6-9728-d7edefac0f17","method":{"position":"com.google.gson.internal.$Gson$Types:411","type":"CtMethodImpl","sourcecode":"private static int indexOf(java.lang.Object[] array, java.lang.Object toFind) {\n    for (int int = 0 ; i < (array.int) ; i++) {\n        if (toFind.equals(array[i])) {\n            return i;\n        } \n    }\n    throw new java.util.NoSuchElementException();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"toFind"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl"},"failures":[257,258,3,4,5,6,7,8,9,259,11,260,321,127,12,261,262,13,14,333,335,15,337,16,338,130,17,18,131,19,20,21,350,352,22,24,356,263,264,136,27,368,28,139,140,141,369,32,144,145,373,375,146,265,390,391,266,398,399,402,405,407,408,411,412,416,425,427,429,430,433,435,33,440,442,34,35,444,448,450,454,455,37,40,41,272,463,465,469,474,480,481,482,483,273,484,486,487,489,155,492,493,495,274,502,156,504,505,506,507,508,157,511,514,159,114,516,517,161,519,162,163,43,44,164,165,166,167,168,169,46,275,47,174,276,304,175,176,525,526,527,177,53,534,535,536,537,178,538,539,179,180,181,182,541,184,544,60,277,278,61,62,64,280,65,547,548,281,282,66,283,284,68,69,555,285,70,71,72,561,562,563,564,565,566,567,568,73,188,74,75,286,76,195,77,78,80,81,82,83,84,288,289,290,291,292,293,294,295,296,297,85,584,86,87,88,89,590,123,593,90,91,595,596,597,600,92,93,94,95,96,298,97,99,216,300,301,610,224,226,101,102,235,236,237,238,239,241,242,243,244,245,246,104,615,617,618,303],"tindex":"ba22a57f-3f38-11e6-9728-8dd217e82f25","method":{"position":"com.google.gson.Gson:510","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src) {\n    if (src == null) {\n        {\n            if (src == null) {\n                return toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull);\n            } \n            return toJson(src, src.getClass());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341142832/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:188","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"ba2341c0-3f38-11e6-9728-97a30f4cc740","method":{"position":"com.google.gson.reflect.TypeToken:122","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic boolean isAssignableFrom(java.lang.reflect.Type from) {\n    if (from == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341142832/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (from == null) {\n                return false;\n            } \n            if (java.lang.reflect.Type.equals(from)) {\n                return true;\n            } \n            if ((java.lang.reflect.Type) instanceof java.lang.Class<?>) {\n                return java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from));\n            } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.ParameterizedType) {\n                return com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n            } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.GenericArrayType) {\n                return (java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from))) && (com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.GenericArrayType)(java.lang.reflect.Type))));\n            } else {\n                throw com.google.gson.reflect.TypeToken.buildUnexpectedTypeError(java.lang.reflect.Type, java.lang.Class.java.lang.Class.java.lang.Class, java.lang.reflect.ParameterizedType.java.lang.reflect.ParameterizedType.java.lang.Class, java.lang.reflect.GenericArrayType.java.lang.reflect.GenericArrayType.java.lang.Class);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:198","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"ba2341c1-3f38-11e6-9728-ed355f41f40d","method":{"position":"com.google.gson.internal.LinkedTreeMap:207","type":"CtMethodImpl","sourcecode":"private boolean equal(java.lang.Object a, java.lang.Object b) {\n    if (b instanceof java.lang.reflect.TypeVariable) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341142832/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (a == b) || ((a != null) && (a.equals(b)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory:43","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"ba2368d2-3f38-11e6-9728-39cb8edb778d","method":{"position":"com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory:50","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nstatic com.google.gson.TypeAdapter<?> getTypeAdapter(com.google.gson.internal.ConstructorConstructor constructorConstructor, com.google.gson.Gson gson, com.google.gson.reflect.TypeToken<?> fieldType, com.google.gson.annotations.JsonAdapter annotation) {\n    if (annotation != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341142832/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (annotation != null) {\n                {\n                    if (annotation == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341142832/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            java.lang.Class<?> java.lang.Class<?> = annotation.value();\n                            if (com.google.gson.TypeAdapter.com.google.gson.TypeAdapter.java.lang.Class.isAssignableFrom(value)) {\n                                java.lang.Class<com.google.gson.TypeAdapter<?>> java.lang.Class<com.google.gson.TypeAdapter<?>> = ((java.lang.Class<com.google.gson.TypeAdapter<?>>)(value));\n                                return constructorConstructor.get(com.google.gson.reflect.TypeToken.get(typeAdapter)).construct();\n                            } \n                            if (com.google.gson.TypeAdapterFactory.com.google.gson.TypeAdapterFactory.java.lang.Class.isAssignableFrom(value)) {\n                                java.lang.Class<com.google.gson.TypeAdapterFactory> java.lang.Class<com.google.gson.TypeAdapterFactory> = ((java.lang.Class<com.google.gson.TypeAdapterFactory>)(value));\n                                return constructorConstructor.get(com.google.gson.reflect.TypeToken.get(typeAdapterFactory)).construct().create(gson, fieldType);\n                            } \n                            throw new java.lang.IllegalArgumentException(\"@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.\");\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341142832/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"ba23b6f3-3f38-11e6-9728-ede5268316c1","method":{"position":"com.google.gson.Gson:871","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341142832/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (json == null) {\n                return null;\n            } \n            return ((T)(fromJson(new com.google.gson.internal.bind.JsonTreeReader(json), typeOfT)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:298","type":"CtBinaryOperatorImpl"},"failures":[635,636,637],"tindex":"ba23de04-3f38-11e6-9728-bf9534983565","method":{"position":"com.google.gson.stream.JsonWriter:461","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(double value) throws java.io.IOException {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                throw new java.lang.IllegalArgumentException((\"Numeric values must be finite, but was \" + value));\n            } \n            writeDeferredName();\n            beforeValue(false);\n            java.io.Writer.append(java.lang.Double.toString(value));\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341142832/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl"},"failures":[462,478,507],"tindex":"ba23de05-3f38-11e6-9728-d5344e0f9706","method":{"position":"com.google.gson.internal.bind.DateTypeAdapter:69","type":"CtMethodImpl","sourcecode":"private synchronized java.util.Date deserializeToDate(java.lang.String json) {\n    if (json == null) {\n        {\n            if (json == null) {\n                {\n                    try {\n                        return java.text.DateFormat.parse(json);\n                    } catch (java.text.ParseException ignored) {\n                    }\n                    try {\n                        return java.text.DateFormat.parse(json);\n                    } catch (java.text.ParseException ignored) {\n                    }\n                    try {\n                        return java.text.DateFormat.parse(json);\n                    } catch (java.text.ParseException e) {\n                        throw new com.google.gson.JsonSyntaxException(json , e);\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341142832/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341142832/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:452","type":"CtBinaryOperatorImpl"},"failures":[638,307,308,309,105,106,107,108,109,349,359,360,263,361,264,362,134,491,498,501,508,511,42,158,114,523,304,526,49,532,535,536,537,639,640,641,561,562,563,564,565,566,568,571,201,591,592,123,593,90,594,91,596,597,598,599,606,235,236,238,616,302,617,618,303],"tindex":"ba240516-3f38-11e6-9728-4d7cffb8b13e","method":{"position":"com.google.gson.GsonBuilder:447","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\npublic com.google.gson.GsonBuilder registerTypeAdapter(java.lang.reflect.Type type, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof com.google.gson.InstanceCreator<?>) {\n        {\n            com.google.gson.internal.$Gson$Preconditions.checkArgument(((((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) || (typeAdapter instanceof com.google.gson.InstanceCreator<?>)) || (typeAdapter instanceof com.google.gson.TypeAdapter<?>)));\n            if (typeAdapter instanceof com.google.gson.InstanceCreator<?>) {\n                java.util.Map<java.lang.reflect.Type, com.google.gson.InstanceCreator<?>>.put(type, ((com.google.gson.InstanceCreator)(typeAdapter)));\n            } \n            if ((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) {\n                com.google.gson.reflect.TypeToken<?> com.google.gson.reflect.TypeToken<?> = com.google.gson.reflect.TypeToken.get(type);\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.TreeTypeAdapter.newFactoryWithMatchRawType(typeToken, typeAdapter));\n            } \n            if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.internal.bind.TypeAdapters.newFactory(com.google.gson.reflect.TypeToken.get(type), ((com.google.gson.TypeAdapter)(typeAdapter))));\n            } \n            return com.google.gson.GsonBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341142832/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[33,613],"tindex":"ba242c27-3f38-11e6-9728-7f90a9d823a8","method":{"position":"com.google.gson.Gson:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            out.value(value.toString());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341142832/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl"},"failures":[257,258,0,1,2,313,315,316,317,5,6,10,11,105,106,108,109,321,127,322,323,12,324,325,261,326,327,262,128,13,329,14,332,334,15,336,337,16,339,130,340,341,17,344,18,131,345,19,132,346,347,348,20,21,350,351,352,22,23,24,25,26,355,356,357,358,360,263,361,264,134,135,364,365,136,27,137,138,28,139,140,141,29,143,30,31,32,144,145,438,36,37,38,39,267,268,110,269,270,40,271,111,112,148,149,41,272,113,150,151,475,153,154,155,504,157,42,158,159,516,160,517,161,162,163,43,44,115,45,164,165,166,167,168,169,46,170,171,275,520,47,172,173,174,521,522,175,176,524,525,527,177,530,48,531,50,51,52,53,54,255,55,56,57,256,58,533,59,178,541,542,118,119,120,121,122,60,61,62,64,69,554,555,71,559,560,72,73,569,76,197,77,78,80,81,82,83,84,581,582,85,583,86,585,586,87,88,587,588,89,201,592,123,90,91,92,94,95,96,601,97,98,216,221,224,226,101,229,235,236,237,238,239,240,241,242,243,244,245,246,104,302],"tindex":"ba245338-3f38-11e6-9728-fd87ee17168a","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:116","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<?> getFieldAdapter(com.google.gson.Gson gson, java.lang.reflect.Field field, com.google.gson.reflect.TypeToken<?> fieldType) {\n    if (field.isSynthetic()) {\n        {\n            com.google.gson.annotations.JsonAdapter com.google.gson.annotations.JsonAdapter = field.getAnnotation(com.google.gson.annotations.JsonAdapter.com.google.gson.annotations.JsonAdapter.java.lang.Class);\n            if (annotation != null) {\n                com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory.getTypeAdapter(com.google.gson.internal.ConstructorConstructor, gson, fieldType, annotation);\n                if (adapter != null)\n                    return adapter;\n                \n            } \n            return gson.getAdapter(fieldType);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341142832/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"field"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonObject:54","type":"CtBinaryOperatorImpl"},"failures":[642],"tindex":"ba247a49-3f38-11e6-9728-df78122bc739","method":{"position":"com.google.gson.JsonObject:53","type":"CtMethodImpl","sourcecode":"public void add(java.lang.String property, com.google.gson.JsonElement value) {\n    if (property == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341142832/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341142832/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (value == null) {\n                        value = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n                    } \n                    com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.put(property, value);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[153],"tindex":"ba24a15a-3f38-11e6-9728-87267fcb12af","method":{"position":"com.google.gson.internal.bind.TypeAdapters:201","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341142832/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:298","type":"CtBinaryOperatorImpl"},"failures":[136,27,28,427,455,37,40,54,643,639,640,63,644,645,646,647,68],"tindex":"ba24c86b-3f38-11e6-9728-4798ac500cfb","method":{"position":"com.google.gson.Gson:297","type":"CtMethodImpl","sourcecode":"private void checkValidFloatingPoint(double value) {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                throw new java.lang.IllegalArgumentException(((value + \" is not a valid double value as per JSON specification. To override this\") + \" behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.\"));\n            } \n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341142832/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:578","type":"CtBinaryOperatorImpl"},"failures":[648],"tindex":"ba24c86c-3f38-11e6-9728-719e9103fe0d","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:401","type":"CtMethodImpl","sourcecode":"private void rotateLeft(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root == null) {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivotLeft;\n            if (pivotLeft != null) {\n                pivotLeft.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            } \n            replaceInParent(root, pivot);\n            pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot;\n            root.int = (java.lang.Math.max((left != null ? left.int : 0), (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n            pivot.int = (java.lang.Math.max(root.int, (pivotRight != null ? pivotRight.int : 0))) + 1;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341142832/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"root"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:501","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"ba24ef7d-3f38-11e6-9728-171e7590ed20","method":{"position":"com.google.gson.TreeTypeAdapter:84","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newFactory(com.google.gson.reflect.TypeToken<?> exactType, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341142832/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , exactType , false , null);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"ba2627fe-3f38-11e6-9728-3fefa0a79722","method":{"position":"com.google.gson.JsonObject:53","type":"CtMethodImpl","sourcecode":"public void add(java.lang.String property, com.google.gson.JsonElement value) {\n    if (property == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341142832/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341142832/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (value == null) {\n                        value = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n                    } \n                    com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.put(property, value);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:459","type":"CtBinaryOperatorImpl"},"failures":[335,267,460,461,181,566,567,568,600,302],"tindex":"ba264f0f-3f38-11e6-9728-794d9fddd8de","method":{"position":"com.google.gson.TreeTypeAdapter:103","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newTypeHierarchyFactory(java.lang.Class<?> hierarchyType, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n        {\n            return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , null , false , hierarchyType);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341142832/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[153],"tindex":"ba264f10-3f38-11e6-9728-2b74e40a2efc","method":{"position":"com.google.gson.internal.bind.TypeAdapters:223","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341142832/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341142832/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    out.value(value);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:240","type":"CtInvocationImpl"},"failures":[],"tindex":"ba267621-3f38-11e6-9728-a92b848e4411","method":{"position":"com.google.gson.reflect.TypeToken:160","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.GenericArrayType to) {\n    if (from.getRawType().equals(from.getRawType())) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341142832/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.reflect.Type java.lang.reflect.Type = to.getGenericComponentType();\n            if (toGenericComponentType instanceof java.lang.reflect.ParameterizedType) {\n                java.lang.reflect.Type java.lang.reflect.Type = from;\n                if (from instanceof java.lang.reflect.GenericArrayType) {\n                    t = ((java.lang.reflect.GenericArrayType)(from)).getGenericComponentType();\n                } else if (from instanceof java.lang.Class<?>) {\n                    java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(from));\n                    while (classType.isArray()) {\n                        classType = classType.getComponentType();\n                    }\n                    t = classType;\n                } \n                return com.google.gson.reflect.TypeToken.isAssignableFrom(t, ((java.lang.reflect.ParameterizedType)(toGenericComponentType)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n            } \n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from","to":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"ba267622-3f38-11e6-9728-9931cd370097","method":{"position":"com.google.gson.internal.bind.DateTypeAdapter:69","type":"CtMethodImpl","sourcecode":"private synchronized java.util.Date deserializeToDate(java.lang.String json) {\n    if (json == null) {\n        {\n            if (json == null) {\n                {\n                    try {\n                        return java.text.DateFormat.parse(json);\n                    } catch (java.text.ParseException ignored) {\n                    }\n                    try {\n                        return java.text.DateFormat.parse(json);\n                    } catch (java.text.ParseException ignored) {\n                    }\n                    try {\n                        return java.text.DateFormat.parse(json);\n                    } catch (java.text.ParseException e) {\n                        throw new com.google.gson.JsonSyntaxException(json , e);\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341142832/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341142832/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.TreeTypeAdapter:55","type":"CtInvocationImpl"},"failures":[],"tindex":"ba267623-3f38-11e6-9728-214c54758b37","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:108","type":"CtMethodImpl","sourcecode":"public boolean writeField(java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value.isJsonNull()) {\n        {\n            if (!(boolean))\n                return false;\n            \n            java.lang.Object java.lang.Object = field.get(value);\n            return fieldValue != value;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341142832/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1422","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"ba269d34-3f38-11e6-9728-c362db7b98e2","method":{"position":"com.google.gson.stream.JsonReader:325","type":"CtMethodImpl","sourcecode":"public final void setLenient(boolean lenient) {\n    if (!lenient) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341142832/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.stream.JsonReader.this.boolean = lenient;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"lenient"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"ba269d35-3f38-11e6-9728-9f874b1f6b4d","method":{"position":"com.google.gson.Gson:591","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    if (src != null) {\n        {\n            com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = getAdapter(com.google.gson.reflect.TypeToken.get(typeOfSrc));\n            boolean boolean = writer.isLenient();\n            writer.setLenient(true);\n            boolean boolean = writer.isHtmlSafe();\n            writer.setHtmlSafe(boolean);\n            boolean boolean = writer.getSerializeNulls();\n            writer.setSerializeNulls(boolean);\n            try {\n                ((com.google.gson.TypeAdapter<java.lang.Object>)(adapter)).write(writer, src);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            } finally {\n                writer.setLenient(oldLenient);\n                writer.setHtmlSafe(oldHtmlSafe);\n                writer.setSerializeNulls(oldSerializeNulls);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341142832/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:163","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"ba269d36-3f38-11e6-9728-f5097e5b556c","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:223","type":"CtMethodImpl","sourcecode":"private boolean equal(java.lang.Object a, java.lang.Object b) {\n    if (a instanceof java.lang.Class) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341142832/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (a == b) || ((a != null) && (a.equals(b)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:278","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"ba26c447-3f38-11e6-9728-9ba2fb59ae17","method":{"position":"com.google.gson.internal.LinkedTreeMap:217","type":"CtMethodImpl","sourcecode":"void removeInternal(com.google.gson.internal.LinkedTreeMap.Node<K, V> node, boolean unlink) {\n    if (node != null) {\n        {\n            if (unlink) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341142832/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (unlink) {\n                        node.com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                        node.com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    } \n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    if ((left != null) && (right != null)) {\n                        com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = (left.int) > (right.int) ? left.last() : right.first();\n                        removeInternal(adjacent, false);\n                        int int = 0;\n                        left = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                        if (left != null) {\n                            leftHeight = left.int;\n                            adjacent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = left;\n                            left.com.google.gson.internal.LinkedTreeMap.Node<K, V> = adjacent;\n                            node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                        } \n                        int int = 0;\n                        right = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                        if (right != null) {\n                            rightHeight = right.int;\n                            adjacent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = right;\n                            right.com.google.gson.internal.LinkedTreeMap.Node<K, V> = adjacent;\n                            node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                        } \n                        adjacent.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                        replaceInParent(node, adjacent);\n                        return ;\n                    } else if (left != null) {\n                        replaceInParent(node, left);\n                        node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                    } else if (right != null) {\n                        replaceInParent(node, right);\n                        node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                    } else {\n                        replaceInParent(node, null);\n                    }\n                    rebalance(originalParent, false);\n                    (int)--;\n                    (int)++;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341142832/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"node"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:118","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"ba26eb58-3f38-11e6-9728-dd9429df8e39","method":{"position":"com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory:50","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nstatic com.google.gson.TypeAdapter<?> getTypeAdapter(com.google.gson.internal.ConstructorConstructor constructorConstructor, com.google.gson.Gson gson, com.google.gson.reflect.TypeToken<?> fieldType, com.google.gson.annotations.JsonAdapter annotation) {\n    if (annotation != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341142832/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (annotation != null) {\n                {\n                    if (annotation == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341142832/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            java.lang.Class<?> java.lang.Class<?> = annotation.value();\n                            if (com.google.gson.TypeAdapter.com.google.gson.TypeAdapter.java.lang.Class.isAssignableFrom(value)) {\n                                java.lang.Class<com.google.gson.TypeAdapter<?>> java.lang.Class<com.google.gson.TypeAdapter<?>> = ((java.lang.Class<com.google.gson.TypeAdapter<?>>)(value));\n                                return constructorConstructor.get(com.google.gson.reflect.TypeToken.get(typeAdapter)).construct();\n                            } \n                            if (com.google.gson.TypeAdapterFactory.com.google.gson.TypeAdapterFactory.java.lang.Class.isAssignableFrom(value)) {\n                                java.lang.Class<com.google.gson.TypeAdapterFactory> java.lang.Class<com.google.gson.TypeAdapterFactory> = ((java.lang.Class<com.google.gson.TypeAdapterFactory>)(value));\n                                return constructorConstructor.get(com.google.gson.reflect.TypeToken.get(typeAdapterFactory)).construct().create(gson, fieldType);\n                            } \n                            throw new java.lang.IllegalArgumentException(\"@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.\");\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341142832/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"ba271269-3f38-11e6-9728-5d2a048974e3","method":{"position":"com.google.gson.internal.bind.TypeAdapters:245","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341142832/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                {\n                    out.value(value);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341142832/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:297","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"ba27126a-3f38-11e6-9728-c792350d22b4","method":{"position":"com.google.gson.JsonObject:121","type":"CtMethodImpl","sourcecode":"private com.google.gson.JsonElement createJsonElement(java.lang.Object value) {\n    if (value instanceof java.lang.Number) {\n        {\n            return value == null ? com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull : new com.google.gson.JsonPrimitive(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341142832/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"ba27126b-3f38-11e6-9728-8f9745eaf8b0","method":{"position":"com.google.gson.Gson:576","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        {\n            try {\n                com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                toJson(src, typeOfSrc, jsonWriter);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341142832/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"ba27126c-3f38-11e6-9728-ff7b1c401017","method":{"position":"com.google.gson.Gson:133","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src) {\n    if (src == null) {\n        {\n            if (src != null) {\n                {\n                    return toJsonTree(src);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341142832/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341142832/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.JsonObject:54","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"ba27397d-3f38-11e6-9728-fb9f59b4ce8e","method":{"position":"com.google.gson.internal.bind.TypeAdapters:680","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, com.google.gson.JsonElement value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341142832/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if ((value == null) || (value.isJsonNull())) {\n                out.nullValue();\n            } else if (value.isJsonPrimitive()) {\n                com.google.gson.JsonPrimitive com.google.gson.JsonPrimitive = value.getAsJsonPrimitive();\n                if (primitive.isNumber()) {\n                    out.value(primitive.getAsNumber());\n                } else if (primitive.isBoolean()) {\n                    out.value(primitive.getAsBoolean());\n                } else {\n                    out.value(primitive.getAsString());\n                }\n            } else if (value.isJsonArray()) {\n                out.beginArray();\n                for (com.google.gson.JsonElement com.google.gson.JsonElement : value.getAsJsonArray()) {\n                    write(out, e);\n                }\n                out.endArray();\n            } else if (value.isJsonObject()) {\n                out.beginObject();\n                for (java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> : value.getAsJsonObject().entrySet()) {\n                    out.name(e.getKey());\n                    write(out, e.getValue());\n                }\n                out.endObject();\n            } else {\n                throw new java.lang.IllegalArgumentException((\"Couldn't write \" + (value.getClass())));\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:198","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"ba27397e-3f38-11e6-9728-f5676f5dde56","method":{"position":"com.google.gson.TypeAdapter:140","type":"CtMethodImpl","sourcecode":"public final void toJson(java.io.Writer out, T value) throws java.io.IOException {\n    if (out == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341142832/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = new com.google.gson.stream.JsonWriter(out);\n            write(writer, value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"ba27397f-3f38-11e6-9728-95db7709998c","method":{"position":"com.google.gson.internal.bind.TypeAdapters:297","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341142832/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:118","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"ba276090-3f38-11e6-9728-5f9d060cccc6","method":{"position":"com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory:50","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nstatic com.google.gson.TypeAdapter<?> getTypeAdapter(com.google.gson.internal.ConstructorConstructor constructorConstructor, com.google.gson.Gson gson, com.google.gson.reflect.TypeToken<?> fieldType, com.google.gson.annotations.JsonAdapter annotation) {\n    if (annotation != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341142832/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (annotation != null) {\n                {\n                    if (annotation == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341142832/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            java.lang.Class<?> java.lang.Class<?> = annotation.value();\n                            if (com.google.gson.TypeAdapter.com.google.gson.TypeAdapter.java.lang.Class.isAssignableFrom(value)) {\n                                java.lang.Class<com.google.gson.TypeAdapter<?>> java.lang.Class<com.google.gson.TypeAdapter<?>> = ((java.lang.Class<com.google.gson.TypeAdapter<?>>)(value));\n                                return constructorConstructor.get(com.google.gson.reflect.TypeToken.get(typeAdapter)).construct();\n                            } \n                            if (com.google.gson.TypeAdapterFactory.com.google.gson.TypeAdapterFactory.java.lang.Class.isAssignableFrom(value)) {\n                                java.lang.Class<com.google.gson.TypeAdapterFactory> java.lang.Class<com.google.gson.TypeAdapterFactory> = ((java.lang.Class<com.google.gson.TypeAdapterFactory>)(value));\n                                return constructorConstructor.get(com.google.gson.reflect.TypeToken.get(typeAdapterFactory)).construct().create(gson, fieldType);\n                            } \n                            throw new java.lang.IllegalArgumentException(\"@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.\");\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341142832/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"ba276091-3f38-11e6-9728-a7f919fd1388","method":{"position":"com.google.gson.internal.bind.TypeAdapters:223","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341142832/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341142832/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    out.value(value);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"ba276092-3f38-11e6-9728-3d2a614f842a","method":{"position":"com.google.gson.Gson:695","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.lang.String json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341142832/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:111","type":"CtInvocationImpl"},"failures":[],"tindex":"ba2787a3-3f38-11e6-9728-1171c4d61996","method":{"position":"com.google.gson.JsonPrimitive:93","type":"CtMethodImpl","sourcecode":"void setValue(java.lang.Object primitive) {\n    if (primitive.isString()) {\n        {\n            if (primitive instanceof java.lang.Character) {\n                char char = ((java.lang.Character)(primitive)).charValue();\n                com.google.gson.JsonPrimitive.this.java.lang.Object = java.lang.String.valueOf(c);\n            } else {\n                com.google.gson.internal.$Gson$Preconditions.checkArgument(((primitive instanceof java.lang.Number) || (com.google.gson.JsonPrimitive.isPrimitiveOrString(primitive))));\n                com.google.gson.JsonPrimitive.this.java.lang.Object = primitive;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341142832/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"primitive"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":60,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
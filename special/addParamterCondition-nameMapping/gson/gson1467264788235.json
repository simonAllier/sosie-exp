{"failureDictionary":{"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":60,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":63,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":49,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":97,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":140,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":71,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":112,"com.google.gson.functional.MapTest.testMapSerialization":56,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":98,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":131,"com.google.gson.functional.MapTest.testSerializeMaps":55,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":79,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":102,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":121,"com.google.gson.MixedStreamTest.testWriteLenient":180,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":76,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":89,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":146,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":110,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":134,"com.google.gson.internal.LinkedTreeMapTest.testEmptyStringValues":167,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":69,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":1,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":73,"com.google.gson.internal.LinkedTreeMapTest.testPutOverrides":164,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":122,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":132,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":45,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":149,"com.google.gson.JsonObjectTest.testAddingNullPropertyValue":171,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":113,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":50,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":173,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":4,"com.google.gson.functional.MapTest.testStringKeyDeserialization":155,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":156,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":24,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":68,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":178,"com.google.gson.functional.MapTest.testRawMapSerialization":58,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":103,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":38,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":59,"com.google.gson.JsonParserTest.testParseReader":160,"com.google.gson.functional.PrettyPrintingTest.testMap":48,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":23,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":70,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":115,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":99,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":174,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":9,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":139,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":141,"com.google.gson.ObjectTypeAdapterTest.testSerialize":106,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":66,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":123,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":47,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":118,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":72,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":135,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictBoxedNansAndInfinities":124,"com.google.gson.functional.FieldNamingTest.testIdentity":80,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":87,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":77,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":19,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":143,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":25,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":153,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":91,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":5,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":41,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":136,"com.google.gson.functional.JsonTreeTest.testToJsonTree":2,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":52,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":0,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":128,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":130,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":27,"com.google.gson.JsonObjectTest.testEqualsNonEmptyObject":172,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":22,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":109,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":133,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":44,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":179,"com.google.gson.JsonPrimitiveTest.testEquals":3,"com.google.gson.internal.LinkedTreeMapTest.testLargeSetOfRandomKeys":165,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":11,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":158,"com.google.gson.functional.MapTest.testGeneralMapField":57,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":88,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":54,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":64,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":94,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":104,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":107,"com.google.gson.ObjectTypeAdapterTest.testDeserializeNullValue":162,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":14,"com.google.gson.internal.LinkedTreeMapTest.testContainsNonComparableKeyReturnsFalse":166,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":108,"com.google.gson.JsonObjectTest.testDeepCopy":175,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":100,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":137,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":43,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":147,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":67,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":12,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":84,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":111,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":120,"com.google.gson.JsonParserTest.testParseString":161,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":119,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":177,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":152,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":61,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":65,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":148,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":35,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":28,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":101,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":144,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":126,"com.google.gson.functional.ObjectTest.testNestedSerialization":34,"com.google.gson.internal.LinkedTreeMapTest.testEqualsAndHashCode":168,"com.google.gson.JsonObjectTest.testAddingStringProperties":176,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":26,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":92,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":159,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":8,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":114,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":86,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":125,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":32,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":81,"com.google.gson.JsonObjectTest.testReadPropertyWithEmptyStringName":169,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":30,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":105,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":129,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":82,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":154,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":13,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":16,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":42,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":21,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":95,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":138,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":75,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":157,"com.google.gson.functional.CollectionTest.testSetSerialization":74,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":142,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":10,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":51,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":62,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":29,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":150,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":46,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":31,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":17,"com.google.gson.functional.MapTest.testMapDeserialization":151,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":78,"com.google.gson.ObjectTypeAdapterTest.testDeserialize":163,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":53,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":33,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":170,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":15,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":7,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":39,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":116,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":93,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeMap":145,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":18,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":40,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":6,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":20,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":36,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":83,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":117,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":37,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":96,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":127,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":85,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":90},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:113","type":"CtInvocationImpl","sourcecode":"primitive.isBoolean()"},"failures":[0,1,2,3],"tindex":"2074f62b-3e84-11e6-ad1a-9d2145735a31","method":{"position":"com.google.gson.JsonPrimitive:333","type":"CtMethodImpl","sourcecode":"private static boolean isIntegral(com.google.gson.JsonPrimitive primitive) {\n    if (primitive.isBoolean()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356294/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((primitive.java.lang.Object) instanceof java.lang.Number) {\n                java.lang.Number java.lang.Number = ((java.lang.Number)(primitive.java.lang.Object));\n                return ((((number instanceof java.math.BigInteger) || (number instanceof java.lang.Long)) || (number instanceof java.lang.Integer)) || (number instanceof java.lang.Short)) || (number instanceof java.lang.Byte);\n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"primitive"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"2075444c-3e84-11e6-ad1a-cd705f0a6619","method":{"position":"com.google.gson.DefaultDateTypeAdapter:77","type":"CtMethodImpl","sourcecode":"public java.util.Date deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT, com.google.gson.JsonDeserializationContext context) throws com.google.gson.JsonParseException {\n    if (json == null) {\n        {\n            if (json == null) {\n                {\n                    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n                        throw new com.google.gson.JsonParseException(\"The date should be a string value\");\n                    } \n                    java.util.Date java.util.Date = deserializeToDate(json);\n                    if (typeOfT == (java.util.Date.java.util.Date.java.lang.Class)) {\n                        return date;\n                    } else if (typeOfT == (java.sql.Timestamp.java.sql.Timestamp.java.lang.Class)) {\n                        return new java.sql.Timestamp(date.getTime());\n                    } else if (typeOfT == (java.sql.Date.java.sql.Date.java.lang.Class)) {\n                        return new java.sql.Date(date.getTime());\n                    } else {\n                        throw new java.lang.IllegalArgumentException((((getClass()) + \" cannot deserialize to \") + typeOfT));\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356294/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonParseException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356294/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,1,40,41,2,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106],"tindex":"20756b5d-3e84-11e6-ad1a-dd41a146d5e6","method":{"position":"com.google.gson.internal.bind.TypeAdapters:245","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                {\n                    out.value(value);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356294/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356294/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:452","type":"CtBinaryOperatorImpl","sourcecode":"typeAdapter instanceof com.google.gson.InstanceCreator<?>"},"failures":[107,108,109,110,111,112],"tindex":"20756b5e-3e84-11e6-ad1a-e7c2b08b57a9","method":{"position":"com.google.gson.TreeTypeAdapter:84","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newFactory(com.google.gson.reflect.TypeToken<?> exactType, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof com.google.gson.InstanceCreator<?>) {\n        {\n            return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , exactType , false , null);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356294/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:103","type":"CtVariableReadImpl","sourcecode":"deserialization"},"failures":[113,114,115,116],"tindex":"2075926f-3e84-11e6-ad1a-b9268800660f","method":{"position":"com.google.gson.internal.Excluder:96","type":"CtMethodImpl","sourcecode":"public com.google.gson.internal.Excluder withExclusionStrategy(com.google.gson.ExclusionStrategy exclusionStrategy, boolean serialization, boolean deserialization) {\n    if (deserialization) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356294/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (serialization) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356294/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    com.google.gson.internal.Excluder com.google.gson.internal.Excluder = clone();\n                    if (serialization) {\n                        result.java.util.List<com.google.gson.ExclusionStrategy> = new java.util.ArrayList<com.google.gson.ExclusionStrategy>(java.util.List<com.google.gson.ExclusionStrategy>);\n                        result.java.util.List<com.google.gson.ExclusionStrategy>.add(exclusionStrategy);\n                    } \n                    if (deserialization) {\n                        result.java.util.List<com.google.gson.ExclusionStrategy> = new java.util.ArrayList<com.google.gson.ExclusionStrategy>(java.util.List<com.google.gson.ExclusionStrategy>);\n                        result.java.util.List<com.google.gson.ExclusionStrategy>.add(exclusionStrategy);\n                    } \n                    return result;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deserialization":"serialization"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[117,118,119,120,121,122,77,78,79],"tindex":"20759270-3e84-11e6-ad1a-3312010e8ff3","method":{"position":"com.google.gson.FieldNamingPolicy:122","type":"CtMethodImpl","sourcecode":"private static java.lang.String separateCamelCase(java.lang.String name, java.lang.String separator) {\n    if (name == null) {\n        {\n            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            for (int int = 0 ; i < (name.length()) ; i++) {\n                char char = name.charAt(i);\n                if ((java.lang.Character.isUpperCase(character)) && ((translation.length()) != 0)) {\n                    translation.append(separator);\n                } \n                translation.append(character);\n            }\n            return translation.toString();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356294/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[12,123,1,40,41,2,83,90,91,92,97,124],"tindex":"2075b981-3e84-11e6-ad1a-7186c61d22f0","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:175","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            if (!(isLenient())) {\n                double double = value.doubleValue();\n                if ((java.lang.Double.isNaN(d)) || (java.lang.Double.isInfinite(d))) {\n                    throw new java.lang.IllegalArgumentException((\"JSON forbids NaN and infinities: \" + value));\n                } \n            } \n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356294/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[125,126,127,128,129,130,12,123,1,40,41,2,131,132,83,133,134,135,136,137,138,97,139,140,141],"tindex":"207607a2-3e84-11e6-ad1a-75f432a537b0","method":{"position":"com.google.gson.Gson:491","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        {\n            com.google.gson.internal.bind.JsonTreeWriter com.google.gson.internal.bind.JsonTreeWriter = new com.google.gson.internal.bind.JsonTreeWriter();\n            toJson(src, typeOfSrc, writer);\n            return writer.get();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356294/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:167","type":"CtUnaryOperatorImpl","sourcecode":"!create"},"failures":[125,126,127,128,129,130,142,143,144,145,123,146,27,147,41,148,149,150,151,152,153,154,155,64,65,156,157,158,159,132,83,92,134,135,137,138,97,139,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176],"tindex":"20762eb3-3e84-11e6-ad1a-992d6b12b89a","method":{"position":"com.google.gson.internal.LinkedTreeMap:121","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedTreeMap.Node<K, V> find(K key, boolean create) {\n    if (!create) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356294/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.util.Comparator<? super K> java.util.Comparator<? super K> = com.google.gson.internal.LinkedTreeMap.this.java.util.Comparator<? super K>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            int int = 0;\n            if (nearest != null) {\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                java.lang.Comparable<java.lang.Object> java.lang.Comparable<java.lang.Object> = comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>) ? ((java.lang.Comparable<java.lang.Object>)(key)) : null;\n                while (true) {\n                    comparison = comparableKey != null ? comparableKey.compareTo(nearest.K) : comparator.compare(key, nearest.K);\n                    if (comparison == 0) {\n                        return nearest;\n                    } \n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = comparison < 0 ? nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> : nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    if (child == null) {\n                        break;\n                    } \n                    nearest = child;\n                }\n            } \n            if (!create) {\n                return null;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.this.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            if (nearest == null) {\n                if ((comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>)) && (!(key instanceof java.lang.Comparable))) {\n                    throw new java.lang.ClassCastException(((key.getClass().getName()) + \" is not Comparable\"));\n                } \n                created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n            } else {\n                created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                if (comparison < 0) {\n                    nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                } else {\n                    nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                }\n                rebalance(nearest, true);\n            }\n            (int)++;\n            (int)++;\n            return created;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"create":"create"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:79","type":"CtUnaryOperatorImpl","sourcecode":"!(json instanceof com.google.gson.JsonPrimitive)"},"failures":[],"tindex":"207655c4-3e84-11e6-ad1a-25f3f0cfc05b","method":{"position":"com.google.gson.Gson:127","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonParseException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356294/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    } else {\n        {\n            if (!(json instanceof com.google.gson.JsonPrimitive)) {\n                {\n                    return ((T)(fromJson(json, typeOfT)));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356294/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonParseException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:103","type":"CtVariableReadImpl","sourcecode":"deserialization"},"failures":[],"tindex":"207655c5-3e84-11e6-ad1a-c773b35bb384","method":{"position":"com.google.gson.internal.Excluder:96","type":"CtMethodImpl","sourcecode":"public com.google.gson.internal.Excluder withExclusionStrategy(com.google.gson.ExclusionStrategy exclusionStrategy, boolean serialization, boolean deserialization) {\n    if (deserialization) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356294/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (serialization) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356294/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    com.google.gson.internal.Excluder com.google.gson.internal.Excluder = clone();\n                    if (serialization) {\n                        result.java.util.List<com.google.gson.ExclusionStrategy> = new java.util.ArrayList<com.google.gson.ExclusionStrategy>(java.util.List<com.google.gson.ExclusionStrategy>);\n                        result.java.util.List<com.google.gson.ExclusionStrategy>.add(exclusionStrategy);\n                    } \n                    if (deserialization) {\n                        result.java.util.List<com.google.gson.ExclusionStrategy> = new java.util.ArrayList<com.google.gson.ExclusionStrategy>(java.util.List<com.google.gson.ExclusionStrategy>);\n                        result.java.util.List<com.google.gson.ExclusionStrategy>.add(exclusionStrategy);\n                    } \n                    return result;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deserialization":"deserialization"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[177,178,179,180],"tindex":"2076caf6-3e84-11e6-ad1a-e183654bef62","method":{"position":"com.google.gson.internal.bind.TypeAdapters:297","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356294/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:198","type":"CtBinaryOperatorImpl","sourcecode":"a instanceof java.lang.reflect.TypeVariable"},"failures":[],"tindex":"2076f207-3e84-11e6-ad1a-6b7ea2838803","method":{"position":"com.google.gson.internal.$Gson$Types:151","type":"CtMethodImpl","sourcecode":"static boolean equal(java.lang.Object a, java.lang.Object b) {\n    return (a == b) || ((a != null) && (a.equals(b)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1439","type":"CtBinaryOperatorImpl","sourcecode":"c == '\\r'"},"failures":[],"tindex":"2076f208-3e84-11e6-ad1a-d576f623e1c7","method":{"position":"com.google.gson.stream.JsonReader:755","type":"CtMethodImpl","sourcecode":"private boolean isLiteral(char c) throws java.io.IOException {\n    if (c == '\\r') {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356294/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            switch (c) {\n                case '/' :\n                case '\\\\' :\n                case ';' :\n                case '#' :\n                case '=' :\n                    checkLenient();\n                case '{' :\n                case '}' :\n                case '[' :\n                case ']' :\n                case ':' :\n                case ',' :\n                case ' ' :\n                case '\\t' :\n                case '\\f' :\n                case '\\r' :\n                case '\\n' :\n                    return false;\n                default :\n                    return true;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"c"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:243","type":"CtBinaryOperatorImpl","sourcecode":"annotation != null"},"failures":[],"tindex":"2076f209-3e84-11e6-ad1a-83fe12e66339","method":{"position":"com.google.gson.internal.Excluder:242","type":"CtMethodImpl","sourcecode":"private boolean isValidUntil(com.google.gson.annotations.Until annotation) {\n    if (annotation != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356294/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (annotation != null) {\n                double double = annotation.value();\n                if (annotationVersion <= (double)) {\n                    return false;\n                } \n            } \n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:122","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"2077191a-3e84-11e6-ad1a-addc659bf8af","method":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:74","type":"CtMethodImpl","sourcecode":"private java.lang.reflect.Type getRuntimeTypeIfMoreSpecific(java.lang.reflect.Type type, java.lang.Object value) {\n    if (value instanceof java.lang.reflect.ParameterizedType) {\n        {\n            if ((value != null) && (((type == (java.lang.Object.java.lang.Object.java.lang.Class)) || (type instanceof java.lang.reflect.TypeVariable<?>)) || (type instanceof java.lang.Class<?>))) {\n                type = value.getClass();\n            } \n            return type;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356294/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"2077191b-3e84-11e6-ad1a-ef83113562f9","method":{"position":"com.google.gson.JsonObject:111","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Character value) {\n    if (property == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356294/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            add(property, createJsonElement(value));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"2077191c-3e84-11e6-ad1a-67d967188c7c","method":{"position":"com.google.gson.DefaultDateTypeAdapter:77","type":"CtMethodImpl","sourcecode":"public java.util.Date deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT, com.google.gson.JsonDeserializationContext context) throws com.google.gson.JsonParseException {\n    if (json == null) {\n        {\n            if (json == null) {\n                {\n                    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n                        throw new com.google.gson.JsonParseException(\"The date should be a string value\");\n                    } \n                    java.util.Date java.util.Date = deserializeToDate(json);\n                    if (typeOfT == (java.util.Date.java.util.Date.java.lang.Class)) {\n                        return date;\n                    } else if (typeOfT == (java.sql.Timestamp.java.sql.Timestamp.java.lang.Class)) {\n                        return new java.sql.Timestamp(date.getTime());\n                    } else if (typeOfT == (java.sql.Date.java.sql.Date.java.lang.Class)) {\n                        return new java.sql.Date(date.getTime());\n                    } else {\n                        throw new java.lang.IllegalArgumentException((((getClass()) + \" cannot deserialize to \") + typeOfT));\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356294/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonParseException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356294/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:133","type":"CtBinaryOperatorImpl","sourcecode":"(type) instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"2077402d-3e84-11e6-ad1a-2b3598bc44cf","method":{"position":"com.google.gson.reflect.TypeToken:295","type":"CtMethodImpl","sourcecode":"public static com.google.gson.reflect.TypeToken<?> get(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.WildcardType) {\n        {\n            if (type instanceof java.lang.reflect.ParameterizedType) {\n                {\n                    return new com.google.gson.reflect.TypeToken<java.lang.Object>(type);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356294/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356294/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:164","type":"CtBinaryOperatorImpl","sourcecode":"from instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"2077402e-3e84-11e6-ad1a-cdcfce61f480","method":{"position":"com.google.gson.reflect.TypeToken:122","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic boolean isAssignableFrom(java.lang.reflect.Type from) {\n    if (from instanceof java.lang.reflect.GenericArrayType) {\n        {\n            if (from == null) {\n                return false;\n            } \n            if (java.lang.reflect.Type.equals(from)) {\n                return true;\n            } \n            if ((java.lang.reflect.Type) instanceof java.lang.Class<?>) {\n                return java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from));\n            } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.ParameterizedType) {\n                return com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n            } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.GenericArrayType) {\n                return (java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from))) && (com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.GenericArrayType)(java.lang.reflect.Type))));\n            } else {\n                throw com.google.gson.reflect.TypeToken.buildUnexpectedTypeError(java.lang.reflect.Type, java.lang.Class.java.lang.Class.java.lang.Class, java.lang.reflect.ParameterizedType.java.lang.reflect.ParameterizedType.java.lang.Class, java.lang.reflect.GenericArrayType.java.lang.reflect.GenericArrayType.java.lang.Class);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356294/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"2077402f-3e84-11e6-ad1a-114cdaf85f15","method":{"position":"com.google.gson.Gson:127","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonParseException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356294/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    } else {\n        {\n            if (!(json instanceof com.google.gson.JsonPrimitive)) {\n                {\n                    return ((T)(fromJson(json, typeOfT)));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356294/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonParseException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:107","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.WildcardType"},"failures":[],"tindex":"20774030-3e84-11e6-ad1a-a3f7060e9625","method":{"position":"com.google.gson.reflect.TypeToken:295","type":"CtMethodImpl","sourcecode":"public static com.google.gson.reflect.TypeToken<?> get(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.WildcardType) {\n        {\n            if (type instanceof java.lang.reflect.ParameterizedType) {\n                {\n                    return new com.google.gson.reflect.TypeToken<java.lang.Object>(type);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356294/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356294/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[],"tindex":"20776741-3e84-11e6-ad1a-d5b7d290d129","method":{"position":"com.google.gson.FieldNamingPolicy:137","type":"CtMethodImpl","sourcecode":"private static java.lang.String upperCaseFirstLetter(java.lang.String name) {\n    if (name == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356294/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            int int = 0;\n            char char = name.charAt(index);\n            while (index < ((name.length()) - 1)) {\n                if (java.lang.Character.isLetter(firstCharacter)) {\n                    break;\n                } \n                fieldNameBuilder.append(firstCharacter);\n                firstCharacter = name.charAt((++index));\n            }\n            if (index == (name.length())) {\n                return fieldNameBuilder.toString();\n            } \n            if (!(java.lang.Character.isUpperCase(firstCharacter))) {\n                java.lang.String java.lang.String = com.google.gson.FieldNamingPolicy.modifyString(java.lang.Character.toUpperCase(firstCharacter), name, (++index));\n                return fieldNameBuilder.append(modifiedTarget).toString();\n            } else {\n                return name;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:141","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.WildcardType"},"failures":[],"tindex":"20778e52-3e84-11e6-ad1a-db0bdfe35c61","method":{"position":"com.google.gson.GsonBuilder:447","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\npublic com.google.gson.GsonBuilder registerTypeAdapter(java.lang.reflect.Type type, java.lang.Object typeAdapter) {\n    if (type instanceof java.lang.reflect.WildcardType) {\n        {\n            com.google.gson.internal.$Gson$Preconditions.checkArgument(((((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) || (typeAdapter instanceof com.google.gson.InstanceCreator<?>)) || (typeAdapter instanceof com.google.gson.TypeAdapter<?>)));\n            if (typeAdapter instanceof com.google.gson.InstanceCreator<?>) {\n                java.util.Map<java.lang.reflect.Type, com.google.gson.InstanceCreator<?>>.put(type, ((com.google.gson.InstanceCreator)(typeAdapter)));\n            } \n            if ((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) {\n                com.google.gson.reflect.TypeToken<?> com.google.gson.reflect.TypeToken<?> = com.google.gson.reflect.TypeToken.get(type);\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.TreeTypeAdapter.newFactoryWithMatchRawType(typeToken, typeAdapter));\n            } \n            if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.internal.bind.TypeAdapters.newFactory(com.google.gson.reflect.TypeToken.get(type), ((com.google.gson.TypeAdapter)(typeAdapter))));\n            } \n            return com.google.gson.GsonBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356294/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"20778e53-3e84-11e6-ad1a-db004412d22d","method":{"position":"com.google.gson.internal.bind.TypeAdapters:245","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                {\n                    out.value(value);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356294/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356294/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":25,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":96,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":472,"com.google.gson.functional.StringTest.testStringValueDeserialization":470,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":633,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":7,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":190,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":282,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":151,"com.google.gson.stream.JsonWriterTest.testRepeatedName":630,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":115,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":84,"com.google.gson.MixedStreamTest.testWriteLenient":20,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":388,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":50,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":291,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":40,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":440,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":48,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":457,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":199,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":387,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":488,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":525,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":160,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":339,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":361,"com.google.gson.functional.ObjectTest.testSingletonLists":46,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":283,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":491,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":144,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":473,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":12,"com.google.gson.stream.JsonWriterTest.testStrings":635,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":518,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":530,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":462,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":301,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":63,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":14,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":202,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":495,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":645,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":486,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":234,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":26,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":191,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":557,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":136,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":601,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":437,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":556,"com.google.gson.functional.EnumTest.testEnumCaseMapping":386,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":471,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":590,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":135,"com.google.gson.functional.JsonTreeTest.testToJsonTree":233,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":31,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":304,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":6,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":257,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":369,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":642,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":416,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":146,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":275,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":342,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":450,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":576,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":483,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":59,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":212,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":647,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":152,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":64,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":435,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":314,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":72,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":646,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":523,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":247,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":305,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":217,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":399,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":216,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":300,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":196,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":643,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":175,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":223,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":256,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":75,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":412,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":173,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":281,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":188,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":389,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":549,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":332,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":272,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":130,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":504,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":571,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":197,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":395,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":189,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":71,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":406,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":54,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":124,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":586,"com.google.gson.JsonPrimitiveTest.testEqualsAcrossTypes":621,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":122,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":156,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":567,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":492,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":236,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":359,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":114,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":506,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":527,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":573,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":108,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":289,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":111,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":274,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":313,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":579,"com.google.gson.functional.CollectionTest.testSetDeserialization":456,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":526,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":37,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":58,"com.google.gson.functional.EnumTest.testEnumSet":377,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":180,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":360,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":505,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithNestedWildcards":593,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":262,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":544,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":65,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":358,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":600,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":193,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":113,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":204,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":432,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":534,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":205,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":149,"com.google.gson.functional.MapTest.testHashMapDeserialization":538,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":446,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":287,"com.google.gson.MixedStreamTest.testReadNulls":21,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":98,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":125,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":94,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":323,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":126,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":533,"com.google.gson.functional.MapTest.testSortedMap":560,"com.google.gson.functional.MapTest.testMapSerialization":555,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":97,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":104,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":186,"com.google.gson.JsonPrimitiveTest.testByteEqualsShort":620,"com.google.gson.JsonPrimitiveTest.testByteEqualsBigInteger":611,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":419,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":468,"com.google.gson.functional.MapTest.testSerializeMaps":541,"com.google.gson.functional.MapTest.testComplexKeysSerialization":568,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":36,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":572,"com.google.gson.JsonPrimitiveTest.testLongEqualsBigInteger":613,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":426,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":384,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":578,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":351,"com.google.gson.internal.LinkedTreeMapTest.testRemoveRootDoesNotDoubleUnlink":623,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":335,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":382,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":29,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":624,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":117,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":74,"com.google.gson.functional.MapTest.testStringKeyDeserialization":570,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithBasicWildcards":595,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":423,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":510,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":219,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":155,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":574,"com.google.gson.functional.PrettyPrintingTest.testMap":27,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":150,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":372,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":443,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":100,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":252,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":531,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":13,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":425,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":644,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":476,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":480,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":269,"com.google.gson.functional.CollectionTest.testQueueSerialization":447,"com.google.gson.functional.MapTest.testMapSerializationEmpty":569,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":181,"com.google.gson.functional.MapTest.testMapOfMapSerialization":554,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":172,"com.google.gson.JavaSerializationTest.testMapIsSerializable":597,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":277,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":453,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":183,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":585,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":519,"com.google.gson.functional.FieldNamingTest.testIdentity":469,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":474,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":507,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":86,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":76,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":0,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":42,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":45,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":121,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":138,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":602,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":310,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":475,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":178,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":429,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":293,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":9,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":264,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":271,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":303,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":584,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":535,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":215,"com.google.gson.functional.MapTest.testMapSubclassSerialization":540,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":92,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":368,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":39,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":18,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":170,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":374,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":493,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":230,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":251,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":390,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":529,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":357,"com.google.gson.functional.EnumTest.testEnumSubclass":380,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":192,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":15,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":61,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":137,"com.google.gson.GsonBuilderTest.testRegisterTypeAdapterForCoreType":10,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":309,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":198,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":509,"com.google.gson.JsonPrimitiveTest.testShortEqualsInteger":617,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":330,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":140,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":431,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":176,"com.google.gson.JsonPrimitiveTest.testByteEqualsLong":607,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":430,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":2,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":8,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":415,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":57,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":182,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":120,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":174,"com.google.gson.stream.JsonWriterTest.testObjectsInArrays":631,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":296,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":47,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":537,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":414,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":393,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":408,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":354,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":577,"com.google.gson.CommentsTest.testParseComments":604,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":49,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":345,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":514,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":195,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":320,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":421,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":103,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":478,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":559,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":651,"com.google.gson.MixedStreamTest.testReadInvalidState":17,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":522,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":366,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":214,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":298,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":105,"com.google.gson.ObjectTypeAdapterTest.testSerializeObject":622,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":148,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":427,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithTypeParameters":594,"com.google.gson.JsonPrimitiveTest.testDoubleEqualsBigDecimal":609,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":317,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":165,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":583,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":209,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":279,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":411,"com.google.gson.functional.MapTest.testMapDeserialization":547,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":273,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":32,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":536,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":338,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":648,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":241,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":546,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":344,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":340,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":336,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":232,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":381,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":249,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":62,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":77,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":325,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":375,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":3,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":258,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":365,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":334,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":428,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":28,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":558,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":588,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":302,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":134,"com.google.gson.functional.PrimitiveTest.testShortSerialization":213,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":516,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":347,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":201,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":439,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":171,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":200,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":147,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":263,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":465,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":379,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":442,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":91,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":542,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":164,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":221,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":463,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":391,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":290,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":352,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":25,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":625,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":228,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":222,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":640,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":119,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":78,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":240,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":508,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":244,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":494,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":627,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":207,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":308,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":177,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":511,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":82,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":53,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":385,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":38,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":327,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":259,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":451,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":370,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":512,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":337,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":280,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":346,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":154,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":129,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":266,"com.google.gson.stream.JsonWriterTest.testNullStringValue":628,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":348,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":285,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":4,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":444,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":141,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":208,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":179,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":225,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":132,"com.google.gson.JsonPrimitiveTest.testEquals":619,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":343,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":378,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":102,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":106,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":51,"com.google.gson.functional.MapTest.testGeneralMapField":564,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":405,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":227,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":311,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":371,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":420,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":292,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":562,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":145,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":245,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":398,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":203,"com.google.gson.MixedStreamTest.testReadMixedStreamed":24,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":166,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":260,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":550,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":128,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":458,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":603,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":490,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":184,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":438,"com.google.gson.JavaSerializationTest.testNumberIsSerializable":596,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":112,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":278,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":551,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":316,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":539,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":226,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":515,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":35,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":498,"com.google.gson.stream.JsonWriterTest.testArraysInObjects":629,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":167,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":626,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":276,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":394,"com.google.gson.JsonPrimitiveTest.testEqualsDoesNotEquateStringAndNonStringTypes":618,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":87,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":243,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":452,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":350,"com.google.gson.JsonPrimitiveTest.testFloatEqualsDouble":612,"com.google.gson.functional.ObjectTest.testNestedDeserialization":83,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":521,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":69,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":235,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":99,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":1,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":436,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":224,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":319,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":116,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":477,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":552,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":356,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":211,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":326,"com.google.gson.JavaSerializationTest.testListIsSerializable":598,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":44,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":392,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":461,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":329,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":315,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":543,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":139,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":563,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":417,"com.google.gson.functional.MapTest.testInterfaceTypeMap":561,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":373,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":238,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":142,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":383,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":639,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":333,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":376,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":246,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":434,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":158,"com.google.gson.JsonPrimitiveTest.testIntegerEqualsLong":615,"com.google.gson.MixedStreamTest.testWriteClosed":23,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":101,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":449,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":52,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":239,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":306,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":362,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":237,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":322,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":80,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":318,"com.google.gson.JsonPrimitiveTest.testShortEqualsLong":610,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":299,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":55,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":242,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":448,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":499,"com.google.gson.JsonPrimitiveTest.testShortEqualsBigInteger":606,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":187,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":501,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":331,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":454,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":286,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":88,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":229,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":581,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":163,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":231,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":254,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":402,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":580,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":321,"com.google.gson.functional.CollectionTest.testQueueDeserialization":464,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":169,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":185,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":482,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":95,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":297,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":500,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":73,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":548,"com.google.gson.stream.JsonWriterTest.testDeepNestingObjects":634,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":268,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":81,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":400,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":441,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":16,"com.google.gson.functional.MapTest.testRawMapSerialization":566,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":459,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":284,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":641,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":67,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":324,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":109,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":349,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":587,"com.google.gson.functional.PrimitiveTest.testByteSerialization":210,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":407,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":528,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":589,"com.google.gson.ObjectTypeAdapterTest.testSerialize":11,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":637,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":396,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":153,"com.google.gson.JsonPrimitiveTest.testEqualsIntegerAndBigInteger":608,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":41,"com.google.gson.JsonPrimitiveTest.testFloatEqualsBigDecimal":605,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":418,"com.google.gson.JsonPrimitiveTest.testByteEqualsInteger":614,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":466,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":363,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":479,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":599,"com.google.gson.functional.MapTest.testMapWithQuotes":553,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":161,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":253,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":481,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":503,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":127,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":520,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":401,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":218,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":250,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":524,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":341,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":353,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":79,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":33,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":194,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":265,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":56,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":424,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":294,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":255,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":43,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":267,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":497,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":206,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":652,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":455,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":410,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":295,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":355,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":403,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":328,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":89,"com.google.gson.JsonPrimitiveTest.testIntegerEqualsBigInteger":616,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":502,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":93,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":532,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":143,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":367,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":517,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":653,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":66,"com.google.gson.functional.ObjectTest.testNestedSerialization":68,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":133,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":157,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":397,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":485,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":34,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":565,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":107,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":307,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":22,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":592,"com.google.gson.stream.JsonWriterTest.testUnicodeLineBreaksEscaped":636,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":60,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":85,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":220,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":5,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":489,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":270,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":159,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":591,"com.google.gson.GsonBuilderTest.testCreatingMoreThanOnce":649,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":70,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":248,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":496,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":654,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":484,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":413,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":312,"com.google.gson.functional.CollectionTest.testSetSerialization":460,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":30,"com.google.gson.functional.StringTest.testStringValueSerialization":487,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":513,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":131,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":118,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":445,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":582,"com.google.gson.MixedStreamTest.testWriteInvalidState":19,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":404,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":650,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":162,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":168,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":422,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":123,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":261,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":467,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":575,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":90,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":433,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":364,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":288,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":638,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":545,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":632,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":110,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":409},"transformations":[{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"54bd9f25-3f52-11e6-a9b7-71da0f931b43","method":{"position":"com.google.gson.Gson:695","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.lang.String json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352412378/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl"},"failures":[0,1,2,3,4,5,6,7],"tindex":"54be8986-3f52-11e6-a9b7-b76b4e3b4a56","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:144","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352412378/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:105","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"54beb097-3f52-11e6-a9b7-03ddb8b3918a","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:512","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"rawtypes\")\n@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352412378/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof java.util.Map.Entry) {\n                java.util.Map.Entry java.util.Map.Entry = ((java.util.Map.Entry)(o));\n                return ((K) == null ? (other.getKey()) == null : K.equals(other.getKey())) && ((V) == null ? (other.getValue()) == null : V.equals(other.getValue()));\n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:141","type":"CtBinaryOperatorImpl"},"failures":[8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,0,233,234,235,1,2,3,236,237,238,4,5,239,240,241,242,6,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,7,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604],"tindex":"54bed7a8-3f52-11e6-a9b7-2da64761ac7c","method":{"position":"com.google.gson.reflect.TypeToken:295","type":"CtMethodImpl","sourcecode":"public static com.google.gson.reflect.TypeToken<?> get(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.GenericArrayType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352412378/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (type instanceof java.lang.reflect.WildcardType) {\n                {\n                    return new com.google.gson.reflect.TypeToken<java.lang.Object>(type);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352412378/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:113","type":"CtInvocationImpl"},"failures":[231,233,247,256,304,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621],"tindex":"54bf25c9-3f52-11e6-a9b7-3fce7d9179c2","method":{"position":"com.google.gson.JsonPrimitive:333","type":"CtMethodImpl","sourcecode":"private static boolean isIntegral(com.google.gson.JsonPrimitive primitive) {\n    if (primitive.isBoolean()) {\n        {\n            if ((primitive.java.lang.Object) instanceof java.lang.Number) {\n                java.lang.Number java.lang.Number = ((java.lang.Number)(primitive.java.lang.Object));\n                return ((((number instanceof java.math.BigInteger) || (number instanceof java.lang.Long)) || (number instanceof java.lang.Integer)) || (number instanceof java.lang.Short)) || (number instanceof java.lang.Byte);\n            } \n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352412378/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"primitive"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:115","type":"CtInvocationImpl"},"failures":[],"tindex":"54bf4cda-3f52-11e6-a9b7-ef67300aed61","method":{"position":"com.google.gson.JsonPrimitive:93","type":"CtMethodImpl","sourcecode":"void setValue(java.lang.Object primitive) {\n    if (primitive.isNumber()) {\n        {\n            if (primitive instanceof java.lang.Character) {\n                char char = ((java.lang.Character)(primitive)).charValue();\n                com.google.gson.JsonPrimitive.this.java.lang.Object = java.lang.String.valueOf(c);\n            } else {\n                com.google.gson.internal.$Gson$Preconditions.checkArgument(((primitive instanceof java.lang.Number) || (com.google.gson.JsonPrimitive.isPrimitiveOrString(primitive))));\n                com.google.gson.JsonPrimitive.this.java.lang.Object = primitive;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352412378/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"primitive"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:120","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"54bf73eb-3f52-11e6-a9b7-0ba1a61b7e65","method":{"position":"com.google.gson.internal.LinkedTreeMap:574","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonObject) {\n        {\n            if (o instanceof com.google.gson.JsonNull) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352412378/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (!(o instanceof java.util.Map.Entry)) {\n                        return false;\n                    } \n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n                    if (node == null) {\n                        return false;\n                    } \n                    removeInternal(node, true);\n                    return true;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352412378/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:107","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"54bf9afc-3f52-11e6-a9b7-07aa7fafd132","method":{"position":"com.google.gson.internal.Primitives:79","type":"CtMethodImpl","sourcecode":"public static boolean isWrapperType(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class) {\n        {\n            if (type instanceof java.lang.reflect.WildcardType) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352412378/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return com.google.gson.internal.Primitives.com.google.gson.internal.Primitives.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.containsKey(com.google.gson.internal.$Gson$Preconditions.checkNotNull(type));\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352412378/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:109","type":"CtBinaryOperatorImpl"},"failures":[622,11,13,14,15,16,18,24,25,26,27,28,29,30,31,32,33,34,35,40,41,42,43,44,45,46,47,48,49,50,51,55,60,61,63,65,67,68,72,75,76,79,83,86,88,89,90,91,92,93,96,103,104,105,106,107,108,109,111,112,113,121,126,128,129,130,131,139,144,146,148,156,157,165,166,168,169,172,175,183,194,196,197,200,208,211,214,215,219,220,221,225,226,232,234,235,1,2,3,236,238,4,5,240,241,242,6,245,253,255,257,260,263,279,281,286,287,289,290,291,292,295,297,298,302,304,307,308,309,310,311,312,313,314,315,316,317,319,320,321,322,324,333,334,337,339,340,341,342,343,344,347,351,353,355,356,357,358,360,362,363,364,367,368,370,371,372,373,375,379,380,383,384,385,386,388,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,448,449,451,453,454,455,457,460,463,465,466,467,468,469,472,474,478,479,494,495,496,498,501,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,530,533,536,537,539,540,541,546,548,549,551,554,556,557,561,563,564,568,570,571,7,575,576,577,578,580,581,582,583,584,585,586,587,588,590,591,599,600,601,602,603],"tindex":"54bfc20d-3f52-11e6-a9b7-9fabef40f8e1","method":{"position":"com.google.gson.reflect.TypeToken:283","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic final boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonArray) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352412378/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof com.google.gson.JsonPrimitive) {\n                {\n                    return (o instanceof com.google.gson.reflect.TypeToken<?>) && (com.google.gson.internal.$Gson$Types.equals(java.lang.reflect.Type, ((com.google.gson.reflect.TypeToken<?>)(o)).java.lang.reflect.Type));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352412378/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:109","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"54bfe91e-3f52-11e6-a9b7-4dfc04be23a9","method":{"position":"com.google.gson.JsonObject:186","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonPrimitive) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352412378/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (o == (com.google.gson.JsonObject.this)) || ((o instanceof com.google.gson.JsonObject) && (((com.google.gson.JsonObject)(o)).com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.equals(com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:103","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"54c0102f-3f52-11e6-a9b7-f9f52cfeb251","method":{"position":"com.google.gson.reflect.TypeToken:295","type":"CtMethodImpl","sourcecode":"public static com.google.gson.reflect.TypeToken<?> get(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.GenericArrayType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352412378/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (type instanceof java.lang.reflect.WildcardType) {\n                {\n                    return new com.google.gson.reflect.TypeToken<java.lang.Object>(type);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352412378/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.JsonPrimitive:313","type":"CtBinaryOperatorImpl"},"failures":[622,11,12,60,131,420,451,457,460,522,524,525,526],"tindex":"54c01030-3f52-11e6-a9b7-5f85e72c3095","method":{"position":"com.google.gson.internal.bind.ObjectTypeAdapter:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Object value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            com.google.gson.TypeAdapter<java.lang.Object> com.google.gson.TypeAdapter<java.lang.Object> = ((com.google.gson.TypeAdapter<java.lang.Object>)(com.google.gson.Gson.getAdapter(value.getClass())));\n            if (typeAdapter instanceof com.google.gson.internal.bind.ObjectTypeAdapter) {\n                out.beginObject();\n                out.endObject();\n                return ;\n            } \n            typeAdapter.write(out, value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352412378/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.FieldNamingPolicy:143","type":"CtInvocationImpl"},"failures":[],"tindex":"54c03741-3f52-11e6-a9b7-f1b09df8f75b","method":{"position":"com.google.gson.FieldNamingPolicy:163","type":"CtMethodImpl","sourcecode":"private static java.lang.String modifyString(char firstCharacter, java.lang.String srcString, int indexOfSubstring) {\n    if (!(java.lang.Character.isUpperCase(firstCharacter))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352412378/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (java.lang.Character.isLetter(firstCharacter)) {\n                {\n                    return indexOfSubstring < (srcString.length()) ? firstCharacter + (srcString.substring(indexOfSubstring)) : java.lang.String.valueOf(firstCharacter);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352412378/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"firstCharacter":"firstCharacter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.FieldNamingPolicy:155","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"54c05e52-3f52-11e6-a9b7-075afcfc9506","method":{"position":"com.google.gson.FieldNamingPolicy:163","type":"CtMethodImpl","sourcecode":"private static java.lang.String modifyString(char firstCharacter, java.lang.String srcString, int indexOfSubstring) {\n    if (!(java.lang.Character.isUpperCase(firstCharacter))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352412378/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (java.lang.Character.isLetter(firstCharacter)) {\n                {\n                    return indexOfSubstring < (srcString.length()) ? firstCharacter + (srcString.substring(indexOfSubstring)) : java.lang.String.valueOf(firstCharacter);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352412378/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"firstCharacter":"firstCharacter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:578","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"54c05e53-3f52-11e6-a9b7-fb9af7bfaf6e","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:626","type":"CtMethodImpl","sourcecode":"void reset(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root == null) {\n        {\n            if (root == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352412378/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                    for (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root ; n != null ; n = n.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) {\n                        n.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = stackTop;\n                        stackTop = n;\n                    }\n                    com.google.gson.internal.LinkedHashTreeMap.AvlIterator.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = stackTop;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352412378/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:105","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"54c08564-3f52-11e6-a9b7-0197ef888830","method":{"position":"com.google.gson.internal.LinkedTreeMap:574","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonObject) {\n        {\n            if (o instanceof com.google.gson.JsonNull) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352412378/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (!(o instanceof java.util.Map.Entry)) {\n                        return false;\n                    } \n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n                    if (node == null) {\n                        return false;\n                    } \n                    removeInternal(node, true);\n                    return true;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352412378/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl"},"failures":[234],"tindex":"54c0ac75-3f52-11e6-a9b7-a12fd3000ebd","method":{"position":"com.google.gson.Gson:136","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        {\n            if (src == null) {\n                {\n                    return toJsonTree(src, typeOfSrc);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352412378/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352412378/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:278","type":"CtBinaryOperatorImpl"},"failures":[623,391,624],"tindex":"54c0d386-3f52-11e6-a9b7-2ff1555392bd","method":{"position":"com.google.gson.internal.LinkedTreeMap:217","type":"CtMethodImpl","sourcecode":"void removeInternal(com.google.gson.internal.LinkedTreeMap.Node<K, V> node, boolean unlink) {\n    if (node != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352412378/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (unlink) {\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            if ((left != null) && (right != null)) {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = (left.int) > (right.int) ? left.last() : right.first();\n                removeInternal(adjacent, false);\n                int int = 0;\n                left = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                if (left != null) {\n                    leftHeight = left.int;\n                    adjacent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = left;\n                    left.com.google.gson.internal.LinkedTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                } \n                int int = 0;\n                right = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                if (right != null) {\n                    rightHeight = right.int;\n                    adjacent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = right;\n                    right.com.google.gson.internal.LinkedTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                } \n                adjacent.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                replaceInParent(node, adjacent);\n                return ;\n            } else if (left != null) {\n                replaceInParent(node, left);\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n            } else if (right != null) {\n                replaceInParent(node, right);\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n            } else {\n                replaceInParent(node, null);\n            }\n            rebalance(originalParent, false);\n            (int)--;\n            (int)++;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"node"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl"},"failures":[40,41,42,43,44,96,233,2,4,5,6,310,321,322,355],"tindex":"54c121a7-3f52-11e6-a9b7-e3d6d3121739","method":{"position":"com.google.gson.Gson:468","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src) {\n    if (src == null) {\n        {\n            if (src == null) {\n                return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            return toJsonTree(src, src.getClass());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352412378/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:163","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"54c121a8-3f52-11e6-a9b7-b1f85c89f2a1","method":{"position":"com.google.gson.internal.LinkedTreeMap:207","type":"CtMethodImpl","sourcecode":"private boolean equal(java.lang.Object a, java.lang.Object b) {\n    if (a instanceof java.lang.Class) {\n        {\n            return (a == b) || ((a != null) && (a.equals(b)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352412378/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonArray:58","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"54c148b9-3f52-11e6-a9b7-4de079c8e507","method":{"position":"com.google.gson.JsonArray:57","type":"CtMethodImpl","sourcecode":"public void add(com.google.gson.JsonElement element) {\n    if (element == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352412378/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (element == null) {\n                element = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            java.util.List<com.google.gson.JsonElement>.add(element);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl"},"failures":[8,9,11,12,625,626,627,13,16,18,22,628,629,630,631,632,633,634,635,636,27,28,29,33,34,35,38,45,46,49,52,55,58,60,65,67,68,71,75,77,78,80,86,87,89,91,92,93,94,97,100,105,107,115,117,121,122,123,124,126,129,130,131,637,638,132,133,145,148,163,205,232,234,235,236,237,238,241,242,244,245,246,252,253,255,257,258,261,265,267,268,269,271,273,274,276,278,279,280,283,286,289,291,292,295,296,297,298,299,302,305,307,309,313,314,316,317,318,319,320,323,324,325,327,328,329,332,334,337,340,343,344,346,347,348,351,353,355,356,357,358,359,360,362,363,364,366,369,370,371,372,373,374,375,377,378,379,380,383,385,386,387,396,397,398,399,400,639,640,641,642,643,644,645,401,402,403,407,408,412,413,418,420,424,428,431,432,433,434,435,436,437,438,439,440,441,442,447,449,450,451,454,457,458,460,463,465,466,467,468,469,471,472,473,474,475,478,480,484,487,488,491,494,497,498,501,503,505,509,510,511,513,514,515,517,521,522,524,525,526,528,530,534,540,541,544,546,548,553,554,555,559,561,563,564,565,566,568,571,574,7,575,576,577,578,580,581,582,583,584,585,646,647,586,590,592,648,600,603],"tindex":"54c16fca-3f52-11e6-a9b7-ab4755d8e744","method":{"position":"com.google.gson.stream.JsonWriter:532","type":"CtMethodImpl","sourcecode":"private void string(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        {\n            java.lang.String[] java.lang.String[] = boolean ? com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[] : com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[];\n            java.io.Writer.write(\"\\\"\");\n            int int = 0;\n            int int = value.length();\n            for (int int = 0 ; i < length ; i++) {\n                char char = value.charAt(i);\n                java.lang.String java.lang.String;\n                if (c < 128) {\n                    replacement = replacements[c];\n                    if (replacement == null) {\n                        continue;\n                    } \n                } else if (c == '\\u2028') {\n                    replacement = \"\\\\u2028\";\n                } else if (c == '\\u2029') {\n                    replacement = \"\\\\u2029\";\n                } else {\n                    continue;\n                }\n                if (last < i) {\n                    java.io.Writer.write(value, last, (i - last));\n                } \n                java.io.Writer.write(replacement);\n                last = i + 1;\n            }\n            if (last < length) {\n                java.io.Writer.write(value, last, (length - last));\n            } \n            java.io.Writer.write(\"\\\"\");\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352412378/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:554","type":"CtBinaryOperatorImpl"},"failures":[8,9,649,13,14,15,20,22,26,27,28,29,30,31,32,33,34,35,40,41,42,43,44,650,64,84,88,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,637,136,163,183,196,197,205,211,219,225,234,235,651,265,276,279,280,286,290,297,298,300,301,307,308,310,323,325,326,327,328,329,330,331,333,334,335,336,337,338,340,341,342,343,344,346,347,348,349,350,351,352,355,361,365,367,371,372,373,379,396,413,432,433,434,435,436,437,438,439,463,465,466,467,468,469,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,531,652,536,537,541,548,561,564,565,7,575,577,590,591,599,600,601,602,603],"tindex":"54c1bdeb-3f52-11e6-a9b7-35c31e211d55","method":{"position":"com.google.gson.GsonBuilder:551","type":"CtMethodImpl","sourcecode":"private void addTypeAdaptersForDate(java.lang.String datePattern, int dateStyle, int timeStyle, java.util.List<com.google.gson.TypeAdapterFactory> factories) {\n    if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n        {\n            com.google.gson.DefaultDateTypeAdapter com.google.gson.DefaultDateTypeAdapter;\n            if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n                dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(datePattern);\n            } else if ((dateStyle != (java.text.DateFormat.java.text.DateFormat.int)) && (timeStyle != (java.text.DateFormat.java.text.DateFormat.int))) {\n                dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(dateStyle , timeStyle);\n            } else {\n                return ;\n            }\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.util.Date.java.util.Date.java.lang.Class), dateTypeAdapter));\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Timestamp.java.sql.Timestamp.java.lang.Class), dateTypeAdapter));\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Date.java.sql.Date.java.lang.Class), dateTypeAdapter));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352412378/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"datePattern":"datePattern"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"54c1e4fc-3f52-11e6-a9b7-ad013d2f4252","method":{"position":"com.google.gson.Gson:719","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.lang.String json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352412378/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (json == null) {\n                return null;\n            } \n            java.io.StringReader java.io.StringReader = new java.io.StringReader(json);\n            T T = ((T)(fromJson(reader, typeOfT)));\n            return target;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:578","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"54c20c0d-3f52-11e6-a9b7-6d13ecac17af","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:626","type":"CtMethodImpl","sourcecode":"void reset(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root == null) {\n        {\n            if (root == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352412378/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                    for (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root ; n != null ; n = n.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) {\n                        n.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = stackTop;\n                        stackTop = n;\n                    }\n                    com.google.gson.internal.LinkedHashTreeMap.AvlIterator.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = stackTop;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352412378/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:105","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"54c2331e-3f52-11e6-a9b7-93f26fd546e5","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:808","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonObject) {\n        {\n            if (!(o instanceof java.util.Map.Entry)) {\n                return false;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n            if (node == null) {\n                return false;\n            } \n            removeInternal(node, true);\n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352412378/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:298","type":"CtBinaryOperatorImpl"},"failures":[115,117,121,194,226,232,237,360,653,639,640,641,654,642,643,644,418],"tindex":"54c2331f-3f52-11e6-a9b7-bb8334e9be0d","method":{"position":"com.google.gson.Gson:297","type":"CtMethodImpl","sourcecode":"private void checkValidFloatingPoint(double value) {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352412378/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                {\n                    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                        throw new java.lang.IllegalArgumentException(((value + \" is not a valid double value as per JSON specification. To override this\") + \" behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.\"));\n                    } \n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352412378/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"54c25a30-3f52-11e6-a9b7-e5fc399af2cb","method":{"position":"com.google.gson.Gson:847","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(com.google.gson.JsonElement json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352412378/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"54c28141-3f52-11e6-a9b7-691c5d922425","method":{"position":"com.google.gson.DefaultDateTypeAdapter:77","type":"CtMethodImpl","sourcecode":"public java.util.Date deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT, com.google.gson.JsonDeserializationContext context) throws com.google.gson.JsonParseException {\n    if (json == null) {\n        {\n            if (!(json instanceof com.google.gson.JsonPrimitive)) {\n                throw new com.google.gson.JsonParseException(\"The date should be a string value\");\n            } \n            java.util.Date java.util.Date = deserializeToDate(json);\n            if (typeOfT == (java.util.Date.java.util.Date.java.lang.Class)) {\n                return date;\n            } else if (typeOfT == (java.sql.Timestamp.java.sql.Timestamp.java.lang.Class)) {\n                return new java.sql.Timestamp(date.getTime());\n            } else if (typeOfT == (java.sql.Date.java.sql.Date.java.lang.Class)) {\n                return new java.sql.Date(date.getTime());\n            } else {\n                throw new java.lang.IllegalArgumentException((((getClass()) + \" cannot deserialize to \") + typeOfT));\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352412378/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[263],"tindex":"54c2a852-3f52-11e6-a9b7-51d1883a09b6","method":{"position":"com.google.gson.Gson:285","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352412378/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            float float = value.floatValue();\n            checkValidFloatingPoint(floatValue);\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"54c2a853-3f52-11e6-a9b7-616753f7606a","method":{"position":"com.google.gson.internal.bind.DateTypeAdapter:69","type":"CtMethodImpl","sourcecode":"private synchronized java.util.Date deserializeToDate(java.lang.String json) {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352412378/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (json == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352412378/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    try {\n                        return java.text.DateFormat.parse(json);\n                    } catch (java.text.ParseException ignored) {\n                    }\n                    try {\n                        return java.text.DateFormat.parse(json);\n                    } catch (java.text.ParseException ignored) {\n                    }\n                    try {\n                        return java.text.DateFormat.parse(json);\n                    } catch (java.text.ParseException e) {\n                        throw new com.google.gson.JsonSyntaxException(json , e);\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:213","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"54c2cf64-3f52-11e6-a9b7-93c7cab0a7da","method":{"position":"com.google.gson.stream.JsonWriter:212","type":"CtMethodImpl","sourcecode":"public final void setIndent(java.lang.String indent) {\n    if ((indent.length()) == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352412378/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((indent.length()) == 0) {\n                com.google.gson.stream.JsonWriter.this.java.lang.String = null;\n                com.google.gson.stream.JsonWriter.this.java.lang.String = \":\";\n            } else {\n                com.google.gson.stream.JsonWriter.this.java.lang.String = indent;\n                com.google.gson.stream.JsonWriter.this.java.lang.String = \": \";\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"indent"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl"},"failures":[310,355],"tindex":"54c2cf65-3f52-11e6-a9b7-972332c6330e","method":{"position":"com.google.gson.Gson:133","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352412378/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src == null) {\n                {\n                    return toJsonTree(src);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352412378/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:107","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"54c2f676-3f52-11e6-a9b7-97c9b11b680d","method":{"position":"com.google.gson.internal.LinkedTreeMap:605","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonArray) {\n        {\n            return containsKey(o);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352412378/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1439","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"54c2f677-3f52-11e6-a9b7-35a11c6d2ecf","method":{"position":"com.google.gson.stream.JsonReader:755","type":"CtMethodImpl","sourcecode":"private boolean isLiteral(char c) throws java.io.IOException {\n    if (c == '\\r') {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352412378/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            switch (c) {\n                case '/' :\n                case '\\\\' :\n                case ';' :\n                case '#' :\n                case '=' :\n                    checkLenient();\n                case '{' :\n                case '}' :\n                case '[' :\n                case ']' :\n                case ':' :\n                case ',' :\n                case ' ' :\n                case '\\t' :\n                case '\\f' :\n                case '\\r' :\n                case '\\n' :\n                    return false;\n                default :\n                    return true;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"c"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"54c31d88-3f52-11e6-a9b7-73437043ec72","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:132","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter name(java.lang.String name) throws java.io.IOException {\n    if (name == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352412378/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if ((java.util.List<com.google.gson.JsonElement>.isEmpty()) || ((java.lang.String) != null)) {\n                throw new java.lang.IllegalStateException();\n            } \n            com.google.gson.JsonElement com.google.gson.JsonElement = peek();\n            if (element instanceof com.google.gson.JsonObject) {\n                java.lang.String = name;\n                return com.google.gson.internal.bind.JsonTreeWriter.this;\n            } \n            throw new java.lang.IllegalStateException();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.DateTypeAdapter:86","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"54c34499-3f52-11e6-a9b7-f96b12759d6c","method":{"position":"com.google.gson.JsonObject:121","type":"CtMethodImpl","sourcecode":"private com.google.gson.JsonElement createJsonElement(java.lang.Object value) {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352412378/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return value == null ? com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull : new com.google.gson.JsonPrimitive(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"54c3449a-3f52-11e6-a9b7-593b98ee06bb","method":{"position":"com.google.gson.internal.bind.TypeAdapters:361","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352412378/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"54c36bab-3f52-11e6-a9b7-d7ce6de79cc1","method":{"position":"com.google.gson.internal.bind.DateTypeAdapter:69","type":"CtMethodImpl","sourcecode":"private synchronized java.util.Date deserializeToDate(java.lang.String json) {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352412378/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (json == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352412378/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    try {\n                        return java.text.DateFormat.parse(json);\n                    } catch (java.text.ParseException ignored) {\n                    }\n                    try {\n                        return java.text.DateFormat.parse(json);\n                    } catch (java.text.ParseException ignored) {\n                    }\n                    try {\n                        return java.text.DateFormat.parse(json);\n                    } catch (java.text.ParseException e) {\n                        throw new com.google.gson.JsonSyntaxException(json , e);\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"54c36bac-3f52-11e6-a9b7-4bd8822e17c3","method":{"position":"com.google.gson.Gson:136","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        {\n            if (src == null) {\n                {\n                    return toJsonTree(src, typeOfSrc);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352412378/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352412378/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:109","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"54c392bd-3f52-11e6-a9b7-4997f8f9104d","method":{"position":"com.google.gson.internal.LinkedTreeMap:481","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"rawtypes\")\n@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonPrimitive) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352412378/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof java.util.Map.Entry) {\n                java.util.Map.Entry java.util.Map.Entry = ((java.util.Map.Entry)(o));\n                return ((K) == null ? (other.getKey()) == null : K.equals(other.getKey())) && ((V) == null ? (other.getValue()) == null : V.equals(other.getValue()));\n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"54c392be-3f52-11e6-a9b7-6953054996ae","method":{"position":"com.google.gson.internal.bind.TypeAdapters:297","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352412378/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:497","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"54c3b9cf-3f52-11e6-a9b7-09b9e6addbe1","method":{"position":"com.google.gson.TreeTypeAdapter:84","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newFactory(com.google.gson.reflect.TypeToken<?> exactType, java.lang.Object typeAdapter) {\n    if ((typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)) {\n        {\n            return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , exactType , false , null);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352412378/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:287","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"54c3b9d0-3f52-11e6-a9b7-697752947820","method":{"position":"com.google.gson.internal.LinkedTreeMap:284","type":"CtMethodImpl","sourcecode":"private void replaceInParent(com.google.gson.internal.LinkedTreeMap.Node<K, V> node, com.google.gson.internal.LinkedTreeMap.Node<K, V> replacement) {\n    if (node != null) {\n        {\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n            if (replacement != null) {\n                replacement.com.google.gson.internal.LinkedTreeMap.Node<K, V> = parent;\n            } \n            if (parent != null) {\n                if ((parent.com.google.gson.internal.LinkedTreeMap.Node<K, V>) == node) {\n                    parent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                } else {\n                    assert (parent.com.google.gson.internal.LinkedTreeMap.Node<K, V>) == node;\n                    parent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                }\n            } else {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352412378/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"replacement":"node"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"54c3e0e1-3f52-11e6-a9b7-e30e82d48bca","method":{"position":"com.google.gson.Gson:133","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352412378/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src == null) {\n                {\n                    return toJsonTree(src);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352412378/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:107","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"54c407f2-3f52-11e6-a9b7-15bffc5e29dd","method":{"position":"com.google.gson.reflect.TypeToken:283","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic final boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonArray) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352412378/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof com.google.gson.JsonPrimitive) {\n                {\n                    return (o instanceof com.google.gson.reflect.TypeToken<?>) && (com.google.gson.internal.$Gson$Types.equals(java.lang.reflect.Type, ((com.google.gson.reflect.TypeToken<?>)(o)).java.lang.reflect.Type));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352412378/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"54c42f03-3f52-11e6-a9b7-6143f52e4226","method":{"position":"com.google.gson.Gson:576","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        {\n            try {\n                com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                toJson(src, typeOfSrc, jsonWriter);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352412378/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:298","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"54c42f04-3f52-11e6-a9b7-f339bbc13568","method":{"position":"com.google.gson.Gson:297","type":"CtMethodImpl","sourcecode":"private void checkValidFloatingPoint(double value) {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352412378/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                {\n                    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                        throw new java.lang.IllegalArgumentException(((value + \" is not a valid double value as per JSON specification. To override this\") + \" behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.\"));\n                    } \n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352412378/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:94","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"54c45615-3f52-11e6-a9b7-233fcc0b354c","method":{"position":"com.google.gson.internal.Primitives:79","type":"CtMethodImpl","sourcecode":"public static boolean isWrapperType(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class) {\n        {\n            if (type instanceof java.lang.reflect.WildcardType) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352412378/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return com.google.gson.internal.Primitives.com.google.gson.internal.Primitives.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.containsKey(com.google.gson.internal.$Gson$Preconditions.checkNotNull(type));\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352412378/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"54c45616-3f52-11e6-a9b7-7339b28e24b8","method":{"position":"com.google.gson.Gson:261","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352412378/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            double double = value.doubleValue();\n            checkValidFloatingPoint(doubleValue);\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":50,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
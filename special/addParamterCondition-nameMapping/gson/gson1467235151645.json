{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":274,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":427,"com.google.gson.functional.StringTest.testStringValueDeserialization":425,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":646,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":73,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":552,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":361,"com.google.gson.internal.LinkedHashTreeMapTest.testIterationOrder":681,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":513,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":104,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":184,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":230,"com.google.gson.MixedStreamTest.testWriteLenient":610,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":156,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":39,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":9,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":242,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":98,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":154,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":561,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":313,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":603,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":95,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":522,"com.google.gson.JsonObjectTest.testAddingNullPropertyValue":660,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":0,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":282,"com.google.gson.functional.ObjectTest.testSingletonLists":152,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":137,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":362,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":428,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":506,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":103,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":68,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":186,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":461,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":376,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":166,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":617,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":564,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":293,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":441,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":7,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":382,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":553,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":204,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":89,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":498,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":16,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":406,"com.google.gson.functional.EnumTest.testEnumCaseMapping":602,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":426,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":614,"com.google.gson.functional.JsonTreeTest.testToJsonTree":199,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":497,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":385,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":378,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":120,"com.google.gson.JsonObjectTest.testEqualsNonEmptyObject":661,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":3,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":38,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":639,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":486,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":355,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":508,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":46,"com.google.gson.internal.LinkedTreeMapTest.testLargeSetOfRandomKeys":673,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":453,"com.google.gson.functional.ObjectTest.testNullDeserialization":325,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":146,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":438,"com.google.gson.internal.bind.JsonElementReaderTest.testNestedObjects":654,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":164,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":573,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":620,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":514,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":19,"com.google.gson.JsonArrayTest.testEqualsOnEmptyArray":667,"com.google.gson.internal.LinkedTreeMapTest.testContainsNonComparableKeyReturnsFalse":674,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":32,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":271,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":173,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":619,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":381,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":334,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":379,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":235,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":578,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":577,"com.google.gson.JsonParserTest.testParseString":653,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":375,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":558,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":640,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":537,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":340,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":584,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":175,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":482,"com.google.gson.DefaultDateTypeAdapterTest.testFormatUsesDefaultTimezone":650,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":360,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":535,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":231,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":399,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":550,"com.google.gson.functional.StreamingTypeAdaptersTest.testFromJsonTree":6,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":222,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":352,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":266,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":52,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":58,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":416,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":422,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":559,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":551,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":172,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":476,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":160,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":260,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":308,"com.google.gson.JsonPrimitiveTest.testEqualsAcrossTypes":699,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":109,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":413,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":518,"com.google.gson.internal.LinkedHashTreeMapTest.testEmptyStringValues":680,"com.google.gson.metrics.PerformanceTest.testDummy":613,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":138,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":112,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":129,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":312,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":59,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":326,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":418,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":79,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":368,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":121,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":354,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":270,"com.google.gson.JsonArrayTest.testEqualsNonEmptyArray":10,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":149,"com.google.gson.functional.CollectionTest.testSetDeserialization":244,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":96,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":163,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":464,"com.google.gson.functional.EnumTest.testEnumSet":596,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":542,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":130,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":24,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithNestedWildcards":632,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":344,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":395,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":167,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":21,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":128,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":555,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":123,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":566,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":30,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":187,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":567,"com.google.gson.internal.LinkedHashTreeMapTest.testContainsNullKeyIsAlwaysFalse":683,"com.google.gson.functional.MapTest.testHashMapDeserialization":389,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":511,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":449,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":366,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":471,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":593,"com.google.gson.MixedStreamTest.testReadNulls":611,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":213,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":273,"com.google.gson.DefaultDateTypeAdapterTest.testParsingDatesFormattedWithSystemLocale":649,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":263,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":330,"com.google.gson.functional.MapTest.testSortedMap":409,"com.google.gson.functional.MapTest.testMapSerialization":405,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":275,"com.google.gson.internal.bind.JsonElementReaderTest.testObject":655,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":75,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":548,"com.google.gson.JsonPrimitiveTest.testByteEqualsShort":698,"com.google.gson.JsonPrimitiveTest.testByteEqualsBigInteger":690,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":489,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":248,"com.google.gson.functional.MapTest.testSerializeMaps":392,"com.google.gson.functional.MapTest.testComplexKeysSerialization":208,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":463,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":417,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":626,"com.google.gson.JsonPrimitiveTest.testLongEqualsBigInteger":692,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":493,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":148,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":291,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":288,"com.google.gson.internal.LinkedTreeMapTest.testRemoveRootDoesNotDoubleUnlink":668,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":225,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":34,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":600,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":201,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":662,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":105,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":324,"com.google.gson.functional.MapTest.testStringKeyDeserialization":415,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithBasicWildcards":56,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":490,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":63,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":580,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":419,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":517,"com.google.gson.functional.PrettyPrintingTest.testMap":383,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":468,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":512,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":446,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":277,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":328,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":337,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":492,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":616,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":641,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":431,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":435,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":350,"com.google.gson.functional.MapTest.testMapSerializationEmpty":414,"com.google.gson.functional.CollectionTest.testQueueSerialization":450,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":663,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":543,"com.google.gson.functional.MapTest.testMapOfMapSerialization":404,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":534,"com.google.gson.JavaSerializationTest.testMapIsSerializable":630,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":357,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":455,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":241,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":545,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":28,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictBoxedNansAndInfinities":634,"com.google.gson.functional.FieldNamingTest.testIdentity":249,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":429,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":60,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":139,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":176,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":45,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":108,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":151,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":198,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":500,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":48,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":82,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":430,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":210,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":540,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":371,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":301,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":345,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":240,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":351,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":377,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":387,"com.google.gson.functional.MapTest.testMapSubclassSerialization":391,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":576,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":134,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":228,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":466,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":250,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":303,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":532,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":604,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":232,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":336,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":591,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":185,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":127,"com.google.gson.functional.EnumTest.testEnumSubclass":598,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":554,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":165,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":618,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":499,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":267,"com.google.gson.GsonBuilderTest.testRegisterTypeAdapterForCoreType":628,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":560,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":62,"com.google.gson.JsonPrimitiveTest.testShortEqualsInteger":696,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":220,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":502,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":212,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":538,"com.google.gson.JsonPrimitiveTest.testByteEqualsLong":687,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":211,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":4,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":300,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":485,"com.google.gson.internal.LinkedTreeMapTest.testEqualsAndHashCode":676,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":320,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":544,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":107,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":536,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":372,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":153,"com.google.gson.MixedStreamTest.testWriteNulls":49,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":388,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":484,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":420,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":478,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":125,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":147,"com.google.gson.CommentsTest.testParseComments":607,"com.google.gson.JsonObjectTest.testReadPropertyWithEmptyStringName":658,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":26,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":155,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":285,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":254,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":261,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":557,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":74,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":408,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":433,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":15,"com.google.gson.MixedStreamTest.testReadInvalidState":608,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":93,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":2,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":374,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":575,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":76,"com.google.gson.ObjectTypeAdapterTest.testSerializeObject":101,"com.google.gson.JsonParserTest.testParseMixedArray":11,"com.google.gson.DefaultDateTypeAdapterTest.testParsingDatesFormattedWithUsLocale":651,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":510,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":647,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":494,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithTypeParameters":55,"com.google.gson.JsonPrimitiveTest.testDoubleEqualsBigDecimal":688,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":251,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":527,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":239,"com.google.gson.JsonArrayTest.testRemove":666,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":358,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":570,"com.google.gson.functional.MapTest.testMapDeserialization":398,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":481,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":353,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":386,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":42,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":51,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":281,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":118,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":397,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":284,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":594,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":226,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeMap":669,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":197,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":599,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":189,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":177,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":322,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":215,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":469,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":111,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":341,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":1,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":209,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":224,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":200,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":407,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":624,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":41,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":496,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":66,"com.google.gson.functional.PrimitiveTest.testShortSerialization":574,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":87,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":563,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":18,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictNansAndInfinities":633,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":533,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":562,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":191,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":509,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":245,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":20,"com.google.gson.internal.LinkedTreeMapTest.testEmptyStringValues":675,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":243,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":227,"com.google.gson.internal.LinkedTreeMapTest.testPutOverrides":672,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":393,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":526,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":43,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":582,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":233,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":54,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":289,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":369,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":307,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":644,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":589,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":583,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":636,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":310,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":61,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":117,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":178,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":292,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":332,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":657,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":272,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":57,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":64,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":539,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":182,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":159,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":601,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":217,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":465,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":97,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":190,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":467,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":65,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":280,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":286,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":359,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":516,"com.google.gson.internal.LinkedHashTreeMapTest.testClear":678,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":265,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":347,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":287,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":364,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":5,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":447,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":503,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":569,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":541,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":586,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":257,"com.google.gson.JsonPrimitiveTest.testEquals":697,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":283,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":597,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":279,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":77,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":157,"com.google.gson.functional.MapTest.testGeneralMapField":207,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":475,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":588,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":81,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":100,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":268,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":370,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":410,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":36,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":424,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":507,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":565,"com.google.gson.MixedStreamTest.testReadMixedStreamed":306,"com.google.gson.ObjectTypeAdapterTest.testDeserializeNullValue":670,"com.google.gson.JsonObjectTest.testDeepCopy":664,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":342,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":400,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":528,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":90,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":264,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":458,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":136,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":546,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":17,"com.google.gson.JavaSerializationTest.testNumberIsSerializable":629,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":122,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":193,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":401,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":444,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":390,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":27,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":587,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":144,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":296,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":529,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":656,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":356,"com.google.gson.internal.LinkedHashTreeMapTest.testEqualsAndHashCode":684,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":421,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":140,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":331,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":454,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":595,"com.google.gson.JsonPrimitiveTest.testFloatEqualsDouble":691,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":29,"com.google.gson.functional.ObjectTest.testNestedDeserialization":183,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":14,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":323,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":276,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":110,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":315,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":585,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":253,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":309,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":402,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":432,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":126,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":572,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":216,"com.google.gson.JavaSerializationTest.testListIsSerializable":631,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":8,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":85,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":460,"com.google.gson.functional.ObjectTest.testNullSerialization":33,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":219,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":443,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":394,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":206,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":501,"com.google.gson.functional.MapTest.testInterfaceTypeMap":205,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":487,"com.google.gson.stream.JsonWriterTest.testNonFiniteBoxedDoubles":642,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":44,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":114,"com.google.gson.JsonObjectTest.testAddingNullOrEmptyPropertyName":665,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":504,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":290,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":622,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":223,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":470,"com.google.gson.MixedStreamTest.testReadClosed":609,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":333,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":31,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":520,"com.google.gson.JsonPrimitiveTest.testIntegerEqualsLong":694,"com.google.gson.MixedStreamTest.testWriteClosed":305,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":278,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":452,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":116,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":158,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":380,"com.google.gson.internal.LinkedHashTreeMapTest.testPutNonComparableKeyFails":682,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":131,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":113,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":256,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":180,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":252,"com.google.gson.JsonPrimitiveTest.testShortEqualsLong":689,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":195,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":119,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":161,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":451,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":297,"com.google.gson.JsonPrimitiveTest.testShortEqualsBigInteger":686,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":549,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":299,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":221,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":456,"com.google.gson.internal.bind.JsonElementReaderTest.testSkipValue":12,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":365,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":71,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":237,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":590,"com.google.gson.stream.JsonWriterTest.testNumbers":643,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":525,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":196,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":339,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":150,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":472,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":255,"com.google.gson.functional.CollectionTest.testQueueDeserialization":462,"com.google.gson.internal.LinkedHashTreeMapTest.testPutOverrides":677,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":531,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":547,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":437,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":592,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":298,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":373,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":174,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":203,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":349,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":181,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":236,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":445,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":302,"com.google.gson.functional.MapTest.testRawMapSerialization":412,"com.google.gson.JsonParserTest.testParseReader":652,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":459,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":363,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":637,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":169,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":214,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":80,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":47,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":623,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":327,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":477,"com.google.gson.functional.PrimitiveTest.testByteSerialization":571,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":625,"com.google.gson.ObjectTypeAdapterTest.testSerialize":102,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":317,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":234,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":515,"com.google.gson.JsonPrimitiveTest.testEqualsIntegerAndBigInteger":50,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":83,"com.google.gson.JsonPrimitiveTest.testFloatEqualsBigDecimal":685,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":488,"com.google.gson.JsonPrimitiveTest.testByteEqualsInteger":693,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":246,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":88,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":132,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":434,"com.google.gson.functional.MapTest.testMapWithQuotes":403,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":338,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":523,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":436,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":23,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":495,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":13,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":143,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":579,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":335,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":94,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":86,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":124,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":179,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":202,"com.google.gson.functional.ObjectTest.testEmptyStringDeserialization":321,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":346,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":556,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":162,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":491,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":194,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":37,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":84,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":295,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":348,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":568,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":35,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":457,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":480,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":40,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":69,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":473,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":218,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":141,"com.google.gson.JsonPrimitiveTest.testIntegerEqualsBigInteger":695,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":605,"com.google.gson.internal.LinkedHashTreeMapTest.testContainsNonComparableKeyReturnsFalse":679,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":229,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":329,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":70,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":505,"com.google.gson.internal.LinkedHashTreeMapTest.testRemoveRootDoesNotDoubleUnlink":648,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":67,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":635,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":168,"com.google.gson.functional.ObjectTest.testNestedSerialization":170,"com.google.gson.JsonObjectTest.testAddingStringProperties":627,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":258,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":423,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":440,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":519,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":316,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":411,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":78,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":22,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":612,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":621,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":92,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":314,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":581,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":115,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":135,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":192,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":521,"com.google.gson.GsonBuilderTest.testCreatingMoreThanOnce":606,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":615,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":171,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":188,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":294,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":638,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":439,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":483,"com.google.gson.functional.CollectionTest.testSetSerialization":99,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":269,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":25,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":384,"com.google.gson.functional.StringTest.testStringValueSerialization":442,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":91,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":106,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":238,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":448,"com.google.gson.MixedStreamTest.testWriteInvalidState":304,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":474,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":319,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":524,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":262,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":530,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":259,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":343,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":247,"com.google.gson.ObjectTypeAdapterTest.testDeserialize":671,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":145,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":659,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":142,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":53,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":72,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":133,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":367,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":318,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":396,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":645,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":311,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":479},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:92","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof java.util.Iterator"},"failures":[],"tindex":"1fac0e2b-3e3f-11e6-8664-3bdbea073ccb","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:839","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof java.util.Iterator) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return containsKey(o);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:94","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.Class"},"failures":[0,1,2,3],"tindex":"1fac5c4c-3e3f-11e6-8664-c54eafcb5012","method":{"position":"com.google.gson.internal.Primitives:79","type":"CtMethodImpl","sourcecode":"public static boolean isWrapperType(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.GenericArrayType) {\n        {\n            if (type instanceof java.lang.Class) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return com.google.gson.internal.Primitives.com.google.gson.internal.Primitives.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.containsKey(com.google.gson.internal.$Gson$Preconditions.checkNotNull(type));\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:137","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonObject"},"failures":[4,5,6,7,8,9,10,11,12],"tindex":"1fac835d-3e3f-11e6-8664-7d93531012db","method":{"position":"com.google.gson.JsonArray:57","type":"CtMethodImpl","sourcecode":"public void add(com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (element == null) {\n                element = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            java.util.List<com.google.gson.JsonElement>.add(element);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:452","type":"CtBinaryOperatorImpl","sourcecode":"typeAdapter instanceof com.google.gson.InstanceCreator<?>"},"failures":[13,7,14,15,16,17,18,19,20,21],"tindex":"1fac835e-3e3f-11e6-8664-ed89ec15287d","method":{"position":"com.google.gson.TreeTypeAdapter:103","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newTypeHierarchyFactory(java.lang.Class<?> hierarchyType, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (typeAdapter instanceof com.google.gson.InstanceCreator<?>) {\n                {\n                    return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , null , false , hierarchyType);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:125","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonObject"},"failures":[22,23,24,25,26,27,28,13,29,14,30,31,32,16,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,20,48,49,50,51,52,53,54],"tindex":"1fac835f-3e3f-11e6-8664-170929cb340b","method":{"position":"com.google.gson.internal.Streams:67","type":"CtMethodImpl","sourcecode":"public static void write(com.google.gson.JsonElement element, com.google.gson.stream.JsonWriter writer) throws java.io.IOException {\n    if (element instanceof com.google.gson.JsonObject) {\n        {\n            com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<com.google.gson.JsonElement>.write(writer, element);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:199","type":"CtBinaryOperatorImpl","sourcecode":"from instanceof java.lang.reflect.ParameterizedType"},"failures":[55,56],"tindex":"1facaa70-3e3f-11e6-8664-1728b2f4881c","method":{"position":"com.google.gson.reflect.TypeToken:272","type":"CtMethodImpl","sourcecode":"private static boolean matches(java.lang.reflect.Type from, java.lang.reflect.Type to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeMap) {\n    if (from instanceof java.lang.reflect.ParameterizedType) {\n        {\n            return (to.equals(from)) || ((from instanceof java.lang.reflect.TypeVariable) && (to.equals(typeMap.get(((java.lang.reflect.TypeVariable<?>)(from)).getName()))));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:455","type":"CtBinaryOperatorImpl","sourcecode":"(typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)"},"failures":[22,57,23,58,24,59,60,61,62,63,64,65,25,26,27,66,67,68,28,29,69,70,71,30,72,31,32,16,41,42,73,43,74,75,76,77,78,79,80,81,44,82,9,83,45,84,85,86,46,87,88,21,89,48,90],"tindex":"1facaa71-3e3f-11e6-8664-3b716dd5361a","method":{"position":"com.google.gson.GsonBuilder:447","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\npublic com.google.gson.GsonBuilder registerTypeAdapter(java.lang.reflect.Type type, java.lang.Object typeAdapter) {\n    if ((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.$Gson$Preconditions.checkArgument(((((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) || (typeAdapter instanceof com.google.gson.InstanceCreator<?>)) || (typeAdapter instanceof com.google.gson.TypeAdapter<?>)));\n            if (typeAdapter instanceof com.google.gson.InstanceCreator<?>) {\n                java.util.Map<java.lang.reflect.Type, com.google.gson.InstanceCreator<?>>.put(type, ((com.google.gson.InstanceCreator)(typeAdapter)));\n            } \n            if ((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) {\n                com.google.gson.reflect.TypeToken<?> com.google.gson.reflect.TypeToken<?> = com.google.gson.reflect.TypeToken.get(type);\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.TreeTypeAdapter.newFactoryWithMatchRawType(typeToken, typeAdapter));\n            } \n            if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.internal.bind.TypeAdapters.newFactory(com.google.gson.reflect.TypeToken.get(type), ((com.google.gson.TypeAdapter)(typeAdapter))));\n            } \n            return com.google.gson.GsonBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[7],"tindex":"1facaa72-3e3f-11e6-8664-f9592f9f1c1b","method":{"position":"com.google.gson.Gson:136","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src != null) {\n        {\n            if (src != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return toJsonTree(src, typeOfSrc);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[91,92,93,94,95,96,97,98,99,100,101,102,103],"tindex":"1facd183-3e3f-11e6-8664-091b0afbb9f7","method":{"position":"com.google.gson.internal.bind.ObjectTypeAdapter:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Object value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            com.google.gson.TypeAdapter<java.lang.Object> com.google.gson.TypeAdapter<java.lang.Object> = ((com.google.gson.TypeAdapter<java.lang.Object>)(com.google.gson.Gson.getAdapter(value.getClass())));\n            if (typeAdapter instanceof com.google.gson.internal.bind.ObjectTypeAdapter) {\n                out.beginObject();\n                out.endObject();\n                return ;\n            } \n            typeAdapter.write(out, value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:137","type":"CtBinaryOperatorImpl","sourcecode":"(!serialize) && (!deserialize)"},"failures":[104,105,106,107,108,109,110,4,111,112,113,114,5,115,116,117,118,119,120,22,57,121,122,123,58,61,62,64,25,124,125,126,127,128,129,130,0,131,132,133,1,2,134,3,135,136,137,138,7,139,140,141,142,143,144,145,146,147,148,149,150,91,151,152,153,154,155,156,157,158,159,160,161,162,163,164,92,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,93,94,95,96,200,201,202,203,204,205,206,207,208,73,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,8,234,235,236,237,238,239,240,241,242,243,97,244,98,99,245,246,247,248,249,75,76,77,78,80,250,251,252,253,254,255,256,257,258,259,260,100,261,262,263,264,265,266,267,268,269,270,271,272,9,83,84,85,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,21,300,301,302,303,304,305,306,307,308,102],"tindex":"1facd184-3e3f-11e6-8664-77ea2133502b","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:86","type":"CtMethodImpl","sourcecode":"private com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField createBoundField(final com.google.gson.Gson context, final java.lang.reflect.Field field, final java.lang.String name, final com.google.gson.reflect.TypeToken<?> fieldType, boolean serialize, boolean deserialize) {\n    if ((!deserialize) && (!serialize)) {\n        {\n            final boolean boolean = com.google.gson.internal.Primitives.isPrimitive(fieldType.getRawType());\n            return new com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField(name, serialize, deserialize) {\n                final com.google.gson.TypeAdapter<?> typeAdapter = getFieldAdapter(context, field, fieldType);\n\n                @java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n                @java.lang.Override\n                void write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                    java.lang.Object java.lang.Object = field.get(value);\n                    com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n                    t.write(writer, fieldValue);\n                }\n\n                @java.lang.Override\n                void read(com.google.gson.stream.JsonReader reader, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                    java.lang.Object java.lang.Object = com.google.gson.TypeAdapter<?>.read(reader);\n                    if ((fieldValue != null) || (!isPrimitive)) {\n                        field.set(value, fieldValue);\n                    } \n                }\n\n                public boolean writeField(java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                    if (!(boolean))\n                        return false;\n                    \n                    java.lang.Object java.lang.Object = field.get(value);\n                    return fieldValue != value;\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serialize":"deserialize","deserialize":"serialize"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:118","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.Class<?>"},"failures":[],"tindex":"1facf895-3e3f-11e6-8664-f7d120e71ee8","method":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:74","type":"CtMethodImpl","sourcecode":"private java.lang.reflect.Type getRuntimeTypeIfMoreSpecific(java.lang.reflect.Type type, java.lang.Object value) {\n    if (value instanceof java.lang.Class<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((value != null) && (((type == (java.lang.Object.java.lang.Object.java.lang.Class)) || (type instanceof java.lang.reflect.TypeVariable<?>)) || (type instanceof java.lang.Class<?>))) {\n                type = value.getClass();\n            } \n            return type;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:305","type":"CtBinaryOperatorImpl","sourcecode":"node != null"},"failures":[],"tindex":"1facf896-3e3f-11e6-8664-6183194beae6","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:686","type":"CtMethodImpl","sourcecode":"void add(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node) {\n    if (node != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (node != null) {\n                {\n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                    node.int = 1;\n                    if (((int) > 0) && (((int) & 1) == 0)) {\n                        (int)++;\n                        (int)--;\n                        (int)++;\n                    } \n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node;\n                    (int)++;\n                    if (((int) > 0) && (((int) & 1) == 0)) {\n                        (int)++;\n                        (int)--;\n                        (int)++;\n                    } \n                    for (int int = 4 ; ((int) & (scale - 1)) == (scale - 1) ; scale *= 2) {\n                        if ((int) == 0) {\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                            center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left;\n                            center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                            center.int = (right.int) + 1;\n                            left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                            right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                        } else if ((int) == 1) {\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                            center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                            center.int = (right.int) + 1;\n                            right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                            int = 0;\n                        } else if ((int) == 2) {\n                            int = 0;\n                        } \n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"node"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[],"tindex":"1fad46b7-3e3f-11e6-8664-335c41a16ba2","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:116","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<?> getFieldAdapter(com.google.gson.Gson gson, java.lang.reflect.Field field, com.google.gson.reflect.TypeToken<?> fieldType) {\n    if (field.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (field.isSynthetic()) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    com.google.gson.annotations.JsonAdapter com.google.gson.annotations.JsonAdapter = field.getAnnotation(com.google.gson.annotations.JsonAdapter.com.google.gson.annotations.JsonAdapter.java.lang.Class);\n                    if (annotation != null) {\n                        com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory.getTypeAdapter(com.google.gson.internal.ConstructorConstructor, gson, fieldType, annotation);\n                        if (adapter != null)\n                            return adapter;\n                        \n                    } \n                    return gson.getAdapter(fieldType);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"field"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[191],"tindex":"1fad46b8-3e3f-11e6-8664-c9c8bf2bb784","method":{"position":"com.google.gson.internal.bind.TypeAdapters:223","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    out.value(value);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[213,218,220,226,245,248],"tindex":"1fad46b9-3e3f-11e6-8664-edf1a80ab3b4","method":{"position":"com.google.gson.FieldNamingPolicy:137","type":"CtMethodImpl","sourcecode":"private static java.lang.String upperCaseFirstLetter(java.lang.String name) {\n    if (name == null) {\n        {\n            if (name == null) {\n                {\n                    java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n                    int int = 0;\n                    char char = name.charAt(index);\n                    while (index < ((name.length()) - 1)) {\n                        if (java.lang.Character.isLetter(firstCharacter)) {\n                            break;\n                        } \n                        fieldNameBuilder.append(firstCharacter);\n                        firstCharacter = name.charAt((++index));\n                    }\n                    if (index == (name.length())) {\n                        return fieldNameBuilder.toString();\n                    } \n                    if (!(java.lang.Character.isUpperCase(firstCharacter))) {\n                        java.lang.String java.lang.String = com.google.gson.FieldNamingPolicy.modifyString(java.lang.Character.toUpperCase(firstCharacter), name, (++index));\n                        return fieldNameBuilder.append(modifiedTarget).toString();\n                    } else {\n                        return name;\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"1fad46ba-3e3f-11e6-8664-415ba91d3051","method":{"position":"com.google.gson.internal.bind.TypeAdapters:297","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:274","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[104,309,105,106,310,107,108,109,110,4,111,112,113,114,5,115,116,117,118,119,120,22,57,311,121,122,123,312,23,58,24,59,60,61,62,63,64,65,25,26,27,66,67,68,28,13,29,124,125,69,126,127,128,129,130,0,131,132,133,1,2,70,134,3,313,135,136,137,138,7,14,15,314,139,140,71,141,142,30,72,31,32,315,16,17,18,316,144,145,146,147,148,149,150,91,317,318,151,152,153,154,155,156,157,158,159,160,161,319,162,320,163,164,33,92,321,165,322,166,19,167,168,169,170,323,171,172,173,174,324,325,175,176,177,178,179,180,181,182,183,184,326,327,185,186,34,328,329,330,35,187,331,332,36,333,334,188,189,335,336,337,338,339,37,340,38,341,190,342,343,344,191,345,346,347,348,349,350,192,351,352,353,354,355,356,357,193,358,359,360,361,362,363,364,365,366,367,368,369,39,370,371,194,40,372,373,374,195,375,376,41,377,378,379,380,196,197,198,199,93,381,94,95,96,382,383,200,201,384,385,386,202,387,42,388,389,390,391,392,393,394,395,396,397,398,203,399,400,401,402,403,404,405,406,204,407,408,409,205,410,206,207,411,412,413,208,414,415,416,417,418,419,73,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,8,420,421,422,234,423,424,235,236,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,242,445,243,446,447,448,449,450,451,452,453,97,454,455,456,457,244,98,458,459,99,460,461,43,462,463,464,465,466,245,246,247,248,249,74,75,76,77,78,79,80,467,81,468,44,250,469,470,251,252,253,254,255,256,257,258,259,260,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,100,261,262,490,491,492,493,494,263,495,264,265,266,267,82,268,269,270,271,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,272,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,9,83,45,84,85,273,592,274,275,593,276,277,278,279,280,281,282,594,86,46,283,284,285,286,87,287,47,595,288,289,596,597,20,598,599,600,290,291,601,602,603,604,292,293,294,295,296,297,298,299,605,88,21,89,48,90,300,301,606,607,302,608,609,303,49,304,610,611,612,305,306,307,613,614,615,308,616,617,618,619,620,621],"tindex":"1fad6dcb-3e3f-11e6-8664-2b3c3802aa98","method":{"position":"com.google.gson.Gson:249","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> doubleAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                {\n                    if (serializeSpecialFloatingPointValues) {\n                        return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n                    } \n                    return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                        @java.lang.Override\n                        public java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                            if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                                in.nextNull();\n                                return null;\n                            } \n                            return in.nextDouble();\n                        }\n\n                        @java.lang.Override\n                        public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                            if (value == null) {\n                                out.nullValue();\n                                return ;\n                            } \n                            double double = value.doubleValue();\n                            checkValidFloatingPoint(doubleValue);\n                            out.value(value);\n                        }\n                    };\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:340","type":"CtBinaryOperatorImpl","sourcecode":"toResolve instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"1fad6dcc-3e3f-11e6-8664-e7407c8a0ae3","method":{"position":"com.google.gson.internal.$Gson$Types:322","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type resolve(java.lang.reflect.Type context, java.lang.Class<?> contextRawType, java.lang.reflect.Type toResolve) {\n    while (true) {\n        if (toResolve instanceof java.lang.reflect.TypeVariable) {\n            java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(toResolve));\n            toResolve = com.google.gson.internal.$Gson$Types.resolveTypeVariable(context, contextRawType, typeVariable);\n            if (toResolve == typeVariable) {\n                return toResolve;\n            } \n        } else if ((toResolve instanceof java.lang.Class) && (((java.lang.Class<?>)(toResolve)).isArray())) {\n            java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getComponentType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, componentType);\n            return componentType == newComponentType ? original : com.google.gson.internal.$Gson$Types.arrayOf(newComponentType);\n        } else if (toResolve instanceof java.lang.reflect.GenericArrayType) {\n            java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getGenericComponentType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, componentType);\n            return componentType == newComponentType ? original : com.google.gson.internal.$Gson$Types.arrayOf(newComponentType);\n        } else if (toResolve instanceof java.lang.reflect.ParameterizedType) {\n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getOwnerType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, ownerType);\n            boolean boolean = newOwnerType != ownerType;\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getActualTypeArguments();\n            for (int int = 0, int int = args.int ; t < length ; t++) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, args[t]);\n                if (resolvedTypeArgument != (args[t])) {\n                    if (!changed) {\n                        args = args.clone();\n                        changed = true;\n                    } \n                    args[t] = resolvedTypeArgument;\n                } \n            }\n            return changed ? com.google.gson.internal.$Gson$Types.newParameterizedTypeWithOwner(newOwnerType, original.getRawType(), args) : original;\n        } else if (toResolve instanceof java.lang.reflect.WildcardType) {\n            java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(toResolve));\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getLowerBounds();\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getUpperBounds();\n            if ((originalLowerBound.int) == 1) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, originalLowerBound[0]);\n                if (lowerBound != (originalLowerBound[0])) {\n                    return com.google.gson.internal.$Gson$Types.supertypeOf(lowerBound);\n                } \n            } else if ((originalUpperBound.int) == 1) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, originalUpperBound[0]);\n                if (upperBound != (originalUpperBound[0])) {\n                    return com.google.gson.internal.$Gson$Types.subtypeOf(upperBound);\n                } \n            } \n            return original;\n        } else {\n            return toResolve;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"context"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:430","type":"CtFieldReadImpl","sourcecode":"serializeNulls"},"failures":[104,105,310,108,109,110,4,111,112,113,114,5,115,118,119,120,22,23,24,62,63,64,25,26,27,67,28,13,29,124,69,126,127,128,129,130,131,132,133,2,3,622,313,137,7,14,139,140,141,143,30,72,31,32,315,16,17,18,316,144,145,146,147,148,150,91,318,151,152,155,158,161,163,33,92,322,19,167,169,170,323,172,175,177,178,180,327,186,34,187,332,36,333,335,337,338,37,38,341,343,191,346,347,348,349,350,351,353,354,356,193,358,359,360,362,365,367,368,39,370,194,40,372,373,374,195,41,377,379,196,197,198,199,93,381,94,95,96,382,383,200,201,384,385,386,202,42,391,392,395,397,403,404,405,407,408,205,410,206,207,412,208,414,416,419,73,209,212,213,214,215,216,217,218,219,222,224,227,228,229,234,423,424,235,236,426,427,428,429,430,433,435,439,442,237,238,239,240,241,444,242,445,243,446,450,451,452,453,97,456,98,458,99,460,43,465,245,246,247,248,249,76,78,467,81,468,44,250,469,470,251,252,253,254,255,256,257,258,259,260,471,472,473,475,476,477,478,479,482,484,488,100,262,491,493,263,265,266,267,82,268,270,271,499,501,507,510,518,519,525,527,528,531,534,536,537,540,541,545,554,556,558,559,562,565,567,570,571,572,573,574,575,576,580,582,586,587,589,9,83,45,84,85,592,275,594,46,288,596,597,20,598,290,601,602,603,604,292,295,296,299,21,89,48,90,300,301,623,624,625,302,303,49,304,610,612,305,614,615,308,616,617,618,626,619,620,621],"tindex":"1fad94dd-3e3f-11e6-8664-21fb9c65112d","method":{"position":"com.google.gson.stream.JsonWriter:268","type":"CtMethodImpl","sourcecode":"public final void setSerializeNulls(boolean serializeNulls) {\n    if (serializeNulls) {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = serializeNulls;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeNulls":"serializeNulls"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:554","type":"CtBinaryOperatorImpl","sourcecode":"(datePattern != null) && (!(\"\".equals(datePattern.trim())))"},"failures":[36,37,38,39,40,41],"tindex":"1fad94de-3e3f-11e6-8664-ff94f38aecae","method":{"position":"com.google.gson.GsonBuilder:551","type":"CtMethodImpl","sourcecode":"private void addTypeAdaptersForDate(java.lang.String datePattern, int dateStyle, int timeStyle, java.util.List<com.google.gson.TypeAdapterFactory> factories) {\n    if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n        {\n            if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    com.google.gson.DefaultDateTypeAdapter com.google.gson.DefaultDateTypeAdapter;\n                    if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n                        dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(datePattern);\n                    } else if ((dateStyle != (java.text.DateFormat.java.text.DateFormat.int)) && (timeStyle != (java.text.DateFormat.java.text.DateFormat.int))) {\n                        dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(dateStyle , timeStyle);\n                    } else {\n                        return ;\n                    }\n                    factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.util.Date.java.util.Date.java.lang.Class), dateTypeAdapter));\n                    factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Timestamp.java.sql.Timestamp.java.lang.Class), dateTypeAdapter));\n                    factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Date.java.sql.Date.java.lang.Class), dateTypeAdapter));\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"datePattern":"datePattern"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[191],"tindex":"1fadbbef-3e3f-11e6-8664-8d622486ad71","method":{"position":"com.google.gson.Gson:285","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                {\n                    if (value == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.io.IOException();\n                    } else {\n                        {\n                            if (value == null) {\n                                out.nullValue();\n                                return ;\n                            } \n                            float float = value.floatValue();\n                            checkValidFloatingPoint(floatValue);\n                            out.value(value);\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[63,64,67,230,231,232,8],"tindex":"1fadbbf0-3e3f-11e6-8664-79ac5a507175","method":{"position":"com.google.gson.JsonObject:89","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Number value) {\n    if (value == null) {\n        {\n            add(property, createJsonElement(value));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonObject:54","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"1fadbbf1-3e3f-11e6-8664-032d57224cef","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:75","type":"CtMethodImpl","sourcecode":"private void put(com.google.gson.JsonElement value) {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((java.lang.String) != null) {\n                if ((!(value.isJsonNull())) || (getSerializeNulls())) {\n                    com.google.gson.JsonObject com.google.gson.JsonObject = ((com.google.gson.JsonObject)(peek()));\n                    object.add(java.lang.String, value);\n                } \n                java.lang.String = null;\n            } else if (java.util.List<com.google.gson.JsonElement>.isEmpty()) {\n                com.google.gson.JsonElement = value;\n            } else {\n                com.google.gson.JsonElement com.google.gson.JsonElement = peek();\n                if (element instanceof com.google.gson.JsonArray) {\n                    ((com.google.gson.JsonArray)(element)).add(value);\n                } else {\n                    throw new java.lang.IllegalStateException();\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[62,317,318,230,231,232,233,8,82,9,83,84,85,627],"tindex":"1fadbbf2-3e3f-11e6-8664-2f2621d6ce8d","method":{"position":"com.google.gson.JsonObject:78","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.String value) {\n    if (value == null) {\n        {\n            add(property, createJsonElement(value));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[],"tindex":"1fadbbf3-3e3f-11e6-8664-47d6aa5f33cd","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:116","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<?> getFieldAdapter(com.google.gson.Gson gson, java.lang.reflect.Field field, com.google.gson.reflect.TypeToken<?> fieldType) {\n    if (field.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (field.isSynthetic()) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    com.google.gson.annotations.JsonAdapter com.google.gson.annotations.JsonAdapter = field.getAnnotation(com.google.gson.annotations.JsonAdapter.com.google.gson.annotations.JsonAdapter.java.lang.Class);\n                    if (annotation != null) {\n                        com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory.getTypeAdapter(com.google.gson.internal.ConstructorConstructor, gson, fieldType, annotation);\n                        if (adapter != null)\n                            return adapter;\n                        \n                    } \n                    return gson.getAdapter(fieldType);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"field"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:244","type":"CtUnaryOperatorImpl","sourcecode":"!(rawType.isInterface())"},"failures":[],"tindex":"1fade304-3e3f-11e6-8664-892cf665eab3","method":{"position":"com.google.gson.internal.$Gson$Types:226","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type getGenericSupertype(java.lang.reflect.Type context, java.lang.Class<?> rawType, java.lang.Class<?> toResolve) {\n    if (toResolve == rawType) {\n        return context;\n    } \n    if (toResolve.isInterface()) {\n        java.lang.Class<?>[] java.lang.Class<?>[] = rawType.getInterfaces();\n        for (int int = 0, int int = interfaces.int ; i < length ; i++) {\n            if ((interfaces[i]) == toResolve) {\n                return rawType.getGenericInterfaces()[i];\n            } else if (toResolve.isAssignableFrom(interfaces[i])) {\n                return com.google.gson.internal.$Gson$Types.getGenericSupertype(rawType.getGenericInterfaces()[i], interfaces[i], toResolve);\n            } \n        }\n    } \n    if (!(rawType.isInterface())) {\n        while (rawType != (java.lang.Object.java.lang.Object.java.lang.Class)) {\n            java.lang.Class<?> java.lang.Class<?> = rawType.getSuperclass();\n            if (rawSupertype == toResolve) {\n                return rawType.getGenericSuperclass();\n            } else if (toResolve.isAssignableFrom(rawSupertype)) {\n                return com.google.gson.internal.$Gson$Types.getGenericSupertype(rawType.getGenericSuperclass(), rawSupertype, toResolve);\n            } \n            rawType = rawSupertype;\n        }\n    } \n    return toResolve;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"rawType":"rawType"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:141","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.WildcardType"},"failures":[104,309,105,106,310,107,108,109,110,4,111,112,113,114,5,115,116,117,118,119,120,22,57,311,121,122,123,312,23,58,24,59,60,61,62,63,64,65,25,26,27,66,67,68,28,13,29,124,125,69,126,127,128,129,130,0,131,132,133,1,2,70,134,3,313,135,136,137,138,7,14,314,139,140,71,141,142,143,30,72,31,32,315,16,17,18,316,144,145,146,147,148,149,150,91,151,152,153,154,155,156,157,158,159,160,161,162,320,163,164,92,165,322,166,19,167,168,169,170,323,171,172,173,174,324,175,176,177,178,179,180,181,182,183,184,326,327,185,186,328,329,330,187,331,332,36,333,334,188,189,335,336,337,338,339,37,340,38,341,190,342,343,344,191,345,346,347,348,349,350,192,351,352,353,354,355,356,357,193,358,359,360,361,362,363,364,365,366,367,368,369,39,370,371,194,40,372,373,374,195,375,376,41,377,378,379,380,196,197,198,199,93,381,94,95,96,382,383,200,201,384,385,386,202,387,42,388,389,390,391,392,393,394,395,396,397,398,203,399,400,401,402,403,404,405,406,204,407,408,409,205,410,206,207,411,412,413,208,414,415,416,417,418,419,73,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,8,420,421,422,234,423,424,235,236,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,237,238,239,240,241,443,444,242,445,243,446,447,448,449,450,451,452,453,97,454,455,456,457,244,98,458,459,99,460,461,43,462,463,464,465,466,245,246,247,248,249,74,75,76,77,78,79,80,467,81,468,44,250,469,470,251,252,253,254,255,256,257,258,259,260,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,100,261,262,490,491,492,493,494,263,495,264,265,266,267,82,268,269,270,271,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,272,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,9,83,45,84,85,273,592,274,275,593,276,277,278,279,280,281,282,594,86,46,283,284,285,286,87,287,47,595,288,289,596,597,20,598,599,600,290,291,601,602,603,604,292,293,294,295,296,297,298,299,605,88,21,89,48,90,300,301,628,623,624,625,607,302,608,303,304,610,611,612,305,306,307,614,615,629,630,631,308,102,103,632,55,56,616,617,618,621],"tindex":"1fade305-3e3f-11e6-8664-dbf84d579813","method":{"position":"com.google.gson.reflect.TypeToken:295","type":"CtMethodImpl","sourcecode":"public static com.google.gson.reflect.TypeToken<?> get(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.WildcardType) {\n        {\n            return new com.google.gson.reflect.TypeToken<java.lang.Object>(type);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:105","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonObject"},"failures":[108,110,4,111,112,114,5,115,117,118,119,120,22,57,121,122,123,23,58,24,59,60,61,62,63,64,65,25,26,27,66,67,68,28,13,29,124,69,126,127,128,130,131,132,133,70,134,7,14,139,71,141,142,143,30,72,31,32,315,16,17,18,316,144,145,146,147,148,150,91,151,152,153,154,155,156,157,161,92,165,166,167,169,170,173,175,176,179,183,326,327,186,330,36,338,37,38,342,191,358,360,365,366,368,369,39,370,40,373,374,41,378,197,93,381,94,95,96,382,383,200,201,384,385,386,202,42,388,390,391,392,397,203,399,401,404,406,204,205,206,207,208,415,416,73,209,210,211,212,214,223,224,227,228,229,230,420,421,422,234,423,424,235,236,427,429,433,434,237,238,239,240,241,443,444,242,445,243,446,451,452,97,456,457,98,99,43,245,246,247,248,249,74,75,76,77,78,79,80,467,81,468,44,469,251,253,254,255,256,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,100,261,262,490,491,492,493,494,263,264,265,266,267,82,268,269,270,271,501,506,508,510,518,519,527,528,530,531,534,537,545,556,558,559,562,569,572,575,576,580,581,582,586,587,9,83,45,84,85,274,280,282,594,86,46,283,284,87,288,20,598,290,291,601,602,292,293,294,296,299,88,21,89,48,90,623,624,302,303,306,307,614,615,308,101,102,616,617,618],"tindex":"1fae0a16-3e3f-11e6-8664-cfc211fdaf62","method":{"position":"com.google.gson.reflect.TypeToken:283","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic final boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonObject) {\n        {\n            return (o instanceof com.google.gson.reflect.TypeToken<?>) && (com.google.gson.internal.$Gson$Types.equals(java.lang.reflect.Type, ((com.google.gson.reflect.TypeToken<?>)(o)).java.lang.reflect.Type));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"1fae0a17-3e3f-11e6-8664-97d34473198a","method":{"position":"com.google.gson.Gson:847","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(com.google.gson.JsonElement json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            if (json == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            } else {\n                {\n                    java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n                    return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:602","type":"CtUnaryOperatorImpl","sourcecode":"!(lenient)"},"failures":[104,105,310,108,109,110,4,111,112,113,114,5,115,118,119,120,22,23,24,62,63,64,25,26,27,67,28,13,29,124,69,126,127,128,129,130,131,132,133,2,3,622,313,137,7,14,139,140,141,143,30,72,31,32,315,16,17,18,316,144,145,146,147,148,150,91,317,318,151,152,155,158,161,319,163,33,92,322,19,167,169,170,323,172,175,177,178,180,327,186,34,35,187,332,36,333,335,337,338,37,38,341,343,191,346,347,348,349,350,351,353,354,356,193,358,359,360,362,365,367,368,39,370,194,40,372,373,374,195,41,377,379,196,197,198,199,93,381,94,95,96,382,383,200,201,384,385,386,202,42,391,392,395,397,203,403,404,405,407,408,205,410,206,207,411,412,208,414,416,419,73,209,212,213,214,215,217,218,219,222,224,227,228,229,234,423,424,235,236,426,427,428,429,430,433,435,439,442,237,238,239,240,241,444,242,445,243,446,450,451,452,453,97,456,98,458,99,460,43,465,245,246,247,248,249,76,78,467,81,468,44,250,469,470,251,252,253,254,255,256,257,258,259,260,471,472,473,475,476,477,478,479,482,483,484,488,100,262,491,493,263,265,266,267,82,268,270,271,499,501,507,510,518,519,525,527,528,531,534,536,537,540,541,545,554,556,558,559,562,565,567,570,571,572,573,574,575,576,580,582,586,587,589,9,83,45,84,85,273,592,274,275,277,280,594,46,283,284,286,87,287,47,288,596,597,20,598,290,601,602,603,604,292,295,296,299,21,89,48,90,300,301,623,624,625,302,303,49,304,610,612,305,614,615,308,616,617,618,633,634,619,620,621],"tindex":"1fae0a18-3e3f-11e6-8664-65d3b6df82e3","method":{"position":"com.google.gson.stream.JsonWriter:234","type":"CtMethodImpl","sourcecode":"public final void setLenient(boolean lenient) {\n    if (!lenient) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (!lenient) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    com.google.gson.stream.JsonWriter.this.boolean = lenient;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"lenient"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"1fae3129-3e3f-11e6-8664-6da8c2464cb6","method":{"position":"com.google.gson.Gson:261","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            double double = value.doubleValue();\n            checkValidFloatingPoint(doubleValue);\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:105","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonObject"},"failures":[],"tindex":"1fae312a-3e3f-11e6-8664-5f5347444df7","method":{"position":"com.google.gson.internal.LinkedTreeMap:570","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (o instanceof java.util.Map.Entry) && ((findByEntry(((java.util.Map.Entry<?, ?>)(o)))) != null);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[104,105,108,113,118,22,63,64,25,67,28,13,124,69,126,127,128,129,130,131,132,133,2,3,635,622,636,637,638,639,640,641,137,7,139,140,143,144,91,151,155,163,92,167,169,170,175,177,180,186,187,335,338,343,193,195,197,93,381,94,95,96,382,383,200,201,384,385,386,202,42,392,405,207,412,419,209,212,214,219,224,228,229,234,235,236,242,243,446,451,97,98,99,460,245,246,247,248,249,253,254,473,479,484,488,100,493,263,265,266,499,519,536,540,541,545,554,556,558,559,562,565,567,570,571,572,573,574,575,580,582,586,587,589,273,275,277,292,295,296,299,48,302,303,610,50,51,615,642,643,308,102,52,53,644],"tindex":"1fae312b-3e3f-11e6-8664-b9b25f030734","method":{"position":"com.google.gson.stream.JsonWriter:490","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            writeDeferredName();\n            java.lang.String java.lang.String = value.toString();\n            if ((!(boolean)) && (((string.equals(\"-Infinity\")) || (string.equals(\"Infinity\"))) || (string.equals(\"NaN\")))) {\n                throw new java.lang.IllegalArgumentException((\"Numeric values must be finite, but was \" + value));\n            } \n            beforeValue(false);\n            java.io.Writer.append(string);\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:565","type":"CtBinaryOperatorImpl","sourcecode":"(indent) == null"},"failures":[7,382,383,200,201,384,385,386,202,392,303,645,646],"tindex":"1fae583c-3e3f-11e6-8664-45f6b19b8228","method":{"position":"com.google.gson.stream.JsonWriter:212","type":"CtMethodImpl","sourcecode":"public final void setIndent(java.lang.String indent) {\n    if (indent == null) {\n        {\n            if ((indent.length()) == 0) {\n                com.google.gson.stream.JsonWriter.this.java.lang.String = null;\n                com.google.gson.stream.JsonWriter.this.java.lang.String = \":\";\n            } else {\n                com.google.gson.stream.JsonWriter.this.java.lang.String = indent;\n                com.google.gson.stream.JsonWriter.this.java.lang.String = \": \";\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"indent"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:109","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonPrimitive"},"failures":[],"tindex":"1fae583d-3e3f-11e6-8664-83420ac84507","method":{"position":"com.google.gson.internal.LinkedTreeMap:481","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"rawtypes\")\n@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonPrimitive) {\n        {\n            if (o instanceof com.google.gson.JsonPrimitive) {\n                {\n                    if (o instanceof java.util.Map.Entry) {\n                        java.util.Map.Entry java.util.Map.Entry = ((java.util.Map.Entry)(o));\n                        return ((K) == null ? (other.getKey()) == null : K.equals(other.getKey())) && ((V) == null ? (other.getValue()) == null : V.equals(other.getValue()));\n                    } \n                    return false;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"1fae583e-3e3f-11e6-8664-77f736dc5e8a","method":{"position":"com.google.gson.Gson:871","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            if (json == null) {\n                return null;\n            } \n            return ((T)(fromJson(new com.google.gson.internal.bind.JsonTreeReader(json), typeOfT)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:314","type":"CtBinaryOperatorImpl","sourcecode":"replacement != null"},"failures":[647,648],"tindex":"1fae583f-3e3f-11e6-8664-7f731c16aa17","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:311","type":"CtMethodImpl","sourcecode":"private void replaceInParent(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node, com.google.gson.internal.LinkedHashTreeMap.Node<K, V> replacement) {\n    if (node != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            if (replacement != null) {\n                replacement.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = parent;\n            } \n            if (parent != null) {\n                if ((parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) == node) {\n                    parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = replacement;\n                } else {\n                    assert (parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) == node;\n                    parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = replacement;\n                }\n            } else {\n                int int = (node.int) & ((com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[].int) - 1);\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[][index] = replacement;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"replacement":"node"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:137","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonObject"},"failures":[],"tindex":"1fae7f50-3e3f-11e6-8664-6519415e10cf","method":{"position":"com.google.gson.JsonArray:115","type":"CtMethodImpl","sourcecode":"public boolean contains(com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return java.util.List<com.google.gson.JsonElement>.contains(element);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.FieldNamingPolicy:143","type":"CtInvocationImpl","sourcecode":"java.lang.Character.isLetter(firstCharacter)"},"failures":[213,218,220,226,245,248],"tindex":"1fae7f51-3e3f-11e6-8664-8fe8450818b2","method":{"position":"com.google.gson.FieldNamingPolicy:163","type":"CtMethodImpl","sourcecode":"private static java.lang.String modifyString(char firstCharacter, java.lang.String srcString, int indexOfSubstring) {\n    if (!(java.lang.Character.isUpperCase(firstCharacter))) {\n        {\n            if (java.lang.Character.isLetter(firstCharacter)) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return indexOfSubstring < (srcString.length()) ? firstCharacter + (srcString.substring(indexOfSubstring)) : java.lang.String.valueOf(firstCharacter);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"firstCharacter":"firstCharacter"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:79","type":"CtUnaryOperatorImpl","sourcecode":"!(json instanceof com.google.gson.JsonPrimitive)"},"failures":[],"tindex":"1fae7f52-3e3f-11e6-8664-67b0a60bd5fa","method":{"position":"com.google.gson.DefaultDateTypeAdapter:77","type":"CtMethodImpl","sourcecode":"public java.util.Date deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT, com.google.gson.JsonDeserializationContext context) throws com.google.gson.JsonParseException {\n    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n        {\n            if (!(json instanceof com.google.gson.JsonPrimitive)) {\n                throw new com.google.gson.JsonParseException(\"The date should be a string value\");\n            } \n            java.util.Date java.util.Date = deserializeToDate(json);\n            if (typeOfT == (java.util.Date.java.util.Date.java.lang.Class)) {\n                return date;\n            } else if (typeOfT == (java.sql.Timestamp.java.sql.Timestamp.java.lang.Class)) {\n                return new java.sql.Timestamp(date.getTime());\n            } else if (typeOfT == (java.sql.Date.java.sql.Date.java.lang.Class)) {\n                return new java.sql.Date(date.getTime());\n            } else {\n                throw new java.lang.IllegalArgumentException((((getClass()) + \" cannot deserialize to \") + typeOfT));\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:109","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonPrimitive"},"failures":[],"tindex":"1fae7f53-3e3f-11e6-8664-fbf400162f9f","method":{"position":"com.google.gson.internal.$Gson$Types:511","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    return (o instanceof java.lang.reflect.GenericArrayType) && (com.google.gson.internal.$Gson$Types.equals(com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl.this, ((java.lang.reflect.GenericArrayType)(o))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[36,37,38,40,649,650,651],"tindex":"1fae7f54-3e3f-11e6-8664-b36025d97a10","method":{"position":"com.google.gson.DefaultDateTypeAdapter:94","type":"CtMethodImpl","sourcecode":"private java.util.Date deserializeToDate(com.google.gson.JsonElement json) {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (json == null) {\n                {\n                    synchronized(java.text.DateFormat) {\n                        try {\n                            return java.text.DateFormat.parse(json.getAsString());\n                        } catch (java.text.ParseException ignored) {\n                        }\n                        try {\n                            return java.text.DateFormat.parse(json.getAsString());\n                        } catch (java.text.ParseException ignored) {\n                        }\n                        try {\n                            return java.text.DateFormat.parse(json.getAsString());\n                        } catch (java.text.ParseException e) {\n                            throw new com.google.gson.JsonSyntaxException(json.getAsString() , e);\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:132","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"1faea665-3e3f-11e6-8664-ed51aa123e19","method":{"position":"com.google.gson.internal.Primitives:79","type":"CtMethodImpl","sourcecode":"public static boolean isWrapperType(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.GenericArrayType) {\n        {\n            if (type instanceof java.lang.Class) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return com.google.gson.internal.Primitives.com.google.gson.internal.Primitives.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.containsKey(com.google.gson.internal.$Gson$Preconditions.checkNotNull(type));\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:85","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[],"tindex":"1faea666-3e3f-11e6-8664-071a639c0b80","method":{"position":"com.google.gson.internal.$Gson$Types:411","type":"CtMethodImpl","sourcecode":"private static int indexOf(java.lang.Object[] array, java.lang.Object toFind) {\n    for (int int = 0 ; i < (array.int) ; i++) {\n        if (toFind.equals(array[i])) {\n            return i;\n        } \n    }\n    throw new java.util.NoSuchElementException();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"toFind"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:726","type":"CtBinaryOperatorImpl","sourcecode":"value == 0"},"failures":[53,644],"tindex":"1faea667-3e3f-11e6-8664-f15504777835","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:170","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(long value) throws java.io.IOException {\n    if (value == 0) {\n        {\n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:250","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[],"tindex":"1faea668-3e3f-11e6-8664-eb53f4c0889c","method":{"position":"com.google.gson.Gson:249","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> doubleAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                {\n                    if (serializeSpecialFloatingPointValues) {\n                        return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n                    } \n                    return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                        @java.lang.Override\n                        public java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                            if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                                in.nextNull();\n                                return null;\n                            } \n                            return in.nextDouble();\n                        }\n\n                        @java.lang.Override\n                        public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                            if (value == null) {\n                                out.nullValue();\n                                return ;\n                            } \n                            double double = value.doubleValue();\n                            checkValidFloatingPoint(doubleValue);\n                            out.value(value);\n                        }\n                    };\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl","sourcecode":"in == null"},"failures":[],"tindex":"1faecd79-3e3f-11e6-8664-672d29214b16","method":{"position":"com.google.gson.TypeAdapter:254","type":"CtMethodImpl","sourcecode":"public final T fromJson(java.io.Reader in) throws java.io.IOException {\n    if (in == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(in);\n            return read(reader);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"1faecd7a-3e3f-11e6-8664-e78ad70ac0b0","method":{"position":"com.google.gson.Gson:847","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(com.google.gson.JsonElement json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            if (json == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            } else {\n                {\n                    java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n                    return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[191,377,47],"tindex":"1faecd7b-3e3f-11e6-8664-59e6987b815e","method":{"position":"com.google.gson.Gson:532","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n                    toJson(src, typeOfSrc, writer);\n                    return writer.toString();\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"1faecd7c-3e3f-11e6-8664-4db13af63277","method":{"position":"com.google.gson.Gson:552","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            if (src != null) {\n                toJson(src, src.getClass(), writer);\n            } else {\n                toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull, writer);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.TreeTypeAdapter:55","type":"CtInvocationImpl","sourcecode":"value.isJsonNull()"},"failures":[],"tindex":"1faecd7d-3e3f-11e6-8664-235e8c0d38e9","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:108","type":"CtMethodImpl","sourcecode":"public boolean writeField(java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value.isJsonNull()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (!(boolean))\n                return false;\n            \n            java.lang.Object java.lang.Object = field.get(value);\n            return fieldValue != value;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"1faecd7e-3e3f-11e6-8664-91beaf177bba","method":{"position":"com.google.gson.internal.bind.TypeAdapters:223","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    out.value(value);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"1faef48f-3e3f-11e6-8664-63ac2d0e3b1b","method":{"position":"com.google.gson.Gson:491","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    com.google.gson.internal.bind.JsonTreeWriter com.google.gson.internal.bind.JsonTreeWriter = new com.google.gson.internal.bind.JsonTreeWriter();\n                    toJson(src, typeOfSrc, writer);\n                    return writer.get();\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[110,4,111,5,115,120,59,62,63,64,67,69,70,6,7,71,143,317,318,186,334,343,196,197,198,199,417,73,230,231,232,233,8,74,75,76,77,78,79,80,255,256,263,265,266,82,9,83,84,85,274,279,86,87,623,652,653,308,654,12,655,644,656,657,658,619,659,660,661,662,663,664,627,620,665],"tindex":"1faef490-3e3f-11e6-8664-d5203228d6f9","method":{"position":"com.google.gson.JsonObject:53","type":"CtMethodImpl","sourcecode":"public void add(java.lang.String property, com.google.gson.JsonElement value) {\n    if (property == null) {\n        {\n            if (value == null) {\n                value = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.put(property, value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"1faef491-3e3f-11e6-8664-03e04f03a640","method":{"position":"com.google.gson.Gson:576","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src != null) {\n        {\n            if (src == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            } else {\n                {\n                    try {\n                        com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                        toJson(src, typeOfSrc, jsonWriter);\n                    } catch (java.io.IOException e) {\n                        throw new com.google.gson.JsonIOException(e);\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:163","type":"CtBinaryOperatorImpl","sourcecode":"a instanceof java.lang.Class"},"failures":[],"tindex":"1faef492-3e3f-11e6-8664-bfe1298a2a44","method":{"position":"com.google.gson.internal.LinkedTreeMap:207","type":"CtMethodImpl","sourcecode":"private boolean equal(java.lang.Object a, java.lang.Object b) {\n    if (!(a instanceof java.lang.reflect.TypeVariable)) {\n        {\n            if (!(b instanceof java.lang.reflect.GenericArrayType)) {\n                {\n                    if (b instanceof java.lang.Class) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            return (a == b) || ((a != null) && (a.equals(b)));\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:86","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonArray"},"failures":[666],"tindex":"1faef493-3e3f-11e6-8664-756828307c40","method":{"position":"com.google.gson.JsonArray:92","type":"CtMethodImpl","sourcecode":"public boolean remove(com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonArray) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (element instanceof com.google.gson.JsonArray) {\n                {\n                    return java.util.List<com.google.gson.JsonElement>.remove(element);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:578","type":"CtBinaryOperatorImpl","sourcecode":"root == null"},"failures":[647],"tindex":"1faf1ba4-3e3f-11e6-8664-f9d4fefb9810","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:429","type":"CtMethodImpl","sourcecode":"private void rotateRight(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root == null) {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivotRight;\n            if (pivotRight != null) {\n                pivotRight.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            } \n            replaceInParent(root, pivot);\n            pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot;\n            root.int = (java.lang.Math.max((right != null ? right.int : 0), (pivotRight != null ? pivotRight.int : 0))) + 1;\n            pivot.int = (java.lang.Math.max(root.int, (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"root"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:602","type":"CtUnaryOperatorImpl","sourcecode":"!(lenient)"},"failures":[],"tindex":"1faf1ba5-3e3f-11e6-8664-afcfe765aff0","method":{"position":"com.google.gson.stream.JsonWriter:234","type":"CtMethodImpl","sourcecode":"public final void setLenient(boolean lenient) {\n    if (!lenient) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (!lenient) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    com.google.gson.stream.JsonWriter.this.boolean = lenient;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"lenient"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:86","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonArray"},"failures":[],"tindex":"1faf1ba6-3e3f-11e6-8664-bf7849d435d8","method":{"position":"com.google.gson.JsonArray:92","type":"CtMethodImpl","sourcecode":"public boolean remove(com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonArray) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (element instanceof com.google.gson.JsonArray) {\n                {\n                    return java.util.List<com.google.gson.JsonElement>.remove(element);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:370","type":"CtBinaryOperatorImpl","sourcecode":"toResolve instanceof java.lang.reflect.WildcardType"},"failures":[],"tindex":"1faf1ba7-3e3f-11e6-8664-9d80cbe2720b","method":{"position":"com.google.gson.internal.$Gson$Types:322","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type resolve(java.lang.reflect.Type context, java.lang.Class<?> contextRawType, java.lang.reflect.Type toResolve) {\n    while (true) {\n        if (toResolve instanceof java.lang.reflect.TypeVariable) {\n            java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(toResolve));\n            toResolve = com.google.gson.internal.$Gson$Types.resolveTypeVariable(context, contextRawType, typeVariable);\n            if (toResolve == typeVariable) {\n                return toResolve;\n            } \n        } else if ((toResolve instanceof java.lang.Class) && (((java.lang.Class<?>)(toResolve)).isArray())) {\n            java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getComponentType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, componentType);\n            return componentType == newComponentType ? original : com.google.gson.internal.$Gson$Types.arrayOf(newComponentType);\n        } else if (toResolve instanceof java.lang.reflect.GenericArrayType) {\n            java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getGenericComponentType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, componentType);\n            return componentType == newComponentType ? original : com.google.gson.internal.$Gson$Types.arrayOf(newComponentType);\n        } else if (toResolve instanceof java.lang.reflect.ParameterizedType) {\n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getOwnerType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, ownerType);\n            boolean boolean = newOwnerType != ownerType;\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getActualTypeArguments();\n            for (int int = 0, int int = args.int ; t < length ; t++) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, args[t]);\n                if (resolvedTypeArgument != (args[t])) {\n                    if (!changed) {\n                        args = args.clone();\n                        changed = true;\n                    } \n                    args[t] = resolvedTypeArgument;\n                } \n            }\n            return changed ? com.google.gson.internal.$Gson$Types.newParameterizedTypeWithOwner(newOwnerType, original.getRawType(), args) : original;\n        } else if (toResolve instanceof java.lang.reflect.WildcardType) {\n            java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(toResolve));\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getLowerBounds();\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getUpperBounds();\n            if ((originalLowerBound.int) == 1) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, originalLowerBound[0]);\n                if (lowerBound != (originalLowerBound[0])) {\n                    return com.google.gson.internal.$Gson$Types.supertypeOf(lowerBound);\n                } \n            } else if ((originalUpperBound.int) == 1) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, originalUpperBound[0]);\n                if (upperBound != (originalUpperBound[0])) {\n                    return com.google.gson.internal.$Gson$Types.subtypeOf(upperBound);\n                } \n            } \n            return original;\n        } else {\n            return toResolve;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"toResolve"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:99","type":"CtVariableReadImpl","sourcecode":"serialization"},"failures":[273,274,275,593,279],"tindex":"1faf42b8-3e3f-11e6-8664-99dec5c9bfad","method":{"position":"com.google.gson.internal.Excluder:96","type":"CtMethodImpl","sourcecode":"public com.google.gson.internal.Excluder withExclusionStrategy(com.google.gson.ExclusionStrategy exclusionStrategy, boolean serialization, boolean deserialization) {\n    if (deserialization) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.Excluder com.google.gson.internal.Excluder = clone();\n            if (serialization) {\n                result.java.util.List<com.google.gson.ExclusionStrategy> = new java.util.ArrayList<com.google.gson.ExclusionStrategy>(java.util.List<com.google.gson.ExclusionStrategy>);\n                result.java.util.List<com.google.gson.ExclusionStrategy>.add(exclusionStrategy);\n            } \n            if (deserialization) {\n                result.java.util.List<com.google.gson.ExclusionStrategy> = new java.util.ArrayList<com.google.gson.ExclusionStrategy>(java.util.List<com.google.gson.ExclusionStrategy>);\n                result.java.util.List<com.google.gson.ExclusionStrategy>.add(exclusionStrategy);\n            } \n            return result;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serialization":"deserialization"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:109","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonPrimitive"},"failures":[],"tindex":"1faf42b9-3e3f-11e6-8664-ddd2261dbdaa","method":{"position":"com.google.gson.internal.LinkedTreeMap:481","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"rawtypes\")\n@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonPrimitive) {\n        {\n            if (o instanceof com.google.gson.JsonPrimitive) {\n                {\n                    if (o instanceof java.util.Map.Entry) {\n                        java.util.Map.Entry java.util.Map.Entry = ((java.util.Map.Entry)(o));\n                        return ((K) == null ? (other.getKey()) == null : K.equals(other.getKey())) && ((V) == null ? (other.getValue()) == null : V.equals(other.getValue()));\n                    } \n                    return false;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[46],"tindex":"1faf42ba-3e3f-11e6-8664-632753250e96","method":{"position":"com.google.gson.Gson:468","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src == null) {\n                return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            return toJsonTree(src, src.getClass());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.FieldNamingPolicy:155","type":"CtUnaryOperatorImpl","sourcecode":"!(java.lang.Character.isUpperCase(firstCharacter))"},"failures":[],"tindex":"1faf69cb-3e3f-11e6-8664-0b9ff36cfedf","method":{"position":"com.google.gson.FieldNamingPolicy:163","type":"CtMethodImpl","sourcecode":"private static java.lang.String modifyString(char firstCharacter, java.lang.String srcString, int indexOfSubstring) {\n    if (!(java.lang.Character.isUpperCase(firstCharacter))) {\n        {\n            if (java.lang.Character.isLetter(firstCharacter)) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return indexOfSubstring < (srcString.length()) ? firstCharacter + (srcString.substring(indexOfSubstring)) : java.lang.String.valueOf(firstCharacter);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"firstCharacter":"firstCharacter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:363","type":"CtUnaryOperatorImpl","sourcecode":"!insert"},"failures":[648],"tindex":"1faf69cc-3e3f-11e6-8664-1998c1f3ee98","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:338","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (insert) {\n        {\n            if (!insert) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    for (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) {\n                        com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                        com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                        int int = left != null ? left.int : 0;\n                        int int = right != null ? right.int : 0;\n                        int int = leftHeight - rightHeight;\n                        if (delta == (-2)) {\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            int int = rightRight != null ? rightRight.int : 0;\n                            int int = rightLeft != null ? rightLeft.int : 0;\n                            int int = rightLeftHeight - rightRightHeight;\n                            if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                                rotateLeft(node);\n                            } else {\n                                assert rightDelta == 1;\n                                rotateRight(right);\n                                rotateLeft(node);\n                            }\n                            if (insert) {\n                                break;\n                            } \n                        } else if (delta == 2) {\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            int int = leftRight != null ? leftRight.int : 0;\n                            int int = leftLeft != null ? leftLeft.int : 0;\n                            int int = leftLeftHeight - leftRightHeight;\n                            if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                                rotateRight(node);\n                            } else {\n                                assert leftDelta == (-1);\n                                rotateLeft(left);\n                                rotateRight(node);\n                            }\n                            if (insert) {\n                                break;\n                            } \n                        } else if (delta == 0) {\n                            node.int = leftHeight + 1;\n                            if (insert) {\n                                break;\n                            } \n                        } else {\n                            assert (delta == (-1)) || (delta == 1);\n                            node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                            if (!insert) {\n                                break;\n                            } \n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"insert"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:109","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonPrimitive"},"failures":[340,667,10],"tindex":"1faf90dd-3e3f-11e6-8664-9d02dd3dae7c","method":{"position":"com.google.gson.JsonArray:329","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonPrimitive) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof com.google.gson.JsonPrimitive) {\n                {\n                    return (o == (com.google.gson.JsonArray.this)) || ((o instanceof com.google.gson.JsonArray) && (((com.google.gson.JsonArray)(o)).java.util.List<com.google.gson.JsonElement>.equals(java.util.List<com.google.gson.JsonElement>)));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:133","type":"CtBinaryOperatorImpl","sourcecode":"(type) instanceof java.lang.reflect.ParameterizedType"},"failures":[104,105,106,107,108,109,4,113,5,116,117,118,120,121,58,62,143,145,146,147,148,149,150,162,163,177,178,188,189,191,192,193,370,195,197,93,381,94,95,96,386,204,410,208,213,214,215,216,217,218,219,220,221,225,226,237,238,239,240,241,242,446,451,97,457,244,99,461,80,250,251,252,253,254,255,256,257,258,259,260,266,507,9,83,84,85,596,20,598,102],"tindex":"1faf90de-3e3f-11e6-8664-8f27b523f02c","method":{"position":"com.google.gson.internal.ConstructorConstructor:128","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nprivate <T>com.google.gson.internal.ObjectConstructor<T> newDefaultImplementationConstructor(final java.lang.reflect.Type type, java.lang.Class<? super T> rawType) {\n    if (type instanceof java.lang.reflect.ParameterizedType) {\n        {\n            if (java.util.Collection.java.util.Collection.java.lang.Class.isAssignableFrom(rawType)) {\n                if (java.util.SortedSet.java.util.SortedSet.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.TreeSet<java.lang.Object>()));\n                        }\n                    };\n                } else if (java.util.EnumSet.java.util.EnumSet.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        @java.lang.SuppressWarnings(value = \"rawtypes\")\n                        public T construct() {\n                            if (type instanceof java.lang.reflect.ParameterizedType) {\n                                java.lang.reflect.Type java.lang.reflect.Type = ((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0];\n                                if (elementType instanceof java.lang.Class) {\n                                    return ((T)(java.util.EnumSet.noneOf(((java.lang.Class)(elementType)))));\n                                } else {\n                                    throw new com.google.gson.JsonIOException((\"Invalid EnumSet type: \" + (type.toString())));\n                                }\n                            } else {\n                                throw new com.google.gson.JsonIOException((\"Invalid EnumSet type: \" + (type.toString())));\n                            }\n                        }\n                    };\n                } else if (java.util.Set.java.util.Set.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedHashSet<java.lang.Object>()));\n                        }\n                    };\n                } else if (java.util.Queue.java.util.Queue.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedList<java.lang.Object>()));\n                        }\n                    };\n                } else {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.ArrayList<java.lang.Object>()));\n                        }\n                    };\n                }\n            } \n            if (java.util.Map.java.util.Map.java.lang.Class.isAssignableFrom(rawType)) {\n                if (java.util.SortedMap.java.util.SortedMap.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.TreeMap<java.lang.Object, java.lang.Object>()));\n                        }\n                    };\n                } else if ((type instanceof java.lang.reflect.ParameterizedType) && (!(java.lang.String.java.lang.String.java.lang.Class.isAssignableFrom(com.google.gson.reflect.TypeToken.get(((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0]).getRawType())))) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedHashMap<java.lang.Object, java.lang.Object>()));\n                        }\n                    };\n                } else {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new com.google.gson.internal.LinkedTreeMap<java.lang.String, java.lang.Object>()));\n                        }\n                    };\n                }\n            } \n            return null;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:246","type":"CtVariableReadImpl","sourcecode":"unlink"},"failures":[233,668,662],"tindex":"1fafb7ef-3e3f-11e6-8664-21f74bbdd5d6","method":{"position":"com.google.gson.internal.LinkedTreeMap:217","type":"CtMethodImpl","sourcecode":"void removeInternal(com.google.gson.internal.LinkedTreeMap.Node<K, V> node, boolean unlink) {\n    if (unlink) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (unlink) {\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            if ((left != null) && (right != null)) {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = (left.int) > (right.int) ? left.last() : right.first();\n                removeInternal(adjacent, false);\n                int int = 0;\n                left = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                if (left != null) {\n                    leftHeight = left.int;\n                    adjacent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = left;\n                    left.com.google.gson.internal.LinkedTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                } \n                int int = 0;\n                right = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                if (right != null) {\n                    rightHeight = right.int;\n                    adjacent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = right;\n                    right.com.google.gson.internal.LinkedTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                } \n                adjacent.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                replaceInParent(node, adjacent);\n                return ;\n            } else if (left != null) {\n                replaceInParent(node, left);\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n            } else if (right != null) {\n                replaceInParent(node, right);\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n            } else {\n                replaceInParent(node, null);\n            }\n            rebalance(originalParent, false);\n            (int)--;\n            (int)++;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"unlink":"unlink"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:360","type":"CtVariableReadImpl","sourcecode":"insert"},"failures":[],"tindex":"1fafdf00-3e3f-11e6-8664-bffb700dd073","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:338","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (insert) {\n        {\n            if (!insert) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    for (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) {\n                        com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                        com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                        int int = left != null ? left.int : 0;\n                        int int = right != null ? right.int : 0;\n                        int int = leftHeight - rightHeight;\n                        if (delta == (-2)) {\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            int int = rightRight != null ? rightRight.int : 0;\n                            int int = rightLeft != null ? rightLeft.int : 0;\n                            int int = rightLeftHeight - rightRightHeight;\n                            if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                                rotateLeft(node);\n                            } else {\n                                assert rightDelta == 1;\n                                rotateRight(right);\n                                rotateLeft(node);\n                            }\n                            if (insert) {\n                                break;\n                            } \n                        } else if (delta == 2) {\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            int int = leftRight != null ? leftRight.int : 0;\n                            int int = leftLeft != null ? leftLeft.int : 0;\n                            int int = leftLeftHeight - leftRightHeight;\n                            if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                                rotateRight(node);\n                            } else {\n                                assert leftDelta == (-1);\n                                rotateLeft(left);\n                                rotateRight(node);\n                            }\n                            if (insert) {\n                                break;\n                            } \n                        } else if (delta == 0) {\n                            node.int = leftHeight + 1;\n                            if (insert) {\n                                break;\n                            } \n                        } else {\n                            assert (delta == (-1)) || (delta == 1);\n                            node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                            if (!insert) {\n                                break;\n                            } \n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"insert"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[],"tindex":"1fb00611-3e3f-11e6-8664-9fff56c8c7c9","method":{"position":"com.google.gson.Gson:576","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src != null) {\n        {\n            if (src == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            } else {\n                {\n                    try {\n                        com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                        toJson(src, typeOfSrc, jsonWriter);\n                    } catch (java.io.IOException e) {\n                        throw new com.google.gson.JsonIOException(e);\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"1fb00612-3e3f-11e6-8664-7da9fb2648ab","method":{"position":"com.google.gson.Gson:591","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = getAdapter(com.google.gson.reflect.TypeToken.get(typeOfSrc));\n            boolean boolean = writer.isLenient();\n            writer.setLenient(true);\n            boolean boolean = writer.isHtmlSafe();\n            writer.setHtmlSafe(boolean);\n            boolean boolean = writer.getSerializeNulls();\n            writer.setSerializeNulls(boolean);\n            try {\n                ((com.google.gson.TypeAdapter<java.lang.Object>)(adapter)).write(writer, src);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            } finally {\n                writer.setLenient(oldLenient);\n                writer.setHtmlSafe(oldHtmlSafe);\n                writer.setSerializeNulls(oldSerializeNulls);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:107","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonArray"},"failures":[],"tindex":"1fb00613-3e3f-11e6-8664-a7eef42711bf","method":{"position":"com.google.gson.internal.$Gson$Types:511","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    return (o instanceof java.lang.reflect.GenericArrayType) && (com.google.gson.internal.$Gson$Types.equals(com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl.this, ((java.lang.reflect.GenericArrayType)(o))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:154","type":"CtUnaryOperatorImpl","sourcecode":"!create"},"failures":[110,4,111,5,115,120,59,60,70,669,7,71,143,334,198,390,393,394,398,401,406,413,415,228,229,233,76,77,78,255,256,266,9,83,84,85,274,623,652,653,670,671,672,673,674,675,676,658,659,660,661,662,663,664,627],"tindex":"1fb00614-3e3f-11e6-8664-5bf1722e87a4","method":{"position":"com.google.gson.internal.LinkedTreeMap:121","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedTreeMap.Node<K, V> find(K key, boolean create) {\n    if (!create) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.util.Comparator<? super K> java.util.Comparator<? super K> = com.google.gson.internal.LinkedTreeMap.this.java.util.Comparator<? super K>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            int int = 0;\n            if (nearest != null) {\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                java.lang.Comparable<java.lang.Object> java.lang.Comparable<java.lang.Object> = comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>) ? ((java.lang.Comparable<java.lang.Object>)(key)) : null;\n                while (true) {\n                    comparison = comparableKey != null ? comparableKey.compareTo(nearest.K) : comparator.compare(key, nearest.K);\n                    if (comparison == 0) {\n                        return nearest;\n                    } \n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = comparison < 0 ? nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> : nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    if (child == null) {\n                        break;\n                    } \n                    nearest = child;\n                }\n            } \n            if (!create) {\n                return null;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.this.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            if (nearest == null) {\n                if ((comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>)) && (!(key instanceof java.lang.Comparable))) {\n                    throw new java.lang.ClassCastException(((key.getClass().getName()) + \" is not Comparable\"));\n                } \n                created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n            } else {\n                created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                if (comparison < 0) {\n                    nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                } else {\n                    nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                }\n                rebalance(nearest, true);\n            }\n            (int)++;\n            (int)++;\n            return created;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"create":"create"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[62,63,64,67,317,318,230,231,232,233,8,82,9,83,84,85,659,663,627],"tindex":"1fb02d25-3e3f-11e6-8664-f75340f81b77","method":{"position":"com.google.gson.JsonObject:121","type":"CtMethodImpl","sourcecode":"private com.google.gson.JsonElement createJsonElement(java.lang.Object value) {\n    if (value == null) {\n        {\n            return value == null ? com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull : new com.google.gson.JsonPrimitive(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"1fb02d26-3e3f-11e6-8664-431686e146b5","method":{"position":"com.google.gson.Gson:491","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    com.google.gson.internal.bind.JsonTreeWriter com.google.gson.internal.bind.JsonTreeWriter = new com.google.gson.internal.bind.JsonTreeWriter();\n                    toJson(src, typeOfSrc, writer);\n                    return writer.get();\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:180","type":"CtUnaryOperatorImpl","sourcecode":"!(b instanceof java.lang.reflect.GenericArrayType)"},"failures":[],"tindex":"1fb02d27-3e3f-11e6-8664-a1886fb97c1b","method":{"position":"com.google.gson.internal.LinkedTreeMap:207","type":"CtMethodImpl","sourcecode":"private boolean equal(java.lang.Object a, java.lang.Object b) {\n    if (!(a instanceof java.lang.reflect.TypeVariable)) {\n        {\n            if (!(b instanceof java.lang.reflect.GenericArrayType)) {\n                {\n                    if (b instanceof java.lang.Class) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            return (a == b) || ((a != null) && (a.equals(b)));\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:250","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[104,309,105,106,310,107,108,109,110,4,111,112,113,114,5,115,116,117,118,119,120,22,57,311,121,122,123,312,23,58,24,59,60,61,62,63,64,65,25,26,27,66,67,68,28,13,29,124,125,69,126,127,128,129,130,0,131,132,133,1,2,70,134,3,313,135,136,137,138,7,14,15,314,139,140,71,141,142,30,72,31,32,315,16,17,18,316,144,145,146,147,148,149,150,91,317,318,151,152,153,154,155,156,157,158,159,160,161,319,162,320,163,164,33,92,321,165,322,166,19,167,168,169,170,323,171,172,173,174,324,325,175,176,177,178,179,180,181,182,183,184,326,327,185,186,34,328,329,330,35,187,331,332,36,333,334,188,189,335,336,337,338,339,37,340,38,341,190,342,343,344,191,345,346,347,348,349,350,192,351,352,353,354,355,356,357,193,358,359,360,361,362,363,364,365,366,367,368,369,39,370,371,194,40,372,373,374,195,375,376,41,377,378,379,380,196,197,198,199,93,381,94,95,96,382,383,200,201,384,385,386,202,387,42,388,389,390,391,392,393,394,395,396,397,398,203,399,400,401,402,403,404,405,406,204,407,408,409,205,410,206,207,411,412,413,208,414,415,416,417,418,419,73,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,8,420,421,422,234,423,424,235,236,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,242,445,243,446,447,448,449,450,451,452,453,97,454,455,456,457,244,98,458,459,99,460,461,43,462,463,464,465,466,245,246,247,248,249,74,75,76,77,78,79,80,467,81,468,44,250,469,470,251,252,253,254,255,256,257,258,259,260,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,100,261,262,490,491,492,493,494,263,495,264,265,266,267,82,268,269,270,271,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,272,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,9,83,45,84,85,273,592,274,275,593,276,277,278,279,280,281,282,594,86,46,283,284,285,286,87,287,47,595,288,289,596,597,20,598,599,600,290,291,601,602,603,604,292,293,294,295,296,297,298,299,605,88,21,89,48,90,300,301,606,607,302,608,609,303,49,304,610,611,612,305,306,307,613,614,615,308,616,617,618,619,620,621],"tindex":"1fb05438-3e3f-11e6-8664-2b1ed4508222","method":{"position":"com.google.gson.Gson:273","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> floatAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return ((float)(in.nextDouble()));\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    float float = value.floatValue();\n                    checkValidFloatingPoint(floatValue);\n                    out.value(value);\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:199","type":"CtUnaryOperatorImpl","sourcecode":"!(b instanceof java.lang.reflect.TypeVariable)"},"failures":[],"tindex":"1fb05439-3e3f-11e6-8664-f16f7b73ae9a","method":{"position":"com.google.gson.internal.LinkedTreeMap:207","type":"CtMethodImpl","sourcecode":"private boolean equal(java.lang.Object a, java.lang.Object b) {\n    if (!(a instanceof java.lang.reflect.TypeVariable)) {\n        {\n            if (!(b instanceof java.lang.reflect.GenericArrayType)) {\n                {\n                    if (b instanceof java.lang.Class) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            return (a == b) || ((a != null) && (a.equals(b)));\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"1fb0543a-3e3f-11e6-8664-fd6f25403021","method":{"position":"com.google.gson.Gson:285","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                {\n                    if (value == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.io.IOException();\n                    } else {\n                        {\n                            if (value == null) {\n                                out.nullValue();\n                                return ;\n                            } \n                            float float = value.floatValue();\n                            checkValidFloatingPoint(floatValue);\n                            out.value(value);\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:305","type":"CtBinaryOperatorImpl","sourcecode":"node != null"},"failures":[],"tindex":"1fb0543b-3e3f-11e6-8664-c717e39fd83c","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:686","type":"CtMethodImpl","sourcecode":"void add(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node) {\n    if (node != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (node != null) {\n                {\n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                    node.int = 1;\n                    if (((int) > 0) && (((int) & 1) == 0)) {\n                        (int)++;\n                        (int)--;\n                        (int)++;\n                    } \n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node;\n                    (int)++;\n                    if (((int) > 0) && (((int) & 1) == 0)) {\n                        (int)++;\n                        (int)--;\n                        (int)++;\n                    } \n                    for (int int = 4 ; ((int) & (scale - 1)) == (scale - 1) ; scale *= 2) {\n                        if ((int) == 0) {\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                            center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left;\n                            center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                            center.int = (right.int) + 1;\n                            left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                            right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                        } else if ((int) == 1) {\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                            center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                            center.int = (right.int) + 1;\n                            right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                            int = 0;\n                        } else if ((int) == 2) {\n                            int = 0;\n                        } \n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"node"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"1fb07b4c-3e3f-11e6-8664-693ca502d28f","method":{"position":"com.google.gson.Gson:285","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                {\n                    if (value == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.io.IOException();\n                    } else {\n                        {\n                            if (value == null) {\n                                out.nullValue();\n                                return ;\n                            } \n                            float float = value.floatValue();\n                            checkValidFloatingPoint(floatValue);\n                            out.value(value);\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:554","type":"CtBinaryOperatorImpl","sourcecode":"(datePattern != null) && (!(\"\".equals(datePattern.trim())))"},"failures":[],"tindex":"1fb07b4d-3e3f-11e6-8664-9b0db6bf0a89","method":{"position":"com.google.gson.GsonBuilder:551","type":"CtMethodImpl","sourcecode":"private void addTypeAdaptersForDate(java.lang.String datePattern, int dateStyle, int timeStyle, java.util.List<com.google.gson.TypeAdapterFactory> factories) {\n    if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n        {\n            if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    com.google.gson.DefaultDateTypeAdapter com.google.gson.DefaultDateTypeAdapter;\n                    if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n                        dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(datePattern);\n                    } else if ((dateStyle != (java.text.DateFormat.java.text.DateFormat.int)) && (timeStyle != (java.text.DateFormat.java.text.DateFormat.int))) {\n                        dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(dateStyle , timeStyle);\n                    } else {\n                        return ;\n                    }\n                    factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.util.Date.java.util.Date.java.lang.Class), dateTypeAdapter));\n                    factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Timestamp.java.sql.Timestamp.java.lang.Class), dateTypeAdapter));\n                    factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Date.java.sql.Date.java.lang.Class), dateTypeAdapter));\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"datePattern":"datePattern"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"1fb0a25e-3e3f-11e6-8664-2b1f3f0b399d","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n@java.lang.Override\nvoid write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            java.lang.Object java.lang.Object = field.get(value);\n            com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n            t.write(writer, fieldValue);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:107","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonArray"},"failures":[],"tindex":"1fb0a25f-3e3f-11e6-8664-8b8f1c4d1fb5","method":{"position":"com.google.gson.internal.LinkedTreeMap:574","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonArray) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (!(o instanceof java.util.Map.Entry)) {\n                return false;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n            if (node == null) {\n                return false;\n            } \n            removeInternal(node, true);\n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:462","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[104,105,108,113,130,635,622,636,637,638,639,640,641,197,488,556,587],"tindex":"1fb0a260-3e3f-11e6-8664-7f2b58dda93b","method":{"position":"com.google.gson.Gson:297","type":"CtMethodImpl","sourcecode":"private void checkValidFloatingPoint(double value) {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                throw new java.lang.IllegalArgumentException(((value + \" is not a valid double value as per JSON specification. To override this\") + \" behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.\"));\n            } \n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[215,217,218,220,221,225,246,247,248],"tindex":"1fb0a261-3e3f-11e6-8664-a520bd9b7dc4","method":{"position":"com.google.gson.FieldNamingPolicy:122","type":"CtMethodImpl","sourcecode":"private static java.lang.String separateCamelCase(java.lang.String name, java.lang.String separator) {\n    if (name == null) {\n        {\n            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            for (int int = 0 ; i < (name.length()) ; i++) {\n                char char = name.charAt(i);\n                if ((java.lang.Character.isUpperCase(character)) && ((translation.length()) != 0)) {\n                    translation.append(separator);\n                } \n                translation.append(character);\n            }\n            return translation.toString();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:244","type":"CtUnaryOperatorImpl","sourcecode":"!(rawType.isInterface())"},"failures":[],"tindex":"1fb0a262-3e3f-11e6-8664-d7055626de16","method":{"position":"com.google.gson.internal.$Gson$Types:226","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type getGenericSupertype(java.lang.reflect.Type context, java.lang.Class<?> rawType, java.lang.Class<?> toResolve) {\n    if (toResolve == rawType) {\n        return context;\n    } \n    if (toResolve.isInterface()) {\n        java.lang.Class<?>[] java.lang.Class<?>[] = rawType.getInterfaces();\n        for (int int = 0, int int = interfaces.int ; i < length ; i++) {\n            if ((interfaces[i]) == toResolve) {\n                return rawType.getGenericInterfaces()[i];\n            } else if (toResolve.isAssignableFrom(interfaces[i])) {\n                return com.google.gson.internal.$Gson$Types.getGenericSupertype(rawType.getGenericInterfaces()[i], interfaces[i], toResolve);\n            } \n        }\n    } \n    if (!(rawType.isInterface())) {\n        while (rawType != (java.lang.Object.java.lang.Object.java.lang.Class)) {\n            java.lang.Class<?> java.lang.Class<?> = rawType.getSuperclass();\n            if (rawSupertype == toResolve) {\n                return rawType.getGenericSuperclass();\n            } else if (toResolve.isAssignableFrom(rawSupertype)) {\n                return com.google.gson.internal.$Gson$Types.getGenericSupertype(rawType.getGenericSuperclass(), rawSupertype, toResolve);\n            } \n            rawType = rawSupertype;\n        }\n    } \n    return toResolve;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"rawType":"toResolve"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:154","type":"CtUnaryOperatorImpl","sourcecode":"!create"},"failures":[647,677,678,679,680,681,682,683,684,648],"tindex":"1fb0c973-3e3f-11e6-8664-15d3ff3f4705","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:131","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedHashTreeMap.Node<K, V> find(K key, boolean create) {\n    if (!create) {\n        {\n            java.util.Comparator<? super K> java.util.Comparator<? super K> = com.google.gson.internal.LinkedHashTreeMap.this.java.util.Comparator<? super K>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[] com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[] = com.google.gson.internal.LinkedHashTreeMap.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[];\n            int int = com.google.gson.internal.LinkedHashTreeMap.secondaryHash(key.hashCode());\n            int int = hash & ((table.int) - 1);\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = table[index];\n            int int = 0;\n            if (nearest != null) {\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                java.lang.Comparable<java.lang.Object> java.lang.Comparable<java.lang.Object> = comparator == (com.google.gson.internal.LinkedHashTreeMap.com.google.gson.internal.LinkedHashTreeMap.java.util.Comparator<java.lang.Comparable>) ? ((java.lang.Comparable<java.lang.Object>)(key)) : null;\n                while (true) {\n                    comparison = comparableKey != null ? comparableKey.compareTo(nearest.K) : comparator.compare(key, nearest.K);\n                    if (comparison == 0) {\n                        return nearest;\n                    } \n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = comparison < 0 ? nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> : nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    if (child == null) {\n                        break;\n                    } \n                    nearest = child;\n                }\n            } \n            if (!create) {\n                return null;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            if (nearest == null) {\n                if ((comparator == (com.google.gson.internal.LinkedHashTreeMap.com.google.gson.internal.LinkedHashTreeMap.java.util.Comparator<java.lang.Comparable>)) && (!(key instanceof java.lang.Comparable))) {\n                    throw new java.lang.ClassCastException(((key.getClass().getName()) + \" is not Comparable\"));\n                } \n                created = new com.google.gson.internal.LinkedHashTreeMap.Node<K, V>(nearest , key , hash , header , header.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>);\n                table[index] = created;\n            } else {\n                created = new com.google.gson.internal.LinkedHashTreeMap.Node<K, V>(nearest , key , hash , header , header.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>);\n                if (comparison < 0) {\n                    nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = created;\n                } else {\n                    nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = created;\n                }\n                rebalance(nearest, true);\n            }\n            if (((int)++) > (int)) {\n                doubleCapacity();\n            } \n            (int)++;\n            return created;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"create":"create"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:92","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof java.util.Iterator"},"failures":[],"tindex":"1fb0c974-3e3f-11e6-8664-939275845461","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:804","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof java.util.Iterator) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (o instanceof java.util.Map.Entry) && ((findByEntry(((java.util.Map.Entry<?, ?>)(o)))) != null);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:85","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[],"tindex":"1fb0c975-3e3f-11e6-8664-cbb9eabcc6f3","method":{"position":"com.google.gson.internal.$Gson$Types:411","type":"CtMethodImpl","sourcecode":"private static int indexOf(java.lang.Object[] array, java.lang.Object toFind) {\n    for (int int = 0 ; i < (array.int) ; i++) {\n        if (toFind.equals(array[i])) {\n            return i;\n        } \n    }\n    throw new java.util.NoSuchElementException();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"toFind"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:501","type":"CtBinaryOperatorImpl","sourcecode":"typeAdapter instanceof com.google.gson.TypeAdapter<?>"},"failures":[],"tindex":"1fb0f086-3e3f-11e6-8664-9779c6f1abd3","method":{"position":"com.google.gson.TreeTypeAdapter:103","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newTypeHierarchyFactory(java.lang.Class<?> hierarchyType, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (typeAdapter instanceof com.google.gson.InstanceCreator<?>) {\n                {\n                    return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , null , false , hierarchyType);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[],"tindex":"1fb0f087-3e3f-11e6-8664-370b5473521b","method":{"position":"com.google.gson.FieldNamingPolicy:137","type":"CtMethodImpl","sourcecode":"private static java.lang.String upperCaseFirstLetter(java.lang.String name) {\n    if (name == null) {\n        {\n            if (name == null) {\n                {\n                    java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n                    int int = 0;\n                    char char = name.charAt(index);\n                    while (index < ((name.length()) - 1)) {\n                        if (java.lang.Character.isLetter(firstCharacter)) {\n                            break;\n                        } \n                        fieldNameBuilder.append(firstCharacter);\n                        firstCharacter = name.charAt((++index));\n                    }\n                    if (index == (name.length())) {\n                        return fieldNameBuilder.toString();\n                    } \n                    if (!(java.lang.Character.isUpperCase(firstCharacter))) {\n                        java.lang.String java.lang.String = com.google.gson.FieldNamingPolicy.modifyString(java.lang.Character.toUpperCase(firstCharacter), name, (++index));\n                        return fieldNameBuilder.append(modifiedTarget).toString();\n                    } else {\n                        return name;\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:115","type":"CtInvocationImpl","sourcecode":"primitive.isNumber()"},"failures":[334,340,378,196,199,685,686,687,50,688,689,690,691,692,693,694,695,696,697,698,699],"tindex":"1fb0f088-3e3f-11e6-8664-33a771390a8b","method":{"position":"com.google.gson.JsonPrimitive:333","type":"CtMethodImpl","sourcecode":"private static boolean isIntegral(com.google.gson.JsonPrimitive primitive) {\n    if (primitive.isNumber()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((primitive.java.lang.Object) instanceof java.lang.Number) {\n                java.lang.Number java.lang.Number = ((java.lang.Number)(primitive.java.lang.Object));\n                return ((((number instanceof java.math.BigInteger) || (number instanceof java.lang.Long)) || (number instanceof java.lang.Integer)) || (number instanceof java.lang.Short)) || (number instanceof java.lang.Byte);\n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"primitive"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"1fb0f089-3e3f-11e6-8664-f1aff4ac4a65","method":{"position":"com.google.gson.DefaultDateTypeAdapter:94","type":"CtMethodImpl","sourcecode":"private java.util.Date deserializeToDate(com.google.gson.JsonElement json) {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (json == null) {\n                {\n                    synchronized(java.text.DateFormat) {\n                        try {\n                            return java.text.DateFormat.parse(json.getAsString());\n                        } catch (java.text.ParseException ignored) {\n                        }\n                        try {\n                            return java.text.DateFormat.parse(json.getAsString());\n                        } catch (java.text.ParseException ignored) {\n                        }\n                        try {\n                            return java.text.DateFormat.parse(json.getAsString());\n                        } catch (java.text.ParseException e) {\n                            throw new com.google.gson.JsonSyntaxException(json.getAsString() , e);\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:109","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonPrimitive"},"failures":[],"tindex":"1fb0f08a-3e3f-11e6-8664-d531fd821f77","method":{"position":"com.google.gson.JsonArray:329","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonPrimitive) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof com.google.gson.JsonPrimitive) {\n                {\n                    return (o == (com.google.gson.JsonArray.this)) || ((o instanceof com.google.gson.JsonArray) && (((com.google.gson.JsonArray)(o)).java.util.List<com.google.gson.JsonElement>.equals(java.util.List<com.google.gson.JsonElement>)));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[],"tindex":"1fb0f08b-3e3f-11e6-8664-2d19ebdd001d","method":{"position":"com.google.gson.Gson:136","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src != null) {\n        {\n            if (src != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return toJsonTree(src, typeOfSrc);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:109","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonPrimitive"},"failures":[],"tindex":"1fb1179c-3e3f-11e6-8664-792c2238e71e","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:808","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonPrimitive) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (!(o instanceof java.util.Map.Entry)) {\n                return false;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n            if (node == null) {\n                return false;\n            } \n            removeInternal(node, true);\n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"1fb1179d-3e3f-11e6-8664-2ff113f806b5","method":{"position":"com.google.gson.Gson:532","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n                    toJson(src, typeOfSrc, writer);\n                    return writer.toString();\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:578","type":"CtBinaryOperatorImpl","sourcecode":"root == null"},"failures":[647],"tindex":"1fb1179e-3e3f-11e6-8664-b3158677f9c3","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:401","type":"CtMethodImpl","sourcecode":"private void rotateLeft(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root == null) {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivotLeft;\n            if (pivotLeft != null) {\n                pivotLeft.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            } \n            replaceInParent(root, pivot);\n            pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot;\n            root.int = (java.lang.Math.max((left != null ? left.int : 0), (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n            pivot.int = (java.lang.Math.max(root.int, (pivotRight != null ? pivotRight.int : 0))) + 1;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233603923/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"root"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1}],"header":{"groupId":"com.google.code.gson","transformationCount":100,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
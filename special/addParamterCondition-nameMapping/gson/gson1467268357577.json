{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":100,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":342,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":397,"com.google.gson.functional.StringTest.testStringValueDeserialization":591,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":97,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":559,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":468,"com.google.gson.stream.JsonWriterTest.testRepeatedName":394,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":523,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":3,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":149,"com.google.gson.MixedStreamTest.testWriteLenient":234,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":245,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":486,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":327,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":57,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":72,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":282,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":485,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":565,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":213,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":366,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":36,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":532,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":199,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":605,"com.google.gson.functional.ObjectTest.testSingletonLists":336,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":216,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":325,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":343,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":518,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":405,"com.google.gson.stream.JsonWriterTest.testStrings":399,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":143,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":261,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":623,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":127,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":496,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":242,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":568,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":205,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":375,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":599,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":230,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":168,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":560,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":1,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":150,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":238,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":195,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":420,"com.google.gson.functional.EnumTest.testEnumCaseMapping":365,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":82,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":341,"com.google.gson.functional.JsonTreeTest.testToJsonTree":258,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":510,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":173,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":475,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":28,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":68,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":316,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":372,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":443,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":465,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":519,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":180,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":379,"com.google.gson.functional.ObjectTest.testNullDeserialization":503,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":45,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":597,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":491,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":404,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":576,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":524,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":148,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":193,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":386,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":500,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":403,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":452,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":332,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":454,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":278,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":581,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":580,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":126,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":153,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":373,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":546,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":458,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":585,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":269,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":308,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":467,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":544,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":246,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":416,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":557,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":300,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":464,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":163,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":50,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":297,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":154,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":602,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":558,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":339,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":437,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":77,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":283,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":489,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":8,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":424,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":528,"com.google.gson.metrics.PerformanceTest.testDummy":408,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":217,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":301,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":356,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":223,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":132,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":428,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":477,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":89,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":326,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":71,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":324,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":385,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":48,"com.google.gson.functional.CollectionTest.testSetDeserialization":73,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":37,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":53,"com.google.gson.functional.EnumTest.testEnumSet":360,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":430,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":550,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":277,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":131,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithNestedWildcards":251,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":289,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":461,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":266,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":237,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":355,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":561,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":222,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":570,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":190,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":262,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":155,"com.google.gson.functional.MapTest.testHashMapDeserialization":410,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":521,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":616,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":471,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":102,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":229,"com.google.gson.MixedStreamTest.testReadNulls":632,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":9,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":98,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":159,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":481,"com.google.gson.functional.MapTest.testSortedMap":422,"com.google.gson.functional.MapTest.testMapSerialization":293,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":101,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":85,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":555,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":445,"com.google.gson.functional.MapTest.testSerializeMaps":92,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":116,"com.google.gson.functional.MapTest.testComplexKeysSerialization":2,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":429,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":427,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":645,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":450,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":47,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":612,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":188,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":18,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":479,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":611,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":171,"com.google.gson.internal.LinkedHashTreeMapTest.testDoubleCapacity":640,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":4,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":502,"com.google.gson.functional.MapTest.testStringKeyDeserialization":426,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithBasicWildcards":253,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":448,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":135,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":157,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":298,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":527,"com.google.gson.functional.PrettyPrintingTest.testMap":169,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":227,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":522,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":613,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":104,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":128,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":313,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":241,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":374,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":449,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":347,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":592,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":321,"com.google.gson.functional.CollectionTest.testQueueSerialization":377,"com.google.gson.functional.MapTest.testMapSerializationEmpty":425,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":551,"com.google.gson.functional.MapTest.testMapOfMapSerialization":292,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":543,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":466,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":619,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":33,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":152,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":144,"com.google.gson.functional.FieldNamingTest.testIdentity":117,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":344,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":133,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":275,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":504,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":7,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":164,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":257,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":263,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":512,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":239,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":233,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":345,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":482,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":549,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":473,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":80,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":462,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":32,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":284,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":322,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":409,"com.google.gson.functional.MapTest.testMapSubclassSerialization":288,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":579,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":388,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":609,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":431,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":75,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":203,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":402,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":541,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":247,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":456,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":590,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":478,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":354,"com.google.gson.functional.EnumTest.testEnumSubclass":362,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":272,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":243,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":494,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":511,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":384,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":564,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":51,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":16,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":514,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":335,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":547,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":483,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":22,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":79,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":442,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":490,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":552,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":6,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":545,"com.google.gson.stream.JsonWriterTest.testObjectsInArrays":395,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":330,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":484,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":91,"com.google.gson.MixedStreamTest.testWriteNulls":630,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":441,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":600,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":307,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":46,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":608,"com.google.gson.CommentsTest.testParseComments":636,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":139,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":264,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":606,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":64,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":446,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":563,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":84,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":294,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":346,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":232,"com.google.gson.MixedStreamTest.testReadInvalidState":628,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":34,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":67,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":125,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":578,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":86,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":340,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":637,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":451,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithTypeParameters":252,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":61,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":536,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":31,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":120,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":574,"com.google.gson.functional.MapTest.testMapDeserialization":415,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":440,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":323,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":174,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":90,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":177,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":390,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":27,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":290,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":182,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":178,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":19,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":21,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":610,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":39,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":54,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":495,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":11,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":383,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":433,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":317,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":200,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":111,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":334,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":170,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":421,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":643,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":331,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":509,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":141,"com.google.gson.functional.PrimitiveTest.testShortSerialization":577,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":184,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":567,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":197,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":542,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":566,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":40,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":520,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":113,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":202,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":280,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":387,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":412,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":535,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":225,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":273,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":248,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":123,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":189,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":286,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":635,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":274,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":584,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":370,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":109,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":26,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":55,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":134,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":204,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":310,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":407,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":572,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":166,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":136,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":548,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":507,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":488,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":364,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":13,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":299,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":281,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":459,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":382,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":137,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":176,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":121,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":183,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":526,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":162,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":463,"com.google.gson.stream.JsonWriterTest.testNullStringValue":392,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":185,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":470,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":24,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":614,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":515,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":573,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":271,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":158,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":69,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":181,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":361,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":106,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":87,"com.google.gson.functional.MapTest.testGeneralMapField":95,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":487,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":436,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":588,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":226,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":260,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":626,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":328,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":423,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":56,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":311,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":368,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":569,"com.google.gson.MixedStreamTest.testReadMixedStreamed":634,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":417,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":460,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":537,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":161,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":240,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":381,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":215,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":553,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":196,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":221,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":42,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":418,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":351,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":411,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":140,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":587,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":219,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":208,"com.google.gson.stream.JsonWriterTest.testArraysInObjects":393,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":538,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":406,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":119,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":601,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":276,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":453,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":618,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":187,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":146,"com.google.gson.functional.ObjectTest.testNestedDeserialization":508,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":231,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":498,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":103,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":432,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":194,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":586,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":63,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":108,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":419,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":593,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":353,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":156,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":12,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":60,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":249,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":622,"com.google.gson.functional.ObjectTest.testNullSerialization":492,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":15,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":607,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":413,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":295,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":513,"com.google.gson.functional.MapTest.testInterfaceTypeMap":94,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":444,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":228,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":302,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":516,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":363,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":369,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":110,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":625,"com.google.gson.MixedStreamTest.testReadClosed":629,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":312,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":192,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":530,"com.google.gson.MixedStreamTest.testWriteClosed":633,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":105,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":378,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":25,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":337,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":476,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":357,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":23,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":66,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":62,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":270,"com.google.gson.stream.JsonWriterTest.testLongs":641,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":43,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":303,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":338,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":617,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":209,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":556,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":211,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":17,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":380,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":122,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":167,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":29,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":589,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":151,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":256,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":457,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":49,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":304,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":65,"com.google.gson.functional.CollectionTest.testQueueDeserialization":624,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":540,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":554,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":596,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":99,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":124,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":210,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":93,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":501,"com.google.gson.stream.JsonWriterTest.testDeepNestingObjects":398,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":320,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":279,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":506,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":376,"com.google.gson.functional.MapTest.testRawMapSerialization":296,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":401,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":621,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":469,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":371,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":10,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":267,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":0,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":186,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":642,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":306,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":333,"com.google.gson.functional.PrimitiveTest.testByteSerialization":575,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":644,"com.google.gson.ObjectTypeAdapterTest.testSerialize":78,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":107,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":224,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromRawTypes":254,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":525,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":58,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":259,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":114,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":236,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":358,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":594,"com.google.gson.functional.MapTest.testMapWithQuotes":291,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":314,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":533,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":595,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":130,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":160,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":145,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":20,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":582,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":455,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":35,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":179,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":352,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":505,"com.google.gson.internal.LinkedHashTreeMapTest.testDoubleCapacityAllNodesOnLeft":638,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":175,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":118,"com.google.gson.functional.ObjectTest.testEmptyStringDeserialization":493,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":562,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":52,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":309,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":474,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":315,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":59,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":207,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":319,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":571,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":129,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":620,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":439,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":198,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":305,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":329,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":14,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":350,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":212,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":389,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":480,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":201,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":517,"com.google.gson.internal.LinkedHashTreeMapTest.testRemoveRootDoesNotDoubleUnlink":287,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":142,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":497,"com.google.gson.JsonObjectTest.testAddingStringProperties":250,"com.google.gson.functional.ObjectTest.testNestedSerialization":268,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":70,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":367,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":529,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":598,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":218,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":96,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":88,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":165,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":235,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":391,"com.google.gson.stream.JsonWriterTest.testUnicodeLineBreaksEscaped":400,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":265,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":603,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":583,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":434,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":214,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":41,"com.google.gson.GsonBuilderTest.testCreatingMoreThanOnce":81,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":83,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":531,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":38,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":499,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":206,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":348,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":112,"com.google.gson.functional.CollectionTest.testSetSerialization":74,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":627,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":138,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":172,"com.google.gson.functional.StringTest.testStringValueSerialization":349,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":255,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":5,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":30,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":615,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":435,"com.google.gson.MixedStreamTest.testWriteInvalidState":631,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":147,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":534,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":447,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":539,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":76,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":318,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":115,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":44,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":604,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":191,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":285,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":359,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":472,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":244,"com.google.gson.internal.LinkedHashTreeMapTest.testAvlWalker":639,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":414,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":396,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":220,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":438},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:107","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.WildcardType"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78],"tindex":"6ff37b8e-3e8c-11e6-a1a0-9b83d734e229","method":{"position":"com.google.gson.internal.ConstructorConstructor:200","type":"CtMethodImpl","sourcecode":"private <T>com.google.gson.internal.ObjectConstructor<T> newUnsafeAllocator(final java.lang.reflect.Type type, final java.lang.Class<? super T> rawType) {\n    if (type instanceof java.lang.reflect.WildcardType) {\n        {\n            return new com.google.gson.internal.ObjectConstructor<T>() {\n                private final com.google.gson.internal.UnsafeAllocator unsafeAllocator = com.google.gson.internal.UnsafeAllocator.create();\n\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                public T construct() {\n                    try {\n                        java.lang.Object java.lang.Object = com.google.gson.internal.UnsafeAllocator.newInstance(rawType);\n                        return ((T)(newInstance));\n                    } catch (java.lang.Exception e) {\n                        throw new java.lang.RuntimeException((((\"Unable to invoke no-args constructor for \" + type) + \". \") + \"Register an InstanceCreator with Gson for this type may fix this problem.\") , e);\n                    }\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295284/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:232","type":"CtInvocationImpl","sourcecode":"toResolve.isInterface()"},"failures":[],"tindex":"6ff3f0bf-3e8c-11e6-a1a0-a1df2db4c679","method":{"position":"com.google.gson.internal.$Gson$Types:322","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type resolve(java.lang.reflect.Type context, java.lang.Class<?> contextRawType, java.lang.reflect.Type toResolve) {\n    while (true) {\n        if (toResolve instanceof java.lang.reflect.TypeVariable) {\n            java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(toResolve));\n            toResolve = com.google.gson.internal.$Gson$Types.resolveTypeVariable(context, contextRawType, typeVariable);\n            if (toResolve == typeVariable) {\n                return toResolve;\n            } \n        } else if ((toResolve instanceof java.lang.Class) && (((java.lang.Class<?>)(toResolve)).isArray())) {\n            java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getComponentType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, componentType);\n            return componentType == newComponentType ? original : com.google.gson.internal.$Gson$Types.arrayOf(newComponentType);\n        } else if (toResolve instanceof java.lang.reflect.GenericArrayType) {\n            java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getGenericComponentType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, componentType);\n            return componentType == newComponentType ? original : com.google.gson.internal.$Gson$Types.arrayOf(newComponentType);\n        } else if (toResolve instanceof java.lang.reflect.ParameterizedType) {\n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getOwnerType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, ownerType);\n            boolean boolean = newOwnerType != ownerType;\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getActualTypeArguments();\n            for (int int = 0, int int = args.int ; t < length ; t++) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, args[t]);\n                if (resolvedTypeArgument != (args[t])) {\n                    if (!changed) {\n                        args = args.clone();\n                        changed = true;\n                    } \n                    args[t] = resolvedTypeArgument;\n                } \n            }\n            return changed ? com.google.gson.internal.$Gson$Types.newParameterizedTypeWithOwner(newOwnerType, original.getRawType(), args) : original;\n        } else if (toResolve instanceof java.lang.reflect.WildcardType) {\n            java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(toResolve));\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getLowerBounds();\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getUpperBounds();\n            if ((originalLowerBound.int) == 1) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, originalLowerBound[0]);\n                if (lowerBound != (originalLowerBound[0])) {\n                    return com.google.gson.internal.$Gson$Types.supertypeOf(lowerBound);\n                } \n            } else if ((originalUpperBound.int) == 1) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, originalUpperBound[0]);\n                if (upperBound != (originalUpperBound[0])) {\n                    return com.google.gson.internal.$Gson$Types.subtypeOf(upperBound);\n                } \n            } \n            return original;\n        } else {\n            return toResolve;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"contextRawType"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:554","type":"CtBinaryOperatorImpl","sourcecode":"(datePattern != null) && (!(\"\".equals(datePattern.trim())))"},"failures":[79,80,81,82,83,84,85,86,87,88,89,0,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,3,108,4,5,109,6,7,8,9,11,12,13,14,15,16,17,110,111,18,19,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,44,46,130,50,131,132,133,134,51,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,57,58,164,59,60,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,71,221,222,223,224,225,226,227,228,76,77,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243],"tindex":"6ff417d0-3e8c-11e6-a1a0-3b493e54c7de","method":{"position":"com.google.gson.GsonBuilder:551","type":"CtMethodImpl","sourcecode":"private void addTypeAdaptersForDate(java.lang.String datePattern, int dateStyle, int timeStyle, java.util.List<com.google.gson.TypeAdapterFactory> factories) {\n    if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n        {\n            com.google.gson.DefaultDateTypeAdapter com.google.gson.DefaultDateTypeAdapter;\n            if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n                dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(datePattern);\n            } else if ((dateStyle != (java.text.DateFormat.java.text.DateFormat.int)) && (timeStyle != (java.text.DateFormat.java.text.DateFormat.int))) {\n                dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(dateStyle , timeStyle);\n            } else {\n                return ;\n            }\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.util.Date.java.util.Date.java.lang.Class), dateTypeAdapter));\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Timestamp.java.sql.Timestamp.java.lang.Class), dateTypeAdapter));\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Date.java.sql.Date.java.lang.Class), dateTypeAdapter));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295284/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"datePattern":"datePattern"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[107,244,51,57,58,59,60,245,246,247,248,249,233,250],"tindex":"6ff417d1-3e8c-11e6-a1a0-797e8d48c14b","method":{"position":"com.google.gson.JsonObject:78","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.String value) {\n    if (property == null) {\n        {\n            add(property, createJsonElement(value));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295284/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:188","type":"CtBinaryOperatorImpl","sourcecode":"from == null"},"failures":[251,252,253,254],"tindex":"6ff43ee2-3e8c-11e6-a1a0-ffbde9d2c4b9","method":{"position":"com.google.gson.reflect.TypeToken:122","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic boolean isAssignableFrom(java.lang.reflect.Type from) {\n    if (from == null) {\n        {\n            if (from == null) {\n                return false;\n            } \n            if (java.lang.reflect.Type.equals(from)) {\n                return true;\n            } \n            if ((java.lang.reflect.Type) instanceof java.lang.Class<?>) {\n                return java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from));\n            } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.ParameterizedType) {\n                return com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n            } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.GenericArrayType) {\n                return (java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from))) && (com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.GenericArrayType)(java.lang.reflect.Type))));\n            } else {\n                throw com.google.gson.reflect.TypeToken.buildUnexpectedTypeError(java.lang.reflect.Type, java.lang.Class.java.lang.Class.java.lang.Class, java.lang.reflect.ParameterizedType.java.lang.reflect.ParameterizedType.java.lang.Class, java.lang.reflect.GenericArrayType.java.lang.reflect.GenericArrayType.java.lang.Class);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295284/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:115","type":"CtInvocationImpl","sourcecode":"primitive.isNumber()"},"failures":[],"tindex":"6ff43ee3-3e8c-11e6-a1a0-113b22b6230e","method":{"position":"com.google.gson.JsonPrimitive:93","type":"CtMethodImpl","sourcecode":"void setValue(java.lang.Object primitive) {\n    if (primitive.isBoolean()) {\n        {\n            if (primitive.isNumber()) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295284/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (primitive.isNumber()) {\n                        {\n                            if (primitive instanceof java.lang.Character) {\n                                char char = ((java.lang.Character)(primitive)).charValue();\n                                com.google.gson.JsonPrimitive.this.java.lang.Object = java.lang.String.valueOf(c);\n                            } else {\n                                com.google.gson.internal.$Gson$Preconditions.checkArgument(((primitive instanceof java.lang.Number) || (com.google.gson.JsonPrimitive.isPrimitiveOrString(primitive))));\n                                com.google.gson.JsonPrimitive.this.java.lang.Object = primitive;\n                            }\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295284/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295284/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"primitive"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:107","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonArray"},"failures":[],"tindex":"6ff48d04-3e8c-11e6-a1a0-c9ae70b35f81","method":{"position":"com.google.gson.internal.LinkedTreeMap:570","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonNull) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295284/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof com.google.gson.JsonArray) {\n                {\n                    return (o instanceof java.util.Map.Entry) && ((findByEntry(((java.util.Map.Entry<?, ?>)(o)))) != null);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295284/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[83,95,98,100,101,104,255,10,256,21,257,258,23,27,259,260,261,262,263,264,265,266,267,268,269,54,270,271,272,273,274,275,276,171,175,277,207,216,219,224,278,279,72,280,281,282,230,283],"tindex":"6ff4db25-3e8c-11e6-a1a0-3735cdbb0114","method":{"position":"com.google.gson.internal.bind.TypeAdapters:267","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295284/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                {\n                    if (value == null) {\n                        {\n                            out.value(value);\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295284/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.io.IOException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295284/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[40,284,186],"tindex":"6ff50236-3e8c-11e6-a1a0-d9d498d19c8c","method":{"position":"com.google.gson.Gson:532","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295284/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n            toJson(src, typeOfSrc, writer);\n            return writer.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.internal.bind.ObjectTypeAdapter:95","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"6ff50237-3e8c-11e6-a1a0-9764807d0527","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n@java.lang.Override\nvoid write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value == null) {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295284/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.IllegalAccessException();\n            } else {\n                {\n                    java.lang.Object java.lang.Object = field.get(value);\n                    com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n                    t.write(writer, fieldValue);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295284/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:115","type":"CtInvocationImpl","sourcecode":"primitive.isNumber()"},"failures":[],"tindex":"6ff52948-3e8c-11e6-a1a0-636c297661ea","method":{"position":"com.google.gson.JsonPrimitive:93","type":"CtMethodImpl","sourcecode":"void setValue(java.lang.Object primitive) {\n    if (primitive.isBoolean()) {\n        {\n            if (primitive.isNumber()) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295284/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (primitive.isNumber()) {\n                        {\n                            if (primitive instanceof java.lang.Character) {\n                                char char = ((java.lang.Character)(primitive)).charValue();\n                                com.google.gson.JsonPrimitive.this.java.lang.Object = java.lang.String.valueOf(c);\n                            } else {\n                                com.google.gson.internal.$Gson$Preconditions.checkArgument(((primitive instanceof java.lang.Number) || (com.google.gson.JsonPrimitive.isPrimitiveOrString(primitive))));\n                                com.google.gson.JsonPrimitive.this.java.lang.Object = primitive;\n                            }\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295284/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295284/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"primitive"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:726","type":"CtBinaryOperatorImpl","sourcecode":"value == 0"},"failures":[285,286],"tindex":"6ff52949-3e8c-11e6-a1a0-0d701af76880","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:170","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(long value) throws java.io.IOException {\n    if (value == 0) {\n        {\n            if (value == 0) {\n                {\n                    put(new com.google.gson.JsonPrimitive(value));\n                    return com.google.gson.internal.bind.JsonTreeWriter.this;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295284/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295284/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:94","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.Class"},"failures":[],"tindex":"6ff5294a-3e8c-11e6-a1a0-bdea4e0d8003","method":{"position":"com.google.gson.GsonBuilder:447","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\npublic com.google.gson.GsonBuilder registerTypeAdapter(java.lang.reflect.Type type, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof java.lang.Class) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295284/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.$Gson$Preconditions.checkArgument(((((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) || (typeAdapter instanceof com.google.gson.InstanceCreator<?>)) || (typeAdapter instanceof com.google.gson.TypeAdapter<?>)));\n            if (typeAdapter instanceof com.google.gson.InstanceCreator<?>) {\n                java.util.Map<java.lang.reflect.Type, com.google.gson.InstanceCreator<?>>.put(type, ((com.google.gson.InstanceCreator)(typeAdapter)));\n            } \n            if ((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) {\n                com.google.gson.reflect.TypeToken<?> com.google.gson.reflect.TypeToken<?> = com.google.gson.reflect.TypeToken.get(type);\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.TreeTypeAdapter.newFactoryWithMatchRawType(typeToken, typeAdapter));\n            } \n            if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.internal.bind.TypeAdapters.newFactory(com.google.gson.reflect.TypeToken.get(type), ((com.google.gson.TypeAdapter)(typeAdapter))));\n            } \n            return com.google.gson.GsonBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"6ff5294b-3e8c-11e6-a1a0-af425ea7dada","method":{"position":"com.google.gson.Gson:719","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.lang.String json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            if (json == null) {\n                return null;\n            } \n            java.io.StringReader java.io.StringReader = new java.io.StringReader(json);\n            T T = ((T)(fromJson(reader, typeOfT)));\n            return target;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295284/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:350","type":"CtVariableReadImpl","sourcecode":"insert"},"failures":[287],"tindex":"6ff5505c-3e8c-11e6-a1a0-cb9b6a497c05","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:338","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (insert) {\n        {\n            for (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) {\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                int int = left != null ? left.int : 0;\n                int int = right != null ? right.int : 0;\n                int int = leftHeight - rightHeight;\n                if (delta == (-2)) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    int int = rightRight != null ? rightRight.int : 0;\n                    int int = rightLeft != null ? rightLeft.int : 0;\n                    int int = rightLeftHeight - rightRightHeight;\n                    if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                        rotateLeft(node);\n                    } else {\n                        assert rightDelta == 1;\n                        rotateRight(right);\n                        rotateLeft(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 2) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    int int = leftRight != null ? leftRight.int : 0;\n                    int int = leftLeft != null ? leftLeft.int : 0;\n                    int int = leftLeftHeight - leftRightHeight;\n                    if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                        rotateRight(node);\n                    } else {\n                        assert leftDelta == (-1);\n                        rotateLeft(left);\n                        rotateRight(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 0) {\n                    node.int = leftHeight + 1;\n                    if (insert) {\n                        break;\n                    } \n                } else {\n                    assert (delta == (-1)) || (delta == 1);\n                    node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                    if (!insert) {\n                        break;\n                    } \n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295284/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"insert"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:122","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"6ff5505d-3e8c-11e6-a1a0-d3ad0a56a07c","method":{"position":"com.google.gson.internal.Primitives:69","type":"CtMethodImpl","sourcecode":"public static boolean isPrimitive(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.GenericArrayType) {\n        {\n            if (type instanceof java.lang.reflect.ParameterizedType) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295284/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return com.google.gson.internal.Primitives.com.google.gson.internal.Primitives.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.containsKey(type);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295284/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[82,155],"tindex":"6ff5776e-3e8c-11e6-a1a0-b19d41380fbf","method":{"position":"com.google.gson.Gson:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            out.value(value.toString());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295284/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[79,80,82,86,88,288,92,289,290,93,291,292,293,294,94,295,95,96,296,2,297,298,97,98,101,104,255,107,244,299,3,4,7,8,9,10,11,13,14,15,300,111,20,21,301,23,302,27,303,304,305,306,307,308,112,259,260,309,113,114,115,116,117,29,30,31,32,33,34,35,36,37,310,311,312,313,314,315,316,317,318,118,319,320,321,322,323,324,119,42,120,121,325,122,326,327,328,329,330,124,125,43,331,332,333,261,262,44,45,46,47,49,130,131,51,135,136,138,139,140,142,146,334,335,263,336,264,337,338,53,265,266,267,268,339,269,54,55,270,56,340,151,155,159,162,163,341,342,343,344,345,346,347,348,349,165,275,276,350,61,62,63,64,169,170,171,175,176,178,181,182,183,184,185,188,190,191,192,193,194,195,196,197,351,352,198,353,354,355,356,277,357,358,359,67,68,360,361,202,362,363,364,365,366,204,207,208,211,213,216,218,219,69,70,224,367,368,278,279,369,370,371,372,373,374,375,72,376,280,377,378,379,281,380,282,381,74,225,382,226,227,228,75,383,76,77,230,231,384,385,386,387,388,389,283,390,391,392,393,394,395,396,397,398,399,400,401,402,235,237,240,241,403,404,78,405,286,406,407],"tindex":"6ff5776f-3e8c-11e6-a1a0-2394fba9167f","method":{"position":"com.google.gson.stream.JsonWriter:532","type":"CtMethodImpl","sourcecode":"private void string(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295284/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                {\n                    java.lang.String[] java.lang.String[] = boolean ? com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[] : com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[];\n                    java.io.Writer.write(\"\\\"\");\n                    int int = 0;\n                    int int = value.length();\n                    for (int int = 0 ; i < length ; i++) {\n                        char char = value.charAt(i);\n                        java.lang.String java.lang.String;\n                        if (c < 128) {\n                            replacement = replacements[c];\n                            if (replacement == null) {\n                                continue;\n                            } \n                        } else if (c == '\\u2028') {\n                            replacement = \"\\\\u2028\";\n                        } else if (c == '\\u2029') {\n                            replacement = \"\\\\u2029\";\n                        } else {\n                            continue;\n                        }\n                        if (last < i) {\n                            java.io.Writer.write(value, last, (i - last));\n                        } \n                        java.io.Writer.write(replacement);\n                        last = i + 1;\n                    }\n                    if (last < length) {\n                        java.io.Writer.write(value, last, (length - last));\n                    } \n                    java.io.Writer.write(\"\\\"\");\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295284/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.JsonPrimitive:289","type":"CtBinaryOperatorImpl","sourcecode":"(value) == null"},"failures":[],"tindex":"6ff57770-3e8c-11e6-a1a0-2f8679915e25","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n@java.lang.Override\nvoid write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value == null) {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295284/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.IllegalAccessException();\n            } else {\n                {\n                    java.lang.Object java.lang.Object = field.get(value);\n                    com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n                    t.write(writer, fieldValue);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295284/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[198,233],"tindex":"6ff59e81-3e8c-11e6-a1a0-25cd29108504","method":{"position":"com.google.gson.Gson:133","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src) {\n    if (src != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295284/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src == null) {\n                {\n                    if (src == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295284/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            if (src == null) {\n                                {\n                                    return toJsonTree(src);\n                                }\n                            } else {\n                                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295284/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                throw new java.lang.RuntimeException();\n                            }\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295284/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:274","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[408,79,80,81,82,83,84,85,86,87,88,89,0,409,90,91,410,411,288,92,412,413,289,414,290,415,93,416,417,418,419,291,292,293,420,1,421,294,422,94,423,295,95,96,296,424,2,425,426,297,427,428,298,97,98,99,100,101,102,103,104,105,106,255,107,244,429,430,299,431,3,108,4,5,109,6,7,8,9,10,11,12,13,14,15,16,17,300,110,111,18,19,256,21,257,258,432,22,433,301,23,302,24,434,25,26,27,303,28,304,305,435,436,437,306,307,438,439,440,308,112,441,442,443,444,259,445,260,446,447,448,309,449,450,451,113,114,115,116,117,34,452,35,36,37,453,310,311,312,454,38,39,455,456,313,314,457,315,458,316,317,459,460,318,461,40,462,118,463,319,320,321,41,322,464,323,324,465,119,466,42,120,121,467,468,325,469,470,122,471,472,326,123,327,328,473,474,329,330,124,125,43,126,127,331,284,475,332,476,477,333,478,261,479,128,480,481,129,262,44,45,46,47,48,49,130,50,131,132,133,134,51,135,136,137,138,139,140,141,142,143,144,145,146,334,482,483,335,263,336,484,485,264,486,487,337,488,489,338,147,52,490,53,491,492,265,493,494,495,496,148,266,497,267,268,498,499,339,500,501,502,503,269,504,54,55,505,270,506,507,508,149,509,510,150,511,512,513,514,515,516,517,518,56,519,520,340,521,522,523,524,525,526,527,528,529,530,531,532,533,534,151,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,271,550,551,552,152,553,554,555,556,557,558,559,560,272,561,562,563,153,154,564,565,566,567,568,569,570,155,571,572,573,574,575,156,576,577,578,579,580,581,582,157,583,273,584,585,586,158,587,588,274,589,590,159,160,161,162,163,57,58,164,59,60,591,341,342,343,344,345,592,593,346,594,347,595,596,597,348,598,599,349,245,246,247,248,249,600,601,602,165,166,603,275,276,167,350,604,61,62,63,64,65,66,168,169,170,171,172,173,174,175,176,177,605,178,179,180,181,182,606,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,607,351,352,608,198,353,354,355,356,277,199,357,358,359,200,67,201,609,68,360,361,202,362,610,611,363,612,364,365,366,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,69,70,220,71,221,222,223,224,367,368,278,279,72,376,280,613,614,615,616,377,617,378,379,281,618,619,380,620,73,282,381,621,74,622,623,225,624,382,226,227,228,75,383,625,76,77,229,230,231,232,384,233,626,627,385,386,387,388,389,283,391,401,628,629,402,630,631,234,632,235,633,634,635,236,237,238,239,240,636,241,242,243,403,404],"tindex":"6ff59e82-3e8c-11e6-a1a0-79c2fe2b35d8","method":{"position":"com.google.gson.Gson:249","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> doubleAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return in.nextDouble();\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    double double = value.doubleValue();\n                    checkValidFloatingPoint(doubleValue);\n                    out.value(value);\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295284/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[135,136,142,245,246,247,249],"tindex":"6ff5c593-3e8c-11e6-a1a0-41396fdbfbfa","method":{"position":"com.google.gson.JsonObject:89","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Number value) {\n    if (property == null) {\n        {\n            add(property, createJsonElement(value));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295284/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:578","type":"CtBinaryOperatorImpl","sourcecode":"root == null"},"failures":[637],"tindex":"6ff5c594-3e8c-11e6-a1a0-858bc67e3ac4","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:401","type":"CtMethodImpl","sourcecode":"private void rotateLeft(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root == null) {\n        {\n            if (root == null) {\n                {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivotLeft;\n                    if (pivotLeft != null) {\n                        pivotLeft.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n                    } \n                    replaceInParent(root, pivot);\n                    pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n                    root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot;\n                    root.int = (java.lang.Math.max((left != null ? left.int : 0), (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n                    pivot.int = (java.lang.Math.max(root.int, (pivotRight != null ? pivotRight.int : 0))) + 1;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295284/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295284/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"root"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:578","type":"CtBinaryOperatorImpl","sourcecode":"root == null"},"failures":[638,637,639,640],"tindex":"6ff5eca5-3e8c-11e6-a1a0-1b86ec5e82c8","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:626","type":"CtMethodImpl","sourcecode":"void reset(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root == null) {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            for (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root ; n != null ; n = n.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) {\n                n.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = stackTop;\n                stackTop = n;\n            }\n            com.google.gson.internal.LinkedHashTreeMap.AvlIterator.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = stackTop;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295284/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"root"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:578","type":"CtBinaryOperatorImpl","sourcecode":"root == null"},"failures":[],"tindex":"6ff5eca6-3e8c-11e6-a1a0-e71a66ccfc39","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:401","type":"CtMethodImpl","sourcecode":"private void rotateLeft(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root == null) {\n        {\n            if (root == null) {\n                {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivotLeft;\n                    if (pivotLeft != null) {\n                        pivotLeft.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n                    } \n                    replaceInParent(root, pivot);\n                    pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n                    root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot;\n                    root.int = (java.lang.Math.max((left != null ? left.int : 0), (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n                    pivot.int = (java.lang.Math.max(root.int, (pivotRight != null ? pivotRight.int : 0))) + 1;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295284/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295284/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:578","type":"CtBinaryOperatorImpl","sourcecode":"root == null"},"failures":[637],"tindex":"6ff613b7-3e8c-11e6-a1a0-dd66b8c8d970","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:429","type":"CtMethodImpl","sourcecode":"private void rotateRight(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root == null) {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivotRight;\n            if (pivotRight != null) {\n                pivotRight.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            } \n            replaceInParent(root, pivot);\n            pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot;\n            root.int = (java.lang.Math.max((right != null ? right.int : 0), (pivotRight != null ? pivotRight.int : 0))) + 1;\n            pivot.int = (java.lang.Math.max(root.int, (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295284/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"root"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:726","type":"CtBinaryOperatorImpl","sourcecode":"value == 0"},"failures":[463,467,641,242],"tindex":"6ff613b8-3e8c-11e6-a1a0-b1d5357ccbae","method":{"position":"com.google.gson.stream.JsonWriter:476","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(long value) throws java.io.IOException {\n    if (value == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295284/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            writeDeferredName();\n            beforeValue(false);\n            java.io.Writer.write(java.lang.Long.toString(value));\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:213","type":"CtBinaryOperatorImpl","sourcecode":"(indent.length()) == 0"},"failures":[92,168,169,170,171,172,173,174,175,230,396,397,402],"tindex":"6ff613b9-3e8c-11e6-a1a0-57d2519618d9","method":{"position":"com.google.gson.stream.JsonWriter:212","type":"CtMethodImpl","sourcecode":"public final void setIndent(java.lang.String indent) {\n    if ((indent.length()) == 0) {\n        {\n            if ((indent.length()) == 0) {\n                com.google.gson.stream.JsonWriter.this.java.lang.String = null;\n                com.google.gson.stream.JsonWriter.this.java.lang.String = \":\";\n            } else {\n                com.google.gson.stream.JsonWriter.this.java.lang.String = indent;\n                com.google.gson.stream.JsonWriter.this.java.lang.String = \": \";\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295284/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"indent"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:430","type":"CtFieldReadImpl","sourcecode":"serializeNulls"},"failures":[79,80,82,83,86,88,90,288,92,289,290,291,292,293,421,294,94,423,295,95,296,2,425,297,298,97,99,101,255,244,299,3,4,109,7,8,9,10,11,12,13,14,15,300,111,20,256,21,257,258,432,22,433,301,23,302,24,434,27,303,28,304,305,436,437,306,307,438,308,441,259,260,447,309,450,113,114,115,116,117,29,30,31,32,33,34,452,35,36,37,310,311,312,455,313,314,315,316,317,318,40,118,463,319,320,321,322,323,324,119,42,120,121,467,325,122,472,326,327,328,474,329,330,124,125,43,331,284,332,333,261,479,262,44,45,46,47,49,130,131,51,135,136,138,139,140,142,144,145,146,334,335,263,336,264,337,338,53,492,265,495,148,266,267,268,498,339,269,54,55,270,511,513,56,340,528,529,151,536,537,540,543,545,546,549,271,152,272,562,153,154,566,569,155,574,575,156,576,577,578,579,157,273,158,587,274,159,162,163,57,58,164,59,60,341,342,343,344,345,346,347,348,349,165,275,276,350,61,62,63,64,65,66,168,169,170,171,172,173,174,175,178,180,188,190,191,192,193,194,195,196,197,351,352,198,353,354,355,356,277,357,358,359,67,68,360,361,202,362,363,364,365,366,203,204,207,208,211,213,216,218,219,69,70,224,367,368,278,279,369,72,376,280,613,377,617,378,379,281,380,282,381,74,622,225,382,226,227,228,75,383,625,76,77,229,230,231,384,233,626,385,386,387,388,389,283,642,643,644,391,401,402,630,631,234,235,633,237,238,239,240,241,242,243,403,404,645],"tindex":"6ff63aca-3e8c-11e6-a1a0-e9ea4a48ec5a","method":{"position":"com.google.gson.stream.JsonWriter:268","type":"CtMethodImpl","sourcecode":"public final void setSerializeNulls(boolean serializeNulls) {\n    if (serializeNulls) {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = serializeNulls;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295284/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeNulls":"serializeNulls"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[92,436,376,78,405],"tindex":"6ff63acb-3e8c-11e6-a1a0-137461cf7aac","method":{"position":"com.google.gson.internal.bind.ObjectTypeAdapter:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Object value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295284/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            com.google.gson.TypeAdapter<java.lang.Object> com.google.gson.TypeAdapter<java.lang.Object> = ((com.google.gson.TypeAdapter<java.lang.Object>)(com.google.gson.Gson.getAdapter(value.getClass())));\n            if (typeAdapter instanceof com.google.gson.internal.bind.ObjectTypeAdapter) {\n                out.beginObject();\n                out.endObject();\n                return ;\n            } \n            typeAdapter.write(out, value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"6ff661dc-3e8c-11e6-a1a0-2b97395dfcf2","method":{"position":"com.google.gson.internal.bind.TypeAdapters:267","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295284/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                {\n                    if (value == null) {\n                        {\n                            out.value(value);\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295284/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.io.IOException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295284/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:136","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.TypeVariable"},"failures":[],"tindex":"6ff661dd-3e8c-11e6-a1a0-411b19eeb31f","method":{"position":"com.google.gson.internal.$Gson$Types:93","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type canonicalize(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class) {\n        java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(type));\n        return c.isArray() ? new com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl(com.google.gson.internal.$Gson$Types.canonicalize(c.getComponentType())) : c;\n    } else if (type instanceof java.lang.reflect.ParameterizedType) {\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(type));\n        return new com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl(p.getOwnerType() , p.getRawType() , p.getActualTypeArguments());\n    } else if (type instanceof java.lang.reflect.GenericArrayType) {\n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(type));\n        return new com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl(g.getGenericComponentType());\n    } else if (type instanceof java.lang.reflect.WildcardType) {\n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(type));\n        return new com.google.gson.internal.$Gson$Types.WildcardTypeImpl(w.getUpperBounds() , w.getLowerBounds());\n    } else {\n        return type;\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"6ff661de-3e8c-11e6-a1a0-2d4a7a85b218","method":{"position":"com.google.gson.Gson:133","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src) {\n    if (src != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295284/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src == null) {\n                {\n                    if (src == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295284/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            if (src == null) {\n                                {\n                                    return toJsonTree(src);\n                                }\n                            } else {\n                                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295284/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                throw new java.lang.RuntimeException();\n                            }\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295284/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"6ff661df-3e8c-11e6-a1a0-cd7c5c1f5d93","method":{"position":"com.google.gson.stream.JsonWriter:532","type":"CtMethodImpl","sourcecode":"private void string(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295284/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                {\n                    java.lang.String[] java.lang.String[] = boolean ? com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[] : com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[];\n                    java.io.Writer.write(\"\\\"\");\n                    int int = 0;\n                    int int = value.length();\n                    for (int int = 0 ; i < length ; i++) {\n                        char char = value.charAt(i);\n                        java.lang.String java.lang.String;\n                        if (c < 128) {\n                            replacement = replacements[c];\n                            if (replacement == null) {\n                                continue;\n                            } \n                        } else if (c == '\\u2028') {\n                            replacement = \"\\\\u2028\";\n                        } else if (c == '\\u2029') {\n                            replacement = \"\\\\u2029\";\n                        } else {\n                            continue;\n                        }\n                        if (last < i) {\n                            java.io.Writer.write(value, last, (i - last));\n                        } \n                        java.io.Writer.write(replacement);\n                        last = i + 1;\n                    }\n                    if (last < length) {\n                        java.io.Writer.write(value, last, (length - last));\n                    } \n                    java.io.Writer.write(\"\\\"\");\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295284/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1422","type":"CtUnaryOperatorImpl","sourcecode":"!(lenient)"},"failures":[],"tindex":"6ff687f0-3e8c-11e6-a1a0-c1f46590ba1d","method":{"position":"com.google.gson.stream.JsonReader:325","type":"CtMethodImpl","sourcecode":"public final void setLenient(boolean lenient) {\n    if (!lenient) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295284/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.stream.JsonReader.this.boolean = lenient;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"lenient"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[],"tindex":"6ff687f1-3e8c-11e6-a1a0-79ddf6d13f69","method":{"position":"com.google.gson.Gson:468","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src) {\n    if (src == null) {\n        {\n            if (src != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295284/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (src == null) {\n                        return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n                    } \n                    return toJsonTree(src, src.getClass());\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295284/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:113","type":"CtInvocationImpl","sourcecode":"primitive.isBoolean()"},"failures":[],"tindex":"6ff687f2-3e8c-11e6-a1a0-c3dbe7db72cc","method":{"position":"com.google.gson.JsonPrimitive:93","type":"CtMethodImpl","sourcecode":"void setValue(java.lang.Object primitive) {\n    if (primitive.isBoolean()) {\n        {\n            if (primitive.isNumber()) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295284/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (primitive.isNumber()) {\n                        {\n                            if (primitive instanceof java.lang.Character) {\n                                char char = ((java.lang.Character)(primitive)).charValue();\n                                com.google.gson.JsonPrimitive.this.java.lang.Object = java.lang.String.valueOf(c);\n                            } else {\n                                com.google.gson.internal.$Gson$Preconditions.checkArgument(((primitive instanceof java.lang.Number) || (com.google.gson.JsonPrimitive.isPrimitiveOrString(primitive))));\n                                com.google.gson.JsonPrimitive.this.java.lang.Object = primitive;\n                            }\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295284/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295284/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"primitive"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"6ff687f3-3e8c-11e6-a1a0-11747349921d","method":{"position":"com.google.gson.internal.bind.TypeAdapters:245","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295284/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"6ff6af04-3e8c-11e6-a1a0-31cbe6b31418","method":{"position":"com.google.gson.Gson:847","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(com.google.gson.JsonElement json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295284/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:92","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof java.util.Iterator"},"failures":[],"tindex":"6ff6af05-3e8c-11e6-a1a0-6f2c0550ae0b","method":{"position":"com.google.gson.JsonObject:186","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof java.util.Iterator) {\n        {\n            return (o == (com.google.gson.JsonObject.this)) || ((o instanceof com.google.gson.JsonObject) && (((com.google.gson.JsonObject)(o)).com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.equals(com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295284/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:136","type":"CtBinaryOperatorImpl","sourcecode":"(type) instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"6ff6af06-3e8c-11e6-a1a0-ebac9de19226","method":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:74","type":"CtMethodImpl","sourcecode":"private java.lang.reflect.Type getRuntimeTypeIfMoreSpecific(java.lang.reflect.Type type, java.lang.Object value) {\n    if (value instanceof java.lang.reflect.GenericArrayType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295284/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((value != null) && (((type == (java.lang.Object.java.lang.Object.java.lang.Class)) || (type instanceof java.lang.reflect.TypeVariable<?>)) || (type instanceof java.lang.Class<?>))) {\n                type = value.getClass();\n            } \n            return type;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"6ff6af07-3e8c-11e6-a1a0-835f08bd544c","method":{"position":"com.google.gson.Gson:468","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src) {\n    if (src == null) {\n        {\n            if (src != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295284/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (src == null) {\n                        return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n                    } \n                    return toJsonTree(src, src.getClass());\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295284/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"6ff6af08-3e8c-11e6-a1a0-b1e5948cb242","method":{"position":"com.google.gson.Gson:576","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295284/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            try {\n                com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                toJson(src, typeOfSrc, jsonWriter);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:497","type":"CtBinaryOperatorImpl","sourcecode":"(typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)"},"failures":[],"tindex":"6ff6d619-3e8c-11e6-a1a0-b134480a5ae0","method":{"position":"com.google.gson.TreeTypeAdapter:92","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newFactoryWithMatchRawType(com.google.gson.reflect.TypeToken<?> exactType, java.lang.Object typeAdapter) {\n    if ((typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295284/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            boolean boolean = (exactType.getType()) == (exactType.getRawType());\n            return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , exactType , matchRawType , null);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"6ff6d61a-3e8c-11e6-a1a0-770bd8f0bbc0","method":{"position":"com.google.gson.Gson:695","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.lang.String json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295284/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:350","type":"CtVariableReadImpl","sourcecode":"insert"},"failures":[],"tindex":"6ff6d61b-3e8c-11e6-a1a0-31cb8deb85d7","method":{"position":"com.google.gson.internal.LinkedTreeMap:310","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (insert) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295284/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            for (com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>) {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                int int = left != null ? left.int : 0;\n                int int = right != null ? right.int : 0;\n                int int = leftHeight - rightHeight;\n                if (delta == (-2)) {\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    int int = rightRight != null ? rightRight.int : 0;\n                    int int = rightLeft != null ? rightLeft.int : 0;\n                    int int = rightLeftHeight - rightRightHeight;\n                    if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                        rotateLeft(node);\n                    } else {\n                        assert rightDelta == 1;\n                        rotateRight(right);\n                        rotateLeft(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 2) {\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    int int = leftRight != null ? leftRight.int : 0;\n                    int int = leftLeft != null ? leftLeft.int : 0;\n                    int int = leftLeftHeight - leftRightHeight;\n                    if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                        rotateRight(node);\n                    } else {\n                        assert leftDelta == (-1);\n                        rotateLeft(left);\n                        rotateRight(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 0) {\n                    node.int = leftHeight + 1;\n                    if (insert) {\n                        break;\n                    } \n                } else {\n                    assert (delta == (-1)) || (delta == 1);\n                    node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                    if (!insert) {\n                        break;\n                    } \n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"insert"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:198","type":"CtBinaryOperatorImpl","sourcecode":"a instanceof java.lang.reflect.TypeVariable"},"failures":[],"tindex":"6ff6fd2c-3e8c-11e6-a1a0-eff42b5803e9","method":{"position":"com.google.gson.internal.LinkedTreeMap:207","type":"CtMethodImpl","sourcecode":"private boolean equal(java.lang.Object a, java.lang.Object b) {\n    if (a instanceof java.lang.reflect.TypeVariable) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295284/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (a == b) || ((a != null) && (a.equals(b)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:305","type":"CtBinaryOperatorImpl","sourcecode":"node != null"},"failures":[],"tindex":"6ff6fd2d-3e8c-11e6-a1a0-1bce1557ba14","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:686","type":"CtMethodImpl","sourcecode":"void add(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node) {\n    if (node != null) {\n        {\n            if (node != null) {\n                {\n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                    node.int = 1;\n                    if (((int) > 0) && (((int) & 1) == 0)) {\n                        (int)++;\n                        (int)--;\n                        (int)++;\n                    } \n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node;\n                    (int)++;\n                    if (((int) > 0) && (((int) & 1) == 0)) {\n                        (int)++;\n                        (int)--;\n                        (int)++;\n                    } \n                    for (int int = 4 ; ((int) & (scale - 1)) == (scale - 1) ; scale *= 2) {\n                        if ((int) == 0) {\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                            center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left;\n                            center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                            center.int = (right.int) + 1;\n                            left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                            right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                        } else if ((int) == 1) {\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                            center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                            center.int = (right.int) + 1;\n                            right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                            int = 0;\n                        } else if ((int) == 2) {\n                            int = 0;\n                        } \n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295284/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295284/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"node"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[],"tindex":"6ff7243e-3e8c-11e6-a1a0-61a4bfe74004","method":{"position":"com.google.gson.Gson:510","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src) {\n    if (src != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295284/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src == null) {\n                return toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull);\n            } \n            return toJson(src, src.getClass());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:154","type":"CtUnaryOperatorImpl","sourcecode":"!create"},"failures":[],"tindex":"6ff7243f-3e8c-11e6-a1a0-dbbe95fde1ea","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:131","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedHashTreeMap.Node<K, V> find(K key, boolean create) {\n    if (!create) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295284/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.util.Comparator<? super K> java.util.Comparator<? super K> = com.google.gson.internal.LinkedHashTreeMap.this.java.util.Comparator<? super K>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[] com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[] = com.google.gson.internal.LinkedHashTreeMap.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[];\n            int int = com.google.gson.internal.LinkedHashTreeMap.secondaryHash(key.hashCode());\n            int int = hash & ((table.int) - 1);\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = table[index];\n            int int = 0;\n            if (nearest != null) {\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                java.lang.Comparable<java.lang.Object> java.lang.Comparable<java.lang.Object> = comparator == (com.google.gson.internal.LinkedHashTreeMap.com.google.gson.internal.LinkedHashTreeMap.java.util.Comparator<java.lang.Comparable>) ? ((java.lang.Comparable<java.lang.Object>)(key)) : null;\n                while (true) {\n                    comparison = comparableKey != null ? comparableKey.compareTo(nearest.K) : comparator.compare(key, nearest.K);\n                    if (comparison == 0) {\n                        return nearest;\n                    } \n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = comparison < 0 ? nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> : nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    if (child == null) {\n                        break;\n                    } \n                    nearest = child;\n                }\n            } \n            if (!create) {\n                return null;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            if (nearest == null) {\n                if ((comparator == (com.google.gson.internal.LinkedHashTreeMap.com.google.gson.internal.LinkedHashTreeMap.java.util.Comparator<java.lang.Comparable>)) && (!(key instanceof java.lang.Comparable))) {\n                    throw new java.lang.ClassCastException(((key.getClass().getName()) + \" is not Comparable\"));\n                } \n                created = new com.google.gson.internal.LinkedHashTreeMap.Node<K, V>(nearest , key , hash , header , header.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>);\n                table[index] = created;\n            } else {\n                created = new com.google.gson.internal.LinkedHashTreeMap.Node<K, V>(nearest , key , hash , header , header.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>);\n                if (comparison < 0) {\n                    nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = created;\n                } else {\n                    nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = created;\n                }\n                rebalance(nearest, true);\n            }\n            if (((int)++) > (int)) {\n                doubleCapacity();\n            } \n            (int)++;\n            return created;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"create":"create"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:120","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonNull"},"failures":[],"tindex":"6ff74b50-3e8c-11e6-a1a0-458ded7a28ab","method":{"position":"com.google.gson.internal.LinkedTreeMap:570","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonNull) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295284/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof com.google.gson.JsonArray) {\n                {\n                    return (o instanceof java.util.Map.Entry) && ((findByEntry(((java.util.Map.Entry<?, ?>)(o)))) != null);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295284/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"6ff77261-3e8c-11e6-a1a0-5d4d95efe20b","method":{"position":"com.google.gson.Gson:133","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src) {\n    if (src != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295284/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src == null) {\n                {\n                    if (src == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295284/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            if (src == null) {\n                                {\n                                    return toJsonTree(src);\n                                }\n                            } else {\n                                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295284/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                throw new java.lang.RuntimeException();\n                            }\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295284/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:218","type":"CtVariableReadImpl","sourcecode":"unlink"},"failures":[],"tindex":"6ff77262-3e8c-11e6-a1a0-d11fbc0bbde0","method":{"position":"com.google.gson.internal.LinkedTreeMap:217","type":"CtMethodImpl","sourcecode":"void removeInternal(com.google.gson.internal.LinkedTreeMap.Node<K, V> node, boolean unlink) {\n    if (unlink) {\n        {\n            if (unlink) {\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            if ((left != null) && (right != null)) {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = (left.int) > (right.int) ? left.last() : right.first();\n                removeInternal(adjacent, false);\n                int int = 0;\n                left = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                if (left != null) {\n                    leftHeight = left.int;\n                    adjacent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = left;\n                    left.com.google.gson.internal.LinkedTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                } \n                int int = 0;\n                right = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                if (right != null) {\n                    rightHeight = right.int;\n                    adjacent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = right;\n                    right.com.google.gson.internal.LinkedTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                } \n                adjacent.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                replaceInParent(node, adjacent);\n                return ;\n            } else if (left != null) {\n                replaceInParent(node, left);\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n            } else if (right != null) {\n                replaceInParent(node, right);\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n            } else {\n                replaceInParent(node, null);\n            }\n            rebalance(originalParent, false);\n            (int)--;\n            (int)++;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295284/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"unlink":"unlink"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:125","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonObject"},"failures":[],"tindex":"6ff79973-3e8c-11e6-a1a0-c9f6728ead58","method":{"position":"com.google.gson.JsonArray:57","type":"CtMethodImpl","sourcecode":"public void add(com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonObject) {\n        {\n            if (element == null) {\n                element = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            java.util.List<com.google.gson.JsonElement>.add(element);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295284/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:726","type":"CtBinaryOperatorImpl","sourcecode":"value == 0"},"failures":[],"tindex":"6ff79974-3e8c-11e6-a1a0-3712c3351632","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:170","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(long value) throws java.io.IOException {\n    if (value == 0) {\n        {\n            if (value == 0) {\n                {\n                    put(new com.google.gson.JsonPrimitive(value));\n                    return com.google.gson.internal.bind.JsonTreeWriter.this;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295284/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295284/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:98","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"6ff7c085-3e8c-11e6-a1a0-ed7228798b8a","method":{"position":"com.google.gson.internal.ConstructorConstructor:128","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nprivate <T>com.google.gson.internal.ObjectConstructor<T> newDefaultImplementationConstructor(final java.lang.reflect.Type type, java.lang.Class<? super T> rawType) {\n    if (type instanceof java.lang.reflect.ParameterizedType) {\n        {\n            if (java.util.Collection.java.util.Collection.java.lang.Class.isAssignableFrom(rawType)) {\n                if (java.util.SortedSet.java.util.SortedSet.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.TreeSet<java.lang.Object>()));\n                        }\n                    };\n                } else if (java.util.EnumSet.java.util.EnumSet.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        @java.lang.SuppressWarnings(value = \"rawtypes\")\n                        public T construct() {\n                            if (type instanceof java.lang.reflect.ParameterizedType) {\n                                java.lang.reflect.Type java.lang.reflect.Type = ((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0];\n                                if (elementType instanceof java.lang.Class) {\n                                    return ((T)(java.util.EnumSet.noneOf(((java.lang.Class)(elementType)))));\n                                } else {\n                                    throw new com.google.gson.JsonIOException((\"Invalid EnumSet type: \" + (type.toString())));\n                                }\n                            } else {\n                                throw new com.google.gson.JsonIOException((\"Invalid EnumSet type: \" + (type.toString())));\n                            }\n                        }\n                    };\n                } else if (java.util.Set.java.util.Set.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedHashSet<java.lang.Object>()));\n                        }\n                    };\n                } else if (java.util.Queue.java.util.Queue.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedList<java.lang.Object>()));\n                        }\n                    };\n                } else {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.ArrayList<java.lang.Object>()));\n                        }\n                    };\n                }\n            } \n            if (java.util.Map.java.util.Map.java.lang.Class.isAssignableFrom(rawType)) {\n                if (java.util.SortedMap.java.util.SortedMap.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.TreeMap<java.lang.Object, java.lang.Object>()));\n                        }\n                    };\n                } else if ((type instanceof java.lang.reflect.ParameterizedType) && (!(java.lang.String.java.lang.String.java.lang.Class.isAssignableFrom(com.google.gson.reflect.TypeToken.get(((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0]).getRawType())))) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedHashMap<java.lang.Object, java.lang.Object>()));\n                        }\n                    };\n                } else {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new com.google.gson.internal.LinkedTreeMap<java.lang.String, java.lang.Object>()));\n                        }\n                    };\n                }\n            } \n            return null;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295284/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[],"tindex":"6ff7e796-3e8c-11e6-a1a0-8bbe12b75d52","method":{"position":"com.google.gson.Gson:133","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src) {\n    if (src != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295284/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src == null) {\n                {\n                    if (src == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295284/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            if (src == null) {\n                                {\n                                    return toJsonTree(src);\n                                }\n                            } else {\n                                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295284/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                throw new java.lang.RuntimeException();\n                            }\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295284/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"6ff7e797-3e8c-11e6-a1a0-4d189d59c4ef","method":{"position":"com.google.gson.internal.bind.TypeAdapters:282","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295284/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"6ff7e798-3e8c-11e6-a1a0-ff847617aacd","method":{"position":"com.google.gson.internal.bind.TypeAdapters:267","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295284/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                {\n                    if (value == null) {\n                        {\n                            out.value(value);\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295284/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.io.IOException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295284/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:127","type":"CtInvocationImpl","sourcecode":"raw.isInterface()"},"failures":[],"tindex":"6ff7e799-3e8c-11e6-a1a0-9f656c2161b7","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:125","type":"CtMethodImpl","sourcecode":"private java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> getBoundFields(com.google.gson.Gson context, com.google.gson.reflect.TypeToken<?> type, java.lang.Class<?> raw) {\n    if (raw.isInterface()) {\n        {\n            java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> = new java.util.LinkedHashMap<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField>();\n            if (raw.isInterface()) {\n                return result;\n            } \n            java.lang.reflect.Type java.lang.reflect.Type = type.getType();\n            while (raw != (java.lang.Object.java.lang.Object.java.lang.Class)) {\n                java.lang.reflect.Field[] java.lang.reflect.Field[] = raw.getDeclaredFields();\n                for (java.lang.reflect.Field java.lang.reflect.Field : fields) {\n                    boolean boolean = excludeField(field, true);\n                    boolean boolean = excludeField(field, false);\n                    if ((!serialize) && (!deserialize)) {\n                        continue;\n                    } \n                    field.setAccessible(true);\n                    java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, field.getGenericType());\n                    com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = createBoundField(context, field, getFieldName(field), com.google.gson.reflect.TypeToken.get(fieldType), serialize, deserialize);\n                    com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = result.put(boundField.java.lang.String, boundField);\n                    if (previous != null) {\n                        throw new java.lang.IllegalArgumentException(((declaredType + \" declares multiple JSON fields named \") + (previous.java.lang.String)));\n                    } \n                }\n                type = com.google.gson.reflect.TypeToken.get(com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, raw.getGenericSuperclass()));\n                raw = type.getRawType();\n            }\n            return result;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295284/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"raw"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonArray:58","type":"CtBinaryOperatorImpl","sourcecode":"element == null"},"failures":[],"tindex":"6ff835ba-3e8c-11e6-a1a0-537ff238ddc2","method":{"position":"com.google.gson.JsonArray:115","type":"CtMethodImpl","sourcecode":"public boolean contains(com.google.gson.JsonElement element) {\n    if (element == null) {\n        {\n            return java.util.List<com.google.gson.JsonElement>.contains(element);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295284/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"6ff835bb-3e8c-11e6-a1a0-b7a08816bd28","method":{"position":"com.google.gson.Gson:871","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295284/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (json == null) {\n                return null;\n            } \n            return ((T)(fromJson(new com.google.gson.internal.bind.JsonTreeReader(json), typeOfT)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.TreeTypeAdapter:55","type":"CtInvocationImpl","sourcecode":"value.isJsonNull()"},"failures":[],"tindex":"6ff835bc-3e8c-11e6-a1a0-d167a8dd45f6","method":{"position":"com.google.gson.internal.bind.TypeAdapters:680","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, com.google.gson.JsonElement value) throws java.io.IOException {\n    if (value.isJsonNull()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295284/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if ((value == null) || (value.isJsonNull())) {\n                out.nullValue();\n            } else if (value.isJsonPrimitive()) {\n                com.google.gson.JsonPrimitive com.google.gson.JsonPrimitive = value.getAsJsonPrimitive();\n                if (primitive.isNumber()) {\n                    out.value(primitive.getAsNumber());\n                } else if (primitive.isBoolean()) {\n                    out.value(primitive.getAsBoolean());\n                } else {\n                    out.value(primitive.getAsString());\n                }\n            } else if (value.isJsonArray()) {\n                out.beginArray();\n                for (com.google.gson.JsonElement com.google.gson.JsonElement : value.getAsJsonArray()) {\n                    write(out, e);\n                }\n                out.endArray();\n            } else if (value.isJsonObject()) {\n                out.beginObject();\n                for (java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> : value.getAsJsonObject().entrySet()) {\n                    out.name(e.getKey());\n                    write(out, e.getValue());\n                }\n                out.endObject();\n            } else {\n                throw new java.lang.IllegalArgumentException((\"Couldn't write \" + (value.getClass())));\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:305","type":"CtBinaryOperatorImpl","sourcecode":"node != null"},"failures":[],"tindex":"6ff85ccd-3e8c-11e6-a1a0-017d523679be","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:686","type":"CtMethodImpl","sourcecode":"void add(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node) {\n    if (node != null) {\n        {\n            if (node != null) {\n                {\n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                    node.int = 1;\n                    if (((int) > 0) && (((int) & 1) == 0)) {\n                        (int)++;\n                        (int)--;\n                        (int)++;\n                    } \n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node;\n                    (int)++;\n                    if (((int) > 0) && (((int) & 1) == 0)) {\n                        (int)++;\n                        (int)--;\n                        (int)++;\n                    } \n                    for (int int = 4 ; ((int) & (scale - 1)) == (scale - 1) ; scale *= 2) {\n                        if ((int) == 0) {\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                            center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left;\n                            center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                            center.int = (right.int) + 1;\n                            left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                            right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                        } else if ((int) == 1) {\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                            center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                            center.int = (right.int) + 1;\n                            right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                            int = 0;\n                        } else if ((int) == 2) {\n                            int = 0;\n                        } \n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295284/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295284/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"node"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:250","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[],"tindex":"6ff883de-3e8c-11e6-a1a0-45e405a0550d","method":{"position":"com.google.gson.Gson:273","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> floatAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295284/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return ((float)(in.nextDouble()));\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    float float = value.floatValue();\n                    checkValidFloatingPoint(floatValue);\n                    out.value(value);\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:103","type":"CtVariableReadImpl","sourcecode":"deserialization"},"failures":[],"tindex":"6ff8aaef-3e8c-11e6-a1a0-2d2010efc09e","method":{"position":"com.google.gson.internal.Excluder:96","type":"CtMethodImpl","sourcecode":"public com.google.gson.internal.Excluder withExclusionStrategy(com.google.gson.ExclusionStrategy exclusionStrategy, boolean serialization, boolean deserialization) {\n    if (serialization) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295284/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.Excluder com.google.gson.internal.Excluder = clone();\n            if (serialization) {\n                result.java.util.List<com.google.gson.ExclusionStrategy> = new java.util.ArrayList<com.google.gson.ExclusionStrategy>(java.util.List<com.google.gson.ExclusionStrategy>);\n                result.java.util.List<com.google.gson.ExclusionStrategy>.add(exclusionStrategy);\n            } \n            if (deserialization) {\n                result.java.util.List<com.google.gson.ExclusionStrategy> = new java.util.ArrayList<com.google.gson.ExclusionStrategy>(java.util.List<com.google.gson.ExclusionStrategy>);\n                result.java.util.List<com.google.gson.ExclusionStrategy>.add(exclusionStrategy);\n            } \n            return result;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deserialization":"serialization"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:103","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"6ff8aaf0-3e8c-11e6-a1a0-e7c7011532be","method":{"position":"com.google.gson.internal.Primitives:69","type":"CtMethodImpl","sourcecode":"public static boolean isPrimitive(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.GenericArrayType) {\n        {\n            if (type instanceof java.lang.reflect.ParameterizedType) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295284/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return com.google.gson.internal.Primitives.com.google.gson.internal.Primitives.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.containsKey(type);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295284/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":67,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
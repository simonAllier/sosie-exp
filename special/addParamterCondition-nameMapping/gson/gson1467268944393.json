{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":146,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":394,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":339,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":90,"com.google.gson.internal.LinkedHashTreeMapTest.testIterationOrder":229,"com.google.gson.stream.JsonWriterTest.testRepeatedName":336,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":0,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":62,"com.google.gson.MixedStreamTest.testWriteLenient":186,"com.google.gson.internal.bind.JsonTreeWriterTest.testPrematureClose":464,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":504,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":479,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":381,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":139,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":312,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":315,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":478,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":38,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":453,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":282,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":35,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":513,"com.google.gson.functional.ObjectTest.testSingletonLists":259,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":41,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":379,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":395,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":344,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":30,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":273,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":74,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":486,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":191,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":170,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":248,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":43,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":75,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":501,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":130,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":180,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":52,"com.google.gson.functional.EnumTest.testEnumCaseMapping":452,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":188,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":393,"com.google.gson.functional.JsonTreeTest.testToJsonTree":219,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":80,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":217,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":355,"com.google.gson.JsonObjectTest.testEqualsNonEmptyObject":215,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreBehindInVersion":527,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":247,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":368,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":205,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":157,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":408,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":253,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":484,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":349,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":443,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":61,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":50,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":328,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":489,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":348,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":389,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":387,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":305,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":73,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":133,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":206,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testDifferentSerializeAndDeserializeField":521,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":210,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":269,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":424,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":378,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":505,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":301,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":128,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":466,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":16,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":296,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":134,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":268,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":420,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":121,"com.google.gson.JsonPrimitiveTest.testEqualsAcrossTypes":222,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":342,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":482,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":7,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":198,"com.google.gson.internal.LinkedHashTreeMapTest.testEmptyStringValues":228,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":42,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":234,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":242,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":14,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":18,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":115,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":277,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":11,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":377,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":327,"com.google.gson.JsonArrayTest.testEqualsNonEmptyArray":213,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":476,"com.google.gson.functional.CollectionTest.testSetDeserialization":509,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":283,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":263,"com.google.gson.functional.EnumTest.testEnumSet":448,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":194,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":17,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":285,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":265,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":179,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":241,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":13,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":47,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":274,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":135,"com.google.gson.internal.LinkedHashTreeMapTest.testContainsNullKeyIsAlwaysFalse":231,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":122,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":148,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":91,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":144,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":124,"com.google.gson.functional.MapTest.testMapSerialization":289,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":147,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":111,"com.google.gson.functional.MapTest.testSerializeMaps":85,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":108,"com.google.gson.functional.MapTest.testComplexKeysSerialization":295,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":465,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":428,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":254,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":515,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":165,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":101,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":360,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":78,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":2,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":22,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":137,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":297,"com.google.gson.functional.PrettyPrintingTest.testMap":76,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":118,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":404,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":63,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":150,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":365,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":190,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":207,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":399,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":374,"com.google.gson.functional.MapTest.testMapSerializationEmpty":390,"com.google.gson.functional.CollectionTest.testQueueSerialization":405,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnName":341,"com.google.gson.functional.MapTest.testMapOfMapSerialization":288,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":209,"com.google.gson.stream.JsonWriterTest.testNameWithoutValue":333,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":132,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":311,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":31,"com.google.gson.functional.FieldNamingTest.testIdentity":109,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":396,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":19,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":249,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":491,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":6,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":141,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":258,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":388,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":181,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testSkipNonAnnotatedFields":520,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":129,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":397,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":437,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":502,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":184,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":310,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":375,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":386,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":199,"com.google.gson.functional.MapTest.testMapSubclassSerialization":284,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":303,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":474,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":168,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":318,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":331,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":506,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":496,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":240,"com.google.gson.functional.EnumTest.testEnumSubclass":450,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":438,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":192,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":485,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":430,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":326,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":21,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":97,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":299,"com.google.gson.stream.JsonWriterTest.testTwoNames":332,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":503,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":351,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":183,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":5,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":436,"com.google.gson.stream.JsonWriterTest.testObjectsInArrays":337,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":384,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":477,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":84,"com.google.gson.MixedStreamTest.testWriteNulls":457,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":425,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":422,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":58,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":473,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":26,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":260,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":514,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":322,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":510,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":110,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":291,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":398,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":45,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":280,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":246,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":72,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":445,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":112,"com.google.gson.JsonParserTest.testParseMixedArray":463,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":432,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":224,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":319,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAheadInVersion":525,"com.google.gson.internal.bind.JsonTreeWriterTest.testWriteAfterClose":468,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":208,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":309,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":67,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":441,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":376,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":81,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":83,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":154,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":461,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":236,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":286,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":159,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":155,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":102,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":195,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":498,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":270,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":357,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":92,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":413,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":352,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":369,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":36,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":100,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":298,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":77,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":290,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":455,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":385,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":28,"com.google.gson.functional.PrimitiveTest.testShortSerialization":444,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":161,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":54,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":439,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":370,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":105,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":167,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":313,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":302,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":104,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":446,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":507,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":469,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":70,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":166,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":345,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":519,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":447,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":202,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":4,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":20,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":271,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":472,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":169,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":347,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":361,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":512,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":9,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":23,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":494,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":481,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":451,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":94,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":412,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":314,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":499,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":317,"com.google.gson.InnerClassExclusionStrategyTest.testExcludeInnerClassField":516,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":24,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":153,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":68,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":160,"com.google.gson.internal.LinkedHashTreeMapTest.testClear":226,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":127,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":371,"com.google.gson.stream.JsonWriterTest.testNullStringValue":334,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":162,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":353,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":216,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":138,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":323,"com.google.gson.JsonPrimitiveTest.testEquals":221,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":158,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":449,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":152,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":113,"com.google.gson.functional.MapTest.testGeneralMapField":88,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":480,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":419,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":117,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":325,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":429,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testSkipExplicitlySkippedFields":524,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":382,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":292,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":362,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":392,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":431,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":440,"com.google.gson.MixedStreamTest.testReadMixedStreamed":518,"com.google.gson.ObjectTypeAdapterTest.testDeserializeNullValue":528,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":434,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":126,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":182,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":410,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":40,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":53,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":12,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":276,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":402,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":27,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":212,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":56,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":173,"com.google.gson.stream.JsonWriterTest.testArraysInObjects":335,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":346,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":66,"com.google.gson.internal.LinkedHashTreeMapTest.testEqualsAndHashCode":232,"com.google.gson.JsonPrimitiveTest.testEqualsDoesNotEquateStringAndNonStringTypes":220,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":250,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":164,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":33,"com.google.gson.functional.ObjectTest.testNestedDeserialization":495,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":44,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":358,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":149,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":350,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":51,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":321,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":1,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":239,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":136,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":93,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":143,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":508,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":411,"com.google.gson.functional.ObjectTest.testNullSerialization":356,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":96,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":197,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":293,"com.google.gson.functional.MapTest.testInterfaceTypeMap":87,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":119,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":235,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":201,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":329,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testNeverSkipExplicitlyExposedAnnotatedFields":523,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":99,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":414,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":363,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":49,"com.google.gson.MixedStreamTest.testWriteClosed":459,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":151,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":407,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":261,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":471,"com.google.gson.internal.LinkedHashTreeMapTest.testPutNonComparableKeyFails":230,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":243,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":193,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":416,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":272,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":320,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":279,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":237,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":262,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":406,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":174,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":176,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":98,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":409,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":69,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":46,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":307,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":131,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":218,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":255,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":417,"com.google.gson.internal.LinkedHashTreeMapTest.testPutOverrides":225,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":415,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":435,"com.google.gson.InnerClassExclusionStrategyTest.testIncludeStaticNestedClassField":517,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":145,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":71,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":175,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":86,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":490,"com.google.gson.stream.JsonWriterTest.testDeepNestingObjects":340,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":373,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":306,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":493,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":403,"com.google.gson.functional.MapTest.testRawMapSerialization":294,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":330,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":203,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":266,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":300,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":116,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":163,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":454,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":359,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":421,"com.google.gson.functional.PrimitiveTest.testByteSerialization":442,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":456,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":59,"com.google.gson.ObjectTypeAdapterTest.testSerialize":343,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":103,"com.google.gson.JsonPrimitiveTest.testEqualsIntegerAndBigInteger":460,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":140,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":196,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":106,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":178,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":244,"com.google.gson.functional.MapTest.testMapWithQuotes":287,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":366,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":15,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":125,"com.google.gson.JsonObjectTest.testEqualsOnEmptyObject":214,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":32,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":252,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":364,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":281,"com.google.gson.stream.JsonWriterTest.testLenientWriterPermitsMultipleTopLevelValues":462,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":156,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":238,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":492,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":82,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":65,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":211,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":427,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":483,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":278,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":367,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":142,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":172,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":372,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":64,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":34,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":383,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":418,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":95,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":251,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":177,"com.google.gson.internal.LinkedHashTreeMapTest.testContainsNonComparableKeyReturnsFalse":227,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":304,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAtSameVersion":526,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":37,"com.google.gson.internal.LinkedHashTreeMapTest.testRemoveRootDoesNotDoubleUnlink":233,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testNeverSkipExposedAnnotatedFields":522,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":29,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":200,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":487,"com.google.gson.functional.ObjectTest.testNestedSerialization":267,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":324,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":391,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":433,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":55,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":89,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":114,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":8,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":187,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":470,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":264,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":354,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":39,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":500,"com.google.gson.GsonBuilderTest.testCreatingMoreThanOnce":185,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":189,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":488,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":497,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":171,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":204,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":400,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":123,"com.google.gson.functional.CollectionTest.testSetSerialization":316,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":511,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":25,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":79,"com.google.gson.functional.StringTest.testStringValueSerialization":401,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":256,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":3,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":308,"com.google.gson.MixedStreamTest.testWriteInvalidState":458,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":60,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":426,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":120,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":275,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":107,"com.google.gson.ObjectTypeAdapterTest.testDeserialize":529,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":57,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":223,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":475,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":48,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":467,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":245,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":380,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":257,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":338,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":10,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":423},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:554","type":"CtBinaryOperatorImpl","sourcecode":"(datePattern != null) && (!(\"\".equals(datePattern.trim())))"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192],"tindex":"cdb85874-3e8d-11e6-9f1f-5d4e95cbecdd","method":{"position":"com.google.gson.GsonBuilder:551","type":"CtMethodImpl","sourcecode":"private void addTypeAdaptersForDate(java.lang.String datePattern, int dateStyle, int timeStyle, java.util.List<com.google.gson.TypeAdapterFactory> factories) {\n    if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n        {\n            com.google.gson.DefaultDateTypeAdapter com.google.gson.DefaultDateTypeAdapter;\n            if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n                dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(datePattern);\n            } else if ((dateStyle != (java.text.DateFormat.java.text.DateFormat.int)) && (timeStyle != (java.text.DateFormat.java.text.DateFormat.int))) {\n                dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(dateStyle , timeStyle);\n            } else {\n                return ;\n            }\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.util.Date.java.util.Date.java.lang.Class), dateTypeAdapter));\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Timestamp.java.sql.Timestamp.java.lang.Class), dateTypeAdapter));\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Date.java.sql.Date.java.lang.Class), dateTypeAdapter));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268057600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"datePattern":"datePattern"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[193,194,195,196,197,198,199],"tindex":"cdb8cda5-3e8d-11e6-9f1f-19f47916c469","method":{"position":"com.google.gson.Gson:285","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268057600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    float float = value.floatValue();\n                    checkValidFloatingPoint(floatValue);\n                    out.value(value);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268057600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[0,2,6,194,200,201,202,203,204,205,206,207,208,209,210,211,212,186],"tindex":"cdb8cda6-3e8d-11e6-9f1f-2bd11ba663d4","method":{"position":"com.google.gson.Gson:261","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268057600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                {\n                    if (value == null) {\n                        {\n                            if (value == null) {\n                                out.nullValue();\n                                return ;\n                            } \n                            double double = value.doubleValue();\n                            checkValidFloatingPoint(doubleValue);\n                            out.value(value);\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268057600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.io.IOException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268057600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"cdb8f4b7-3e8d-11e6-9f1f-853a4d92b3da","method":{"position":"com.google.gson.Gson:261","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268057600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                {\n                    if (value == null) {\n                        {\n                            if (value == null) {\n                                out.nullValue();\n                                return ;\n                            } \n                            double double = value.doubleValue();\n                            checkValidFloatingPoint(doubleValue);\n                            out.value(value);\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268057600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.io.IOException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268057600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"cdb8f4b8-3e8d-11e6-9f1f-c743f537271b","method":{"position":"com.google.gson.Gson:510","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268057600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268057600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (src == null) {\n                        return toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull);\n                    } \n                    return toJson(src, src.getClass());\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"cdb8f4b9-3e8d-11e6-9f1f-19c53b0af3ce","method":{"position":"com.google.gson.Gson:576","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268057600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            if (src == null) {\n                {\n                    if (src == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268057600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new com.google.gson.JsonIOException();\n                    } else {\n                        {\n                            try {\n                                com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                                toJson(src, typeOfSrc, jsonWriter);\n                            } catch (java.io.IOException e) {\n                                throw new com.google.gson.JsonIOException(e);\n                            }\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268057600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:298","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[197,198,208,209,210,199,186],"tindex":"cdb91bca-3e8d-11e6-9f1f-59d1b5741d18","method":{"position":"com.google.gson.Gson:297","type":"CtMethodImpl","sourcecode":"private void checkValidFloatingPoint(double value) {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268057600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                throw new java.lang.IllegalArgumentException(((value + \" is not a valid double value as per JSON specification. To override this\") + \" behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.\"));\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:85","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[],"tindex":"cdb91bcb-3e8d-11e6-9f1f-5b49c15d06f5","method":{"position":"com.google.gson.internal.$Gson$Types:411","type":"CtMethodImpl","sourcecode":"private static int indexOf(java.lang.Object[] array, java.lang.Object toFind) {\n    for (int int = 0 ; i < (array.int) ; i++) {\n        if (toFind.equals(array[i])) {\n            return i;\n        } \n    }\n    throw new java.util.NoSuchElementException();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"toFind"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:244","type":"CtUnaryOperatorImpl","sourcecode":"!(rawType.isInterface())"},"failures":[],"tindex":"cdb91bcc-3e8d-11e6-9f1f-f59caca15d5a","method":{"position":"com.google.gson.internal.$Gson$Types:226","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type getGenericSupertype(java.lang.reflect.Type context, java.lang.Class<?> rawType, java.lang.Class<?> toResolve) {\n    if (toResolve == rawType) {\n        return context;\n    } \n    if (toResolve.isInterface()) {\n        java.lang.Class<?>[] java.lang.Class<?>[] = rawType.getInterfaces();\n        for (int int = 0, int int = interfaces.int ; i < length ; i++) {\n            if ((interfaces[i]) == toResolve) {\n                return rawType.getGenericInterfaces()[i];\n            } else if (toResolve.isAssignableFrom(interfaces[i])) {\n                return com.google.gson.internal.$Gson$Types.getGenericSupertype(rawType.getGenericInterfaces()[i], interfaces[i], toResolve);\n            } \n        }\n    } \n    if (!(rawType.isInterface())) {\n        while (rawType != (java.lang.Object.java.lang.Object.java.lang.Class)) {\n            java.lang.Class<?> java.lang.Class<?> = rawType.getSuperclass();\n            if (rawSupertype == toResolve) {\n                return rawType.getGenericSuperclass();\n            } else if (toResolve.isAssignableFrom(rawSupertype)) {\n                return com.google.gson.internal.$Gson$Types.getGenericSupertype(rawType.getGenericSuperclass(), rawSupertype, toResolve);\n            } \n            rawType = rawSupertype;\n        }\n    } \n    return toResolve;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"rawType":"rawType"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:452","type":"CtBinaryOperatorImpl","sourcecode":"typeAdapter instanceof com.google.gson.InstanceCreator<?>"},"failures":[],"tindex":"cdb942dd-3e8d-11e6-9f1f-8126015457c9","method":{"position":"com.google.gson.TreeTypeAdapter:103","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newTypeHierarchyFactory(java.lang.Class<?> hierarchyType, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof com.google.gson.InstanceCreator<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268057600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , null , false , hierarchyType);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[],"tindex":"cdb942de-3e8d-11e6-9f1f-57659e87b412","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:132","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter name(java.lang.String name) throws java.io.IOException {\n    if (name == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268057600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if ((java.util.List<com.google.gson.JsonElement>.isEmpty()) || ((java.lang.String) != null)) {\n                throw new java.lang.IllegalStateException();\n            } \n            com.google.gson.JsonElement com.google.gson.JsonElement = peek();\n            if (element instanceof com.google.gson.JsonObject) {\n                java.lang.String = name;\n                return com.google.gson.internal.bind.JsonTreeWriter.this;\n            } \n            throw new java.lang.IllegalStateException();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:113","type":"CtInvocationImpl","sourcecode":"primitive.isBoolean()"},"failures":[],"tindex":"cdb969ef-3e8d-11e6-9f1f-992ccc880e72","method":{"position":"com.google.gson.JsonPrimitive:93","type":"CtMethodImpl","sourcecode":"void setValue(java.lang.Object primitive) {\n    if (primitive.isBoolean()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268057600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (primitive instanceof java.lang.Character) {\n                char char = ((java.lang.Character)(primitive)).charValue();\n                com.google.gson.JsonPrimitive.this.java.lang.Object = java.lang.String.valueOf(c);\n            } else {\n                com.google.gson.internal.$Gson$Preconditions.checkArgument(((primitive instanceof java.lang.Number) || (com.google.gson.JsonPrimitive.isPrimitiveOrString(primitive))));\n                com.google.gson.JsonPrimitive.this.java.lang.Object = primitive;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"primitive"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:199","type":"CtUnaryOperatorImpl","sourcecode":"!(b instanceof java.lang.reflect.TypeVariable)"},"failures":[],"tindex":"cdb969f0-3e8d-11e6-9f1f-499d7c986b81","method":{"position":"com.google.gson.internal.$Gson$Types:158","type":"CtMethodImpl","sourcecode":"public static boolean equals(java.lang.reflect.Type a, java.lang.reflect.Type b) {\n    if (a == b) {\n        return true;\n    } else if (a instanceof java.lang.Class) {\n        return a.equals(b);\n    } else if (a instanceof java.lang.reflect.ParameterizedType) {\n        if (!(b instanceof java.lang.reflect.ParameterizedType)) {\n            return false;\n        } \n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(a));\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(b));\n        return ((com.google.gson.internal.$Gson$Types.equal(pa.getOwnerType(), pb.getOwnerType())) && (pa.getRawType().equals(pb.getRawType()))) && (java.util.Arrays.equals(pa.getActualTypeArguments(), pb.getActualTypeArguments()));\n    } else if (a instanceof java.lang.reflect.GenericArrayType) {\n        if (!(b instanceof java.lang.reflect.GenericArrayType)) {\n            return false;\n        } \n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(a));\n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(b));\n        return com.google.gson.internal.$Gson$Types.equals(ga.getGenericComponentType(), gb.getGenericComponentType());\n    } else if (a instanceof java.lang.reflect.WildcardType) {\n        if (!(b instanceof java.lang.reflect.WildcardType)) {\n            return false;\n        } \n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(a));\n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(b));\n        return (java.util.Arrays.equals(wa.getUpperBounds(), wb.getUpperBounds())) && (java.util.Arrays.equals(wa.getLowerBounds(), wb.getLowerBounds()));\n    } else if (a instanceof java.lang.reflect.TypeVariable) {\n        if (!(b instanceof java.lang.reflect.TypeVariable)) {\n            return false;\n        } \n        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(a));\n        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(b));\n        return ((va.getGenericDeclaration()) == (vb.getGenericDeclaration())) && (va.getName().equals(vb.getName()));\n    } else {\n        return false;\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:122","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"cdb99101-3e8d-11e6-9f1f-17eb5c83d22f","method":{"position":"com.google.gson.internal.$Gson$Types:117","type":"CtMethodImpl","sourcecode":"public static java.lang.Class<?> getRawType(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class<?>) {\n        return ((java.lang.Class<?>)(type));\n    } else if (type instanceof java.lang.reflect.ParameterizedType) {\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(type));\n        java.lang.reflect.Type java.lang.reflect.Type = parameterizedType.getRawType();\n        com.google.gson.internal.$Gson$Preconditions.checkArgument((rawType instanceof java.lang.Class));\n        return ((java.lang.Class<?>)(rawType));\n    } else if (type instanceof java.lang.reflect.GenericArrayType) {\n        java.lang.reflect.Type java.lang.reflect.Type = ((java.lang.reflect.GenericArrayType)(type)).getGenericComponentType();\n        return java.lang.reflect.Array.newInstance(com.google.gson.internal.$Gson$Types.getRawType(componentType), 0).getClass();\n    } else if (type instanceof java.lang.reflect.TypeVariable) {\n        return java.lang.Object.java.lang.Object.java.lang.Class;\n    } else if (type instanceof java.lang.reflect.WildcardType) {\n        return com.google.gson.internal.$Gson$Types.getRawType(((java.lang.reflect.WildcardType)(type)).getUpperBounds()[0]);\n    } else {\n        java.lang.String java.lang.String = type == null ? \"null\" : type.getClass().getName();\n        throw new java.lang.IllegalArgumentException(((((\"Expected a Class, ParameterizedType, or \" + \"GenericArrayType, but <\") + type) + \"> is of type \") + className));\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:105","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonObject"},"failures":[213,214,215],"tindex":"cdb99102-3e8d-11e6-9f1f-63ea7b6910bf","method":{"position":"com.google.gson.JsonObject:186","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonObject) {\n        {\n            return (o == (com.google.gson.JsonObject.this)) || ((o instanceof com.google.gson.JsonObject) && (((com.google.gson.JsonObject)(o)).com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.equals(com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268057600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[216],"tindex":"cdb9b813-3e8d-11e6-9f1f-e774b5d80be1","method":{"position":"com.google.gson.internal.bind.TypeAdapters:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268057600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:115","type":"CtInvocationImpl","sourcecode":"primitive.isNumber()"},"failures":[217,218,219,220,221,222],"tindex":"cdb9b814-3e8d-11e6-9f1f-0142a4fc64a2","method":{"position":"com.google.gson.JsonPrimitive:333","type":"CtMethodImpl","sourcecode":"private static boolean isIntegral(com.google.gson.JsonPrimitive primitive) {\n    if (primitive.isString()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268057600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (primitive.isNumber()) {\n                {\n                    if ((primitive.java.lang.Object) instanceof java.lang.Number) {\n                        java.lang.Number java.lang.Number = ((java.lang.Number)(primitive.java.lang.Object));\n                        return ((((number instanceof java.math.BigInteger) || (number instanceof java.lang.Long)) || (number instanceof java.lang.Integer)) || (number instanceof java.lang.Short)) || (number instanceof java.lang.Byte);\n                    } \n                    return false;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268057600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"primitive"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[223],"tindex":"cdb9b815-3e8d-11e6-9f1f-23d4047839f6","method":{"position":"com.google.gson.JsonObject:111","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Character value) {\n    if (property == null) {\n        {\n            add(property, createJsonElement(value));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268057600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:167","type":"CtUnaryOperatorImpl","sourcecode":"!create"},"failures":[224,225,226,227,228,229,230,231,232,233],"tindex":"cdb9b816-3e8d-11e6-9f1f-4befbcb33f39","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:131","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedHashTreeMap.Node<K, V> find(K key, boolean create) {\n    if (!create) {\n        {\n            java.util.Comparator<? super K> java.util.Comparator<? super K> = com.google.gson.internal.LinkedHashTreeMap.this.java.util.Comparator<? super K>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[] com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[] = com.google.gson.internal.LinkedHashTreeMap.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[];\n            int int = com.google.gson.internal.LinkedHashTreeMap.secondaryHash(key.hashCode());\n            int int = hash & ((table.int) - 1);\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = table[index];\n            int int = 0;\n            if (nearest != null) {\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                java.lang.Comparable<java.lang.Object> java.lang.Comparable<java.lang.Object> = comparator == (com.google.gson.internal.LinkedHashTreeMap.com.google.gson.internal.LinkedHashTreeMap.java.util.Comparator<java.lang.Comparable>) ? ((java.lang.Comparable<java.lang.Object>)(key)) : null;\n                while (true) {\n                    comparison = comparableKey != null ? comparableKey.compareTo(nearest.K) : comparator.compare(key, nearest.K);\n                    if (comparison == 0) {\n                        return nearest;\n                    } \n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = comparison < 0 ? nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> : nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    if (child == null) {\n                        break;\n                    } \n                    nearest = child;\n                }\n            } \n            if (!create) {\n                return null;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            if (nearest == null) {\n                if ((comparator == (com.google.gson.internal.LinkedHashTreeMap.com.google.gson.internal.LinkedHashTreeMap.java.util.Comparator<java.lang.Comparable>)) && (!(key instanceof java.lang.Comparable))) {\n                    throw new java.lang.ClassCastException(((key.getClass().getName()) + \" is not Comparable\"));\n                } \n                created = new com.google.gson.internal.LinkedHashTreeMap.Node<K, V>(nearest , key , hash , header , header.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>);\n                table[index] = created;\n            } else {\n                created = new com.google.gson.internal.LinkedHashTreeMap.Node<K, V>(nearest , key , hash , header , header.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>);\n                if (comparison < 0) {\n                    nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = created;\n                } else {\n                    nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = created;\n                }\n                rebalance(nearest, true);\n            }\n            if (((int)++) > (int)) {\n                doubleCapacity();\n            } \n            (int)++;\n            return created;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268057600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"create":"create"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:166","type":"CtBinaryOperatorImpl","sourcecode":"from instanceof java.lang.Class<?>"},"failures":[],"tindex":"cdb9df27-3e8d-11e6-9f1f-83801c5e9601","method":{"position":"com.google.gson.reflect.TypeToken:160","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.GenericArrayType to) {\n    if (from instanceof java.lang.Class<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268057600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.reflect.Type java.lang.reflect.Type = to.getGenericComponentType();\n            if (toGenericComponentType instanceof java.lang.reflect.ParameterizedType) {\n                java.lang.reflect.Type java.lang.reflect.Type = from;\n                if (from instanceof java.lang.reflect.GenericArrayType) {\n                    t = ((java.lang.reflect.GenericArrayType)(from)).getGenericComponentType();\n                } else if (from instanceof java.lang.Class<?>) {\n                    java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(from));\n                    while (classType.isArray()) {\n                        classType = classType.getComponentType();\n                    }\n                    t = classType;\n                } \n                return com.google.gson.reflect.TypeToken.isAssignableFrom(t, ((java.lang.reflect.ParameterizedType)(toGenericComponentType)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n            } \n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:141","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.WildcardType"},"failures":[],"tindex":"cdb9df28-3e8d-11e6-9f1f-d70a2569f6f1","method":{"position":"com.google.gson.internal.$Gson$Types:217","type":"CtMethodImpl","sourcecode":"public static java.lang.String typeToString(java.lang.reflect.Type type) {\n    return type instanceof java.lang.Class ? ((java.lang.Class<?>)(type)).getName() : type.toString();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:79","type":"CtUnaryOperatorImpl","sourcecode":"!(json instanceof com.google.gson.JsonPrimitive)"},"failures":[],"tindex":"cdb9df29-3e8d-11e6-9f1f-af5fe2ec8c43","method":{"position":"com.google.gson.Gson:847","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(com.google.gson.JsonElement json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n        {\n            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268057600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[0,2,6,7,234,193,235,236,237,8,21,22,23,25,26,29,33,238,34,239,240,241,242,194,243,244,245,246,247,201,202,203,205,206,207,248,41,43,249,250,251,252,56,57,253,58,254,255,256,59,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,66,276,68,277,278,279,195,280,281,282,283,76,77,78,82,284,85,285,286,86,287,288,289,290,291,87,292,293,88,89,294,295,296,297,90,298,299,91,300,92,94,95,96,301,100,302,303,304,103,305,306,307,308,309,310,311,312,313,314,315,316,105,106,107,108,109,112,114,317,318,319,320,321,322,323,324,120,121,325,124,127,128,326,327,328,144,147,150,153,158,159,160,161,162,165,329,169,172,173,176,179,183,184,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349],"tindex":"cdba063a-3e8d-11e6-9f1f-b1a5ef3b3772","method":{"position":"com.google.gson.stream.JsonWriter:385","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter name(java.lang.String name) throws java.io.IOException {\n    if (name == null) {\n        {\n            if (name == null) {\n                throw new java.lang.NullPointerException(\"name == null\");\n            } \n            if ((java.lang.String) != null) {\n                throw new java.lang.IllegalStateException();\n            } \n            if ((int) == 0) {\n                throw new java.lang.IllegalStateException(\"JsonWriter is closed.\");\n            } \n            java.lang.String = name;\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268057600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"cdbaa27b-3e8d-11e6-9f1f-5be3e453e204","method":{"position":"com.google.gson.Gson:261","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268057600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                {\n                    if (value == null) {\n                        {\n                            if (value == null) {\n                                out.nullValue();\n                                return ;\n                            } \n                            double double = value.doubleValue();\n                            checkValidFloatingPoint(doubleValue);\n                            out.value(value);\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268057600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.io.IOException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268057600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1422","type":"CtUnaryOperatorImpl","sourcecode":"!(lenient)"},"failures":[0,2,4,6,7,350,351,352,234,193,235,353,354,236,237,355,8,15,17,21,22,23,25,26,27,29,31,32,33,238,34,239,240,241,242,194,243,244,245,246,247,201,38,41,43,44,249,250,251,252,47,48,49,50,51,52,53,54,55,56,57,253,58,254,255,256,59,257,258,259,260,261,262,60,263,356,264,357,61,265,266,267,358,268,269,270,271,272,359,273,360,64,274,361,362,363,364,365,366,367,368,369,275,370,65,371,372,373,374,375,376,377,66,276,67,68,378,379,69,380,277,381,382,278,383,384,71,72,279,385,386,387,218,195,388,219,280,389,281,282,283,75,76,77,78,79,80,81,82,83,284,85,285,286,86,287,288,289,290,291,87,292,293,88,89,294,295,390,296,297,90,298,299,91,300,92,94,95,96,301,100,302,303,304,103,391,392,305,306,393,394,395,396,397,398,399,400,401,307,308,309,310,311,402,312,403,313,404,405,406,407,408,314,409,315,410,316,411,104,412,105,106,107,108,109,112,114,317,117,118,119,318,413,414,319,320,321,322,415,416,323,324,120,121,122,417,418,419,420,421,422,423,424,123,425,196,325,426,427,428,124,127,128,326,129,429,327,328,430,197,431,432,198,433,131,208,434,435,209,436,210,437,216,132,438,211,133,134,439,440,135,441,442,136,443,444,445,199,137,446,138,212,447,139,140,141,142,143,144,145,146,147,150,153,155,157,158,159,160,161,162,163,165,448,449,167,450,329,451,452,453,168,169,172,173,176,179,180,181,182,183,184,454,455,456,330,331,457,458,186,187,459,460,461,188,189,462,342,463,190,191,192,464,465,466,467,468,345,346,469,347,348,349,470],"tindex":"cdbaa27c-3e8d-11e6-9f1f-ad492270c135","method":{"position":"com.google.gson.stream.JsonWriter:234","type":"CtMethodImpl","sourcecode":"public final void setLenient(boolean lenient) {\n    if (!lenient) {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = lenient;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268057600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"lenient"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"cdbac98d-3e8d-11e6-9f1f-0999fdf5e8d4","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n@java.lang.Override\nvoid write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268057600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            java.lang.Object java.lang.Object = field.get(value);\n            com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n            t.write(writer, fieldValue);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:92","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof java.util.Iterator"},"failures":[],"tindex":"cdbac98e-3e8d-11e6-9f1f-a11c16b5cf73","method":{"position":"com.google.gson.internal.$Gson$Types:511","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    return (o instanceof java.lang.reflect.GenericArrayType) && (com.google.gson.internal.$Gson$Types.equals(com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl.this, ((java.lang.reflect.GenericArrayType)(o))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"cdbac98f-3e8d-11e6-9f1f-2344d0ff6cf6","method":{"position":"com.google.gson.JsonObject:78","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.String value) {\n    if (value == null) {\n        {\n            if (property == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268057600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    add(property, createJsonElement(value));\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268057600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[193,236,194,41,43,249,250,56,256,258,260,264,265,266,267,269,270,272,273,274,218,195,388,219,78,82,88,300,103,305,306,312,313,314,315,196,325,216,438,446,447,144,146,147,150,172,189,342],"tindex":"cdbac990-3e8d-11e6-9f1f-2bad64556de8","method":{"position":"com.google.gson.internal.bind.TypeAdapters:267","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268057600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[0,1,2,3,4,5,6,7,350,351,352,234,193,235,353,354,471,472,236,237,355,8,9,11,12,13,16,20,21,23,25,238,473,239,240,241,242,194,35,243,244,245,36,246,474,247,39,40,41,42,43,249,250,251,475,252,56,57,253,58,254,476,255,256,258,259,477,478,260,479,480,261,481,482,262,483,263,484,264,485,486,265,487,266,267,488,268,489,490,269,491,270,271,492,272,493,494,495,62,496,273,274,497,498,499,370,500,276,278,279,218,195,388,219,280,281,282,283,77,78,82,86,501,87,293,88,295,90,298,502,503,299,91,300,92,93,94,95,96,97,98,301,99,100,101,102,302,303,304,504,505,506,507,508,103,305,306,307,308,309,310,311,312,313,314,509,315,316,105,106,107,108,109,111,112,113,114,116,318,319,320,321,322,415,416,323,324,120,121,325,510,426,124,126,127,128,326,429,511,327,328,512,139,140,142,143,144,146,147,149,150,151,152,153,154,513,158,159,514,160,162,165,166,329,515,169,170,171,172,173,174,175,176,179,516,517,183,184,330,331,458,459,518,519,520,521,522,523,524,525,526,527,342,343],"tindex":"cdbaf0a1-3e8d-11e6-9f1f-77874a2697b1","method":{"position":"com.google.gson.internal.Excluder:149","type":"CtMethodImpl","sourcecode":"public boolean excludeField(java.lang.reflect.Field field, boolean serialize) {\n    if (field.isSynthetic()) {\n        {\n            if (((int) & (field.getModifiers())) != 0) {\n                return true;\n            } \n            if (((double) != (com.google.gson.internal.Excluder.com.google.gson.internal.Excluder.double)) && (!(isValidVersion(field.getAnnotation(com.google.gson.annotations.Since.com.google.gson.annotations.Since.java.lang.Class), field.getAnnotation(com.google.gson.annotations.Until.com.google.gson.annotations.Until.java.lang.Class))))) {\n                return true;\n            } \n            if (field.isSynthetic()) {\n                return true;\n            } \n            if (boolean) {\n                com.google.gson.annotations.Expose com.google.gson.annotations.Expose = field.getAnnotation(com.google.gson.annotations.Expose.com.google.gson.annotations.Expose.java.lang.Class);\n                if ((annotation == null) || (serialize ? !(annotation.serialize()) : !(annotation.deserialize()))) {\n                    return true;\n                } \n            } \n            if ((!(boolean)) && (isInnerClass(field.getType()))) {\n                return true;\n            } \n            if (isAnonymousOrLocal(field.getType())) {\n                return true;\n            } \n            java.util.List<com.google.gson.ExclusionStrategy> java.util.List<com.google.gson.ExclusionStrategy> = serialize ? java.util.List<com.google.gson.ExclusionStrategy> : java.util.List<com.google.gson.ExclusionStrategy>;\n            if (!(list.isEmpty())) {\n                com.google.gson.FieldAttributes com.google.gson.FieldAttributes = new com.google.gson.FieldAttributes(field);\n                for (com.google.gson.ExclusionStrategy com.google.gson.ExclusionStrategy : list) {\n                    if (exclusionStrategy.shouldSkipField(fieldAttributes)) {\n                        return true;\n                    } \n                }\n            } \n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268057600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"field"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:79","type":"CtUnaryOperatorImpl","sourcecode":"!(json instanceof com.google.gson.JsonPrimitive)"},"failures":[],"tindex":"cdbaf0a2-3e8d-11e6-9f1f-d37beae8a70a","method":{"position":"com.google.gson.Gson:127","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonParseException {\n    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268057600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    } else {\n        {\n            return ((T)(fromJson(json, typeOfT)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:305","type":"CtBinaryOperatorImpl","sourcecode":"node != null"},"failures":[],"tindex":"cdbaf0a3-3e8d-11e6-9f1f-359edeb23311","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:686","type":"CtMethodImpl","sourcecode":"void add(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node) {\n    if (node != null) {\n        {\n            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            node.int = 1;\n            if (((int) > 0) && (((int) & 1) == 0)) {\n                (int)++;\n                (int)--;\n                (int)++;\n            } \n            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node;\n            (int)++;\n            if (((int) > 0) && (((int) & 1) == 0)) {\n                (int)++;\n                (int)--;\n                (int)++;\n            } \n            for (int int = 4 ; ((int) & (scale - 1)) == (scale - 1) ; scale *= 2) {\n                if ((int) == 0) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                    center.int = (right.int) + 1;\n                    left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                } else if ((int) == 1) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                    center.int = (right.int) + 1;\n                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    int = 0;\n                } else if ((int) == 2) {\n                    int = 0;\n                } \n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268057600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"node"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[528,529],"tindex":"cdbb65d4-3e8d-11e6-9f1f-4ff46d567e0b","method":{"position":"com.google.gson.TypeAdapter:268","type":"CtMethodImpl","sourcecode":"public final T fromJson(java.lang.String json) throws java.io.IOException {\n    if (json == null) {\n        {\n            return fromJson(new java.io.StringReader(json));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268057600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"cdbb8ce5-3e8d-11e6-9f1f-51ce00818cd4","method":{"position":"com.google.gson.JsonObject:78","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.String value) {\n    if (value == null) {\n        {\n            if (property == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268057600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    add(property, createJsonElement(value));\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268057600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"cdbb8ce6-3e8d-11e6-9f1f-b31b2eb8a2a5","method":{"position":"com.google.gson.internal.bind.TypeAdapters:282","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268057600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory:43","type":"CtBinaryOperatorImpl","sourcecode":"annotation == null"},"failures":[252,253,58,254,476,255,317,117,119,413,414],"tindex":"cdbb8ce7-3e8d-11e6-9f1f-8fc84808bf0d","method":{"position":"com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory:50","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nstatic com.google.gson.TypeAdapter<?> getTypeAdapter(com.google.gson.internal.ConstructorConstructor constructorConstructor, com.google.gson.Gson gson, com.google.gson.reflect.TypeToken<?> fieldType, com.google.gson.annotations.JsonAdapter annotation) {\n    if (annotation == null) {\n        {\n            java.lang.Class<?> java.lang.Class<?> = annotation.value();\n            if (com.google.gson.TypeAdapter.com.google.gson.TypeAdapter.java.lang.Class.isAssignableFrom(value)) {\n                java.lang.Class<com.google.gson.TypeAdapter<?>> java.lang.Class<com.google.gson.TypeAdapter<?>> = ((java.lang.Class<com.google.gson.TypeAdapter<?>>)(value));\n                return constructorConstructor.get(com.google.gson.reflect.TypeToken.get(typeAdapter)).construct();\n            } \n            if (com.google.gson.TypeAdapterFactory.com.google.gson.TypeAdapterFactory.java.lang.Class.isAssignableFrom(value)) {\n                java.lang.Class<com.google.gson.TypeAdapterFactory> java.lang.Class<com.google.gson.TypeAdapterFactory> = ((java.lang.Class<com.google.gson.TypeAdapterFactory>)(value));\n                return constructorConstructor.get(com.google.gson.reflect.TypeToken.get(typeAdapterFactory)).construct().create(gson, fieldType);\n            } \n            throw new java.lang.IllegalArgumentException(\"@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.\");\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268057600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:547","type":"CtBinaryOperatorImpl","sourcecode":"c == '\\u2029'"},"failures":[],"tindex":"cdbb8ce8-3e8d-11e6-9f1f-93366b2f8f35","method":{"position":"com.google.gson.stream.JsonReader:755","type":"CtMethodImpl","sourcecode":"private boolean isLiteral(char c) throws java.io.IOException {\n    if (c == '\\u2029') {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268057600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            switch (c) {\n                case '/' :\n                case '\\\\' :\n                case ';' :\n                case '#' :\n                case '=' :\n                    checkLenient();\n                case '{' :\n                case '}' :\n                case '[' :\n                case ']' :\n                case ':' :\n                case ',' :\n                case ' ' :\n                case '\\t' :\n                case '\\f' :\n                case '\\r' :\n                case '\\n' :\n                    return false;\n                default :\n                    return true;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"c"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"cdbbdb09-3e8d-11e6-9f1f-2db90b1398bc","method":{"position":"com.google.gson.internal.bind.TypeAdapters:361","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268057600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:459","type":"CtBinaryOperatorImpl","sourcecode":"typeAdapter instanceof com.google.gson.TypeAdapter<?>"},"failures":[],"tindex":"cdbbdb0a-3e8d-11e6-9f1f-15adbf320695","method":{"position":"com.google.gson.TreeTypeAdapter:92","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newFactoryWithMatchRawType(com.google.gson.reflect.TypeToken<?> exactType, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268057600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            boolean boolean = (exactType.getType()) == (exactType.getRawType());\n            return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , exactType , matchRawType , null);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.DateTypeAdapter:86","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"cdbc021b-3e8d-11e6-9f1f-794a7da8433c","method":{"position":"com.google.gson.internal.bind.DateTypeAdapter:85","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized void write(com.google.gson.stream.JsonWriter out, java.util.Date value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268057600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            java.lang.String java.lang.String = java.text.DateFormat.format(value);\n            out.value(dateFormatAsString);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:274","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[],"tindex":"cdbc021c-3e8d-11e6-9f1f-05066fe056c6","method":{"position":"com.google.gson.Gson:249","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> doubleAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268057600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return in.nextDouble();\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    double double = value.doubleValue();\n                    checkValidFloatingPoint(doubleValue);\n                    out.value(value);\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:497","type":"CtBinaryOperatorImpl","sourcecode":"(typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)"},"failures":[],"tindex":"cdbc503d-3e8d-11e6-9f1f-237e0ce753a8","method":{"position":"com.google.gson.TreeTypeAdapter:84","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newFactory(com.google.gson.reflect.TypeToken<?> exactType, java.lang.Object typeAdapter) {\n    if ((typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)) {\n        {\n            return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , exactType , false , null);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268057600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"cdbc503e-3e8d-11e6-9f1f-09a93d5acf88","method":{"position":"com.google.gson.JsonObject:100","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Boolean value) {\n    if (property == null) {\n        {\n            add(property, createJsonElement(value));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268057600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:166","type":"CtBinaryOperatorImpl","sourcecode":"from instanceof java.lang.Class<?>"},"failures":[],"tindex":"cdbc503f-3e8d-11e6-9f1f-cd82c08bbbfb","method":{"position":"com.google.gson.reflect.TypeToken:122","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic boolean isAssignableFrom(java.lang.reflect.Type from) {\n    if (from instanceof java.lang.Class<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268057600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (from == null) {\n                return false;\n            } \n            if (java.lang.reflect.Type.equals(from)) {\n                return true;\n            } \n            if ((java.lang.reflect.Type) instanceof java.lang.Class<?>) {\n                return java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from));\n            } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.ParameterizedType) {\n                return com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n            } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.GenericArrayType) {\n                return (java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from))) && (com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.GenericArrayType)(java.lang.reflect.Type))));\n            } else {\n                throw com.google.gson.reflect.TypeToken.buildUnexpectedTypeError(java.lang.reflect.Type, java.lang.Class.java.lang.Class.java.lang.Class, java.lang.reflect.ParameterizedType.java.lang.reflect.ParameterizedType.java.lang.Class, java.lang.reflect.GenericArrayType.java.lang.reflect.GenericArrayType.java.lang.Class);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[],"tindex":"cdbc7650-3e8d-11e6-9f1f-93e5962cfe5d","method":{"position":"com.google.gson.Gson:552","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src != null) {\n        {\n            if (src != null) {\n                toJson(src, src.getClass(), writer);\n            } else {\n                toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull, writer);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268057600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:105","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonObject"},"failures":[],"tindex":"cdbc7651-3e8d-11e6-9f1f-398ac823b10f","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:808","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268057600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (!(o instanceof java.util.Map.Entry)) {\n                return false;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n            if (node == null) {\n                return false;\n            } \n            removeInternal(node, true);\n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.DateTypeAdapter:86","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"cdbc9d62-3e8d-11e6-9f1f-0d66a7079ed5","method":{"position":"com.google.gson.JsonObject:121","type":"CtMethodImpl","sourcecode":"private com.google.gson.JsonElement createJsonElement(java.lang.Object value) {\n    if (value == null) {\n        {\n            return value == null ? com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull : new com.google.gson.JsonPrimitive(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268057600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"cdbc9d63-3e8d-11e6-9f1f-b958d47811d5","method":{"position":"com.google.gson.Gson:510","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268057600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268057600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (src == null) {\n                        return toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull);\n                    } \n                    return toJson(src, src.getClass());\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"cdbc9d64-3e8d-11e6-9f1f-2d2a39e39a7f","method":{"position":"com.google.gson.Gson:591","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        {\n            com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = getAdapter(com.google.gson.reflect.TypeToken.get(typeOfSrc));\n            boolean boolean = writer.isLenient();\n            writer.setLenient(true);\n            boolean boolean = writer.isHtmlSafe();\n            writer.setHtmlSafe(boolean);\n            boolean boolean = writer.getSerializeNulls();\n            writer.setSerializeNulls(boolean);\n            try {\n                ((com.google.gson.TypeAdapter<java.lang.Object>)(adapter)).write(writer, src);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            } finally {\n                writer.setLenient(oldLenient);\n                writer.setHtmlSafe(oldHtmlSafe);\n                writer.setSerializeNulls(oldSerializeNulls);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268057600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:188","type":"CtBinaryOperatorImpl","sourcecode":"from == null"},"failures":[],"tindex":"cdbc9d65-3e8d-11e6-9f1f-2bad7883e2ce","method":{"position":"com.google.gson.reflect.TypeToken:272","type":"CtMethodImpl","sourcecode":"private static boolean matches(java.lang.reflect.Type from, java.lang.reflect.Type to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeMap) {\n    if (from == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268057600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (to.equals(from)) || ((from instanceof java.lang.reflect.TypeVariable) && (to.equals(typeMap.get(((java.lang.reflect.TypeVariable<?>)(from)).getName()))));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"cdbc9d66-3e8d-11e6-9f1f-f37ddc2ef251","method":{"position":"com.google.gson.internal.bind.DateTypeAdapter:69","type":"CtMethodImpl","sourcecode":"private synchronized java.util.Date deserializeToDate(java.lang.String json) {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268057600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            try {\n                return java.text.DateFormat.parse(json);\n            } catch (java.text.ParseException ignored) {\n            }\n            try {\n                return java.text.DateFormat.parse(json);\n            } catch (java.text.ParseException ignored) {\n            }\n            try {\n                return java.text.DateFormat.parse(json);\n            } catch (java.text.ParseException e) {\n                throw new com.google.gson.JsonSyntaxException(json , e);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"cdbcc477-3e8d-11e6-9f1f-69a1435b9fca","method":{"position":"com.google.gson.Gson:285","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268057600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    float float = value.floatValue();\n                    checkValidFloatingPoint(floatValue);\n                    out.value(value);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268057600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"cdbcc478-3e8d-11e6-9f1f-e3dbcf221aa2","method":{"position":"com.google.gson.Gson:576","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268057600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            if (src == null) {\n                {\n                    if (src == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268057600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new com.google.gson.JsonIOException();\n                    } else {\n                        {\n                            try {\n                                com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                                toJson(src, typeOfSrc, jsonWriter);\n                            } catch (java.io.IOException e) {\n                                throw new com.google.gson.JsonIOException(e);\n                            }\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268057600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"cdbcc479-3e8d-11e6-9f1f-131d38ea0eab","method":{"position":"com.google.gson.DefaultDateTypeAdapter:77","type":"CtMethodImpl","sourcecode":"public java.util.Date deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT, com.google.gson.JsonDeserializationContext context) throws com.google.gson.JsonParseException {\n    if (json == null) {\n        {\n            if (!(json instanceof com.google.gson.JsonPrimitive)) {\n                throw new com.google.gson.JsonParseException(\"The date should be a string value\");\n            } \n            java.util.Date java.util.Date = deserializeToDate(json);\n            if (typeOfT == (java.util.Date.java.util.Date.java.lang.Class)) {\n                return date;\n            } else if (typeOfT == (java.sql.Timestamp.java.sql.Timestamp.java.lang.Class)) {\n                return new java.sql.Timestamp(date.getTime());\n            } else if (typeOfT == (java.sql.Date.java.sql.Date.java.lang.Class)) {\n                return new java.sql.Date(date.getTime());\n            } else {\n                throw new java.lang.IllegalArgumentException((((getClass()) + \" cannot deserialize to \") + typeOfT));\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268057600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:111","type":"CtInvocationImpl","sourcecode":"primitive.isString()"},"failures":[],"tindex":"cdbceb8a-3e8d-11e6-9f1f-5104d700cc01","method":{"position":"com.google.gson.JsonPrimitive:333","type":"CtMethodImpl","sourcecode":"private static boolean isIntegral(com.google.gson.JsonPrimitive primitive) {\n    if (primitive.isString()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268057600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (primitive.isNumber()) {\n                {\n                    if ((primitive.java.lang.Object) instanceof java.lang.Number) {\n                        java.lang.Number java.lang.Number = ((java.lang.Number)(primitive.java.lang.Object));\n                        return ((((number instanceof java.math.BigInteger) || (number instanceof java.lang.Long)) || (number instanceof java.lang.Integer)) || (number instanceof java.lang.Short)) || (number instanceof java.lang.Byte);\n                    } \n                    return false;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268057600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"primitive"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonArray:58","type":"CtBinaryOperatorImpl","sourcecode":"element == null"},"failures":[],"tindex":"cdbceb8b-3e8d-11e6-9f1f-4dfc0fc20fad","method":{"position":"com.google.gson.JsonArray:115","type":"CtMethodImpl","sourcecode":"public boolean contains(com.google.gson.JsonElement element) {\n    if (element == null) {\n        {\n            return java.util.List<com.google.gson.JsonElement>.contains(element);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268057600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"cdbd39ac-3e8d-11e6-9f1f-9d1aa06d3785","method":{"position":"com.google.gson.Gson:576","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268057600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            if (src == null) {\n                {\n                    if (src == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268057600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new com.google.gson.JsonIOException();\n                    } else {\n                        {\n                            try {\n                                com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                                toJson(src, typeOfSrc, jsonWriter);\n                            } catch (java.io.IOException e) {\n                                throw new com.google.gson.JsonIOException(e);\n                            }\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268057600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":57,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
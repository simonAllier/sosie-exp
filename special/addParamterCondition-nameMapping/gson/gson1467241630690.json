{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":4,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":233,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":3,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":71,"com.google.gson.internal.bind.JsonTreeWriterTest.testPrematureClose":29,"com.google.gson.MixedStreamTest.testWriteLenient":370,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":372,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":148,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":18,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":310,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":320,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":292,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":298,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":119,"com.google.gson.internal.bind.JsonElementReaderTest.testStrictNansAndInfinities":388,"com.google.gson.functional.ObjectTest.testSingletonLists":180,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":144,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":299,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":234,"com.google.gson.stream.JsonWriterTest.testStrings":362,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":422,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":159,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":351,"com.google.gson.internal.bind.JsonElementReaderTest.testNulls":386,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":358,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":25,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":249,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":347,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":271,"com.google.gson.functional.EnumTest.testEnumCaseMapping":291,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":42,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":232,"com.google.gson.functional.JsonTreeTest.testToJsonTree":8,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":254,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":397,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":14,"com.google.gson.JsonObjectTest.testEqualsNonEmptyObject":410,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":128,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":259,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":317,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":161,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":223,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":408,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":187,"com.google.gson.internal.bind.JsonElementReaderTest.testLenientNansAndInfinities":384,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":269,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":340,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":367,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":117,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":157,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":307,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":215,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":209,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":371,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":98,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":193,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":143,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":411,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":83,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":17,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":31,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":418,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":63,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":216,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":94,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":192,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":333,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":344,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":75,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":201,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":86,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":279,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":419,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":147,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":416,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":138,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":339,"com.google.gson.JsonArrayTest.testEqualsNonEmptyArray":380,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":120,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":184,"com.google.gson.functional.EnumTest.testEnumSet":285,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":280,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":166,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithNestedWildcards":0,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":49,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":188,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":278,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":346,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":266,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":355,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":219,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":334,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":65,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":76,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":15,"com.google.gson.functional.MapTest.testMapSerialization":54,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":67,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":414,"com.google.gson.functional.MapTest.testSerializeMaps":48,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":109,"com.google.gson.functional.MapTest.testComplexKeysSerialization":61,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":30,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":105,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":163,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":265,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":400,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":252,"com.google.gson.internal.bind.JsonElementReaderTest.testWrongType":389,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":72,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":168,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":227,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":64,"com.google.gson.functional.PrettyPrintingTest.testMap":250,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":327,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":313,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":68,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":125,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":350,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":238,"com.google.gson.functional.MapTest.testMapSerializationEmpty":62,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":135,"com.google.gson.functional.CollectionTest.testQueueSerialization":314,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnValue":360,"com.google.gson.functional.MapTest.testMapOfMapSerialization":53,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":207,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":115,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":212,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":174,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictBoxedNansAndInfinities":34,"com.google.gson.functional.FieldNamingTest.testIdentity":110,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":235,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":242,"com.google.gson.internal.bind.JsonElementReaderTest.testNestedArrays":392,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":7,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":74,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":179,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":404,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":348,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":236,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":337,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":210,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":41,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":114,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":136,"com.google.gson.functional.MapTest.testMapSubclassSerialization":47,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":226,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":342,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":293,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":329,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":365,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":373,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":277,"com.google.gson.functional.EnumTest.testEnumSubclass":288,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":213,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":352,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":197,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":336,"com.google.gson.internal.bind.JsonElementReaderTest.testArray":385,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":167,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":368,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":178,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":10,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":40,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":208,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":152,"com.google.gson.MixedStreamTest.testWriteNulls":407,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":100,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":96,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":162,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":171,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":181,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":248,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":413,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":56,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":237,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":116,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":284,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":154,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":225,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":44,"com.google.gson.internal.bind.JsonElementReaderTest.testEarlyClose":387,"com.google.gson.JsonParserTest.testParseMixedArray":374,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":200,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":245,"com.google.gson.internal.bind.JsonTreeWriterTest.testWriteAfterClose":35,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":204,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":113,"com.google.gson.JsonArrayTest.testRemove":379,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":141,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":220,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":137,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":255,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":46,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":359,"com.google.gson.internal.bind.JsonElementReaderTest.testStringsFromNumbers":391,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":50,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":89,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":261,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":258,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":369,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":6,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":186,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":194,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":78,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":330,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":11,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":129,"com.google.gson.internal.bind.JsonElementReaderTest.testNumbersFromStrings":390,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":84,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":177,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":55,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":251,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":27,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":156,"com.google.gson.functional.PrimitiveTest.testShortSerialization":224,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":263,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictNansAndInfinities":33,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":273,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":217,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":396,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":106,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":287,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":312,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":341,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":228,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":324,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":38,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":36,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":231,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":356,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":73,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":195,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":420,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":39,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":121,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":294,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":423,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":169,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":290,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":70,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":80,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":318,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":325,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":421,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":257,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":142,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":262,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":16,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":132,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":264,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":12,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":211,"com.google.gson.JsonArrayTest.testSet":377,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":229,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":302,"com.google.gson.JsonPrimitiveTest.testEquals":398,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":260,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":286,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":415,"com.google.gson.functional.MapTest.testGeneralMapField":2,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":93,"com.google.gson.internal.bind.JsonElementReaderTest.testNumbers":393,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":102,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":326,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":338,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":149,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":57,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":122,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":199,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":306,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":218,"com.google.gson.JsonObjectTest.testDeepCopy":381,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":205,"com.google.gson.internal.bind.JsonElementReaderTest.testBooleans":382,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":321,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":349,"com.google.gson.stream.JsonWriterTest.testNonFiniteDoubles":395,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":272,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":140,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":274,"com.google.gson.JsonArrayTest.testDeepCopy":378,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":172,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":230,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":301,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":296,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":37,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":139,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":243,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":176,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":191,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":335,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":9,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":270,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":247,"com.google.gson.JsonParserTest.testParseUnquotedStringArrayFails":375,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":276,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":222,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":79,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":21,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":412,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":323,"com.google.gson.functional.ObjectTest.testNullSerialization":403,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":82,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":58,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":198,"com.google.gson.functional.MapTest.testInterfaceTypeMap":1,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":328,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":88,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":289,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":309,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":331,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":123,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":268,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":316,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":182,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":281,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":87,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":23,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":196,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":246,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":155,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":90,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":183,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":315,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":297,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":319,"com.google.gson.internal.bind.JsonElementReaderTest.testSkipValue":383,"com.google.gson.internal.bind.JsonElementReaderTest.testStrings":394,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":145,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":424,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":111,"com.google.gson.JsonParserTest.testParseInvalidJson":376,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":203,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":5,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":91,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":164,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":22,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":206,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":66,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":153,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":51,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":134,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":308,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":311,"com.google.gson.functional.MapTest.testRawMapSerialization":60,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":364,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":357,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":77,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":189,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":417,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":405,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":26,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":28,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":95,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":158,"com.google.gson.functional.PrimitiveTest.testByteSerialization":221,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":353,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":304,"com.google.gson.JsonPrimitiveTest.testEqualsIntegerAndBigInteger":406,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":19,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":101,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":107,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":282,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":427,"com.google.gson.functional.MapTest.testMapWithQuotes":52,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":126,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":165,"com.google.gson.JsonObjectTest.testEqualsOnEmptyObject":409,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":175,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":85,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":124,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":118,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":425,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":275,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":256,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":131,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":214,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":104,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":150,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":127,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":20,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":133,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":295,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":401,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":24,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":92,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":151,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":81,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":244,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":343,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":426,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":173,"com.google.gson.functional.ObjectTest.testNestedSerialization":190,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":303,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":202,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":305,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":300,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":59,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":45,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":241,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":345,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":366,"com.google.gson.stream.JsonWriterTest.testUnicodeLineBreaksEscaped":363,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":185,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":13,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":43,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":239,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":99,"com.google.gson.functional.CollectionTest.testSetSerialization":322,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":170,"com.google.gson.functional.StringTest.testStringValueSerialization":240,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":253,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":69,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":112,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":402,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":103,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":332,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":130,"com.google.gson.stream.JsonWriterTest.testWrongTopLevelType":361,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":108,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":160,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":399,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":32,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":267,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":283,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":146,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":354,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":97},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:199","type":"CtBinaryOperatorImpl","sourcecode":"from instanceof java.lang.reflect.ParameterizedType"},"failures":[0],"tindex":"357d3d4d-3e4e-11e6-ad51-5dcb6813b9fa","method":{"position":"com.google.gson.reflect.TypeToken:272","type":"CtMethodImpl","sourcecode":"private static boolean matches(java.lang.reflect.Type from, java.lang.reflect.Type to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeMap) {\n    if (from instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917169/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (to.equals(from)) || ((from instanceof java.lang.reflect.TypeVariable) && (to.equals(typeMap.get(((java.lang.reflect.TypeVariable<?>)(from)).getName()))));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.TreeTypeAdapter:55","type":"CtInvocationImpl","sourcecode":"value.isJsonNull()"},"failures":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39],"tindex":"357dd98e-3e4e-11e6-ad51-bb5989708666","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:75","type":"CtMethodImpl","sourcecode":"private void put(com.google.gson.JsonElement value) {\n    if (value.isJsonNull()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917169/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (value.isJsonNull()) {\n                {\n                    if ((java.lang.String) != null) {\n                        if ((!(value.isJsonNull())) || (getSerializeNulls())) {\n                            com.google.gson.JsonObject com.google.gson.JsonObject = ((com.google.gson.JsonObject)(peek()));\n                            object.add(java.lang.String, value);\n                        } \n                        java.lang.String = null;\n                    } else if (java.util.List<com.google.gson.JsonElement>.isEmpty()) {\n                        com.google.gson.JsonElement = value;\n                    } else {\n                        com.google.gson.JsonElement com.google.gson.JsonElement = peek();\n                        if (element instanceof com.google.gson.JsonArray) {\n                            ((com.google.gson.JsonArray)(element)).add(value);\n                        } else {\n                            throw new java.lang.IllegalStateException();\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917169/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,1,57,58,2,59,60,61,62,63,64,3,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,6,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,15,16,17,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,24,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,25,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352],"tindex":"357f873f-3e4e-11e6-ad51-1b105d8404cf","method":{"position":"com.google.gson.Gson:532","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917169/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src != null) {\n                {\n                    if (src != null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917169/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n                            toJson(src, typeOfSrc, writer);\n                            return writer.toString();\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917169/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[40,41,42,44,45,47,48,49,50,51,52,53,1,58,2,60,61,63,3,65,67,69,353,354,70,76,78,80,81,83,85,6,86,87,88,89,90,91,92,95,96,98,99,101,102,104,111,112,113,114,115,121,122,123,125,126,127,128,129,131,133,134,135,136,137,138,141,144,145,147,148,149,151,152,153,154,156,157,158,159,355,160,161,162,163,164,165,166,167,171,172,176,177,178,180,181,182,183,185,188,190,193,195,196,199,200,203,219,16,17,232,233,234,235,236,237,238,239,240,241,242,243,245,246,252,256,258,266,267,268,269,270,271,272,273,274,24,280,285,286,287,288,289,290,291,292,295,298,299,300,301,302,303,304,305,306,307,308,309,356,357,358,310,311,314,316,317,318,319,320,321,324,325,326,327,328,329,330,332,333,25,335,342,343,344,359,345,360,361,362,363,364,365,366,346,349,350,367],"tindex":"357f8740-3e4e-11e6-ad51-5f20440c3f5f","method":{"position":"com.google.gson.stream.JsonWriter:413","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            writeDeferredName();\n            beforeValue(false);\n            string(value);\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917169/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.FieldNamingPolicy:155","type":"CtUnaryOperatorImpl","sourcecode":"!(java.lang.Character.isUpperCase(firstCharacter))"},"failures":[76,81,368,369,106,109],"tindex":"357fd561-3e4e-11e6-ad51-8b38794d9b7b","method":{"position":"com.google.gson.FieldNamingPolicy:163","type":"CtMethodImpl","sourcecode":"private static java.lang.String modifyString(char firstCharacter, java.lang.String srcString, int indexOfSubstring) {\n    if (!(java.lang.Character.isUpperCase(firstCharacter))) {\n        {\n            return indexOfSubstring < (srcString.length()) ? firstCharacter + (srcString.substring(indexOfSubstring)) : java.lang.String.valueOf(firstCharacter);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917169/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"firstCharacter":"firstCharacter"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:298","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[198,201,204,207,209,226,370],"tindex":"357fd562-3e4e-11e6-ad51-2105d2df02e2","method":{"position":"com.google.gson.Gson:297","type":"CtMethodImpl","sourcecode":"private void checkValidFloatingPoint(double value) {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917169/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917169/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                        throw new java.lang.IllegalArgumentException(((value + \" is not a valid double value as per JSON specification. To override this\") + \" behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.\"));\n                    } \n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:79","type":"CtUnaryOperatorImpl","sourcecode":"!(json instanceof com.google.gson.JsonPrimitive)"},"failures":[],"tindex":"357fd563-3e4e-11e6-ad51-176e8e7c2f8f","method":{"position":"com.google.gson.Gson:847","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(com.google.gson.JsonElement json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n        {\n            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917169/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:240","type":"CtInvocationImpl","sourcecode":"from.getRawType().equals(to.getRawType())"},"failures":[],"tindex":"357ffc74-3e4e-11e6-ad51-f7d5e6ba4e6d","method":{"position":"com.google.gson.reflect.TypeToken:238","type":"CtMethodImpl","sourcecode":"private static boolean typeEquals(java.lang.reflect.ParameterizedType from, java.lang.reflect.ParameterizedType to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeVarMap) {\n    if (to.getRawType().equals(to.getRawType())) {\n        {\n            if (from.getRawType().equals(to.getRawType())) {\n                java.lang.reflect.Type[] java.lang.reflect.Type[] = from.getActualTypeArguments();\n                java.lang.reflect.Type[] java.lang.reflect.Type[] = to.getActualTypeArguments();\n                for (int int = 0 ; i < (fromArgs.int) ; i++) {\n                    if (!(com.google.gson.reflect.TypeToken.matches(fromArgs[i], toArgs[i], typeVarMap))) {\n                        return false;\n                    } \n                }\n                return true;\n            } \n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917169/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"to","to":"to"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:120","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonNull"},"failures":[],"tindex":"357ffc75-3e4e-11e6-ad51-0769bc0b518d","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:808","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonNull) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917169/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (!(o instanceof java.util.Map.Entry)) {\n                return false;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n            if (node == null) {\n                return false;\n            } \n            removeInternal(node, true);\n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:137","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonObject"},"failures":[46,124,371,372,373,374,375,376,377,378,379,380,381,31,32,35,38,382,383,384,385,386,387,388,389,390,391,392,393,394],"tindex":"357ffc76-3e4e-11e6-ad51-2f70a9834b09","method":{"position":"com.google.gson.JsonArray:57","type":"CtMethodImpl","sourcecode":"public void add(com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonArray) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917169/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (element instanceof com.google.gson.JsonObject) {\n                {\n                    if (element == null) {\n                        element = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n                    } \n                    java.util.List<com.google.gson.JsonElement>.add(element);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917169/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:86","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonArray"},"failures":[],"tindex":"35802387-3e4e-11e6-ad51-a5970ee0f1db","method":{"position":"com.google.gson.JsonArray:57","type":"CtMethodImpl","sourcecode":"public void add(com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonArray) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917169/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (element instanceof com.google.gson.JsonObject) {\n                {\n                    if (element == null) {\n                        element = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n                    } \n                    java.util.List<com.google.gson.JsonElement>.add(element);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917169/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:298","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[395],"tindex":"35802388-3e4e-11e6-ad51-6dc4144940ae","method":{"position":"com.google.gson.stream.JsonWriter:461","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(double value) throws java.io.IOException {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917169/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                throw new java.lang.IllegalArgumentException((\"Numeric values must be finite, but was \" + value));\n            } \n            writeDeferredName();\n            beforeValue(false);\n            java.io.Writer.append(java.lang.Double.toString(value));\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"35804a99-3e4e-11e6-ad51-f528503c0961","method":{"position":"com.google.gson.DefaultDateTypeAdapter:94","type":"CtMethodImpl","sourcecode":"private java.util.Date deserializeToDate(com.google.gson.JsonElement json) {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917169/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            synchronized(java.text.DateFormat) {\n                try {\n                    return java.text.DateFormat.parse(json.getAsString());\n                } catch (java.text.ParseException ignored) {\n                }\n                try {\n                    return java.text.DateFormat.parse(json.getAsString());\n                } catch (java.text.ParseException ignored) {\n                }\n                try {\n                    return java.text.DateFormat.parse(json.getAsString());\n                } catch (java.text.ParseException e) {\n                    throw new com.google.gson.JsonSyntaxException(json.getAsString() , e);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:305","type":"CtBinaryOperatorImpl","sourcecode":"node != null"},"failures":[],"tindex":"35804a9a-3e4e-11e6-ad51-3d87b246b4c6","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:686","type":"CtMethodImpl","sourcecode":"void add(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node) {\n    if (node != null) {\n        {\n            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            node.int = 1;\n            if (((int) > 0) && (((int) & 1) == 0)) {\n                (int)++;\n                (int)--;\n                (int)++;\n            } \n            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node;\n            (int)++;\n            if (((int) > 0) && (((int) & 1) == 0)) {\n                (int)++;\n                (int)--;\n                (int)++;\n            } \n            for (int int = 4 ; ((int) & (scale - 1)) == (scale - 1) ; scale *= 2) {\n                if ((int) == 0) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                    center.int = (right.int) + 1;\n                    left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                } else if ((int) == 1) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                    center.int = (right.int) + 1;\n                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    int = 0;\n                } else if ((int) == 2) {\n                    int = 0;\n                } \n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917169/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"node"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[396],"tindex":"358071ab-3e4e-11e6-ad51-f93e40c4de07","method":{"position":"com.google.gson.internal.bind.TypeAdapters:223","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917169/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"358098bc-3e4e-11e6-ad51-eb3bbf2763f3","method":{"position":"com.google.gson.Gson:491","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917169/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.bind.JsonTreeWriter com.google.gson.internal.bind.JsonTreeWriter = new com.google.gson.internal.bind.JsonTreeWriter();\n            toJson(src, typeOfSrc, writer);\n            return writer.get();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:113","type":"CtInvocationImpl","sourcecode":"primitive.isBoolean()"},"failures":[5,8,397,398],"tindex":"358098bd-3e4e-11e6-ad51-2da7db9f1fa0","method":{"position":"com.google.gson.JsonPrimitive:333","type":"CtMethodImpl","sourcecode":"private static boolean isIntegral(com.google.gson.JsonPrimitive primitive) {\n    if (primitive.isString()) {\n        {\n            if (primitive.isBoolean()) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917169/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if ((primitive.java.lang.Object) instanceof java.lang.Number) {\n                        java.lang.Number java.lang.Number = ((java.lang.Number)(primitive.java.lang.Object));\n                        return ((((number instanceof java.math.BigInteger) || (number instanceof java.lang.Long)) || (number instanceof java.lang.Integer)) || (number instanceof java.lang.Short)) || (number instanceof java.lang.Byte);\n                    } \n                    return false;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917169/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"primitive"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[399],"tindex":"358098be-3e4e-11e6-ad51-73f73e1c8310","method":{"position":"com.google.gson.JsonObject:111","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Character value) {\n    if (property == null) {\n        {\n            add(property, createJsonElement(value));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917169/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:106","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonArray"},"failures":[3,353,354,6,122,127,128,148,151,156,400,401,165,166,167,168,169,170,171,172,173,174,175,176,402,403,15,16,17,18,19,404,20,21,241,259,263,405,266,268,269,271,24,287,324,328,25,335,374,406,359,407,348,367,408,30,36,37,39],"tindex":"3580bfcf-3e4e-11e6-ad51-53759da41aa5","method":{"position":"com.google.gson.internal.Streams:67","type":"CtMethodImpl","sourcecode":"public static void write(com.google.gson.JsonElement element, com.google.gson.stream.JsonWriter writer) throws java.io.IOException {\n    if (element instanceof com.google.gson.JsonArray) {\n        {\n            com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<com.google.gson.JsonElement>.write(writer, element);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917169/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:298","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[],"tindex":"3580bfd0-3e4e-11e6-ad51-1b8be088752c","method":{"position":"com.google.gson.Gson:297","type":"CtMethodImpl","sourcecode":"private void checkValidFloatingPoint(double value) {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917169/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917169/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                        throw new java.lang.IllegalArgumentException(((value + \" is not a valid double value as per JSON specification. To override this\") + \" behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.\"));\n                    } \n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[],"tindex":"3580bfd1-3e4e-11e6-ad51-e78a4a9e8b7d","method":{"position":"com.google.gson.Gson:532","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917169/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src != null) {\n                {\n                    if (src != null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917169/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n                            toJson(src, typeOfSrc, writer);\n                            return writer.toString();\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917169/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:118","type":"CtBinaryOperatorImpl","sourcecode":"annotation != null"},"failures":[],"tindex":"3580bfd2-3e4e-11e6-ad51-e34e978aee75","method":{"position":"com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory:50","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nstatic com.google.gson.TypeAdapter<?> getTypeAdapter(com.google.gson.internal.ConstructorConstructor constructorConstructor, com.google.gson.Gson gson, com.google.gson.reflect.TypeToken<?> fieldType, com.google.gson.annotations.JsonAdapter annotation) {\n    if (annotation != null) {\n        {\n            java.lang.Class<?> java.lang.Class<?> = annotation.value();\n            if (com.google.gson.TypeAdapter.com.google.gson.TypeAdapter.java.lang.Class.isAssignableFrom(value)) {\n                java.lang.Class<com.google.gson.TypeAdapter<?>> java.lang.Class<com.google.gson.TypeAdapter<?>> = ((java.lang.Class<com.google.gson.TypeAdapter<?>>)(value));\n                return constructorConstructor.get(com.google.gson.reflect.TypeToken.get(typeAdapter)).construct();\n            } \n            if (com.google.gson.TypeAdapterFactory.com.google.gson.TypeAdapterFactory.java.lang.Class.isAssignableFrom(value)) {\n                java.lang.Class<com.google.gson.TypeAdapterFactory> java.lang.Class<com.google.gson.TypeAdapterFactory> = ((java.lang.Class<com.google.gson.TypeAdapterFactory>)(value));\n                return constructorConstructor.get(com.google.gson.reflect.TypeToken.get(typeAdapterFactory)).construct().create(gson, fieldType);\n            } \n            throw new java.lang.IllegalArgumentException(\"@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.\");\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917169/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:86","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonArray"},"failures":[379],"tindex":"3580e6e3-3e4e-11e6-ad51-6ffc11f031a0","method":{"position":"com.google.gson.JsonArray:92","type":"CtMethodImpl","sourcecode":"public boolean remove(com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonArray) {\n        {\n            return java.util.List<com.google.gson.JsonElement>.remove(element);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917169/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:109","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonPrimitive"},"failures":[],"tindex":"3580e6e4-3e4e-11e6-ad51-43a62dc7328c","method":{"position":"com.google.gson.reflect.TypeToken:283","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic final boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonPrimitive) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917169/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (o instanceof com.google.gson.reflect.TypeToken<?>) && (com.google.gson.internal.$Gson$Types.equals(java.lang.reflect.Type, ((com.google.gson.reflect.TypeToken<?>)(o)).java.lang.reflect.Type));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:105","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonObject"},"failures":[380,409,410],"tindex":"3580e6e5-3e4e-11e6-ad51-f5265b92750e","method":{"position":"com.google.gson.JsonObject:186","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonObject) {\n        {\n            return (o == (com.google.gson.JsonObject.this)) || ((o instanceof com.google.gson.JsonObject) && (((com.google.gson.JsonObject)(o)).com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.equals(com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917169/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:199","type":"CtUnaryOperatorImpl","sourcecode":"!(b instanceof java.lang.reflect.TypeVariable)"},"failures":[],"tindex":"3580e6e6-3e4e-11e6-ad51-17203aabc321","method":{"position":"com.google.gson.internal.LinkedTreeMap:207","type":"CtMethodImpl","sourcecode":"private boolean equal(java.lang.Object a, java.lang.Object b) {\n    if (!(a instanceof java.lang.reflect.TypeVariable)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917169/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (a == b) || ((a != null) && (a.equals(b)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"35810df7-3e4e-11e6-ad51-2782ab9a0f1d","method":{"position":"com.google.gson.Gson:695","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.lang.String json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917169/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[42,219],"tindex":"35810df8-3e4e-11e6-ad51-01cde9a6a157","method":{"position":"com.google.gson.Gson:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            out.value(value.toString());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917169/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[168,169,173,372,411,373,412],"tindex":"35810df9-3e4e-11e6-ad51-3d86be8f3ea6","method":{"position":"com.google.gson.JsonObject:89","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Number value) {\n    if (property == null) {\n        {\n            add(property, createJsonElement(value));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917169/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:452","type":"CtBinaryOperatorImpl","sourcecode":"typeAdapter instanceof com.google.gson.InstanceCreator<?>"},"failures":[413,414,44,415,45,416,417,46,3,156,418,419,420,167,168,169,421,170,172,173,422,174,18,19,404,20,21,241,423,424,425,259,263,266,267,268,269,271,24,426,324,326,328,337,427,346,347,348,349],"tindex":"3581d14a-3e4e-11e6-ad51-cb4d003449ef","method":{"position":"com.google.gson.TreeTypeAdapter:92","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newFactoryWithMatchRawType(com.google.gson.reflect.TypeToken<?> exactType, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof com.google.gson.InstanceCreator<?>) {\n        {\n            boolean boolean = (exactType.getType()) == (exactType.getRawType());\n            return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , exactType , matchRawType , null);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917169/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:111","type":"CtInvocationImpl","sourcecode":"primitive.isString()"},"failures":[],"tindex":"3581d14b-3e4e-11e6-ad51-47e00ca0293c","method":{"position":"com.google.gson.JsonPrimitive:333","type":"CtMethodImpl","sourcecode":"private static boolean isIntegral(com.google.gson.JsonPrimitive primitive) {\n    if (primitive.isString()) {\n        {\n            if (primitive.isBoolean()) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917169/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if ((primitive.java.lang.Object) instanceof java.lang.Number) {\n                        java.lang.Number java.lang.Number = ((java.lang.Number)(primitive.java.lang.Object));\n                        return ((((number instanceof java.math.BigInteger) || (number instanceof java.lang.Long)) || (number instanceof java.lang.Integer)) || (number instanceof java.lang.Short)) || (number instanceof java.lang.Byte);\n                    } \n                    return false;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917169/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"primitive"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:614","type":"CtBinaryOperatorImpl","sourcecode":"(c == 't') || (c == 'T')"},"failures":[],"tindex":"358330dc-3e4e-11e6-ad51-65b3daf50444","method":{"position":"com.google.gson.stream.JsonReader:755","type":"CtMethodImpl","sourcecode":"private boolean isLiteral(char c) throws java.io.IOException {\n    if ((c == 't') || (c == 'T')) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917169/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            switch (c) {\n                case '/' :\n                case '\\\\' :\n                case ';' :\n                case '#' :\n                case '=' :\n                    checkLenient();\n                case '{' :\n                case '}' :\n                case '[' :\n                case ']' :\n                case ':' :\n                case ',' :\n                case ' ' :\n                case '\\t' :\n                case '\\f' :\n                case '\\r' :\n                case '\\n' :\n                    return false;\n                default :\n                    return true;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"c"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"358330dd-3e4e-11e6-ad51-f187fd75e3df","method":{"position":"com.google.gson.Gson:871","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            if (json == null) {\n                return null;\n            } \n            return ((T)(fromJson(new com.google.gson.internal.bind.JsonTreeReader(json), typeOfT)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917169/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:109","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonPrimitive"},"failures":[],"tindex":"358357ee-3e4e-11e6-ad51-b720076db517","method":{"position":"com.google.gson.internal.LinkedTreeMap:481","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"rawtypes\")\n@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonPrimitive) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917169/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof java.util.Map.Entry) {\n                java.util.Map.Entry java.util.Map.Entry = ((java.util.Map.Entry)(o));\n                return ((K) == null ? (other.getKey()) == null : K.equals(other.getKey())) && ((V) == null ? (other.getValue()) == null : V.equals(other.getValue()));\n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"358357ef-3e4e-11e6-ad51-29f39f5bc131","method":{"position":"com.google.gson.stream.JsonWriter:490","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            writeDeferredName();\n            java.lang.String java.lang.String = value.toString();\n            if ((!(boolean)) && (((string.equals(\"-Infinity\")) || (string.equals(\"Infinity\"))) || (string.equals(\"NaN\")))) {\n                throw new java.lang.IllegalArgumentException((\"Numeric values must be finite, but was \" + value));\n            } \n            beforeValue(false);\n            java.io.Writer.append(string);\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917169/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"358357f0-3e4e-11e6-ad51-2db4d3666442","method":{"position":"com.google.gson.Gson:136","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917169/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return toJsonTree(src, typeOfSrc);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonObject:54","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"358357f1-3e4e-11e6-ad51-6d24cec4f978","method":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:74","type":"CtMethodImpl","sourcecode":"private java.lang.reflect.Type getRuntimeTypeIfMoreSpecific(java.lang.reflect.Type type, java.lang.Object value) {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917169/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((value != null) && (((type == (java.lang.Object.java.lang.Object.java.lang.Class)) || (type instanceof java.lang.reflect.TypeVariable<?>)) || (type instanceof java.lang.Class<?>))) {\n                type = value.getClass();\n            } \n            return type;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.TreeTypeAdapter:55","type":"CtInvocationImpl","sourcecode":"value.isJsonNull()"},"failures":[],"tindex":"35837f02-3e4e-11e6-ad51-e3bd6f072c21","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:75","type":"CtMethodImpl","sourcecode":"private void put(com.google.gson.JsonElement value) {\n    if (value.isJsonNull()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917169/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (value.isJsonNull()) {\n                {\n                    if ((java.lang.String) != null) {\n                        if ((!(value.isJsonNull())) || (getSerializeNulls())) {\n                            com.google.gson.JsonObject com.google.gson.JsonObject = ((com.google.gson.JsonObject)(peek()));\n                            object.add(java.lang.String, value);\n                        } \n                        java.lang.String = null;\n                    } else if (java.util.List<com.google.gson.JsonElement>.isEmpty()) {\n                        com.google.gson.JsonElement = value;\n                    } else {\n                        com.google.gson.JsonElement com.google.gson.JsonElement = peek();\n                        if (element instanceof com.google.gson.JsonArray) {\n                            ((com.google.gson.JsonArray)(element)).add(value);\n                        } else {\n                            throw new java.lang.IllegalStateException();\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917169/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"35837f03-3e4e-11e6-ad51-d93cf45f8dee","method":{"position":"com.google.gson.Gson:127","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonParseException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917169/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    } else {\n        {\n            return ((T)(fromJson(json, typeOfT)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:274","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[],"tindex":"35837f04-3e4e-11e6-ad51-31995f6ad7d7","method":{"position":"com.google.gson.Gson:249","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> doubleAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917169/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return in.nextDouble();\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    double double = value.doubleValue();\n                    checkValidFloatingPoint(doubleValue);\n                    out.value(value);\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"3583a615-3e4e-11e6-ad51-8b647370c4e2","method":{"position":"com.google.gson.Gson:468","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917169/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src == null) {\n                return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            return toJsonTree(src, src.getClass());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"3583a616-3e4e-11e6-ad51-cf1970e8ea53","method":{"position":"com.google.gson.Gson:532","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917169/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src != null) {\n                {\n                    if (src != null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917169/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n                            toJson(src, typeOfSrc, writer);\n                            return writer.toString();\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917169/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1413","type":"CtVariableReadImpl","sourcecode":"throwOnEof"},"failures":[],"tindex":"3583a617-3e4e-11e6-ad51-2b273ceaf268","method":{"position":"com.google.gson.stream.JsonReader:1331","type":"CtMethodImpl","sourcecode":"private int nextNonWhitespace(boolean throwOnEof) throws java.io.IOException {\n    if (throwOnEof) {\n        {\n            char[] char[] = com.google.gson.stream.JsonReader.this.char[];\n            int int = int;\n            int int = int;\n            while (true) {\n                if (p == l) {\n                    int = p;\n                    if (!(fillBuffer(1))) {\n                        break;\n                    } \n                    p = int;\n                    l = int;\n                } \n                int int = buffer[(p++)];\n                if (c == '\\n') {\n                    (int)++;\n                    int = p;\n                    continue;\n                } else if (((c == ' ') || (c == '\\r')) || (c == '\\t')) {\n                    continue;\n                } \n                if (c == '/') {\n                    int = p;\n                    if (p == l) {\n                        (int)--;\n                        boolean boolean = fillBuffer(2);\n                        (int)++;\n                        if (!charsLoaded) {\n                            return c;\n                        } \n                    } \n                    checkLenient();\n                    char char = buffer[int];\n                    switch (peek) {\n                        case '*' :\n                            (int)++;\n                            if (!(skipTo(\"*/\"))) {\n                                throw syntaxError(\"Unterminated comment\");\n                            } \n                            p = (int) + 2;\n                            l = int;\n                            continue;\n                        case '/' :\n                            (int)++;\n                            skipToEndOfLine();\n                            p = int;\n                            l = int;\n                            continue;\n                        default :\n                            return c;\n                    }\n                } else if (c == '#') {\n                    int = p;\n                    checkLenient();\n                    skipToEndOfLine();\n                    p = int;\n                    l = int;\n                } else {\n                    int = p;\n                    return c;\n                }\n            }\n            if (throwOnEof) {\n                throw new java.io.EOFException(((((\"End of input\" + \" at line \") + (getLineNumber())) + \" column \") + (getColumnNumber())));\n            } else {\n                return -1;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917169/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"throwOnEof":"throwOnEof"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":43,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":244,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":388,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":173,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":27,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":145,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":7,"com.google.gson.MixedStreamTest.testWriteLenient":26,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":116,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":355,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":13,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":203,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":114,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":207,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":318,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":454,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":162,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":85,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":252,"com.google.gson.functional.ObjectTest.testSingletonLists":112,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":95,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":351,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":389,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":467,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":147,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":127,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":305,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":263,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":97,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":364,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":168,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":456,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":325,"com.google.gson.functional.EnumTest.testEnumCaseMapping":453,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":387,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":459,"com.google.gson.functional.JsonTreeTest.testToJsonTree":159,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":367,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":70,"com.google.gson.JsonObjectTest.testEqualsNonEmptyObject":44,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreBehindInVersion":288,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":92,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":340,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":36,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":446,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":291,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":105,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":124,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":440,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":487,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":330,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":323,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":241,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":134,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":486,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":363,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":41,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":362,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":196,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":37,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":46,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testDifferentSerializeAndDeserializeField":282,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":24,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":136,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":421,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":301,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":8,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":187,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":236,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":76,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":383,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":47,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":133,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":417,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":120,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":229,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":289,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":21,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":58,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":96,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":62,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":84,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":463,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":354,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":471,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":73,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":349,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":240,"com.google.gson.JsonArrayTest.testEqualsNonEmptyArray":42,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":108,"com.google.gson.functional.CollectionTest.testSetDeserialization":206,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":163,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":123,"com.google.gson.functional.EnumTest.testEnumSet":448,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":30,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":312,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithNestedWildcards":307,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":372,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":128,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":83,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":270,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":75,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":148,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":320,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":437,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":413,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":178,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":243,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":233,"com.google.gson.functional.MapTest.testMapSerialization":376,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":245,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":214,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":212,"com.google.gson.functional.MapTest.testSerializeMaps":371,"com.google.gson.functional.MapTest.testComplexKeysSerialization":172,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":423,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":107,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":261,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":258,"com.google.gson.internal.LinkedTreeMapTest.testRemoveRootDoesNotDoubleUnlink":310,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":190,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":476,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":165,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":28,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithBasicWildcards":309,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":2,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":49,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":384,"com.google.gson.functional.PrettyPrintingTest.testMap":365,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":409,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":398,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":247,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":337,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":38,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":461,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":393,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":18,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":346,"com.google.gson.functional.MapTest.testMapSerializationEmpty":382,"com.google.gson.functional.CollectionTest.testQueueSerialization":399,"com.google.gson.functional.MapTest.testMapOfMapSerialization":375,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":23,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":45,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":202,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":315,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictBoxedNansAndInfinities":485,"com.google.gson.functional.FieldNamingTest.testIdentity":213,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":390,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":464,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":98,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":137,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":29,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":111,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":158,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":297,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":457,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testSkipNonAnnotatedFields":281,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":12,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":391,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":175,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":432,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":274,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":201,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":347,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":478,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":25,"com.google.gson.functional.MapTest.testMapSubclassSerialization":370,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":91,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":193,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":219,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":276,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":455,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":9,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":146,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":82,"com.google.gson.functional.EnumTest.testEnumSubclass":451,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":434,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":126,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":306,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":424,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":237,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":1,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":185,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":177,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":176,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":60,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":273,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":57,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":431,"com.google.gson.stream.JsonWriterTest.testObjectsInArrays":304,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":358,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":113,"com.google.gson.MixedStreamTest.testWriteNulls":482,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":422,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":419,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":80,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":106,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":115,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":255,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":313,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":223,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":231,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":470,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":378,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":392,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":488,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":160,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":90,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":360,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":442,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":215,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":426,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":0,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithTypeParameters":308,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":220,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAheadInVersion":286,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":22,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":200,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":350,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":438,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":348,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":368,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":369,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":251,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":68,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":373,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":254,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":294,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":191,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":52,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":150,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":138,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":329,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":180,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":411,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":61,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":341,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":89,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":174,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":189,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":164,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":377,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":480,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":361,"com.google.gson.functional.PrimitiveTest.testShortSerialization":441,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":466,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":447,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":327,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictNansAndInfinities":484,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":435,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":152,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":209,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":450,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":204,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":192,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":405,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":443,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":10,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":259,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":280,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":444,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":33,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":56,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":67,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":77,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":139,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":262,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":333,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":242,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":72,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":3,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":143,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":119,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":452,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":182,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":406,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":151,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":205,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":407,"com.google.gson.InnerClassExclusionStrategyTest.testExcludeInnerClassField":271,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":465,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":250,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":256,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":300,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":235,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":298,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":257,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":64,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":433,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":50,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":226,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":253,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":449,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":249,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":216,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":117,"com.google.gson.functional.MapTest.testGeneralMapField":171,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":416,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":230,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":238,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":408,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testSkipExplicitlySkippedFields":285,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":356,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":379,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":334,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":386,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":425,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":436,"com.google.gson.MixedStreamTest.testReadMixedStreamed":279,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":429,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":234,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":403,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":458,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":94,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":326,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":74,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":154,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":396,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":40,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":314,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":103,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":266,"com.google.gson.stream.JsonWriterTest.testArraysInObjects":303,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":299,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":99,"com.google.gson.functional.ObjectTest.testNestedDeserialization":144,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":317,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":319,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":331,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":246,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":59,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":324,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":222,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":54,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":81,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":48,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":181,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":11,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":16,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":404,"com.google.gson.functional.ObjectTest.testNullSerialization":475,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":184,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":20,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":170,"com.google.gson.functional.MapTest.testInterfaceTypeMap":169,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":410,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":63,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":32,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":260,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testNeverSkipExplicitlyExposedAnnotatedFields":284,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":188,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":412,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":335,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":322,"com.google.gson.MixedStreamTest.testWriteClosed":278,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":248,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":401,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":66,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":118,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":86,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":51,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":225,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":141,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":221,"com.google.gson.stream.JsonWriterTest.testLongs":302,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":156,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":69,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":121,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":400,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":267,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":269,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":186,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":402,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":352,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":469,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":198,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":428,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":157,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":109,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":414,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":224,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":430,"com.google.gson.InnerClassExclusionStrategyTest.testIncludeStaticNestedClassField":272,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":445,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":268,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":359,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":135,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":167,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":345,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":142,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":197,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":397,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":275,"com.google.gson.functional.MapTest.testRawMapSerialization":381,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":34,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":130,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":179,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":218,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":295,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":479,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":332,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":418,"com.google.gson.functional.PrimitiveTest.testByteSerialization":439,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":481,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":5,"com.google.gson.ObjectTypeAdapterTest.testSerialize":290,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":195,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":14,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":53,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":210,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":87,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":473,"com.google.gson.functional.MapTest.testMapWithQuotes":374,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":338,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":311,"com.google.gson.JsonObjectTest.testEqualsOnEmptyObject":43,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":316,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":102,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":336,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":161,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":472,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":79,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":140,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":166,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":39,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":343,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":122,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":293,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":155,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":339,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":15,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":265,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":344,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":477,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":296,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":357,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":415,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":183,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":100,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":194,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAtSameVersion":287,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":468,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testNeverSkipExposedAnnotatedFields":283,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":4,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":31,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":129,"com.google.gson.JsonObjectTest.testAddingStringProperties":19,"com.google.gson.functional.ObjectTest.testNestedSerialization":131,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":227,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":385,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":427,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":328,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":380,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":217,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":71,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":462,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":483,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":125,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":65,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":93,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":153,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":460,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":132,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":149,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":264,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":35,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":394,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":292,"com.google.gson.functional.CollectionTest.testSetSerialization":208,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":239,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":78,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":366,"com.google.gson.functional.StringTest.testStringValueSerialization":395,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":110,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":55,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":199,"com.google.gson.MixedStreamTest.testWriteInvalidState":277,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":474,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":232,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":228,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":342,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":211,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":104,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":17,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":101,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":321,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":88,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":353,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":6,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":420},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:305","type":"CtBinaryOperatorImpl","sourcecode":"node != null"},"failures":[],"tindex":"2baa40a4-3e5c-11e6-8a6f-979cca5defdc","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:686","type":"CtMethodImpl","sourcecode":"void add(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node) {\n    if (node != null) {\n        {\n            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            node.int = 1;\n            if (((int) > 0) && (((int) & 1) == 0)) {\n                (int)++;\n                (int)--;\n                (int)++;\n            } \n            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node;\n            (int)++;\n            if (((int) > 0) && (((int) & 1) == 0)) {\n                (int)++;\n                (int)--;\n                (int)++;\n            } \n            for (int int = 4 ; ((int) & (scale - 1)) == (scale - 1) ; scale *= 2) {\n                if ((int) == 0) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                    center.int = (right.int) + 1;\n                    left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                } else if ((int) == 1) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                    center.int = (right.int) + 1;\n                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    int = 0;\n                } else if ((int) == 2) {\n                    int = 0;\n                } \n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871542/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"node"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:332","type":"CtVariableReadImpl","sourcecode":"insert"},"failures":[0],"tindex":"2baab5d5-3e5c-11e6-8a6f-bd1bd886703e","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:338","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (insert) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871542/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            for (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) {\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                int int = left != null ? left.int : 0;\n                int int = right != null ? right.int : 0;\n                int int = leftHeight - rightHeight;\n                if (delta == (-2)) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    int int = rightRight != null ? rightRight.int : 0;\n                    int int = rightLeft != null ? rightLeft.int : 0;\n                    int int = rightLeftHeight - rightRightHeight;\n                    if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                        rotateLeft(node);\n                    } else {\n                        assert rightDelta == 1;\n                        rotateRight(right);\n                        rotateLeft(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 2) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    int int = leftRight != null ? leftRight.int : 0;\n                    int int = leftLeft != null ? leftLeft.int : 0;\n                    int int = leftLeftHeight - leftRightHeight;\n                    if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                        rotateRight(node);\n                    } else {\n                        assert leftDelta == (-1);\n                        rotateLeft(left);\n                        rotateRight(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 0) {\n                    node.int = leftHeight + 1;\n                    if (insert) {\n                        break;\n                    } \n                } else {\n                    assert (delta == (-1)) || (delta == 1);\n                    node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                    if (!insert) {\n                        break;\n                    } \n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"insert"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.DateTypeAdapter:86","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19],"tindex":"2baadce6-3e5c-11e6-8a6f-7988bf370df2","method":{"position":"com.google.gson.JsonObject:121","type":"CtMethodImpl","sourcecode":"private com.google.gson.JsonElement createJsonElement(java.lang.Object value) {\n    if (value == null) {\n        {\n            return value == null ? com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull : new com.google.gson.JsonPrimitive(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871542/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:298","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[20,21,22,23,24,25,26],"tindex":"2baadce7-3e5c-11e6-8a6f-35f58910aafa","method":{"position":"com.google.gson.Gson:297","type":"CtMethodImpl","sourcecode":"private void checkValidFloatingPoint(double value) {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871542/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                throw new java.lang.IllegalArgumentException(((value + \" is not a valid double value as per JSON specification. To override this\") + \" behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.\"));\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[27,28,29,30,31,32,33,34,35,36,37,38,22,23,24,39,40,26],"tindex":"2bab03f8-3e5c-11e6-8a6f-91c8cc2202fa","method":{"position":"com.google.gson.Gson:261","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            double double = value.doubleValue();\n            checkValidFloatingPoint(doubleValue);\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871542/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:105","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonObject"},"failures":[],"tindex":"2bab03f9-3e5c-11e6-8a6f-bbf262dd935e","method":{"position":"com.google.gson.internal.$Gson$Types:213","type":"CtMethodImpl","sourcecode":"private static int hashCodeOrZero(java.lang.Object o) {\n    return o != null ? o.hashCode() : 0;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"2bab03fa-3e5c-11e6-8a6f-49413db893e8","method":{"position":"com.google.gson.Gson:552","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871542/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            if (src == null) {\n                {\n                    if (src != null) {\n                        toJson(src, src.getClass(), writer);\n                    } else {\n                        toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull, writer);\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871542/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:107","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonArray"},"failures":[41,42,43,44],"tindex":"2bab2b0b-3e5c-11e6-8a6f-b1a27db87426","method":{"position":"com.google.gson.JsonObject:186","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonArray) {\n        {\n            return (o == (com.google.gson.JsonObject.this)) || ((o instanceof com.google.gson.JsonObject) && (((com.google.gson.JsonObject)(o)).com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.equals(com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871542/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:305","type":"CtBinaryOperatorImpl","sourcecode":"node != null"},"failures":[],"tindex":"2bab2b0c-3e5c-11e6-8a6f-05ed7de85ad2","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:245","type":"CtMethodImpl","sourcecode":"void removeInternal(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node, boolean unlink) {\n    if (node != null) {\n        {\n            if (unlink) {\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            if ((left != null) && (right != null)) {\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = (left.int) > (right.int) ? left.last() : right.first();\n                removeInternal(adjacent, false);\n                int int = 0;\n                left = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                if (left != null) {\n                    leftHeight = left.int;\n                    adjacent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left;\n                    left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                } \n                int int = 0;\n                right = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                if (right != null) {\n                    rightHeight = right.int;\n                    adjacent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                } \n                adjacent.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                replaceInParent(node, adjacent);\n                return ;\n            } else if (left != null) {\n                replaceInParent(node, left);\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } else if (right != null) {\n                replaceInParent(node, right);\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } else {\n                replaceInParent(node, null);\n            }\n            rebalance(originalParent, false);\n            (int)--;\n            (int)++;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871542/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"node"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:92","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof java.util.Iterator"},"failures":[],"tindex":"2bab521d-3e5c-11e6-8a6f-49adfcdce8ea","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:808","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (o instanceof java.util.Iterator) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871542/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (!(o instanceof java.util.Map.Entry)) {\n                return false;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n            if (node == null) {\n                return false;\n            } \n            removeInternal(node, true);\n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:274","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[45,46,47,48,49,50,26],"tindex":"2bab521e-3e5c-11e6-8a6f-cb3ce97e5d61","method":{"position":"com.google.gson.Gson:249","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> doubleAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871542/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return in.nextDouble();\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    double double = value.doubleValue();\n                    checkValidFloatingPoint(doubleValue);\n                    out.value(value);\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:94","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.Class"},"failures":[],"tindex":"2bab792f-3e5c-11e6-8a6f-0b603a3ac1f1","method":{"position":"com.google.gson.internal.Primitives:69","type":"CtMethodImpl","sourcecode":"public static boolean isPrimitive(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class) {\n        {\n            return com.google.gson.internal.Primitives.com.google.gson.internal.Primitives.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.containsKey(type);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871542/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"2bab7930-3e5c-11e6-8a6f-611cb824802d","method":{"position":"com.google.gson.Gson:847","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(com.google.gson.JsonElement json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871542/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:199","type":"CtUnaryOperatorImpl","sourcecode":"!(b instanceof java.lang.reflect.TypeVariable)"},"failures":[],"tindex":"2bab7931-3e5c-11e6-8a6f-3352bac58d57","method":{"position":"com.google.gson.internal.$Gson$Types:151","type":"CtMethodImpl","sourcecode":"static boolean equal(java.lang.Object a, java.lang.Object b) {\n    return (a == b) || ((a != null) && (a.equals(b)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[51,30,52,53,20,21,25],"tindex":"2baba042-3e5c-11e6-8a6f-c3acf93ea520","method":{"position":"com.google.gson.Gson:285","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871542/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    float float = value.floatValue();\n                    checkValidFloatingPoint(floatValue);\n                    out.value(value);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871542/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[2,3,4,7,8,9,11],"tindex":"2baba043-3e5c-11e6-8a6f-a972d996bb49","method":{"position":"com.google.gson.JsonObject:89","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Number value) {\n    if (property == null) {\n        {\n            add(property, createJsonElement(value));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871542/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[27,54,28,55,56,57,29,58,59,60,61,62,51,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,1,3,78,79,80,81,82,83,84,30,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,52,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,7,8,9,10,11,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,13,14,15,16,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290],"tindex":"2baba044-3e5c-11e6-8a6f-b95767e82e9d","method":{"position":"com.google.gson.internal.Excluder:149","type":"CtMethodImpl","sourcecode":"public boolean excludeField(java.lang.reflect.Field field, boolean serialize) {\n    if (field.isSynthetic()) {\n        {\n            if (((int) & (field.getModifiers())) != 0) {\n                return true;\n            } \n            if (((double) != (com.google.gson.internal.Excluder.com.google.gson.internal.Excluder.double)) && (!(isValidVersion(field.getAnnotation(com.google.gson.annotations.Since.com.google.gson.annotations.Since.java.lang.Class), field.getAnnotation(com.google.gson.annotations.Until.com.google.gson.annotations.Until.java.lang.Class))))) {\n                return true;\n            } \n            if (field.isSynthetic()) {\n                return true;\n            } \n            if (boolean) {\n                com.google.gson.annotations.Expose com.google.gson.annotations.Expose = field.getAnnotation(com.google.gson.annotations.Expose.com.google.gson.annotations.Expose.java.lang.Class);\n                if ((annotation == null) || (serialize ? !(annotation.serialize()) : !(annotation.deserialize()))) {\n                    return true;\n                } \n            } \n            if ((!(boolean)) && (isInnerClass(field.getType()))) {\n                return true;\n            } \n            if (isAnonymousOrLocal(field.getType())) {\n                return true;\n            } \n            java.util.List<com.google.gson.ExclusionStrategy> java.util.List<com.google.gson.ExclusionStrategy> = serialize ? java.util.List<com.google.gson.ExclusionStrategy> : java.util.List<com.google.gson.ExclusionStrategy>;\n            if (!(list.isEmpty())) {\n                com.google.gson.FieldAttributes com.google.gson.FieldAttributes = new com.google.gson.FieldAttributes(field);\n                for (com.google.gson.ExclusionStrategy com.google.gson.ExclusionStrategy : list) {\n                    if (exclusionStrategy.shouldSkipField(fieldAttributes)) {\n                        return true;\n                    } \n                }\n            } \n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871542/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"field"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[59,60,61,62,63,64,65,69,70,152,158,167,169,170,173,199,291,292,293,250,294,253,254,295,258],"tindex":"2babc755-3e5c-11e6-8a6f-67e922ff2041","method":{"position":"com.google.gson.internal.bind.TypeAdapters:361","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871542/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[60,64,65,70,296,159,224,225,12,13,14,297,15,16,244],"tindex":"2babc756-3e5c-11e6-8a6f-6bb73fbc5b20","method":{"position":"com.google.gson.Gson:468","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871542/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src == null) {\n                {\n                    if (src == null) {\n                        return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n                    } \n                    return toJsonTree(src, src.getClass());\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871542/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:726","type":"CtBinaryOperatorImpl","sourcecode":"value == 0"},"failures":[298,299,300,301,302,303,304,305,306],"tindex":"2babc757-3e5c-11e6-8a6f-6954e4096e2d","method":{"position":"com.google.gson.stream.JsonWriter:476","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(long value) throws java.io.IOException {\n    if (value == 0) {\n        {\n            writeDeferredName();\n            beforeValue(false);\n            java.io.Writer.write(java.lang.Long.toString(value));\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871542/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:192","type":"CtInvocationImpl","sourcecode":"to.equals(from)"},"failures":[307,308,309],"tindex":"2babee68-3e5c-11e6-8a6f-95dff739d639","method":{"position":"com.google.gson.reflect.TypeToken:185","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.ParameterizedType to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeVarMap) {\n    if (to.equals(from)) {\n        {\n            if (from == null) {\n                return false;\n            } \n            if (to.equals(from)) {\n                return true;\n            } \n            java.lang.Class<?> java.lang.Class<?> = com.google.gson.internal.$Gson$Types.getRawType(from);\n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = null;\n            if (from instanceof java.lang.reflect.ParameterizedType) {\n                ptype = ((java.lang.reflect.ParameterizedType)(from));\n            } \n            if (ptype != null) {\n                java.lang.reflect.Type[] java.lang.reflect.Type[] = ptype.getActualTypeArguments();\n                java.lang.reflect.TypeVariable<?>[] java.lang.reflect.TypeVariable<?>[] = clazz.getTypeParameters();\n                for (int int = 0 ; i < (tArgs.int) ; i++) {\n                    java.lang.reflect.Type java.lang.reflect.Type = tArgs[i];\n                    java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = tParams[i];\n                    while (arg instanceof java.lang.reflect.TypeVariable<?>) {\n                        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(arg));\n                        arg = typeVarMap.get(v.getName());\n                    }\n                    typeVarMap.put(var.getName(), arg);\n                }\n                if (com.google.gson.reflect.TypeToken.typeEquals(ptype, to, typeVarMap)) {\n                    return true;\n                } \n            } \n            for (java.lang.reflect.Type java.lang.reflect.Type : clazz.getGenericInterfaces()) {\n                if (com.google.gson.reflect.TypeToken.isAssignableFrom(itype, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap))) {\n                    return true;\n                } \n            }\n            java.lang.reflect.Type java.lang.reflect.Type = clazz.getGenericSuperclass();\n            return com.google.gson.reflect.TypeToken.isAssignableFrom(sType, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871542/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from","to":"to"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[1,5,6,7,8,9,10,11,12,13,14,15,16,19],"tindex":"2babee69-3e5c-11e6-8a6f-a5a9a0878404","method":{"position":"com.google.gson.JsonObject:78","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.String value) {\n    if (value == null) {\n        {\n            add(property, createJsonElement(value));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871542/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[17],"tindex":"2babee6a-3e5c-11e6-8a6f-edd9e9b12dbd","method":{"position":"com.google.gson.JsonObject:111","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Character value) {\n    if (property == null) {\n        {\n            add(property, createJsonElement(value));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871542/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:218","type":"CtVariableReadImpl","sourcecode":"unlink"},"failures":[310],"tindex":"2babee6b-3e5c-11e6-8a6f-57b0836d089b","method":{"position":"com.google.gson.internal.LinkedTreeMap:217","type":"CtMethodImpl","sourcecode":"void removeInternal(com.google.gson.internal.LinkedTreeMap.Node<K, V> node, boolean unlink) {\n    if (unlink) {\n        {\n            if (unlink) {\n                {\n                    if (unlink) {\n                        node.com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                        node.com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    } \n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    if ((left != null) && (right != null)) {\n                        com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = (left.int) > (right.int) ? left.last() : right.first();\n                        removeInternal(adjacent, false);\n                        int int = 0;\n                        left = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                        if (left != null) {\n                            leftHeight = left.int;\n                            adjacent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = left;\n                            left.com.google.gson.internal.LinkedTreeMap.Node<K, V> = adjacent;\n                            node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                        } \n                        int int = 0;\n                        right = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                        if (right != null) {\n                            rightHeight = right.int;\n                            adjacent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = right;\n                            right.com.google.gson.internal.LinkedTreeMap.Node<K, V> = adjacent;\n                            node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                        } \n                        adjacent.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                        replaceInParent(node, adjacent);\n                        return ;\n                    } else if (left != null) {\n                        replaceInParent(node, left);\n                        node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                    } else if (right != null) {\n                        replaceInParent(node, right);\n                        node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                    } else {\n                        replaceInParent(node, null);\n                    }\n                    rebalance(originalParent, false);\n                    (int)--;\n                    (int)++;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871542/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871542/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"unlink":"unlink"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[27,28,56,29,58,62,51,63,68,69,71,311,312,1,2,3,78,313,314,4,315,316,317,79,296,81,82,83,84,30,86,87,88,90,32,318,95,97,319,98,99,100,102,320,321,322,323,324,325,326,327,328,103,104,105,106,107,109,110,111,112,115,118,121,123,125,329,330,128,130,131,331,133,136,138,139,141,332,147,333,334,335,336,337,338,339,340,341,342,343,298,344,345,346,347,348,349,299,154,350,300,301,351,352,353,354,355,356,155,357,358,359,360,156,361,362,52,160,363,161,162,163,364,365,164,165,366,367,368,166,369,370,371,372,373,167,374,375,376,377,378,169,379,170,171,380,381,172,382,383,384,173,174,177,178,179,180,181,182,183,184,187,189,192,193,194,195,385,386,196,197,387,388,389,390,391,392,393,394,395,198,199,200,201,202,396,203,397,204,398,399,400,401,291,205,402,207,403,208,404,405,406,209,210,211,212,213,215,217,407,408,409,410,219,411,412,220,221,222,223,226,227,228,229,413,414,415,416,417,418,419,420,421,292,422,53,230,232,293,423,233,235,236,237,12,238,240,241,424,20,425,426,21,427,428,22,429,430,23,431,24,432,433,45,434,39,46,47,435,436,437,438,439,48,440,441,442,25,49,443,50,40,444,243,445,245,247,250,294,446,253,254,256,447,257,258,448,449,450,451,260,452,453,454,455,262,265,266,269,270,456,457,458,273,274,459,460,289,461,305,306,462],"tindex":"2bac157c-3e5c-11e6-8a6f-6321e7fb8f00","method":{"position":"com.google.gson.Gson:532","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871542/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n            toJson(src, typeOfSrc, writer);\n            return writer.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:497","type":"CtBinaryOperatorImpl","sourcecode":"(typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)"},"failures":[71,72,311,76,312,463,464,77,1,2,3,465,78,313,314,466,4,467,315,317,296,468,469,320,321,322,323,325,361,369,173,405,470,214,215,216,217,471,218,408,410,12,13,14,297,15,16,472,446,447,473,270,456,457,458],"tindex":"2bac3c8d-3e5c-11e6-8a6f-15cec36c567e","method":{"position":"com.google.gson.TreeTypeAdapter:92","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newFactoryWithMatchRawType(com.google.gson.reflect.TypeToken<?> exactType, java.lang.Object typeAdapter) {\n    if ((typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871542/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            boolean boolean = (exactType.getType()) == (exactType.getRawType());\n            return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , exactType , matchRawType , null);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"2bac3c8e-3e5c-11e6-8a6f-cde7761e2603","method":{"position":"com.google.gson.Gson:491","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        {\n            if (src == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871542/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    com.google.gson.internal.bind.JsonTreeWriter com.google.gson.internal.bind.JsonTreeWriter = new com.google.gson.internal.bind.JsonTreeWriter();\n                    toJson(src, typeOfSrc, writer);\n                    return writer.get();\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871542/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:602","type":"CtUnaryOperatorImpl","sourcecode":"!(lenient)"},"failures":[27,28,56,29,58,59,60,61,62,51,63,64,65,68,69,70,71,311,312,1,2,3,78,313,314,4,315,316,317,79,296,81,82,83,84,30,86,87,88,90,92,32,318,95,97,319,98,99,100,102,320,321,322,323,324,325,326,327,328,103,104,105,106,107,109,110,5,6,111,112,115,118,121,474,123,475,125,329,330,128,130,131,331,133,136,138,139,141,332,147,476,477,148,333,334,335,336,337,338,339,340,341,342,152,343,298,344,345,346,347,348,349,299,154,350,300,301,351,352,353,354,355,356,155,357,358,359,360,156,361,478,362,157,52,158,159,160,363,161,162,163,364,365,164,165,366,367,368,166,369,370,371,372,373,167,374,375,376,377,378,169,379,170,171,380,381,172,382,383,384,173,174,177,178,179,180,182,183,184,187,189,192,193,194,195,385,386,196,197,387,388,389,390,391,392,393,394,395,198,199,200,201,202,396,203,397,204,398,399,400,401,291,205,402,207,403,208,404,405,406,209,210,211,212,213,215,217,407,408,409,410,219,411,412,220,221,222,223,224,225,226,227,228,229,413,414,415,416,417,418,419,420,421,292,422,53,230,232,293,423,233,235,236,237,12,238,240,241,424,20,425,426,21,427,428,22,429,430,23,431,24,432,433,45,434,39,46,47,435,436,437,438,439,48,440,441,442,25,49,443,50,40,444,13,14,297,15,16,243,445,244,245,247,250,294,446,253,254,256,447,257,295,258,448,449,450,451,260,452,453,454,455,262,265,266,269,270,456,457,458,273,274,479,480,481,275,276,482,277,26,483,278,459,460,289,461,305,306,484,485,486,487,462],"tindex":"2bac3c8f-3e5c-11e6-8a6f-19a6599b29da","method":{"position":"com.google.gson.stream.JsonWriter:234","type":"CtMethodImpl","sourcecode":"public final void setLenient(boolean lenient) {\n    if (!lenient) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871542/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = lenient;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"lenient"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[18],"tindex":"2bac63a0-3e5c-11e6-8a6f-01d7827af38a","method":{"position":"com.google.gson.JsonObject:100","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Boolean value) {\n    if (property == null) {\n        {\n            add(property, createJsonElement(value));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871542/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:455","type":"CtBinaryOperatorImpl","sourcecode":"(typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)"},"failures":[316,97,319,488,325,326,327,330,450,270],"tindex":"2bac63a1-3e5c-11e6-8a6f-893890cc4d5f","method":{"position":"com.google.gson.TreeTypeAdapter:103","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newTypeHierarchyFactory(java.lang.Class<?> hierarchyType, java.lang.Object typeAdapter) {\n    if ((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871542/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , null , false , hierarchyType);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[],"tindex":"2bac63a2-3e5c-11e6-8a6f-277d20523ed6","method":{"position":"com.google.gson.Gson:136","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src != null) {\n        {\n            return toJsonTree(src, typeOfSrc);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871542/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"2bac63a3-3e5c-11e6-8a6f-833d3fdb6674","method":{"position":"com.google.gson.Gson:468","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871542/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src == null) {\n                {\n                    if (src == null) {\n                        return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n                    } \n                    return toJsonTree(src, src.getClass());\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871542/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:540","type":"CtBinaryOperatorImpl","sourcecode":"c < 128"},"failures":[],"tindex":"2bac63a4-3e5c-11e6-8a6f-d7ce459e0d61","method":{"position":"com.google.gson.stream.JsonReader:755","type":"CtMethodImpl","sourcecode":"private boolean isLiteral(char c) throws java.io.IOException {\n    if (c < 128) {\n        {\n            switch (c) {\n                case '/' :\n                case '\\\\' :\n                case ';' :\n                case '#' :\n                case '=' :\n                    checkLenient();\n                case '{' :\n                case '}' :\n                case '[' :\n                case ']' :\n                case ':' :\n                case ',' :\n                case ' ' :\n                case '\\t' :\n                case '\\f' :\n                case '\\r' :\n                case '\\n' :\n                    return false;\n                default :\n                    return true;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871542/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"c"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.FieldNamingPolicy:143","type":"CtInvocationImpl","sourcecode":"java.lang.Character.isLetter(firstCharacter)"},"failures":[],"tindex":"2bac8ab5-3e5c-11e6-8a6f-91266df7d18c","method":{"position":"com.google.gson.FieldNamingPolicy:163","type":"CtMethodImpl","sourcecode":"private static java.lang.String modifyString(char firstCharacter, java.lang.String srcString, int indexOfSubstring) {\n    if (java.lang.Character.isLetter(firstCharacter)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871542/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return indexOfSubstring < (srcString.length()) ? firstCharacter + (srcString.substring(indexOfSubstring)) : java.lang.String.valueOf(firstCharacter);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"firstCharacter":"firstCharacter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:131","type":"CtBinaryOperatorImpl","sourcecode":"(type) instanceof java.lang.Class<?>"},"failures":[],"tindex":"2bac8ab6-3e5c-11e6-8a6f-67f7e6305f08","method":{"position":"com.google.gson.reflect.TypeToken:295","type":"CtMethodImpl","sourcecode":"public static com.google.gson.reflect.TypeToken<?> get(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871542/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new com.google.gson.reflect.TypeToken<java.lang.Object>(type);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"2bac8ab7-3e5c-11e6-8a6f-e771caccec4c","method":{"position":"com.google.gson.Gson:510","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src) {\n    if (src == null) {\n        {\n            if (src != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871542/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (src == null) {\n                        {\n                            if (src == null) {\n                                return toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull);\n                            } \n                            return toJson(src, src.getClass());\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871542/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871542/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:246","type":"CtVariableReadImpl","sourcecode":"unlink"},"failures":[],"tindex":"2bac8ab8-3e5c-11e6-8a6f-3bbd912dbbc4","method":{"position":"com.google.gson.internal.LinkedTreeMap:217","type":"CtMethodImpl","sourcecode":"void removeInternal(com.google.gson.internal.LinkedTreeMap.Node<K, V> node, boolean unlink) {\n    if (unlink) {\n        {\n            if (unlink) {\n                {\n                    if (unlink) {\n                        node.com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                        node.com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    } \n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    if ((left != null) && (right != null)) {\n                        com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = (left.int) > (right.int) ? left.last() : right.first();\n                        removeInternal(adjacent, false);\n                        int int = 0;\n                        left = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                        if (left != null) {\n                            leftHeight = left.int;\n                            adjacent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = left;\n                            left.com.google.gson.internal.LinkedTreeMap.Node<K, V> = adjacent;\n                            node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                        } \n                        int int = 0;\n                        right = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                        if (right != null) {\n                            rightHeight = right.int;\n                            adjacent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = right;\n                            right.com.google.gson.internal.LinkedTreeMap.Node<K, V> = adjacent;\n                            node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                        } \n                        adjacent.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                        replaceInParent(node, adjacent);\n                        return ;\n                    } else if (left != null) {\n                        replaceInParent(node, left);\n                        node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                    } else if (right != null) {\n                        replaceInParent(node, right);\n                        node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                    } else {\n                        replaceInParent(node, null);\n                    }\n                    rebalance(originalParent, false);\n                    (int)--;\n                    (int)++;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871542/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871542/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"unlink":"unlink"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:107","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonArray"},"failures":[],"tindex":"2bacb1c9-3e5c-11e6-8a6f-a51f125f7720","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:839","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonArray) {\n        {\n            return containsKey(o);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871542/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:243","type":"CtBinaryOperatorImpl","sourcecode":"annotation != null"},"failures":[],"tindex":"2bacb1ca-3e5c-11e6-8a6f-3f697041f244","method":{"position":"com.google.gson.internal.Excluder:242","type":"CtMethodImpl","sourcecode":"private boolean isValidUntil(com.google.gson.annotations.Until annotation) {\n    if (annotation != null) {\n        {\n            if (annotation != null) {\n                double double = annotation.value();\n                if (annotationVersion <= (double)) {\n                    return false;\n                } \n            } \n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871542/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"2bacb1cb-3e5c-11e6-8a6f-397e87c69a8a","method":{"position":"com.google.gson.Gson:552","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871542/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            if (src == null) {\n                {\n                    if (src != null) {\n                        toJson(src, src.getClass(), writer);\n                    } else {\n                        toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull, writer);\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871542/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"2bacd8dc-3e5c-11e6-8a6f-2be06d8071bc","method":{"position":"com.google.gson.Gson:719","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.lang.String json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871542/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (json == null) {\n                return null;\n            } \n            java.io.StringReader java.io.StringReader = new java.io.StringReader(json);\n            T T = ((T)(fromJson(reader, typeOfT)));\n            return target;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"2bacd8dd-3e5c-11e6-8a6f-59d69c4e3dad","method":{"position":"com.google.gson.Gson:491","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        {\n            if (src == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871542/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    com.google.gson.internal.bind.JsonTreeWriter com.google.gson.internal.bind.JsonTreeWriter = new com.google.gson.internal.bind.JsonTreeWriter();\n                    toJson(src, typeOfSrc, writer);\n                    return writer.get();\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871542/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"2bacd8de-3e5c-11e6-8a6f-55d170850353","method":{"position":"com.google.gson.Gson:285","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871542/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    float float = value.floatValue();\n                    checkValidFloatingPoint(floatValue);\n                    out.value(value);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871542/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[],"tindex":"2bacd8df-3e5c-11e6-8a6f-45273298c192","method":{"position":"com.google.gson.Gson:510","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src) {\n    if (src == null) {\n        {\n            if (src != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871542/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (src == null) {\n                        {\n                            if (src == null) {\n                                return toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull);\n                            } \n                            return toJson(src, src.getClass());\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871542/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871542/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"2bacd8e0-3e5c-11e6-8a6f-75f43c9799bb","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:101","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nvoid read(com.google.gson.stream.JsonReader reader, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871542/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            java.lang.Object java.lang.Object = com.google.gson.TypeAdapter<?>.read(reader);\n            if ((fieldValue != null) || (!isPrimitive)) {\n                field.set(value, fieldValue);\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"2bacfff1-3e5c-11e6-8a6f-0b78f4d34861","method":{"position":"com.google.gson.Gson:510","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src) {\n    if (src == null) {\n        {\n            if (src != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871542/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (src == null) {\n                        {\n                            if (src == null) {\n                                return toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull);\n                            } \n                            return toJson(src, src.getClass());\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871542/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871542/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:274","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[],"tindex":"2bacfff2-3e5c-11e6-8a6f-e529a5f08c23","method":{"position":"com.google.gson.Gson:273","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> floatAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871542/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return ((float)(in.nextDouble()));\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    float float = value.floatValue();\n                    checkValidFloatingPoint(floatValue);\n                    out.value(value);\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":47,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":215,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":360,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":135,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":6,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":106,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":157,"com.google.gson.MixedStreamTest.testWriteLenient":261,"com.google.gson.internal.bind.JsonTreeWriterTest.testPrematureClose":454,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":75,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":326,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":210,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":170,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":73,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":174,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":280,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":436,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":124,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":44,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":223,"com.google.gson.functional.ObjectTest.testSingletonLists":71,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":54,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":322,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":361,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":469,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":108,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":483,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":86,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":452,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":234,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":56,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":336,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":130,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":438,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":287,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":481,"com.google.gson.functional.EnumTest.testEnumCaseMapping":435,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":359,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":448,"com.google.gson.functional.JsonTreeTest.testToJsonTree":121,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":339,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":26,"com.google.gson.JsonObjectTest.testEqualsNonEmptyObject":495,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":51,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":307,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":427,"com.google.gson.internal.LinkedTreeMapTest.testLargeSetOfRandomKeys":489,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":374,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":64,"com.google.gson.internal.bind.JsonElementReaderTest.testNestedObjects":493,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":83,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":419,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":463,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":296,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":285,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":208,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":94,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":462,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":335,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":334,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":478,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":163,"com.google.gson.JsonParserTest.testParseString":486,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":256,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":411,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":97,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":394,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":321,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":158,"com.google.gson.functional.StreamingTypeAdaptersTest.testFromJsonTree":476,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":149,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":203,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":262,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":32,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":355,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":257,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":93,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":390,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":79,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":196,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":250,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":13,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":403,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":55,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":17,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":42,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":465,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":325,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":473,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":29,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":317,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":207,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":67,"com.google.gson.functional.CollectionTest.testSetDeserialization":173,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":125,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":82,"com.google.gson.functional.EnumTest.testEnumSet":430,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":43,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":271,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithNestedWildcards":0,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":344,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":87,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":41,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":241,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":31,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":109,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":282,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":416,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":386,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":140,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":214,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":200,"com.google.gson.functional.MapTest.testMapSerialization":348,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":216,"com.google.gson.internal.bind.JsonElementReaderTest.testObject":494,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":181,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":179,"com.google.gson.functional.MapTest.testSerializeMaps":343,"com.google.gson.functional.MapTest.testComplexKeysSerialization":134,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":455,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":398,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":66,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":232,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":229,"com.google.gson.internal.LinkedTreeMapTest.testRemoveRootDoesNotDoubleUnlink":492,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":152,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":298,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":127,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":8,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":96,"com.google.gson.functional.MapTest.testStringKeyDeserialization":482,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithBasicWildcards":2,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":272,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":259,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":356,"com.google.gson.functional.PrettyPrintingTest.testMap":337,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":382,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":370,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":218,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":304,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":451,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":365,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":314,"com.google.gson.functional.MapTest.testMapSerializationEmpty":354,"com.google.gson.functional.CollectionTest.testQueueSerialization":371,"com.google.gson.functional.MapTest.testMapOfMapSerialization":347,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":409,"com.google.gson.JavaSerializationTest.testMapIsSerializable":484,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":169,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":255,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":276,"com.google.gson.functional.FieldNamingTest.testIdentity":180,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":362,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":466,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":57,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":98,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":12,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":70,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":120,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":424,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":439,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":253,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":363,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":137,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":412,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":243,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":168,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":315,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":333,"com.google.gson.functional.MapTest.testMapSubclassSerialization":342,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":422,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":50,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":155,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":186,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":245,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":437,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":159,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":107,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":40,"com.google.gson.functional.EnumTest.testEnumSubclass":433,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":266,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":85,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":453,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":399,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":204,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":34,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":147,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":139,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":138,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":15,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":242,"com.google.gson.internal.LinkedTreeMapTest.testEqualsAndHashCode":491,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":11,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":410,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":329,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":72,"com.google.gson.MixedStreamTest.testWriteNulls":444,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":396,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":392,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":38,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":65,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":74,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":226,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":273,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":190,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":198,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":472,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":350,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":364,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":122,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":49,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":331,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":421,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":182,"com.google.gson.JsonParserTest.testParseMixedArray":450,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":402,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":254,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithTypeParameters":1,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":187,"com.google.gson.internal.bind.JsonTreeWriterTest.testWriteAfterClose":457,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":406,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":167,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":319,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":417,"com.google.gson.functional.MapTest.testMapDeserialization":479,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":316,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":340,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":341,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":222,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":447,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":24,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":345,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":225,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":426,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":153,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeMap":477,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":119,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":111,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":99,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":295,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":142,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":384,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":16,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":308,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":48,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":136,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":151,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":126,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":349,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":442,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":332,"com.google.gson.functional.PrimitiveTest.testShortSerialization":420,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":468,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":428,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictNansAndInfinities":263,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":289,"com.google.gson.internal.LinkedTreeMapTest.testIterationOrder":490,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":414,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":113,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":176,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":432,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":171,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":154,"com.google.gson.internal.LinkedTreeMapTest.testPutOverrides":487,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":267,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":378,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":160,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":460,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":230,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":249,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":458,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":268,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":10,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":23,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":33,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":100,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":233,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":300,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":461,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":209,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":28,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":35,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":104,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":78,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":434,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":144,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":379,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":112,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":172,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":380,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":467,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":221,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":227,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":320,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":202,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":311,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":228,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":20,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":265,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":260,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":193,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":224,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":431,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":220,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":183,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":76,"com.google.gson.functional.MapTest.testGeneralMapField":133,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":389,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":197,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":205,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":381,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":327,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":351,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":301,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":358,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":401,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":415,"com.google.gson.ObjectTypeAdapterTest.testDeserializeNullValue":4,"com.google.gson.MixedStreamTest.testReadMixedStreamed":248,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":407,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":201,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":376,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":440,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":53,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":288,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":30,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":115,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":480,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":368,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":274,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":423,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":62,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":237,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":459,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":318,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":58,"com.google.gson.functional.ObjectTest.testNestedDeserialization":105,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":278,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":91,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":281,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":217,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":14,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":286,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":189,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":7,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":39,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":258,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":143,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":161,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":213,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":377,"com.google.gson.functional.ObjectTest.testNullSerialization":294,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":146,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":132,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":400,"com.google.gson.functional.MapTest.testInterfaceTypeMap":131,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":383,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":19,"com.google.gson.JsonObjectTest.testAddingNullOrEmptyPropertyName":496,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":231,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":279,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":150,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":385,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":302,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":284,"com.google.gson.MixedStreamTest.testWriteClosed":247,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":219,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":373,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":22,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":77,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":45,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":18,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":192,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":102,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":188,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":117,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":25,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":80,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":372,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":238,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":240,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":148,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":375,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":323,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":471,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":165,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":405,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":118,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":68,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":387,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":191,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":408,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":425,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":239,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":330,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":95,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":129,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":313,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":103,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":164,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":369,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":244,"com.google.gson.functional.MapTest.testRawMapSerialization":353,"com.google.gson.JsonParserTest.testParseReader":485,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":89,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":141,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":185,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":429,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":441,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":297,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":391,"com.google.gson.functional.PrimitiveTest.testByteSerialization":418,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":443,"com.google.gson.ObjectTypeAdapterTest.testSerialize":251,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":291,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":162,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromRawTypes":3,"com.google.gson.JsonPrimitiveTest.testEqualsIntegerAndBigInteger":446,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":211,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":264,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":177,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":46,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":475,"com.google.gson.functional.MapTest.testMapWithQuotes":346,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":305,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":270,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":277,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":61,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":303,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":123,"com.google.gson.stream.JsonWriterTest.testLenientWriterPermitsMultipleTopLevelValues":449,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":474,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":37,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":101,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":128,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":310,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":413,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":81,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":397,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":116,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":306,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":212,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":236,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":312,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":299,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":252,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":328,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":388,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":145,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":59,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":156,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":470,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":275,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":88,"com.google.gson.functional.ObjectTest.testNestedSerialization":90,"com.google.gson.internal.LinkedTreeMapTest.testClear":488,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":194,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":357,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":404,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":290,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":352,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":184,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":27,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":445,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":464,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":84,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":21,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":52,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":114,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":269,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":92,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":110,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":235,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":366,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":395,"com.google.gson.functional.CollectionTest.testSetSerialization":175,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":206,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":36,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":338,"com.google.gson.functional.StringTest.testStringValueSerialization":367,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":69,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":9,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":166,"com.google.gson.MixedStreamTest.testWriteInvalidState":246,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":293,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":199,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":195,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":309,"com.google.gson.ObjectTypeAdapterTest.testDeserialize":5,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":178,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":63,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":60,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":283,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":456,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":47,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":324,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":292,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":393},"transformations":[{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"e47b4a84-3e5b-11e6-b39b-13880421158c","method":{"position":"com.google.gson.Gson:847","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(com.google.gson.JsonElement json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871491/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:105","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonObject"},"failures":[],"tindex":"e47b7195-3e5b-11e6-b39b-79dc6f677e88","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:808","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871491/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (!(o instanceof java.util.Map.Entry)) {\n                return false;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n            if (node == null) {\n                return false;\n            } \n            removeInternal(node, true);\n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:188","type":"CtBinaryOperatorImpl","sourcecode":"from == null"},"failures":[0,1,2,3],"tindex":"e47b98a6-3e5b-11e6-b39b-1d1d24a55c3e","method":{"position":"com.google.gson.reflect.TypeToken:122","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic boolean isAssignableFrom(java.lang.reflect.Type from) {\n    if (from == null) {\n        {\n            if (from == null) {\n                return false;\n            } \n            if (java.lang.reflect.Type.equals(from)) {\n                return true;\n            } \n            if ((java.lang.reflect.Type) instanceof java.lang.Class<?>) {\n                return java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from));\n            } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.ParameterizedType) {\n                return com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n            } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.GenericArrayType) {\n                return (java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from))) && (com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.GenericArrayType)(java.lang.reflect.Type))));\n            } else {\n                throw com.google.gson.reflect.TypeToken.buildUnexpectedTypeError(java.lang.reflect.Type, java.lang.Class.java.lang.Class.java.lang.Class, java.lang.reflect.ParameterizedType.java.lang.reflect.ParameterizedType.java.lang.Class, java.lang.reflect.GenericArrayType.java.lang.reflect.GenericArrayType.java.lang.Class);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871491/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory:43","type":"CtBinaryOperatorImpl","sourcecode":"annotation == null"},"failures":[],"tindex":"e47b98a7-3e5b-11e6-b39b-f1f212e29525","method":{"position":"com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory:50","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nstatic com.google.gson.TypeAdapter<?> getTypeAdapter(com.google.gson.internal.ConstructorConstructor constructorConstructor, com.google.gson.Gson gson, com.google.gson.reflect.TypeToken<?> fieldType, com.google.gson.annotations.JsonAdapter annotation) {\n    if (annotation == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871491/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.Class<?> java.lang.Class<?> = annotation.value();\n            if (com.google.gson.TypeAdapter.com.google.gson.TypeAdapter.java.lang.Class.isAssignableFrom(value)) {\n                java.lang.Class<com.google.gson.TypeAdapter<?>> java.lang.Class<com.google.gson.TypeAdapter<?>> = ((java.lang.Class<com.google.gson.TypeAdapter<?>>)(value));\n                return constructorConstructor.get(com.google.gson.reflect.TypeToken.get(typeAdapter)).construct();\n            } \n            if (com.google.gson.TypeAdapterFactory.com.google.gson.TypeAdapterFactory.java.lang.Class.isAssignableFrom(value)) {\n                java.lang.Class<com.google.gson.TypeAdapterFactory> java.lang.Class<com.google.gson.TypeAdapterFactory> = ((java.lang.Class<com.google.gson.TypeAdapterFactory>)(value));\n                return constructorConstructor.get(com.google.gson.reflect.TypeToken.get(typeAdapterFactory)).construct().create(gson, fieldType);\n            } \n            throw new java.lang.IllegalArgumentException(\"@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.\");\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl","sourcecode":"in == null"},"failures":[4,5],"tindex":"e47bbfb8-3e5b-11e6-b39b-630cd230920c","method":{"position":"com.google.gson.TypeAdapter:254","type":"CtMethodImpl","sourcecode":"public final T fromJson(java.io.Reader in) throws java.io.IOException {\n    if (in == null) {\n        {\n            com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(in);\n            return read(reader);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871491/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"in"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:127","type":"CtInvocationImpl","sourcecode":"raw.isInterface()"},"failures":[6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251],"tindex":"e47bbfb9-3e5b-11e6-b39b-ad1a3b6dfb5a","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:125","type":"CtMethodImpl","sourcecode":"private java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> getBoundFields(com.google.gson.Gson context, com.google.gson.reflect.TypeToken<?> type, java.lang.Class<?> raw) {\n    if (raw.isInterface()) {\n        {\n            java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> = new java.util.LinkedHashMap<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField>();\n            if (raw.isInterface()) {\n                return result;\n            } \n            java.lang.reflect.Type java.lang.reflect.Type = type.getType();\n            while (raw != (java.lang.Object.java.lang.Object.java.lang.Class)) {\n                java.lang.reflect.Field[] java.lang.reflect.Field[] = raw.getDeclaredFields();\n                for (java.lang.reflect.Field java.lang.reflect.Field : fields) {\n                    boolean boolean = excludeField(field, true);\n                    boolean boolean = excludeField(field, false);\n                    if ((!serialize) && (!deserialize)) {\n                        continue;\n                    } \n                    field.setAccessible(true);\n                    java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, field.getGenericType());\n                    com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = createBoundField(context, field, getFieldName(field), com.google.gson.reflect.TypeToken.get(fieldType), serialize, deserialize);\n                    com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = result.put(boundField.java.lang.String, boundField);\n                    if (previous != null) {\n                        throw new java.lang.IllegalArgumentException(((declaredType + \" declares multiple JSON fields named \") + (previous.java.lang.String)));\n                    } \n                }\n                type = com.google.gson.reflect.TypeToken.get(com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, raw.getGenericSuperclass()));\n                raw = type.getRawType();\n            }\n            return result;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871491/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"raw"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[252,253],"tindex":"e47be6ca-3e5b-11e6-b39b-37f95b438672","method":{"position":"com.google.gson.Gson:133","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src) {\n    if (src == null) {\n        {\n            return toJsonTree(src);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871491/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.internal.bind.DateTypeAdapter:86","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"e47be6cb-3e5b-11e6-b39b-13467f3b794e","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n@java.lang.Override\nvoid write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871491/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    } else {\n        {\n            java.lang.Object java.lang.Object = field.get(value);\n            com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n            t.write(writer, fieldValue);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[113],"tindex":"e47c0ddc-3e5b-11e6-b39b-ed463b8e6633","method":{"position":"com.google.gson.internal.bind.TypeAdapters:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871491/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"e47c0ddd-3e5b-11e6-b39b-33eb177c2327","method":{"position":"com.google.gson.JsonParser:44","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement parse(java.lang.String json) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871491/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            return parse(new java.io.StringReader(json));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:578","type":"CtBinaryOperatorImpl","sourcecode":"root == null"},"failures":[254],"tindex":"e47c0dde-3e5b-11e6-b39b-a545f891ba67","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:401","type":"CtMethodImpl","sourcecode":"private void rotateLeft(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root == null) {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivotLeft;\n            if (pivotLeft != null) {\n                pivotLeft.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            } \n            replaceInParent(root, pivot);\n            pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot;\n            root.int = (java.lang.Math.max((left != null ? left.int : 0), (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n            pivot.int = (java.lang.Math.max(root.int, (pivotRight != null ? pivotRight.int : 0))) + 1;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871491/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"root"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:274","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[255,256,257,258,259,260,261],"tindex":"e47c34ef-3e5b-11e6-b39b-515fb782be24","method":{"position":"com.google.gson.Gson:273","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> floatAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871491/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871491/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (serializeSpecialFloatingPointValues) {\n                        return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n                    } \n                    return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                        @java.lang.Override\n                        public java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                            if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                                in.nextNull();\n                                return null;\n                            } \n                            return ((float)(in.nextDouble()));\n                        }\n\n                        @java.lang.Override\n                        public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                            if (value == null) {\n                                out.nullValue();\n                                return ;\n                            } \n                            float float = value.floatValue();\n                            checkValidFloatingPoint(floatValue);\n                            out.value(value);\n                        }\n                    };\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:274","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[],"tindex":"e47c5c00-3e5b-11e6-b39b-1b4504e5f235","method":{"position":"com.google.gson.Gson:273","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> floatAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871491/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871491/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (serializeSpecialFloatingPointValues) {\n                        return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n                    } \n                    return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                        @java.lang.Override\n                        public java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                            if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                                in.nextNull();\n                                return null;\n                            } \n                            return ((float)(in.nextDouble()));\n                        }\n\n                        @java.lang.Override\n                        public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                            if (value == null) {\n                                out.nullValue();\n                                return ;\n                            } \n                            float float = value.floatValue();\n                            checkValidFloatingPoint(floatValue);\n                            out.value(value);\n                        }\n                    };\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"e47c5c01-3e5b-11e6-b39b-d1bb7bf64acb","method":{"position":"com.google.gson.Gson:695","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.lang.String json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871491/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:298","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[262,263],"tindex":"e47c8312-3e5b-11e6-b39b-c1ff0832ed7b","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:162","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(double value) throws java.io.IOException {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871491/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if ((!(isLenient())) && ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value)))) {\n                throw new java.lang.IllegalArgumentException((\"JSON forbids NaN and infinities: \" + value));\n            } \n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[56],"tindex":"e47c8313-3e5b-11e6-b39b-8d69bf83e463","method":{"position":"com.google.gson.Gson:136","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        {\n            return toJsonTree(src, typeOfSrc);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871491/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[18,24,43,54,56,57,58,62,69,70,74,84,87,89,90,97,99,102,108,109,118,119,120,121,127,128,133,141,162,163,164,170,171,172,174,264,197,265,266,267,268,214,215,216,218,236,269,250],"tindex":"e47c8314-3e5b-11e6-b39b-e1ea074d7add","method":{"position":"com.google.gson.internal.bind.TypeAdapters:267","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                {\n                    out.value(value);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871491/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871491/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:136","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.TypeVariable"},"failures":[],"tindex":"e47c8315-3e5b-11e6-b39b-c19d0cb06eed","method":{"position":"com.google.gson.internal.ConstructorConstructor:128","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nprivate <T>com.google.gson.internal.ObjectConstructor<T> newDefaultImplementationConstructor(final java.lang.reflect.Type type, java.lang.Class<? super T> rawType) {\n    if (type instanceof java.lang.reflect.TypeVariable) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871491/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (java.util.Collection.java.util.Collection.java.lang.Class.isAssignableFrom(rawType)) {\n                if (java.util.SortedSet.java.util.SortedSet.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.TreeSet<java.lang.Object>()));\n                        }\n                    };\n                } else if (java.util.EnumSet.java.util.EnumSet.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        @java.lang.SuppressWarnings(value = \"rawtypes\")\n                        public T construct() {\n                            if (type instanceof java.lang.reflect.ParameterizedType) {\n                                java.lang.reflect.Type java.lang.reflect.Type = ((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0];\n                                if (elementType instanceof java.lang.Class) {\n                                    return ((T)(java.util.EnumSet.noneOf(((java.lang.Class)(elementType)))));\n                                } else {\n                                    throw new com.google.gson.JsonIOException((\"Invalid EnumSet type: \" + (type.toString())));\n                                }\n                            } else {\n                                throw new com.google.gson.JsonIOException((\"Invalid EnumSet type: \" + (type.toString())));\n                            }\n                        }\n                    };\n                } else if (java.util.Set.java.util.Set.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedHashSet<java.lang.Object>()));\n                        }\n                    };\n                } else if (java.util.Queue.java.util.Queue.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedList<java.lang.Object>()));\n                        }\n                    };\n                } else {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.ArrayList<java.lang.Object>()));\n                        }\n                    };\n                }\n            } \n            if (java.util.Map.java.util.Map.java.lang.Class.isAssignableFrom(rawType)) {\n                if (java.util.SortedMap.java.util.SortedMap.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.TreeMap<java.lang.Object, java.lang.Object>()));\n                        }\n                    };\n                } else if ((type instanceof java.lang.reflect.ParameterizedType) && (!(java.lang.String.java.lang.String.java.lang.Class.isAssignableFrom(com.google.gson.reflect.TypeToken.get(((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0]).getRawType())))) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedHashMap<java.lang.Object, java.lang.Object>()));\n                        }\n                    };\n                } else {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new com.google.gson.internal.LinkedTreeMap<java.lang.String, java.lang.Object>()));\n                        }\n                    };\n                }\n            } \n            return null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"e47caa26-3e5b-11e6-b39b-dfe846cf675d","method":{"position":"com.google.gson.Gson:285","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871491/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            float float = value.floatValue();\n            checkValidFloatingPoint(floatValue);\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:602","type":"CtUnaryOperatorImpl","sourcecode":"!(lenient)"},"failures":[6,8,10,12,13,14,15,16,17,18,19,20,21,24,25,26,27,270,271,34,272,35,36,273,274,275,276,277,278,37,252,39,40,41,42,43,45,46,47,49,51,279,280,54,56,281,57,58,59,61,282,283,284,285,286,287,288,289,290,62,63,64,65,66,68,69,291,292,70,71,74,77,80,293,82,294,84,295,296,87,89,90,91,93,97,99,100,102,297,108,298,299,109,300,301,302,303,304,305,306,307,308,309,113,310,311,312,313,314,315,316,317,318,115,319,320,321,322,323,324,325,326,327,116,328,329,330,331,117,332,333,334,118,119,120,121,122,335,123,124,125,336,337,126,127,338,339,340,128,341,342,343,344,345,129,346,347,348,349,350,131,351,132,133,352,353,134,354,355,356,135,136,139,140,141,142,144,145,146,149,151,154,155,156,162,357,358,163,164,359,360,361,362,363,364,365,366,367,165,166,167,168,169,368,170,369,171,370,371,372,373,374,172,375,174,376,175,377,378,379,176,177,178,179,180,182,184,380,381,382,383,186,384,385,187,188,189,190,191,192,193,194,195,196,386,387,388,389,390,391,392,393,394,395,396,264,197,199,397,398,200,202,203,204,253,205,207,208,399,400,401,402,403,404,405,406,407,408,409,410,411,412,265,255,266,413,256,257,414,415,416,417,418,258,419,420,421,422,259,267,260,423,268,210,211,424,212,213,214,425,215,216,218,221,426,427,224,225,227,428,228,429,229,430,431,432,433,231,434,435,436,437,233,236,237,240,241,438,439,440,242,243,441,442,443,244,245,444,246,261,445,247,446,447,448,269,449,250,450,451,452,453,454,455,262,456,457,458,459,460,461,462,463,464],"tindex":"e47cd137-3e5b-11e6-b39b-73dede8cc77f","method":{"position":"com.google.gson.stream.JsonWriter:234","type":"CtMethodImpl","sourcecode":"public final void setLenient(boolean lenient) {\n    if (!lenient) {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = lenient;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871491/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"lenient"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"e47cd138-3e5b-11e6-b39b-b198ece95d31","method":{"position":"com.google.gson.Gson:719","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.lang.String json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            if (json == null) {\n                return null;\n            } \n            java.io.StringReader java.io.StringReader = new java.io.StringReader(json);\n            T T = ((T)(fromJson(reader, typeOfT)));\n            return target;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871491/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:497","type":"CtBinaryOperatorImpl","sourcecode":"(typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)"},"failures":[27,28,270,32,271,465,466,33,34,272,35,467,36,273,274,468,275,469,276,278,252,470,471,282,283,284,285,287,332,341,135,378,472,181,182,183,184,473,185,381,383,253,210,211,424,212,213,474,427,428,475,241,438,439,440],"tindex":"e47cd139-3e5b-11e6-b39b-0701a421868e","method":{"position":"com.google.gson.TreeTypeAdapter:92","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newFactoryWithMatchRawType(com.google.gson.reflect.TypeToken<?> exactType, java.lang.Object typeAdapter) {\n    if ((typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871491/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            boolean boolean = (exactType.getType()) == (exactType.getRawType());\n            return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , exactType , matchRawType , null);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:180","type":"CtUnaryOperatorImpl","sourcecode":"!(b instanceof java.lang.reflect.GenericArrayType)"},"failures":[],"tindex":"e47cf84a-3e5b-11e6-b39b-8566c9b697af","method":{"position":"com.google.gson.internal.LinkedTreeMap:207","type":"CtMethodImpl","sourcecode":"private boolean equal(java.lang.Object a, java.lang.Object b) {\n    if (!(b instanceof java.lang.reflect.GenericArrayType)) {\n        {\n            return (a == b) || ((a != null) && (a.equals(b)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871491/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"e47cf84b-3e5b-11e6-b39b-cf76dee8f3ec","method":{"position":"com.google.gson.Gson:591","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        {\n            if (src == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871491/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            } else {\n                {\n                    if (src == null) {\n                        {\n                            com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = getAdapter(com.google.gson.reflect.TypeToken.get(typeOfSrc));\n                            boolean boolean = writer.isLenient();\n                            writer.setLenient(true);\n                            boolean boolean = writer.isHtmlSafe();\n                            writer.setHtmlSafe(boolean);\n                            boolean boolean = writer.getSerializeNulls();\n                            writer.setSerializeNulls(boolean);\n                            try {\n                                ((com.google.gson.TypeAdapter<java.lang.Object>)(adapter)).write(writer, src);\n                            } catch (java.io.IOException e) {\n                                throw new com.google.gson.JsonIOException(e);\n                            } finally {\n                                writer.setLenient(oldLenient);\n                                writer.setHtmlSafe(oldHtmlSafe);\n                                writer.setSerializeNulls(oldSerializeNulls);\n                            }\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871491/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new com.google.gson.JsonIOException();\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871491/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"e47cf84c-3e5b-11e6-b39b-5b1699ced911","method":{"position":"com.google.gson.internal.bind.TypeAdapters:267","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                {\n                    out.value(value);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871491/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871491/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:109","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonPrimitive"},"failures":[],"tindex":"e47cf84d-3e5b-11e6-b39b-fb466f3ac81c","method":{"position":"com.google.gson.internal.$Gson$Types:511","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    return (o instanceof java.lang.reflect.GenericArrayType) && (com.google.gson.internal.$Gson$Types.equals(com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl.this, ((java.lang.reflect.GenericArrayType)(o))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:378","type":"CtVariableReadImpl","sourcecode":"insert"},"failures":[15,16,20,21,26,465,275,476,477,56,61,291,292,108,478,309,118,119,120,121,479,480,481,482,155,157,158,159,160,161,483,183,473,185,191,192,200,202,203,215,220,484,485,486,250,5,487,488,489,490,491,492,493,494,458,459,495,496],"tindex":"e47d1f5e-3e5b-11e6-b39b-2709d196b7e5","method":{"position":"com.google.gson.internal.LinkedTreeMap:310","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (insert) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871491/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            for (com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>) {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                int int = left != null ? left.int : 0;\n                int int = right != null ? right.int : 0;\n                int int = leftHeight - rightHeight;\n                if (delta == (-2)) {\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    int int = rightRight != null ? rightRight.int : 0;\n                    int int = rightLeft != null ? rightLeft.int : 0;\n                    int int = rightLeftHeight - rightRightHeight;\n                    if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                        rotateLeft(node);\n                    } else {\n                        assert rightDelta == 1;\n                        rotateRight(right);\n                        rotateLeft(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 2) {\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    int int = leftRight != null ? leftRight.int : 0;\n                    int int = leftLeft != null ? leftLeft.int : 0;\n                    int int = leftLeftHeight - leftRightHeight;\n                    if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                        rotateRight(node);\n                    } else {\n                        assert leftDelta == (-1);\n                        rotateLeft(left);\n                        rotateRight(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 0) {\n                    node.int = leftHeight + 1;\n                    if (insert) {\n                        break;\n                    } \n                } else {\n                    assert (delta == (-1)) || (delta == 1);\n                    node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                    if (!insert) {\n                        break;\n                    } \n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"insert"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:85","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[],"tindex":"e47d1f5f-3e5b-11e6-b39b-ffdb125975b9","method":{"position":"com.google.gson.internal.$Gson$Types:411","type":"CtMethodImpl","sourcecode":"private static int indexOf(java.lang.Object[] array, java.lang.Object toFind) {\n    for (int int = 0 ; i < (array.int) ; i++) {\n        if (toFind.equals(array[i])) {\n            return i;\n        } \n    }\n    throw new java.util.NoSuchElementException();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"toFind"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"e47d4670-3e5b-11e6-b39b-83cb71160e6b","method":{"position":"com.google.gson.Gson:591","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        {\n            if (src == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871491/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            } else {\n                {\n                    if (src == null) {\n                        {\n                            com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = getAdapter(com.google.gson.reflect.TypeToken.get(typeOfSrc));\n                            boolean boolean = writer.isLenient();\n                            writer.setLenient(true);\n                            boolean boolean = writer.isHtmlSafe();\n                            writer.setHtmlSafe(boolean);\n                            boolean boolean = writer.getSerializeNulls();\n                            writer.setSerializeNulls(boolean);\n                            try {\n                                ((com.google.gson.TypeAdapter<java.lang.Object>)(adapter)).write(writer, src);\n                            } catch (java.io.IOException e) {\n                                throw new com.google.gson.JsonIOException(e);\n                            } finally {\n                                writer.setLenient(oldLenient);\n                                writer.setHtmlSafe(oldHtmlSafe);\n                                writer.setSerializeNulls(oldSerializeNulls);\n                            }\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871491/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new com.google.gson.JsonIOException();\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871491/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[416,448],"tindex":"e47d4671-3e5b-11e6-b39b-579beaf268cd","method":{"position":"com.google.gson.Gson:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            out.value(value.toString());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871491/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:565","type":"CtBinaryOperatorImpl","sourcecode":"(indent) == null"},"failures":[],"tindex":"e47d4672-3e5b-11e6-b39b-6dc12b866048","method":{"position":"com.google.gson.stream.JsonWriter:212","type":"CtMethodImpl","sourcecode":"public final void setIndent(java.lang.String indent) {\n    if (indent == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871491/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((indent.length()) == 0) {\n                com.google.gson.stream.JsonWriter.this.java.lang.String = null;\n                com.google.gson.stream.JsonWriter.this.java.lang.String = \":\";\n            } else {\n                com.google.gson.stream.JsonWriter.this.java.lang.String = indent;\n                com.google.gson.stream.JsonWriter.this.java.lang.String = \": \";\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"indent"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:164","type":"CtBinaryOperatorImpl","sourcecode":"from instanceof java.lang.reflect.GenericArrayType"},"failures":[0,1,2],"tindex":"e47d4673-3e5b-11e6-b39b-659e429179c2","method":{"position":"com.google.gson.reflect.TypeToken:185","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.ParameterizedType to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeVarMap) {\n    if (from instanceof java.lang.reflect.GenericArrayType) {\n        {\n            if (from == null) {\n                return false;\n            } \n            if (to.equals(from)) {\n                return true;\n            } \n            java.lang.Class<?> java.lang.Class<?> = com.google.gson.internal.$Gson$Types.getRawType(from);\n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = null;\n            if (from instanceof java.lang.reflect.ParameterizedType) {\n                ptype = ((java.lang.reflect.ParameterizedType)(from));\n            } \n            if (ptype != null) {\n                java.lang.reflect.Type[] java.lang.reflect.Type[] = ptype.getActualTypeArguments();\n                java.lang.reflect.TypeVariable<?>[] java.lang.reflect.TypeVariable<?>[] = clazz.getTypeParameters();\n                for (int int = 0 ; i < (tArgs.int) ; i++) {\n                    java.lang.reflect.Type java.lang.reflect.Type = tArgs[i];\n                    java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = tParams[i];\n                    while (arg instanceof java.lang.reflect.TypeVariable<?>) {\n                        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(arg));\n                        arg = typeVarMap.get(v.getName());\n                    }\n                    typeVarMap.put(var.getName(), arg);\n                }\n                if (com.google.gson.reflect.TypeToken.typeEquals(ptype, to, typeVarMap)) {\n                    return true;\n                } \n            } \n            for (java.lang.reflect.Type java.lang.reflect.Type : clazz.getGenericInterfaces()) {\n                if (com.google.gson.reflect.TypeToken.isAssignableFrom(itype, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap))) {\n                    return true;\n                } \n            }\n            java.lang.reflect.Type java.lang.reflect.Type = clazz.getGenericSuperclass();\n            return com.google.gson.reflect.TypeToken.isAssignableFrom(sType, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871491/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[113,146],"tindex":"e47d6d84-3e5b-11e6-b39b-f32ada645f6b","method":{"position":"com.google.gson.Gson:261","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871491/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            double double = value.doubleValue();\n            checkValidFloatingPoint(doubleValue);\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[],"tindex":"e47d6d85-3e5b-11e6-b39b-45172e07d60a","method":{"position":"com.google.gson.FieldNamingPolicy:137","type":"CtMethodImpl","sourcecode":"private static java.lang.String upperCaseFirstLetter(java.lang.String name) {\n    if (name == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871491/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            int int = 0;\n            char char = name.charAt(index);\n            while (index < ((name.length()) - 1)) {\n                if (java.lang.Character.isLetter(firstCharacter)) {\n                    break;\n                } \n                fieldNameBuilder.append(firstCharacter);\n                firstCharacter = name.charAt((++index));\n            }\n            if (index == (name.length())) {\n                return fieldNameBuilder.toString();\n            } \n            if (!(java.lang.Character.isUpperCase(firstCharacter))) {\n                java.lang.String java.lang.String = com.google.gson.FieldNamingPolicy.modifyString(java.lang.Character.toUpperCase(firstCharacter), name, (++index));\n                return fieldNameBuilder.append(modifiedTarget).toString();\n            } else {\n                return name;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:602","type":"CtUnaryOperatorImpl","sourcecode":"!(lenient)"},"failures":[],"tindex":"e47d6d86-3e5b-11e6-b39b-4989e34248eb","method":{"position":"com.google.gson.stream.JsonReader:325","type":"CtMethodImpl","sourcecode":"public final void setLenient(boolean lenient) {\n    if (!lenient) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871491/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.stream.JsonReader.this.boolean = lenient;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"lenient"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:107","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonArray"},"failures":[],"tindex":"e47d6d87-3e5b-11e6-b39b-cf833c61a0f6","method":{"position":"com.google.gson.JsonArray:329","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonArray) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871491/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (o == (com.google.gson.JsonArray.this)) || ((o instanceof com.google.gson.JsonArray) && (((com.google.gson.JsonArray)(o)).java.util.List<com.google.gson.JsonElement>.equals(java.util.List<com.google.gson.JsonElement>)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:141","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.WildcardType"},"failures":[],"tindex":"e47d9498-3e5b-11e6-b39b-0bc7fdc9536c","method":{"position":"com.google.gson.internal.Primitives:79","type":"CtMethodImpl","sourcecode":"public static boolean isWrapperType(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.WildcardType) {\n        {\n            return com.google.gson.internal.Primitives.com.google.gson.internal.Primitives.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.containsKey(com.google.gson.internal.$Gson$Preconditions.checkNotNull(type));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871491/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:726","type":"CtBinaryOperatorImpl","sourcecode":"value == 0"},"failures":[],"tindex":"e47d9499-3e5b-11e6-b39b-9f973a1dc881","method":{"position":"com.google.gson.stream.JsonWriter:476","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(long value) throws java.io.IOException {\n    if (value == 0) {\n        {\n            writeDeferredName();\n            beforeValue(false);\n            java.io.Writer.write(java.lang.Long.toString(value));\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871491/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"e47d949a-3e5b-11e6-b39b-fd6cbb225568","method":{"position":"com.google.gson.Gson:591","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        {\n            if (src == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871491/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            } else {\n                {\n                    if (src == null) {\n                        {\n                            com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = getAdapter(com.google.gson.reflect.TypeToken.get(typeOfSrc));\n                            boolean boolean = writer.isLenient();\n                            writer.setLenient(true);\n                            boolean boolean = writer.isHtmlSafe();\n                            writer.setHtmlSafe(boolean);\n                            boolean boolean = writer.getSerializeNulls();\n                            writer.setSerializeNulls(boolean);\n                            try {\n                                ((com.google.gson.TypeAdapter<java.lang.Object>)(adapter)).write(writer, src);\n                            } catch (java.io.IOException e) {\n                                throw new com.google.gson.JsonIOException(e);\n                            } finally {\n                                writer.setLenient(oldLenient);\n                                writer.setHtmlSafe(oldHtmlSafe);\n                                writer.setSerializeNulls(oldSerializeNulls);\n                            }\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871491/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new com.google.gson.JsonIOException();\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246871491/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":39,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
{"failureDictionary":{"com.google.gson.JsonStreamParserTest.testNoSideEffectForHasNext":2,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":23,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":421,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":22,"com.google.gson.JsonPrimitiveTest.testDeepCopy":106,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":144,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":296,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":65,"com.google.gson.internal.bind.JsonTreeWriterTest.testPrematureClose":118,"com.google.gson.MixedStreamTest.testWriteLenient":276,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":42,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":60,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":249,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":252,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":443,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":445,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":174,"com.google.gson.internal.bind.JsonElementReaderTest.testStrictNansAndInfinities":132,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":303,"com.google.gson.JsonParserTest.testParseUnquotedMultiWordStringFails":89,"com.google.gson.functional.ObjectTest.testSingletonLists":190,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":236,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":375,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":422,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":55,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":47,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":317,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":498,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":248,"com.google.gson.DefaultDateTypeAdapterTest.testDatePattern":5,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":86,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":429,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":486,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":313,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":78,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":485,"com.google.gson.functional.EnumTest.testEnumCaseMapping":442,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":322,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":420,"com.google.gson.functional.JsonTreeTest.testToJsonTree":31,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":432,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":45,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":37,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":41,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":230,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":246,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":492,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":298,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":454,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":181,"com.google.gson.JsonPrimitiveTest.testParsingStringAsBoolean":102,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":412,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":468,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":389,"com.google.gson.internal.bind.JsonElementReaderTest.testLenientNansAndInfinities":131,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":77,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":260,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":114,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":356,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":382,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":241,"com.google.gson.JsonParserTest.testParseString":91,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":247,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":404,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":270,"com.google.gson.DefaultDateTypeAdapterTest.testFormatUsesDefaultTimezone":9,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":200,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":349,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":374,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":66,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":481,"com.google.gson.functional.StreamingTypeAdaptersTest.testFromJsonTree":82,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":154,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":59,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":120,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":289,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":338,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":405,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":199,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":345,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":92,"com.google.gson.JsonPrimitiveTest.testEqualsAcrossTypes":109,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":256,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":147,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":394,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":488,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":156,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":224,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":309,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":290,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":490,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":494,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":17,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":377,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":306,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":371,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":259,"com.google.gson.functional.CollectionTest.testSetDeserialization":512,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":175,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":194,"com.google.gson.functional.EnumTest.testEnumSet":438,"com.google.gson.JsonStreamParserTest.testIterator":3,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":225,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":49,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithNestedWildcards":319,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":326,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":196,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":223,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":266,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":308,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":75,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":179,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":408,"com.google.gson.functional.MapTest.testHashMapDeserialization":475,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":509,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":277,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":461,"com.google.gson.DefaultDateTypeAdapterTest.testParsingDatesFormattedWithSystemLocale":7,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":140,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":148,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":57,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":495,"com.google.gson.functional.MapTest.testSortedMap":487,"com.google.gson.functional.MapTest.testMapSerialization":330,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":141,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":13,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":165,"com.google.gson.functional.MapTest.testSerializeMaps":325,"com.google.gson.functional.MapTest.testComplexKeysSerialization":336,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":21,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":119,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":355,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":183,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":219,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":383,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":115,"com.google.gson.internal.bind.JsonElementReaderTest.testWrongType":133,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":212,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":145,"com.google.gson.functional.MapTest.testStringKeyDeserialization":489,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithBasicWildcards":320,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":292,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":416,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":339,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":311,"com.google.gson.functional.PrettyPrintingTest.testMap":430,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":450,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":142,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":360,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":275,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":316,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":426,"com.google.gson.functional.MapTest.testMapSerializationEmpty":337,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":368,"com.google.gson.functional.CollectionTest.testQueueSerialization":451,"com.google.gson.functional.MapTest.testMapOfMapSerialization":329,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":269,"com.google.gson.JavaSerializationTest.testMapIsSerializable":471,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":511,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":171,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":402,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":295,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictBoxedNansAndInfinities":124,"com.google.gson.functional.FieldNamingTest.testIdentity":166,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":423,"com.google.gson.JsonStreamParserTest.testCallingNextBeyondAvailableInput":0,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":50,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":204,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":30,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":62,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":146,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":189,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":314,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":88,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":424,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":400,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":137,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":170,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":369,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":381,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":474,"com.google.gson.functional.MapTest.testMapSubclassSerialization":324,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":415,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":262,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":505,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":254,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":265,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":444,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":67,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":222,"com.google.gson.functional.EnumTest.testEnumSubclass":440,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":403,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":318,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":391,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":257,"com.google.gson.GsonBuilderTest.testRegisterTypeAdapterForCoreType":278,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":51,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":188,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":33,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":136,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":496,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":284,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":399,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":379,"com.google.gson.MixedStreamTest.testWriteNulls":110,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":280,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":351,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":501,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":347,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":182,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":504,"com.google.gson.CommentsTest.testParseComments":516,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":52,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":191,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":210,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":12,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":332,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":425,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":172,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":229,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":288,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":414,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":14,"com.google.gson.JsonParserTest.testParseMixedArray":94,"com.google.gson.DefaultDateTypeAdapterTest.testParsingDatesFormattedWithUsLocale":10,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":393,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithTypeParameters":473,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":207,"com.google.gson.internal.bind.JsonTreeWriterTest.testWriteAfterClose":125,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":268,"com.google.gson.JsonArrayTest.testRemove":113,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":169,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":285,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":409,"com.google.gson.functional.MapTest.testMapDeserialization":480,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":370,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":433,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":279,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":101,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":159,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":327,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":216,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":434,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":29,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":506,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":201,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":388,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":150,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":459,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":34,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":361,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":304,"com.google.gson.internal.bind.JsonElementReaderTest.testNumbersFromStrings":134,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":155,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":187,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":211,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":331,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":98,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":44,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":54,"com.google.gson.functional.PrimitiveTest.testShortSerialization":413,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":299,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictNansAndInfinities":122,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":302,"com.google.gson.JsonParserTest.testParseEmptyString":95,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":406,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":363,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":162,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":81,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":250,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":261,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":477,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":83,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":417,"com.google.gson.DefaultDateTypeAdapterTest.testFormattingInFr":8,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":68,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":128,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":287,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":126,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":419,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":244,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":283,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":202,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":291,"com.google.gson.JsonPrimitiveTest.testStringsAndChar":103,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":129,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":232,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":357,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":297,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":185,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":441,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":151,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":341,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":251,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":458,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":293,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":214,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":217,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":373,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":58,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":365,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":218,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":35,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":507,"com.google.gson.JsonArrayTest.testSet":111,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":401,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":418,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":238,"com.google.gson.JsonPrimitiveTest.testEquals":105,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":215,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":439,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":24,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":15,"com.google.gson.functional.MapTest.testGeneralMapField":20,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":344,"com.google.gson.DefaultDateTypeAdapterTest.testDateSerialization":4,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":84,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":161,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":258,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":378,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":333,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":38,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":321,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":448,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":407,"com.google.gson.JsonObjectTest.testDeepCopy":116,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":397,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":482,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":315,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":456,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":500,"com.google.gson.internal.bind.JsonTreeWriterTest.testEmptyWriter":123,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":436,"com.google.gson.JavaSerializationTest.testNumberIsSerializable":470,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":307,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":176,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":483,"com.google.gson.JsonArrayTest.testDeepCopy":112,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":437,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":476,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":53,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":272,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":237,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":234,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":127,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":372,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":502,"com.google.gson.JsonPrimitiveTest.testEqualsDoesNotEquateStringAndNonStringTypes":104,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":205,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":510,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":56,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":87,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":390,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":32,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":301,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":209,"com.google.gson.JsonParserTest.testParseUnquotedStringArrayFails":96,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":281,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":484,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":221,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":411,"com.google.gson.JavaSerializationTest.testListIsSerializable":472,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":64,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":69,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":457,"com.google.gson.functional.ObjectTest.testNullSerialization":387,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":153,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":478,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":139,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":392,"com.google.gson.functional.MapTest.testInterfaceTypeMap":19,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":85,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":158,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":231,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":243,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":460,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":358,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":76,"com.google.gson.MixedStreamTest.testWriteClosed":467,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":453,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":192,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":491,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":226,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":157,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":73,"com.google.gson.LongSerializationPolicyTest.testStringLongSerialization":11,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":203,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":208,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":178,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":160,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":193,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":452,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeWithCustomTypeAdapter":310,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":235,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":455,"com.google.gson.DefaultDateTypeAdapterTest.testFormattingInEnUs":6,"com.google.gson.internal.bind.JsonElementReaderTest.testSkipValue":130,"com.google.gson.internal.bind.JsonElementReaderTest.testStrings":135,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":286,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":71,"com.google.gson.JsonPrimitiveTest.testParsingStringAsNumber":108,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":167,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":396,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":28,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":184,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":342,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":72,"com.google.gson.functional.CollectionTest.testQueueDeserialization":514,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":398,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":340,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":380,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":138,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":367,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":242,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":497,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":449,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":264,"com.google.gson.functional.MapTest.testRawMapSerialization":335,"com.google.gson.JsonParserTest.testParseReader":90,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":513,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":493,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":245,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":149,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":197,"com.google.gson.JsonPrimitiveTest.testExponential":107,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":18,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":435,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":97,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":46,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":99,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":346,"com.google.gson.functional.PrimitiveTest.testByteSerialization":410,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":25,"com.google.gson.ObjectTypeAdapterTest.testSerialize":267,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":240,"com.google.gson.JsonPrimitiveTest.testEqualsIntegerAndBigInteger":462,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":61,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":352,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":163,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":227,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":312,"com.google.gson.functional.MapTest.testMapWithQuotes":328,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":39,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":48,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":499,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":385,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":27,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":359,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":173,"com.google.gson.stream.JsonWriterTest.testLenientWriterPermitsMultipleTopLevelValues":464,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":74,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":220,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":213,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":271,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":364,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":354,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":177,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":40,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":63,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":233,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":366,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":384,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":43,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":79,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":343,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":152,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":206,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":263,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":80,"com.google.gson.internal.LinkedHashTreeMapTest.testRemoveRootDoesNotDoubleUnlink":469,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":273,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":294,"com.google.gson.JsonObjectTest.testAddingStringProperties":117,"com.google.gson.functional.ObjectTest.testNestedSerialization":198,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":239,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":395,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":447,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":446,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":334,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":16,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":70,"com.google.gson.JsonParserTest.testParseUnquotedSingleWordStringFails":93,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":463,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":466,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":195,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":503,"com.google.gson.JsonPrimitiveTest.testBoolean":100,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":36,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":323,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":274,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":427,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":350,"com.google.gson.functional.CollectionTest.testSetSerialization":253,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":515,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":186,"com.google.gson.functional.StringTest.testStringValueSerialization":428,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":431,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":143,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":168,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":282,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":508,"com.google.gson.MixedStreamTest.testWriteInvalidState":465,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":386,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":353,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":255,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":362,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":164,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":180,"com.google.gson.JsonStreamParserTest.testParseTwoStrings":1,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":121,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":300,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":228,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":376,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":26,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":479,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":305,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":348},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:274","type":"CtBinaryOperatorImpl","sourcecode":"target instanceof java.lang.String"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135],"tindex":"7b9ee359-3e43-11e6-9e84-23546b93ff2c","method":{"position":"com.google.gson.JsonPrimitive:273","type":"CtMethodImpl","sourcecode":"private static boolean isPrimitiveOrString(java.lang.Object target) {\n    if (target instanceof java.lang.String) {\n        {\n            if (target instanceof java.lang.String) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236532642/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (target instanceof java.lang.String) {\n                        return true;\n                    } \n                    java.lang.Class<?> java.lang.Class<?> = target.getClass();\n                    for (java.lang.Class<?> java.lang.Class<?> : com.google.gson.JsonPrimitive.com.google.gson.JsonPrimitive.java.lang.Class<?>[]) {\n                        if (standardPrimitive.isAssignableFrom(classOfPrimitive)) {\n                            return true;\n                        } \n                    }\n                    return false;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236532642/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"target":"target"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.JsonObject:54","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[136,137,14,16,138,19,139,20,22,140,23,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,27,28,29,30,31,32,33,34,156,157,158,35,36,159,160,37,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,47,179,180,181,182,183,184,51,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,57,58,59,60,61,63,64,70,204,205,206,207,208,209,210,72,73,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,86,257,258,259,260,261,262,263,92,264,265,266,267],"tindex":"7b9f317a-3e43-11e6-9e84-93fe372b59f1","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:108","type":"CtMethodImpl","sourcecode":"public boolean writeField(java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value == null) {\n        {\n            if (!(boolean))\n                return false;\n            \n            java.lang.Object java.lang.Object = field.get(value);\n            return fieldValue != value;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236532642/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:79","type":"CtUnaryOperatorImpl","sourcecode":"!(json instanceof com.google.gson.JsonPrimitive)"},"failures":[],"tindex":"7b9f588b-3e43-11e6-9e84-6ff0767ac2f1","method":{"position":"com.google.gson.Gson:127","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonParseException {\n    if (json == null) {\n        {\n            if (!(json instanceof com.google.gson.JsonPrimitive)) {\n                {\n                    return ((T)(fromJson(json, typeOfT)));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236532642/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonParseException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236532642/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[144,145,146,268,269,270,271,272,225,273,243,244,245,274,246,247,275,276],"tindex":"7b9f588c-3e43-11e6-9e84-c51633dc43f7","method":{"position":"com.google.gson.Gson:261","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            double double = value.doubleValue();\n            checkValidFloatingPoint(doubleValue);\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236532642/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[],"tindex":"7b9f7f9d-3e43-11e6-9e84-cf32a22c7d29","method":{"position":"com.google.gson.Gson:552","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236532642/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            if (src != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236532642/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            } else {\n                {\n                    if (src != null) {\n                        toJson(src, src.getClass(), writer);\n                    } else {\n                        toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull, writer);\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"7b9f7f9e-3e43-11e6-9e84-751a2b2c94a1","method":{"position":"com.google.gson.Gson:127","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonParseException {\n    if (json == null) {\n        {\n            if (!(json instanceof com.google.gson.JsonPrimitive)) {\n                {\n                    return ((T)(fromJson(json, typeOfT)));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236532642/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonParseException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236532642/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:578","type":"CtBinaryOperatorImpl","sourcecode":"root == null"},"failures":[],"tindex":"7b9f7f9f-3e43-11e6-9e84-bb3d5821760a","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:401","type":"CtMethodImpl","sourcecode":"private void rotateLeft(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236532642/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivotLeft;\n            if (pivotLeft != null) {\n                pivotLeft.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            } \n            replaceInParent(root, pivot);\n            pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot;\n            root.int = (java.lang.Math.max((left != null ? left.int : 0), (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n            pivot.int = (java.lang.Math.max(root.int, (pivotRight != null ? pivotRight.int : 0))) + 1;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.FieldNamingPolicy:143","type":"CtInvocationImpl","sourcecode":"java.lang.Character.isLetter(firstCharacter)"},"failures":[],"tindex":"7b9fa6b0-3e43-11e6-9e84-b7e97f7ac61b","method":{"position":"com.google.gson.FieldNamingPolicy:163","type":"CtMethodImpl","sourcecode":"private static java.lang.String modifyString(char firstCharacter, java.lang.String srcString, int indexOfSubstring) {\n    if (java.lang.Character.isLetter(firstCharacter)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236532642/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (java.lang.Character.isLetter(firstCharacter)) {\n                {\n                    return indexOfSubstring < (srcString.length()) ? firstCharacter + (srcString.substring(indexOfSubstring)) : java.lang.String.valueOf(firstCharacter);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236532642/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"firstCharacter":"firstCharacter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"7b9fcdc1-3e43-11e6-9e84-c1070f41d68c","method":{"position":"com.google.gson.Gson:552","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236532642/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            if (src != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236532642/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            } else {\n                {\n                    if (src != null) {\n                        toJson(src, src.getClass(), writer);\n                    } else {\n                        toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull, writer);\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:99","type":"CtVariableReadImpl","sourcecode":"serialization"},"failures":[140,23,141,277,24],"tindex":"7ba01be2-3e43-11e6-9e84-e99193b62600","method":{"position":"com.google.gson.internal.Excluder:96","type":"CtMethodImpl","sourcecode":"public com.google.gson.internal.Excluder withExclusionStrategy(com.google.gson.ExclusionStrategy exclusionStrategy, boolean serialization, boolean deserialization) {\n    if (serialization) {\n        {\n            com.google.gson.internal.Excluder com.google.gson.internal.Excluder = clone();\n            if (serialization) {\n                result.java.util.List<com.google.gson.ExclusionStrategy> = new java.util.ArrayList<com.google.gson.ExclusionStrategy>(java.util.List<com.google.gson.ExclusionStrategy>);\n                result.java.util.List<com.google.gson.ExclusionStrategy>.add(exclusionStrategy);\n            } \n            if (deserialization) {\n                result.java.util.List<com.google.gson.ExclusionStrategy> = new java.util.ArrayList<com.google.gson.ExclusionStrategy>(java.util.List<com.google.gson.ExclusionStrategy>);\n                result.java.util.List<com.google.gson.ExclusionStrategy>.add(exclusionStrategy);\n            } \n            return result;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236532642/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serialization":"serialization"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:141","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.WildcardType"},"failures":[278,12,13,14,15,16,17,18,279,280,22,144,281,145,282,283,284,146,147,285,286,287,288,44,180,182,48,289,49,290,50,291,51,292,185,293,186,52,53,54,294,55,295,56,296,60,61,62,63,64,70,297,71,74,298,299,75,300,76,77,301,78,302,79,303,304,80,305,306,307,308,309,243,244,310,83,84,311,85,88,312,266,313,314,315,316,317,318],"tindex":"7ba042f3-3e43-11e6-9e84-3d03bcc3882a","method":{"position":"com.google.gson.GsonBuilder:447","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\npublic com.google.gson.GsonBuilder registerTypeAdapter(java.lang.reflect.Type type, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof java.lang.reflect.WildcardType) {\n        {\n            com.google.gson.internal.$Gson$Preconditions.checkArgument(((((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) || (typeAdapter instanceof com.google.gson.InstanceCreator<?>)) || (typeAdapter instanceof com.google.gson.TypeAdapter<?>)));\n            if (typeAdapter instanceof com.google.gson.InstanceCreator<?>) {\n                java.util.Map<java.lang.reflect.Type, com.google.gson.InstanceCreator<?>>.put(type, ((com.google.gson.InstanceCreator)(typeAdapter)));\n            } \n            if ((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) {\n                com.google.gson.reflect.TypeToken<?> com.google.gson.reflect.TypeToken<?> = com.google.gson.reflect.TypeToken.get(type);\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.TreeTypeAdapter.newFactoryWithMatchRawType(typeToken, typeAdapter));\n            } \n            if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.internal.bind.TypeAdapters.newFactory(com.google.gson.reflect.TypeToken.get(type), ((com.google.gson.TypeAdapter)(typeAdapter))));\n            } \n            return com.google.gson.GsonBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236532642/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"typeAdapter"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:348","type":"CtBinaryOperatorImpl","sourcecode":"toResolve instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"7ba042f4-3e43-11e6-9e84-93a7196e857d","method":{"position":"com.google.gson.internal.$Gson$Types:226","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type getGenericSupertype(java.lang.reflect.Type context, java.lang.Class<?> rawType, java.lang.Class<?> toResolve) {\n    if (toResolve == rawType) {\n        return context;\n    } \n    if (toResolve.isInterface()) {\n        java.lang.Class<?>[] java.lang.Class<?>[] = rawType.getInterfaces();\n        for (int int = 0, int int = interfaces.int ; i < length ; i++) {\n            if ((interfaces[i]) == toResolve) {\n                return rawType.getGenericInterfaces()[i];\n            } else if (toResolve.isAssignableFrom(interfaces[i])) {\n                return com.google.gson.internal.$Gson$Types.getGenericSupertype(rawType.getGenericInterfaces()[i], interfaces[i], toResolve);\n            } \n        }\n    } \n    if (!(rawType.isInterface())) {\n        while (rawType != (java.lang.Object.java.lang.Object.java.lang.Class)) {\n            java.lang.Class<?> java.lang.Class<?> = rawType.getSuperclass();\n            if (rawSupertype == toResolve) {\n                return rawType.getGenericSuperclass();\n            } else if (toResolve.isAssignableFrom(rawSupertype)) {\n                return com.google.gson.internal.$Gson$Types.getGenericSupertype(rawType.getGenericSuperclass(), rawSupertype, toResolve);\n            } \n            rawType = rawSupertype;\n        }\n    } \n    return toResolve;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"context"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"7ba06a05-3e43-11e6-9e84-19a17358b70e","method":{"position":"com.google.gson.Gson:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236532642/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236532642/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    out.value(value.toString());\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[],"tindex":"7ba06a06-3e43-11e6-9e84-8ba93c9657c3","method":{"position":"com.google.gson.Gson:576","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236532642/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            if (src != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236532642/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            } else {\n                {\n                    try {\n                        com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                        toJson(src, typeOfSrc, jsonWriter);\n                    } catch (java.io.IOException e) {\n                        throw new com.google.gson.JsonIOException(e);\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:166","type":"CtBinaryOperatorImpl","sourcecode":"from instanceof java.lang.Class<?>"},"failures":[319,320],"tindex":"7ba06a07-3e43-11e6-9e84-4deeed6adc85","method":{"position":"com.google.gson.reflect.TypeToken:272","type":"CtMethodImpl","sourcecode":"private static boolean matches(java.lang.reflect.Type from, java.lang.reflect.Type to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeMap) {\n    if (from instanceof java.lang.Class<?>) {\n        {\n            return (to.equals(from)) || ((from instanceof java.lang.reflect.TypeVariable) && (to.equals(typeMap.get(((java.lang.reflect.TypeVariable<?>)(from)).getName()))));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236532642/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[],"tindex":"7ba06a08-3e43-11e6-9e84-15e2242fe88b","method":{"position":"com.google.gson.FieldNamingPolicy:137","type":"CtMethodImpl","sourcecode":"private static java.lang.String upperCaseFirstLetter(java.lang.String name) {\n    if (name == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236532642/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            int int = 0;\n            char char = name.charAt(index);\n            while (index < ((name.length()) - 1)) {\n                if (java.lang.Character.isLetter(firstCharacter)) {\n                    break;\n                } \n                fieldNameBuilder.append(firstCharacter);\n                firstCharacter = name.charAt((++index));\n            }\n            if (index == (name.length())) {\n                return fieldNameBuilder.toString();\n            } \n            if (!(java.lang.Character.isUpperCase(firstCharacter))) {\n                java.lang.String java.lang.String = com.google.gson.FieldNamingPolicy.modifyString(java.lang.Character.toUpperCase(firstCharacter), name, (++index));\n                return fieldNameBuilder.append(modifiedTarget).toString();\n            } else {\n                return name;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:274","type":"CtBinaryOperatorImpl","sourcecode":"target instanceof java.lang.String"},"failures":[],"tindex":"7ba09119-3e43-11e6-9e84-47a7ad8bf6d3","method":{"position":"com.google.gson.JsonPrimitive:273","type":"CtMethodImpl","sourcecode":"private static boolean isPrimitiveOrString(java.lang.Object target) {\n    if (target instanceof java.lang.String) {\n        {\n            if (target instanceof java.lang.String) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236532642/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (target instanceof java.lang.String) {\n                        return true;\n                    } \n                    java.lang.Class<?> java.lang.Class<?> = target.getClass();\n                    for (java.lang.Class<?> java.lang.Class<?> : com.google.gson.JsonPrimitive.com.google.gson.JsonPrimitive.java.lang.Class<?>[]) {\n                        if (standardPrimitive.isAssignableFrom(classOfPrimitive)) {\n                            return true;\n                        } \n                    }\n                    return false;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236532642/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"target":"target"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:127","type":"CtInvocationImpl","sourcecode":"raw.isInterface()"},"failures":[282,147,321,238],"tindex":"7ba0911a-3e43-11e6-9e84-ebe88676dc50","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:125","type":"CtMethodImpl","sourcecode":"private java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> getBoundFields(com.google.gson.Gson context, com.google.gson.reflect.TypeToken<?> type, java.lang.Class<?> raw) {\n    if (raw.isInterface()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236532642/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> = new java.util.LinkedHashMap<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField>();\n            if (raw.isInterface()) {\n                return result;\n            } \n            java.lang.reflect.Type java.lang.reflect.Type = type.getType();\n            while (raw != (java.lang.Object.java.lang.Object.java.lang.Class)) {\n                java.lang.reflect.Field[] java.lang.reflect.Field[] = raw.getDeclaredFields();\n                for (java.lang.reflect.Field java.lang.reflect.Field : fields) {\n                    boolean boolean = excludeField(field, true);\n                    boolean boolean = excludeField(field, false);\n                    if ((!serialize) && (!deserialize)) {\n                        continue;\n                    } \n                    field.setAccessible(true);\n                    java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, field.getGenericType());\n                    com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = createBoundField(context, field, getFieldName(field), com.google.gson.reflect.TypeToken.get(fieldType), serialize, deserialize);\n                    com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = result.put(boundField.java.lang.String, boundField);\n                    if (previous != null) {\n                        throw new java.lang.IllegalArgumentException(((declaredType + \" declares multiple JSON fields named \") + (previous.java.lang.String)));\n                    } \n                }\n                type = com.google.gson.reflect.TypeToken.get(com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, raw.getGenericSuperclass()));\n                raw = type.getRawType();\n            }\n            return result;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"raw"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"7ba0911b-3e43-11e6-9e84-7fb6701153b9","method":{"position":"com.google.gson.JsonObject:78","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.String value) {\n    if (property == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236532642/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            add(property, createJsonElement(value));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:198","type":"CtBinaryOperatorImpl","sourcecode":"out == null"},"failures":[],"tindex":"7ba0911c-3e43-11e6-9e84-472ca907db27","method":{"position":"com.google.gson.TypeAdapter:140","type":"CtMethodImpl","sourcecode":"public final void toJson(java.io.Writer out, T value) throws java.io.IOException {\n    if (out == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236532642/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = new com.google.gson.stream.JsonWriter(out);\n            write(writer, value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1422","type":"CtUnaryOperatorImpl","sourcecode":"!(lenient)"},"failures":[136,137,322,323,14,16,279,324,325,326,327,138,328,329,330,331,332,19,333,139,20,334,335,336,337,338,339,22,140,340,23,141,142,143,25,26,341,144,145,283,146,147,148,149,150,151,152,153,154,155,27,28,29,30,31,32,33,34,156,157,158,35,36,159,160,37,342,343,344,345,346,347,348,349,350,351,352,161,353,354,355,162,163,164,165,166,167,168,169,170,171,172,356,173,174,175,357,38,358,359,360,39,40,41,361,362,363,364,365,366,367,368,369,370,371,372,176,285,373,374,375,286,376,377,42,378,177,43,379,380,288,178,44,381,382,46,47,383,384,179,180,181,182,183,184,48,49,51,292,185,186,52,53,294,295,385,56,187,188,189,190,191,192,193,386,194,387,195,388,389,196,197,198,390,199,200,201,202,203,391,392,321,393,394,395,396,268,397,398,269,399,270,400,401,402,403,271,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,272,419,57,58,59,60,61,62,63,64,420,421,422,423,424,425,426,427,428,70,204,205,206,207,208,209,210,72,73,429,430,211,212,431,432,433,213,214,434,298,215,216,217,299,218,435,219,75,300,76,77,301,78,436,302,437,220,79,221,222,223,224,225,226,227,228,229,230,438,439,81,440,231,441,442,443,444,232,233,234,235,445,236,446,237,238,239,240,447,448,241,242,243,249,449,250,450,451,452,453,454,251,455,252,456,253,457,83,458,84,311,85,254,459,460,255,256,461,86,87,257,88,258,259,260,261,262,263,92,94,97,98,99,462,101,463,464,264,265,110,465,276,466,467,266,313,314,315,316,317,318,114,468,118,119,120,121,125,126,127,128,129],"tindex":"7ba0df3d-3e43-11e6-9e84-43ac5b85985b","method":{"position":"com.google.gson.stream.JsonWriter:234","type":"CtMethodImpl","sourcecode":"public final void setLenient(boolean lenient) {\n    if (!lenient) {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = lenient;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236532642/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"lenient"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:455","type":"CtBinaryOperatorImpl","sourcecode":"(typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)"},"failures":[38,40,41,42,43,44],"tindex":"7ba0df3e-3e43-11e6-9e84-0b6eab2408aa","method":{"position":"com.google.gson.TreeTypeAdapter:84","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newFactory(com.google.gson.reflect.TypeToken<?> exactType, java.lang.Object typeAdapter) {\n    if ((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236532642/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , exactType , false , null);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:356","type":"CtVariableReadImpl","sourcecode":"insert"},"failures":[469],"tindex":"7ba0df3f-3e43-11e6-9e84-03099fea3c41","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:338","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (insert) {\n        {\n            for (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) {\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                int int = left != null ? left.int : 0;\n                int int = right != null ? right.int : 0;\n                int int = leftHeight - rightHeight;\n                if (delta == (-2)) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    int int = rightRight != null ? rightRight.int : 0;\n                    int int = rightLeft != null ? rightLeft.int : 0;\n                    int int = rightLeftHeight - rightRightHeight;\n                    if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                        rotateLeft(node);\n                    } else {\n                        assert rightDelta == 1;\n                        rotateRight(right);\n                        rotateLeft(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 2) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    int int = leftRight != null ? leftRight.int : 0;\n                    int int = leftLeft != null ? leftLeft.int : 0;\n                    int int = leftLeftHeight - leftRightHeight;\n                    if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                        rotateRight(node);\n                    } else {\n                        assert leftDelta == (-1);\n                        rotateLeft(left);\n                        rotateRight(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 0) {\n                    node.int = leftHeight + 1;\n                    if (insert) {\n                        break;\n                    } \n                } else {\n                    assert (delta == (-1)) || (delta == 1);\n                    node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                    if (!insert) {\n                        break;\n                    } \n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236532642/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"insert"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:122","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.ParameterizedType"},"failures":[470,471,472,319,473,320,474,279,475,476,477,478,326,479,327,480,138,481,482,483,484,330,485,486,331,487,19,333,139,20,334,488,336,337,489,338,21,490,339,22,33,157,491,351,492,167,168,169,170,171,172,173,175,40,493,494,495,49,50,54,56,190,496,199,202,497,498,57,499,500,58,59,501,502,70,297,503,207,208,210,72,73,211,213,214,215,216,219,220,504,79,221,222,223,225,303,226,227,228,304,229,80,505,230,438,439,81,440,506,441,237,305,309,249,449,250,507,508,509,451,452,454,510,511,455,512,456,513,457,83,514,257,515,260,261,262,263,97,98,276,466,516],"tindex":"7ba10650-3e43-11e6-9e84-f9a13160f794","method":{"position":"com.google.gson.reflect.TypeToken:295","type":"CtMethodImpl","sourcecode":"public static com.google.gson.reflect.TypeToken<?> get(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236532642/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new com.google.gson.reflect.TypeToken<java.lang.Object>(type);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:94","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.Class"},"failures":[],"tindex":"7ba10651-3e43-11e6-9e84-0d3825b20aee","method":{"position":"com.google.gson.internal.$Gson$Types:217","type":"CtMethodImpl","sourcecode":"public static java.lang.String typeToString(java.lang.reflect.Type type) {\n    return type instanceof java.lang.Class ? ((java.lang.Class<?>)(type)).getName() : type.toString();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[],"tindex":"7ba12d62-3e43-11e6-9e84-0794785420ea","method":{"position":"com.google.gson.Gson:576","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236532642/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            if (src != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236532642/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            } else {\n                {\n                    try {\n                        com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                        toJson(src, typeOfSrc, jsonWriter);\n                    } catch (java.io.IOException e) {\n                        throw new com.google.gson.JsonIOException(e);\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"7ba12d63-3e43-11e6-9e84-7f86cc0412d6","method":{"position":"com.google.gson.Gson:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236532642/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236532642/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    out.value(value.toString());\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.FieldNamingPolicy:143","type":"CtInvocationImpl","sourcecode":"java.lang.Character.isLetter(firstCharacter)"},"failures":[],"tindex":"7ba12d64-3e43-11e6-9e84-e99f88d1622b","method":{"position":"com.google.gson.FieldNamingPolicy:163","type":"CtMethodImpl","sourcecode":"private static java.lang.String modifyString(char firstCharacter, java.lang.String srcString, int indexOfSubstring) {\n    if (java.lang.Character.isLetter(firstCharacter)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236532642/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (java.lang.Character.isLetter(firstCharacter)) {\n                {\n                    return indexOfSubstring < (srcString.length()) ? firstCharacter + (srcString.substring(indexOfSubstring)) : java.lang.String.valueOf(firstCharacter);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236532642/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"firstCharacter":"firstCharacter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1439","type":"CtBinaryOperatorImpl","sourcecode":"c == '\\r'"},"failures":[],"tindex":"7ba15475-3e43-11e6-9e84-71ee2eb80c97","method":{"position":"com.google.gson.stream.JsonReader:755","type":"CtMethodImpl","sourcecode":"private boolean isLiteral(char c) throws java.io.IOException {\n    if (c == '\\r') {\n        {\n            switch (c) {\n                case '/' :\n                case '\\\\' :\n                case ';' :\n                case '#' :\n                case '=' :\n                    checkLenient();\n                case '{' :\n                case '}' :\n                case '[' :\n                case ']' :\n                case ':' :\n                case ',' :\n                case ' ' :\n                case '\\t' :\n                case '\\f' :\n                case '\\r' :\n                case '\\n' :\n                    return false;\n                default :\n                    return true;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236532642/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"c"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":29,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
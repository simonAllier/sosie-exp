{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":238,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":242,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":110,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":54,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":417,"com.google.gson.internal.bind.JsonTreeWriterTest.testPrematureClose":17,"com.google.gson.MixedStreamTest.testWriteLenient":371,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":485,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":468,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":334,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":140,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":256,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":266,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":467,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":31,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":46,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":348,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":407,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":490,"com.google.gson.functional.ObjectTest.testSingletonLists":217,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":32,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":330,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":243,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":380,"com.google.gson.stream.JsonWriterTest.testStrings":385,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":448,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":252,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":441,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":474,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":3,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":389,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":423,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":111,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":159,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":449,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":6,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":411,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":82,"com.google.gson.functional.EnumTest.testEnumCaseMapping":45,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":0,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":241,"com.google.gson.functional.JsonTreeTest.testToJsonTree":88,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":164,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":125,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":156,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":313,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":501,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":295,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":263,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":272,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":472,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":27,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":201,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":226,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":80,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":354,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":477,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":26,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":346,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":344,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":138,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":440,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":193,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":502,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":187,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":66,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":232,"com.google.gson.DefaultDateTypeAdapterTest.testFormatUsesDefaultTimezone":375,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":329,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":486,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":133,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":305,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":19,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":442,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":108,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":194,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":62,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":231,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":15,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":34,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":471,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":58,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":179,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":394,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":118,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":150,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":438,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":443,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":333,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":415,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":324,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":435,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":353,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":454,"com.google.gson.functional.CollectionTest.testSetDeserialization":453,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":349,"com.google.gson.functional.EnumTest.testEnumSet":39,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":222,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":151,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":356,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithNestedWildcards":496,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":92,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":227,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":5,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":149,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":437,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":77,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":255,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":197,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":35,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":418,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":127,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":236,"com.google.gson.DefaultDateTypeAdapterTest.testParsingDatesFormattedWithSystemLocale":374,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":303,"com.google.gson.functional.MapTest.testMapSerialization":97,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":239,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":413,"com.google.gson.functional.MapTest.testSerializeMaps":91,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":286,"com.google.gson.functional.MapTest.testComplexKeysSerialization":106,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":18,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":73,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":274,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":458,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":302,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":405,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":253,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":162,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":55,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithBasicWildcards":498,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":358,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":205,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":109,"com.google.gson.functional.PrettyPrintingTest.testMap":160,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":278,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":259,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":240,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":310,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":422,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":2,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":503,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":247,"com.google.gson.functional.MapTest.testMapSerializationEmpty":107,"com.google.gson.functional.CollectionTest.testQueueSerialization":260,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":321,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":377,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnValue":383,"com.google.gson.functional.MapTest.testMapOfMapSerialization":96,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":185,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":51,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":190,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":364,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":244,"com.google.gson.functional.FieldNamingTest.testIdentity":287,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":444,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":74,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":479,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":57,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":87,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":142,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":216,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":7,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":245,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":351,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":188,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":459,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":14,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":50,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":322,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":343,"com.google.gson.functional.MapTest.testMapSubclassSerialization":90,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":204,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":37,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":464,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":280,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":288,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":368,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":487,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":484,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":148,"com.google.gson.functional.EnumTest.testEnumSubclass":42,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":191,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":4,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":473,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":175,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":350,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":357,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":402,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":53,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":460,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":116,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":13,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":186,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":397,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":338,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":466,"com.google.gson.MixedStreamTest.testWriteNulls":369,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":399,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":68,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":64,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":273,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":463,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":218,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":361,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":491,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":170,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":461,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":412,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":99,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":246,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":400,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":345,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":155,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":203,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":340,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":211,"com.google.gson.ObjectTypeAdapterTest.testSerializeObject":378,"com.google.gson.JsonParserTest.testParseMixedArray":16,"com.google.gson.DefaultDateTypeAdapterTest.testParsingDatesFormattedWithUsLocale":376,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":178,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithTypeParameters":497,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":167,"com.google.gson.internal.bind.JsonTreeWriterTest.testWriteAfterClose":21,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":182,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":49,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":198,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":327,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":323,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":165,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":89,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":29,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":428,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":93,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":123,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":297,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":294,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":406,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":86,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":456,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":225,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":233,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":129,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":281,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":117,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":314,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":408,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":52,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":134,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":98,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":161,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":11,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":342,"com.google.gson.functional.PrimitiveTest.testShortSerialization":202,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":447,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":299,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":84,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictNansAndInfinities":382,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":195,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":316,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":283,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":41,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":258,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":36,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":206,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":270,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":488,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":24,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":431,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":439,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":22,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":495,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":209,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":387,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":56,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":234,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":445,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":451,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":25,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":289,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":306,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":465,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":410,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":359,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":482,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":470,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":44,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":130,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":250,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":264,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":492,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":276,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":446,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":293,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":298,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":328,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":304,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":318,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":300,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":121,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":189,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":207,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":113,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":40,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":296,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":421,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":414,"com.google.gson.functional.MapTest.testGeneralMapField":103,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":469,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":61,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":70,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":277,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":352,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":335,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":101,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":137,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":177,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":307,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":196,"com.google.gson.MixedStreamTest.testReadMixedStreamed":494,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":183,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":8,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":267,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":433,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":393,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":83,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":436,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":326,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":158,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":208,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":362,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":174,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":291,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":23,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":325,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":75,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":430,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":366,"com.google.gson.functional.ObjectTest.testNestedDeserialization":483,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":112,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":230,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":419,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":115,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":81,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":169,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":395,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":147,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":200,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":401,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":144,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":489,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":269,"com.google.gson.functional.ObjectTest.testNullSerialization":223,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":132,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":102,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":176,"com.google.gson.functional.MapTest.testInterfaceTypeMap":100,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":279,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":120,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":43,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":210,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":282,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":404,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":308,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":79,"com.google.gson.MixedStreamTest.testWriteClosed":373,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":262,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":420,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":219,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":450,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":152,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":119,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":172,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":168,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":235,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":341,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":124,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":220,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":261,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":425,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":292,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":403,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":265,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":331,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":398,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":47,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":181,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":85,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":59,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":275,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":171,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":184,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":237,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":339,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":426,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":94,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":478,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":320,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":139,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":481,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":257,"com.google.gson.functional.MapTest.testRawMapSerialization":105,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":367,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":388,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":128,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":228,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":416,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":301,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":10,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":12,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":63,"com.google.gson.functional.PrimitiveTest.testByteSerialization":199,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":251,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":214,"com.google.gson.ObjectTypeAdapterTest.testSerialize":379,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":135,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromRawTypes":381,"com.google.gson.JsonPrimitiveTest.testEqualsIntegerAndBigInteger":28,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":141,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":69,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":284,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":153,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":390,"com.google.gson.functional.MapTest.testMapWithQuotes":95,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":311,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":355,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":432,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":365,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":126,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":309,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":347,"com.google.gson.stream.JsonWriterTest.testLenientWriterPermitsMultipleTopLevelValues":30,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":429,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":145,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":480,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":166,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":192,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":317,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":72,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":452,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":336,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":312,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":143,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":290,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":319,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":254,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":60,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":146,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":337,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":131,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":76,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":427,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":38,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":409,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":363,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":499,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":475,"com.google.gson.functional.ObjectTest.testNestedSerialization":229,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":114,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":136,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":180,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":173,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":104,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":212,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":157,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":9,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":372,"com.google.gson.stream.JsonWriterTest.testUnicodeLineBreaksEscaped":386,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":224,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":122,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":392,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":457,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":1,"com.google.gson.GsonBuilderTest.testCreatingMoreThanOnce":391,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":455,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":476,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":424,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":500,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":248,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":67,"com.google.gson.functional.CollectionTest.testSetSerialization":268,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":493,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":163,"com.google.gson.functional.StringTest.testStringValueSerialization":249,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":360,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":213,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":48,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":396,"com.google.gson.MixedStreamTest.testWriteInvalidState":370,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":221,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":71,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":33,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":315,"com.google.gson.stream.JsonWriterTest.testWrongTopLevelType":384,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":285,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":271,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":462,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":20,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":78,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":154,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":332,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":215,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":65,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":434},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:537","type":"CtFieldReadImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373],"tindex":"a7b56357-3f43-11e6-9911-9126b2c6d819","method":{"position":"com.google.gson.stream.JsonWriter:234","type":"CtMethodImpl","sourcecode":"public final void setLenient(boolean lenient) {\n    if (lenient) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467346107144/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = lenient;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"lenient"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"a7b5d888-3f43-11e6-9911-e7aa5bd9997c","method":{"position":"com.google.gson.JsonParser:44","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement parse(java.lang.String json) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            return parse(new java.io.StringReader(json));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467346107144/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl"},"failures":[374,375,376,307,312,313,337],"tindex":"a7b5d889-3f43-11e6-9911-0dfcd01505a0","method":{"position":"com.google.gson.DefaultDateTypeAdapter:94","type":"CtMethodImpl","sourcecode":"private java.util.Date deserializeToDate(com.google.gson.JsonElement json) {\n    if (json == null) {\n        {\n            synchronized(java.text.DateFormat) {\n                try {\n                    return java.text.DateFormat.parse(json.getAsString());\n                } catch (java.text.ParseException ignored) {\n                }\n                try {\n                    return java.text.DateFormat.parse(json.getAsString());\n                } catch (java.text.ParseException ignored) {\n                }\n                try {\n                    return java.text.DateFormat.parse(json.getAsString());\n                } catch (java.text.ParseException e) {\n                    throw new com.google.gson.JsonSyntaxException(json.getAsString() , e);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467346107144/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl"},"failures":[377],"tindex":"a7b5ff9a-3f43-11e6-9911-319a7effdc6e","method":{"position":"com.google.gson.JsonObject:100","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Boolean value) {\n    if (property == null) {\n        {\n            add(property, createJsonElement(value));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467346107144/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:198","type":"CtBinaryOperatorImpl"},"failures":[378,379,380],"tindex":"a7b5ff9b-3f43-11e6-9911-81d442212b10","method":{"position":"com.google.gson.TypeAdapter:140","type":"CtMethodImpl","sourcecode":"public final void toJson(java.io.Writer out, T value) throws java.io.IOException {\n    if (out == null) {\n        {\n            com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = new com.google.gson.stream.JsonWriter(out);\n            write(writer, value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467346107144/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"out"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl"},"failures":[10,18,22,23,25,85,86,87,88,110,111,115,116,117,121,122,125,140,141,143,144,171,172,238,303,304,305],"tindex":"a7b626ac-3f43-11e6-9911-a958432fa2bf","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:132","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter name(java.lang.String name) throws java.io.IOException {\n    if (name == null) {\n        {\n            if ((java.util.List<com.google.gson.JsonElement>.isEmpty()) || ((java.lang.String) != null)) {\n                throw new java.lang.IllegalStateException();\n            } \n            com.google.gson.JsonElement com.google.gson.JsonElement = peek();\n            if (element instanceof com.google.gson.JsonObject) {\n                java.lang.String = name;\n                return com.google.gson.internal.bind.JsonTreeWriter.this;\n            } \n            throw new java.lang.IllegalStateException();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467346107144/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl"},"failures":[48,67,72,87,94,100,102,110,115,116,117,118,120,121,122,124,125,263,293,294,296,297,301,302,316],"tindex":"a7b626ad-3f43-11e6-9911-65d7058a7484","method":{"position":"com.google.gson.internal.bind.TypeAdapters:361","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467346107144/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:166","type":"CtBinaryOperatorImpl"},"failures":[381],"tindex":"a7b64dbe-3f43-11e6-9911-a14fe67deb14","method":{"position":"com.google.gson.reflect.TypeToken:122","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic boolean isAssignableFrom(java.lang.reflect.Type from) {\n    if (from instanceof java.lang.reflect.ParameterizedType) {\n        {\n            if (from instanceof java.lang.Class<?>) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467346107144/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (from == null) {\n                        return false;\n                    } \n                    if (java.lang.reflect.Type.equals(from)) {\n                        return true;\n                    } \n                    if ((java.lang.reflect.Type) instanceof java.lang.Class<?>) {\n                        return java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from));\n                    } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.ParameterizedType) {\n                        return com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n                    } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.GenericArrayType) {\n                        return (java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from))) && (com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.GenericArrayType)(java.lang.reflect.Type))));\n                    } else {\n                        throw com.google.gson.reflect.TypeToken.buildUnexpectedTypeError(java.lang.reflect.Type, java.lang.Class.java.lang.Class.java.lang.Class, java.lang.reflect.ParameterizedType.java.lang.reflect.ParameterizedType.java.lang.Class, java.lang.reflect.GenericArrayType.java.lang.reflect.GenericArrayType.java.lang.Class);\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467346107144/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:462","type":"CtBinaryOperatorImpl"},"failures":[19,382],"tindex":"a7b64dbf-3f43-11e6-9911-7148a96d2c65","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:162","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(double value) throws java.io.IOException {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467346107144/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if ((!(isLenient())) && ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value)))) {\n                throw new java.lang.IllegalArgumentException((\"JSON forbids NaN and infinities: \" + value));\n            } \n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"a7b674d0-3f43-11e6-9911-9be0faec575d","method":{"position":"com.google.gson.Gson:127","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonParseException {\n    if (json == null) {\n        {\n            return ((T)(fromJson(json, typeOfT)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467346107144/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:109","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"a7b69be1-3f43-11e6-9911-0be98c893eae","method":{"position":"com.google.gson.internal.LinkedTreeMap:574","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonPrimitive) {\n        {\n            if (o instanceof com.google.gson.JsonPrimitive) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467346107144/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (!(o instanceof java.util.Map.Entry)) {\n                        return false;\n                    } \n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n                    if (node == null) {\n                        return false;\n                    } \n                    removeInternal(node, true);\n                    return true;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467346107144/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl"},"failures":[0,2,5,8,9,13,14,15,26,29,383,384,385,386,31,32,33,34,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,59,60,63,64,66,67,69,70,72,74,75,77,78,79,80,81,82,83,84,86,90,91,92,93,94,95,96,100,102,103,105,106,108,110,111,112,113,114,118,119,120,123,124,126,127,129,130,131,133,135,136,137,138,139,146,151,157,158,162,166,167,168,173,174,177,178,181,197,210,387,388,389,211,212,213,214,215,217,218,219,220,224,227,229,232,234,235,236,239,241,242,243,244,245,246,247,248,249,250,251,252,255,256,257,260,262,263,264,265,266,267,270,271,272,273,274,275,276,277,278,279,280,281,290,294,304,305,306,307,308,310,311,312,313,314,317,319,320,321,322,323,324,327,330,331,333,334,335,337,338,339,340,342,344,355,356,357,361,362,366,367,368,372],"tindex":"a7b69be2-3f43-11e6-9911-6bc2acc4ecce","method":{"position":"com.google.gson.stream.JsonWriter:413","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                {\n                    if (value == null) {\n                        return nullValue();\n                    } \n                    writeDeferredName();\n                    beforeValue(false);\n                    string(value);\n                    return com.google.gson.stream.JsonWriter.this;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467346107144/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467346107144/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:430","type":"CtFieldReadImpl"},"failures":[10,11,12,25,67,85,86,87,88,91,94,104,110,111,115,116,117,121,122,125,140,141,142,143,144,146,171,172,214,221,236,238,240,254,293,294,296,297,298,299,300,301,302,351,367,368,369,370,371,372,373],"tindex":"a7b6c2f3-3f43-11e6-9911-adb48ad9edd6","method":{"position":"com.google.gson.stream.JsonWriter:268","type":"CtMethodImpl","sourcecode":"public final void setSerializeNulls(boolean serializeNulls) {\n    if (serializeNulls) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467346107144/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = serializeNulls;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeNulls":"serializeNulls"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:554","type":"CtBinaryOperatorImpl"},"failures":[0,1,2,3,4,390,5,6,7,8,13,14,391,31,392,393,32,394,33,34,35,41,54,395,55,396,56,397,57,58,67,398,77,78,79,80,81,82,83,84,89,399,91,94,100,103,104,110,111,112,400,127,129,401,130,131,132,402,403,404,134,405,406,135,140,141,142,143,144,146,407,408,409,157,410,159,160,161,162,163,164,165,166,173,174,411,181,190,193,194,197,200,205,207,412,413,211,414,212,415,416,214,221,226,417,236,237,238,239,418,419,240,420,421,422,254,270,271,273,277,278,279,283,284,285,286,287,288,289,423,424,290,291,425,426,292,427,293,428,294,429,295,296,297,298,299,300,301,430,302,431,303,432,433,304,305,434,435,436,437,438,317,325,327,328,331,439,339,340,440,441,351,355,442,356,443,444,445,357,358,359,446,360,361,362,447,363,448,364,365,366,371,372],"tindex":"a7b6ea04-3f43-11e6-9911-17a7dfaa4b8e","method":{"position":"com.google.gson.GsonBuilder:551","type":"CtMethodImpl","sourcecode":"private void addTypeAdaptersForDate(java.lang.String datePattern, int dateStyle, int timeStyle, java.util.List<com.google.gson.TypeAdapterFactory> factories) {\n    if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n        {\n            com.google.gson.DefaultDateTypeAdapter com.google.gson.DefaultDateTypeAdapter;\n            if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n                dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(datePattern);\n            } else if ((dateStyle != (java.text.DateFormat.java.text.DateFormat.int)) && (timeStyle != (java.text.DateFormat.java.text.DateFormat.int))) {\n                dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(dateStyle , timeStyle);\n            } else {\n                return ;\n            }\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.util.Date.java.util.Date.java.lang.Class), dateTypeAdapter));\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Timestamp.java.sql.Timestamp.java.lang.Class), dateTypeAdapter));\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Date.java.sql.Date.java.lang.Class), dateTypeAdapter));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467346107144/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"datePattern":"datePattern"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:127","type":"CtInvocationImpl"},"failures":[396,58,113,177],"tindex":"a7b71115-3f43-11e6-9911-c16cafb0b9e7","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:125","type":"CtMethodImpl","sourcecode":"private java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> getBoundFields(com.google.gson.Gson context, com.google.gson.reflect.TypeToken<?> type, java.lang.Class<?> raw) {\n    if (raw.isInterface()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467346107144/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> = new java.util.LinkedHashMap<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField>();\n            if (raw.isInterface()) {\n                return result;\n            } \n            java.lang.reflect.Type java.lang.reflect.Type = type.getType();\n            while (raw != (java.lang.Object.java.lang.Object.java.lang.Class)) {\n                java.lang.reflect.Field[] java.lang.reflect.Field[] = raw.getDeclaredFields();\n                for (java.lang.reflect.Field java.lang.reflect.Field : fields) {\n                    boolean boolean = excludeField(field, true);\n                    boolean boolean = excludeField(field, false);\n                    if ((!serialize) && (!deserialize)) {\n                        continue;\n                    } \n                    field.setAccessible(true);\n                    java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, field.getGenericType());\n                    com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = createBoundField(context, field, getFieldName(field), com.google.gson.reflect.TypeToken.get(fieldType), serialize, deserialize);\n                    com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = result.put(boundField.java.lang.String, boundField);\n                    if (previous != null) {\n                        throw new java.lang.IllegalArgumentException(((declaredType + \" declares multiple JSON fields named \") + (previous.java.lang.String)));\n                    } \n                }\n                type = com.google.gson.reflect.TypeToken.get(com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, raw.getGenericSuperclass()));\n                raw = type.getRawType();\n            }\n            return result;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"raw"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:133","type":"CtBinaryOperatorImpl"},"failures":[379,33,34,47,48,49,50,51,54,55,396,397,57,58,86,449,106,113,114,116,119,121,450,451,123,125,126,127,128,129,401,130,131,132,402,403,405,406,140,141,143,144,167,168,169,170,171,172,177,416,452,222,233,234,256,453,268,271,272,273,274,454,275,280,435,455,456,316,457,326,341,345,347,348,349,442,357],"tindex":"a7b73826-3f43-11e6-9911-af8381a25107","method":{"position":"com.google.gson.internal.ConstructorConstructor:200","type":"CtMethodImpl","sourcecode":"private <T>com.google.gson.internal.ObjectConstructor<T> newUnsafeAllocator(final java.lang.reflect.Type type, final java.lang.Class<? super T> rawType) {\n    if (type instanceof java.lang.reflect.ParameterizedType) {\n        {\n            return new com.google.gson.internal.ObjectConstructor<T>() {\n                private final com.google.gson.internal.UnsafeAllocator unsafeAllocator = com.google.gson.internal.UnsafeAllocator.create();\n\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                public T construct() {\n                    try {\n                        java.lang.Object java.lang.Object = com.google.gson.internal.UnsafeAllocator.newInstance(rawType);\n                        return ((T)(newInstance));\n                    } catch (java.lang.Exception e) {\n                        throw new java.lang.RuntimeException((((\"Unable to invoke no-args constructor for \" + type) + \". \") + \"Register an InstanceCreator with Gson for this type may fix this problem.\") , e);\n                    }\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467346107144/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:133","type":"CtBinaryOperatorImpl"},"failures":[5,379,13,14,15,392,393,32,394,33,34,36,37,38,43,458,47,48,49,50,51,52,459,460,53,54,55,396,397,57,58,70,461,71,74,75,76,462,85,86,87,88,94,449,100,102,103,106,110,111,113,114,115,116,117,118,119,120,121,122,450,451,123,124,125,126,127,128,129,401,130,131,132,402,403,133,404,134,405,406,135,138,139,140,141,143,144,145,463,147,148,149,150,151,407,152,153,154,408,155,409,464,156,157,410,161,162,166,167,168,169,170,171,172,174,465,413,211,414,212,416,213,216,217,466,467,218,468,469,219,470,471,220,452,222,472,224,473,474,227,475,228,229,476,231,477,478,232,479,233,234,480,235,481,482,483,417,236,238,239,419,240,420,421,484,252,255,256,258,264,453,266,268,271,272,273,274,454,275,280,485,486,487,488,489,283,284,285,286,287,289,423,424,290,291,425,426,292,293,428,490,296,297,491,298,300,302,431,303,433,304,305,435,436,437,455,456,492,316,457,326,336,341,345,347,348,349,350,352,493,353,354,442,445,357,359,360,367,368,370,373,494,495],"tindex":"a7b75f37-3f43-11e6-9911-b993c2bc2e63","method":{"position":"com.google.gson.internal.Primitives:69","type":"CtMethodImpl","sourcecode":"public static boolean isPrimitive(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.ParameterizedType) {\n        {\n            return com.google.gson.internal.Primitives.com.google.gson.internal.Primitives.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.containsKey(type);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467346107144/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:243","type":"CtBinaryOperatorImpl"},"failures":[289,423,424,291,425,292],"tindex":"a7b75f38-3f43-11e6-9911-97179bfb36f4","method":{"position":"com.google.gson.internal.Excluder:242","type":"CtMethodImpl","sourcecode":"private boolean isValidUntil(com.google.gson.annotations.Until annotation) {\n    if (annotation != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467346107144/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (annotation != null) {\n                double double = annotation.value();\n                if (annotationVersion <= (double)) {\n                    return false;\n                } \n            } \n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Preconditions:41","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"a7b78649-3f43-11e6-9911-f7faec9475c9","method":{"position":"com.google.gson.internal.$Gson$Preconditions:40","type":"CtMethodImpl","sourcecode":"public static void checkArgument(boolean condition) {\n    if (!condition) {\n        throw new java.lang.IllegalArgumentException();\n    } \n}"},"series":0,"name":"addParameterCondition","variableMap":{"condition":"condition"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:370","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"a7b7864a-3f43-11e6-9911-e501ea5d9447","method":{"position":"com.google.gson.internal.$Gson$Types:322","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type resolve(java.lang.reflect.Type context, java.lang.Class<?> contextRawType, java.lang.reflect.Type toResolve) {\n    while (true) {\n        if (toResolve instanceof java.lang.reflect.TypeVariable) {\n            java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(toResolve));\n            toResolve = com.google.gson.internal.$Gson$Types.resolveTypeVariable(context, contextRawType, typeVariable);\n            if (toResolve == typeVariable) {\n                return toResolve;\n            } \n        } else if ((toResolve instanceof java.lang.Class) && (((java.lang.Class<?>)(toResolve)).isArray())) {\n            java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getComponentType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, componentType);\n            return componentType == newComponentType ? original : com.google.gson.internal.$Gson$Types.arrayOf(newComponentType);\n        } else if (toResolve instanceof java.lang.reflect.GenericArrayType) {\n            java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getGenericComponentType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, componentType);\n            return componentType == newComponentType ? original : com.google.gson.internal.$Gson$Types.arrayOf(newComponentType);\n        } else if (toResolve instanceof java.lang.reflect.ParameterizedType) {\n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getOwnerType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, ownerType);\n            boolean boolean = newOwnerType != ownerType;\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getActualTypeArguments();\n            for (int int = 0, int int = args.int ; t < length ; t++) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, args[t]);\n                if (resolvedTypeArgument != (args[t])) {\n                    if (!changed) {\n                        args = args.clone();\n                        changed = true;\n                    } \n                    args[t] = resolvedTypeArgument;\n                } \n            }\n            return changed ? com.google.gson.internal.$Gson$Types.newParameterizedTypeWithOwner(newOwnerType, original.getRawType(), args) : original;\n        } else if (toResolve instanceof java.lang.reflect.WildcardType) {\n            java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(toResolve));\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getLowerBounds();\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getUpperBounds();\n            if ((originalLowerBound.int) == 1) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, originalLowerBound[0]);\n                if (lowerBound != (originalLowerBound[0])) {\n                    return com.google.gson.internal.$Gson$Types.supertypeOf(lowerBound);\n                } \n            } else if ((originalUpperBound.int) == 1) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, originalUpperBound[0]);\n                if (upperBound != (originalUpperBound[0])) {\n                    return com.google.gson.internal.$Gson$Types.subtypeOf(upperBound);\n                } \n            } \n            return original;\n        } else {\n            return toResolve;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"toResolve"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:370","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"a7b7ad5b-3f43-11e6-9911-2dba3cf522da","method":{"position":"com.google.gson.internal.$Gson$Types:322","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type resolve(java.lang.reflect.Type context, java.lang.Class<?> contextRawType, java.lang.reflect.Type toResolve) {\n    while (true) {\n        if (toResolve instanceof java.lang.reflect.TypeVariable) {\n            java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(toResolve));\n            toResolve = com.google.gson.internal.$Gson$Types.resolveTypeVariable(context, contextRawType, typeVariable);\n            if (toResolve == typeVariable) {\n                return toResolve;\n            } \n        } else if ((toResolve instanceof java.lang.Class) && (((java.lang.Class<?>)(toResolve)).isArray())) {\n            java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getComponentType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, componentType);\n            return componentType == newComponentType ? original : com.google.gson.internal.$Gson$Types.arrayOf(newComponentType);\n        } else if (toResolve instanceof java.lang.reflect.GenericArrayType) {\n            java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getGenericComponentType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, componentType);\n            return componentType == newComponentType ? original : com.google.gson.internal.$Gson$Types.arrayOf(newComponentType);\n        } else if (toResolve instanceof java.lang.reflect.ParameterizedType) {\n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getOwnerType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, ownerType);\n            boolean boolean = newOwnerType != ownerType;\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getActualTypeArguments();\n            for (int int = 0, int int = args.int ; t < length ; t++) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, args[t]);\n                if (resolvedTypeArgument != (args[t])) {\n                    if (!changed) {\n                        args = args.clone();\n                        changed = true;\n                    } \n                    args[t] = resolvedTypeArgument;\n                } \n            }\n            return changed ? com.google.gson.internal.$Gson$Types.newParameterizedTypeWithOwner(newOwnerType, original.getRawType(), args) : original;\n        } else if (toResolve instanceof java.lang.reflect.WildcardType) {\n            java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(toResolve));\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getLowerBounds();\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getUpperBounds();\n            if ((originalLowerBound.int) == 1) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, originalLowerBound[0]);\n                if (lowerBound != (originalLowerBound[0])) {\n                    return com.google.gson.internal.$Gson$Types.supertypeOf(lowerBound);\n                } \n            } else if ((originalUpperBound.int) == 1) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, originalUpperBound[0]);\n                if (upperBound != (originalUpperBound[0])) {\n                    return com.google.gson.internal.$Gson$Types.subtypeOf(upperBound);\n                } \n            } \n            return original;\n        } else {\n            return toResolve;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"context"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl"},"failures":[111],"tindex":"a7b7ad5c-3f43-11e6-9911-a14a46fe70ce","method":{"position":"com.google.gson.Gson:136","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        {\n            return toJsonTree(src, typeOfSrc);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467346107144/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:199","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"a7b7ad5d-3f43-11e6-9911-5313f2b95e9b","method":{"position":"com.google.gson.reflect.TypeToken:122","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic boolean isAssignableFrom(java.lang.reflect.Type from) {\n    if (from instanceof java.lang.reflect.ParameterizedType) {\n        {\n            if (from instanceof java.lang.Class<?>) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467346107144/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (from == null) {\n                        return false;\n                    } \n                    if (java.lang.reflect.Type.equals(from)) {\n                        return true;\n                    } \n                    if ((java.lang.reflect.Type) instanceof java.lang.Class<?>) {\n                        return java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from));\n                    } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.ParameterizedType) {\n                        return com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n                    } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.GenericArrayType) {\n                        return (java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from))) && (com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.GenericArrayType)(java.lang.reflect.Type))));\n                    } else {\n                        throw com.google.gson.reflect.TypeToken.buildUnexpectedTypeError(java.lang.reflect.Type, java.lang.Class.java.lang.Class.java.lang.Class, java.lang.reflect.ParameterizedType.java.lang.reflect.ParameterizedType.java.lang.Class, java.lang.reflect.GenericArrayType.java.lang.reflect.GenericArrayType.java.lang.Class);\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467346107144/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:109","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"a7b7d46e-3f43-11e6-9911-278fc5f5019e","method":{"position":"com.google.gson.JsonArray:329","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonArray) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467346107144/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof com.google.gson.JsonPrimitive) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467346107144/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return (o == (com.google.gson.JsonArray.this)) || ((o instanceof com.google.gson.JsonArray) && (((com.google.gson.JsonArray)(o)).java.util.List<com.google.gson.JsonElement>.equals(java.util.List<com.google.gson.JsonElement>)));\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"a7b7d46f-3f43-11e6-9911-851d3a8a5426","method":{"position":"com.google.gson.JsonObject:111","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Character value) {\n    if (property == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467346107144/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            add(property, createJsonElement(value));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:305","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"a7b7fb80-3f43-11e6-9911-df3bb18fe5bb","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:686","type":"CtMethodImpl","sourcecode":"void add(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node) {\n    if (node != null) {\n        {\n            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            node.int = 1;\n            if (((int) > 0) && (((int) & 1) == 0)) {\n                (int)++;\n                (int)--;\n                (int)++;\n            } \n            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node;\n            (int)++;\n            if (((int) > 0) && (((int) & 1) == 0)) {\n                (int)++;\n                (int)--;\n                (int)++;\n            } \n            for (int int = 4 ; ((int) & (scale - 1)) == (scale - 1) ; scale *= 2) {\n                if ((int) == 0) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                    center.int = (right.int) + 1;\n                    left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                } else if ((int) == 1) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                    center.int = (right.int) + 1;\n                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    int = 0;\n                } else if ((int) == 2) {\n                    int = 0;\n                } \n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467346107144/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"node"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"a7b82291-3f43-11e6-9911-874154a5991e","method":{"position":"com.google.gson.Gson:552","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467346107144/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            if (src != null) {\n                toJson(src, src.getClass(), writer);\n            } else {\n                toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull, writer);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:240","type":"CtInvocationImpl"},"failures":[496,497,498],"tindex":"a7b849a2-3f43-11e6-9911-bd3d6b7fdc6f","method":{"position":"com.google.gson.reflect.TypeToken:238","type":"CtMethodImpl","sourcecode":"private static boolean typeEquals(java.lang.reflect.ParameterizedType from, java.lang.reflect.ParameterizedType to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeVarMap) {\n    if (to.getRawType().equals(to.getRawType())) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467346107144/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (from.getRawType().equals(to.getRawType())) {\n                java.lang.reflect.Type[] java.lang.reflect.Type[] = from.getActualTypeArguments();\n                java.lang.reflect.Type[] java.lang.reflect.Type[] = to.getActualTypeArguments();\n                for (int int = 0 ; i < (fromArgs.int) ; i++) {\n                    if (!(com.google.gson.reflect.TypeToken.matches(fromArgs[i], toArgs[i], typeVarMap))) {\n                        return false;\n                    } \n                }\n                return true;\n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"to","to":"to"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.FieldNamingPolicy:143","type":"CtInvocationImpl"},"failures":[127,131,402,406,283,286],"tindex":"a7b849a3-3f43-11e6-9911-69f19505f852","method":{"position":"com.google.gson.FieldNamingPolicy:163","type":"CtMethodImpl","sourcecode":"private static java.lang.String modifyString(char firstCharacter, java.lang.String srcString, int indexOfSubstring) {\n    if (java.lang.Character.isLetter(firstCharacter)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467346107144/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return indexOfSubstring < (srcString.length()) ? firstCharacter + (srcString.substring(indexOfSubstring)) : java.lang.String.valueOf(firstCharacter);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"firstCharacter":"firstCharacter"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"a7b849a4-3f43-11e6-9911-9f03202008a2","method":{"position":"com.google.gson.Gson:719","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.lang.String json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467346107144/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (json == null) {\n                return null;\n            } \n            java.io.StringReader java.io.StringReader = new java.io.StringReader(json);\n            T T = ((T)(fromJson(reader, typeOfT)));\n            return target;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:298","type":"CtBinaryOperatorImpl"},"failures":[54,55,57,69,86,119,151,192,208,499,210,387,388,500,501,502,503],"tindex":"a7b870b5-3f43-11e6-9911-f5cbfefba088","method":{"position":"com.google.gson.Gson:297","type":"CtMethodImpl","sourcecode":"private void checkValidFloatingPoint(double value) {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                throw new java.lang.IllegalArgumentException(((value + \" is not a valid double value as per JSON specification. To override this\") + \" behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.\"));\n            } \n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467346107144/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"a7b870b6-3f43-11e6-9911-f3043d189d47","method":{"position":"com.google.gson.stream.JsonWriter:413","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                {\n                    if (value == null) {\n                        return nullValue();\n                    } \n                    writeDeferredName();\n                    beforeValue(false);\n                    string(value);\n                    return com.google.gson.stream.JsonWriter.this;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467346107144/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467346107144/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:274","type":"CtVariableReadImpl"},"failures":[190,193,194,200,205,207,371],"tindex":"a7b870b7-3f43-11e6-9911-53245d3bd010","method":{"position":"com.google.gson.Gson:249","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> doubleAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467346107144/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return in.nextDouble();\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    double double = value.doubleValue();\n                    checkValidFloatingPoint(doubleValue);\n                    out.value(value);\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:107","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"a7b897c8-3f43-11e6-9911-653da21a5609","method":{"position":"com.google.gson.JsonArray:329","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonArray) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467346107144/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof com.google.gson.JsonPrimitive) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467346107144/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return (o == (com.google.gson.JsonArray.this)) || ((o instanceof com.google.gson.JsonArray) && (((com.google.gson.JsonArray)(o)).java.util.List<com.google.gson.JsonElement>.equals(java.util.List<com.google.gson.JsonElement>)));\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:109","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"a7b897c9-3f43-11e6-9911-175e7ef824e6","method":{"position":"com.google.gson.internal.LinkedTreeMap:574","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonPrimitive) {\n        {\n            if (o instanceof com.google.gson.JsonPrimitive) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467346107144/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (!(o instanceof java.util.Map.Entry)) {\n                        return false;\n                    } \n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n                    if (node == null) {\n                        return false;\n                    } \n                    removeInternal(node, true);\n                    return true;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467346107144/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:537","type":"CtFieldReadImpl"},"failures":[],"tindex":"a7b8beda-3f43-11e6-9911-5baa32201f9f","method":{"position":"com.google.gson.stream.JsonReader:325","type":"CtMethodImpl","sourcecode":"public final void setLenient(boolean lenient) {\n    if (lenient) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467346107144/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.stream.JsonReader.this.boolean = lenient;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"lenient"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"a7b8bedb-3f43-11e6-9911-51bbbdf30fc4","method":{"position":"com.google.gson.FieldNamingPolicy:122","type":"CtMethodImpl","sourcecode":"private static java.lang.String separateCamelCase(java.lang.String name, java.lang.String separator) {\n    if (separator == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467346107144/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            for (int int = 0 ; i < (name.length()) ; i++) {\n                char char = name.charAt(i);\n                if ((java.lang.Character.isUpperCase(character)) && ((translation.length()) != 0)) {\n                    translation.append(separator);\n                } \n                translation.append(character);\n            }\n            return translation.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"separator"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"a7b8bedc-3f43-11e6-9911-2da9a05094cb","method":{"position":"com.google.gson.internal.bind.TypeAdapters:245","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467346107144/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:166","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"a7b8e5ed-3f43-11e6-9911-953e6c0693d8","method":{"position":"com.google.gson.reflect.TypeToken:272","type":"CtMethodImpl","sourcecode":"private static boolean matches(java.lang.reflect.Type from, java.lang.reflect.Type to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeMap) {\n    if (from instanceof java.lang.Class<?>) {\n        {\n            return (to.equals(from)) || ((from instanceof java.lang.reflect.TypeVariable) && (to.equals(typeMap.get(((java.lang.reflect.TypeVariable<?>)(from)).getName()))));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467346107144/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonObject:54","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"a7b8e5ee-3f43-11e6-9911-2da7b635a86c","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:75","type":"CtMethodImpl","sourcecode":"private void put(com.google.gson.JsonElement value) {\n    if (value == null) {\n        {\n            if ((java.lang.String) != null) {\n                if ((!(value.isJsonNull())) || (getSerializeNulls())) {\n                    com.google.gson.JsonObject com.google.gson.JsonObject = ((com.google.gson.JsonObject)(peek()));\n                    object.add(java.lang.String, value);\n                } \n                java.lang.String = null;\n            } else if (java.util.List<com.google.gson.JsonElement>.isEmpty()) {\n                com.google.gson.JsonElement = value;\n            } else {\n                com.google.gson.JsonElement com.google.gson.JsonElement = peek();\n                if (element instanceof com.google.gson.JsonArray) {\n                    ((com.google.gson.JsonArray)(element)).add(value);\n                } else {\n                    throw new java.lang.IllegalStateException();\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467346107144/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":40,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
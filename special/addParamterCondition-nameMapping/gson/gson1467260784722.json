{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":46,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":361,"com.google.gson.functional.StringTest.testStringValueDeserialization":359,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":35,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":522,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":253,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":487,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":85,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":209,"com.google.gson.MixedStreamTest.testWriteLenient":64,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":346,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":175,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":13,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":40,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":384,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":173,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":401,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":531,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":140,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":584,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":278,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":495,"com.google.gson.JsonObjectTest.testAddingNullPropertyValue":628,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":131,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":569,"com.google.gson.functional.ObjectTest.testSingletonLists":171,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":143,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":254,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":362,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":481,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":607,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":120,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":213,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":406,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":270,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":188,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":612,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":534,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":1,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":375,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":24,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":280,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":523,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":308,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":474,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":589,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":158,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":307,"com.google.gson.functional.EnumTest.testEnumCaseMapping":583,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":360,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":600,"com.google.gson.functional.JsonTreeTest.testToJsonTree":31,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":473,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":285,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":272,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":22,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreBehindInVersion":9,"com.google.gson.JsonObjectTest.testEqualsNonEmptyObject":629,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":12,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":139,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":453,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":246,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":482,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":68,"com.google.gson.internal.LinkedTreeMapTest.testLargeSetOfRandomKeys":622,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":394,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":164,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":372,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":184,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":544,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":488,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":189,"com.google.gson.internal.LinkedTreeMapTest.testContainsNonComparableKeyReturnsFalse":623,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":156,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":471,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":197,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":276,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":221,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":273,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":357,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":548,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":547,"com.google.gson.JsonParserTest.testParseString":618,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":269,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":528,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":83,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":229,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":554,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":200,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":450,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":252,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":506,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":300,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":347,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":520,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":338,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":243,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":71,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":106,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":321,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":353,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":529,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":521,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":196,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":444,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":179,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":438,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":605,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":76,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":80,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":317,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":144,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":91,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":129,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":104,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":108,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":210,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":323,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":260,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":423,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":101,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":245,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":470,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":167,"com.google.gson.functional.CollectionTest.testSetDeserialization":400,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":279,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":183,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":410,"com.google.gson.functional.EnumTest.testEnumSet":574,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":512,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":130,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":107,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithNestedWildcards":608,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":234,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":296,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":190,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":128,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":588,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":525,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":103,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":536,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":153,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":217,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":537,"com.google.gson.functional.MapTest.testHashMapDeserialization":291,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":485,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":390,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":258,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":439,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":564,"com.google.gson.MixedStreamTest.testReadNulls":597,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":45,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":329,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":69,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":216,"com.google.gson.functional.MapTest.testSortedMap":311,"com.google.gson.functional.MapTest.testMapSerialization":306,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":563,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":419,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":518,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":456,"com.google.gson.functional.MapTest.testSerializeMaps":32,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":416,"com.google.gson.functional.MapTest.testComplexKeysSerialization":318,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":409,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":72,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":322,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":463,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":166,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":581,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":56,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":341,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":579,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":283,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":630,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":87,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":199,"com.google.gson.functional.MapTest.testStringKeyDeserialization":320,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithBasicWildcards":610,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":460,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":112,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":550,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":324,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":491,"com.google.gson.functional.PrettyPrintingTest.testMap":281,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":427,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":486,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":387,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":47,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":214,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":226,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":462,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":611,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":365,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":369,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":240,"com.google.gson.functional.MapTest.testMapSerializationEmpty":319,"com.google.gson.functional.CollectionTest.testQueueSerialization":391,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":631,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":513,"com.google.gson.functional.MapTest.testMapOfMapSerialization":305,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":82,"com.google.gson.JavaSerializationTest.testMapIsSerializable":603,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":248,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":397,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":381,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":515,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":121,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":363,"com.google.gson.functional.FieldNamingTest.testIdentity":417,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":109,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":147,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":201,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":30,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":42,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":90,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":170,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":476,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":590,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":39,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":364,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":326,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":510,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":263,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":593,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":235,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":242,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":271,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":380,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":288,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":84,"com.google.gson.functional.MapTest.testMapSubclassSerialization":293,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":138,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":344,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":412,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":61,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":429,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":504,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":585,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":225,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":348,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":561,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":212,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":127,"com.google.gson.functional.EnumTest.testEnumSubclass":577,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":524,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":186,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":613,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":475,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":467,"com.google.gson.GsonBuilderTest.testRegisterTypeAdapterForCoreType":594,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":530,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":111,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":336,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":477,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":328,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":508,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":327,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":18,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":452,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":592,"com.google.gson.internal.LinkedTreeMapTest.testEqualsAndHashCode":625,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":182,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":514,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":89,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":507,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":265,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":172,"com.google.gson.MixedStreamTest.testWriteNulls":62,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":290,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":451,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":351,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":446,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":125,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":165,"com.google.gson.CommentsTest.testParseComments":595,"com.google.gson.JsonObjectTest.testReadPropertyWithEmptyStringName":626,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":116,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":174,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":571,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":435,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":458,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":527,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":418,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":310,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":367,"com.google.gson.MixedStreamTest.testReadInvalidState":596,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":275,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":136,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":267,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":546,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":420,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":484,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":464,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithTypeParameters":609,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":432,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":81,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":379,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":250,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":541,"com.google.gson.functional.MapTest.testMapDeserialization":299,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":449,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":244,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":286,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":289,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":568,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":96,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":298,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":51,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":49,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":342,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeMap":616,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":29,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":578,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":223,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":187,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":202,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":331,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":430,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":19,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":230,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":135,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":325,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":340,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":282,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":309,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":58,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":15,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":472,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":118,"com.google.gson.functional.PrimitiveTest.testShortSerialization":545,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":53,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":533,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":160,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":505,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":532,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":16,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":483,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":413,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":576,"com.google.gson.internal.LinkedTreeMapTest.testEmptyStringValues":624,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":386,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":343,"com.google.gson.internal.LinkedTreeMapTest.testPutOverrides":621,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":294,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":499,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":407,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":552,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":349,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":261,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":573,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":73,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":599,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":559,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":553,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":88,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":95,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":110,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":203,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":0,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":67,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":219,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":539,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":99,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":113,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":509,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":207,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":178,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":582,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":333,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":411,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":231,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":395,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":425,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":114,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":48,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":52,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":251,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":490,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":70,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":237,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":54,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":256,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":20,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":388,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":478,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":540,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":511,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":556,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":77,"com.google.gson.JsonPrimitiveTest.testEquals":615,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":50,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":575,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":567,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":421,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":176,"com.google.gson.functional.MapTest.testGeneralMapField":315,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":443,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":558,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":426,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":457,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":468,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":262,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":313,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":10,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":78,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":356,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":535,"com.google.gson.MixedStreamTest.testReadMixedStreamed":598,"com.google.gson.ObjectTypeAdapterTest.testDeserializeNullValue":619,"com.google.gson.JsonObjectTest.testDeepCopy":632,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":232,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":301,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":500,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":402,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":466,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":591,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":142,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":516,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":159,"com.google.gson.JavaSerializationTest.testNumberIsSerializable":602,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":102,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":249,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":302,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":383,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":292,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":117,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":557,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":162,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":4,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":501,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":74,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":247,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":352,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":148,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":218,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":396,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":572,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":123,"com.google.gson.functional.ObjectTest.testNestedDeserialization":208,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":145,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":194,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":565,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":17,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":157,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":555,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":434,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":86,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":303,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":366,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":126,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":543,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":332,"com.google.gson.JavaSerializationTest.testListIsSerializable":604,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":44,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":350,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":405,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":335,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":382,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":295,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":79,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":314,"com.google.gson.functional.MapTest.testInterfaceTypeMap":312,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":454,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":428,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":93,"com.google.gson.JsonObjectTest.testAddingNullOrEmptyPropertyName":634,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":479,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":580,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":339,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":431,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":220,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":155,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":493,"com.google.gson.MixedStreamTest.testWriteClosed":66,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":393,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":566,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":94,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":177,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":274,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":132,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":92,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":37,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":205,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":433,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":268,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":97,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":180,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":392,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":5,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":519,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":7,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":337,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":398,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":257,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":149,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":377,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":560,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":498,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":28,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":228,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":168,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":440,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":36,"com.google.gson.functional.CollectionTest.testQueueDeserialization":408,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":503,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":517,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":371,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":562,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":6,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":266,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":33,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":198,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":239,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":206,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":358,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":385,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":60,"com.google.gson.functional.MapTest.testRawMapSerialization":316,"com.google.gson.JsonParserTest.testParseReader":617,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":403,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":255,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":192,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":330,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":424,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":55,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":57,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":59,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":211,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":445,"com.google.gson.functional.PrimitiveTest.testByteSerialization":542,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":25,"com.google.gson.ObjectTypeAdapterTest.testSerialize":606,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":354,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":489,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":41,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":455,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":414,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":133,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":368,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":587,"com.google.gson.functional.MapTest.testMapWithQuotes":304,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":227,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":496,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":370,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":105,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":465,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":122,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":152,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":549,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":224,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":277,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":570,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":124,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":204,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":287,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":236,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":526,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":181,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":461,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":264,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":11,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":3,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":43,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":238,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":538,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":27,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":399,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":448,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":14,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":23,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":441,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":334,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":150,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":586,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAtSameVersion":8,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":345,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":215,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":137,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":480,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":119,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":191,"com.google.gson.functional.ObjectTest.testNestedSerialization":193,"com.google.gson.JsonObjectTest.testAddingStringProperties":633,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":436,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":355,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":374,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":492,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":161,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":34,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":422,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":98,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":65,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":614,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":146,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":185,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":551,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":21,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":141,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":241,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":494,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":601,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":195,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":222,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":2,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":373,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":38,"com.google.gson.functional.CollectionTest.testSetSerialization":404,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":469,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":115,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":284,"com.google.gson.functional.StringTest.testStringValueSerialization":376,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":169,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":75,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":378,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":389,"com.google.gson.MixedStreamTest.testWriteInvalidState":63,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":442,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":26,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":497,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":459,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":502,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":437,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":233,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":415,"com.google.gson.ObjectTypeAdapterTest.testDeserialize":620,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":163,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":627,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":151,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":154,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":134,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":259,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":297,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":100,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":447},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:243","type":"CtBinaryOperatorImpl","sourcecode":"annotation != null"},"failures":[0,1,2,3,4,5,6,7,8,9],"tindex":"ce2d5bba-3e7a-11e6-803a-039b9d67ff89","method":{"position":"com.google.gson.internal.Excluder:242","type":"CtMethodImpl","sourcecode":"private boolean isValidUntil(com.google.gson.annotations.Until annotation) {\n    if (annotation != null) {\n        {\n            if (annotation != null) {\n                double double = annotation.value();\n                if (annotationVersion <= (double)) {\n                    return false;\n                } \n            } \n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260090273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:554","type":"CtBinaryOperatorImpl","sourcecode":"(datePattern != null) && (!(\"\".equals(datePattern.trim())))"},"failures":[10,11,12,13,14,15],"tindex":"ce2da9db-3e7a-11e6-803a-3bb3998b7ca2","method":{"position":"com.google.gson.GsonBuilder:551","type":"CtMethodImpl","sourcecode":"private void addTypeAdaptersForDate(java.lang.String datePattern, int dateStyle, int timeStyle, java.util.List<com.google.gson.TypeAdapterFactory> factories) {\n    if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260090273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260090273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    com.google.gson.DefaultDateTypeAdapter com.google.gson.DefaultDateTypeAdapter;\n                    if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n                        dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(datePattern);\n                    } else if ((dateStyle != (java.text.DateFormat.java.text.DateFormat.int)) && (timeStyle != (java.text.DateFormat.java.text.DateFormat.int))) {\n                        dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(dateStyle , timeStyle);\n                    } else {\n                        return ;\n                    }\n                    factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.util.Date.java.util.Date.java.lang.Class), dateTypeAdapter));\n                    factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Timestamp.java.sql.Timestamp.java.lang.Class), dateTypeAdapter));\n                    factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Date.java.sql.Date.java.lang.Class), dateTypeAdapter));\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"datePattern":"datePattern"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[16],"tindex":"ce2dd0ec-3e7a-11e6-803a-610926c17572","method":{"position":"com.google.gson.internal.bind.TypeAdapters:201","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260090273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260090273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    out.value(value);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:132","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"ce2dd0ed-3e7a-11e6-803a-c729a3e1068f","method":{"position":"com.google.gson.internal.$Gson$Types:93","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type canonicalize(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class) {\n        java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(type));\n        return c.isArray() ? new com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl(com.google.gson.internal.$Gson$Types.canonicalize(c.getComponentType())) : c;\n    } else if (type instanceof java.lang.reflect.ParameterizedType) {\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(type));\n        return new com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl(p.getOwnerType() , p.getRawType() , p.getActualTypeArguments());\n    } else if (type instanceof java.lang.reflect.GenericArrayType) {\n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(type));\n        return new com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl(g.getGenericComponentType());\n    } else if (type instanceof java.lang.reflect.WildcardType) {\n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(type));\n        return new com.google.gson.internal.$Gson$Types.WildcardTypeImpl(w.getUpperBounds() , w.getLowerBounds());\n    } else {\n        return type;\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:554","type":"CtBinaryOperatorImpl","sourcecode":"(datePattern != null) && (!(\"\".equals(datePattern.trim())))"},"failures":[],"tindex":"ce2df7fe-3e7a-11e6-803a-e1a1da416fa6","method":{"position":"com.google.gson.GsonBuilder:551","type":"CtMethodImpl","sourcecode":"private void addTypeAdaptersForDate(java.lang.String datePattern, int dateStyle, int timeStyle, java.util.List<com.google.gson.TypeAdapterFactory> factories) {\n    if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260090273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260090273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    com.google.gson.DefaultDateTypeAdapter com.google.gson.DefaultDateTypeAdapter;\n                    if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n                        dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(datePattern);\n                    } else if ((dateStyle != (java.text.DateFormat.java.text.DateFormat.int)) && (timeStyle != (java.text.DateFormat.java.text.DateFormat.int))) {\n                        dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(dateStyle , timeStyle);\n                    } else {\n                        return ;\n                    }\n                    factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.util.Date.java.util.Date.java.lang.Class), dateTypeAdapter));\n                    factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Timestamp.java.sql.Timestamp.java.lang.Class), dateTypeAdapter));\n                    factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Date.java.sql.Date.java.lang.Class), dateTypeAdapter));\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"datePattern":"datePattern"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:98","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"ce2df7ff-3e7a-11e6-803a-3ffdf7127d47","method":{"position":"com.google.gson.GsonBuilder:447","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\npublic com.google.gson.GsonBuilder registerTypeAdapter(java.lang.reflect.Type type, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof java.lang.Class) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260090273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (typeAdapter instanceof java.lang.reflect.ParameterizedType) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260090273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    com.google.gson.internal.$Gson$Preconditions.checkArgument(((((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) || (typeAdapter instanceof com.google.gson.InstanceCreator<?>)) || (typeAdapter instanceof com.google.gson.TypeAdapter<?>)));\n                    if (typeAdapter instanceof com.google.gson.InstanceCreator<?>) {\n                        java.util.Map<java.lang.reflect.Type, com.google.gson.InstanceCreator<?>>.put(type, ((com.google.gson.InstanceCreator)(typeAdapter)));\n                    } \n                    if ((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) {\n                        com.google.gson.reflect.TypeToken<?> com.google.gson.reflect.TypeToken<?> = com.google.gson.reflect.TypeToken.get(type);\n                        java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.TreeTypeAdapter.newFactoryWithMatchRawType(typeToken, typeAdapter));\n                    } \n                    if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                        java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.internal.bind.TypeAdapters.newFactory(com.google.gson.reflect.TypeToken.get(type), ((com.google.gson.TypeAdapter)(typeAdapter))));\n                    } \n                    return com.google.gson.GsonBuilder.this;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:430","type":"CtFieldReadImpl","sourcecode":"serializeNulls"},"failures":[17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67],"tindex":"ce2e1f10-3e7a-11e6-803a-bf7ec3164efa","method":{"position":"com.google.gson.stream.JsonWriter:268","type":"CtMethodImpl","sourcecode":"public final void setSerializeNulls(boolean serializeNulls) {\n    if (serializeNulls) {\n        {\n            if (serializeNulls) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260090273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    com.google.gson.stream.JsonWriter.this.boolean = serializeNulls;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260090273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeNulls":"serializeNulls"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"ce2e1f11-3e7a-11e6-803a-f321ff9a1ff0","method":{"position":"com.google.gson.internal.bind.TypeAdapters:201","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260090273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260090273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    out.value(value);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:198","type":"CtBinaryOperatorImpl","sourcecode":"out == null"},"failures":[],"tindex":"ce2e4622-3e7a-11e6-803a-0dfdb07647e7","method":{"position":"com.google.gson.TypeAdapter:140","type":"CtMethodImpl","sourcecode":"public final void toJson(java.io.Writer out, T value) throws java.io.IOException {\n    if (out == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260090273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = new com.google.gson.stream.JsonWriter(out);\n            write(writer, value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:123","type":"CtBinaryOperatorImpl","sourcecode":"from == null"},"failures":[],"tindex":"ce2e4623-3e7a-11e6-803a-39e424aed474","method":{"position":"com.google.gson.reflect.TypeToken:160","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.GenericArrayType to) {\n    if (from.getRawType().equals(from.getRawType())) {\n        {\n            if (from == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260090273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    java.lang.reflect.Type java.lang.reflect.Type = to.getGenericComponentType();\n                    if (toGenericComponentType instanceof java.lang.reflect.ParameterizedType) {\n                        java.lang.reflect.Type java.lang.reflect.Type = from;\n                        if (from instanceof java.lang.reflect.GenericArrayType) {\n                            t = ((java.lang.reflect.GenericArrayType)(from)).getGenericComponentType();\n                        } else if (from instanceof java.lang.Class<?>) {\n                            java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(from));\n                            while (classType.isArray()) {\n                                classType = classType.getComponentType();\n                            }\n                            t = classType;\n                        } \n                        return com.google.gson.reflect.TypeToken.isAssignableFrom(t, ((java.lang.reflect.ParameterizedType)(toGenericComponentType)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n                    } \n                    return true;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260090273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:79","type":"CtUnaryOperatorImpl","sourcecode":"!(json instanceof com.google.gson.JsonPrimitive)"},"failures":[],"tindex":"ce2e6d34-3e7a-11e6-803a-9b0c02640536","method":{"position":"com.google.gson.Gson:127","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonParseException {\n    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260090273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    } else {\n        {\n            return ((T)(fromJson(json, typeOfT)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[68],"tindex":"ce2e6d35-3e7a-11e6-803a-33c7fced95b1","method":{"position":"com.google.gson.Gson:468","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src) {\n    if (src != null) {\n        {\n            if (src == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260090273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (src == null) {\n                        return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n                    } \n                    return toJsonTree(src, src.getClass());\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260090273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[17,18,19,20,21,22,24,28,29,30,31,35,36,37,69,70,71,40,41,43,44,46,57,72,73,74,67],"tindex":"ce2e6d36-3e7a-11e6-803a-75806b1b1fb2","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:132","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter name(java.lang.String name) throws java.io.IOException {\n    if (name == null) {\n        {\n            if ((java.util.List<com.google.gson.JsonElement>.isEmpty()) || ((java.lang.String) != null)) {\n                throw new java.lang.IllegalStateException();\n            } \n            com.google.gson.JsonElement com.google.gson.JsonElement = peek();\n            if (element instanceof com.google.gson.JsonObject) {\n                java.lang.String = name;\n                return com.google.gson.internal.bind.JsonTreeWriter.this;\n            } \n            throw new java.lang.IllegalStateException();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260090273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[23,39],"tindex":"ce2e9447-3e7a-11e6-803a-0d736a882e6e","method":{"position":"com.google.gson.Gson:133","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src) {\n    if (src != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260090273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return toJsonTree(src);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:127","type":"CtInvocationImpl","sourcecode":"raw.isInterface()"},"failures":[75,76,77,78],"tindex":"ce2e9448-3e7a-11e6-803a-39786cf9a026","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:125","type":"CtMethodImpl","sourcecode":"private java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> getBoundFields(com.google.gson.Gson context, com.google.gson.reflect.TypeToken<?> type, java.lang.Class<?> raw) {\n    if (raw.isInterface()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260090273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> = new java.util.LinkedHashMap<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField>();\n            if (raw.isInterface()) {\n                return result;\n            } \n            java.lang.reflect.Type java.lang.reflect.Type = type.getType();\n            while (raw != (java.lang.Object.java.lang.Object.java.lang.Class)) {\n                java.lang.reflect.Field[] java.lang.reflect.Field[] = raw.getDeclaredFields();\n                for (java.lang.reflect.Field java.lang.reflect.Field : fields) {\n                    boolean boolean = excludeField(field, true);\n                    boolean boolean = excludeField(field, false);\n                    if ((!serialize) && (!deserialize)) {\n                        continue;\n                    } \n                    field.setAccessible(true);\n                    java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, field.getGenericType());\n                    com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = createBoundField(context, field, getFieldName(field), com.google.gson.reflect.TypeToken.get(fieldType), serialize, deserialize);\n                    com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = result.put(boundField.java.lang.String, boundField);\n                    if (previous != null) {\n                        throw new java.lang.IllegalArgumentException(((declaredType + \" declares multiple JSON fields named \") + (previous.java.lang.String)));\n                    } \n                }\n                type = com.google.gson.reflect.TypeToken.get(com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, raw.getGenericSuperclass()));\n                raw = type.getRawType();\n            }\n            return result;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"raw"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:122","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"ce2e9449-3e7a-11e6-803a-3df6f5ccde4a","method":{"position":"com.google.gson.internal.$Gson$Types:431","type":"CtMethodImpl","sourcecode":"private static void checkNotPrimitive(java.lang.reflect.Type type) {\n    com.google.gson.internal.$Gson$Preconditions.checkArgument(((!(type instanceof java.lang.Class<?>)) || (!(((java.lang.Class<?>)(type)).isPrimitive()))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"ce2ebb5a-3e7a-11e6-803a-fb90941bb46c","method":{"position":"com.google.gson.Gson:576","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260090273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            try {\n                com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                toJson(src, typeOfSrc, jsonWriter);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[],"tindex":"ce2ebb5b-3e7a-11e6-803a-f1f53cfb28ae","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:116","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<?> getFieldAdapter(com.google.gson.Gson gson, java.lang.reflect.Field field, com.google.gson.reflect.TypeToken<?> fieldType) {\n    if (field.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260090273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.annotations.JsonAdapter com.google.gson.annotations.JsonAdapter = field.getAnnotation(com.google.gson.annotations.JsonAdapter.com.google.gson.annotations.JsonAdapter.java.lang.Class);\n            if (annotation != null) {\n                com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory.getTypeAdapter(com.google.gson.internal.ConstructorConstructor, gson, fieldType, annotation);\n                if (adapter != null)\n                    return adapter;\n                \n            } \n            return gson.getAdapter(fieldType);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"field"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:305","type":"CtBinaryOperatorImpl","sourcecode":"node != null"},"failures":[],"tindex":"ce2ebb5c-3e7a-11e6-803a-832d1d3345e1","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:245","type":"CtMethodImpl","sourcecode":"void removeInternal(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node, boolean unlink) {\n    if (node != null) {\n        {\n            if (unlink) {\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            if ((left != null) && (right != null)) {\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = (left.int) > (right.int) ? left.last() : right.first();\n                removeInternal(adjacent, false);\n                int int = 0;\n                left = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                if (left != null) {\n                    leftHeight = left.int;\n                    adjacent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left;\n                    left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                } \n                int int = 0;\n                right = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                if (right != null) {\n                    rightHeight = right.int;\n                    adjacent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                } \n                adjacent.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                replaceInParent(node, adjacent);\n                return ;\n            } else if (left != null) {\n                replaceInParent(node, left);\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } else if (right != null) {\n                replaceInParent(node, right);\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } else {\n                replaceInParent(node, null);\n            }\n            rebalance(originalParent, false);\n            (int)--;\n            (int)++;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260090273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"node"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:462","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[79,80,81,82,83,84,64],"tindex":"ce2ee26d-3e7a-11e6-803a-ef61e316f44f","method":{"position":"com.google.gson.Gson:297","type":"CtMethodImpl","sourcecode":"private void checkValidFloatingPoint(double value) {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260090273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                throw new java.lang.IllegalArgumentException(((value + \" is not a valid double value as per JSON specification. To override this\") + \" behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.\"));\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[16],"tindex":"ce2f097e-3e7a-11e6-803a-c54ebdaf81dc","method":{"position":"com.google.gson.internal.bind.TypeAdapters:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260090273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:136","type":"CtBinaryOperatorImpl","sourcecode":"(type) instanceof java.lang.reflect.GenericArrayType"},"failures":[85,86,87,75,88,89,90,76,17,18,19,91,92,93,20,21,94,95,96,97,22,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,23,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,24,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,10,220,221,222,223,224,225,226,227,228,11,229,12,230,231,232,233,234,16,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,13,262,263,264,14,265,266,267,268,269,270,15,271,272,273,274,28,29,30,31,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,32,294,295,296,297,298,299,33,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,34,316,317,318,319,320,321,322,323,324,35,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,36,37,77,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,38,451,452,453,454,455,456,457,458,459,460,461,462,463,464,69,465,466,70,71,467,39,468,469,470,471,472,473,474,475,476,79,477,478,479,480,481,78,482,483,484,485,486,487,488,489,490,491,80,492,493,494,495,496,497,498,499,81,500,501,502,503,504,505,82,506,507,83,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,84,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,40,41,42,43,44,45,562,46,563,564,565,47,566,567,48,568,569,49,570,68,50,51,571,52,53,54,55,572,56,573,574,575,576,577,578,579,580,581,582,583,584,585,0,1,2,3,4,5,6,7,586,587,588,589,590,591,592,593,594,57,58,59,595,60,596,61,63,64,597,65,66,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614],"tindex":"ce2f097f-3e7a-11e6-803a-5bc436213f38","method":{"position":"com.google.gson.reflect.TypeToken:295","type":"CtMethodImpl","sourcecode":"public static com.google.gson.reflect.TypeToken<?> get(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.GenericArrayType) {\n        {\n            return new com.google.gson.reflect.TypeToken<java.lang.Object>(type);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260090273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:94","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.Class"},"failures":[],"tindex":"ce2f3090-3e7a-11e6-803a-89eebda184a5","method":{"position":"com.google.gson.internal.$Gson$Types:117","type":"CtMethodImpl","sourcecode":"public static java.lang.Class<?> getRawType(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class<?>) {\n        return ((java.lang.Class<?>)(type));\n    } else if (type instanceof java.lang.reflect.ParameterizedType) {\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(type));\n        java.lang.reflect.Type java.lang.reflect.Type = parameterizedType.getRawType();\n        com.google.gson.internal.$Gson$Preconditions.checkArgument((rawType instanceof java.lang.Class));\n        return ((java.lang.Class<?>)(rawType));\n    } else if (type instanceof java.lang.reflect.GenericArrayType) {\n        java.lang.reflect.Type java.lang.reflect.Type = ((java.lang.reflect.GenericArrayType)(type)).getGenericComponentType();\n        return java.lang.reflect.Array.newInstance(com.google.gson.internal.$Gson$Types.getRawType(componentType), 0).getClass();\n    } else if (type instanceof java.lang.reflect.TypeVariable) {\n        return java.lang.Object.java.lang.Object.java.lang.Class;\n    } else if (type instanceof java.lang.reflect.WildcardType) {\n        return com.google.gson.internal.$Gson$Types.getRawType(((java.lang.reflect.WildcardType)(type)).getUpperBounds()[0]);\n    } else {\n        java.lang.String java.lang.String = type == null ? \"null\" : type.getClass().getName();\n        throw new java.lang.IllegalArgumentException(((((\"Expected a Class, ParameterizedType, or \" + \"GenericArrayType, but <\") + type) + \"> is of type \") + className));\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[],"tindex":"ce2f3091-3e7a-11e6-803a-5d9e40887a19","method":{"position":"com.google.gson.Gson:591","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    if (src != null) {\n        {\n            com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = getAdapter(com.google.gson.reflect.TypeToken.get(typeOfSrc));\n            boolean boolean = writer.isLenient();\n            writer.setLenient(true);\n            boolean boolean = writer.isHtmlSafe();\n            writer.setHtmlSafe(boolean);\n            boolean boolean = writer.getSerializeNulls();\n            writer.setSerializeNulls(boolean);\n            try {\n                ((com.google.gson.TypeAdapter<java.lang.Object>)(adapter)).write(writer, src);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            } finally {\n                writer.setLenient(oldLenient);\n                writer.setHtmlSafe(oldHtmlSafe);\n                writer.setSerializeNulls(oldSerializeNulls);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260090273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:113","type":"CtInvocationImpl","sourcecode":"primitive.isBoolean()"},"failures":[272,28,31,615],"tindex":"ce2f3092-3e7a-11e6-803a-0bd247c2946c","method":{"position":"com.google.gson.JsonPrimitive:333","type":"CtMethodImpl","sourcecode":"private static boolean isIntegral(com.google.gson.JsonPrimitive primitive) {\n    if (primitive.isString()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260090273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (primitive.isBoolean()) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260090273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if ((primitive.java.lang.Object) instanceof java.lang.Number) {\n                        java.lang.Number java.lang.Number = ((java.lang.Number)(primitive.java.lang.Object));\n                        return ((((number instanceof java.math.BigInteger) || (number instanceof java.lang.Long)) || (number instanceof java.lang.Integer)) || (number instanceof java.lang.Short)) || (number instanceof java.lang.Byte);\n                    } \n                    return false;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"primitive"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:154","type":"CtUnaryOperatorImpl","sourcecode":"!create"},"failures":[17,18,19,20,21,22,108,109,137,616,24,149,152,221,30,292,294,295,299,302,307,317,320,344,345,349,420,421,422,36,37,71,40,41,43,44,46,57,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633],"tindex":"ce2f57a3-3e7a-11e6-803a-2b13394e09c8","method":{"position":"com.google.gson.internal.LinkedTreeMap:121","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedTreeMap.Node<K, V> find(K key, boolean create) {\n    if (!create) {\n        {\n            if (!create) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260090273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    java.util.Comparator<? super K> java.util.Comparator<? super K> = com.google.gson.internal.LinkedTreeMap.this.java.util.Comparator<? super K>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    int int = 0;\n                    if (nearest != null) {\n                        @java.lang.SuppressWarnings(value = \"unchecked\")\n                        java.lang.Comparable<java.lang.Object> java.lang.Comparable<java.lang.Object> = comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>) ? ((java.lang.Comparable<java.lang.Object>)(key)) : null;\n                        while (true) {\n                            comparison = comparableKey != null ? comparableKey.compareTo(nearest.K) : comparator.compare(key, nearest.K);\n                            if (comparison == 0) {\n                                return nearest;\n                            } \n                            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = comparison < 0 ? nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> : nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                            if (child == null) {\n                                break;\n                            } \n                            nearest = child;\n                        }\n                    } \n                    if (!create) {\n                        return null;\n                    } \n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.this.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    if (nearest == null) {\n                        if ((comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>)) && (!(key instanceof java.lang.Comparable))) {\n                            throw new java.lang.ClassCastException(((key.getClass().getName()) + \" is not Comparable\"));\n                        } \n                        created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                        com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                    } else {\n                        created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                        if (comparison < 0) {\n                            nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                        } else {\n                            nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                        }\n                        rebalance(nearest, true);\n                    }\n                    (int)++;\n                    (int)++;\n                    return created;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260090273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"create":"create"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:430","type":"CtFieldReadImpl","sourcecode":"serializeNulls"},"failures":[],"tindex":"ce2f7eb4-3e7a-11e6-803a-dbbfff4690ad","method":{"position":"com.google.gson.stream.JsonWriter:268","type":"CtMethodImpl","sourcecode":"public final void setSerializeNulls(boolean serializeNulls) {\n    if (serializeNulls) {\n        {\n            if (serializeNulls) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260090273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    com.google.gson.stream.JsonWriter.this.boolean = serializeNulls;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260090273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeNulls":"serializeNulls"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[634],"tindex":"ce2f7eb5-3e7a-11e6-803a-ab414bbef029","method":{"position":"com.google.gson.JsonObject:53","type":"CtMethodImpl","sourcecode":"public void add(java.lang.String property, com.google.gson.JsonElement value) {\n    if (property == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260090273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (value == null) {\n                value = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.put(property, value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:136","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.TypeVariable"},"failures":[85,87,75,89,90,76,18,92,20,94,95,96,22,98,99,101,106,107,109,111,118,123,124,126,127,128,132,133,134,136,139,146,152,162,163,164,165,166,167,168,171,181,182,183,196,202,203,206,210,216,222,223,11,16,241,249,262,268,29,275,276,277,278,279,282,286,287,288,292,294,295,296,297,298,299,33,301,302,303,306,307,308,309,311,312,313,314,315,34,317,318,319,320,321,322,323,324,35,329,330,331,332,333,334,335,336,337,341,342,344,345,351,352,377,378,379,380,381,384,385,387,388,389,391,392,394,395,396,397,398,399,400,403,404,405,406,408,424,429,432,433,434,435,36,37,77,436,437,438,451,453,69,465,466,70,71,467,469,471,78,534,40,41,43,44,48,50,51,56,574,575,576,577,578,582,57,58,595,64,65,602,603,604,606],"tindex":"ce2f7eb6-3e7a-11e6-803a-e304ac003aba","method":{"position":"com.google.gson.internal.ConstructorConstructor:128","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nprivate <T>com.google.gson.internal.ObjectConstructor<T> newDefaultImplementationConstructor(final java.lang.reflect.Type type, java.lang.Class<? super T> rawType) {\n    if (type instanceof java.lang.reflect.TypeVariable) {\n        {\n            if (java.util.Collection.java.util.Collection.java.lang.Class.isAssignableFrom(rawType)) {\n                if (java.util.SortedSet.java.util.SortedSet.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.TreeSet<java.lang.Object>()));\n                        }\n                    };\n                } else if (java.util.EnumSet.java.util.EnumSet.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        @java.lang.SuppressWarnings(value = \"rawtypes\")\n                        public T construct() {\n                            if (type instanceof java.lang.reflect.ParameterizedType) {\n                                java.lang.reflect.Type java.lang.reflect.Type = ((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0];\n                                if (elementType instanceof java.lang.Class) {\n                                    return ((T)(java.util.EnumSet.noneOf(((java.lang.Class)(elementType)))));\n                                } else {\n                                    throw new com.google.gson.JsonIOException((\"Invalid EnumSet type: \" + (type.toString())));\n                                }\n                            } else {\n                                throw new com.google.gson.JsonIOException((\"Invalid EnumSet type: \" + (type.toString())));\n                            }\n                        }\n                    };\n                } else if (java.util.Set.java.util.Set.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedHashSet<java.lang.Object>()));\n                        }\n                    };\n                } else if (java.util.Queue.java.util.Queue.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedList<java.lang.Object>()));\n                        }\n                    };\n                } else {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.ArrayList<java.lang.Object>()));\n                        }\n                    };\n                }\n            } \n            if (java.util.Map.java.util.Map.java.lang.Class.isAssignableFrom(rawType)) {\n                if (java.util.SortedMap.java.util.SortedMap.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.TreeMap<java.lang.Object, java.lang.Object>()));\n                        }\n                    };\n                } else if ((type instanceof java.lang.reflect.ParameterizedType) && (!(java.lang.String.java.lang.String.java.lang.Class.isAssignableFrom(com.google.gson.reflect.TypeToken.get(((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0]).getRawType())))) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedHashMap<java.lang.Object, java.lang.Object>()));\n                        }\n                    };\n                } else {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new com.google.gson.internal.LinkedTreeMap<java.lang.String, java.lang.Object>()));\n                        }\n                    };\n                }\n            } \n            return null;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260090273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:111","type":"CtInvocationImpl","sourcecode":"primitive.isString()"},"failures":[],"tindex":"ce2fa5c7-3e7a-11e6-803a-037835f468ab","method":{"position":"com.google.gson.JsonPrimitive:93","type":"CtMethodImpl","sourcecode":"void setValue(java.lang.Object primitive) {\n    if (primitive.isString()) {\n        {\n            if (primitive instanceof java.lang.Character) {\n                char char = ((java.lang.Character)(primitive)).charValue();\n                com.google.gson.JsonPrimitive.this.java.lang.Object = java.lang.String.valueOf(c);\n            } else {\n                com.google.gson.internal.$Gson$Preconditions.checkArgument(((primitive instanceof java.lang.Number) || (com.google.gson.JsonPrimitive.isPrimitiveOrString(primitive))));\n                com.google.gson.JsonPrimitive.this.java.lang.Object = primitive;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260090273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"primitive"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:240","type":"CtInvocationImpl","sourcecode":"from.getRawType().equals(to.getRawType())"},"failures":[],"tindex":"ce2fa5c8-3e7a-11e6-803a-2784c9a22c9f","method":{"position":"com.google.gson.reflect.TypeToken:160","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.GenericArrayType to) {\n    if (from.getRawType().equals(from.getRawType())) {\n        {\n            if (from == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260090273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    java.lang.reflect.Type java.lang.reflect.Type = to.getGenericComponentType();\n                    if (toGenericComponentType instanceof java.lang.reflect.ParameterizedType) {\n                        java.lang.reflect.Type java.lang.reflect.Type = from;\n                        if (from instanceof java.lang.reflect.GenericArrayType) {\n                            t = ((java.lang.reflect.GenericArrayType)(from)).getGenericComponentType();\n                        } else if (from instanceof java.lang.Class<?>) {\n                            java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(from));\n                            while (classType.isArray()) {\n                                classType = classType.getComponentType();\n                            }\n                            t = classType;\n                        } \n                        return com.google.gson.reflect.TypeToken.isAssignableFrom(t, ((java.lang.reflect.ParameterizedType)(toGenericComponentType)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n                    } \n                    return true;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260090273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from","to":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[],"tindex":"ce2fccd9-3e7a-11e6-803a-0b91b38fa2b0","method":{"position":"com.google.gson.Gson:468","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src) {\n    if (src != null) {\n        {\n            if (src == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260090273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (src == null) {\n                        return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n                    } \n                    return toJsonTree(src, src.getClass());\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260090273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[],"tindex":"ce2fccda-3e7a-11e6-803a-b3b1a8f8cb6c","method":{"position":"com.google.gson.FieldNamingPolicy:122","type":"CtMethodImpl","sourcecode":"private static java.lang.String separateCamelCase(java.lang.String name, java.lang.String separator) {\n    if (separator == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260090273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            for (int int = 0 ; i < (name.length()) ; i++) {\n                char char = name.charAt(i);\n                if ((java.lang.Character.isUpperCase(character)) && ((translation.length()) != 0)) {\n                    translation.append(separator);\n                } \n                translation.append(character);\n            }\n            return translation.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"separator"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1413","type":"CtVariableReadImpl","sourcecode":"throwOnEof"},"failures":[],"tindex":"ce2fccdb-3e7a-11e6-803a-dd2900e7bb13","method":{"position":"com.google.gson.stream.JsonReader:1331","type":"CtMethodImpl","sourcecode":"private int nextNonWhitespace(boolean throwOnEof) throws java.io.IOException {\n    if (throwOnEof) {\n        {\n            char[] char[] = com.google.gson.stream.JsonReader.this.char[];\n            int int = int;\n            int int = int;\n            while (true) {\n                if (p == l) {\n                    int = p;\n                    if (!(fillBuffer(1))) {\n                        break;\n                    } \n                    p = int;\n                    l = int;\n                } \n                int int = buffer[(p++)];\n                if (c == '\\n') {\n                    (int)++;\n                    int = p;\n                    continue;\n                } else if (((c == ' ') || (c == '\\r')) || (c == '\\t')) {\n                    continue;\n                } \n                if (c == '/') {\n                    int = p;\n                    if (p == l) {\n                        (int)--;\n                        boolean boolean = fillBuffer(2);\n                        (int)++;\n                        if (!charsLoaded) {\n                            return c;\n                        } \n                    } \n                    checkLenient();\n                    char char = buffer[int];\n                    switch (peek) {\n                        case '*' :\n                            (int)++;\n                            if (!(skipTo(\"*/\"))) {\n                                throw syntaxError(\"Unterminated comment\");\n                            } \n                            p = (int) + 2;\n                            l = int;\n                            continue;\n                        case '/' :\n                            (int)++;\n                            skipToEndOfLine();\n                            p = int;\n                            l = int;\n                            continue;\n                        default :\n                            return c;\n                    }\n                } else if (c == '#') {\n                    int = p;\n                    checkLenient();\n                    skipToEndOfLine();\n                    p = int;\n                    l = int;\n                } else {\n                    int = p;\n                    return c;\n                }\n            }\n            if (throwOnEof) {\n                throw new java.io.EOFException(((((\"End of input\" + \" at line \") + (getLineNumber())) + \" column \") + (getColumnNumber())));\n            } else {\n                return -1;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260090273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"throwOnEof":"throwOnEof"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"ce2ff3ec-3e7a-11e6-803a-9508eb858e02","method":{"position":"com.google.gson.Gson:871","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            if (json == null) {\n                return null;\n            } \n            return ((T)(fromJson(new com.google.gson.internal.bind.JsonTreeReader(json), typeOfT)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260090273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"ce2ff3ed-3e7a-11e6-803a-598e81e5edf3","method":{"position":"com.google.gson.internal.bind.TypeAdapters:282","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260090273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"ce2ff3ee-3e7a-11e6-803a-710bc29ff404","method":{"position":"com.google.gson.internal.bind.TypeAdapters:245","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260090273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:94","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.Class"},"failures":[],"tindex":"ce2ff3ef-3e7a-11e6-803a-15d0db31c98b","method":{"position":"com.google.gson.GsonBuilder:447","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\npublic com.google.gson.GsonBuilder registerTypeAdapter(java.lang.reflect.Type type, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof java.lang.Class) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260090273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (typeAdapter instanceof java.lang.reflect.ParameterizedType) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260090273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    com.google.gson.internal.$Gson$Preconditions.checkArgument(((((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) || (typeAdapter instanceof com.google.gson.InstanceCreator<?>)) || (typeAdapter instanceof com.google.gson.TypeAdapter<?>)));\n                    if (typeAdapter instanceof com.google.gson.InstanceCreator<?>) {\n                        java.util.Map<java.lang.reflect.Type, com.google.gson.InstanceCreator<?>>.put(type, ((com.google.gson.InstanceCreator)(typeAdapter)));\n                    } \n                    if ((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) {\n                        com.google.gson.reflect.TypeToken<?> com.google.gson.reflect.TypeToken<?> = com.google.gson.reflect.TypeToken.get(type);\n                        java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.TreeTypeAdapter.newFactoryWithMatchRawType(typeToken, typeAdapter));\n                    } \n                    if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                        java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.internal.bind.TypeAdapters.newFactory(com.google.gson.reflect.TypeToken.get(type), ((com.google.gson.TypeAdapter)(typeAdapter))));\n                    } \n                    return com.google.gson.GsonBuilder.this;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:274","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[],"tindex":"ce2ff3f0-3e7a-11e6-803a-874c5f98429a","method":{"position":"com.google.gson.Gson:249","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> doubleAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return in.nextDouble();\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    double double = value.doubleValue();\n                    checkValidFloatingPoint(doubleValue);\n                    out.value(value);\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260090273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"ce301b01-3e7a-11e6-803a-a9caefa26e57","method":{"position":"com.google.gson.internal.bind.TypeAdapters:223","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260090273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:92","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof java.util.Iterator"},"failures":[],"tindex":"ce301b02-3e7a-11e6-803a-c52017eea793","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:839","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof java.util.Iterator) {\n        {\n            return containsKey(o);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260090273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:167","type":"CtUnaryOperatorImpl","sourcecode":"!create"},"failures":[],"tindex":"ce301b03-3e7a-11e6-803a-51964eda7892","method":{"position":"com.google.gson.internal.LinkedTreeMap:121","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedTreeMap.Node<K, V> find(K key, boolean create) {\n    if (!create) {\n        {\n            if (!create) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260090273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    java.util.Comparator<? super K> java.util.Comparator<? super K> = com.google.gson.internal.LinkedTreeMap.this.java.util.Comparator<? super K>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    int int = 0;\n                    if (nearest != null) {\n                        @java.lang.SuppressWarnings(value = \"unchecked\")\n                        java.lang.Comparable<java.lang.Object> java.lang.Comparable<java.lang.Object> = comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>) ? ((java.lang.Comparable<java.lang.Object>)(key)) : null;\n                        while (true) {\n                            comparison = comparableKey != null ? comparableKey.compareTo(nearest.K) : comparator.compare(key, nearest.K);\n                            if (comparison == 0) {\n                                return nearest;\n                            } \n                            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = comparison < 0 ? nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> : nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                            if (child == null) {\n                                break;\n                            } \n                            nearest = child;\n                        }\n                    } \n                    if (!create) {\n                        return null;\n                    } \n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.this.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    if (nearest == null) {\n                        if ((comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>)) && (!(key instanceof java.lang.Comparable))) {\n                            throw new java.lang.ClassCastException(((key.getClass().getName()) + \" is not Comparable\"));\n                        } \n                        created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                        com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                    } else {\n                        created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                        if (comparison < 0) {\n                            nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                        } else {\n                            nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                        }\n                        rebalance(nearest, true);\n                    }\n                    (int)++;\n                    (int)++;\n                    return created;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260090273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"create":"create"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:111","type":"CtInvocationImpl","sourcecode":"primitive.isString()"},"failures":[],"tindex":"ce304214-3e7a-11e6-803a-57e8ec198b06","method":{"position":"com.google.gson.JsonPrimitive:333","type":"CtMethodImpl","sourcecode":"private static boolean isIntegral(com.google.gson.JsonPrimitive primitive) {\n    if (primitive.isString()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260090273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (primitive.isBoolean()) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260090273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if ((primitive.java.lang.Object) instanceof java.lang.Number) {\n                        java.lang.Number java.lang.Number = ((java.lang.Number)(primitive.java.lang.Object));\n                        return ((((number instanceof java.math.BigInteger) || (number instanceof java.lang.Long)) || (number instanceof java.lang.Integer)) || (number instanceof java.lang.Short)) || (number instanceof java.lang.Byte);\n                    } \n                    return false;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"primitive"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":43,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
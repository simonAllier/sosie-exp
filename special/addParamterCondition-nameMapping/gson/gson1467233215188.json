{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":42,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":476,"com.google.gson.functional.StringTest.testStringValueDeserialization":474,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":692,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":41,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":430,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":276,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":391,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":182,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":88,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":25,"com.google.gson.MixedStreamTest.testWriteLenient":636,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":338,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":285,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":21,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":586,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":336,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":603,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":439,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":562,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":567,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":239,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":400,"com.google.gson.JsonObjectTest.testAddingNullPropertyValue":70,"com.google.gson.internal.bind.JsonElementReaderTest.testStrictNansAndInfinities":669,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":516,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":544,"com.google.gson.functional.ObjectTest.testSingletonLists":334,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":277,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":570,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":384,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":477,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":690,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":325,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":6,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":608,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":295,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":353,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":649,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":442,"com.google.gson.internal.bind.JsonElementReaderTest.testNulls":667,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":118,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":490,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":65,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":431,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":506,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":153,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":376,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":644,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":532,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":152,"com.google.gson.functional.EnumTest.testEnumCaseMapping":561,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":129,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":475,"com.google.gson.functional.JsonTreeTest.testToJsonTree":3,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":375,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":511,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":5,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":50,"com.google.gson.JsonObjectTest.testEqualsNonEmptyObject":71,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":252,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":551,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":221,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":269,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":386,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":115,"com.google.gson.internal.LinkedTreeMapTest.testLargeSetOfRandomKeys":677,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":596,"com.google.gson.functional.ObjectTest.testNullDeserialization":365,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":310,"com.google.gson.internal.bind.JsonElementReaderTest.testNestedObjects":78,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":487,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":347,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":13,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":452,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":392,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":354,"com.google.gson.internal.bind.JsonElementReaderTest.testLenientNansAndInfinities":665,"com.google.gson.internal.LinkedTreeMapTest.testContainsNonComparableKeyReturnsFalse":678,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":530,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":625,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":362,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":69,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":237,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":51,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":298,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":457,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":584,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":456,"com.google.gson.JsonParserTest.testParseString":67,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":294,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":436,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":415,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":98,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":463,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":217,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":366,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":275,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":413,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":26,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":145,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":428,"com.google.gson.functional.StreamingTypeAdaptersTest.testFromJsonTree":64,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":196,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":266,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":56,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":662,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":316,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":167,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":437,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":494,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":429,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":211,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":361,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":7,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":90,"com.google.gson.JsonPrimitiveTest.testEqualsAcrossTypes":113,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":342,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":163,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":189,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":396,"com.google.gson.metrics.PerformanceTest.testDummy":125,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":571,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":200,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":542,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":580,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":53,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":168,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":300,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":38,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":283,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":268,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":577,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":624,"com.google.gson.JsonArrayTest.testEqualsNonEmptyArray":661,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":313,"com.google.gson.functional.CollectionTest.testSetDeserialization":602,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":240,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":86,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":179,"com.google.gson.functional.EnumTest.testEnumSet":552,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":420,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":543,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":317,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithNestedWildcards":684,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":140,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":256,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":355,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":541,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":643,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":433,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":579,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":444,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":308,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":527,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":445,"com.google.gson.functional.MapTest.testHashMapDeserialization":134,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":389,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":592,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":281,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":173,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":618,"com.google.gson.MixedStreamTest.testReadNulls":637,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":92,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":170,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":54,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":306,"com.google.gson.functional.MapTest.testSortedMap":156,"com.google.gson.functional.MapTest.testMapSerialization":151,"com.google.gson.internal.bind.JsonElementReaderTest.testObject":80,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":172,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":34,"com.google.gson.JsonPrimitiveTest.testByteEqualsShort":112,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":426,"com.google.gson.JsonPrimitiveTest.testByteEqualsBigInteger":105,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":224,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":97,"com.google.gson.functional.MapTest.testSerializeMaps":137,"com.google.gson.functional.MapTest.testComplexKeysSerialization":164,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":178,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":40,"com.google.gson.JsonPrimitiveTest.testLongEqualsBigInteger":107,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":231,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":312,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":559,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":525,"com.google.gson.internal.LinkedTreeMapTest.testRemoveRootDoesNotDoubleUnlink":116,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":199,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":303,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":557,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":72,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":509,"com.google.gson.internal.LinkedHashTreeMapTest.testDoubleCapacity":653,"com.google.gson.internal.bind.JsonElementReaderTest.testWrongType":670,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":184,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":364,"com.google.gson.functional.MapTest.testStringKeyDeserialization":166,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithBasicWildcards":686,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":228,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":18,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":459,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":169,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":395,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":390,"com.google.gson.functional.PrettyPrintingTest.testMap":507,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":613,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":589,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":175,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":249,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":304,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":230,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":648,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":480,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":484,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":12,"com.google.gson.functional.MapTest.testMapSerializationEmpty":165,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":263,"com.google.gson.functional.CollectionTest.testQueueSerialization":593,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":421,"com.google.gson.functional.MapTest.testMapOfMapSerialization":150,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":412,"com.google.gson.JavaSerializationTest.testMapIsSerializable":682,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":271,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":599,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":85,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":423,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":326,"com.google.gson.functional.FieldNamingTest.testIdentity":235,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":478,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":318,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":498,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":367,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":2,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":188,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":333,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":473,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":378,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":645,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":30,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":479,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":330,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":418,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":287,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":127,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":258,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":84,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":265,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":297,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":131,"com.google.gson.functional.MapTest.testMapSubclassSerialization":136,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":455,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":550,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":627,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":181,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":410,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":563,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":615,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":633,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":27,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":248,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":470,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":302,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":540,"com.google.gson.functional.EnumTest.testEnumSubclass":555,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":432,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":351,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":650,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":377,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":621,"com.google.gson.internal.bind.JsonElementReaderTest.testArray":666,"com.google.gson.GsonBuilderTest.testRegisterTypeAdapterForCoreType":687,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":438,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":17,"com.google.gson.JsonPrimitiveTest.testShortEqualsInteger":111,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":94,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":380,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":332,"com.google.gson.JsonPrimitiveTest.testByteEqualsLong":101,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":416,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":331,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":46,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":126,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":220,"com.google.gson.internal.LinkedTreeMapTest.testEqualsAndHashCode":680,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":346,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":422,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":187,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":414,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":290,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":335,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":133,"com.google.gson.MixedStreamTest.testWriteNulls":634,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":219,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":492,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":213,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":311,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":538,"com.google.gson.CommentsTest.testParseComments":647,"com.google.gson.JsonObjectTest.testReadPropertyWithEmptyStringName":11,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":322,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":337,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":520,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":226,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":435,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":505,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":33,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":155,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":482,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":620,"com.google.gson.MixedStreamTest.testReadInvalidState":631,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":236,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":549,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":292,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":454,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":35,"com.google.gson.internal.bind.JsonElementReaderTest.testEarlyClose":668,"com.google.gson.JsonParserTest.testParseMixedArray":656,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":388,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":114,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":232,"com.google.gson.JsonPrimitiveTest.testDoubleEqualsBigDecimal":103,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithTypeParameters":685,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":502,"com.google.gson.internal.bind.JsonTreeWriterTest.testWriteAfterClose":664,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":405,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":83,"com.google.gson.JsonArrayTest.testRemove":660,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":273,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":449,"com.google.gson.functional.MapTest.testMapDeserialization":143,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":216,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":267,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":512,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":132,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":515,"com.google.gson.internal.bind.JsonElementReaderTest.testStringsFromNumbers":672,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":142,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":205,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":519,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":517,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":95,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeMap":675,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":1,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":556,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":246,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":352,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":368,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":191,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":616,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":47,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":253,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":548,"com.google.gson.internal.bind.JsonElementReaderTest.testNumbersFromStrings":671,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":198,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":329,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":154,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":508,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":688,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":296,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":374,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":324,"com.google.gson.functional.PrimitiveTest.testShortSerialization":453,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":61,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":441,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":534,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":411,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":440,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":257,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":387,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":96,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":554,"com.google.gson.internal.LinkedTreeMapTest.testEmptyStringValues":679,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":588,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":626,"com.google.gson.internal.LinkedTreeMapTest.testPutOverrides":676,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":138,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":404,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":461,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":609,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":28,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":284,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":526,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":75,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":641,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":468,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":462,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":186,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":87,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":204,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":319,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":77,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":117,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":242,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":447,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":496,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":19,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":417,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":372,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":341,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":560,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":180,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":193,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":254,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":597,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":611,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":320,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":514,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":274,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":521,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":394,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":55,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":260,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":522,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":279,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":48,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":590,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":381,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":448,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":419,"com.google.gson.JsonArrayTest.testSet":658,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":465,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":574,"com.google.gson.JsonPrimitiveTest.testEquals":10,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":518,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":553,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":43,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":36,"com.google.gson.functional.MapTest.testGeneralMapField":160,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":339,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":210,"com.google.gson.internal.bind.JsonElementReaderTest.testNumbers":673,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":467,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":225,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":612,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":622,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":286,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":158,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":243,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":385,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":583,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":443,"com.google.gson.ObjectTypeAdapterTest.testDeserializeNullValue":123,"com.google.gson.MixedStreamTest.testReadMixedStreamed":640,"com.google.gson.JsonObjectTest.testDeepCopy":73,"com.google.gson.internal.bind.JsonElementReaderTest.testBooleans":14,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":146,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":255,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":406,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":472,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":604,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":646,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":569,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":424,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":533,"com.google.gson.JavaSerializationTest.testNumberIsSerializable":681,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":578,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":272,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":147,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":536,"com.google.gson.JsonArrayTest.testDeepCopy":659,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":135,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":323,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":466,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":573,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":120,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":407,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":76,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":270,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":493,"com.google.gson.JsonPrimitiveTest.testEqualsDoesNotEquateStringAndNonStringTypes":9,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":499,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":241,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":598,"com.google.gson.JsonPrimitiveTest.testFloatEqualsDouble":106,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":524,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":328,"com.google.gson.functional.ObjectTest.testNestedDeserialization":373,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":359,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":619,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":174,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":45,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":531,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":464,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":504,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":148,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":183,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":481,"com.google.gson.JsonParserTest.testParseUnquotedStringArrayFails":657,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":539,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":451,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":192,"com.google.gson.JavaSerializationTest.testListIsSerializable":683,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":24,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":29,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":607,"com.google.gson.functional.ObjectTest.testNullSerialization":348,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":194,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":535,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":139,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":159,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":379,"com.google.gson.functional.MapTest.testInterfaceTypeMap":157,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":222,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":614,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":202,"com.google.gson.JsonObjectTest.testAddingNullOrEmptyPropertyName":74,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":382,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":558,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":655,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":197,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":617,"com.google.gson.MixedStreamTest.testReadClosed":632,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":244,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":529,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":398,"com.google.gson.JsonPrimitiveTest.testIntegerEqualsLong":109,"com.google.gson.MixedStreamTest.testWriteClosed":639,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":176,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":595,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":203,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":299,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":340,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":545,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":201,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":59,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":370,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":503,"com.google.gson.JsonPrimitiveTest.testShortEqualsLong":104,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":293,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":206,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":343,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":594,"com.google.gson.JsonPrimitiveTest.testShortEqualsBigInteger":100,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":121,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":427,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":122,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":195,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":600,"com.google.gson.internal.bind.JsonElementReaderTest.testSkipValue":79,"com.google.gson.internal.bind.JsonElementReaderTest.testStrings":674,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":280,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":57,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":81,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":469,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":403,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":0,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":250,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":207,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":314,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":58,"com.google.gson.functional.CollectionTest.testQueueDeserialization":610,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":409,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":425,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":486,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":171,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":291,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":565,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":144,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":363,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":262,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":371,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":585,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":587,"com.google.gson.functional.MapTest.testRawMapSerialization":162,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":630,"com.google.gson.JsonParserTest.testParseReader":66,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":605,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":278,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":190,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":357,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":39,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":523,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":68,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":212,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":301,"com.google.gson.functional.PrimitiveTest.testByteSerialization":450,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":689,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":15,"com.google.gson.ObjectTypeAdapterTest.testSerialize":91,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":581,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":393,"com.google.gson.JsonPrimitiveTest.testEqualsIntegerAndBigInteger":102,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":22,"com.google.gson.JsonPrimitiveTest.testFloatEqualsBigDecimal":99,"com.google.gson.JsonPrimitiveTest.testByteEqualsInteger":108,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":223,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":233,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":483,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":546,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":642,"com.google.gson.functional.MapTest.testMapWithQuotes":149,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":4,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":401,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":485,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":315,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":471,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":327,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":44,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":458,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":247,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":238,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":60,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":537,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":369,"com.google.gson.internal.LinkedHashTreeMapTest.testDoubleCapacityAllNodesOnLeft":651,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":513,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":259,"com.google.gson.functional.ObjectTest.testEmptyStringDeserialization":350,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":434,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":229,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":345,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":288,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":251,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":23,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":261,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":564,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":446,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":307,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":601,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":215,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":62,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":208,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":289,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":93,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":500,"com.google.gson.JsonPrimitiveTest.testIntegerEqualsBigInteger":110,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":566,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":628,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":305,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":63,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":383,"com.google.gson.internal.LinkedHashTreeMapTest.testRemoveRootDoesNotDoubleUnlink":654,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":20,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":356,"com.google.gson.JsonObjectTest.testAddingStringProperties":32,"com.google.gson.functional.ObjectTest.testNestedSerialization":358,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":575,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":397,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":489,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":582,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":572,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":161,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":37,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":495,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":629,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":638,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":349,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":497,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":460,"com.google.gson.JsonPrimitiveTest.testBoolean":8,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":49,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":568,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":264,"com.google.gson.GsonBuilderTest.testCreatingMoreThanOnce":128,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":130,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":399,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":245,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":360,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":119,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":488,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":218,"com.google.gson.functional.CollectionTest.testSetSerialization":606,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":623,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":321,"com.google.gson.functional.StringTest.testStringValueSerialization":491,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":510,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":177,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":82,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":185,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":591,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":209,"com.google.gson.MixedStreamTest.testWriteInvalidState":635,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":344,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":402,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":227,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":408,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":89,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":52,"com.google.gson.ObjectTypeAdapterTest.testDeserialize":124,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":234,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":309,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":31,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":501,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":528,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":663,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":547,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":282,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":16,"com.google.gson.internal.LinkedHashTreeMapTest.testAvlWalker":652,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":141,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":691,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":214,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":576},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:274","type":"CtBinaryOperatorImpl","sourcecode":"target instanceof java.lang.String"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14],"tindex":"9d747902-3e3a-11e6-90d7-99c67f9ea53f","method":{"position":"com.google.gson.JsonPrimitive:273","type":"CtMethodImpl","sourcecode":"private static boolean isPrimitiveOrString(java.lang.Object target) {\n    if (target instanceof java.lang.String) {\n        {\n            if (target instanceof java.lang.String) {\n                return true;\n            } \n            java.lang.Class<?> java.lang.Class<?> = target.getClass();\n            for (java.lang.Class<?> java.lang.Class<?> : com.google.gson.JsonPrimitive.com.google.gson.JsonPrimitive.java.lang.Class<?>[]) {\n                if (standardPrimitive.isAssignableFrom(classOfPrimitive)) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245191/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"target":"target"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:120","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonNull"},"failures":[],"tindex":"9d74ee33-3e3a-11e6-90d7-e3c31737210e","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:804","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonNull) {\n        {\n            return (o instanceof java.util.Map.Entry) && ((findByEntry(((java.util.Map.Entry<?, ?>)(o)))) != null);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245191/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:289","type":"CtBinaryOperatorImpl","sourcecode":"(value) == null"},"failures":[15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,12,32],"tindex":"9d74ee34-3e3a-11e6-90d7-b503efcf5a3c","method":{"position":"com.google.gson.JsonObject:121","type":"CtMethodImpl","sourcecode":"private com.google.gson.JsonElement createJsonElement(java.lang.Object value) {\n    if (value == null) {\n        {\n            return value == null ? com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull : new com.google.gson.JsonPrimitive(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245191/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[33,34,35,36,37,38,39,40,41,42,43,15,16,44,0,1,2,3,45,46,47,48,49,50,51,52,6,53,17,18,19,20,54,55,56,21,22,23,24,25,26,27,28,29,57,58,59,60,61,62,63,64,65,30,66,67,7,68,11,69,31,70,71,72,12,73,32,13,74,75,76,77,78,79,80],"tindex":"9d751545-3e3a-11e6-90d7-8d75882c1947","method":{"position":"com.google.gson.JsonObject:53","type":"CtMethodImpl","sourcecode":"public void add(java.lang.String property, com.google.gson.JsonElement value) {\n    if (property == null) {\n        {\n            if (value == null) {\n                value = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.put(property, value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245191/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[81,82,83,84,85,86,87,88,89,90,91],"tindex":"9d751546-3e3a-11e6-90d7-fd06256707d7","method":{"position":"com.google.gson.internal.Excluder:149","type":"CtMethodImpl","sourcecode":"public boolean excludeField(java.lang.reflect.Field field, boolean serialize) {\n    if (field.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245191/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (field.isSynthetic()) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245191/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (((int) & (field.getModifiers())) != 0) {\n                        return true;\n                    } \n                    if (((double) != (com.google.gson.internal.Excluder.com.google.gson.internal.Excluder.double)) && (!(isValidVersion(field.getAnnotation(com.google.gson.annotations.Since.com.google.gson.annotations.Since.java.lang.Class), field.getAnnotation(com.google.gson.annotations.Until.com.google.gson.annotations.Until.java.lang.Class))))) {\n                        return true;\n                    } \n                    if (field.isSynthetic()) {\n                        return true;\n                    } \n                    if (boolean) {\n                        com.google.gson.annotations.Expose com.google.gson.annotations.Expose = field.getAnnotation(com.google.gson.annotations.Expose.com.google.gson.annotations.Expose.java.lang.Class);\n                        if ((annotation == null) || (serialize ? !(annotation.serialize()) : !(annotation.deserialize()))) {\n                            return true;\n                        } \n                    } \n                    if ((!(boolean)) && (isInnerClass(field.getType()))) {\n                        return true;\n                    } \n                    if (isAnonymousOrLocal(field.getType())) {\n                        return true;\n                    } \n                    java.util.List<com.google.gson.ExclusionStrategy> java.util.List<com.google.gson.ExclusionStrategy> = serialize ? java.util.List<com.google.gson.ExclusionStrategy> : java.util.List<com.google.gson.ExclusionStrategy>;\n                    if (!(list.isEmpty())) {\n                        com.google.gson.FieldAttributes com.google.gson.FieldAttributes = new com.google.gson.FieldAttributes(field);\n                        for (com.google.gson.ExclusionStrategy com.google.gson.ExclusionStrategy : list) {\n                            if (exclusionStrategy.shouldSkipField(fieldAttributes)) {\n                                return true;\n                            } \n                        }\n                    } \n                    return false;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"field"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.FieldNamingPolicy:143","type":"CtInvocationImpl","sourcecode":"java.lang.Character.isLetter(firstCharacter)"},"failures":[92,93,94,95,96,97],"tindex":"9d753c57-3e3a-11e6-90d7-f5f0bfeeccbe","method":{"position":"com.google.gson.FieldNamingPolicy:163","type":"CtMethodImpl","sourcecode":"private static java.lang.String modifyString(char firstCharacter, java.lang.String srcString, int indexOfSubstring) {\n    if (java.lang.Character.isLetter(firstCharacter)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245191/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return indexOfSubstring < (srcString.length()) ? firstCharacter + (srcString.substring(indexOfSubstring)) : java.lang.String.valueOf(firstCharacter);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"firstCharacter":"firstCharacter"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:115","type":"CtInvocationImpl","sourcecode":"primitive.isNumber()"},"failures":[0,3,51,98,5,99,100,101,102,103,104,105,106,107,108,109,110,111,10,112,113],"tindex":"9d753c58-3e3a-11e6-90d7-17b7a722fb9c","method":{"position":"com.google.gson.JsonPrimitive:333","type":"CtMethodImpl","sourcecode":"private static boolean isIntegral(com.google.gson.JsonPrimitive primitive) {\n    if (primitive.isNumber()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245191/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((primitive.java.lang.Object) instanceof java.lang.Number) {\n                java.lang.Number java.lang.Number = ((java.lang.Number)(primitive.java.lang.Object));\n                return ((((number instanceof java.math.BigInteger) || (number instanceof java.lang.Long)) || (number instanceof java.lang.Integer)) || (number instanceof java.lang.Short)) || (number instanceof java.lang.Byte);\n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"primitive"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:363","type":"CtUnaryOperatorImpl","sourcecode":"!insert"},"failures":[114],"tindex":"9d753c59-3e3a-11e6-90d7-a77ac495f69f","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:338","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (!insert) {\n        {\n            for (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) {\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                int int = left != null ? left.int : 0;\n                int int = right != null ? right.int : 0;\n                int int = leftHeight - rightHeight;\n                if (delta == (-2)) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    int int = rightRight != null ? rightRight.int : 0;\n                    int int = rightLeft != null ? rightLeft.int : 0;\n                    int int = rightLeftHeight - rightRightHeight;\n                    if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                        rotateLeft(node);\n                    } else {\n                        assert rightDelta == 1;\n                        rotateRight(right);\n                        rotateLeft(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 2) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    int int = leftRight != null ? leftRight.int : 0;\n                    int int = leftLeft != null ? leftLeft.int : 0;\n                    int int = leftLeftHeight - leftRightHeight;\n                    if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                        rotateRight(node);\n                    } else {\n                        assert leftDelta == (-1);\n                        rotateLeft(left);\n                        rotateRight(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 0) {\n                    node.int = leftHeight + 1;\n                    if (insert) {\n                        break;\n                    } \n                } else {\n                    assert (delta == (-1)) || (delta == 1);\n                    node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                    if (!insert) {\n                        break;\n                    } \n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245191/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"insert"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:578","type":"CtBinaryOperatorImpl","sourcecode":"root == null"},"failures":[],"tindex":"9d75636a-3e3a-11e6-90d7-4b7ff84ecf32","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:401","type":"CtMethodImpl","sourcecode":"private void rotateLeft(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245191/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (root == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245191/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivotLeft;\n                    if (pivotLeft != null) {\n                        pivotLeft.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n                    } \n                    replaceInParent(root, pivot);\n                    pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n                    root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot;\n                    root.int = (java.lang.Math.max((left != null ? left.int : 0), (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n                    pivot.int = (java.lang.Math.max(root.int, (pivotRight != null ? pivotRight.int : 0))) + 1;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[115],"tindex":"9d758a7b-3e3a-11e6-90d7-07e0571fee43","method":{"position":"com.google.gson.Gson:468","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245191/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src == null) {\n                return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            return toJsonTree(src, src.getClass());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"9d75b18c-3e3a-11e6-90d7-c31a3401c8f5","method":{"position":"com.google.gson.Gson:695","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.lang.String json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245191/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:218","type":"CtVariableReadImpl","sourcecode":"unlink"},"failures":[116],"tindex":"9d75b18d-3e3a-11e6-90d7-5d68963957f2","method":{"position":"com.google.gson.internal.LinkedTreeMap:217","type":"CtMethodImpl","sourcecode":"void removeInternal(com.google.gson.internal.LinkedTreeMap.Node<K, V> node, boolean unlink) {\n    if (unlink) {\n        {\n            if (unlink) {\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            if ((left != null) && (right != null)) {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = (left.int) > (right.int) ? left.last() : right.first();\n                removeInternal(adjacent, false);\n                int int = 0;\n                left = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                if (left != null) {\n                    leftHeight = left.int;\n                    adjacent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = left;\n                    left.com.google.gson.internal.LinkedTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                } \n                int int = 0;\n                right = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                if (right != null) {\n                    rightHeight = right.int;\n                    adjacent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = right;\n                    right.com.google.gson.internal.LinkedTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                } \n                adjacent.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                replaceInParent(node, adjacent);\n                return ;\n            } else if (left != null) {\n                replaceInParent(node, left);\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n            } else if (right != null) {\n                replaceInParent(node, right);\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n            } else {\n                replaceInParent(node, null);\n            }\n            rebalance(originalParent, false);\n            (int)--;\n            (int)++;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245191/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"unlink":"unlink"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:243","type":"CtBinaryOperatorImpl","sourcecode":"annotation != null"},"failures":[117,118,119,120,121,122],"tindex":"9d75d89e-3e3a-11e6-90d7-45d7ce1a5633","method":{"position":"com.google.gson.internal.Excluder:242","type":"CtMethodImpl","sourcecode":"private boolean isValidUntil(com.google.gson.annotations.Until annotation) {\n    if (annotation != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245191/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (annotation != null) {\n                double double = annotation.value();\n                if (annotationVersion <= (double)) {\n                    return false;\n                } \n            } \n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:133","type":"CtBinaryOperatorImpl","sourcecode":"(type) instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"9d75d89f-3e3a-11e6-90d7-23c0da476161","method":{"position":"com.google.gson.internal.$Gson$Types:117","type":"CtMethodImpl","sourcecode":"public static java.lang.Class<?> getRawType(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class<?>) {\n        return ((java.lang.Class<?>)(type));\n    } else if (type instanceof java.lang.reflect.ParameterizedType) {\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(type));\n        java.lang.reflect.Type java.lang.reflect.Type = parameterizedType.getRawType();\n        com.google.gson.internal.$Gson$Preconditions.checkArgument((rawType instanceof java.lang.Class));\n        return ((java.lang.Class<?>)(rawType));\n    } else if (type instanceof java.lang.reflect.GenericArrayType) {\n        java.lang.reflect.Type java.lang.reflect.Type = ((java.lang.reflect.GenericArrayType)(type)).getGenericComponentType();\n        return java.lang.reflect.Array.newInstance(com.google.gson.internal.$Gson$Types.getRawType(componentType), 0).getClass();\n    } else if (type instanceof java.lang.reflect.TypeVariable) {\n        return java.lang.Object.java.lang.Object.java.lang.Class;\n    } else if (type instanceof java.lang.reflect.WildcardType) {\n        return com.google.gson.internal.$Gson$Types.getRawType(((java.lang.reflect.WildcardType)(type)).getUpperBounds()[0]);\n    } else {\n        java.lang.String java.lang.String = type == null ? \"null\" : type.getClass().getName();\n        throw new java.lang.IllegalArgumentException(((((\"Expected a Class, ParameterizedType, or \" + \"GenericArrayType, but <\") + type) + \"> is of type \") + className));\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:120","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonNull"},"failures":[],"tindex":"9d75d8a0-3e3a-11e6-90d7-036023e26d74","method":{"position":"com.google.gson.internal.LinkedTreeMap:574","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonNull) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245191/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (!(o instanceof java.util.Map.Entry)) {\n                return false;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n            if (node == null) {\n                return false;\n            } \n            removeInternal(node, true);\n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl","sourcecode":"in == null"},"failures":[123,124],"tindex":"9d764dd1-3e3a-11e6-90d7-87ab63c4cd9d","method":{"position":"com.google.gson.TypeAdapter:254","type":"CtMethodImpl","sourcecode":"public final T fromJson(java.io.Reader in) throws java.io.IOException {\n    if (in == null) {\n        {\n            com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(in);\n            return read(reader);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245191/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"in"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:250","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[125,126,127,128,129,130,33,34,35,36,37,38,39,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,40,168,169,41,170,171,42,172,173,174,175,176,43,177,15,16,178,179,180,181,182,183,184,185,186,187,188,189,92,190,191,192,193,93,194,94,195,196,197,198,199,95,0,1,2,3,45,46,47,200,201,202,48,49,203,204,205,206,50,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,96,233,234,97,235,236,237,238,239,240,241,242,243,244,51,245,246,247,248,249,4,250,251,98,252,253,254,255,52,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,5,298,299,300,301,302,6,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,53,318,319,17,18,19,320,321,322,323,324,20,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,86,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,87,369,370,371,372,373,88,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,54,471,472,55,56,21,22,473,23,24,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,25,26,27,28,29,492,493,494,495,496,497,498,499,57,500,501,502,503,504,505,58,59,506,507,508,509,510,511,512,513,514,515,516,517,60,115,518,519,520,521,61,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,62,539,540,541,542,543,544,545,546,547,548,549,63,550,551,552,553,554,555,556,557,558,559,560,561,562,563,117,118,119,564,120,121,565,122,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,89,90,618,65,619,620,621,30,622,623,624,625,626,627,628,7,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,69,13],"tindex":"9d764dd2-3e3a-11e6-90d7-a3d355f236f6","method":{"position":"com.google.gson.Gson:249","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> doubleAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return in.nextDouble();\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    double double = value.doubleValue();\n                    checkValidFloatingPoint(doubleValue);\n                    out.value(value);\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245191/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:166","type":"CtBinaryOperatorImpl","sourcecode":"from instanceof java.lang.Class<?>"},"failures":[],"tindex":"9d7674e3-3e3a-11e6-90d7-e371a8e48163","method":{"position":"com.google.gson.reflect.TypeToken:185","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.ParameterizedType to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeVarMap) {\n    if (from instanceof java.lang.Class<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245191/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (from == null) {\n                return false;\n            } \n            if (to.equals(from)) {\n                return true;\n            } \n            java.lang.Class<?> java.lang.Class<?> = com.google.gson.internal.$Gson$Types.getRawType(from);\n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = null;\n            if (from instanceof java.lang.reflect.ParameterizedType) {\n                ptype = ((java.lang.reflect.ParameterizedType)(from));\n            } \n            if (ptype != null) {\n                java.lang.reflect.Type[] java.lang.reflect.Type[] = ptype.getActualTypeArguments();\n                java.lang.reflect.TypeVariable<?>[] java.lang.reflect.TypeVariable<?>[] = clazz.getTypeParameters();\n                for (int int = 0 ; i < (tArgs.int) ; i++) {\n                    java.lang.reflect.Type java.lang.reflect.Type = tArgs[i];\n                    java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = tParams[i];\n                    while (arg instanceof java.lang.reflect.TypeVariable<?>) {\n                        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(arg));\n                        arg = typeVarMap.get(v.getName());\n                    }\n                    typeVarMap.put(var.getName(), arg);\n                }\n                if (com.google.gson.reflect.TypeToken.typeEquals(ptype, to, typeVarMap)) {\n                    return true;\n                } \n            } \n            for (java.lang.reflect.Type java.lang.reflect.Type : clazz.getGenericInterfaces()) {\n                if (com.google.gson.reflect.TypeToken.isAssignableFrom(itype, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap))) {\n                    return true;\n                } \n            }\n            java.lang.reflect.Type java.lang.reflect.Type = clazz.getGenericSuperclass();\n            return com.google.gson.reflect.TypeToken.isAssignableFrom(sType, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:578","type":"CtBinaryOperatorImpl","sourcecode":"root == null"},"failures":[651,114,652,653],"tindex":"9d7674e4-3e3a-11e6-90d7-d5ea01593476","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:626","type":"CtMethodImpl","sourcecode":"void reset(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root == null) {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            for (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root ; n != null ; n = n.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) {\n                n.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = stackTop;\n                stackTop = n;\n            }\n            com.google.gson.internal.LinkedHashTreeMap.AvlIterator.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = stackTop;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245191/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"root"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[],"tindex":"9d769bf5-3e3a-11e6-90d7-cbc38f82b6ea","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:132","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter name(java.lang.String name) throws java.io.IOException {\n    if (name == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245191/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if ((java.util.List<com.google.gson.JsonElement>.isEmpty()) || ((java.lang.String) != null)) {\n                throw new java.lang.IllegalStateException();\n            } \n            com.google.gson.JsonElement com.google.gson.JsonElement = peek();\n            if (element instanceof com.google.gson.JsonObject) {\n                java.lang.String = name;\n                return com.google.gson.internal.bind.JsonTreeWriter.this;\n            } \n            throw new java.lang.IllegalStateException();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:274","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[423,436,437,451,459,465,636],"tindex":"9d769bf6-3e3a-11e6-90d7-65d760eea66e","method":{"position":"com.google.gson.Gson:273","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> floatAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245191/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return ((float)(in.nextDouble()));\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    float float = value.floatValue();\n                    checkValidFloatingPoint(floatValue);\n                    out.value(value);\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[],"tindex":"9d769bf7-3e3a-11e6-90d7-8ffe915f8aa4","method":{"position":"com.google.gson.FieldNamingPolicy:122","type":"CtMethodImpl","sourcecode":"private static java.lang.String separateCamelCase(java.lang.String name, java.lang.String separator) {\n    if (separator == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245191/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (separator == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245191/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (separator == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245191/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n                            for (int int = 0 ; i < (name.length()) ; i++) {\n                                char char = name.charAt(i);\n                                if ((java.lang.Character.isUpperCase(character)) && ((translation.length()) != 0)) {\n                                    translation.append(separator);\n                                } \n                                translation.append(character);\n                            }\n                            return translation.toString();\n                        }\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"separator"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:314","type":"CtBinaryOperatorImpl","sourcecode":"replacement != null"},"failures":[654],"tindex":"9d76c308-3e3a-11e6-90d7-d39ec198f354","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:311","type":"CtMethodImpl","sourcecode":"private void replaceInParent(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node, com.google.gson.internal.LinkedHashTreeMap.Node<K, V> replacement) {\n    if (replacement != null) {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            if (replacement != null) {\n                replacement.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = parent;\n            } \n            if (parent != null) {\n                if ((parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) == node) {\n                    parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = replacement;\n                } else {\n                    assert (parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) == node;\n                    parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = replacement;\n                }\n            } else {\n                int int = (node.int) & ((com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[].int) - 1);\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[][index] = replacement;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245191/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"replacement":"replacement"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:98","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"9d76c309-3e3a-11e6-90d7-85e33e9790a0","method":{"position":"com.google.gson.internal.$Gson$Types:93","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type canonicalize(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class) {\n        java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(type));\n        return c.isArray() ? new com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl(com.google.gson.internal.$Gson$Types.canonicalize(c.getComponentType())) : c;\n    } else if (type instanceof java.lang.reflect.ParameterizedType) {\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(type));\n        return new com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl(p.getOwnerType() , p.getRawType() , p.getActualTypeArguments());\n    } else if (type instanceof java.lang.reflect.GenericArrayType) {\n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(type));\n        return new com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl(g.getGenericComponentType());\n    } else if (type instanceof java.lang.reflect.WildcardType) {\n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(type));\n        return new com.google.gson.internal.$Gson$Types.WildcardTypeImpl(w.getUpperBounds() , w.getLowerBounds());\n    } else {\n        return type;\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:246","type":"CtVariableReadImpl","sourcecode":"unlink"},"failures":[],"tindex":"9d76ea1a-3e3a-11e6-90d7-dda6e0c8f3f5","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:245","type":"CtMethodImpl","sourcecode":"void removeInternal(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node, boolean unlink) {\n    if (unlink) {\n        {\n            if (unlink) {\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            if ((left != null) && (right != null)) {\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = (left.int) > (right.int) ? left.last() : right.first();\n                removeInternal(adjacent, false);\n                int int = 0;\n                left = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                if (left != null) {\n                    leftHeight = left.int;\n                    adjacent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left;\n                    left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                } \n                int int = 0;\n                right = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                if (right != null) {\n                    rightHeight = right.int;\n                    adjacent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                } \n                adjacent.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                replaceInParent(node, adjacent);\n                return ;\n            } else if (left != null) {\n                replaceInParent(node, left);\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } else if (right != null) {\n                replaceInParent(node, right);\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } else {\n                replaceInParent(node, null);\n            }\n            rebalance(originalParent, false);\n            (int)--;\n            (int)++;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245191/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"unlink":"unlink"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:79","type":"CtUnaryOperatorImpl","sourcecode":"!(json instanceof com.google.gson.JsonPrimitive)"},"failures":[],"tindex":"9d76ea1b-3e3a-11e6-90d7-913314eae10e","method":{"position":"com.google.gson.DefaultDateTypeAdapter:77","type":"CtMethodImpl","sourcecode":"public java.util.Date deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT, com.google.gson.JsonDeserializationContext context) throws com.google.gson.JsonParseException {\n    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245191/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    } else {\n        {\n            if (!(json instanceof com.google.gson.JsonPrimitive)) {\n                throw new com.google.gson.JsonParseException(\"The date should be a string value\");\n            } \n            java.util.Date java.util.Date = deserializeToDate(json);\n            if (typeOfT == (java.util.Date.java.util.Date.java.lang.Class)) {\n                return date;\n            } else if (typeOfT == (java.sql.Timestamp.java.sql.Timestamp.java.lang.Class)) {\n                return new java.sql.Timestamp(date.getTime());\n            } else if (typeOfT == (java.sql.Date.java.sql.Date.java.lang.Class)) {\n                return new java.sql.Date(date.getTime());\n            } else {\n                throw new java.lang.IllegalArgumentException((((getClass()) + \" cannot deserialize to \") + typeOfT));\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"9d77112c-3e3a-11e6-90d7-5985a6aed491","method":{"position":"com.google.gson.JsonParser:44","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement parse(java.lang.String json) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            if (json == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245191/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            } else {\n                {\n                    return parse(new java.io.StringReader(json));\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245191/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:578","type":"CtBinaryOperatorImpl","sourcecode":"root == null"},"failures":[],"tindex":"9d77112d-3e3a-11e6-90d7-df15fefde8c6","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:401","type":"CtMethodImpl","sourcecode":"private void rotateLeft(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245191/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (root == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245191/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivotLeft;\n                    if (pivotLeft != null) {\n                        pivotLeft.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n                    } \n                    replaceInParent(root, pivot);\n                    pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n                    root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot;\n                    root.int = (java.lang.Math.max((left != null ? left.int : 0), (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n                    pivot.int = (java.lang.Math.max(root.int, (pivotRight != null ? pivotRight.int : 0))) + 1;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[],"tindex":"9d77112e-3e3a-11e6-90d7-cdadb4223abe","method":{"position":"com.google.gson.FieldNamingPolicy:122","type":"CtMethodImpl","sourcecode":"private static java.lang.String separateCamelCase(java.lang.String name, java.lang.String separator) {\n    if (separator == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245191/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (separator == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245191/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (separator == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245191/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n                            for (int int = 0 ; i < (name.length()) ; i++) {\n                                char char = name.charAt(i);\n                                if ((java.lang.Character.isUpperCase(character)) && ((translation.length()) != 0)) {\n                                    translation.append(separator);\n                                } \n                                translation.append(character);\n                            }\n                            return translation.toString();\n                        }\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"separator"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[12],"tindex":"9d77383f-3e3a-11e6-90d7-7d9027e29c22","method":{"position":"com.google.gson.JsonObject:100","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Boolean value) {\n    if (property == null) {\n        {\n            add(property, createJsonElement(value));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245191/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"9d773840-3e3a-11e6-90d7-9d926e6c80d5","method":{"position":"com.google.gson.internal.bind.TypeAdapters:297","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245191/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:455","type":"CtBinaryOperatorImpl","sourcecode":"(typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)"},"failures":[327,354,532,533,534,554,65,619,620,643],"tindex":"9d773841-3e3a-11e6-90d7-a79006ea3cc1","method":{"position":"com.google.gson.GsonBuilder:493","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\npublic com.google.gson.GsonBuilder registerTypeHierarchyAdapter(java.lang.Class<?> baseType, java.lang.Object typeAdapter) {\n    if ((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245191/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.$Gson$Preconditions.checkArgument((((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) || (typeAdapter instanceof com.google.gson.TypeAdapter<?>)));\n            if ((typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)) {\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(0, com.google.gson.TreeTypeAdapter.newTypeHierarchyFactory(baseType, typeAdapter));\n            } \n            if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.internal.bind.TypeAdapters.newTypeHierarchyFactory(baseType, ((com.google.gson.TypeAdapter)(typeAdapter))));\n            } \n            return com.google.gson.GsonBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"9d773842-3e3a-11e6-90d7-995ce15366e6","method":{"position":"com.google.gson.Gson:552","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        {\n            if (src != null) {\n                toJson(src, src.getClass(), writer);\n            } else {\n                toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull, writer);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245191/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:94","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.Class"},"failures":[],"tindex":"9d773843-3e3a-11e6-90d7-896a3daa7e32","method":{"position":"com.google.gson.internal.Primitives:69","type":"CtMethodImpl","sourcecode":"public static boolean isPrimitive(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class) {\n        {\n            return com.google.gson.internal.Primitives.com.google.gson.internal.Primitives.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.containsKey(type);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245191/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[126,127,129,130,35,37,132,136,137,140,142,144,149,150,151,154,155,157,158,159,160,161,162,164,165,167,169,41,170,171,172,175,177,180,182,184,186,188,189,92,190,191,192,193,93,194,196,198,44,1,200,201,202,205,206,207,208,210,211,212,213,214,217,218,219,223,225,227,229,231,96,233,234,97,235,81,82,83,84,85,236,237,238,239,240,242,243,244,247,249,4,251,252,253,52,259,260,261,262,263,265,267,268,270,272,273,274,275,277,280,282,283,285,286,288,289,290,291,292,293,296,298,301,6,309,310,311,312,314,315,317,17,18,19,321,322,323,20,326,327,328,329,332,333,334,337,340,343,86,349,352,354,355,357,358,359,361,366,368,87,370,377,379,385,388,396,397,403,405,406,409,412,414,415,418,419,423,432,434,436,437,440,443,445,449,450,451,452,453,454,455,459,461,465,466,468,54,55,56,475,476,477,478,479,482,484,488,491,495,498,499,500,502,503,504,505,506,507,508,509,510,511,512,513,514,517,115,518,519,521,61,522,525,527,528,529,530,531,532,533,534,536,537,62,539,540,541,542,543,545,546,547,549,552,553,554,555,558,560,561,562,563,117,564,120,122,567,570,572,573,574,575,581,582,583,584,585,655,586,587,588,589,593,594,595,596,597,600,603,604,606,607,609,611,612,613,614,615,616,617,89,90,618,65,619,621,30,622,624,625,626,627,628,7,629,643,644,645,646,648,649,650],"tindex":"9d775f54-3e3a-11e6-90d7-bbefe7dd08d9","method":{"position":"com.google.gson.Gson:532","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        {\n            java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n            toJson(src, typeOfSrc, writer);\n            return writer.toString();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245191/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:86","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonArray"},"failures":[132,46,48,247,98,21,25,27,29,64,65,656,657,658,659,660,661,73,662,663,664,14,79,665,666,667,668,669,670,671,672,673,674],"tindex":"9d775f55-3e3a-11e6-90d7-bd1aa8091ee7","method":{"position":"com.google.gson.JsonArray:57","type":"CtMethodImpl","sourcecode":"public void add(com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonArray) {\n        {\n            if (element == null) {\n                element = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            java.util.List<com.google.gson.JsonElement>.add(element);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245191/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:98","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"9d775f56-3e3a-11e6-90d7-d9fc220ecd4a","method":{"position":"com.google.gson.internal.$Gson$Types:217","type":"CtMethodImpl","sourcecode":"public static java.lang.String typeToString(java.lang.reflect.Type type) {\n    return type instanceof java.lang.Class ? ((java.lang.Class<?>)(type)).getName() : type.toString();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:168","type":"CtUnaryOperatorImpl","sourcecode":"!(b instanceof java.lang.reflect.ParameterizedType)"},"failures":[],"tindex":"9d778667-3e3a-11e6-90d7-0fef7fd237d2","method":{"position":"com.google.gson.internal.$Gson$Types:151","type":"CtMethodImpl","sourcecode":"static boolean equal(java.lang.Object a, java.lang.Object b) {\n    return (a == b) || ((a != null) && (a.equals(b)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:154","type":"CtUnaryOperatorImpl","sourcecode":"!create"},"failures":[35,36,37,135,138,139,143,147,152,163,166,42,44,2,45,46,47,48,49,50,51,53,318,56,21,22,23,24,28,57,58,59,63,675,65,627,628,66,67,68,11,31,70,71,72,12,73,32,123,124,676,677,678,679,680],"tindex":"9d778668-3e3a-11e6-90d7-4d5bcd8aa2ef","method":{"position":"com.google.gson.internal.LinkedTreeMap:121","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedTreeMap.Node<K, V> find(K key, boolean create) {\n    if (!create) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245191/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.util.Comparator<? super K> java.util.Comparator<? super K> = com.google.gson.internal.LinkedTreeMap.this.java.util.Comparator<? super K>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            int int = 0;\n            if (nearest != null) {\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                java.lang.Comparable<java.lang.Object> java.lang.Comparable<java.lang.Object> = comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>) ? ((java.lang.Comparable<java.lang.Object>)(key)) : null;\n                while (true) {\n                    comparison = comparableKey != null ? comparableKey.compareTo(nearest.K) : comparator.compare(key, nearest.K);\n                    if (comparison == 0) {\n                        return nearest;\n                    } \n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = comparison < 0 ? nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> : nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    if (child == null) {\n                        break;\n                    } \n                    nearest = child;\n                }\n            } \n            if (!create) {\n                return null;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.this.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            if (nearest == null) {\n                if ((comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>)) && (!(key instanceof java.lang.Comparable))) {\n                    throw new java.lang.ClassCastException(((key.getClass().getName()) + \" is not Comparable\"));\n                } \n                created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n            } else {\n                created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                if (comparison < 0) {\n                    nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                } else {\n                    nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                }\n                rebalance(nearest, true);\n            }\n            (int)++;\n            (int)++;\n            return created;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"create":"create"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"9d77ad79-3e3a-11e6-90d7-638a47a2beee","method":{"position":"com.google.gson.internal.bind.TypeAdapters:282","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245191/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    out.value(value);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245191/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:132","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.GenericArrayType"},"failures":[681,682,683,684,685,686,126,127,687,129,130,33,34,35,36,37,38,39,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,40,168,169,41,170,171,42,172,173,174,175,176,43,177,178,179,180,181,182,183,184,185,186,187,188,189,92,190,191,192,193,93,194,94,195,196,197,198,199,95,44,0,1,2,3,45,46,47,200,201,202,48,49,203,204,205,206,50,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,96,233,234,97,235,81,82,83,84,85,236,237,238,239,240,241,242,243,244,51,245,246,247,248,249,4,250,251,98,252,253,254,255,52,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,5,298,299,300,301,302,6,304,305,306,308,309,310,311,312,313,314,315,316,317,53,318,319,17,18,19,320,321,322,323,324,20,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,345,346,86,347,349,351,352,353,354,355,356,357,358,359,360,361,362,363,364,366,367,368,87,369,370,371,372,373,88,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,54,471,472,55,56,21,22,473,23,24,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,25,26,27,28,29,492,493,494,495,496,497,498,499,57,500,501,502,503,504,505,58,59,506,507,508,509,510,511,512,513,514,515,516,517,60,115,518,519,520,521,61,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,62,539,540,541,542,543,544,545,546,547,548,549,63,550,551,552,553,554,555,556,557,558,559,560,561,562,563,117,118,119,564,120,121,565,122,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,89,90,618,65,619,621,30,622,623,624,625,626,627,628,7,68,688,689,629,630,631,633,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,91,690],"tindex":"9d77ad7a-3e3a-11e6-90d7-d3c30cdbf792","method":{"position":"com.google.gson.reflect.TypeToken:295","type":"CtMethodImpl","sourcecode":"public static com.google.gson.reflect.TypeToken<?> get(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.GenericArrayType) {\n        {\n            return new com.google.gson.reflect.TypeToken<java.lang.Object>(type);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245191/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[],"tindex":"9d77d48b-3e3a-11e6-90d7-8f91550ef33a","method":{"position":"com.google.gson.FieldNamingPolicy:122","type":"CtMethodImpl","sourcecode":"private static java.lang.String separateCamelCase(java.lang.String name, java.lang.String separator) {\n    if (separator == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245191/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (separator == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245191/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (separator == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245191/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n                            for (int int = 0 ; i < (name.length()) ; i++) {\n                                char char = name.charAt(i);\n                                if ((java.lang.Character.isUpperCase(character)) && ((translation.length()) != 0)) {\n                                    translation.append(separator);\n                                } \n                                translation.append(character);\n                            }\n                            return translation.toString();\n                        }\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"separator"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[257],"tindex":"9d77d48c-3e3a-11e6-90d7-d5e6440a4901","method":{"position":"com.google.gson.internal.bind.TypeAdapters:201","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245191/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:244","type":"CtUnaryOperatorImpl","sourcecode":"!(rawType.isInterface())"},"failures":[],"tindex":"9d77d48d-3e3a-11e6-90d7-5327e5e02107","method":{"position":"com.google.gson.internal.$Gson$Types:226","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type getGenericSupertype(java.lang.reflect.Type context, java.lang.Class<?> rawType, java.lang.Class<?> toResolve) {\n    if (toResolve == rawType) {\n        return context;\n    } \n    if (toResolve.isInterface()) {\n        java.lang.Class<?>[] java.lang.Class<?>[] = rawType.getInterfaces();\n        for (int int = 0, int int = interfaces.int ; i < length ; i++) {\n            if ((interfaces[i]) == toResolve) {\n                return rawType.getGenericInterfaces()[i];\n            } else if (toResolve.isAssignableFrom(interfaces[i])) {\n                return com.google.gson.internal.$Gson$Types.getGenericSupertype(rawType.getGenericInterfaces()[i], interfaces[i], toResolve);\n            } \n        }\n    } \n    if (!(rawType.isInterface())) {\n        while (rawType != (java.lang.Object.java.lang.Object.java.lang.Class)) {\n            java.lang.Class<?> java.lang.Class<?> = rawType.getSuperclass();\n            if (rawSupertype == toResolve) {\n                return rawType.getGenericSuperclass();\n            } else if (toResolve.isAssignableFrom(rawSupertype)) {\n                return com.google.gson.internal.$Gson$Types.getGenericSupertype(rawType.getGenericSuperclass(), rawSupertype, toResolve);\n            } \n            rawType = rawSupertype;\n        }\n    } \n    return toResolve;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"rawType":"toResolve"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:141","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.WildcardType"},"failures":[158],"tindex":"9d77d48e-3e3a-11e6-90d7-c7482796534a","method":{"position":"com.google.gson.internal.ConstructorConstructor:128","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nprivate <T>com.google.gson.internal.ObjectConstructor<T> newDefaultImplementationConstructor(final java.lang.reflect.Type type, java.lang.Class<? super T> rawType) {\n    if (type instanceof java.lang.reflect.WildcardType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245191/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (java.util.Collection.java.util.Collection.java.lang.Class.isAssignableFrom(rawType)) {\n                if (java.util.SortedSet.java.util.SortedSet.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.TreeSet<java.lang.Object>()));\n                        }\n                    };\n                } else if (java.util.EnumSet.java.util.EnumSet.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        @java.lang.SuppressWarnings(value = \"rawtypes\")\n                        public T construct() {\n                            if (type instanceof java.lang.reflect.ParameterizedType) {\n                                java.lang.reflect.Type java.lang.reflect.Type = ((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0];\n                                if (elementType instanceof java.lang.Class) {\n                                    return ((T)(java.util.EnumSet.noneOf(((java.lang.Class)(elementType)))));\n                                } else {\n                                    throw new com.google.gson.JsonIOException((\"Invalid EnumSet type: \" + (type.toString())));\n                                }\n                            } else {\n                                throw new com.google.gson.JsonIOException((\"Invalid EnumSet type: \" + (type.toString())));\n                            }\n                        }\n                    };\n                } else if (java.util.Set.java.util.Set.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedHashSet<java.lang.Object>()));\n                        }\n                    };\n                } else if (java.util.Queue.java.util.Queue.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedList<java.lang.Object>()));\n                        }\n                    };\n                } else {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.ArrayList<java.lang.Object>()));\n                        }\n                    };\n                }\n            } \n            if (java.util.Map.java.util.Map.java.lang.Class.isAssignableFrom(rawType)) {\n                if (java.util.SortedMap.java.util.SortedMap.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.TreeMap<java.lang.Object, java.lang.Object>()));\n                        }\n                    };\n                } else if ((type instanceof java.lang.reflect.ParameterizedType) && (!(java.lang.String.java.lang.String.java.lang.Class.isAssignableFrom(com.google.gson.reflect.TypeToken.get(((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0]).getRawType())))) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedHashMap<java.lang.Object, java.lang.Object>()));\n                        }\n                    };\n                } else {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new com.google.gson.internal.LinkedTreeMap<java.lang.String, java.lang.Object>()));\n                        }\n                    };\n                }\n            } \n            return null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"9d77fb9f-3e3a-11e6-90d7-c32e5bcdb32e","method":{"position":"com.google.gson.Gson:136","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245191/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return toJsonTree(src, typeOfSrc);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:132","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"9d77fba0-3e3a-11e6-90d7-a1b2755ea3de","method":{"position":"com.google.gson.internal.Primitives:79","type":"CtMethodImpl","sourcecode":"public static boolean isWrapperType(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.GenericArrayType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245191/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return com.google.gson.internal.Primitives.com.google.gson.internal.Primitives.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.containsKey(com.google.gson.internal.$Gson$Preconditions.checkNotNull(type));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"9d77fba1-3e3a-11e6-90d7-ddba90f12ab3","method":{"position":"com.google.gson.Gson:510","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src) {\n    if (src == null) {\n        {\n            if (src == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245191/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (src == null) {\n                        return toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull);\n                    } \n                    return toJson(src, src.getClass());\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245191/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[62,30],"tindex":"9d7822b2-3e3a-11e6-90d7-b56ffad14e05","method":{"position":"com.google.gson.Gson:133","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src) {\n    if (src != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245191/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return toJsonTree(src);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:565","type":"CtBinaryOperatorImpl","sourcecode":"(indent) == null"},"failures":[137,506,507,508,509,510,511,512,513,65,691,692,633],"tindex":"9d7822b3-3e3a-11e6-90d7-2f4b076b1ac5","method":{"position":"com.google.gson.stream.JsonWriter:212","type":"CtMethodImpl","sourcecode":"public final void setIndent(java.lang.String indent) {\n    if (indent == null) {\n        {\n            if ((indent.length()) == 0) {\n                com.google.gson.stream.JsonWriter.this.java.lang.String = null;\n                com.google.gson.stream.JsonWriter.this.java.lang.String = \":\";\n            } else {\n                com.google.gson.stream.JsonWriter.this.java.lang.String = indent;\n                com.google.gson.stream.JsonWriter.this.java.lang.String = \": \";\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245191/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"indent"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[],"tindex":"9d7822b4-3e3a-11e6-90d7-7bad12e16838","method":{"position":"com.google.gson.internal.Excluder:149","type":"CtMethodImpl","sourcecode":"public boolean excludeField(java.lang.reflect.Field field, boolean serialize) {\n    if (field.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245191/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (field.isSynthetic()) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245191/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (((int) & (field.getModifiers())) != 0) {\n                        return true;\n                    } \n                    if (((double) != (com.google.gson.internal.Excluder.com.google.gson.internal.Excluder.double)) && (!(isValidVersion(field.getAnnotation(com.google.gson.annotations.Since.com.google.gson.annotations.Since.java.lang.Class), field.getAnnotation(com.google.gson.annotations.Until.com.google.gson.annotations.Until.java.lang.Class))))) {\n                        return true;\n                    } \n                    if (field.isSynthetic()) {\n                        return true;\n                    } \n                    if (boolean) {\n                        com.google.gson.annotations.Expose com.google.gson.annotations.Expose = field.getAnnotation(com.google.gson.annotations.Expose.com.google.gson.annotations.Expose.java.lang.Class);\n                        if ((annotation == null) || (serialize ? !(annotation.serialize()) : !(annotation.deserialize()))) {\n                            return true;\n                        } \n                    } \n                    if ((!(boolean)) && (isInnerClass(field.getType()))) {\n                        return true;\n                    } \n                    if (isAnonymousOrLocal(field.getType())) {\n                        return true;\n                    } \n                    java.util.List<com.google.gson.ExclusionStrategy> java.util.List<com.google.gson.ExclusionStrategy> = serialize ? java.util.List<com.google.gson.ExclusionStrategy> : java.util.List<com.google.gson.ExclusionStrategy>;\n                    if (!(list.isEmpty())) {\n                        com.google.gson.FieldAttributes com.google.gson.FieldAttributes = new com.google.gson.FieldAttributes(field);\n                        for (com.google.gson.ExclusionStrategy com.google.gson.ExclusionStrategy : list) {\n                            if (exclusionStrategy.shouldSkipField(fieldAttributes)) {\n                                return true;\n                            } \n                        }\n                    } \n                    return false;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"field"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"9d7822b5-3e3a-11e6-90d7-771333e158be","method":{"position":"com.google.gson.Gson:261","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            double double = value.doubleValue();\n            checkValidFloatingPoint(doubleValue);\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245191/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"9d7849c6-3e3a-11e6-90d7-ab81cb99f6a5","method":{"position":"com.google.gson.Gson:871","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245191/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (json == null) {\n                return null;\n            } \n            return ((T)(fromJson(new com.google.gson.internal.bind.JsonTreeReader(json), typeOfT)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:79","type":"CtUnaryOperatorImpl","sourcecode":"!(json instanceof com.google.gson.JsonPrimitive)"},"failures":[],"tindex":"9d7849c7-3e3a-11e6-90d7-eb1fb7b42eb7","method":{"position":"com.google.gson.Gson:847","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(com.google.gson.JsonElement json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245191/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"9d7849c8-3e3a-11e6-90d7-19c9f8d6e09a","method":{"position":"com.google.gson.Gson:510","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src) {\n    if (src == null) {\n        {\n            if (src == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245191/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (src == null) {\n                        return toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull);\n                    } \n                    return toJson(src, src.getClass());\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245191/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"9d7849c9-3e3a-11e6-90d7-997c1d877665","method":{"position":"com.google.gson.JsonParser:44","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement parse(java.lang.String json) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            if (json == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245191/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            } else {\n                {\n                    return parse(new java.io.StringReader(json));\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245191/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:547","type":"CtBinaryOperatorImpl","sourcecode":"c == '\\u2029'"},"failures":[],"tindex":"9d7849ca-3e3a-11e6-90d7-dd01e658a7f1","method":{"position":"com.google.gson.stream.JsonReader:755","type":"CtMethodImpl","sourcecode":"private boolean isLiteral(char c) throws java.io.IOException {\n    if (c == '\\u2029') {\n        {\n            switch (c) {\n                case '/' :\n                case '\\\\' :\n                case ';' :\n                case '#' :\n                case '=' :\n                    checkLenient();\n                case '{' :\n                case '}' :\n                case '[' :\n                case ']' :\n                case ':' :\n                case ',' :\n                case ' ' :\n                case '\\t' :\n                case '\\f' :\n                case '\\r' :\n                case '\\n' :\n                    return false;\n                default :\n                    return true;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245191/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"c"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"9d7870db-3e3a-11e6-90d7-733247a660a2","method":{"position":"com.google.gson.internal.bind.TypeAdapters:282","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245191/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    out.value(value);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245191/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:105","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonObject"},"failures":[],"tindex":"9d7870dc-3e3a-11e6-90d7-8d263c09bc31","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:839","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245191/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return containsKey(o);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":59,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
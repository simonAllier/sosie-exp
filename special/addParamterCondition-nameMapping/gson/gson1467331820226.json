{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":141,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":545,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":205,"com.google.gson.functional.StringTest.testStringValueDeserialization":543,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":80,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":329,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":418,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":291,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":23,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":9,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":172,"com.google.gson.MixedStreamTest.testWriteLenient":224,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":120,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":425,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":4,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":186,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":119,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":533,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":338,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":484,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":561,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":569,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":299,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":43,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":161,"com.google.gson.functional.ObjectTest.testSingletonLists":117,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":419,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":562,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":284,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":546,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":75,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":193,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":538,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":434,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":127,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":2,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":341,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":96,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":626,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":559,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":149,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":206,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":330,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":598,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":85,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":277,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":57,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":597,"com.google.gson.functional.EnumTest.testEnumCaseMapping":483,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":544,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":618,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":276,"com.google.gson.functional.JsonTreeTest.testToJsonTree":370,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":211,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":436,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":382,"com.google.gson.JsonObjectTest.testEqualsNonEmptyObject":637,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":395,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":470,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":624,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":505,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":286,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":412,"com.google.gson.internal.LinkedHashTreeMapTest.testAvlBuilder":631,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":40,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":527,"com.google.gson.functional.ObjectTest.testNullDeserialization":251,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":194,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":556,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":125,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":350,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":617,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":292,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":244,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":55,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":442,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":130,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":616,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":567,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":387,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":437,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":177,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":354,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":353,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":433,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":335,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":625,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":314,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":360,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":394,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":252,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":501,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":312,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":417,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":173,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":327,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":590,"com.google.gson.functional.StreamingTypeAdaptersTest.testFromJsonTree":181,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":455,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":409,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":147,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":103,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":61,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":612,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":336,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":488,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":328,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":249,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":495,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":123,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":202,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":266,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":30,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":89,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":608,"com.google.gson.metrics.PerformanceTest.testDummy":218,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":191,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":376,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":468,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":22,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":63,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":571,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":614,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":16,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":424,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":19,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":411,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":441,"com.google.gson.JsonArrayTest.testEqualsNonEmptyArray":635,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":196,"com.google.gson.functional.CollectionTest.testSetDeserialization":188,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":570,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":230,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":239,"com.google.gson.functional.EnumTest.testEnumSet":475,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":319,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":93,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":62,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithNestedWildcards":105,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":400,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":585,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":245,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":84,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":467,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":332,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":21,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":343,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":52,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":578,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":344,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":289,"com.google.gson.functional.MapTest.testHashMapDeserialization":580,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":523,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":422,"com.google.gson.MixedStreamTest.testReadNulls":225,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":263,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":267,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":108,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":260,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":268,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":576,"com.google.gson.functional.MapTest.testSortedMap":601,"com.google.gson.functional.MapTest.testMapSerialization":596,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":262,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":12,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":325,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":507,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":113,"com.google.gson.functional.MapTest.testSerializeMaps":214,"com.google.gson.functional.MapTest.testComplexKeysSerialization":609,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":229,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":613,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":514,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":171,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":195,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":465,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":159,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":573,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":480,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":209,"com.google.gson.internal.LinkedHashTreeMapTest.testDoubleCapacity":632,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":25,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":250,"com.google.gson.functional.MapTest.testStringKeyDeserialization":611,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithBasicWildcards":107,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":511,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":67,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":356,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":295,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":615,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":47,"com.google.gson.functional.PrettyPrintingTest.testMap":207,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":290,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":520,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":264,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":390,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":574,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":1,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":513,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":549,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":553,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":407,"com.google.gson.functional.CollectionTest.testQueueSerialization":524,"com.google.gson.functional.MapTest.testMapSerializationEmpty":610,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":320,"com.google.gson.functional.MapTest.testMapOfMapSerialization":595,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":311,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":414,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":530,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":201,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":322,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":76,"com.google.gson.functional.FieldNamingTest.testIdentity":542,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":547,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":64,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":137,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":132,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":6,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":29,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":233,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":369,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":279,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":86,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":38,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":548,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":184,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":317,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":427,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":216,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":402,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":200,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":408,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":435,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":579,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":90,"com.google.gson.functional.MapTest.testMapSubclassSerialization":582,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":139,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":170,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":232,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":203,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":309,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":472,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":563,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":174,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":367,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":389,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":192,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":166,"com.google.gson.functional.EnumTest.testEnumSubclass":478,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":331,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":3,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":126,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":278,"com.google.gson.GsonBuilderTest.testRegisterTypeAdapterForCoreType":0,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":439,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":337,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":66,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":110,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":280,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":517,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":315,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":185,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":374,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":215,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":504,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":238,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":321,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":28,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":313,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":430,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":118,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":79,"com.google.gson.MixedStreamTest.testWriteNulls":222,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":503,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":486,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":497,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":82,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":165,"com.google.gson.CommentsTest.testParseComments":621,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":71,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":162,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":234,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":334,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":448,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":509,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":11,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":551,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":600,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":372,"com.google.gson.MixedStreamTest.testReadInvalidState":220,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":566,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":469,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":34,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":352,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":13,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":288,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":630,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":515,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithTypeParameters":106,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":445,"com.google.gson.internal.bind.JsonTreeWriterTest.testWriteAfterClose":633,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":304,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":199,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":31,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":347,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":500,"com.google.gson.functional.MapTest.testMapDeserialization":588,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":410,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":212,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":78,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":160,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":380,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":587,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":460,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":458,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":111,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":91,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":479,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":153,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":243,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":253,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":451,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":473,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":375,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":396,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":44,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":456,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":516,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":208,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":599,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":35,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":275,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":73,"com.google.gson.functional.PrimitiveTest.testShortSerialization":351,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":41,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":340,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":58,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictNansAndInfinities":104,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":310,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":339,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":287,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":401,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":112,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":477,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":187,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":138,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":583,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":303,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":59,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":358,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":175,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":33,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":163,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":115,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":365,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":359,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":50,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":27,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":65,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":151,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":254,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":95,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":384,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":148,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":37,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":68,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":316,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":135,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":122,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":482,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":231,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":453,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":397,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":528,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":471,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":69,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":457,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":416,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":461,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":294,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":146,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":404,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":462,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":421,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":378,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":521,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":281,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":346,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":318,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":362,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":273,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":459,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":476,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":144,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":14,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":121,"com.google.gson.functional.MapTest.testGeneralMapField":605,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":494,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":364,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":46,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":440,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":508,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":426,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":603,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":285,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":385,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":490,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":342,"com.google.gson.MixedStreamTest.testReadMixedStreamed":114,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":305,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":398,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":591,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":87,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":145,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":534,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":190,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":323,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":518,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":20,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":415,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":592,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":444,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":581,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":72,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":363,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":116,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":99,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":306,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":413,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":487,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeNullField":179,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":257,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":383,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":529,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":464,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":77,"com.google.gson.functional.ObjectTest.testNestedDeserialization":136,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":248,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":371,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":142,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":373,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":56,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":361,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":447,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":24,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":550,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":593,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":466,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":349,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":452,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":8,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":485,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":537,"com.google.gson.functional.ObjectTest.testNullSerialization":240,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":454,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":443,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":584,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":88,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":604,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":506,"com.google.gson.functional.MapTest.testInterfaceTypeMap":602,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":48,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":377,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":282,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":49,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":481,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":158,"com.google.gson.MixedStreamTest.testReadClosed":221,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":474,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":386,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":54,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":297,"com.google.gson.MixedStreamTest.testWriteClosed":227,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":143,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":526,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":150,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":235,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":438,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":167,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":92,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":450,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":255,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":446,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":432,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":236,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":381,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":525,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":100,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeWithCustomTypeAdapter":51,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":326,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":102,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":157,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":531,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":32,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":10,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":198,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":366,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":302,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":368,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":392,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":197,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":491,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":449,"com.google.gson.functional.CollectionTest.testQueueDeserialization":539,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":308,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":324,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":555,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserialize":182,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":261,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":101,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":431,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":131,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":589,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":406,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":134,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":178,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":519,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":219,"com.google.gson.functional.MapTest.testRawMapSerialization":607,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":535,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":420,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":623,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":156,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":246,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":17,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":463,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":634,"com.google.gson.functional.PrimitiveTest.testByteSerialization":348,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":496,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":572,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":271,"com.google.gson.ObjectTypeAdapterTest.testSerialize":622,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":176,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":293,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":5,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":94,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":540,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":83,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":168,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":552,"com.google.gson.functional.MapTest.testMapWithQuotes":594,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":300,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":391,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":554,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":60,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":269,"com.google.gson.JsonObjectTest.testEqualsOnEmptyObject":636,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":565,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":183,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":355,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":388,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":568,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":39,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":164,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":133,"com.google.gson.internal.LinkedHashTreeMapTest.testDoubleCapacityAllNodesOnLeft":629,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":213,"com.google.gson.functional.ObjectTest.testEmptyStringDeserialization":242,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":333,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":403,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":124,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":512,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":428,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":393,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":7,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":98,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":405,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":345,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":577,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":532,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":499,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":42,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":429,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":492,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":109,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":258,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":564,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":140,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":575,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":45,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":283,"com.google.gson.internal.LinkedHashTreeMapTest.testRemoveRootDoesNotDoubleUnlink":628,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":74,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":128,"com.google.gson.functional.ObjectTest.testNestedSerialization":247,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":274,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":296,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":489,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":558,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":228,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":606,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":15,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":36,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":226,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":620,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":241,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":256,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":357,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":379,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":189,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":154,"com.google.gson.GsonBuilderTest.testCreatingMoreThanOnce":217,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":298,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":619,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":129,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":152,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":97,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":557,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":502,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":155,"com.google.gson.functional.CollectionTest.testSetSerialization":536,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":70,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":210,"com.google.gson.functional.StringTest.testStringValueSerialization":560,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":270,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":26,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":522,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":627,"com.google.gson.MixedStreamTest.testWriteInvalidState":223,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":493,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":237,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":301,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":307,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":510,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":265,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":399,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":541,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":81,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":259,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":53,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeNullObject":180,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":169,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":423,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":272,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":586,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":204,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":18,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":498},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:141","type":"CtBinaryOperatorImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87],"tindex":"32a6bbb7-3f20-11e6-8c68-8f175b48406f","method":{"position":"com.google.gson.GsonBuilder:447","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\npublic com.google.gson.GsonBuilder registerTypeAdapter(java.lang.reflect.Type type, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof java.lang.reflect.WildcardType) {\n        {\n            com.google.gson.internal.$Gson$Preconditions.checkArgument(((((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) || (typeAdapter instanceof com.google.gson.InstanceCreator<?>)) || (typeAdapter instanceof com.google.gson.TypeAdapter<?>)));\n            if (typeAdapter instanceof com.google.gson.InstanceCreator<?>) {\n                java.util.Map<java.lang.reflect.Type, com.google.gson.InstanceCreator<?>>.put(type, ((com.google.gson.InstanceCreator)(typeAdapter)));\n            } \n            if ((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) {\n                com.google.gson.reflect.TypeToken<?> com.google.gson.reflect.TypeToken<?> = com.google.gson.reflect.TypeToken.get(type);\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.TreeTypeAdapter.newFactoryWithMatchRawType(typeToken, typeAdapter));\n            } \n            if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.internal.bind.TypeAdapters.newFactory(com.google.gson.reflect.TypeToken.get(type), ((com.google.gson.TypeAdapter)(typeAdapter))));\n            } \n            return com.google.gson.GsonBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467330766961/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"typeAdapter"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"32a77f08-3f20-11e6-8c68-4382ab613c41","method":{"position":"com.google.gson.Gson:136","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467330766961/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src != null) {\n                {\n                    return toJsonTree(src, typeOfSrc);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467330766961/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"32a7a619-3f20-11e6-8c68-cd96eb94d30d","method":{"position":"com.google.gson.Gson:552","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467330766961/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            if (src != null) {\n                toJson(src, src.getClass(), writer);\n            } else {\n                toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull, writer);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[88,89,90,91,92,93,94],"tindex":"32a7a61a-3f20-11e6-8c68-b5ac99dec94f","method":{"position":"com.google.gson.Gson:285","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    float float = value.floatValue();\n                    checkValidFloatingPoint(floatValue);\n                    out.value(value);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467330766961/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467330766961/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:233","type":"CtBinaryOperatorImpl"},"failures":[95,96,97,98,99,100,101,102],"tindex":"32a7cd2b-3f20-11e6-8c68-434d43329808","method":{"position":"com.google.gson.internal.Excluder:232","type":"CtMethodImpl","sourcecode":"private boolean isValidSince(com.google.gson.annotations.Since annotation) {\n    if (annotation != null) {\n        {\n            if (annotation != null) {\n                double double = annotation.value();\n                if (annotationVersion > (double)) {\n                    return false;\n                } \n            } \n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467330766961/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:462","type":"CtBinaryOperatorImpl"},"failures":[103,104],"tindex":"32a7f43c-3f20-11e6-8c68-8ff0f460b4c1","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:162","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(double value) throws java.io.IOException {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467330766961/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467330766961/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if ((!(isLenient())) && ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value)))) {\n                        throw new java.lang.IllegalArgumentException((\"JSON forbids NaN and infinities: \" + value));\n                    } \n                    put(new com.google.gson.JsonPrimitive(value));\n                    return com.google.gson.internal.bind.JsonTreeWriter.this;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:164","type":"CtBinaryOperatorImpl"},"failures":[105,106,107],"tindex":"32a7f43d-3f20-11e6-8c68-6b4830b80fc8","method":{"position":"com.google.gson.reflect.TypeToken:272","type":"CtMethodImpl","sourcecode":"private static boolean matches(java.lang.reflect.Type from, java.lang.reflect.Type to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeMap) {\n    if (to instanceof java.lang.reflect.GenericArrayType) {\n        {\n            return (to.equals(from)) || ((from instanceof java.lang.reflect.TypeVariable) && (to.equals(typeMap.get(((java.lang.reflect.TypeVariable<?>)(from)).getName()))));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467330766961/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"to"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.FieldNamingPolicy:143","type":"CtInvocationImpl"},"failures":[108,109,110,111,112,113],"tindex":"32a81b4e-3f20-11e6-8c68-ad122c427111","method":{"position":"com.google.gson.FieldNamingPolicy:163","type":"CtMethodImpl","sourcecode":"private static java.lang.String modifyString(char firstCharacter, java.lang.String srcString, int indexOfSubstring) {\n    if (!(java.lang.Character.isUpperCase(firstCharacter))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467330766961/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (java.lang.Character.isLetter(firstCharacter)) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467330766961/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return indexOfSubstring < (srcString.length()) ? firstCharacter + (srcString.substring(indexOfSubstring)) : java.lang.String.valueOf(firstCharacter);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"firstCharacter":"firstCharacter"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.internal.bind.ObjectTypeAdapter:95","type":"CtBinaryOperatorImpl"},"failures":[114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,9,137,138,139,140,141,142,143,144,12,13,14,17,19,20,21,26,28,145,146,147,148,149,150,151,152,153,154,37,155,156,110,157,158,159,111,160,161,162,163,164,165,166,43,167,168,169,44,170,171,172,173,174,175,176,177,178,49,51,179,180,181,182,183,184,185,186,187,188,189,190,191,96,97,100,101,61,65,192,193,81,194,82,195,196,197,198,199,200,201,202],"tindex":"32a8425f-3f20-11e6-8c68-3f02c21b5dc6","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:101","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nvoid read(com.google.gson.stream.JsonReader reader, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value == null) {\n        {\n            java.lang.Object java.lang.Object = com.google.gson.TypeAdapter<?>.read(reader);\n            if ((fieldValue != null) || (!isPrimitive)) {\n                field.set(value, fieldValue);\n            } \n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467330766961/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"32a86970-3f20-11e6-8c68-df84a08fc244","method":{"position":"com.google.gson.Gson:576","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        {\n            try {\n                com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                toJson(src, typeOfSrc, jsonWriter);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467330766961/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:131","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"32a86971-3f20-11e6-8c68-9bbf11269ffe","method":{"position":"com.google.gson.internal.$Gson$Types:431","type":"CtMethodImpl","sourcecode":"private static void checkNotPrimitive(java.lang.reflect.Type type) {\n    com.google.gson.internal.$Gson$Preconditions.checkArgument(((!(type instanceof java.lang.Class<?>)) || (!(((java.lang.Class<?>)(type)).isPrimitive()))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:565","type":"CtBinaryOperatorImpl"},"failures":[203,204,205,206,207,208,209,210,211,212,213,149,214],"tindex":"32a89082-3f20-11e6-8c68-dfbfb7bcd2d1","method":{"position":"com.google.gson.stream.JsonWriter:212","type":"CtMethodImpl","sourcecode":"public final void setIndent(java.lang.String indent) {\n    if (indent == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467330766961/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (indent == null) {\n                {\n                    if ((indent.length()) == 0) {\n                        com.google.gson.stream.JsonWriter.this.java.lang.String = null;\n                        com.google.gson.stream.JsonWriter.this.java.lang.String = \":\";\n                    } else {\n                        com.google.gson.stream.JsonWriter.this.java.lang.String = indent;\n                        com.google.gson.stream.JsonWriter.this.java.lang.String = \": \";\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467330766961/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"indent"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:578","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"32a89083-3f20-11e6-8c68-bbed8e8caec5","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:401","type":"CtMethodImpl","sourcecode":"private void rotateLeft(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467330766961/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivotLeft;\n            if (pivotLeft != null) {\n                pivotLeft.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            } \n            replaceInParent(root, pivot);\n            pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot;\n            root.int = (java.lang.Math.max((left != null ? left.int : 0), (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n            pivot.int = (java.lang.Math.max(root.int, (pivotRight != null ? pivotRight.int : 0))) + 1;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:274","type":"CtVariableReadImpl"},"failures":[215,216,217,218,1,2,3,219,220,221,203,222,223,224,225,226,227,114,115,206,207,208,209,210,211,212,213,228,116,229,230,231,232,4,5,6,7,8,233,117,118,119,234,120,121,235,122,123,236,237,124,238,239,125,240,241,242,126,243,127,244,245,128,246,247,248,129,249,130,131,250,251,252,132,253,254,133,255,134,135,136,9,256,137,257,10,258,259,138,139,140,260,261,141,262,263,142,264,143,144,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,265,266,267,268,269,145,146,147,270,271,272,273,274,275,276,277,278,279,88,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,89,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,148,346,347,348,349,350,351,352,90,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,91,369,370,149,371,372,373,374,375,376,92,377,378,379,150,151,380,381,382,383,384,385,386,387,152,153,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,154,408,409,410,411,412,413,414,415,31,416,417,418,419,420,421,32,422,423,424,33,425,426,427,428,429,430,431,34,432,433,434,35,435,436,437,438,36,37,439,38,440,155,441,442,443,444,445,446,447,448,449,450,108,156,451,452,453,109,454,110,157,455,158,456,159,111,457,160,161,458,39,40,459,460,162,461,41,462,463,464,465,163,164,165,42,466,166,467,468,93,43,167,168,169,44,469,45,170,470,471,46,47,48,472,473,474,475,476,477,478,479,480,481,171,482,483,484,172,173,174,175,485,486,487,488,176,489,490,177,178,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,94,507,508,509,510,511,512,513,514,515,516,184,185,517,52,53,54,55,56,57,518,58,186,519,187,520,521,522,523,524,525,526,527,528,529,530,531,532,188,533,534,535,536,537,538,59,539,112,540,541,113,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,189,190,562,191,563,95,96,97,98,99,100,101,102,564,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,565,77,566,567,568,569,570,571,572,192,193,573,574,575,576,577,578,579,78,79,580,581,582,214,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,80,81,194,82,195,196,197,616,617,202,618,619,620,83,84,85,86,87,621],"tindex":"32a8dea4-3f20-11e6-8c68-c374c695fa6d","method":{"position":"com.google.gson.Gson:273","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> floatAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                {\n                    if (serializeSpecialFloatingPointValues) {\n                        return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n                    } \n                    return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                        @java.lang.Override\n                        public java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                            if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                                in.nextNull();\n                                return null;\n                            } \n                            return ((float)(in.nextDouble()));\n                        }\n\n                        @java.lang.Override\n                        public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                            if (value == null) {\n                                out.nullValue();\n                                return ;\n                            } \n                            float float = value.floatValue();\n                            checkValidFloatingPoint(floatValue);\n                            out.value(value);\n                        }\n                    };\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467330766961/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467330766961/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[224,335,356,362],"tindex":"32a953d5-3f20-11e6-8c68-1f3a24d66a92","method":{"position":"com.google.gson.internal.bind.TypeAdapters:297","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467330766961/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.internal.bind.DateTypeAdapter:86","type":"CtBinaryOperatorImpl"},"failures":[215,216,622,219,203,208,209,213,116,4,5,7,8,233,117,234,235,236,239,241,245,246,247,249,252,253,254,255,137,257,258,138,139,140,260,141,262,264,13,15,23,25,29,30,265,266,268,146,147,270,273,274,368,91,369,370,149,373,374,375,376,92,377,378,379,380,381,382,415,428,432,36,439,440,441,442,445,446,447,448,449,450,108,156,451,453,109,454,455,456,457,459,460,461,462,465,164,466,166,467,468,93,167,168,169,469,470,472,481,176,177,178,49,50,623,624,625,626,183,508,516,517,186,187,528,533,536,112,540,541,113,542,562,95,98,99,102,66,68,70,566,568,569,570,193,578,589,602,604,605,80,81,194,82,195,197,198,627,199,200,201,202,84],"tindex":"32a97ae6-3f20-11e6-8c68-739f58a965c9","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:108","type":"CtMethodImpl","sourcecode":"public boolean writeField(java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value == null) {\n        {\n            if (!(boolean))\n                return false;\n            \n            java.lang.Object java.lang.Object = field.get(value);\n            return fieldValue != value;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467330766961/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:246","type":"CtVariableReadImpl"},"failures":[628],"tindex":"32a9a1f7-3f20-11e6-8c68-8721adbdea6c","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:245","type":"CtMethodImpl","sourcecode":"void removeInternal(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node, boolean unlink) {\n    if (unlink) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467330766961/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (unlink) {\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            if ((left != null) && (right != null)) {\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = (left.int) > (right.int) ? left.last() : right.first();\n                removeInternal(adjacent, false);\n                int int = 0;\n                left = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                if (left != null) {\n                    leftHeight = left.int;\n                    adjacent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left;\n                    left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                } \n                int int = 0;\n                right = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                if (right != null) {\n                    rightHeight = right.int;\n                    adjacent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                } \n                adjacent.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                replaceInParent(node, adjacent);\n                return ;\n            } else if (left != null) {\n                replaceInParent(node, left);\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } else if (right != null) {\n                replaceInParent(node, right);\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } else {\n                replaceInParent(node, null);\n            }\n            rebalance(originalParent, false);\n            (int)--;\n            (int)++;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"unlink":"unlink"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"32a9f018-3f20-11e6-8c68-2528cecc692c","method":{"position":"com.google.gson.Gson:285","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    float float = value.floatValue();\n                    checkValidFloatingPoint(floatValue);\n                    out.value(value);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467330766961/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467330766961/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.FieldNamingPolicy:155","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"32aa1729-3f20-11e6-8c68-1d490e30ff30","method":{"position":"com.google.gson.FieldNamingPolicy:163","type":"CtMethodImpl","sourcecode":"private static java.lang.String modifyString(char firstCharacter, java.lang.String srcString, int indexOfSubstring) {\n    if (!(java.lang.Character.isUpperCase(firstCharacter))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467330766961/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (java.lang.Character.isLetter(firstCharacter)) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467330766961/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return indexOfSubstring < (srcString.length()) ? firstCharacter + (srcString.substring(indexOfSubstring)) : java.lang.String.valueOf(firstCharacter);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"firstCharacter":"firstCharacter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:274","type":"CtVariableReadImpl"},"failures":[224,322,335,336,349,356,362],"tindex":"32aa3e3a-3f20-11e6-8c68-dbc81b5e76a5","method":{"position":"com.google.gson.Gson:249","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> doubleAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467330766961/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467330766961/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (serializeSpecialFloatingPointValues) {\n                        return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n                    } \n                    return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                        @java.lang.Override\n                        public java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                            if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                                in.nextNull();\n                                return null;\n                            } \n                            return in.nextDouble();\n                        }\n\n                        @java.lang.Override\n                        public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                            if (value == null) {\n                                out.nullValue();\n                                return ;\n                            } \n                            double double = value.doubleValue();\n                            checkValidFloatingPoint(doubleValue);\n                            out.value(value);\n                        }\n                    };\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:565","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"32aa654b-3f20-11e6-8c68-c5b673b16037","method":{"position":"com.google.gson.stream.JsonWriter:212","type":"CtMethodImpl","sourcecode":"public final void setIndent(java.lang.String indent) {\n    if (indent == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467330766961/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (indent == null) {\n                {\n                    if ((indent.length()) == 0) {\n                        com.google.gson.stream.JsonWriter.this.java.lang.String = null;\n                        com.google.gson.stream.JsonWriter.this.java.lang.String = \":\";\n                    } else {\n                        com.google.gson.stream.JsonWriter.this.java.lang.String = indent;\n                        com.google.gson.stream.JsonWriter.this.java.lang.String = \": \";\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467330766961/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"indent"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:305","type":"CtBinaryOperatorImpl"},"failures":[629,630,631,632],"tindex":"32aa8c5c-3f20-11e6-8c68-49dc1774ed2c","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:686","type":"CtMethodImpl","sourcecode":"void add(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node) {\n    if (node != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467330766961/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            node.int = 1;\n            if (((int) > 0) && (((int) & 1) == 0)) {\n                (int)++;\n                (int)--;\n                (int)++;\n            } \n            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node;\n            (int)++;\n            if (((int) > 0) && (((int) & 1) == 0)) {\n                (int)++;\n                (int)--;\n                (int)++;\n            } \n            for (int int = 4 ; ((int) & (scale - 1)) == (scale - 1) ; scale *= 2) {\n                if ((int) == 0) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                    center.int = (right.int) + 1;\n                    left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                } else if ((int) == 1) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                    center.int = (right.int) + 1;\n                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    int = 0;\n                } else if ((int) == 2) {\n                    int = 0;\n                } \n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"node"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:92","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"32aada7d-3f20-11e6-8c68-95226154bb2d","method":{"position":"com.google.gson.internal.$Gson$Types:213","type":"CtMethodImpl","sourcecode":"private static int hashCodeOrZero(java.lang.Object o) {\n    return o != null ? o.hashCode() : 0;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"32ab018e-3f20-11e6-8c68-95ee1f3bfa6b","method":{"position":"com.google.gson.Gson:847","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(com.google.gson.JsonElement json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467330766961/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl"},"failures":[633,4,5,7,8,141,147,368,91,370,149,373,374,375,378,379,382,449,42,602,605,80,634],"tindex":"32ab018f-3f20-11e6-8c68-6d0ae1d6f908","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:144","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467330766961/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:250","type":"CtVariableReadImpl"},"failures":[],"tindex":"32ab28a0-3f20-11e6-8c68-51b1a2c41265","method":{"position":"com.google.gson.Gson:273","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> floatAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                {\n                    if (serializeSpecialFloatingPointValues) {\n                        return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n                    } \n                    return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                        @java.lang.Override\n                        public java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                            if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                                in.nextNull();\n                                return null;\n                            } \n                            return ((float)(in.nextDouble()));\n                        }\n\n                        @java.lang.Override\n                        public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                            if (value == null) {\n                                out.nullValue();\n                                return ;\n                            } \n                            float float = value.floatValue();\n                            checkValidFloatingPoint(floatValue);\n                            out.value(value);\n                        }\n                    };\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467330766961/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467330766961/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:462","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"32ab4fb1-3f20-11e6-8c68-a74a37201a02","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:162","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(double value) throws java.io.IOException {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467330766961/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467330766961/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if ((!(isLenient())) && ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value)))) {\n                        throw new java.lang.IllegalArgumentException((\"JSON forbids NaN and infinities: \" + value));\n                    } \n                    put(new com.google.gson.JsonPrimitive(value));\n                    return com.google.gson.internal.bind.JsonTreeWriter.this;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl"},"failures":[4,5,6,7,8,141,370,374,378,379,382,38,449,450,42],"tindex":"32ab76c2-3f20-11e6-8c68-19f847b17682","method":{"position":"com.google.gson.Gson:468","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src) {\n    if (src != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467330766961/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src == null) {\n                return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            return toJsonTree(src, src.getClass());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:340","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"32ab76c3-3f20-11e6-8c68-4f24fb74d01b","method":{"position":"com.google.gson.internal.$Gson$Types:322","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type resolve(java.lang.reflect.Type context, java.lang.Class<?> contextRawType, java.lang.reflect.Type toResolve) {\n    while (true) {\n        if (toResolve instanceof java.lang.reflect.TypeVariable) {\n            java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(toResolve));\n            toResolve = com.google.gson.internal.$Gson$Types.resolveTypeVariable(context, contextRawType, typeVariable);\n            if (toResolve == typeVariable) {\n                return toResolve;\n            } \n        } else if ((toResolve instanceof java.lang.Class) && (((java.lang.Class<?>)(toResolve)).isArray())) {\n            java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getComponentType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, componentType);\n            return componentType == newComponentType ? original : com.google.gson.internal.$Gson$Types.arrayOf(newComponentType);\n        } else if (toResolve instanceof java.lang.reflect.GenericArrayType) {\n            java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getGenericComponentType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, componentType);\n            return componentType == newComponentType ? original : com.google.gson.internal.$Gson$Types.arrayOf(newComponentType);\n        } else if (toResolve instanceof java.lang.reflect.ParameterizedType) {\n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getOwnerType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, ownerType);\n            boolean boolean = newOwnerType != ownerType;\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getActualTypeArguments();\n            for (int int = 0, int int = args.int ; t < length ; t++) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, args[t]);\n                if (resolvedTypeArgument != (args[t])) {\n                    if (!changed) {\n                        args = args.clone();\n                        changed = true;\n                    } \n                    args[t] = resolvedTypeArgument;\n                } \n            }\n            return changed ? com.google.gson.internal.$Gson$Types.newParameterizedTypeWithOwner(newOwnerType, original.getRawType(), args) : original;\n        } else if (toResolve instanceof java.lang.reflect.WildcardType) {\n            java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(toResolve));\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getLowerBounds();\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getUpperBounds();\n            if ((originalLowerBound.int) == 1) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, originalLowerBound[0]);\n                if (lowerBound != (originalLowerBound[0])) {\n                    return com.google.gson.internal.$Gson$Types.supertypeOf(lowerBound);\n                } \n            } else if ((originalUpperBound.int) == 1) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, originalUpperBound[0]);\n                if (upperBound != (originalUpperBound[0])) {\n                    return com.google.gson.internal.$Gson$Types.subtypeOf(upperBound);\n                } \n            } \n            return original;\n        } else {\n            return toResolve;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"context"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:459","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"32ab9dd4-3f20-11e6-8c68-0d2adc02ae45","method":{"position":"com.google.gson.TreeTypeAdapter:103","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newTypeHierarchyFactory(java.lang.Class<?> hierarchyType, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467330766961/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , null , false , hierarchyType);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"32ab9dd5-3f20-11e6-8c68-a518fb5c88f7","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:223","type":"CtMethodImpl","sourcecode":"private boolean equal(java.lang.Object a, java.lang.Object b) {\n    if (!(a instanceof java.lang.reflect.GenericArrayType)) {\n        {\n            return (a == b) || ((a != null) && (a.equals(b)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467330766961/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:189","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"32ab9dd6-3f20-11e6-8c68-1dd4195c2dbd","method":{"position":"com.google.gson.internal.$Gson$Types:151","type":"CtMethodImpl","sourcecode":"static boolean equal(java.lang.Object a, java.lang.Object b) {\n    return (a == b) || ((a != null) && (a.equals(b)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:106","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"32abc4e7-3f20-11e6-8c68-25df7a7d5faf","method":{"position":"com.google.gson.JsonArray:115","type":"CtMethodImpl","sourcecode":"public boolean contains(com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonArray) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467330766961/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return java.util.List<com.google.gson.JsonElement>.contains(element);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:198","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"32abc4e8-3f20-11e6-8c68-21fb6b055b87","method":{"position":"com.google.gson.internal.$Gson$Types:151","type":"CtMethodImpl","sourcecode":"static boolean equal(java.lang.Object a, java.lang.Object b) {\n    return (a == b) || ((a != null) && (a.equals(b)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:298","type":"CtBinaryOperatorImpl"},"failures":[224,88,89,304,311,314,90],"tindex":"32abc4e9-3f20-11e6-8c68-bd641440fd66","method":{"position":"com.google.gson.Gson:297","type":"CtMethodImpl","sourcecode":"private void checkValidFloatingPoint(double value) {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467330766961/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                throw new java.lang.IllegalArgumentException(((value + \" is not a valid double value as per JSON specification. To override this\") + \" behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.\"));\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:105","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"32abebfa-3f20-11e6-8c68-6f7c19d3ee8b","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:804","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467330766961/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (o instanceof java.util.Map.Entry) && ((findByEntry(((java.util.Map.Entry<?, ?>)(o)))) != null);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:305","type":"CtBinaryOperatorImpl"},"failures":[630,628],"tindex":"32abebfb-3f20-11e6-8c68-43ac388fbf67","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:311","type":"CtMethodImpl","sourcecode":"private void replaceInParent(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node, com.google.gson.internal.LinkedHashTreeMap.Node<K, V> replacement) {\n    if (node != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467330766961/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            if (replacement != null) {\n                replacement.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = parent;\n            } \n            if (parent != null) {\n                if ((parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) == node) {\n                    parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = replacement;\n                } else {\n                    assert (parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) == node;\n                    parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = replacement;\n                }\n            } else {\n                int int = (node.int) & ((com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[].int) - 1);\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[][index] = replacement;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"node"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"32ac130c-3f20-11e6-8c68-0fa8cdb12cad","method":{"position":"com.google.gson.Gson:261","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            double double = value.doubleValue();\n            checkValidFloatingPoint(doubleValue);\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467330766961/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:274","type":"CtVariableReadImpl"},"failures":[],"tindex":"32ac130d-3f20-11e6-8c68-95cb654331b7","method":{"position":"com.google.gson.Gson:249","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> doubleAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467330766961/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467330766961/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (serializeSpecialFloatingPointValues) {\n                        return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n                    } \n                    return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                        @java.lang.Override\n                        public java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                            if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                                in.nextNull();\n                                return null;\n                            } \n                            return in.nextDouble();\n                        }\n\n                        @java.lang.Override\n                        public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                            if (value == null) {\n                                out.nullValue();\n                                return ;\n                            } \n                            double double = value.doubleValue();\n                            checkValidFloatingPoint(doubleValue);\n                            out.value(value);\n                        }\n                    };\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:188","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"32ac3a1e-3f20-11e6-8c68-45a6c3b0f438","method":{"position":"com.google.gson.reflect.TypeToken:122","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic boolean isAssignableFrom(java.lang.reflect.Type from) {\n    if (from == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467330766961/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (from == null) {\n                return false;\n            } \n            if (java.lang.reflect.Type.equals(from)) {\n                return true;\n            } \n            if ((java.lang.reflect.Type) instanceof java.lang.Class<?>) {\n                return java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from));\n            } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.ParameterizedType) {\n                return com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n            } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.GenericArrayType) {\n                return (java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from))) && (com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.GenericArrayType)(java.lang.reflect.Type))));\n            } else {\n                throw com.google.gson.reflect.TypeToken.buildUnexpectedTypeError(java.lang.reflect.Type, java.lang.Class.java.lang.Class.java.lang.Class, java.lang.reflect.ParameterizedType.java.lang.reflect.ParameterizedType.java.lang.Class, java.lang.reflect.GenericArrayType.java.lang.reflect.GenericArrayType.java.lang.Class);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:92","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"32ac3a1f-3f20-11e6-8c68-9bfce9436e18","method":{"position":"com.google.gson.internal.LinkedTreeMap:570","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof java.util.Iterator) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467330766961/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (o instanceof java.util.Map.Entry) && ((findByEntry(((java.util.Map.Entry<?, ?>)(o)))) != null);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:94","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"32ac6130-3f20-11e6-8c68-6f4ed2ac6583","method":{"position":"com.google.gson.internal.$Gson$Types:93","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type canonicalize(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class) {\n        java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(type));\n        return c.isArray() ? new com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl(com.google.gson.internal.$Gson$Types.canonicalize(c.getComponentType())) : c;\n    } else if (type instanceof java.lang.reflect.ParameterizedType) {\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(type));\n        return new com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl(p.getOwnerType() , p.getRawType() , p.getActualTypeArguments());\n    } else if (type instanceof java.lang.reflect.GenericArrayType) {\n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(type));\n        return new com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl(g.getGenericComponentType());\n    } else if (type instanceof java.lang.reflect.WildcardType) {\n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(type));\n        return new com.google.gson.internal.$Gson$Types.WildcardTypeImpl(w.getUpperBounds() , w.getLowerBounds());\n    } else {\n        return type;\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:109","type":"CtBinaryOperatorImpl"},"failures":[635,387,636,637],"tindex":"32ac6131-3f20-11e6-8c68-1d7594e0fd52","method":{"position":"com.google.gson.JsonObject:186","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonPrimitive) {\n        {\n            return (o == (com.google.gson.JsonObject.this)) || ((o instanceof com.google.gson.JsonObject) && (((com.google.gson.JsonObject)(o)).com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.equals(com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467330766961/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:164","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"32ac8842-3f20-11e6-8c68-7d541da528ac","method":{"position":"com.google.gson.reflect.TypeToken:185","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.ParameterizedType to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeVarMap) {\n    if (from instanceof java.lang.reflect.GenericArrayType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467330766961/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (from == null) {\n                return false;\n            } \n            if (to.equals(from)) {\n                return true;\n            } \n            java.lang.Class<?> java.lang.Class<?> = com.google.gson.internal.$Gson$Types.getRawType(from);\n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = null;\n            if (from instanceof java.lang.reflect.ParameterizedType) {\n                ptype = ((java.lang.reflect.ParameterizedType)(from));\n            } \n            if (ptype != null) {\n                java.lang.reflect.Type[] java.lang.reflect.Type[] = ptype.getActualTypeArguments();\n                java.lang.reflect.TypeVariable<?>[] java.lang.reflect.TypeVariable<?>[] = clazz.getTypeParameters();\n                for (int int = 0 ; i < (tArgs.int) ; i++) {\n                    java.lang.reflect.Type java.lang.reflect.Type = tArgs[i];\n                    java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = tParams[i];\n                    while (arg instanceof java.lang.reflect.TypeVariable<?>) {\n                        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(arg));\n                        arg = typeVarMap.get(v.getName());\n                    }\n                    typeVarMap.put(var.getName(), arg);\n                }\n                if (com.google.gson.reflect.TypeToken.typeEquals(ptype, to, typeVarMap)) {\n                    return true;\n                } \n            } \n            for (java.lang.reflect.Type java.lang.reflect.Type : clazz.getGenericInterfaces()) {\n                if (com.google.gson.reflect.TypeToken.isAssignableFrom(itype, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap))) {\n                    return true;\n                } \n            }\n            java.lang.reflect.Type java.lang.reflect.Type = clazz.getGenericSuperclass();\n            return com.google.gson.reflect.TypeToken.isAssignableFrom(sType, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"32ac8843-3f20-11e6-8c68-21e6443c890a","method":{"position":"com.google.gson.DefaultDateTypeAdapter:77","type":"CtMethodImpl","sourcecode":"public java.util.Date deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT, com.google.gson.JsonDeserializationContext context) throws com.google.gson.JsonParseException {\n    if (json == null) {\n        {\n            if (!(json instanceof com.google.gson.JsonPrimitive)) {\n                throw new com.google.gson.JsonParseException(\"The date should be a string value\");\n            } \n            java.util.Date java.util.Date = deserializeToDate(json);\n            if (typeOfT == (java.util.Date.java.util.Date.java.lang.Class)) {\n                return date;\n            } else if (typeOfT == (java.sql.Timestamp.java.sql.Timestamp.java.lang.Class)) {\n                return new java.sql.Timestamp(date.getTime());\n            } else if (typeOfT == (java.sql.Date.java.sql.Date.java.lang.Class)) {\n                return new java.sql.Date(date.getTime());\n            } else {\n                throw new java.lang.IllegalArgumentException((((getClass()) + \" cannot deserialize to \") + typeOfT));\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467330766961/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:545","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"32ac8844-3f20-11e6-8c68-e70cd0ebfdcd","method":{"position":"com.google.gson.stream.JsonReader:755","type":"CtMethodImpl","sourcecode":"private boolean isLiteral(char c) throws java.io.IOException {\n    if (c == '\\u2028') {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467330766961/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            switch (c) {\n                case '/' :\n                case '\\\\' :\n                case ';' :\n                case '#' :\n                case '=' :\n                    checkLenient();\n                case '{' :\n                case '}' :\n                case '[' :\n                case ']' :\n                case ':' :\n                case ',' :\n                case ' ' :\n                case '\\t' :\n                case '\\f' :\n                case '\\r' :\n                case '\\n' :\n                    return false;\n                default :\n                    return true;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"c"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:105","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"32acaf55-3f20-11e6-8c68-0926e6184f5f","method":{"position":"com.google.gson.internal.LinkedTreeMap:481","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"rawtypes\")\n@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467330766961/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof java.util.Map.Entry) {\n                java.util.Map.Entry java.util.Map.Entry = ((java.util.Map.Entry)(o));\n                return ((K) == null ? (other.getKey()) == null : K.equals(other.getKey())) && ((V) == null ? (other.getValue()) == null : V.equals(other.getValue()));\n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"32acaf56-3f20-11e6-8c68-d5f07e06af65","method":{"position":"com.google.gson.Gson:136","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467330766961/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src != null) {\n                {\n                    return toJsonTree(src, typeOfSrc);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467330766961/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"32acd667-3f20-11e6-8c68-0d8ac950abc5","method":{"position":"com.google.gson.internal.bind.ObjectTypeAdapter:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Object value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            com.google.gson.TypeAdapter<java.lang.Object> com.google.gson.TypeAdapter<java.lang.Object> = ((com.google.gson.TypeAdapter<java.lang.Object>)(com.google.gson.Gson.getAdapter(value.getClass())));\n            if (typeAdapter instanceof com.google.gson.internal.bind.ObjectTypeAdapter) {\n                out.beginObject();\n                out.endObject();\n                return ;\n            } \n            typeAdapter.write(out, value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467330766961/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonObject:54","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"32acd668-3f20-11e6-8c68-fd9739de617f","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:75","type":"CtMethodImpl","sourcecode":"private void put(com.google.gson.JsonElement value) {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467330766961/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((java.lang.String) != null) {\n                if ((!(value.isJsonNull())) || (getSerializeNulls())) {\n                    com.google.gson.JsonObject com.google.gson.JsonObject = ((com.google.gson.JsonObject)(peek()));\n                    object.add(java.lang.String, value);\n                } \n                java.lang.String = null;\n            } else if (java.util.List<com.google.gson.JsonElement>.isEmpty()) {\n                com.google.gson.JsonElement = value;\n            } else {\n                com.google.gson.JsonElement com.google.gson.JsonElement = peek();\n                if (element instanceof com.google.gson.JsonArray) {\n                    ((com.google.gson.JsonArray)(element)).add(value);\n                } else {\n                    throw new java.lang.IllegalStateException();\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"32acd669-3f20-11e6-8c68-7931b4e7afe1","method":{"position":"com.google.gson.stream.JsonWriter:385","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter name(java.lang.String name) throws java.io.IOException {\n    if (name == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467330766961/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (name == null) {\n                throw new java.lang.NullPointerException(\"name == null\");\n            } \n            if ((java.lang.String) != null) {\n                throw new java.lang.IllegalStateException();\n            } \n            if ((int) == 0) {\n                throw new java.lang.IllegalStateException(\"JsonWriter is closed.\");\n            } \n            java.lang.String = name;\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.DateTypeAdapter:86","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"32acfd7a-3f20-11e6-8c68-cdc91b75199c","method":{"position":"com.google.gson.internal.bind.DateTypeAdapter:85","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized void write(com.google.gson.stream.JsonWriter out, java.util.Date value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            java.lang.String java.lang.String = java.text.DateFormat.format(value);\n            out.value(dateFormatAsString);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467330766961/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":52,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
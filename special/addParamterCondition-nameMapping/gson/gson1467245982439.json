{"failureDictionary":{"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":64,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":168,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":30,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":252,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":45,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":351,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":143,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":232,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":42,"com.google.gson.functional.PrimitiveTest.testShortSerialization":215,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":264,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":275,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictNansAndInfinities":370,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":52,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":209,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":121,"com.google.gson.MixedStreamTest.testWriteLenient":358,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":96,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":136,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":291,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":226,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":314,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":316,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":324,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":346,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":296,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":302,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":109,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":219,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":328,"com.google.gson.functional.ObjectTest.testSingletonLists":171,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":5,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":132,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":303,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":233,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":147,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":222,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":54,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":366,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":4,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":111,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":298,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":160,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":339,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":250,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":294,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":51,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":60,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":322,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":329,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":258,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":362,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":130,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":263,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":273,"com.google.gson.functional.EnumTest.testEnumCaseMapping":295,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":13,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":231,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":122,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":224,"com.google.gson.functional.JsonTreeTest.testToJsonTree":69,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":265,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":255,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":76,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":80,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":118,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":203,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":288,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":220,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":306,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":260,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":261,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":290,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":321,"com.google.gson.functional.MapTest.testGeneralMapField":35,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":83,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":152,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":92,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":330,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":343,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":137,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":33,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":112,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":191,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":214,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":310,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":369,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":210,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":180,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":271,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":345,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":197,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":325,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":364,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":368,"com.google.gson.stream.JsonWriterTest.testNonFiniteDoubles":12,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":107,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":145,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":311,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":274,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":128,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":207,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":201,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":276,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":88,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":163,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":186,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":221,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":131,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":305,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":300,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":127,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":63,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":242,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":225,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":167,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":184,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":340,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":40,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":70,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":208,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":272,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":246,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":84,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":185,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":337,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":349,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":56,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":193,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":279,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":213,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":73,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":282,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":230,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":327,"com.google.gson.functional.ObjectTest.testNullSerialization":177,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":62,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":135,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":34,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":190,"com.google.gson.functional.MapTest.testInterfaceTypeMap":32,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":126,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":344,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":332,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":75,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":110,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":293,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":313,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":176,"com.google.gson.functional.EnumTest.testEnumSet":289,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":335,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":283,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":157,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithNestedWildcards":8,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":113,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":24,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":270,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":181,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":281,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":361,"com.google.gson.MixedStreamTest.testWriteClosed":360,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":150,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":268,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":320,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":14,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":173,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":284,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":74,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":249,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":188,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":245,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":338,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":43,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":57,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":223,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":142,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":79,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":174,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":319,"com.google.gson.functional.MapTest.testMapSerialization":29,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":46,"com.google.gson.functional.MapTest.testSerializeMaps":23,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":99,"com.google.gson.functional.MapTest.testComplexKeysSerialization":38,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":301,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":323,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":133,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":95,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":101,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":154,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":195,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":267,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":66,"com.google.gson.internal.LinkedTreeMapTest.testRemoveRootDoesNotDoubleUnlink":7,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":81,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":155,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":248,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":198,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":148,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":44,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":3,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":6,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":253,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":53,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":26,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":2,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithBasicWildcards":10,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":159,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":312,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":218,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":315,"com.google.gson.functional.MapTest.testRawMapSerialization":37,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":354,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":41,"com.google.gson.functional.PrettyPrintingTest.testMap":251,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":331,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":58,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":182,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":317,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":47,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":115,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":365,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":237,"com.google.gson.functional.MapTest.testMapSerializationEmpty":39,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":123,"com.google.gson.functional.CollectionTest.testQueueSerialization":318,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":266,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":350,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":85,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":146,"com.google.gson.functional.PrimitiveTest.testByteSerialization":212,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":352,"com.google.gson.functional.MapTest.testMapOfMapSerialization":28,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":49,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":199,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":308,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromRawTypes":11,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":227,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":105,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":204,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":165,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictBoxedNansAndInfinities":371,"com.google.gson.functional.FieldNamingTest.testIdentity":100,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":234,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":91,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":97,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":285,"com.google.gson.functional.MapTest.testMapWithQuotes":27,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":241,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":116,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":55,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":68,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":170,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":228,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":156,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":166,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":65,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":363,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":114,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":235,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":342,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":202,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":108,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":17,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":104,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":124,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":144,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":277,"com.google.gson.functional.MapTest.testMapSubclassSerialization":22,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":217,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":257,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":0,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":206,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":347,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":94,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":297,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":333,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":355,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":138,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":280,"com.google.gson.functional.EnumTest.testEnumSubclass":292,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":117,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":205,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":367,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":189,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":341,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":1,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":229,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":299,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":149,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":158,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":82,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":139,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":278,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":61,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":243,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":169,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":348,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":71,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":164,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":16,"com.google.gson.functional.ObjectTest.testNestedSerialization":183,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":307,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":194,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":309,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":200,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":304,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":36,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":20,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":140,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":240,"com.google.gson.MixedStreamTest.testWriteNulls":356,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":90,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":353,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":359,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":86,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":178,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":153,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":162,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":172,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":77,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":247,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":18,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":31,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":236,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":106,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":238,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":287,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":141,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":216,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":89,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":19,"com.google.gson.functional.CollectionTest.testSetSerialization":326,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":161,"com.google.gson.functional.StringTest.testStringValueSerialization":239,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":254,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":48,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":102,"com.google.gson.MixedStreamTest.testWriteInvalidState":357,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":192,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":175,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithTypeParameters":9,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":244,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":196,"com.google.gson.JsonArrayTest.testRemove":15,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":93,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":103,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":129,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":211,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":336,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":120,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":98,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":125,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":151,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":256,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":21,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":25,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":78,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":262,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":259,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":67,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":269,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":286,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":134,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":179,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":187,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":50,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":59,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":334,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":72,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":119,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":87},"transformations":[{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"575410c0-3e58-11e6-b07a-99104a6ecb5e","method":{"position":"com.google.gson.Gson:591","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        {\n            com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = getAdapter(com.google.gson.reflect.TypeToken.get(typeOfSrc));\n            boolean boolean = writer.isLenient();\n            writer.setLenient(true);\n            boolean boolean = writer.isHtmlSafe();\n            writer.setHtmlSafe(boolean);\n            boolean boolean = writer.getSerializeNulls();\n            writer.setSerializeNulls(boolean);\n            try {\n                ((com.google.gson.TypeAdapter<java.lang.Object>)(adapter)).write(writer, src);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            } finally {\n                writer.setLenient(oldLenient);\n                writer.setHtmlSafe(oldHtmlSafe);\n                writer.setSerializeNulls(oldSerializeNulls);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245597859/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"575485f1-3e58-11e6-b07a-4f2eb0a21ba3","method":{"position":"com.google.gson.Gson:510","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245597859/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src == null) {\n                return toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull);\n            } \n            return toJson(src, src.getClass());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"575485f2-3e58-11e6-b07a-37a2047aa05d","method":{"position":"com.google.gson.Gson:719","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.lang.String json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            if (json == null) {\n                {\n                    if (json == null) {\n                        {\n                            if (json == null) {\n                                return null;\n                            } \n                            java.io.StringReader java.io.StringReader = new java.io.StringReader(json);\n                            T T = ((T)(fromJson(reader, typeOfT)));\n                            return target;\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245597859/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new com.google.gson.JsonSyntaxException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245597859/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245597859/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.DateTypeAdapter:86","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[0,1,2,3,4],"tindex":"575485f3-3e58-11e6-b07a-8b761f82a56f","method":{"position":"com.google.gson.internal.bind.DateTypeAdapter:85","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized void write(com.google.gson.stream.JsonWriter out, java.util.Date value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            java.lang.String java.lang.String = java.text.DateFormat.format(value);\n            out.value(dateFormatAsString);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245597859/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[],"tindex":"5754ad04-3e58-11e6-b07a-ffbe2b6910d7","method":{"position":"com.google.gson.Gson:552","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245597859/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            if (src != null) {\n                toJson(src, src.getClass(), writer);\n            } else {\n                toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull, writer);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:218","type":"CtVariableReadImpl","sourcecode":"unlink"},"failures":[5,6,7],"tindex":"5754ad05-3e58-11e6-b07a-21cbe955d607","method":{"position":"com.google.gson.internal.LinkedTreeMap:217","type":"CtMethodImpl","sourcecode":"void removeInternal(com.google.gson.internal.LinkedTreeMap.Node<K, V> node, boolean unlink) {\n    if (unlink) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245597859/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (unlink) {\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            if ((left != null) && (right != null)) {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = (left.int) > (right.int) ? left.last() : right.first();\n                removeInternal(adjacent, false);\n                int int = 0;\n                left = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                if (left != null) {\n                    leftHeight = left.int;\n                    adjacent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = left;\n                    left.com.google.gson.internal.LinkedTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                } \n                int int = 0;\n                right = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                if (right != null) {\n                    rightHeight = right.int;\n                    adjacent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = right;\n                    right.com.google.gson.internal.LinkedTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                } \n                adjacent.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                replaceInParent(node, adjacent);\n                return ;\n            } else if (left != null) {\n                replaceInParent(node, left);\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n            } else if (right != null) {\n                replaceInParent(node, right);\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n            } else {\n                replaceInParent(node, null);\n            }\n            rebalance(originalParent, false);\n            (int)--;\n            (int)++;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"unlink":"unlink"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:164","type":"CtBinaryOperatorImpl","sourcecode":"from instanceof java.lang.reflect.GenericArrayType"},"failures":[8,9,10,11],"tindex":"5754d416-3e58-11e6-b07a-55b4cc814041","method":{"position":"com.google.gson.reflect.TypeToken:122","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic boolean isAssignableFrom(java.lang.reflect.Type from) {\n    if (from == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245597859/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (from instanceof java.lang.reflect.GenericArrayType) {\n                {\n                    if (from == null) {\n                        return false;\n                    } \n                    if (java.lang.reflect.Type.equals(from)) {\n                        return true;\n                    } \n                    if ((java.lang.reflect.Type) instanceof java.lang.Class<?>) {\n                        return java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from));\n                    } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.ParameterizedType) {\n                        return com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n                    } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.GenericArrayType) {\n                        return (java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from))) && (com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.GenericArrayType)(java.lang.reflect.Type))));\n                    } else {\n                        throw com.google.gson.reflect.TypeToken.buildUnexpectedTypeError(java.lang.reflect.Type, java.lang.Class.java.lang.Class.java.lang.Class, java.lang.reflect.ParameterizedType.java.lang.reflect.ParameterizedType.java.lang.Class, java.lang.reflect.GenericArrayType.java.lang.reflect.GenericArrayType.java.lang.Class);\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245597859/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:298","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[12],"tindex":"5754fb27-3e58-11e6-b07a-09c6694b664b","method":{"position":"com.google.gson.stream.JsonWriter:461","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(double value) throws java.io.IOException {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245597859/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                throw new java.lang.IllegalArgumentException((\"Numeric values must be finite, but was \" + value));\n            } \n            writeDeferredName();\n            beforeValue(false);\n            java.io.Writer.append(java.lang.Double.toString(value));\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:332","type":"CtVariableReadImpl","sourcecode":"insert"},"failures":[5,6,7],"tindex":"5754fb28-3e58-11e6-b07a-6583c0ac858d","method":{"position":"com.google.gson.internal.LinkedTreeMap:310","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (insert) {\n        {\n            for (com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>) {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                int int = left != null ? left.int : 0;\n                int int = right != null ? right.int : 0;\n                int int = leftHeight - rightHeight;\n                if (delta == (-2)) {\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    int int = rightRight != null ? rightRight.int : 0;\n                    int int = rightLeft != null ? rightLeft.int : 0;\n                    int int = rightLeftHeight - rightRightHeight;\n                    if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                        rotateLeft(node);\n                    } else {\n                        assert rightDelta == 1;\n                        rotateRight(right);\n                        rotateLeft(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 2) {\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    int int = leftRight != null ? leftRight.int : 0;\n                    int int = leftLeft != null ? leftLeft.int : 0;\n                    int int = leftLeftHeight - leftRightHeight;\n                    if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                        rotateRight(node);\n                    } else {\n                        assert leftDelta == (-1);\n                        rotateLeft(left);\n                        rotateRight(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 0) {\n                    node.int = leftHeight + 1;\n                    if (insert) {\n                        break;\n                    } \n                } else {\n                    assert (delta == (-1)) || (delta == 1);\n                    node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                    if (!insert) {\n                        break;\n                    } \n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245597859/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"insert"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:120","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonNull"},"failures":[],"tindex":"57554949-3e58-11e6-b07a-493c58f001cc","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:808","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonNull) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245597859/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (!(o instanceof java.util.Map.Entry)) {\n                return false;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n            if (node == null) {\n                return false;\n            } \n            removeInternal(node, true);\n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"5755494a-3e58-11e6-b07a-cd7553ddfe92","method":{"position":"com.google.gson.Gson:719","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.lang.String json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            if (json == null) {\n                {\n                    if (json == null) {\n                        {\n                            if (json == null) {\n                                return null;\n                            } \n                            java.io.StringReader java.io.StringReader = new java.io.StringReader(json);\n                            T T = ((T)(fromJson(reader, typeOfT)));\n                            return target;\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245597859/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new com.google.gson.JsonSyntaxException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245597859/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245597859/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[13,14],"tindex":"5755494b-3e58-11e6-b07a-0bf911435810","method":{"position":"com.google.gson.Gson:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            out.value(value.toString());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245597859/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:86","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonArray"},"failures":[],"tindex":"5755705c-3e58-11e6-b07a-89f430e61adc","method":{"position":"com.google.gson.JsonArray:81","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement set(int index, com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonArray) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245597859/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return java.util.List<com.google.gson.JsonElement>.set(index, element);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:137","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonObject"},"failures":[15],"tindex":"5755705d-3e58-11e6-b07a-8f006e20a271","method":{"position":"com.google.gson.JsonArray:92","type":"CtMethodImpl","sourcecode":"public boolean remove(com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonObject) {\n        {\n            return java.util.List<com.google.gson.JsonElement>.remove(element);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245597859/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:602","type":"CtUnaryOperatorImpl","sourcecode":"!(lenient)"},"failures":[16,17,13,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,0,122,1,2,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,3,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,4,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,14,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371],"tindex":"5755705e-3e58-11e6-b07a-d31d59fd6036","method":{"position":"com.google.gson.stream.JsonWriter:234","type":"CtMethodImpl","sourcecode":"public final void setLenient(boolean lenient) {\n    if (!lenient) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245597859/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = lenient;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"lenient"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"5755976f-3e58-11e6-b07a-23e4201d06f1","method":{"position":"com.google.gson.Gson:719","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.lang.String json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            if (json == null) {\n                {\n                    if (json == null) {\n                        {\n                            if (json == null) {\n                                return null;\n                            } \n                            java.io.StringReader java.io.StringReader = new java.io.StringReader(json);\n                            T T = ((T)(fromJson(reader, typeOfT)));\n                            return target;\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245597859/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new com.google.gson.JsonSyntaxException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245597859/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245597859/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:109","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonPrimitive"},"failures":[],"tindex":"57559770-3e58-11e6-b07a-fdd5047f6ac5","method":{"position":"com.google.gson.internal.$Gson$Types:511","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    return (o instanceof java.lang.reflect.GenericArrayType) && (com.google.gson.internal.$Gson$Types.equals(com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl.this, ((java.lang.reflect.GenericArrayType)(o))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:537","type":"CtFieldReadImpl","sourcecode":"lenient"},"failures":[],"tindex":"57559771-3e58-11e6-b07a-f32be04a5790","method":{"position":"com.google.gson.stream.JsonReader:325","type":"CtMethodImpl","sourcecode":"public final void setLenient(boolean lenient) {\n    if (lenient) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245597859/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.stream.JsonReader.this.boolean = lenient;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"lenient"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"5755be82-3e58-11e6-b07a-bd953a9e770b","method":{"position":"com.google.gson.JsonParser:44","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement parse(java.lang.String json) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245597859/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            return parse(new java.io.StringReader(json));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:92","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof java.util.Iterator"},"failures":[],"tindex":"5755be83-3e58-11e6-b07a-8b6b7c51c9fd","method":{"position":"com.google.gson.internal.LinkedTreeMap:605","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof java.util.Iterator) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245597859/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return containsKey(o);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:133","type":"CtBinaryOperatorImpl","sourcecode":"(type) instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"5755be84-3e58-11e6-b07a-b7cd15baa6de","method":{"position":"com.google.gson.reflect.TypeToken:295","type":"CtMethodImpl","sourcecode":"public static com.google.gson.reflect.TypeToken<?> get(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.ParameterizedType) {\n        {\n            return new com.google.gson.reflect.TypeToken<java.lang.Object>(type);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245597859/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:188","type":"CtBinaryOperatorImpl","sourcecode":"from == null"},"failures":[],"tindex":"5755be85-3e58-11e6-b07a-7183d800cafc","method":{"position":"com.google.gson.reflect.TypeToken:122","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic boolean isAssignableFrom(java.lang.reflect.Type from) {\n    if (from == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245597859/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (from instanceof java.lang.reflect.GenericArrayType) {\n                {\n                    if (from == null) {\n                        return false;\n                    } \n                    if (java.lang.reflect.Type.equals(from)) {\n                        return true;\n                    } \n                    if ((java.lang.reflect.Type) instanceof java.lang.Class<?>) {\n                        return java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from));\n                    } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.ParameterizedType) {\n                        return com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n                    } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.GenericArrayType) {\n                        return (java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from))) && (com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.GenericArrayType)(java.lang.reflect.Type))));\n                    } else {\n                        throw com.google.gson.reflect.TypeToken.buildUnexpectedTypeError(java.lang.reflect.Type, java.lang.Class.java.lang.Class.java.lang.Class, java.lang.reflect.ParameterizedType.java.lang.reflect.ParameterizedType.java.lang.Class, java.lang.reflect.GenericArrayType.java.lang.reflect.GenericArrayType.java.lang.Class);\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245597859/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"5755e596-3e58-11e6-b07a-8bec27597cff","method":{"position":"com.google.gson.DefaultDateTypeAdapter:94","type":"CtMethodImpl","sourcecode":"private java.util.Date deserializeToDate(com.google.gson.JsonElement json) {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245597859/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            synchronized(java.text.DateFormat) {\n                try {\n                    return java.text.DateFormat.parse(json.getAsString());\n                } catch (java.text.ParseException ignored) {\n                }\n                try {\n                    return java.text.DateFormat.parse(json.getAsString());\n                } catch (java.text.ParseException ignored) {\n                }\n                try {\n                    return java.text.DateFormat.parse(json.getAsString());\n                } catch (java.text.ParseException e) {\n                    throw new com.google.gson.JsonSyntaxException(json.getAsString() , e);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":23,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":388,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":203,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":89,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":36,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":387,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":396,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":369,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":290,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":351,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":214,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":224,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":368,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":13,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":28,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":303,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":356,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":406,"com.google.gson.functional.ObjectTest.testSingletonLists":181,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":14,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":286,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":204,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":213,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":376,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":3,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":401,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":431,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":90,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":127,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":337,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":6,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":64,"com.google.gson.functional.EnumTest.testEnumCaseMapping":27,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":0,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":202,"com.google.gson.functional.JsonTreeTest.testToJsonTree":336,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":132,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":345,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":270,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":359,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":429,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":253,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":221,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":230,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":374,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":167,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":188,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":62,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":309,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":379,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":301,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":299,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":112,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":159,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":430,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":153,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":48,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":194,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":285,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":397,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":107,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":262,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":419,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":87,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":160,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":44,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":193,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":12,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":16,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":372,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":40,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":145,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":325,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":94,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":119,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":289,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":280,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":410,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":308,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":395,"com.google.gson.functional.CollectionTest.testSetDeserialization":394,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":304,"com.google.gson.functional.EnumTest.testEnumSet":21,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":185,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":120,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":311,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":71,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":189,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":5,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":118,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":412,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":59,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":393,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":163,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":17,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":100,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":198,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":260,"com.google.gson.functional.MapTest.testMapSerialization":76,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":200,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":364,"com.google.gson.functional.MapTest.testSerializeMaps":70,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":244,"com.google.gson.functional.MapTest.testComplexKeysSerialization":85,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":55,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":232,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":326,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":259,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":349,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":130,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":37,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":381,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":313,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":171,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":88,"com.google.gson.functional.PrettyPrintingTest.testMap":128,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":236,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":217,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":201,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":267,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":2,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":208,"com.google.gson.functional.MapTest.testMapSerializationEmpty":86,"com.google.gson.functional.CollectionTest.testQueueSerialization":218,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":277,"com.google.gson.functional.MapTest.testMapOfMapSerialization":75,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":151,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":33,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":156,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":319,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":205,"com.google.gson.functional.FieldNamingTest.testIdentity":245,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":56,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":382,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":39,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":180,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":335,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":7,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":206,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":306,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":154,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":327,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":11,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":32,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":278,"com.google.gson.functional.MapTest.testMapSubclassSerialization":69,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":170,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":19,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":358,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":238,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":246,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":422,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":398,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":392,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":117,"com.google.gson.functional.EnumTest.testEnumSubclass":24,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":157,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":4,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":375,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":141,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":305,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":312,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":346,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":35,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":328,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":339,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":10,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":152,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":331,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":294,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":367,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":50,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":46,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":231,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":355,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":182,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":316,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":407,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":138,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":332,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":78,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":207,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":300,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":124,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":169,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":296,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":177,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":144,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":135,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":148,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":31,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":164,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":283,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":279,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":133,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":68,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":405,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":72,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":97,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":255,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":252,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":350,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":67,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":414,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":187,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":195,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":102,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":239,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":340,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":271,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":357,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":34,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":108,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":77,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":129,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":298,"com.google.gson.functional.PrimitiveTest.testShortSerialization":168,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":257,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":66,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":161,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":416,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":241,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":23,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":216,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":18,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":172,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":228,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":399,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":408,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":426,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":175,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":427,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":38,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":196,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":344,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":420,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":247,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":263,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":363,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":360,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":314,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":385,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":371,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":26,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":104,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":211,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":222,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":415,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":234,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":251,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":256,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":284,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":261,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":274,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":258,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":341,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":155,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":173,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":92,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":22,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":254,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":391,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":365,"com.google.gson.functional.MapTest.testGeneralMapField":82,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":370,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":43,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":52,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":235,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":307,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":291,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":80,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":111,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":143,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":264,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":162,"com.google.gson.MixedStreamTest.testReadMixedStreamed":425,"com.google.gson.ObjectTypeAdapterTest.testDeserializeNullValue":433,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":149,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":8,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":225,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":409,"com.google.gson.stream.JsonWriterTest.testNonFiniteDoubles":432,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":324,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":65,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":411,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":282,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":126,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":174,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":317,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":140,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":249,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":281,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":57,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":321,"com.google.gson.functional.ObjectTest.testNestedDeserialization":386,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":91,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":192,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":389,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":338,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":63,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":137,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":329,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":116,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":166,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":103,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":354,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":400,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":227,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":106,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":81,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":142,"com.google.gson.functional.MapTest.testInterfaceTypeMap":79,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":237,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":96,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":25,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":176,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":240,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":348,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":265,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":61,"com.google.gson.MixedStreamTest.testWriteClosed":424,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":220,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":390,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":183,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":343,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":121,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":95,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":362,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":136,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":197,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":297,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":98,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":184,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":219,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":403,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":250,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":347,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":223,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":287,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":29,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":147,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":334,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":41,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":233,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":361,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":150,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":199,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":295,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":404,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":73,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":380,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":276,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":113,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":384,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":215,"com.google.gson.functional.MapTest.testRawMapSerialization":84,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":421,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":428,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":101,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":190,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":366,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":45,"com.google.gson.functional.PrimitiveTest.testByteSerialization":165,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":212,"com.google.gson.ObjectTypeAdapterTest.testSerialize":322,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":109,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":352,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":51,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":242,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":122,"com.google.gson.functional.MapTest.testMapWithQuotes":74,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":268,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":310,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":320,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":99,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":266,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":302,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":114,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":383,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":134,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":158,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":273,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":54,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":373,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":292,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":269,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":248,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":275,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":353,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":42,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":115,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":293,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":105,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":58,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":20,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":318,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":377,"com.google.gson.functional.ObjectTest.testNestedSerialization":191,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":93,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":110,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":146,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":139,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":83,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":178,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":125,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":9,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":186,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":342,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":323,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":417,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":1,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":378,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":413,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":402,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":209,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":49,"com.google.gson.functional.CollectionTest.testSetSerialization":226,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":418,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":131,"com.google.gson.functional.StringTest.testStringValueSerialization":210,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":315,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":179,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":30,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":330,"com.google.gson.MixedStreamTest.testWriteInvalidState":423,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":53,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":15,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":272,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":243,"com.google.gson.ObjectTypeAdapterTest.testDeserialize":434,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":229,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":333,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":60,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":123,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":288,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":47},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321],"tindex":"ae548dde-3f02-11e6-8f0a-09f085025c2c","method":{"position":"com.google.gson.Gson:532","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318648168/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src == null) {\n                {\n                    java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n                    toJson(src, typeOfSrc, writer);\n                    return writer.toString();\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318648168/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:127","type":"CtInvocationImpl"},"failures":[5,322,10,11,12,323,324,14,325,15,16,18,19,20,25,326,29,30,31,32,33,34,327,328,35,36,329,37,330,38,331,39,40,52,332,53,56,57,58,333,334,67,335,336,73,337,79,81,82,85,89,90,92,93,338,339,340,94,95,96,341,342,343,344,97,98,345,99,100,101,102,103,104,105,106,346,347,107,348,108,349,350,109,112,113,351,352,353,354,114,355,116,117,118,119,120,356,121,122,123,357,124,358,359,125,360,129,130,134,135,136,137,138,361,362,140,363,364,177,365,178,366,179,180,181,367,368,182,369,370,183,371,372,184,373,185,374,186,375,376,189,377,190,191,192,378,193,379,380,381,194,382,195,196,383,197,384,385,386,387,198,388,200,389,201,390,391,392,213,393,214,216,222,394,224,226,229,230,231,232,395,233,238,396,397,398,399,400,241,242,243,244,245,247,401,402,248,249,403,404,250,251,405,406,254,255,407,256,258,259,408,260,409,261,262,410,411,412,413,414,415,416,417,282,292,297,300,302,303,304,305,307,418,308,309,419,420,312,314,315,421,422,423,424,425,426],"tindex":"ae552a1f-3f02-11e6-8f0a-291812b6f886","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:125","type":"CtMethodImpl","sourcecode":"private java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> getBoundFields(com.google.gson.Gson context, com.google.gson.reflect.TypeToken<?> type, java.lang.Class<?> raw) {\n    if (raw.isInterface()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318648168/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (raw.isInterface()) {\n                {\n                    java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> = new java.util.LinkedHashMap<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField>();\n                    if (raw.isInterface()) {\n                        return result;\n                    } \n                    java.lang.reflect.Type java.lang.reflect.Type = type.getType();\n                    while (raw != (java.lang.Object.java.lang.Object.java.lang.Class)) {\n                        java.lang.reflect.Field[] java.lang.reflect.Field[] = raw.getDeclaredFields();\n                        for (java.lang.reflect.Field java.lang.reflect.Field : fields) {\n                            boolean boolean = excludeField(field, true);\n                            boolean boolean = excludeField(field, false);\n                            if ((!serialize) && (!deserialize)) {\n                                continue;\n                            } \n                            field.setAccessible(true);\n                            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, field.getGenericType());\n                            com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = createBoundField(context, field, getFieldName(field), com.google.gson.reflect.TypeToken.get(fieldType), serialize, deserialize);\n                            com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = result.put(boundField.java.lang.String, boundField);\n                            if (previous != null) {\n                                throw new java.lang.IllegalArgumentException(((declaredType + \" declares multiple JSON fields named \") + (previous.java.lang.String)));\n                            } \n                        }\n                        type = com.google.gson.reflect.TypeToken.get(com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, raw.getGenericSuperclass()));\n                        raw = type.getRawType();\n                    }\n                    return result;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318648168/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"raw"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"ae555130-3f02-11e6-8f0a-abcd0c9b20e3","method":{"position":"com.google.gson.Gson:532","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318648168/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src == null) {\n                {\n                    java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n                    toJson(src, typeOfSrc, writer);\n                    return writer.toString();\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318648168/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[0,163],"tindex":"ae557841-3f02-11e6-8f0a-3bd23d473f50","method":{"position":"com.google.gson.Gson:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            out.value(value.toString());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318648168/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:188","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"ae557842-3f02-11e6-8f0a-219907d9c125","method":{"position":"com.google.gson.internal.$Gson$Types:158","type":"CtMethodImpl","sourcecode":"public static boolean equals(java.lang.reflect.Type a, java.lang.reflect.Type b) {\n    if (a == b) {\n        return true;\n    } else if (a instanceof java.lang.Class) {\n        return a.equals(b);\n    } else if (a instanceof java.lang.reflect.ParameterizedType) {\n        if (!(b instanceof java.lang.reflect.ParameterizedType)) {\n            return false;\n        } \n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(a));\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(b));\n        return ((com.google.gson.internal.$Gson$Types.equal(pa.getOwnerType(), pb.getOwnerType())) && (pa.getRawType().equals(pb.getRawType()))) && (java.util.Arrays.equals(pa.getActualTypeArguments(), pb.getActualTypeArguments()));\n    } else if (a instanceof java.lang.reflect.GenericArrayType) {\n        if (!(b instanceof java.lang.reflect.GenericArrayType)) {\n            return false;\n        } \n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(a));\n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(b));\n        return com.google.gson.internal.$Gson$Types.equals(ga.getGenericComponentType(), gb.getGenericComponentType());\n    } else if (a instanceof java.lang.reflect.WildcardType) {\n        if (!(b instanceof java.lang.reflect.WildcardType)) {\n            return false;\n        } \n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(a));\n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(b));\n        return (java.util.Arrays.equals(wa.getUpperBounds(), wb.getUpperBounds())) && (java.util.Arrays.equals(wa.getLowerBounds(), wb.getLowerBounds()));\n    } else if (a instanceof java.lang.reflect.TypeVariable) {\n        if (!(b instanceof java.lang.reflect.TypeVariable)) {\n            return false;\n        } \n        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(a));\n        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(b));\n        return ((va.getGenericDeclaration()) == (vb.getGenericDeclaration())) && (va.getName().equals(vb.getName()));\n    } else {\n        return false;\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[5,322,10,11,12,14,15,16,18,19,20,25,29,30,31,32,33,34,35,36,37,39,40,52,56,57,58,334,67,335,336,73,79,81,82,89,90,92,93,338,339,340,94,95,96,341,342,97,98,345,99,100,101,102,104,105,106,107,108,109,112,113,351,352,353,354,114,116,117,118,119,120,121,122,123,124,359,125,129,130,134,135,136,137,138,361,362,140,176,427,428,429,430,431,177,178,179,180,181,182,183,184,185,186,189,190,191,193,194,195,196,197,198,388,200,201,213,393,214,216,222,224,226,229,230,231,232,233,238,241,242,243,244,245,247,248,249,250,251,254,255,256,258,259,260,261,262,282,292,297,300,302,303,304,305,308,309,312,314,315,421,422],"tindex":"ae559f53-3f02-11e6-8f0a-99760600773f","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n@java.lang.Override\nvoid write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value == null) {\n        {\n            java.lang.Object java.lang.Object = field.get(value);\n            com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n            t.write(writer, fieldValue);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318648168/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"ae55c664-3f02-11e6-8f0a-2b95128143e8","method":{"position":"com.google.gson.Gson:695","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.lang.String json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318648168/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"ae55ed75-3f02-11e6-8f0a-272db6b58f8f","method":{"position":"com.google.gson.JsonObject:100","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Boolean value) {\n    if (property == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318648168/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            add(property, createJsonElement(value));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:298","type":"CtBinaryOperatorImpl"},"failures":[432],"tindex":"ae55ed76-3f02-11e6-8f0a-eb0d64f17983","method":{"position":"com.google.gson.stream.JsonWriter:461","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(double value) throws java.io.IOException {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318648168/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                throw new java.lang.IllegalArgumentException((\"Numeric values must be finite, but was \" + value));\n            } \n            writeDeferredName();\n            beforeValue(false);\n            java.io.Writer.append(java.lang.Double.toString(value));\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:188","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"ae55ed77-3f02-11e6-8f0a-e19357036475","method":{"position":"com.google.gson.reflect.TypeToken:122","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic boolean isAssignableFrom(java.lang.reflect.Type from) {\n    if (from == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318648168/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (from == null) {\n                return false;\n            } \n            if (java.lang.reflect.Type.equals(from)) {\n                return true;\n            } \n            if ((java.lang.reflect.Type) instanceof java.lang.Class<?>) {\n                return java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from));\n            } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.ParameterizedType) {\n                return com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n            } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.GenericArrayType) {\n                return (java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from))) && (com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.GenericArrayType)(java.lang.reflect.Type))));\n            } else {\n                throw com.google.gson.reflect.TypeToken.buildUnexpectedTypeError(java.lang.reflect.Type, java.lang.Class.java.lang.Class.java.lang.Class, java.lang.reflect.ParameterizedType.java.lang.reflect.ParameterizedType.java.lang.Class, java.lang.reflect.GenericArrayType.java.lang.reflect.GenericArrayType.java.lang.Class);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"ae561488-3f02-11e6-8f0a-5f55ad732ce1","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:175","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318648168/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (value == null) {\n                        return nullValue();\n                    } \n                    if (!(isLenient())) {\n                        double double = value.doubleValue();\n                        if ((java.lang.Double.isNaN(d)) || (java.lang.Double.isInfinite(d))) {\n                            throw new java.lang.IllegalArgumentException((\"JSON forbids NaN and infinities: \" + value));\n                        } \n                    } \n                    put(new com.google.gson.JsonPrimitive(value));\n                    return com.google.gson.internal.bind.JsonTreeWriter.this;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318648168/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl"},"failures":[433,434],"tindex":"ae563b99-3f02-11e6-8f0a-2b6a33c810dd","method":{"position":"com.google.gson.TypeAdapter:254","type":"CtMethodImpl","sourcecode":"public final T fromJson(java.io.Reader in) throws java.io.IOException {\n    if (in == null) {\n        {\n            com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(in);\n            return read(reader);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318648168/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"in"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:537","type":"CtFieldReadImpl"},"failures":[],"tindex":"ae563b9a-3f02-11e6-8f0a-7fdf71d9122a","method":{"position":"com.google.gson.stream.JsonReader:325","type":"CtMethodImpl","sourcecode":"public final void setLenient(boolean lenient) {\n    if (lenient) {\n        {\n            com.google.gson.stream.JsonReader.this.boolean = lenient;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318648168/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"lenient"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:92","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"ae5662ab-3f02-11e6-8f0a-7f7cd5cc79c4","method":{"position":"com.google.gson.internal.LinkedTreeMap:574","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (o instanceof java.util.Iterator) {\n        {\n            if (!(o instanceof java.util.Map.Entry)) {\n                return false;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n            if (node == null) {\n                return false;\n            } \n            removeInternal(node, true);\n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318648168/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:127","type":"CtInvocationImpl"},"failures":[],"tindex":"ae5662ac-3f02-11e6-8f0a-d103ba893621","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:125","type":"CtMethodImpl","sourcecode":"private java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> getBoundFields(com.google.gson.Gson context, com.google.gson.reflect.TypeToken<?> type, java.lang.Class<?> raw) {\n    if (raw.isInterface()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318648168/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (raw.isInterface()) {\n                {\n                    java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> = new java.util.LinkedHashMap<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField>();\n                    if (raw.isInterface()) {\n                        return result;\n                    } \n                    java.lang.reflect.Type java.lang.reflect.Type = type.getType();\n                    while (raw != (java.lang.Object.java.lang.Object.java.lang.Class)) {\n                        java.lang.reflect.Field[] java.lang.reflect.Field[] = raw.getDeclaredFields();\n                        for (java.lang.reflect.Field java.lang.reflect.Field : fields) {\n                            boolean boolean = excludeField(field, true);\n                            boolean boolean = excludeField(field, false);\n                            if ((!serialize) && (!deserialize)) {\n                                continue;\n                            } \n                            field.setAccessible(true);\n                            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, field.getGenericType());\n                            com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = createBoundField(context, field, getFieldName(field), com.google.gson.reflect.TypeToken.get(fieldType), serialize, deserialize);\n                            com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = result.put(boundField.java.lang.String, boundField);\n                            if (previous != null) {\n                                throw new java.lang.IllegalArgumentException(((declaredType + \" declares multiple JSON fields named \") + (previous.java.lang.String)));\n                            } \n                        }\n                        type = com.google.gson.reflect.TypeToken.get(com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, raw.getGenericSuperclass()));\n                        raw = type.getRawType();\n                    }\n                    return result;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318648168/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"raw"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl"},"failures":[],"tindex":"ae5689bd-3f02-11e6-8f0a-a551599e5c9c","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:116","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<?> getFieldAdapter(com.google.gson.Gson gson, java.lang.reflect.Field field, com.google.gson.reflect.TypeToken<?> fieldType) {\n    if (field.isSynthetic()) {\n        {\n            if (field.isSynthetic()) {\n                {\n                    com.google.gson.annotations.JsonAdapter com.google.gson.annotations.JsonAdapter = field.getAnnotation(com.google.gson.annotations.JsonAdapter.com.google.gson.annotations.JsonAdapter.java.lang.Class);\n                    if (annotation != null) {\n                        com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory.getTypeAdapter(com.google.gson.internal.ConstructorConstructor, gson, fieldType, annotation);\n                        if (adapter != null)\n                            return adapter;\n                        \n                    } \n                    return gson.getAdapter(fieldType);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318648168/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318648168/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"field"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:85","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"ae56b0ce-3f02-11e6-8f0a-2f9b04ca6cbe","method":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:84","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Object array) throws java.io.IOException {\n    if (array == null) {\n        {\n            if (array == null) {\n                out.nullValue();\n                return ;\n            } \n            out.beginArray();\n            for (int int = 0, int int = java.lang.reflect.Array.getLength(array) ; i < length ; i++) {\n                E E = ((E)(java.lang.reflect.Array.get(array, i)));\n                com.google.gson.TypeAdapter<E>.write(out, value);\n            }\n            out.endArray();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318648168/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:233","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"ae56d7df-3f02-11e6-8f0a-2165252a6238","method":{"position":"com.google.gson.internal.Excluder:232","type":"CtMethodImpl","sourcecode":"private boolean isValidSince(com.google.gson.annotations.Since annotation) {\n    if (annotation != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318648168/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (annotation != null) {\n                double double = annotation.value();\n                if (annotationVersion > (double)) {\n                    return false;\n                } \n            } \n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:578","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"ae56d7e0-3f02-11e6-8f0a-5f3177c98aed","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:401","type":"CtMethodImpl","sourcecode":"private void rotateLeft(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318648168/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivotLeft;\n            if (pivotLeft != null) {\n                pivotLeft.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            } \n            replaceInParent(root, pivot);\n            pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot;\n            root.int = (java.lang.Math.max((left != null ? left.int : 0), (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n            pivot.int = (java.lang.Math.max(root.int, (pivotRight != null ? pivotRight.int : 0))) + 1;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl"},"failures":[],"tindex":"ae56fef1-3f02-11e6-8f0a-8df540f92866","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:116","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<?> getFieldAdapter(com.google.gson.Gson gson, java.lang.reflect.Field field, com.google.gson.reflect.TypeToken<?> fieldType) {\n    if (field.isSynthetic()) {\n        {\n            if (field.isSynthetic()) {\n                {\n                    com.google.gson.annotations.JsonAdapter com.google.gson.annotations.JsonAdapter = field.getAnnotation(com.google.gson.annotations.JsonAdapter.com.google.gson.annotations.JsonAdapter.java.lang.Class);\n                    if (annotation != null) {\n                        com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory.getTypeAdapter(com.google.gson.internal.ConstructorConstructor, gson, fieldType, annotation);\n                        if (adapter != null)\n                            return adapter;\n                        \n                    } \n                    return gson.getAdapter(fieldType);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318648168/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318648168/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"field"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:305","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"ae572602-3f02-11e6-8f0a-f7f3cadf58b7","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:311","type":"CtMethodImpl","sourcecode":"private void replaceInParent(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node, com.google.gson.internal.LinkedHashTreeMap.Node<K, V> replacement) {\n    if (replacement != null) {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            if (replacement != null) {\n                replacement.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = parent;\n            } \n            if (parent != null) {\n                if ((parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) == node) {\n                    parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = replacement;\n                } else {\n                    assert (parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) == node;\n                    parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = replacement;\n                }\n            } else {\n                int int = (node.int) & ((com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[].int) - 1);\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[][index] = replacement;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318648168/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"replacement"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"ae574d13-3f02-11e6-8f0a-93894764940d","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:175","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318648168/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (value == null) {\n                        return nullValue();\n                    } \n                    if (!(isLenient())) {\n                        double double = value.doubleValue();\n                        if ((java.lang.Double.isNaN(d)) || (java.lang.Double.isInfinite(d))) {\n                            throw new java.lang.IllegalArgumentException((\"JSON forbids NaN and infinities: \" + value));\n                        } \n                    } \n                    put(new com.google.gson.JsonPrimitive(value));\n                    return com.google.gson.internal.bind.JsonTreeWriter.this;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318648168/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":22,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":56,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":401,"com.google.gson.functional.StringTest.testStringValueDeserialization":399,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":53,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":348,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":184,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":309,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":70,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":291,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":417,"com.google.gson.MixedStreamTest.testWriteLenient":585,"com.google.gson.internal.bind.JsonTreeWriterTest.testPrematureClose":616,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":253,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":193,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":394,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":530,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":251,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":547,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":357,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":500,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":511,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":143,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":318,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":449,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":481,"com.google.gson.functional.ObjectTest.testSingletonLists":249,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":185,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":514,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":302,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":402,"com.google.gson.stream.JsonWriterTest.testStrings":637,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":240,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":212,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":552,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":203,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":269,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":598,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":360,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":503,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":632,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":415,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":565,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":349,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":439,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":35,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":294,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":593,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":468,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":34,"com.google.gson.functional.EnumTest.testEnumCaseMapping":499,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":4,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":400,"com.google.gson.functional.JsonTreeTest.testToJsonTree":95,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":293,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":444,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":206,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":108,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":159,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":489,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":630,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":123,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":177,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":304,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":452,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":540,"com.google.gson.functional.ObjectTest.testNullDeserialization":281,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":220,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":412,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":263,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":370,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":601,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":310,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":270,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":466,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":573,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":278,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":600,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":141,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":149,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":207,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":375,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":528,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":374,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":202,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":354,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":631,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":333,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":158,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":381,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":119,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":282,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":183,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":331,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":27,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":346,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":418,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":87,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":174,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":393,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":618,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":226,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":49,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":355,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":424,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":347,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":113,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":277,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":257,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":563,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":577,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":45,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":77,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":314,"com.google.gson.metrics.PerformanceTest.testDummy":0,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":515,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":99,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":479,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":524,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":228,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":51,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":209,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":11,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":191,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":176,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":521,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":572,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":223,"com.google.gson.functional.CollectionTest.testSetDeserialization":546,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":144,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":67,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":262,"com.google.gson.functional.EnumTest.testEnumSet":490,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":338,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":480,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":227,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":22,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":164,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":271,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":478,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":592,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":351,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":523,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":362,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":218,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":463,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":363,"com.google.gson.functional.MapTest.testHashMapDeserialization":16,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":307,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":536,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":189,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":58,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":564,"com.google.gson.MixedStreamTest.testReadNulls":586,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":54,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":78,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":216,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":389,"com.google.gson.functional.MapTest.testSortedMap":38,"com.google.gson.functional.MapTest.testMapSerialization":33,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":57,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":7,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":344,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":126,"com.google.gson.functional.MapTest.testSerializeMaps":19,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":138,"com.google.gson.functional.MapTest.testComplexKeysSerialization":46,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":66,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":50,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":617,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":133,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":222,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":497,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":461,"com.google.gson.internal.LinkedTreeMapTest.testRemoveRootDoesNotDoubleUnlink":641,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":90,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":213,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":495,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":442,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":640,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":72,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":280,"com.google.gson.functional.MapTest.testStringKeyDeserialization":48,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":130,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":232,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":377,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":52,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":313,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":308,"com.google.gson.functional.PrettyPrintingTest.testMap":440,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":557,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":533,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":60,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":154,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":214,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":132,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":597,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":405,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":409,"com.google.gson.functional.MapTest.testMapSerializationEmpty":47,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":171,"com.google.gson.functional.CollectionTest.testQueueSerialization":537,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":339,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnValue":635,"com.google.gson.functional.MapTest.testMapOfMapSerialization":32,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":330,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":179,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":543,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":341,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":612,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":241,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictBoxedNansAndInfinities":621,"com.google.gson.functional.FieldNamingTest.testIdentity":139,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":403,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":229,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":428,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":283,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":76,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":94,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":248,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":396,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":296,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":594,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":404,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":569,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":245,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":336,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":195,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":2,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":166,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":173,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":205,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":611,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":13,"com.google.gson.functional.MapTest.testMapSubclassSerialization":18,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":373,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":488,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":575,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":69,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":328,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":501,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":559,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":582,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":153,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":388,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":419,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":211,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":477,"com.google.gson.functional.EnumTest.testEnumSubclass":493,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":350,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":267,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":599,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":295,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":568,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":356,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":231,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":85,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":298,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":247,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":334,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":246,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":97,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":1,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":122,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":261,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":340,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":75,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":332,"com.google.gson.stream.JsonWriterTest.testObjectsInArrays":606,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":198,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":250,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":15,"com.google.gson.MixedStreamTest.testWriteNulls":583,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":121,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":422,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":115,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":221,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":474,"com.google.gson.CommentsTest.testParseComments":596,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":236,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":252,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":455,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":128,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":353,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":436,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":6,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":37,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":407,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":567,"com.google.gson.MixedStreamTest.testReadInvalidState":580,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":140,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":486,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":200,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":372,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":8,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":306,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":134,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":433,"com.google.gson.internal.bind.JsonTreeWriterTest.testWriteAfterClose":622,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":323,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":610,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":181,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":367,"com.google.gson.functional.MapTest.testMapDeserialization":25,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":118,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":175,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":445,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":14,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":448,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":634,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":24,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":106,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":454,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":450,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":91,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":93,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":494,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":151,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":268,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":284,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":80,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":560,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":98,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":160,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":485,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":89,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":244,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":36,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":441,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":614,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":204,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":292,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":238,"com.google.gson.functional.PrimitiveTest.testShortSerialization":371,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":457,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":359,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":470,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictNansAndInfinities":620,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":329,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":358,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":165,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":305,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":135,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":492,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":532,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":574,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":20,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":322,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":379,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":553,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":420,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":625,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":192,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":462,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":590,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":623,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":386,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":380,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":628,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":74,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":105,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":230,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":285,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":146,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":502,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":626,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":365,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":426,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":233,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":335,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":289,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":256,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":498,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":68,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":82,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":161,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":541,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":555,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":234,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":447,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":182,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":456,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":312,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":168,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":392,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":458,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":187,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":102,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":534,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":299,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":366,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":337,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":383,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":518,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":453,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":491,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":62,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":9,"com.google.gson.functional.MapTest.testGeneralMapField":42,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":254,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":112,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":385,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":127,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":556,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":570,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":194,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":40,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":147,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":303,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":527,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":361,"com.google.gson.MixedStreamTest.testReadMixedStreamed":589,"com.google.gson.ObjectTypeAdapterTest.testDeserializeNullValue":602,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":28,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":162,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":324,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":391,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":548,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":595,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":513,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":342,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":469,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":522,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":180,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":29,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":472,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":17,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":237,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":384,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":517,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":506,"com.google.gson.stream.JsonWriterTest.testArraysInObjects":605,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":325,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":624,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":178,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":423,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":429,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":145,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":542,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":460,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":243,"com.google.gson.functional.ObjectTest.testNestedDeserialization":290,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":275,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":566,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":59,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":96,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":467,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":382,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":435,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":30,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":71,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":406,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":476,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":369,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":81,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":398,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":421,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":551,"com.google.gson.functional.ObjectTest.testNullSerialization":264,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":84,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":471,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":21,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":41,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":297,"com.google.gson.functional.MapTest.testInterfaceTypeMap":39,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":124,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":558,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":101,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":300,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":496,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":627,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":88,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":561,"com.google.gson.MixedStreamTest.testReadClosed":581,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":148,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":465,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":316,"com.google.gson.MixedStreamTest.testWriteClosed":588,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":61,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":539,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":104,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":208,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":255,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":482,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":100,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":438,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":287,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":434,"com.google.gson.stream.JsonWriterTest.testLongs":604,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":201,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":107,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":258,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":538,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":507,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":345,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":509,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":86,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":544,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":188,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":430,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":387,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":608,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":321,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":92,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":156,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":109,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":224,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":437,"com.google.gson.functional.CollectionTest.testQueueDeserialization":554,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":327,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":343,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":411,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":55,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":199,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":508,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":26,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":279,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":170,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":288,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":529,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":531,"com.google.gson.functional.MapTest.testRawMapSerialization":44,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":579,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":549,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":186,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":629,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":79,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":273,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":12,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":459,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":613,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":114,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":210,"com.google.gson.functional.PrimitiveTest.testByteSerialization":368,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":615,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":64,"com.google.gson.ObjectTypeAdapterTest.testSerialize":633,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":525,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":311,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":395,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":125,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":136,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":408,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":483,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":591,"com.google.gson.functional.MapTest.testMapWithQuotes":31,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":155,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":319,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":410,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":225,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":390,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":242,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":607,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":376,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":152,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":142,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":451,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":473,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":286,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":446,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":167,"com.google.gson.functional.ObjectTest.testEmptyStringDeserialization":266,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":352,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":131,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":260,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":196,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":157,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":169,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":397,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":505,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":364,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":217,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":545,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":117,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":110,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":197,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":475,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":83,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":431,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":510,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":576,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":215,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":301,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":487,"com.google.gson.internal.LinkedHashTreeMapTest.testRemoveRootDoesNotDoubleUnlink":639,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":239,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":272,"com.google.gson.functional.ObjectTest.testNestedSerialization":274,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":519,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":315,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":414,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":526,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":516,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":43,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":10,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":425,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":578,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":587,"com.google.gson.stream.JsonWriterTest.testUnicodeLineBreaksEscaped":638,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":265,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":427,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":378,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":103,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":512,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":172,"com.google.gson.GsonBuilderTest.testCreatingMoreThanOnce":3,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":5,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":317,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":150,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":276,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":504,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":413,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":120,"com.google.gson.functional.CollectionTest.testSetSerialization":550,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":571,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":235,"com.google.gson.functional.StringTest.testStringValueSerialization":416,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":443,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":63,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":73,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":535,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":609,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":111,"com.google.gson.MixedStreamTest.testWriteInvalidState":584,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":259,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":320,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":129,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":326,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":562,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":163,"com.google.gson.stream.JsonWriterTest.testWrongTopLevelType":636,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":137,"com.google.gson.ObjectTypeAdapterTest.testDeserialize":603,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":219,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":432,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":464,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":619,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":484,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":190,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":65,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":23,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":116,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":520},"transformations":[{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"1086d252-3e6c-11e6-937e-63ea2fc02de8","method":{"position":"com.google.gson.Gson:871","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            if (json == null) {\n                return null;\n            } \n            return ((T)(fromJson(new com.google.gson.internal.bind.JsonTreeReader(json), typeOfT)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254089422/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:274","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601],"tindex":"10874783-3e6c-11e6-937e-557dbe3a8c88","method":{"position":"com.google.gson.Gson:273","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> floatAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return ((float)(in.nextDouble()));\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    float float = value.floatValue();\n                    checkValidFloatingPoint(floatValue);\n                    out.value(value);\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254089422/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl","sourcecode":"in == null"},"failures":[602,603],"tindex":"1087bcb4-3e6c-11e6-937e-6b3f158c2348","method":{"position":"com.google.gson.TypeAdapter:254","type":"CtMethodImpl","sourcecode":"public final T fromJson(java.io.Reader in) throws java.io.IOException {\n    if (in == null) {\n        {\n            com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(in);\n            return read(reader);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254089422/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"in"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:726","type":"CtBinaryOperatorImpl","sourcecode":"value == 0"},"failures":[168,178,182,183,604,605,606,598,599],"tindex":"1087bcb5-3e6c-11e6-937e-b5121de9bc2b","method":{"position":"com.google.gson.stream.JsonWriter:476","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(long value) throws java.io.IOException {\n    if (value == 0) {\n        {\n            writeDeferredName();\n            beforeValue(false);\n            java.io.Writer.write(java.lang.Long.toString(value));\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254089422/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[1,2,8,10,19,26,31,32,37,39,41,42,44,53,54,60,63,68,70,72,74,76,77,78,79,80,81,82,83,84,87,89,607,93,100,106,107,109,110,112,113,114,115,116,119,120,125,127,129,131,133,135,136,137,138,139,608,609,610,611,612,140,141,142,143,144,146,148,154,160,167,168,169,170,171,173,175,176,178,180,182,183,185,191,193,194,196,197,198,199,200,201,204,207,210,212,219,220,221,222,224,225,231,232,233,235,236,237,239,242,244,247,248,249,252,255,258,262,265,268,270,271,273,274,275,277,282,284,285,287,295,297,303,306,314,315,321,323,324,327,330,332,333,336,337,341,350,352,354,355,358,361,363,367,369,370,372,373,377,379,383,384,400,401,402,403,404,407,409,413,416,428,429,431,433,434,435,436,439,440,441,442,443,444,445,447,450,452,453,454,456,457,458,461,463,464,465,466,467,468,469,470,472,479,490,491,492,493,496,498,500,501,502,505,506,509,511,514,516,517,518,519,525,526,527,528,529,530,531,533,538,539,541,544,547,550,555,556,557,558,559,560,561,562,563,564,568,569,570,572,573,574,575,577,578,593,594,595],"tindex":"1087e3c6-3e6c-11e6-937e-e946b5ab5b9e","method":{"position":"com.google.gson.Gson:510","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src) {\n    if (src == null) {\n        {\n            if (src == null) {\n                return toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull);\n            } \n            return toJson(src, src.getClass());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254089422/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[371],"tindex":"10880ad7-3e6c-11e6-937e-d7b9a272df6c","method":{"position":"com.google.gson.internal.bind.TypeAdapters:223","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254089422/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonObject:54","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[39,42,53,56,92,93,94,95,96,97,98,102,103,108,389,392,393,394,395,396,397,398,437,438,475,565,613,614,615,616,617,618,619,620,621,622,623,624,625,626],"tindex":"108831e8-3e6c-11e6-937e-33fab4b996d2","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:75","type":"CtMethodImpl","sourcecode":"private void put(com.google.gson.JsonElement value) {\n    if (value == null) {\n        {\n            if ((java.lang.String) != null) {\n                if ((!(value.isJsonNull())) || (getSerializeNulls())) {\n                    com.google.gson.JsonObject com.google.gson.JsonObject = ((com.google.gson.JsonObject)(peek()));\n                    object.add(java.lang.String, value);\n                } \n                java.lang.String = null;\n            } else if (java.util.List<com.google.gson.JsonElement>.isEmpty()) {\n                com.google.gson.JsonElement = value;\n            } else {\n                com.google.gson.JsonElement com.google.gson.JsonElement = peek();\n                if (element instanceof com.google.gson.JsonArray) {\n                    ((com.google.gson.JsonArray)(element)).add(value);\n                } else {\n                    throw new java.lang.IllegalStateException();\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254089422/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.JsonPrimitive:313","type":"CtBinaryOperatorImpl","sourcecode":"(value) == null"},"failures":[1,2,8,10,26,39,41,42,53,54,56,57,60,63,70,72,76,77,78,79,80,82,83,84,87,89,607,92,93,94,95,96,97,98,99,100,101,102,103,106,107,108,127,135,136,137,138,139,608,609,610,611,612,140,142,143,144,180,196,201,212,218,219,220,221,222,224,231,233,235,244,247,248,249,252,255,258,262,265,271,273,274,277,282,284,285,287,389,392,393,394,395,397,398,425,428,429,431,433,434,435,436,437,438,441,442,446,447,453,454,456,458,461,473,476,477,478,479,480,482,483,484,486,489,496,502,505,506,509,514,517,518,519,525,528,529,627,628,629,630,631,632,530,532,541,547,550,559,562,563,565,568,572,573,574,575,576,577,579,582,592,633],"tindex":"108831e9-3e6c-11e6-937e-e3db492fdab9","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n@java.lang.Override\nvoid write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value == null) {\n        {\n            java.lang.Object java.lang.Object = field.get(value);\n            com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n            t.write(writer, fieldValue);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254089422/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:232","type":"CtInvocationImpl","sourcecode":"toResolve.isInterface()"},"failures":[],"tindex":"1088800a-3e6c-11e6-937e-eb2dc1a46fdf","method":{"position":"com.google.gson.internal.$Gson$Types:322","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type resolve(java.lang.reflect.Type context, java.lang.Class<?> contextRawType, java.lang.reflect.Type toResolve) {\n    while (true) {\n        if (toResolve instanceof java.lang.reflect.TypeVariable) {\n            java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(toResolve));\n            toResolve = com.google.gson.internal.$Gson$Types.resolveTypeVariable(context, contextRawType, typeVariable);\n            if (toResolve == typeVariable) {\n                return toResolve;\n            } \n        } else if ((toResolve instanceof java.lang.Class) && (((java.lang.Class<?>)(toResolve)).isArray())) {\n            java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getComponentType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, componentType);\n            return componentType == newComponentType ? original : com.google.gson.internal.$Gson$Types.arrayOf(newComponentType);\n        } else if (toResolve instanceof java.lang.reflect.GenericArrayType) {\n            java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getGenericComponentType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, componentType);\n            return componentType == newComponentType ? original : com.google.gson.internal.$Gson$Types.arrayOf(newComponentType);\n        } else if (toResolve instanceof java.lang.reflect.ParameterizedType) {\n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getOwnerType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, ownerType);\n            boolean boolean = newOwnerType != ownerType;\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getActualTypeArguments();\n            for (int int = 0, int int = args.int ; t < length ; t++) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, args[t]);\n                if (resolvedTypeArgument != (args[t])) {\n                    if (!changed) {\n                        args = args.clone();\n                        changed = true;\n                    } \n                    args[t] = resolvedTypeArgument;\n                } \n            }\n            return changed ? com.google.gson.internal.$Gson$Types.newParameterizedTypeWithOwner(newOwnerType, original.getRawType(), args) : original;\n        } else if (toResolve instanceof java.lang.reflect.WildcardType) {\n            java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(toResolve));\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getLowerBounds();\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getUpperBounds();\n            if ((originalLowerBound.int) == 1) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, originalLowerBound[0]);\n                if (lowerBound != (originalLowerBound[0])) {\n                    return com.google.gson.internal.$Gson$Types.supertypeOf(lowerBound);\n                } \n            } else if ((originalUpperBound.int) == 1) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, originalUpperBound[0]);\n                if (upperBound != (originalUpperBound[0])) {\n                    return com.google.gson.internal.$Gson$Types.subtypeOf(upperBound);\n                } \n            } \n            return original;\n        } else {\n            return toResolve;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"contextRawType"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[1,2,4,8,10,18,19,22,24,26,31,32,39,41,42,44,46,49,53,54,57,63,64,65,68,78,80,82,83,87,607,93,99,100,101,106,107,109,110,114,115,119,120,125,127,131,608,609,610,611,612,146,147,148,154,155,157,159,160,167,169,170,171,173,175,176,181,185,188,191,193,194,197,198,199,200,204,207,210,212,218,219,220,221,222,224,225,227,231,236,237,243,244,247,249,252,255,258,265,271,274,282,285,287,303,306,321,363,392,393,400,401,402,403,404,407,409,413,416,425,428,429,433,434,442,446,450,463,464,465,466,467,468,469,470,472,475,480,490,491,492,493,496,498,499,500,505,511,514,516,517,518,519,525,526,527,528,529,627,628,629,632,530,531,537,539,540,541,544,547,548,553,555,556,557,558,559,560,562,563,565,566,575,576,577,634,578,635,636,637,638,579,582,587,592,595,597,600],"tindex":"1088a71b-3e6c-11e6-937e-6992e9effe4e","method":{"position":"com.google.gson.stream.JsonWriter:413","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            writeDeferredName();\n            beforeValue(false);\n            string(value);\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254089422/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:198","type":"CtBinaryOperatorImpl","sourcecode":"out == null"},"failures":[],"tindex":"1088a71c-3e6c-11e6-937e-0f8677057622","method":{"position":"com.google.gson.TypeAdapter:140","type":"CtMethodImpl","sourcecode":"public final void toJson(java.io.Writer out, T value) throws java.io.IOException {\n    if (out == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254089422/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = new com.google.gson.stream.JsonWriter(out);\n            write(writer, value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:127","type":"CtInvocationImpl","sourcecode":"raw.isInterface()"},"failures":[73,77,303,518],"tindex":"1088ce2d-3e6c-11e6-937e-5198d60d4e35","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:125","type":"CtMethodImpl","sourcecode":"private java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> getBoundFields(com.google.gson.Gson context, com.google.gson.reflect.TypeToken<?> type, java.lang.Class<?> raw) {\n    if (raw.isInterface()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254089422/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> = new java.util.LinkedHashMap<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField>();\n            if (raw.isInterface()) {\n                return result;\n            } \n            java.lang.reflect.Type java.lang.reflect.Type = type.getType();\n            while (raw != (java.lang.Object.java.lang.Object.java.lang.Class)) {\n                java.lang.reflect.Field[] java.lang.reflect.Field[] = raw.getDeclaredFields();\n                for (java.lang.reflect.Field java.lang.reflect.Field : fields) {\n                    boolean boolean = excludeField(field, true);\n                    boolean boolean = excludeField(field, false);\n                    if ((!serialize) && (!deserialize)) {\n                        continue;\n                    } \n                    field.setAccessible(true);\n                    java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, field.getGenericType());\n                    com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = createBoundField(context, field, getFieldName(field), com.google.gson.reflect.TypeToken.get(fieldType), serialize, deserialize);\n                    com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = result.put(boundField.java.lang.String, boundField);\n                    if (previous != null) {\n                        throw new java.lang.IllegalArgumentException(((declaredType + \" declares multiple JSON fields named \") + (previous.java.lang.String)));\n                    } \n                }\n                type = com.google.gson.reflect.TypeToken.get(com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, raw.getGenericSuperclass()));\n                raw = type.getRawType();\n            }\n            return result;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"raw"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[165],"tindex":"1088f53e-3e6c-11e6-937e-a12a90c84305","method":{"position":"com.google.gson.internal.bind.TypeAdapters:201","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254089422/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:356","type":"CtVariableReadImpl","sourcecode":"insert"},"failures":[639],"tindex":"1088f53f-3e6c-11e6-937e-f55a99a91e07","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:338","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (insert) {\n        {\n            for (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) {\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                int int = left != null ? left.int : 0;\n                int int = right != null ? right.int : 0;\n                int int = leftHeight - rightHeight;\n                if (delta == (-2)) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    int int = rightRight != null ? rightRight.int : 0;\n                    int int = rightLeft != null ? rightLeft.int : 0;\n                    int int = rightLeftHeight - rightRightHeight;\n                    if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                        rotateLeft(node);\n                    } else {\n                        assert rightDelta == 1;\n                        rotateRight(right);\n                        rotateLeft(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 2) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    int int = leftRight != null ? leftRight.int : 0;\n                    int int = leftLeft != null ? leftLeft.int : 0;\n                    int int = leftLeftHeight - leftRightHeight;\n                    if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                        rotateRight(node);\n                    } else {\n                        assert leftDelta == (-1);\n                        rotateLeft(left);\n                        rotateRight(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 0) {\n                    node.int = leftHeight + 1;\n                    if (insert) {\n                        break;\n                    } \n                } else {\n                    assert (delta == (-1)) || (delta == 1);\n                    node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                    if (!insert) {\n                        break;\n                    } \n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254089422/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"insert"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:246","type":"CtVariableReadImpl","sourcecode":"unlink"},"failures":[420,640,641],"tindex":"10891c50-3e6c-11e6-937e-435ffc2c4a1b","method":{"position":"com.google.gson.internal.LinkedTreeMap:217","type":"CtMethodImpl","sourcecode":"void removeInternal(com.google.gson.internal.LinkedTreeMap.Node<K, V> node, boolean unlink) {\n    if (unlink) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254089422/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (unlink) {\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            if ((left != null) && (right != null)) {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = (left.int) > (right.int) ? left.last() : right.first();\n                removeInternal(adjacent, false);\n                int int = 0;\n                left = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                if (left != null) {\n                    leftHeight = left.int;\n                    adjacent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = left;\n                    left.com.google.gson.internal.LinkedTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                } \n                int int = 0;\n                right = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                if (right != null) {\n                    rightHeight = right.int;\n                    adjacent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = right;\n                    right.com.google.gson.internal.LinkedTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                } \n                adjacent.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                replaceInParent(node, adjacent);\n                return ;\n            } else if (left != null) {\n                replaceInParent(node, left);\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n            } else if (right != null) {\n                replaceInParent(node, right);\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n            } else {\n                replaceInParent(node, null);\n            }\n            rebalance(originalParent, false);\n            (int)--;\n            (int)++;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"unlink":"unlink"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:113","type":"CtInvocationImpl","sourcecode":"primitive.isBoolean()"},"failures":[],"tindex":"10894361-3e6c-11e6-937e-d393bb3db48a","method":{"position":"com.google.gson.JsonPrimitive:93","type":"CtMethodImpl","sourcecode":"void setValue(java.lang.Object primitive) {\n    if (primitive.isBoolean()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254089422/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (primitive instanceof java.lang.Character) {\n                char char = ((java.lang.Character)(primitive)).charValue();\n                com.google.gson.JsonPrimitive.this.java.lang.Object = java.lang.String.valueOf(c);\n            } else {\n                com.google.gson.internal.$Gson$Preconditions.checkArgument(((primitive instanceof java.lang.Number) || (com.google.gson.JsonPrimitive.isPrimitiveOrString(primitive))));\n                com.google.gson.JsonPrimitive.this.java.lang.Object = primitive;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"primitive"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"10896a72-3e6c-11e6-937e-396506e609be","method":{"position":"com.google.gson.DefaultDateTypeAdapter:94","type":"CtMethodImpl","sourcecode":"private java.util.Date deserializeToDate(com.google.gson.JsonElement json) {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254089422/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            synchronized(java.text.DateFormat) {\n                try {\n                    return java.text.DateFormat.parse(json.getAsString());\n                } catch (java.text.ParseException ignored) {\n                }\n                try {\n                    return java.text.DateFormat.parse(json.getAsString());\n                } catch (java.text.ParseException ignored) {\n                }\n                try {\n                    return java.text.DateFormat.parse(json.getAsString());\n                } catch (java.text.ParseException e) {\n                    throw new com.google.gson.JsonSyntaxException(json.getAsString() , e);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:105","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonObject"},"failures":[],"tindex":"10896a73-3e6c-11e6-937e-1325bd26f80f","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:839","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254089422/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return containsKey(o);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:537","type":"CtFieldReadImpl","sourcecode":"lenient"},"failures":[],"tindex":"10896a74-3e6c-11e6-937e-df1b6e4ea164","method":{"position":"com.google.gson.stream.JsonReader:325","type":"CtMethodImpl","sourcecode":"public final void setLenient(boolean lenient) {\n    if (lenient) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254089422/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.stream.JsonReader.this.boolean = lenient;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"lenient"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"10896a75-3e6c-11e6-937e-83f18068d86f","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:108","type":"CtMethodImpl","sourcecode":"public boolean writeField(java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254089422/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (!(boolean))\n                return false;\n            \n            java.lang.Object java.lang.Object = field.get(value);\n            return fieldValue != value;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:554","type":"CtBinaryOperatorImpl","sourcecode":"(datePattern != null) && (!(\"\".equals(datePattern.trim())))"},"failures":[],"tindex":"10896a76-3e6c-11e6-937e-23275e38e53e","method":{"position":"com.google.gson.GsonBuilder:551","type":"CtMethodImpl","sourcecode":"private void addTypeAdaptersForDate(java.lang.String datePattern, int dateStyle, int timeStyle, java.util.List<com.google.gson.TypeAdapterFactory> factories) {\n    if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n        {\n            com.google.gson.DefaultDateTypeAdapter com.google.gson.DefaultDateTypeAdapter;\n            if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n                dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(datePattern);\n            } else if ((dateStyle != (java.text.DateFormat.java.text.DateFormat.int)) && (timeStyle != (java.text.DateFormat.java.text.DateFormat.int))) {\n                dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(dateStyle , timeStyle);\n            } else {\n                return ;\n            }\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.util.Date.java.util.Date.java.lang.Class), dateTypeAdapter));\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Timestamp.java.sql.Timestamp.java.lang.Class), dateTypeAdapter));\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Date.java.sql.Date.java.lang.Class), dateTypeAdapter));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254089422/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"datePattern":"datePattern"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":21,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
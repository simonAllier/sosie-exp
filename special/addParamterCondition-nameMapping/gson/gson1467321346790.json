{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":119,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":495,"com.google.gson.functional.StringTest.testStringValueDeserialization":493,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":215,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":586,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":315,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":176,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":138,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":107,"com.google.gson.MixedStreamTest.testWriteLenient":39,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":412,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":69,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":324,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":59,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":463,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":67,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":480,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":224,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":411,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":511,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":534,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":185,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":371,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":387,"com.google.gson.functional.ObjectTest.testSingletonLists":65,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":316,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":514,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":169,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":496,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":528,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":539,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":485,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":334,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":85,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":31,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":227,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":17,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":509,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":260,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":45,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":216,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":568,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":161,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":601,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":460,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":567,"com.google.gson.functional.EnumTest.testEnumCaseMapping":410,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":494,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":596,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":160,"com.google.gson.functional.JsonTreeTest.testToJsonTree":259,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":50,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":337,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":275,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreBehindInVersion":25,"com.google.gson.JsonObjectTest.testEqualsNonEmptyObject":619,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":290,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":393,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":439,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":171,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":308,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":374,"com.google.gson.internal.LinkedTreeMapTest.testLargeSetOfRandomKeys":612,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":473,"com.google.gson.functional.ObjectTest.testNullDeserialization":97,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":588,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":506,"com.google.gson.internal.bind.JsonElementReaderTest.testNestedObjects":606,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":79,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":237,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":594,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":177,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":86,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":458,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":347,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":94,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":593,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":532,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":280,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":338,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":242,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":423,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":241,"com.google.gson.JsonParserTest.testParseString":622,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":333,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":221,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":200,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":248,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":289,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":98,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":435,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":198,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":314,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":213,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":413,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":560,"com.google.gson.functional.StreamingTypeAdaptersTest.testFromJsonTree":616,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":365,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":305,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":153,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":518,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":582,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":222,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":419,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":214,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":93,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":429,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":73,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":147,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":595,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":145,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":181,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":578,"com.google.gson.metrics.PerformanceTest.testDummy":29,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":515,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":266,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":385,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":137,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":519,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":536,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":584,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":131,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":322,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":134,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":307,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":346,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":591,"com.google.gson.functional.CollectionTest.testSetDeserialization":479,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":535,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":56,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":78,"com.google.gson.functional.EnumTest.testEnumSet":401,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":205,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":386,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":10,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":295,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":555,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":87,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":6,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":600,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":218,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":136,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":229,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":455,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":545,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":230,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":174,"com.google.gson.functional.MapTest.testHashMapDeserialization":549,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":469,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":320,"com.google.gson.MixedStreamTest.testReadNulls":40,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":121,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":148,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":117,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":356,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":149,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":543,"com.google.gson.functional.MapTest.testSortedMap":571,"com.google.gson.functional.MapTest.testMapSerialization":566,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":120,"com.google.gson.internal.bind.JsonElementReaderTest.testObject":607,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":127,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":211,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":442,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":491,"com.google.gson.functional.MapTest.testSerializeMaps":552,"com.google.gson.functional.MapTest.testComplexKeysSerialization":579,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":55,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":583,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":449,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":408,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":590,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":3,"com.google.gson.internal.LinkedTreeMapTest.testRemoveRootDoesNotDoubleUnlink":615,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":368,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":540,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":406,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":48,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":140,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":96,"com.google.gson.functional.MapTest.testStringKeyDeserialization":581,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":446,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":522,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":244,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":180,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":585,"com.google.gson.functional.PrettyPrintingTest.testMap":46,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":175,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":396,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":466,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":123,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":285,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":541,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":30,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":448,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":499,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":503,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":302,"com.google.gson.functional.CollectionTest.testQueueSerialization":470,"com.google.gson.functional.MapTest.testMapSerializationEmpty":580,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":624,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":206,"com.google.gson.functional.MapTest.testMapOfMapSerialization":565,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":197,"com.google.gson.JavaSerializationTest.testMapIsSerializable":623,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":310,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":476,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":208,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":529,"com.google.gson.functional.FieldNamingTest.testIdentity":492,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":497,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":11,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":109,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":99,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":61,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":64,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":144,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":258,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":163,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":602,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":343,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":498,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":203,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":452,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":326,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":27,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":297,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":304,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":336,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":546,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":240,"com.google.gson.functional.MapTest.testMapSubclassSerialization":551,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":115,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":392,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":58,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":15,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":36,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":195,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":398,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":255,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":284,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":414,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":538,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":5,"com.google.gson.functional.EnumTest.testEnumSubclass":404,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":217,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":32,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":83,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":162,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":342,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":223,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":521,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":363,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":165,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":454,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":201,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":453,"com.google.gson.stream.JsonWriterTest.testNullName":626,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":264,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":26,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":438,"com.google.gson.internal.LinkedTreeMapTest.testEqualsAndHashCode":614,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":77,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":207,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":143,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":199,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":329,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":66,"com.google.gson.MixedStreamTest.testWriteNulls":37,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":548,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":437,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":417,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":431,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":382,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":589,"com.google.gson.CommentsTest.testParseComments":604,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":12,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":68,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":375,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":220,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":353,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":444,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":126,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":501,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":570,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":262,"com.google.gson.MixedStreamTest.testReadInvalidState":34,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":531,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":390,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":239,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":331,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":128,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":173,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":450,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAheadInVersion":23,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":350,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":190,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":234,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":312,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":434,"com.google.gson.functional.MapTest.testMapDeserialization":558,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":306,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":51,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":547,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":370,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":273,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":557,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":2,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":372,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":369,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeMap":617,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":257,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":405,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":282,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":84,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":100,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":358,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":399,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":265,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":291,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":389,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":367,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":451,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":47,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":569,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":335,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":159,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":13,"com.google.gson.functional.PrimitiveTest.testShortSerialization":238,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":377,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":226,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":462,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":196,"com.google.gson.internal.LinkedTreeMapTest.testIterationOrder":613,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":225,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":172,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":296,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":488,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":403,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":465,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":114,"com.google.gson.internal.LinkedTreeMapTest.testPutOverrides":610,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":553,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":189,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":246,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":486,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":415,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":323,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":381,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":44,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":608,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":253,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":247,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":142,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":101,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":272,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":520,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":16,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":277,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":232,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":341,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":202,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":523,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":105,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":72,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":409,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":57,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":360,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":292,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":474,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":394,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":524,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":0,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":313,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":376,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":179,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":152,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":299,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":378,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":318,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":269,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":467,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":166,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":233,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":204,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":250,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":157,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":1,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":402,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":125,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":129,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":70,"com.google.gson.functional.MapTest.testGeneralMapField":575,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":428,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":252,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":344,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":395,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":443,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":325,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":573,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":170,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":278,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":422,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":228,"com.google.gson.MixedStreamTest.testReadMixedStreamed":43,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":191,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":293,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":561,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":151,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":481,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":603,"com.google.gson.stream.JsonWriterTest.testNonFiniteDoubles":625,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":513,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":209,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":461,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":135,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":311,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":562,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":349,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":550,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":251,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":526,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":54,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":19,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":192,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":609,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":309,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":418,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":110,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":276,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":475,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":380,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":14,"com.google.gson.functional.ObjectTest.testNestedDeserialization":106,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":91,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":261,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":122,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":263,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":459,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":249,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":352,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":139,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":500,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":563,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":384,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":236,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":359,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":63,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":416,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":484,"com.google.gson.functional.ObjectTest.testNullSerialization":80,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":362,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":348,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":554,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":164,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":574,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":440,"com.google.gson.functional.MapTest.testInterfaceTypeMap":572,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":397,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":268,"com.google.gson.JsonObjectTest.testAddingNullOrEmptyPropertyName":620,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":167,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":407,"com.google.gson.MixedStreamTest.testReadClosed":35,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":366,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":400,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":279,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":457,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":183,"com.google.gson.MixedStreamTest.testWriteClosed":42,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":124,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":472,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":71,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":271,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":339,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":388,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":267,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":355,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":103,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":351,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":332,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":74,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":274,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":471,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":20,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":212,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":21,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":364,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":477,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":319,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":111,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":254,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":188,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":256,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":287,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":425,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":592,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":354,"com.google.gson.functional.CollectionTest.testQueueDeserialization":487,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":194,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":210,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":505,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":118,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":330,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":517,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":95,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":559,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":301,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":104,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":424,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":464,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":33,"com.google.gson.functional.MapTest.testRawMapSerialization":577,"com.google.gson.JsonParserTest.testParseReader":621,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":482,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":317,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":89,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":357,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":132,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":379,"com.google.gson.functional.PrimitiveTest.testByteSerialization":235,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":430,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":537,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":155,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":420,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":178,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":60,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":441,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":489,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":7,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":502,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":599,"com.google.gson.functional.MapTest.testMapWithQuotes":564,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":186,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":286,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":504,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":9,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":150,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":530,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":618,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":243,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":283,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":533,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":373,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":4,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":102,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":52,"com.google.gson.functional.ObjectTest.testEmptyStringDeserialization":82,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":219,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":298,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":76,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":447,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":327,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":288,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":62,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":300,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":516,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":231,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":544,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":478,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":433,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":328,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":383,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":426,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":361,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":112,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":22,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAtSameVersion":24,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":116,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":542,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":168,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":391,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":527,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":88,"com.google.gson.functional.ObjectTest.testNestedSerialization":90,"com.google.gson.internal.LinkedTreeMapTest.testClear":611,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":158,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":182,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":421,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":508,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":53,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":576,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":130,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":340,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":41,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":598,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":81,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":108,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":245,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":270,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":512,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":303,"com.google.gson.GsonBuilderTest.testCreatingMoreThanOnce":28,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":184,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":597,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":92,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":281,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":18,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":507,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":436,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":345,"com.google.gson.functional.CollectionTest.testSetSerialization":483,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":49,"com.google.gson.functional.StringTest.testStringValueSerialization":510,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":525,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":154,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":141,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":468,"com.google.gson.MixedStreamTest.testWriteInvalidState":38,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":427,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":75,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":187,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":193,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":445,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":146,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":294,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":490,"com.google.gson.ObjectTypeAdapterTest.testDeserialize":605,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":587,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":113,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":456,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":8,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":321,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":156,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":556,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":133,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":432},"transformations":[{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:85","type":"CtBinaryOperatorImpl"},"failures":[0,1,2,3,4,5,6,7,8],"tindex":"cffe2942-3f07-11e6-87b0-bbdf3b82d05d","method":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:84","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Object array) throws java.io.IOException {\n    if (array == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467320714430/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (array == null) {\n                out.nullValue();\n                return ;\n            } \n            out.beginArray();\n            for (int int = 0, int int = java.lang.reflect.Array.getLength(array) ; i < length ; i++) {\n                E E = ((E)(java.lang.reflect.Array.get(array, i)));\n                com.google.gson.TypeAdapter<E>.write(out, value);\n            }\n            out.endArray();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"cffeec93-3f07-11e6-87b0-21bb5de50612","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:132","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter name(java.lang.String name) throws java.io.IOException {\n    if (name == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467320714430/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if ((java.util.List<com.google.gson.JsonElement>.isEmpty()) || ((java.lang.String) != null)) {\n                throw new java.lang.IllegalStateException();\n            } \n            com.google.gson.JsonElement com.google.gson.JsonElement = peek();\n            if (element instanceof com.google.gson.JsonObject) {\n                java.lang.String = name;\n                return com.google.gson.internal.bind.JsonTreeWriter.this;\n            } \n            throw new java.lang.IllegalStateException();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"cfff13a4-3f07-11e6-87b0-8daf74c4c776","method":{"position":"com.google.gson.Gson:695","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.lang.String json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            if (json == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467320714430/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            } else {\n                {\n                    java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n                    return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467320714430/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonObject:54","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"cfff3ab5-3f07-11e6-87b0-47994adfcd6b","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:75","type":"CtMethodImpl","sourcecode":"private void put(com.google.gson.JsonElement value) {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467320714430/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((java.lang.String) != null) {\n                if ((!(value.isJsonNull())) || (getSerializeNulls())) {\n                    com.google.gson.JsonObject com.google.gson.JsonObject = ((com.google.gson.JsonObject)(peek()));\n                    object.add(java.lang.String, value);\n                } \n                java.lang.String = null;\n            } else if (java.util.List<com.google.gson.JsonElement>.isEmpty()) {\n                com.google.gson.JsonElement = value;\n            } else {\n                com.google.gson.JsonElement com.google.gson.JsonElement = peek();\n                if (element instanceof com.google.gson.JsonArray) {\n                    ((com.google.gson.JsonArray)(element)).add(value);\n                } else {\n                    throw new java.lang.IllegalStateException();\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:578","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"cfff3ab6-3f07-11e6-87b0-8701e5c145ef","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:401","type":"CtMethodImpl","sourcecode":"private void rotateLeft(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467320714430/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivotLeft;\n            if (pivotLeft != null) {\n                pivotLeft.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            } \n            replaceInParent(root, pivot);\n            pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot;\n            root.int = (java.lang.Math.max((left != null ? left.int : 0), (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n            pivot.int = (java.lang.Math.max(root.int, (pivotRight != null ? pivotRight.int : 0))) + 1;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:452","type":"CtBinaryOperatorImpl"},"failures":[9,10,11,12,13,14],"tindex":"cfff88d7-3f07-11e6-87b0-a9aad83a384d","method":{"position":"com.google.gson.TreeTypeAdapter:92","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newFactoryWithMatchRawType(com.google.gson.reflect.TypeToken<?> exactType, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof com.google.gson.InstanceCreator<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467320714430/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            boolean boolean = (exactType.getType()) == (exactType.getRawType());\n            return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , exactType , matchRawType , null);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:233","type":"CtBinaryOperatorImpl"},"failures":[15,16,17,18,19,20,21,22,23,24,25],"tindex":"cfffafe8-3f07-11e6-87b0-d54216024c11","method":{"position":"com.google.gson.internal.Excluder:232","type":"CtMethodImpl","sourcecode":"private boolean isValidSince(com.google.gson.annotations.Since annotation) {\n    if (annotation != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467320714430/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (annotation != null) {\n                double double = annotation.value();\n                if (annotationVersion > (double)) {\n                    return false;\n                } \n            } \n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:192","type":"CtInvocationImpl"},"failures":[],"tindex":"cfffafe9-3f07-11e6-87b0-4360e146fb9d","method":{"position":"com.google.gson.reflect.TypeToken:160","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.GenericArrayType to) {\n    if (from.equals(from)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467320714430/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.reflect.Type java.lang.reflect.Type = to.getGenericComponentType();\n            if (toGenericComponentType instanceof java.lang.reflect.ParameterizedType) {\n                java.lang.reflect.Type java.lang.reflect.Type = from;\n                if (from instanceof java.lang.reflect.GenericArrayType) {\n                    t = ((java.lang.reflect.GenericArrayType)(from)).getGenericComponentType();\n                } else if (from instanceof java.lang.Class<?>) {\n                    java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(from));\n                    while (classType.isArray()) {\n                        classType = classType.getComponentType();\n                    }\n                    t = classType;\n                } \n                return com.google.gson.reflect.TypeToken.isAssignableFrom(t, ((java.lang.reflect.ParameterizedType)(toGenericComponentType)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n            } \n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from","to":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:274","type":"CtVariableReadImpl"},"failures":[26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,0,370,371,372,373,374,1,2,375,376,377,378,379,380,3,381,4,382,383,384,5,6,385,386,387,388,7,8,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,15,16,17,18,516,19,20,517,21,22,9,518,10,519,11,520,521,522,523,524,525,12,526,13,527,528,529,530,14,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604],"tindex":"cfffd6fa-3f07-11e6-87b0-f913a2a3071c","method":{"position":"com.google.gson.Gson:273","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> floatAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return ((float)(in.nextDouble()));\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    float float = value.floatValue();\n                    checkValidFloatingPoint(floatValue);\n                    out.value(value);\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467320714430/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:578","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"d0004c2b-3f07-11e6-87b0-7d4df0cf3a1d","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:429","type":"CtMethodImpl","sourcecode":"private void rotateRight(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467320714430/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivotRight;\n            if (pivotRight != null) {\n                pivotRight.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            } \n            replaceInParent(root, pivot);\n            pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot;\n            root.int = (java.lang.Math.max((right != null ? right.int : 0), (pivotRight != null ? pivotRight.int : 0))) + 1;\n            pivot.int = (java.lang.Math.max(root.int, (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:85","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"d0009a4c-3f07-11e6-87b0-4b38bc1f7da1","method":{"position":"com.google.gson.internal.$Gson$Types:411","type":"CtMethodImpl","sourcecode":"private static int indexOf(java.lang.Object[] array, java.lang.Object toFind) {\n    for (int int = 0 ; i < (array.int) ; i++) {\n        if (toFind.equals(array[i])) {\n            return i;\n        } \n    }\n    throw new java.util.NoSuchElementException();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"toFind"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"d0009a4d-3f07-11e6-87b0-2569dae66340","method":{"position":"com.google.gson.Gson:695","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.lang.String json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            if (json == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467320714430/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            } else {\n                {\n                    java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n                    return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467320714430/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:85","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"d000c15e-3f07-11e6-87b0-cf5aedb7b2e5","method":{"position":"com.google.gson.internal.$Gson$Types:411","type":"CtMethodImpl","sourcecode":"private static int indexOf(java.lang.Object[] array, java.lang.Object toFind) {\n    for (int int = 0 ; i < (array.int) ; i++) {\n        if (toFind.equals(array[i])) {\n            return i;\n        } \n    }\n    throw new java.util.NoSuchElementException();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"toFind"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"d000c15f-3f07-11e6-87b0-734a6ae992eb","method":{"position":"com.google.gson.Gson:510","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src) {\n    if (src != null) {\n        {\n            if (src != null) {\n                {\n                    if (src == null) {\n                        return toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull);\n                    } \n                    return toJson(src, src.getClass());\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467320714430/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467320714430/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:109","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"d000e870-3f07-11e6-87b0-817072659689","method":{"position":"com.google.gson.reflect.TypeToken:283","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic final boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonPrimitive) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467320714430/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (o instanceof com.google.gson.reflect.TypeToken<?>) && (com.google.gson.internal.$Gson$Types.equals(java.lang.reflect.Type, ((com.google.gson.reflect.TypeToken<?>)(o)).java.lang.reflect.Type));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:131","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"d0010f81-3f07-11e6-87b0-37a255f5cdcb","method":{"position":"com.google.gson.internal.Primitives:79","type":"CtMethodImpl","sourcecode":"public static boolean isWrapperType(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class<?>) {\n        {\n            return com.google.gson.internal.Primitives.com.google.gson.internal.Primitives.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.containsKey(com.google.gson.internal.$Gson$Preconditions.checkNotNull(type));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467320714430/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:298","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"d0010f82-3f07-11e6-87b0-3b8daf3a37d9","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:162","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(double value) throws java.io.IOException {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        {\n            if ((!(isLenient())) && ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value)))) {\n                throw new java.lang.IllegalArgumentException((\"JSON forbids NaN and infinities: \" + value));\n            } \n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467320714430/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:391","type":"CtUnaryOperatorImpl"},"failures":[605,606,607,608,609,610,611,612,613,614,615,115,119,125,129,131,132,149,152,153,155,156,256,257,258,259,260,264,265,269,270,275,280,294,354,355,412,413,414,415,416,616,617,618,485,519,527,539,558,562,567,581,619,620,621,622,595,623],"tindex":"d0013693-3f07-11e6-87b0-f18f30dd4033","method":{"position":"com.google.gson.internal.LinkedTreeMap:310","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (!insert) {\n        {\n            for (com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>) {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                int int = left != null ? left.int : 0;\n                int int = right != null ? right.int : 0;\n                int int = leftHeight - rightHeight;\n                if (delta == (-2)) {\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    int int = rightRight != null ? rightRight.int : 0;\n                    int int = rightLeft != null ? rightLeft.int : 0;\n                    int int = rightLeftHeight - rightRightHeight;\n                    if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                        rotateLeft(node);\n                    } else {\n                        assert rightDelta == 1;\n                        rotateRight(right);\n                        rotateLeft(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 2) {\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    int int = leftRight != null ? leftRight.int : 0;\n                    int int = leftLeft != null ? leftLeft.int : 0;\n                    int int = leftLeftHeight - leftRightHeight;\n                    if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                        rotateRight(node);\n                    } else {\n                        assert leftDelta == (-1);\n                        rotateLeft(left);\n                        rotateRight(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 0) {\n                    node.int = leftHeight + 1;\n                    if (insert) {\n                        break;\n                    } \n                } else {\n                    assert (delta == (-1)) || (delta == 1);\n                    node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                    if (!insert) {\n                        break;\n                    } \n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467320714430/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"insert"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl"},"failures":[624],"tindex":"d001abc4-3f07-11e6-87b0-eb6e6f885c99","method":{"position":"com.google.gson.JsonObject:100","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Boolean value) {\n    if (property == null) {\n        {\n            add(property, createJsonElement(value));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467320714430/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:103","type":"CtVariableReadImpl"},"failures":[118,122,123,124],"tindex":"d001abc5-3f07-11e6-87b0-5f7d0ad3129f","method":{"position":"com.google.gson.internal.Excluder:96","type":"CtMethodImpl","sourcecode":"public com.google.gson.internal.Excluder withExclusionStrategy(com.google.gson.ExclusionStrategy exclusionStrategy, boolean serialization, boolean deserialization) {\n    if (deserialization) {\n        {\n            com.google.gson.internal.Excluder com.google.gson.internal.Excluder = clone();\n            if (serialization) {\n                result.java.util.List<com.google.gson.ExclusionStrategy> = new java.util.ArrayList<com.google.gson.ExclusionStrategy>(java.util.List<com.google.gson.ExclusionStrategy>);\n                result.java.util.List<com.google.gson.ExclusionStrategy>.add(exclusionStrategy);\n            } \n            if (deserialization) {\n                result.java.util.List<com.google.gson.ExclusionStrategy> = new java.util.ArrayList<com.google.gson.ExclusionStrategy>(java.util.List<com.google.gson.ExclusionStrategy>);\n                result.java.util.List<com.google.gson.ExclusionStrategy>.add(exclusionStrategy);\n            } \n            return result;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467320714430/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deserialization":"deserialization"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:462","type":"CtBinaryOperatorImpl"},"failures":[625],"tindex":"d001d2d6-3f07-11e6-87b0-e16b5152b04a","method":{"position":"com.google.gson.stream.JsonWriter:461","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(double value) throws java.io.IOException {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467320714430/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                throw new java.lang.IllegalArgumentException((\"Numeric values must be finite, but was \" + value));\n            } \n            writeDeferredName();\n            beforeValue(false);\n            java.io.Writer.append(java.lang.Double.toString(value));\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl"},"failures":[626],"tindex":"d001f9e7-3f07-11e6-87b0-4b55be831405","method":{"position":"com.google.gson.stream.JsonWriter:385","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter name(java.lang.String name) throws java.io.IOException {\n    if (name == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467320714430/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (name == null) {\n                throw new java.lang.NullPointerException(\"name == null\");\n            } \n            if ((java.lang.String) != null) {\n                throw new java.lang.IllegalStateException();\n            } \n            if ((int) == 0) {\n                throw new java.lang.IllegalStateException(\"JsonWriter is closed.\");\n            } \n            java.lang.String = name;\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[138,144,296,376,4,6,7,8,569,576],"tindex":"d001f9e8-3f07-11e6-87b0-816d31eeaa99","method":{"position":"com.google.gson.stream.JsonWriter:490","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467320714430/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            writeDeferredName();\n            java.lang.String java.lang.String = value.toString();\n            if ((!(boolean)) && (((string.equals(\"-Infinity\")) || (string.equals(\"Infinity\"))) || (string.equals(\"NaN\")))) {\n                throw new java.lang.IllegalArgumentException((\"Numeric values must be finite, but was \" + value));\n            } \n            beforeValue(false);\n            java.io.Writer.append(string);\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:537","type":"CtFieldReadImpl"},"failures":[],"tindex":"d00220f9-3f07-11e6-87b0-232b500668c4","method":{"position":"com.google.gson.stream.JsonReader:325","type":"CtMethodImpl","sourcecode":"public final void setLenient(boolean lenient) {\n    if (lenient) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467320714430/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.stream.JsonReader.this.boolean = lenient;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"lenient"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"d002480a-3f07-11e6-87b0-b105648d2d7b","method":{"position":"com.google.gson.Gson:510","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src) {\n    if (src != null) {\n        {\n            if (src != null) {\n                {\n                    if (src == null) {\n                        return toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull);\n                    } \n                    return toJson(src, src.getClass());\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467320714430/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467320714430/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"d002480b-3f07-11e6-87b0-7bdfeff6d8b6","method":{"position":"com.google.gson.Gson:261","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467320714430/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467320714430/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    double double = value.doubleValue();\n                    checkValidFloatingPoint(doubleValue);\n                    out.value(value);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"d0026f1c-3f07-11e6-87b0-ddf200eef485","method":{"position":"com.google.gson.Gson:261","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467320714430/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467320714430/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    double double = value.doubleValue();\n                    checkValidFloatingPoint(doubleValue);\n                    out.value(value);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:246","type":"CtVariableReadImpl"},"failures":[],"tindex":"d002962d-3f07-11e6-87b0-59b555f9ac38","method":{"position":"com.google.gson.internal.LinkedTreeMap:217","type":"CtMethodImpl","sourcecode":"void removeInternal(com.google.gson.internal.LinkedTreeMap.Node<K, V> node, boolean unlink) {\n    if (unlink) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467320714430/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (unlink) {\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            if ((left != null) && (right != null)) {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = (left.int) > (right.int) ? left.last() : right.first();\n                removeInternal(adjacent, false);\n                int int = 0;\n                left = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                if (left != null) {\n                    leftHeight = left.int;\n                    adjacent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = left;\n                    left.com.google.gson.internal.LinkedTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                } \n                int int = 0;\n                right = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                if (right != null) {\n                    rightHeight = right.int;\n                    adjacent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = right;\n                    right.com.google.gson.internal.LinkedTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                } \n                adjacent.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                replaceInParent(node, adjacent);\n                return ;\n            } else if (left != null) {\n                replaceInParent(node, left);\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n            } else if (right != null) {\n                replaceInParent(node, right);\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n            } else {\n                replaceInParent(node, null);\n            }\n            rebalance(originalParent, false);\n            (int)--;\n            (int)++;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"unlink":"unlink"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":28,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
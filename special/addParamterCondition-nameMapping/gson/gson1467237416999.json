{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":208,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":424,"com.google.gson.functional.StringTest.testStringValueDeserialization":422,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":128,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":553,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":360,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":514,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":4,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":100,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":150,"com.google.gson.MixedStreamTest.testWriteLenient":617,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":71,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":277,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":203,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":163,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":69,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":167,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":562,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":309,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":606,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":117,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":523,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":40,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":216,"com.google.gson.functional.ObjectTest.testSingletonLists":67,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":50,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":361,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":425,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":507,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":307,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":102,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":458,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":374,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":82,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":624,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":565,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":227,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":438,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":52,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":379,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":554,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":123,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":499,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":610,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":266,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":403,"com.google.gson.functional.EnumTest.testEnumCaseMapping":605,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":423,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":621,"com.google.gson.functional.JsonTreeTest.testToJsonTree":114,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":498,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":382,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":375,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":22,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":47,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":274,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":486,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":354,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":509,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":283,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":450,"com.google.gson.functional.ObjectTest.testNullDeserialization":325,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":60,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":435,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":79,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":298,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":574,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":515,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":322,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":265,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":201,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":89,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":297,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":378,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":336,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":376,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":156,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":579,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":578,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":373,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":559,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":538,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":340,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":585,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":91,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":482,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":359,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":536,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":151,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":396,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":551,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":142,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":351,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":196,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":291,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":28,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":413,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":419,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":560,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":552,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":88,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":476,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":75,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":189,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":243,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":9,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":410,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":519,"com.google.gson.metrics.PerformanceTest.testDummy":620,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":51,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":13,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":38,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":302,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":303,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":326,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":415,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":366,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":465,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":25,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":353,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":200,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":63,"com.google.gson.functional.CollectionTest.testSetDeserialization":166,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":118,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":78,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":461,"com.google.gson.functional.EnumTest.testEnumSet":599,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":543,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":39,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":253,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithNestedWildcards":245,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":343,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":392,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":83,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":37,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":234,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":556,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":27,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":567,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":103,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":263,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":568,"com.google.gson.functional.MapTest.testHashMapDeserialization":386,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":512,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":446,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":365,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":471,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":595,"com.google.gson.MixedStreamTest.testReadNulls":618,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":133,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":207,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":193,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":331,"com.google.gson.functional.MapTest.testSortedMap":406,"com.google.gson.functional.MapTest.testMapSerialization":402,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":209,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":174,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":549,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":489,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":172,"com.google.gson.functional.MapTest.testSerializeMaps":389,"com.google.gson.functional.MapTest.testComplexKeysSerialization":127,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":460,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":290,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":414,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":493,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":62,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":225,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":222,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":145,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":328,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":603,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":120,"com.google.gson.internal.LinkedHashTreeMapTest.testDoubleCapacity":251,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":5,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":324,"com.google.gson.functional.MapTest.testStringKeyDeserialization":412,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithBasicWildcards":247,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":490,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":254,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":581,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":416,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":518,"com.google.gson.functional.PrettyPrintingTest.testMap":380,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":468,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":513,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":443,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":211,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":329,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":338,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":492,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":623,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":428,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":432,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":349,"com.google.gson.functional.MapTest.testMapSerializationEmpty":411,"com.google.gson.functional.CollectionTest.testQueueSerialization":447,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":544,"com.google.gson.functional.MapTest.testMapOfMapSerialization":401,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":535,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":356,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":452,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":162,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":546,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":258,"com.google.gson.functional.FieldNamingTest.testIdentity":173,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":426,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":304,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":53,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":92,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":8,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":66,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":113,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":593,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":501,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":286,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":427,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":496,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":130,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":541,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":369,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":236,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":344,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":1,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":161,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":350,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":384,"com.google.gson.functional.MapTest.testMapSubclassSerialization":388,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":577,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":46,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":148,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":463,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":179,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":238,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":533,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":607,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":152,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":337,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":592,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":101,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":36,"com.google.gson.functional.EnumTest.testEnumSubclass":601,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":555,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":81,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":625,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":500,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":197,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":561,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":30,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":140,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":503,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":132,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":539,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":131,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":11,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":235,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":485,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":318,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":545,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":7,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":537,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":370,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":68,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":385,"com.google.gson.MixedStreamTest.testWriteNulls":616,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":484,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":417,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":478,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":34,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":61,"com.google.gson.CommentsTest.testParseComments":613,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":70,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":219,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":255,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":183,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":191,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":558,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":464,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":405,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":430,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":310,"com.google.gson.MixedStreamTest.testReadInvalidState":614,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":115,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":45,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":372,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":576,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":175,"com.google.gson.JsonParserTest.testParseMixedArray":289,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":511,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":249,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":494,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithTypeParameters":246,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":180,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":528,"com.google.gson.JsonArrayTest.testRemove":3,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":160,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":357,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":571,"com.google.gson.functional.MapTest.testMapDeserialization":395,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":481,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":352,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":383,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":280,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":215,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":288,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":20,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":394,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":218,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":596,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":146,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":112,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":602,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":105,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":93,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":321,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":135,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":469,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":12,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":341,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":44,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":129,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":144,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":119,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":404,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":279,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":497,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":306,"com.google.gson.functional.PrimitiveTest.testShortSerialization":575,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":284,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":564,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":316,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":534,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":563,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":0,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":510,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":169,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":285,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":164,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":147,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":390,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":527,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":281,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":583,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":153,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":295,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":223,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":367,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":242,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":293,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":590,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":584,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":300,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":19,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":29,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":94,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":226,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":296,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":334,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":202,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":24,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":31,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":540,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":98,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":74,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":604,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":137,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":462,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":106,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":165,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":466,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":305,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":214,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":220,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":358,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":517,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":195,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":346,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":221,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":363,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":16,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":444,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":504,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":570,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":542,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":587,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":186,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":217,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":600,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":213,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":176,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":72,"com.google.gson.functional.MapTest.testGeneralMapField":126,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":475,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":589,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":190,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":198,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":467,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":368,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":407,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":270,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":421,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":508,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":566,"com.google.gson.MixedStreamTest.testReadMixedStreamed":241,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":342,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":397,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":529,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":194,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":455,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":611,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":49,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":547,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":315,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":26,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":108,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":398,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":441,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":387,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":256,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":588,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":58,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":230,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":530,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":294,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":355,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":418,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":54,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":333,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":451,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":598,"com.google.gson.functional.ObjectTest.testNestedDeserialization":99,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":260,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":262,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":323,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":210,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":10,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":314,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":586,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":182,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":299,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":399,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":429,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":35,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":573,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":136,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":154,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":206,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":457,"com.google.gson.functional.ObjectTest.testNullSerialization":319,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":139,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":440,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":391,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":125,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":502,"com.google.gson.functional.MapTest.testInterfaceTypeMap":124,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":487,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":282,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":15,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":505,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":224,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":143,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":470,"com.google.gson.MixedStreamTest.testReadClosed":615,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":335,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":264,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":521,"com.google.gson.MixedStreamTest.testWriteClosed":240,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":212,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":449,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":18,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":73,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":377,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":41,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":14,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":185,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":96,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":181,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserialize2dArray":628,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":110,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":21,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":76,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":448,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":231,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":550,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":233,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":141,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":453,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":364,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":312,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":158,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":591,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":526,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":111,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":339,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":64,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":472,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":184,"com.google.gson.functional.CollectionTest.testQueueDeserialization":459,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":532,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":548,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":434,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":594,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":232,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":371,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":90,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":122,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":348,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":97,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":157,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":442,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":237,"com.google.gson.functional.MapTest.testRawMapSerialization":409,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":456,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":362,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":85,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":134,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":178,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":2,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":327,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":477,"com.google.gson.functional.PrimitiveTest.testByteSerialization":572,"com.google.gson.ObjectTypeAdapterTest.testSerialize":244,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":267,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":155,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":516,"com.google.gson.JsonPrimitiveTest.testEqualsIntegerAndBigInteger":287,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":204,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":488,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":170,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":42,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":431,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":609,"com.google.gson.functional.MapTest.testMapWithQuotes":400,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":272,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":524,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":433,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":252,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":495,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":259,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":57,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":580,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":271,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":116,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":597,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":33,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":95,"com.google.gson.internal.LinkedHashTreeMapTest.testDoubleCapacityAllNodesOnLeft":248,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":121,"com.google.gson.functional.ObjectTest.testEmptyStringDeserialization":320,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":345,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":557,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":77,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":491,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":109,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":273,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":205,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":229,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":347,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":569,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":332,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":454,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":480,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":261,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":278,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":473,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":138,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":55,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":608,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":149,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":330,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":308,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":506,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":257,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":627,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":84,"com.google.gson.functional.ObjectTest.testNestedSerialization":86,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":187,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":420,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":437,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":520,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":317,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":408,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":177,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":23,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":619,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":626,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":80,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":311,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":582,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":17,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":48,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":107,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":522,"com.google.gson.GsonBuilderTest.testCreatingMoreThanOnce":612,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":622,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":87,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":104,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":228,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":436,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":483,"com.google.gson.functional.CollectionTest.testSetSerialization":168,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":199,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":32,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":381,"com.google.gson.functional.StringTest.testStringValueSerialization":439,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":65,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":6,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":159,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":445,"com.google.gson.MixedStreamTest.testWriteInvalidState":239,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":474,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":269,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":525,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":192,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":531,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":188,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":275,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":171,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":59,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":56,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":292,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":313,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":43,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":276,"com.google.gson.internal.LinkedHashTreeMapTest.testAvlWalker":250,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":268,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":393,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":301,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":479},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[0,1,2],"tindex":"65edcc76-3e44-11e6-8ecc-43a7e504284d","method":{"position":"com.google.gson.Gson:532","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src != null) {\n        {\n            java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n            toJson(src, typeOfSrc, writer);\n            return writer.toString();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236736267/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:86","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonArray"},"failures":[3],"tindex":"65ee1a97-3e44-11e6-8ecc-e757d80a5823","method":{"position":"com.google.gson.JsonArray:92","type":"CtMethodImpl","sourcecode":"public boolean remove(com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonArray) {\n        {\n            return java.util.List<com.google.gson.JsonElement>.remove(element);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236736267/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,0,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244],"tindex":"65ee1a98-3e44-11e6-8ecc-ed9c475b5e5b","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:86","type":"CtMethodImpl","sourcecode":"private com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField createBoundField(final com.google.gson.Gson context, final java.lang.reflect.Field field, final java.lang.String name, final com.google.gson.reflect.TypeToken<?> fieldType, boolean serialize, boolean deserialize) {\n    if (name == null) {\n        {\n            if (field.isSynthetic()) {\n                {\n                    final boolean boolean = com.google.gson.internal.Primitives.isPrimitive(fieldType.getRawType());\n                    return new com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField(name, serialize, deserialize) {\n                        final com.google.gson.TypeAdapter<?> typeAdapter = getFieldAdapter(context, field, fieldType);\n\n                        @java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n                        @java.lang.Override\n                        void write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                            java.lang.Object java.lang.Object = field.get(value);\n                            com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n                            t.write(writer, fieldValue);\n                        }\n\n                        @java.lang.Override\n                        void read(com.google.gson.stream.JsonReader reader, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                            java.lang.Object java.lang.Object = com.google.gson.TypeAdapter<?>.read(reader);\n                            if ((fieldValue != null) || (!isPrimitive)) {\n                                field.set(value, fieldValue);\n                            } \n                        }\n\n                        public boolean writeField(java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                            if (!(boolean))\n                                return false;\n                            \n                            java.lang.Object java.lang.Object = field.get(value);\n                            return fieldValue != value;\n                        }\n                    };\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236736267/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236736267/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"field"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:240","type":"CtInvocationImpl","sourcecode":"from.getRawType().equals(to.getRawType())"},"failures":[245,246,247],"tindex":"65ee68b9-3e44-11e6-8ecc-b1e9197f84c8","method":{"position":"com.google.gson.reflect.TypeToken:238","type":"CtMethodImpl","sourcecode":"private static boolean typeEquals(java.lang.reflect.ParameterizedType from, java.lang.reflect.ParameterizedType to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeVarMap) {\n    if (to.getRawType().equals(from.getRawType())) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236736267/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (to.getRawType().equals(to.getRawType())) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236736267/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (to.getRawType().equals(to.getRawType())) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236736267/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            if (from.getRawType().equals(to.getRawType())) {\n                                java.lang.reflect.Type[] java.lang.reflect.Type[] = from.getActualTypeArguments();\n                                java.lang.reflect.Type[] java.lang.reflect.Type[] = to.getActualTypeArguments();\n                                for (int int = 0 ; i < (fromArgs.int) ; i++) {\n                                    if (!(com.google.gson.reflect.TypeToken.matches(fromArgs[i], toArgs[i], typeVarMap))) {\n                                        return false;\n                                    } \n                                }\n                                return true;\n                            } \n                            return false;\n                        }\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"to","to":"to"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"65ee68ba-3e44-11e6-8ecc-ff447caaec4e","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n@java.lang.Override\nvoid write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value == null) {\n        {\n            java.lang.Object java.lang.Object = field.get(value);\n            com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n            t.write(writer, fieldValue);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236736267/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:233","type":"CtBinaryOperatorImpl","sourcecode":"annotation != null"},"failures":[226,227,228,229,230,231,232,233],"tindex":"65ee8fcb-3e44-11e6-8ecc-d5c274330f56","method":{"position":"com.google.gson.internal.Excluder:232","type":"CtMethodImpl","sourcecode":"private boolean isValidSince(com.google.gson.annotations.Since annotation) {\n    if (annotation != null) {\n        {\n            if (annotation != null) {\n                double double = annotation.value();\n                if (annotationVersion > (double)) {\n                    return false;\n                } \n            } \n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236736267/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:578","type":"CtBinaryOperatorImpl","sourcecode":"root == null"},"failures":[248,249,250,251],"tindex":"65ee8fcc-3e44-11e6-8ecc-750ae2907393","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:626","type":"CtMethodImpl","sourcecode":"void reset(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root == null) {\n        {\n            if (root == null) {\n                {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                    for (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root ; n != null ; n = n.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) {\n                        n.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = stackTop;\n                        stackTop = n;\n                    }\n                    com.google.gson.internal.LinkedHashTreeMap.AvlIterator.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = stackTop;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236736267/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236736267/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"root"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.JsonObject:54","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[23,252,253,30,254,31,32,255,256,257,258,259,260,261,52,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,112,280,128,281,282,193,195,196,203,204,205,206,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298],"tindex":"65eeb6dd-3e44-11e6-8ecc-2b94ce70ff21","method":{"position":"com.google.gson.internal.bind.TypeAdapters:680","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, com.google.gson.JsonElement value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if ((value == null) || (value.isJsonNull())) {\n                out.nullValue();\n            } else if (value.isJsonPrimitive()) {\n                com.google.gson.JsonPrimitive com.google.gson.JsonPrimitive = value.getAsJsonPrimitive();\n                if (primitive.isNumber()) {\n                    out.value(primitive.getAsNumber());\n                } else if (primitive.isBoolean()) {\n                    out.value(primitive.getAsBoolean());\n                } else {\n                    out.value(primitive.getAsString());\n                }\n            } else if (value.isJsonArray()) {\n                out.beginArray();\n                for (com.google.gson.JsonElement com.google.gson.JsonElement : value.getAsJsonArray()) {\n                    write(out, e);\n                }\n                out.endArray();\n            } else if (value.isJsonObject()) {\n                out.beginObject();\n                for (java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> : value.getAsJsonObject().entrySet()) {\n                    out.name(e.getKey());\n                    write(out, e.getValue());\n                }\n                out.endObject();\n            } else {\n                throw new java.lang.IllegalArgumentException((\"Couldn't write \" + (value.getClass())));\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236736267/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:250","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[4,299,5,6,300,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,301,25,26,27,302,252,28,253,303,304,29,30,254,31,305,32,255,256,306,257,307,258,259,260,33,34,261,35,36,37,38,39,40,41,42,43,44,45,308,46,47,309,48,49,50,51,52,262,310,311,53,54,312,55,56,263,313,264,265,314,266,315,316,317,58,59,60,61,62,63,64,65,267,268,66,67,68,69,70,71,72,73,74,75,76,269,77,318,78,79,319,80,320,81,321,82,322,83,84,85,86,323,87,88,89,90,324,325,91,92,93,94,95,96,97,98,99,100,326,327,101,102,328,329,330,331,332,103,333,334,270,335,336,104,105,271,337,338,272,339,273,340,274,341,106,342,275,343,0,344,345,346,347,348,349,107,350,351,352,353,354,355,356,108,357,358,359,360,361,362,363,364,365,276,366,367,277,368,369,109,278,370,371,372,110,373,374,279,1,375,376,377,111,112,113,114,115,378,116,117,118,379,380,119,120,381,382,383,121,384,280,385,386,387,388,389,390,391,392,393,394,395,122,396,397,398,399,400,401,402,403,123,404,405,406,124,407,125,126,408,409,410,127,411,412,413,414,415,416,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,417,418,419,155,420,421,156,157,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,163,442,164,443,444,445,446,447,448,449,450,165,451,452,453,454,166,167,455,456,168,457,458,281,459,460,461,462,463,169,170,171,172,173,464,174,175,176,177,465,178,466,467,468,282,179,469,470,180,181,182,183,184,185,186,187,188,189,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,190,191,192,490,491,492,493,494,193,495,194,195,196,197,496,198,199,200,201,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,202,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,203,204,593,205,206,207,594,208,209,595,210,211,212,213,214,215,216,596,597,283,217,218,219,220,284,221,2,598,222,223,599,600,285,601,602,603,224,225,604,605,606,607,226,227,228,229,230,231,232,233,608,609,234,610,286,611,235,236,612,613,237,614,615,238,616,239,617,618,619,240,241,242,620,621,622,243,623,624,625,297,298,626],"tindex":"65eeddee-3e44-11e6-8ecc-859904c580cb","method":{"position":"com.google.gson.Gson:273","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> floatAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                {\n                    if (serializeSpecialFloatingPointValues) {\n                        return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n                    } \n                    return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                        @java.lang.Override\n                        public java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                            if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                                in.nextNull();\n                                return null;\n                            } \n                            return ((float)(in.nextDouble()));\n                        }\n\n                        @java.lang.Override\n                        public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                            if (value == null) {\n                                out.nullValue();\n                                return ;\n                            } \n                            float float = value.floatValue();\n                            checkValidFloatingPoint(floatValue);\n                            out.value(value);\n                        }\n                    };\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236736267/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236736267/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:103","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.GenericArrayType"},"failures":[33,35,36,37,41,42,43,627,628,70,92,379,381,477,479,484,486,492],"tindex":"65ef2c0f-3e44-11e6-8ecc-1dff2e5b0eb1","method":{"position":"com.google.gson.reflect.TypeToken:295","type":"CtMethodImpl","sourcecode":"public static com.google.gson.reflect.TypeToken<?> get(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.GenericArrayType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236736267/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new com.google.gson.reflect.TypeToken<java.lang.Object>(type);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:180","type":"CtUnaryOperatorImpl","sourcecode":"!(b instanceof java.lang.reflect.GenericArrayType)"},"failures":[],"tindex":"65ef5220-3e44-11e6-8ecc-ff32e93957ba","method":{"position":"com.google.gson.internal.$Gson$Types:151","type":"CtMethodImpl","sourcecode":"static boolean equal(java.lang.Object a, java.lang.Object b) {\n    return (a == b) || ((a != null) && (a.equals(b)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:578","type":"CtBinaryOperatorImpl","sourcecode":"root == null"},"failures":[],"tindex":"65ef5221-3e44-11e6-8ecc-4576f33b1b7a","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:626","type":"CtMethodImpl","sourcecode":"void reset(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root == null) {\n        {\n            if (root == null) {\n                {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                    for (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root ; n != null ; n = n.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) {\n                        n.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = stackTop;\n                        stackTop = n;\n                    }\n                    com.google.gson.internal.LinkedHashTreeMap.AvlIterator.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = stackTop;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236736267/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236736267/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:141","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.WildcardType"},"failures":[4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,308,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,0,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244],"tindex":"65ef5222-3e44-11e6-8ecc-3fe9fbaccda7","method":{"position":"com.google.gson.internal.Primitives:69","type":"CtMethodImpl","sourcecode":"public static boolean isPrimitive(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.WildcardType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236736267/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (type instanceof java.lang.reflect.WildcardType) {\n                {\n                    return com.google.gson.internal.Primitives.com.google.gson.internal.Primitives.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.containsKey(type);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236736267/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:107","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.WildcardType"},"failures":[],"tindex":"65ef7933-3e44-11e6-8ecc-2febb11b154c","method":{"position":"com.google.gson.internal.Primitives:69","type":"CtMethodImpl","sourcecode":"public static boolean isPrimitive(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.WildcardType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236736267/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (type instanceof java.lang.reflect.WildcardType) {\n                {\n                    return com.google.gson.internal.Primitives.com.google.gson.internal.Primitives.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.containsKey(type);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236736267/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"65ef7934-3e44-11e6-8ecc-abb021d965a6","method":{"position":"com.google.gson.JsonParser:44","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement parse(java.lang.String json) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            return parse(new java.io.StringReader(json));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236736267/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:164","type":"CtBinaryOperatorImpl","sourcecode":"from instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"65ef7935-3e44-11e6-8ecc-b15fd3a484c9","method":{"position":"com.google.gson.reflect.TypeToken:122","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic boolean isAssignableFrom(java.lang.reflect.Type from) {\n    if (from instanceof java.lang.reflect.GenericArrayType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236736267/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (from == null) {\n                return false;\n            } \n            if (java.lang.reflect.Type.equals(from)) {\n                return true;\n            } \n            if ((java.lang.reflect.Type) instanceof java.lang.Class<?>) {\n                return java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from));\n            } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.ParameterizedType) {\n                return com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n            } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.GenericArrayType) {\n                return (java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from))) && (com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.GenericArrayType)(java.lang.reflect.Type))));\n            } else {\n                throw com.google.gson.reflect.TypeToken.buildUnexpectedTypeError(java.lang.reflect.Type, java.lang.Class.java.lang.Class.java.lang.Class, java.lang.reflect.ParameterizedType.java.lang.reflect.ParameterizedType.java.lang.Class, java.lang.reflect.GenericArrayType.java.lang.reflect.GenericArrayType.java.lang.Class);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:497","type":"CtBinaryOperatorImpl","sourcecode":"(typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)"},"failures":[23,24,252,28,253,303,304,29,30,254,31,305,32,255,256,306,257,307,258,260,261,308,312,263,313,264,265,266,279,280,128,281,464,174,175,176,177,465,178,467,282,496,203,204,593,205,206,597,283,284,609,234,610,286,611],"tindex":"65ef7936-3e44-11e6-8ecc-4f76aee8f6e5","method":{"position":"com.google.gson.GsonBuilder:447","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\npublic com.google.gson.GsonBuilder registerTypeAdapter(java.lang.reflect.Type type, java.lang.Object typeAdapter) {\n    if ((typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236736267/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.$Gson$Preconditions.checkArgument(((((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) || (typeAdapter instanceof com.google.gson.InstanceCreator<?>)) || (typeAdapter instanceof com.google.gson.TypeAdapter<?>)));\n            if (typeAdapter instanceof com.google.gson.InstanceCreator<?>) {\n                java.util.Map<java.lang.reflect.Type, com.google.gson.InstanceCreator<?>>.put(type, ((com.google.gson.InstanceCreator)(typeAdapter)));\n            } \n            if ((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) {\n                com.google.gson.reflect.TypeToken<?> com.google.gson.reflect.TypeToken<?> = com.google.gson.reflect.TypeToken.get(type);\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.TreeTypeAdapter.newFactoryWithMatchRawType(typeToken, typeAdapter));\n            } \n            if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.internal.bind.TypeAdapters.newFactory(com.google.gson.reflect.TypeToken.get(type), ((com.google.gson.TypeAdapter)(typeAdapter))));\n            } \n            return com.google.gson.GsonBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:501","type":"CtBinaryOperatorImpl","sourcecode":"typeAdapter instanceof com.google.gson.TypeAdapter<?>"},"failures":[23,24,252,28,253,303,304,29,30,254,31,305,32,255,256,306,257,307,258,260,261,308,312,263,313,264,265,266,279,280,128,281,464,174,175,176,177,465,178,467,282,496,203,204,593,205,206,597,283,284,609,234,610,286,611],"tindex":"65efa047-3e44-11e6-8ecc-2705ff7c4bbf","method":{"position":"com.google.gson.TreeTypeAdapter:92","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newFactoryWithMatchRawType(com.google.gson.reflect.TypeToken<?> exactType, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n        {\n            boolean boolean = (exactType.getType()) == (exactType.getRawType());\n            return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , exactType , matchRawType , null);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236736267/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[546,560,573],"tindex":"65efa048-3e44-11e6-8ecc-79cbe09792b6","method":{"position":"com.google.gson.internal.bind.TypeAdapters:282","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236736267/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:107","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonArray"},"failures":[],"tindex":"65efa049-3e44-11e6-8ecc-635ac9f1b488","method":{"position":"com.google.gson.internal.$Gson$Types:511","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    return (o instanceof java.lang.reflect.GenericArrayType) && (com.google.gson.internal.$Gson$Types.equals(com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl.this, ((java.lang.reflect.GenericArrayType)(o))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:602","type":"CtUnaryOperatorImpl","sourcecode":"!(lenient)"},"failures":[],"tindex":"65efa04a-3e44-11e6-8ecc-a3cc3c766781","method":{"position":"com.google.gson.stream.JsonReader:325","type":"CtMethodImpl","sourcecode":"public final void setLenient(boolean lenient) {\n    if (!lenient) {\n        {\n            com.google.gson.stream.JsonReader.this.boolean = lenient;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236736267/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"lenient"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"65efa04b-3e44-11e6-8ecc-e3250b1d9b20","method":{"position":"com.google.gson.Gson:576","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        {\n            try {\n                com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                toJson(src, typeOfSrc, jsonWriter);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236736267/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[],"tindex":"65efc75c-3e44-11e6-8ecc-2dfe40be8309","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:86","type":"CtMethodImpl","sourcecode":"private com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField createBoundField(final com.google.gson.Gson context, final java.lang.reflect.Field field, final java.lang.String name, final com.google.gson.reflect.TypeToken<?> fieldType, boolean serialize, boolean deserialize) {\n    if (name == null) {\n        {\n            if (field.isSynthetic()) {\n                {\n                    final boolean boolean = com.google.gson.internal.Primitives.isPrimitive(fieldType.getRawType());\n                    return new com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField(name, serialize, deserialize) {\n                        final com.google.gson.TypeAdapter<?> typeAdapter = getFieldAdapter(context, field, fieldType);\n\n                        @java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n                        @java.lang.Override\n                        void write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                            java.lang.Object java.lang.Object = field.get(value);\n                            com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n                            t.write(writer, fieldValue);\n                        }\n\n                        @java.lang.Override\n                        void read(com.google.gson.stream.JsonReader reader, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                            java.lang.Object java.lang.Object = com.google.gson.TypeAdapter<?>.read(reader);\n                            if ((fieldValue != null) || (!isPrimitive)) {\n                                field.set(value, fieldValue);\n                            } \n                        }\n\n                        public boolean writeField(java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                            if (!(boolean))\n                                return false;\n                            \n                            java.lang.Object java.lang.Object = field.get(value);\n                            return fieldValue != value;\n                        }\n                    };\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236736267/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236736267/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[],"tindex":"65efc75d-3e44-11e6-8ecc-174a0186417f","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:132","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter name(java.lang.String name) throws java.io.IOException {\n    if (name == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236736267/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if ((java.util.List<com.google.gson.JsonElement>.isEmpty()) || ((java.lang.String) != null)) {\n                throw new java.lang.IllegalStateException();\n            } \n            com.google.gson.JsonElement com.google.gson.JsonElement = peek();\n            if (element instanceof com.google.gson.JsonObject) {\n                java.lang.String = name;\n                return com.google.gson.internal.bind.JsonTreeWriter.this;\n            } \n            throw new java.lang.IllegalStateException();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:120","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonNull"},"failures":[],"tindex":"65efee6e-3e44-11e6-8ecc-156e6c891df3","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:808","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonNull) {\n        {\n            if (!(o instanceof java.util.Map.Entry)) {\n                return false;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n            if (node == null) {\n                return false;\n            } \n            removeInternal(node, true);\n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236736267/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"65efee6f-3e44-11e6-8ecc-a3f13011b506","method":{"position":"com.google.gson.Gson:468","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src) {\n    if (src == null) {\n        {\n            if (src == null) {\n                return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            return toJsonTree(src, src.getClass());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236736267/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:240","type":"CtInvocationImpl","sourcecode":"from.getRawType().equals(to.getRawType())"},"failures":[],"tindex":"65efee70-3e44-11e6-8ecc-2d83b6127d7a","method":{"position":"com.google.gson.reflect.TypeToken:238","type":"CtMethodImpl","sourcecode":"private static boolean typeEquals(java.lang.reflect.ParameterizedType from, java.lang.reflect.ParameterizedType to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeVarMap) {\n    if (to.getRawType().equals(from.getRawType())) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236736267/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (to.getRawType().equals(to.getRawType())) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236736267/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (to.getRawType().equals(to.getRawType())) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236736267/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            if (from.getRawType().equals(to.getRawType())) {\n                                java.lang.reflect.Type[] java.lang.reflect.Type[] = from.getActualTypeArguments();\n                                java.lang.reflect.Type[] java.lang.reflect.Type[] = to.getActualTypeArguments();\n                                for (int int = 0 ; i < (fromArgs.int) ; i++) {\n                                    if (!(com.google.gson.reflect.TypeToken.matches(fromArgs[i], toArgs[i], typeVarMap))) {\n                                        return false;\n                                    } \n                                }\n                                return true;\n                            } \n                            return false;\n                        }\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"to","to":"to"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:92","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof java.util.Iterator"},"failures":[],"tindex":"65efee71-3e44-11e6-8ecc-2329585e7f3d","method":{"position":"com.google.gson.internal.LinkedTreeMap:570","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof java.util.Iterator) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236736267/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (o instanceof java.util.Map.Entry) && ((findByEntry(((java.util.Map.Entry<?, ?>)(o)))) != null);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:274","type":"CtBinaryOperatorImpl","sourcecode":"target instanceof java.lang.String"},"failures":[],"tindex":"65f01582-3e44-11e6-8ecc-c9285ea9a9a0","method":{"position":"com.google.gson.JsonPrimitive:273","type":"CtMethodImpl","sourcecode":"private static boolean isPrimitiveOrString(java.lang.Object target) {\n    if (target instanceof java.lang.String) {\n        {\n            if (target instanceof java.lang.String) {\n                return true;\n            } \n            java.lang.Class<?> java.lang.Class<?> = target.getClass();\n            for (java.lang.Class<?> java.lang.Class<?> : com.google.gson.JsonPrimitive.com.google.gson.JsonPrimitive.java.lang.Class<?>[]) {\n                if (standardPrimitive.isAssignableFrom(classOfPrimitive)) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236736267/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"target":"target"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:92","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof java.util.Iterator"},"failures":[],"tindex":"65f01583-3e44-11e6-8ecc-6bba7316dc05","method":{"position":"com.google.gson.reflect.TypeToken:283","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic final boolean equals(java.lang.Object o) {\n    if (o instanceof java.util.Iterator) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236736267/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (o instanceof com.google.gson.reflect.TypeToken<?>) && (com.google.gson.internal.$Gson$Types.equals(java.lang.reflect.Type, ((com.google.gson.reflect.TypeToken<?>)(o)).java.lang.reflect.Type));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"65f01584-3e44-11e6-8ecc-374599964a50","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:101","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nvoid read(com.google.gson.stream.JsonReader reader, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236736267/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    } else {\n        {\n            java.lang.Object java.lang.Object = com.google.gson.TypeAdapter<?>.read(reader);\n            if ((fieldValue != null) || (!isPrimitive)) {\n                field.set(value, fieldValue);\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:578","type":"CtBinaryOperatorImpl","sourcecode":"root == null"},"failures":[],"tindex":"65f01585-3e44-11e6-8ecc-c5a8eab8813f","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:429","type":"CtMethodImpl","sourcecode":"private void rotateRight(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root == null) {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivotRight;\n            if (pivotRight != null) {\n                pivotRight.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            } \n            replaceInParent(root, pivot);\n            pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot;\n            root.int = (java.lang.Math.max((right != null ? right.int : 0), (pivotRight != null ? pivotRight.int : 0))) + 1;\n            pivot.int = (java.lang.Math.max(root.int, (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236736267/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"65f03c96-3e44-11e6-8ecc-539e5a725138","method":{"position":"com.google.gson.Gson:591","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        {\n            com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = getAdapter(com.google.gson.reflect.TypeToken.get(typeOfSrc));\n            boolean boolean = writer.isLenient();\n            writer.setLenient(true);\n            boolean boolean = writer.isHtmlSafe();\n            writer.setHtmlSafe(boolean);\n            boolean boolean = writer.getSerializeNulls();\n            writer.setSerializeNulls(boolean);\n            try {\n                ((com.google.gson.TypeAdapter<java.lang.Object>)(adapter)).write(writer, src);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            } finally {\n                writer.setLenient(oldLenient);\n                writer.setHtmlSafe(oldHtmlSafe);\n                writer.setSerializeNulls(oldSerializeNulls);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236736267/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.ObjectTypeAdapter:95","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"65f03c97-3e44-11e6-8ecc-3920e64ca1f4","method":{"position":"com.google.gson.internal.bind.ObjectTypeAdapter:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Object value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            com.google.gson.TypeAdapter<java.lang.Object> com.google.gson.TypeAdapter<java.lang.Object> = ((com.google.gson.TypeAdapter<java.lang.Object>)(com.google.gson.Gson.getAdapter(value.getClass())));\n            if (typeAdapter instanceof com.google.gson.internal.bind.ObjectTypeAdapter) {\n                out.beginObject();\n                out.endObject();\n                return ;\n            } \n            typeAdapter.write(out, value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236736267/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:125","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonObject"},"failures":[],"tindex":"65f03c98-3e44-11e6-8ecc-2371596b12aa","method":{"position":"com.google.gson.JsonArray:115","type":"CtMethodImpl","sourcecode":"public boolean contains(com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236736267/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return java.util.List<com.google.gson.JsonElement>.contains(element);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:250","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[],"tindex":"65f03c99-3e44-11e6-8ecc-892f198b36e3","method":{"position":"com.google.gson.Gson:273","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> floatAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                {\n                    if (serializeSpecialFloatingPointValues) {\n                        return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n                    } \n                    return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                        @java.lang.Override\n                        public java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                            if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                                in.nextNull();\n                                return null;\n                            } \n                            return ((float)(in.nextDouble()));\n                        }\n\n                        @java.lang.Override\n                        public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                            if (value == null) {\n                                out.nullValue();\n                                return ;\n                            } \n                            float float = value.floatValue();\n                            checkValidFloatingPoint(floatValue);\n                            out.value(value);\n                        }\n                    };\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236736267/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236736267/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:462","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[],"tindex":"65f063aa-3e44-11e6-8ecc-9f169b385021","method":{"position":"com.google.gson.stream.JsonWriter:461","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(double value) throws java.io.IOException {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236736267/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                throw new java.lang.IllegalArgumentException((\"Numeric values must be finite, but was \" + value));\n            } \n            writeDeferredName();\n            beforeValue(false);\n            java.io.Writer.append(java.lang.Double.toString(value));\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"65f063ab-3e44-11e6-8ecc-ff10bfaddbf3","method":{"position":"com.google.gson.Gson:719","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.lang.String json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236736267/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (json == null) {\n                return null;\n            } \n            java.io.StringReader java.io.StringReader = new java.io.StringReader(json);\n            T T = ((T)(fromJson(reader, typeOfT)));\n            return target;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1435","type":"CtBinaryOperatorImpl","sourcecode":"c == '\\n'"},"failures":[],"tindex":"65f063ac-3e44-11e6-8ecc-d33886d51a82","method":{"position":"com.google.gson.stream.JsonReader:755","type":"CtMethodImpl","sourcecode":"private boolean isLiteral(char c) throws java.io.IOException {\n    if (c == '\\n') {\n        {\n            switch (c) {\n                case '/' :\n                case '\\\\' :\n                case ';' :\n                case '#' :\n                case '=' :\n                    checkLenient();\n                case '{' :\n                case '}' :\n                case '[' :\n                case ']' :\n                case ':' :\n                case ',' :\n                case ' ' :\n                case '\\t' :\n                case '\\f' :\n                case '\\r' :\n                case '\\n' :\n                    return false;\n                default :\n                    return true;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236736267/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"c"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:109","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonPrimitive"},"failures":[],"tindex":"65f063ad-3e44-11e6-8ecc-3d0d1bff59ad","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:839","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonPrimitive) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236736267/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return containsKey(o);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:240","type":"CtInvocationImpl","sourcecode":"from.getRawType().equals(to.getRawType())"},"failures":[],"tindex":"65f063ae-3e44-11e6-8ecc-11bade43d6d3","method":{"position":"com.google.gson.reflect.TypeToken:238","type":"CtMethodImpl","sourcecode":"private static boolean typeEquals(java.lang.reflect.ParameterizedType from, java.lang.reflect.ParameterizedType to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeVarMap) {\n    if (to.getRawType().equals(from.getRawType())) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236736267/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (to.getRawType().equals(to.getRawType())) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236736267/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (to.getRawType().equals(to.getRawType())) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236736267/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            if (from.getRawType().equals(to.getRawType())) {\n                                java.lang.reflect.Type[] java.lang.reflect.Type[] = from.getActualTypeArguments();\n                                java.lang.reflect.Type[] java.lang.reflect.Type[] = to.getActualTypeArguments();\n                                for (int int = 0 ; i < (fromArgs.int) ; i++) {\n                                    if (!(com.google.gson.reflect.TypeToken.matches(fromArgs[i], toArgs[i], typeVarMap))) {\n                                        return false;\n                                    } \n                                }\n                                return true;\n                            } \n                            return false;\n                        }\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"to","to":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":41,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
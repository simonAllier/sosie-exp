{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":564,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":395,"com.google.gson.functional.StringTest.testStringValueDeserialization":393,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":369,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":535,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":309,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":501,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":0,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":266,"com.google.gson.MixedStreamTest.testWriteLenient":144,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":384,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":237,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":318,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":558,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":86,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":91,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":236,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":540,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":212,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":594,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":60,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":509,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":208,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":571,"com.google.gson.functional.ObjectTest.testSingletonLists":234,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":32,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":310,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":396,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":494,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":205,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":49,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":427,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":327,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":251,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":620,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":542,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":596,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":409,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":33,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":62,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":536,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":354,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":487,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":602,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":157,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":353,"com.google.gson.functional.EnumTest.testEnumCaseMapping":593,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":394,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":618,"com.google.gson.functional.JsonTreeTest.testToJsonTree":334,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":486,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":67,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":166,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":187,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":23,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":287,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":29,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":468,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":303,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":496,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":574,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":419,"com.google.gson.functional.ObjectTest.testNullDeserialization":259,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":227,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":406,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":246,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":126,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":623,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":502,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":160,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":223,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":484,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":256,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":622,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":58,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":279,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":330,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":84,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":549,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":548,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":326,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":30,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":118,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":523,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":286,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":553,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":46,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":465,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":308,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":522,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":347,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":385,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":533,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":379,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":300,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":109,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":152,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":195,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":366,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":119,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":390,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":534,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":255,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":460,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":150,"com.google.gson.JsonPrimitiveTest.testEqualsAcrossTypes":169,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":241,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":455,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":176,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":362,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":506,"com.google.gson.metrics.PerformanceTest.testDummy":617,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":215,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":180,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":17,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":193,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":197,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":267,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":368,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":316,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":439,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":190,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":302,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":483,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":230,"com.google.gson.functional.CollectionTest.testSetDeserialization":424,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":61,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":41,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":431,"com.google.gson.functional.EnumTest.testEnumSet":585,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":526,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":18,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":196,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":291,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":342,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":43,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":16,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":162,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":537,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":192,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":543,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":50,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":220,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":122,"com.google.gson.functional.MapTest.testHashMapDeserialization":337,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":499,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":416,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":314,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":456,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":565,"com.google.gson.MixedStreamTest.testReadNulls":612,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":134,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":372,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":107,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":273,"com.google.gson.functional.MapTest.testSortedMap":357,"com.google.gson.functional.MapTest.testMapSerialization":72,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":135,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":435,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":531,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":470,"com.google.gson.functional.MapTest.testSerializeMaps":71,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":97,"com.google.gson.functional.MapTest.testComplexKeysSerialization":363,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":430,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":367,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":106,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":229,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":591,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":583,"com.google.gson.internal.LinkedTreeMapTest.testRemoveRootDoesNotDoubleUnlink":164,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":381,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":270,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":589,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":65,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":165,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":1,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":258,"com.google.gson.functional.MapTest.testStringKeyDeserialization":365,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":473,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":6,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":129,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":75,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":505,"com.google.gson.functional.PrettyPrintingTest.testMap":63,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":443,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":500,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":88,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":136,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":271,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":283,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":31,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":475,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":619,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":399,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":403,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":297,"com.google.gson.functional.MapTest.testMapSerializationEmpty":364,"com.google.gson.functional.CollectionTest.testQueueSerialization":417,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":527,"com.google.gson.functional.MapTest.testMapOfMapSerialization":352,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":521,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":305,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":421,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":115,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":10,"com.google.gson.functional.FieldNamingTest.testIdentity":98,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":397,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":198,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":34,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":260,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":2,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":39,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":333,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":560,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":488,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":141,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":398,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":480,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":113,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":370,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":320,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":605,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":292,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":299,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":329,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":335,"com.google.gson.functional.MapTest.testMapSubclassSerialization":339,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":547,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":81,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":211,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":433,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":143,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":445,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":519,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":595,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":282,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":386,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":557,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":269,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":15,"com.google.gson.functional.EnumTest.testEnumSubclass":587,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":116,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":249,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":621,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":110,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":479,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":539,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":200,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":377,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":490,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":77,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":524,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":371,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":178,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":467,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":604,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":245,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":528,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":112,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":175,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":323,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":235,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":336,"com.google.gson.MixedStreamTest.testWriteNulls":610,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":103,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":388,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":462,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":207,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":228,"com.google.gson.CommentsTest.testParseComments":607,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":40,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":202,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":577,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":100,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":471,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":538,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":434,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":356,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":401,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":156,"com.google.gson.MixedStreamTest.testReadInvalidState":608,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":57,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":22,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":128,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":325,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":436,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":498,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":476,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":448,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":514,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":123,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":306,"com.google.gson.functional.MapTest.testMapDeserialization":345,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":464,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":301,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":68,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":70,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":146,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":570,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":4,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":344,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":576,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":572,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":382,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":56,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":588,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":281,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":47,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":250,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":373,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":446,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":179,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":288,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":209,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":76,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":80,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":64,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":355,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":328,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":485,"com.google.gson.functional.PrimitiveTest.testShortSerialization":127,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":204,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":579,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":541,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":159,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":520,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":120,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":171,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":497,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":94,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":161,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":87,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":383,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":340,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":513,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":130,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":428,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":163,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":317,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":584,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":154,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":616,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":133,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":552,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":26,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":174,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":185,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":199,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":261,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":137,"com.google.gson.JsonPrimitiveTest.testStringsAndChar":167,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":276,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":545,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":188,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":7,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":525,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":264,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":240,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":592,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":375,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":432,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":90,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":289,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":441,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":201,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":569,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":307,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":578,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":504,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":108,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":294,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":580,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":312,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":182,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":414,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":491,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":546,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":114,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":131,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":452,"com.google.gson.JsonPrimitiveTest.testEquals":168,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":575,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":586,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":568,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":437,"com.google.gson.functional.MapTest.testGeneralMapField":73,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":238,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":459,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":555,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":105,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":442,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":481,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":319,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":359,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":277,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":392,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":495,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":121,"com.google.gson.MixedStreamTest.testReadMixedStreamed":615,"com.google.gson.ObjectTypeAdapterTest.testDeserializeNullValue":625,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":290,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":348,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":515,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":425,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":478,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":603,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":214,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":529,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":158,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":191,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":54,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":349,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":412,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":338,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":132,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":203,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":37,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":139,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":516,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":304,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":389,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":35,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":275,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":420,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":582,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":206,"com.google.gson.functional.ObjectTest.testNestedDeserialization":265,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":155,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":253,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":566,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":177,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":224,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":554,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":99,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":172,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":350,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":400,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":14,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":125,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":374,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":387,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":562,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":93,"com.google.gson.functional.ObjectTest.testNullSerialization":247,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":79,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":411,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":341,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":360,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":489,"com.google.gson.stream.JsonWriterTest.testNonFiniteBoxedDoubles":148,"com.google.gson.functional.MapTest.testInterfaceTypeMap":358,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":469,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":444,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":181,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":492,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":25,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":590,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":380,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":447,"com.google.gson.MixedStreamTest.testReadClosed":609,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":278,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":222,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":507,"com.google.gson.MixedStreamTest.testWriteClosed":614,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":418,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":567,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":184,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":239,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":331,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":19,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":3,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":451,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":48,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":449,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":55,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":186,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":242,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":89,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":598,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":532,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":140,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":378,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":422,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":313,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":217,"com.google.gson.stream.JsonWriterTest.testNumbers":149,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":556,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":512,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":332,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":284,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":231,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":457,"com.google.gson.functional.CollectionTest.testQueueDeserialization":429,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":450,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":518,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":530,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":405,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":563,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":324,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":599,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":257,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":346,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":296,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":85,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":263,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":413,"com.google.gson.functional.MapTest.testRawMapSerialization":74,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":142,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":426,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":311,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":27,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":44,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":78,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":440,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":581,"com.google.gson.functional.PrimitiveTest.testByteSerialization":124,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":268,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":461,"com.google.gson.ObjectTypeAdapterTest.testSerialize":151,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":232,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":83,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":503,"com.google.gson.JsonPrimitiveTest.testEqualsIntegerAndBigInteger":145,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":559,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":104,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":95,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":20,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":402,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":601,"com.google.gson.functional.MapTest.testMapWithQuotes":351,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":52,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":510,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":404,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":194,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":477,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":11,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":36,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":550,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":51,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":59,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":573,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":12,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":262,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":69,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":117,"com.google.gson.functional.ObjectTest.testEmptyStringDeserialization":248,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":293,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":244,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":474,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":321,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":285,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":138,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":295,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":561,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":544,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":274,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":423,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":463,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":13,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":101,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":322,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":376,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":218,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":600,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":82,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":272,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":210,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":493,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":9,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":24,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":252,"com.google.gson.functional.ObjectTest.testNestedSerialization":45,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":453,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":111,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":391,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":408,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":225,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":361,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":438,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":5,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":613,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":624,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":42,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":216,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":551,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":183,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":213,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":298,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":147,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":508,"com.google.gson.GsonBuilderTest.testCreatingMoreThanOnce":606,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":254,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":280,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":597,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":28,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":407,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":466,"com.google.gson.functional.CollectionTest.testSetSerialization":92,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":482,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":8,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":66,"com.google.gson.functional.StringTest.testStringValueSerialization":410,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":38,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":173,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":415,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":458,"com.google.gson.MixedStreamTest.testWriteInvalidState":611,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":243,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":511,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":472,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":517,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":454,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":53,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":96,"com.google.gson.ObjectTypeAdapterTest.testDeserialize":626,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":226,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":170,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":219,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":153,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":221,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":21,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":315,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":233,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":343,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":102,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":189},"transformations":[{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154],"tindex":"412a2137-3e4e-11e6-bfd8-2bc7baee58be","method":{"position":"com.google.gson.stream.JsonWriter:490","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467241198751/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                {\n                    if (value == null) {\n                        return nullValue();\n                    } \n                    writeDeferredName();\n                    java.lang.String java.lang.String = value.toString();\n                    if ((!(boolean)) && (((string.equals(\"-Infinity\")) || (string.equals(\"Infinity\"))) || (string.equals(\"NaN\")))) {\n                        throw new java.lang.IllegalArgumentException((\"Numeric values must be finite, but was \" + value));\n                    } \n                    beforeValue(false);\n                    java.io.Writer.append(string);\n                    return com.google.gson.stream.JsonWriter.this;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467241198751/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"412a6f58-3e4e-11e6-bfd8-93d308f4adc6","method":{"position":"com.google.gson.Gson:510","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467241198751/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src == null) {\n                return toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull);\n            } \n            return toJson(src, src.getClass());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:452","type":"CtBinaryOperatorImpl","sourcecode":"typeAdapter instanceof com.google.gson.InstanceCreator<?>"},"failures":[11,33,155,156,157,158,159,160,161,162],"tindex":"412a6f59-3e4e-11e6-bfd8-5756649892f3","method":{"position":"com.google.gson.TreeTypeAdapter:103","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newTypeHierarchyFactory(java.lang.Class<?> hierarchyType, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof com.google.gson.InstanceCreator<?>) {\n        {\n            return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , null , false , hierarchyType);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467241198751/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:85","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[],"tindex":"412a966a-3e4e-11e6-bfd8-2f132df71054","method":{"position":"com.google.gson.internal.$Gson$Types:411","type":"CtMethodImpl","sourcecode":"private static int indexOf(java.lang.Object[] array, java.lang.Object toFind) {\n    for (int int = 0 ; i < (array.int) ; i++) {\n        if (toFind.equals(array[i])) {\n            return i;\n        } \n    }\n    throw new java.util.NoSuchElementException();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"toFind"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:103","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"412a966b-3e4e-11e6-bfd8-7bee302f33ed","method":{"position":"com.google.gson.internal.$Gson$Types:217","type":"CtMethodImpl","sourcecode":"public static java.lang.String typeToString(java.lang.reflect.Type type) {\n    return type instanceof java.lang.Class ? ((java.lang.Class<?>)(type)).getName() : type.toString();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:92","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof java.util.Iterator"},"failures":[],"tindex":"412a966c-3e4e-11e6-bfd8-d71519efdea1","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:808","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonNull) {\n        {\n            if (o instanceof java.util.Iterator) {\n                {\n                    if (!(o instanceof java.util.Map.Entry)) {\n                        return false;\n                    } \n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n                    if (node == null) {\n                        return false;\n                    } \n                    removeInternal(node, true);\n                    return true;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467241198751/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467241198751/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:199","type":"CtUnaryOperatorImpl","sourcecode":"!(b instanceof java.lang.reflect.TypeVariable)"},"failures":[],"tindex":"412abd7d-3e4e-11e6-bfd8-4fa96b1d495c","method":{"position":"com.google.gson.internal.$Gson$Types:158","type":"CtMethodImpl","sourcecode":"public static boolean equals(java.lang.reflect.Type a, java.lang.reflect.Type b) {\n    if (a == b) {\n        return true;\n    } else if (a instanceof java.lang.Class) {\n        return a.equals(b);\n    } else if (a instanceof java.lang.reflect.ParameterizedType) {\n        if (!(b instanceof java.lang.reflect.ParameterizedType)) {\n            return false;\n        } \n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(a));\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(b));\n        return ((com.google.gson.internal.$Gson$Types.equal(pa.getOwnerType(), pb.getOwnerType())) && (pa.getRawType().equals(pb.getRawType()))) && (java.util.Arrays.equals(pa.getActualTypeArguments(), pb.getActualTypeArguments()));\n    } else if (a instanceof java.lang.reflect.GenericArrayType) {\n        if (!(b instanceof java.lang.reflect.GenericArrayType)) {\n            return false;\n        } \n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(a));\n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(b));\n        return com.google.gson.internal.$Gson$Types.equals(ga.getGenericComponentType(), gb.getGenericComponentType());\n    } else if (a instanceof java.lang.reflect.WildcardType) {\n        if (!(b instanceof java.lang.reflect.WildcardType)) {\n            return false;\n        } \n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(a));\n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(b));\n        return (java.util.Arrays.equals(wa.getUpperBounds(), wb.getUpperBounds())) && (java.util.Arrays.equals(wa.getLowerBounds(), wb.getLowerBounds()));\n    } else if (a instanceof java.lang.reflect.TypeVariable) {\n        if (!(b instanceof java.lang.reflect.TypeVariable)) {\n            return false;\n        } \n        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(a));\n        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(b));\n        return ((va.getGenericDeclaration()) == (vb.getGenericDeclaration())) && (va.getName().equals(vb.getName()));\n    } else {\n        return false;\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:132","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"412abd7e-3e4e-11e6-bfd8-e719cce3ef08","method":{"position":"com.google.gson.internal.$Gson$Types:431","type":"CtMethodImpl","sourcecode":"private static void checkNotPrimitive(java.lang.reflect.Type type) {\n    com.google.gson.internal.$Gson$Preconditions.checkArgument(((!(type instanceof java.lang.Class<?>)) || (!(((java.lang.Class<?>)(type)).isPrimitive()))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:218","type":"CtVariableReadImpl","sourcecode":"unlink"},"failures":[163,164,165],"tindex":"412ae48f-3e4e-11e6-bfd8-3504f5d12a1c","method":{"position":"com.google.gson.internal.LinkedTreeMap:217","type":"CtMethodImpl","sourcecode":"void removeInternal(com.google.gson.internal.LinkedTreeMap.Node<K, V> node, boolean unlink) {\n    if (unlink) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467241198751/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (unlink) {\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            if ((left != null) && (right != null)) {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = (left.int) > (right.int) ? left.last() : right.first();\n                removeInternal(adjacent, false);\n                int int = 0;\n                left = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                if (left != null) {\n                    leftHeight = left.int;\n                    adjacent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = left;\n                    left.com.google.gson.internal.LinkedTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                } \n                int int = 0;\n                right = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                if (right != null) {\n                    rightHeight = right.int;\n                    adjacent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = right;\n                    right.com.google.gson.internal.LinkedTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                } \n                adjacent.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                replaceInParent(node, adjacent);\n                return ;\n            } else if (left != null) {\n                replaceInParent(node, left);\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n            } else if (right != null) {\n                replaceInParent(node, right);\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n            } else {\n                replaceInParent(node, null);\n            }\n            rebalance(originalParent, false);\n            (int)--;\n            (int)++;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"unlink":"unlink"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[],"tindex":"412b0ba0-3e4e-11e6-bfd8-4b7790f27384","method":{"position":"com.google.gson.Gson:576","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        {\n            if (src != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467241198751/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            } else {\n                {\n                    try {\n                        com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                        toJson(src, typeOfSrc, jsonWriter);\n                    } catch (java.io.IOException e) {\n                        throw new com.google.gson.JsonIOException(e);\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467241198751/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:94","type":"CtBinaryOperatorImpl","sourcecode":"primitive instanceof java.lang.Character"},"failures":[52,166,167,168,169,170],"tindex":"412b0ba1-3e4e-11e6-bfd8-e7cf019e56e4","method":{"position":"com.google.gson.JsonPrimitive:93","type":"CtMethodImpl","sourcecode":"void setValue(java.lang.Object primitive) {\n    if (primitive instanceof java.lang.Character) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467241198751/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (primitive instanceof java.lang.Character) {\n                char char = ((java.lang.Character)(primitive)).charValue();\n                com.google.gson.JsonPrimitive.this.java.lang.Object = java.lang.String.valueOf(c);\n            } else {\n                com.google.gson.internal.$Gson$Preconditions.checkArgument(((primitive instanceof java.lang.Number) || (com.google.gson.JsonPrimitive.isPrimitiveOrString(primitive))));\n                com.google.gson.JsonPrimitive.this.java.lang.Object = primitive;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"primitive"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"412b32b2-3e4e-11e6-bfd8-a56fd03304b2","method":{"position":"com.google.gson.Gson:719","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.lang.String json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467241198751/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (json == null) {\n                return null;\n            } \n            java.io.StringReader java.io.StringReader = new java.io.StringReader(json);\n            T T = ((T)(fromJson(reader, typeOfT)));\n            return target;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:120","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonNull"},"failures":[],"tindex":"412b32b3-3e4e-11e6-bfd8-cde00f6d7825","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:808","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonNull) {\n        {\n            if (o instanceof java.util.Iterator) {\n                {\n                    if (!(o instanceof java.util.Map.Entry)) {\n                        return false;\n                    } \n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n                    if (node == null) {\n                        return false;\n                    } \n                    removeInternal(node, true);\n                    return true;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467241198751/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467241198751/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[171],"tindex":"412b32b4-3e4e-11e6-bfd8-79ffb5500ce6","method":{"position":"com.google.gson.internal.bind.TypeAdapters:201","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467241198751/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:340","type":"CtBinaryOperatorImpl","sourcecode":"toResolve instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"412b32b5-3e4e-11e6-bfd8-6d3c69224000","method":{"position":"com.google.gson.internal.$Gson$Types:322","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type resolve(java.lang.reflect.Type context, java.lang.Class<?> contextRawType, java.lang.reflect.Type toResolve) {\n    while (true) {\n        if (toResolve instanceof java.lang.reflect.TypeVariable) {\n            java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(toResolve));\n            toResolve = com.google.gson.internal.$Gson$Types.resolveTypeVariable(context, contextRawType, typeVariable);\n            if (toResolve == typeVariable) {\n                return toResolve;\n            } \n        } else if ((toResolve instanceof java.lang.Class) && (((java.lang.Class<?>)(toResolve)).isArray())) {\n            java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getComponentType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, componentType);\n            return componentType == newComponentType ? original : com.google.gson.internal.$Gson$Types.arrayOf(newComponentType);\n        } else if (toResolve instanceof java.lang.reflect.GenericArrayType) {\n            java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getGenericComponentType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, componentType);\n            return componentType == newComponentType ? original : com.google.gson.internal.$Gson$Types.arrayOf(newComponentType);\n        } else if (toResolve instanceof java.lang.reflect.ParameterizedType) {\n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getOwnerType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, ownerType);\n            boolean boolean = newOwnerType != ownerType;\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getActualTypeArguments();\n            for (int int = 0, int int = args.int ; t < length ; t++) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, args[t]);\n                if (resolvedTypeArgument != (args[t])) {\n                    if (!changed) {\n                        args = args.clone();\n                        changed = true;\n                    } \n                    args[t] = resolvedTypeArgument;\n                } \n            }\n            return changed ? com.google.gson.internal.$Gson$Types.newParameterizedTypeWithOwner(newOwnerType, original.getRawType(), args) : original;\n        } else if (toResolve instanceof java.lang.reflect.WildcardType) {\n            java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(toResolve));\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getLowerBounds();\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getUpperBounds();\n            if ((originalLowerBound.int) == 1) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, originalLowerBound[0]);\n                if (lowerBound != (originalLowerBound[0])) {\n                    return com.google.gson.internal.$Gson$Types.supertypeOf(lowerBound);\n                } \n            } else if ((originalUpperBound.int) == 1) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, originalUpperBound[0]);\n                if (upperBound != (originalUpperBound[0])) {\n                    return com.google.gson.internal.$Gson$Types.subtypeOf(upperBound);\n                } \n            } \n            return original;\n        } else {\n            return toResolve;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"toResolve"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:250","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[0,172,1,173,174,175,2,176,177,178,179,180,3,181,182,183,184,185,4,186,187,5,188,189,190,191,192,193,194,195,196,197,198,199,200,6,7,201,8,202,203,204,9,205,10,11,206,12,207,13,14,15,16,17,18,208,19,20,21,209,22,210,211,23,212,213,214,32,215,33,155,156,216,34,35,217,218,219,220,221,222,223,224,157,158,159,225,37,226,227,228,229,230,231,38,232,233,39,234,235,236,40,237,238,239,240,241,242,243,244,245,41,246,247,42,248,249,250,251,160,43,252,44,45,253,254,255,256,257,258,259,46,260,47,261,262,48,263,264,265,266,267,268,269,49,270,271,272,273,274,50,275,276,277,278,279,280,281,51,282,283,52,284,285,286,287,288,289,290,53,291,171,292,293,294,295,296,297,298,299,300,301,302,303,304,305,54,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,55,326,327,328,329,166,330,331,332,56,333,334,57,58,59,60,61,62,63,64,65,66,67,68,69,335,70,336,337,338,339,71,340,341,342,343,344,345,346,347,348,349,350,351,352,72,353,354,355,356,357,358,359,360,73,361,74,362,363,364,365,366,367,368,75,369,76,370,371,77,372,78,373,374,375,376,79,377,378,379,380,80,381,382,383,81,82,384,385,386,163,387,388,389,390,83,391,392,84,85,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,86,413,87,88,414,415,416,417,89,418,419,90,420,421,422,423,424,91,425,426,92,93,427,428,429,430,431,432,433,94,95,96,97,98,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,99,100,450,451,452,453,454,455,456,457,101,458,459,460,461,462,102,463,464,465,466,103,467,468,469,104,470,105,471,472,473,474,475,106,476,107,477,478,108,109,479,480,481,482,483,484,485,486,487,110,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,111,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,112,523,524,525,113,114,526,527,528,115,529,530,531,532,533,534,535,536,116,537,117,538,118,119,539,540,120,541,542,121,543,122,544,545,546,123,124,125,126,127,128,547,548,549,550,129,551,130,552,553,554,131,132,555,133,556,557,558,559,560,561,562,134,563,564,135,565,566,136,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,161,587,588,589,590,591,592,593,594,595,137,596,597,138,139,598,599,140,600,601,162,602,141,603,604,605,606,607,142,608,609,143,610,611,144,612,613,614,615,616,617,618,147,150,619,620,621,622,623,624],"tindex":"412b59c6-3e4e-11e6-bfd8-a59f812434be","method":{"position":"com.google.gson.Gson:249","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> doubleAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return in.nextDouble();\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    double double = value.doubleValue();\n                    checkValidFloatingPoint(doubleValue);\n                    out.value(value);\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467241198751/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"412b80d7-3e4e-11e6-bfd8-573fdd77b440","method":{"position":"com.google.gson.Gson:576","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        {\n            if (src != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467241198751/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            } else {\n                {\n                    try {\n                        com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                        toJson(src, typeOfSrc, jsonWriter);\n                    } catch (java.io.IOException e) {\n                        throw new com.google.gson.JsonIOException(e);\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467241198751/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:164","type":"CtBinaryOperatorImpl","sourcecode":"from instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"412b80d8-3e4e-11e6-bfd8-e73cc62e1d6d","method":{"position":"com.google.gson.reflect.TypeToken:160","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.GenericArrayType to) {\n    if (from instanceof java.lang.reflect.GenericArrayType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467241198751/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.reflect.Type java.lang.reflect.Type = to.getGenericComponentType();\n            if (toGenericComponentType instanceof java.lang.reflect.ParameterizedType) {\n                java.lang.reflect.Type java.lang.reflect.Type = from;\n                if (from instanceof java.lang.reflect.GenericArrayType) {\n                    t = ((java.lang.reflect.GenericArrayType)(from)).getGenericComponentType();\n                } else if (from instanceof java.lang.Class<?>) {\n                    java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(from));\n                    while (classType.isArray()) {\n                        classType = classType.getComponentType();\n                    }\n                    t = classType;\n                } \n                return com.google.gson.reflect.TypeToken.isAssignableFrom(t, ((java.lang.reflect.ParameterizedType)(toGenericComponentType)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n            } \n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:298","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[489,506,514,521,523,547,144],"tindex":"412ba7e9-3e4e-11e6-bfd8-6b9e6762c6e1","method":{"position":"com.google.gson.Gson:297","type":"CtMethodImpl","sourcecode":"private void checkValidFloatingPoint(double value) {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467241198751/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                throw new java.lang.IllegalArgumentException(((value + \" is not a valid double value as per JSON specification. To override this\") + \" behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.\"));\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[],"tindex":"412ba7ea-3e4e-11e6-bfd8-51a759dcf8d4","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:116","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<?> getFieldAdapter(com.google.gson.Gson gson, java.lang.reflect.Field field, com.google.gson.reflect.TypeToken<?> fieldType) {\n    if (field.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467241198751/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.annotations.JsonAdapter com.google.gson.annotations.JsonAdapter = field.getAnnotation(com.google.gson.annotations.JsonAdapter.com.google.gson.annotations.JsonAdapter.java.lang.Class);\n            if (annotation != null) {\n                com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory.getTypeAdapter(com.google.gson.internal.ConstructorConstructor, gson, fieldType, annotation);\n                if (adapter != null)\n                    return adapter;\n                \n            } \n            return gson.getAdapter(fieldType);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"field"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[171],"tindex":"412ba7eb-3e4e-11e6-bfd8-0fd18bbc4144","method":{"position":"com.google.gson.internal.bind.TypeAdapters:223","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467241198751/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"412ba7ec-3e4e-11e6-bfd8-ad3932b52527","method":{"position":"com.google.gson.stream.JsonWriter:490","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467241198751/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                {\n                    if (value == null) {\n                        return nullValue();\n                    } \n                    writeDeferredName();\n                    java.lang.String java.lang.String = value.toString();\n                    if ((!(boolean)) && (((string.equals(\"-Infinity\")) || (string.equals(\"Infinity\"))) || (string.equals(\"NaN\")))) {\n                        throw new java.lang.IllegalArgumentException((\"Numeric values must be finite, but was \" + value));\n                    } \n                    beforeValue(false);\n                    java.io.Writer.append(string);\n                    return com.google.gson.stream.JsonWriter.this;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467241198751/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[122,618],"tindex":"412bcefd-3e4e-11e6-bfd8-f500b33547e7","method":{"position":"com.google.gson.Gson:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            out.value(value.toString());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467241198751/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[625,626],"tindex":"412bcefe-3e4e-11e6-bfd8-c53a1967d47b","method":{"position":"com.google.gson.TypeAdapter:268","type":"CtMethodImpl","sourcecode":"public final T fromJson(java.lang.String json) throws java.io.IOException {\n    if (json == null) {\n        {\n            return fromJson(new java.io.StringReader(json));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467241198751/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:547","type":"CtBinaryOperatorImpl","sourcecode":"c == '\\u2029'"},"failures":[],"tindex":"412bceff-3e4e-11e6-bfd8-05177d440cfd","method":{"position":"com.google.gson.stream.JsonReader:755","type":"CtMethodImpl","sourcecode":"private boolean isLiteral(char c) throws java.io.IOException {\n    if (c == '\\u2029') {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467241198751/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            switch (c) {\n                case '/' :\n                case '\\\\' :\n                case ';' :\n                case '#' :\n                case '=' :\n                    checkLenient();\n                case '{' :\n                case '}' :\n                case '[' :\n                case ']' :\n                case ':' :\n                case ',' :\n                case ' ' :\n                case '\\t' :\n                case '\\f' :\n                case '\\r' :\n                case '\\n' :\n                    return false;\n                default :\n                    return true;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"c"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:107","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonArray"},"failures":[],"tindex":"412bcf00-3e4e-11e6-bfd8-89812ccad9af","method":{"position":"com.google.gson.internal.LinkedTreeMap:605","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonArray) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467241198751/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return containsKey(o);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":26,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
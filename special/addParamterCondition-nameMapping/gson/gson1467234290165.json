{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":358,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":200,"com.google.gson.functional.StringTest.testStringValueDeserialization":545,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":27,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":521,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":430,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":494,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":34,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":480,"com.google.gson.MixedStreamTest.testWriteLenient":352,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":554,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":458,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":112,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":337,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":278,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":288,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":457,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":526,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":260,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":266,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":83,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":501,"com.google.gson.JsonObjectTest.testAddingNullPropertyValue":627,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":567,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":575,"com.google.gson.functional.ObjectTest.testSingletonLists":144,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":108,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":267,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":201,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":489,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":453,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":123,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":603,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":437,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":468,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":320,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":528,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":582,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":553,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":303,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":216,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":522,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":381,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":316,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":483,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":238,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":380,"com.google.gson.functional.EnumTest.testEnumCaseMapping":259,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":2,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":199,"com.google.gson.functional.JsonTreeTest.testToJsonTree":325,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":482,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":221,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":438,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":331,"com.google.gson.JsonObjectTest.testEqualsNonEmptyObject":628,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":92,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":344,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":408,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":428,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":490,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":226,"com.google.gson.internal.LinkedTreeMapTest.testLargeSetOfRandomKeys":636,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":285,"com.google.gson.functional.ObjectTest.testNullDeserialization":474,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":125,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":551,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":465,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":187,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":356,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":495,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":151,"com.google.gson.internal.LinkedTreeMapTest.testContainsNonComparableKeyReturnsFalse":637,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":236,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":309,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":471,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":355,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":81,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":121,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":416,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":275,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":534,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":533,"com.google.gson.JsonParserTest.testParseString":624,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":436,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":179,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":173,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":421,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":538,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":62,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":157,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":107,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":509,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":376,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":519,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":555,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":46,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":427,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":198,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":447,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":25,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":180,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":561,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":520,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":58,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":156,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":301,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":313,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":461,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":38,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":165,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":383,"com.google.gson.metrics.PerformanceTest.testDummy":361,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":589,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":50,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":247,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":594,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":448,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":386,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":440,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":111,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":366,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":102,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":591,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":308,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":446,"com.google.gson.functional.CollectionTest.testSetDeserialization":601,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":84,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":148,"com.google.gson.functional.EnumTest.testEnumSet":253,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":392,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":512,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":248,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":130,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":9,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":424,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":152,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":246,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":315,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":523,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":593,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":529,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":233,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":335,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":183,"com.google.gson.functional.MapTest.testHashMapDeserialization":370,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":492,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":597,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":433,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":302,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":387,"com.google.gson.MixedStreamTest.testReadNulls":609,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":28,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":39,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":196,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":444,"com.google.gson.functional.MapTest.testSortedMap":382,"com.google.gson.functional.MapTest.testMapSerialization":14,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":30,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":364,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":517,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":410,"com.google.gson.functional.MapTest.testSerializeMaps":8,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":73,"com.google.gson.functional.MapTest.testComplexKeysSerialization":23,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":391,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":357,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":385,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":69,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":127,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":581,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":232,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":400,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":334,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":580,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":219,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":629,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":35,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":473,"com.google.gson.functional.MapTest.testStringKeyDeserialization":384,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":412,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":132,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":191,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":26,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":498,"com.google.gson.functional.PrettyPrintingTest.testMap":217,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":295,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":493,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":281,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":31,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":89,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":442,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":319,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":413,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":205,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":546,"com.google.gson.functional.MapTest.testMapSerializationEmpty":24,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":99,"com.google.gson.functional.CollectionTest.testQueueSerialization":282,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":630,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":513,"com.google.gson.functional.MapTest.testMapOfMapSerialization":13,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":171,"com.google.gson.JavaSerializationTest.testMapIsSerializable":620,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":429,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":599,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":79,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":176,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":138,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictBoxedNansAndInfinities":359,"com.google.gson.functional.FieldNamingTest.testIdentity":74,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":202,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":449,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":209,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":475,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":37,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":143,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":324,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":339,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":484,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":317,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":203,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":306,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":174,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":454,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":435,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":1,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":425,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":78,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":100,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":333,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":368,"com.google.gson.functional.MapTest.testMapSubclassSerialization":7,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":190,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":311,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":578,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":393,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":261,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":297,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":349,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":507,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":419,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":542,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":556,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":441,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":245,"com.google.gson.functional.EnumTest.testEnumSubclass":256,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":177,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":321,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":467,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":161,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":305,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":525,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":131,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":397,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":485,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":142,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":510,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":455,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":327,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":0,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":407,"com.google.gson.internal.LinkedTreeMapTest.testEqualsAndHashCode":639,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":464,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":514,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":172,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":396,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":116,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":456,"com.google.gson.MixedStreamTest.testWriteNulls":350,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":369,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":64,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":559,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":60,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":126,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":574,"com.google.gson.CommentsTest.testParseComments":613,"com.google.gson.JsonObjectTest.testReadPropertyWithEmptyStringName":625,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":135,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":145,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":569,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":215,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":411,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":524,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":363,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":16,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":204,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":605,"com.google.gson.MixedStreamTest.testReadInvalidState":607,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":80,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":252,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":118,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":189,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":4,"com.google.gson.ObjectTypeAdapterTest.testSerializeObject":614,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":164,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":414,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":212,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":168,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":77,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":105,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":184,"com.google.gson.functional.MapTest.testMapDeserialization":375,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":406,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":101,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":222,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":6,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":566,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":10,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":53,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":228,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":225,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":401,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeMap":622,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":49,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":579,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":418,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":150,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":158,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":41,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":298,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":328,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":93,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":576,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":47,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":141,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":15,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":218,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":346,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":120,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":481,"com.google.gson.functional.PrimitiveTest.testShortSerialization":188,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":452,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":230,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":527,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":240,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":508,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":181,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":332,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":491,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":70,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":255,"com.google.gson.internal.LinkedTreeMapTest.testEmptyStringValues":638,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":280,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":310,"com.google.gson.internal.LinkedTreeMapTest.testPutOverrides":635,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":372,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":504,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":192,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":292,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":557,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":434,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":572,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":611,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":617,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":195,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":537,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":36,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":159,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":403,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":450,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":85,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":262,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":618,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":531,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":562,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":133,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":511,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":478,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":460,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":258,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":33,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":43,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":286,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":422,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":293,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":451,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":224,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":106,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":229,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":497,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":96,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":197,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":231,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":432,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":329,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":595,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":486,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":532,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":175,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":193,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":270,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":227,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":254,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":390,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":365,"com.google.gson.functional.MapTest.testGeneralMapField":20,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":459,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":57,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":540,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":66,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":294,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":307,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":113,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":18,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":86,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":163,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":274,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":182,"com.google.gson.MixedStreamTest.testReadMixedStreamed":610,"com.google.gson.ObjectTypeAdapterTest.testDeserializeNullValue":633,"com.google.gson.JsonObjectTest.testDeepCopy":631,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":169,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":377,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":423,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":289,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":318,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":544,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":588,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":515,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":239,"com.google.gson.JavaSerializationTest.testNumberIsSerializable":619,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":592,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":104,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":378,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":241,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":371,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":136,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":194,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":269,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":264,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":505,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":103,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":560,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":210,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":415,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":598,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":571,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":140,"com.google.gson.functional.ObjectTest.testNestedDeserialization":479,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":155,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":304,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":388,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":326,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":237,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":539,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":214,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":379,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":394,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":547,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":244,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":186,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":42,"com.google.gson.JavaSerializationTest.testListIsSerializable":621,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":341,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":558,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":291,"com.google.gson.functional.ObjectTest.testNullSerialization":336,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":45,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":573,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":373,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":19,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":162,"com.google.gson.functional.MapTest.testInterfaceTypeMap":17,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":409,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":296,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":52,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":487,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":257,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":277,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":299,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":399,"com.google.gson.MixedStreamTest.testReadClosed":608,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":87,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":235,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":499,"com.google.gson.MixedStreamTest.testWriteClosed":354,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":284,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":389,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":146,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":402,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":439,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":249,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":51,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":343,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":160,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":213,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":119,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":54,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":147,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":283,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":584,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":518,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":265,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":398,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":287,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":109,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":564,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":75,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":541,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":167,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":323,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":420,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":55,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":128,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":342,"com.google.gson.functional.CollectionTest.testQueueDeserialization":604,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":170,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":516,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":550,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":29,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":117,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":585,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":11,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":472,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":98,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":276,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":477,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":279,"com.google.gson.functional.MapTest.testRawMapSerialization":22,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":348,"com.google.gson.JsonParserTest.testParseReader":623,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":602,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":431,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":40,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":153,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":367,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":570,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":345,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":59,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":122,"com.google.gson.functional.PrimitiveTest.testByteSerialization":185,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":347,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":360,"com.google.gson.ObjectTypeAdapterTest.testSerialize":615,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":272,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":496,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":338,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":65,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":71,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":250,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":548,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":612,"com.google.gson.functional.MapTest.testMapWithQuotes":12,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":90,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":502,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":549,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":129,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":543,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":139,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":48,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":535,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":88,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":82,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":568,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":242,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":476,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":223,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":95,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":178,"com.google.gson.functional.ObjectTest.testEmptyStringDeserialization":466,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":68,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":463,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":114,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":91,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":97,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":263,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":340,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":530,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":445,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":600,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":405,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":56,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":115,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":243,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":44,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":211,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":586,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":312,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":443,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":488,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":577,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":137,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":469,"com.google.gson.functional.ObjectTest.testNestedSerialization":154,"com.google.gson.JsonObjectTest.testAddingStringProperties":632,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":271,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":166,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":273,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":552,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":268,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":21,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":5,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":208,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":314,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":353,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":149,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":563,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":536,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":330,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":587,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":426,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":3,"com.google.gson.GsonBuilderTest.testCreatingMoreThanOnce":362,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":500,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":417,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":470,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":583,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":206,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":63,"com.google.gson.functional.CollectionTest.testSetSerialization":290,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":606,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":134,"com.google.gson.functional.StringTest.testStringValueSerialization":207,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":220,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":32,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":76,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":395,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":596,"com.google.gson.MixedStreamTest.testWriteInvalidState":351,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":404,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":462,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":503,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":67,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":506,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":300,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":94,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":72,"com.google.gson.ObjectTypeAdapterTest.testDeserialize":634,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":124,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":626,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":565,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":234,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":616,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":251,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":110,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":322,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":374,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":61,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":590},"transformations":[{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"1e30cb16-3e3d-11e6-9075-8d30ddba341a","method":{"position":"com.google.gson.JsonParser:44","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement parse(java.lang.String json) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233795833/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            return parse(new java.io.StringReader(json));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321],"tindex":"1e311937-3e3d-11e6-9075-6bf8aa4ba456","method":{"position":"com.google.gson.Gson:532","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        {\n            java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n            toJson(src, typeOfSrc, writer);\n            return writer.toString();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233795833/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:430","type":"CtFieldReadImpl","sourcecode":"serializeNulls"},"failures":[0,1,2,3,4,5,6,7,8,9,10,12,13,14,15,16,17,18,19,20,22,23,24,25,26,27,29,30,32,322,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,323,49,324,325,326,327,328,50,51,52,329,330,53,54,331,55,56,57,58,59,60,61,62,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,332,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,333,121,122,123,334,335,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,336,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,337,338,339,340,341,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,342,343,216,217,218,219,220,221,222,223,225,226,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,344,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,345,346,347,314,348,349,350,351,352,353,354,315,316,317,318,319,320,321,355,356,357],"tindex":"1e314048-3e3d-11e6-9075-1b1ac8fb23cb","method":{"position":"com.google.gson.stream.JsonWriter:268","type":"CtMethodImpl","sourcecode":"public final void setSerializeNulls(boolean serializeNulls) {\n    if (serializeNulls) {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = serializeNulls;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233795833/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeNulls":"serializeNulls"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[358,323,49,324,325,196,197,198,343,243,303,359],"tindex":"1e316759-3e3d-11e6-9075-154444d89a27","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:175","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            if (!(isLenient())) {\n                double double = value.doubleValue();\n                if ((java.lang.Double.isNaN(d)) || (java.lang.Double.isInfinite(d))) {\n                    throw new java.lang.IllegalArgumentException((\"JSON forbids NaN and infinities: \" + value));\n                } \n            } \n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233795833/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"1e31675a-3e3d-11e6-9075-7fb514aee567","method":{"position":"com.google.gson.DefaultDateTypeAdapter:77","type":"CtMethodImpl","sourcecode":"public java.util.Date deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT, com.google.gson.JsonDeserializationContext context) throws com.google.gson.JsonParseException {\n    if (json == null) {\n        {\n            if (!(json instanceof com.google.gson.JsonPrimitive)) {\n                throw new com.google.gson.JsonParseException(\"The date should be a string value\");\n            } \n            java.util.Date java.util.Date = deserializeToDate(json);\n            if (typeOfT == (java.util.Date.java.util.Date.java.lang.Class)) {\n                return date;\n            } else if (typeOfT == (java.sql.Timestamp.java.sql.Timestamp.java.lang.Class)) {\n                return new java.sql.Timestamp(date.getTime());\n            } else if (typeOfT == (java.sql.Date.java.sql.Date.java.lang.Class)) {\n                return new java.sql.Date(date.getTime());\n            } else {\n                throw new java.lang.IllegalArgumentException((((getClass()) + \" cannot deserialize to \") + typeOfT));\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233795833/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[],"tindex":"1e318e6b-3e3d-11e6-9075-bfa5bdfb1208","method":{"position":"com.google.gson.Gson:591","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    if (src != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233795833/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = getAdapter(com.google.gson.reflect.TypeToken.get(typeOfSrc));\n            boolean boolean = writer.isLenient();\n            writer.setLenient(true);\n            boolean boolean = writer.isHtmlSafe();\n            writer.setHtmlSafe(boolean);\n            boolean boolean = writer.getSerializeNulls();\n            writer.setSerializeNulls(boolean);\n            try {\n                ((com.google.gson.TypeAdapter<java.lang.Object>)(adapter)).write(writer, src);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            } finally {\n                writer.setLenient(oldLenient);\n                writer.setHtmlSafe(oldHtmlSafe);\n                writer.setSerializeNulls(oldSerializeNulls);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[360,322],"tindex":"1e318e6c-3e3d-11e6-9075-45ccd9408cb2","method":{"position":"com.google.gson.JsonObject:121","type":"CtMethodImpl","sourcecode":"private com.google.gson.JsonElement createJsonElement(java.lang.Object value) {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233795833/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return value == null ? com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull : new com.google.gson.JsonPrimitive(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.FieldNamingPolicy:155","type":"CtUnaryOperatorImpl","sourcecode":"!(java.lang.Character.isUpperCase(firstCharacter))"},"failures":[],"tindex":"1e31b57d-3e3d-11e6-9075-53d394663c3a","method":{"position":"com.google.gson.FieldNamingPolicy:163","type":"CtMethodImpl","sourcecode":"private static java.lang.String modifyString(char firstCharacter, java.lang.String srcString, int indexOfSubstring) {\n    if (!(java.lang.Character.isUpperCase(firstCharacter))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233795833/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return indexOfSubstring < (srcString.length()) ? firstCharacter + (srcString.substring(indexOfSubstring)) : java.lang.String.valueOf(firstCharacter);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"firstCharacter":"firstCharacter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:274","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[361,0,1,362,2,3,363,364,4,365,5,366,367,368,6,369,370,371,7,8,372,373,9,374,10,375,11,376,377,378,379,12,13,14,380,381,15,16,382,17,18,19,20,21,22,383,23,24,384,25,385,386,26,27,28,29,358,30,387,388,31,389,390,32,360,322,391,392,33,393,34,394,35,395,36,396,37,38,39,40,41,42,43,44,45,397,398,46,399,47,400,401,323,49,324,325,326,327,328,50,51,52,329,330,402,403,53,54,331,55,56,404,57,58,59,60,61,405,406,62,63,64,407,408,409,65,410,66,411,67,412,68,413,69,414,70,71,72,73,74,80,81,82,83,84,415,85,86,87,416,417,418,88,419,89,90,420,91,421,92,93,422,423,94,424,332,425,95,96,97,98,99,426,100,427,101,102,428,103,429,104,105,106,107,430,108,431,432,109,433,110,111,434,112,113,435,114,115,116,117,118,119,436,437,120,333,438,121,439,440,122,441,123,334,442,443,444,445,335,124,125,126,127,446,128,129,447,130,448,449,450,131,132,133,451,134,135,136,452,137,453,138,139,140,141,454,455,142,143,144,456,457,145,458,459,146,460,461,147,462,463,464,148,465,336,149,466,467,150,468,151,152,469,153,154,155,470,156,471,472,473,474,157,475,158,159,476,160,477,478,479,480,481,482,483,161,484,162,485,486,487,488,489,163,490,491,164,492,493,494,495,496,497,498,165,166,499,500,501,502,503,167,504,168,169,505,506,170,507,508,171,509,172,173,510,511,174,175,512,513,514,176,515,516,517,518,519,520,521,522,177,523,178,524,179,180,525,526,181,527,528,182,529,183,530,531,532,184,185,186,187,188,189,190,533,534,535,191,536,192,537,538,539,193,194,540,195,541,542,196,543,544,197,198,337,338,339,340,341,545,199,200,201,202,203,546,547,204,548,205,549,550,551,206,552,553,207,554,555,556,557,558,559,560,561,208,562,563,209,210,564,211,565,212,213,214,215,342,343,216,217,218,219,220,221,222,223,224,566,567,225,568,226,227,228,569,229,230,231,570,571,232,572,233,234,235,236,237,238,239,240,573,241,242,574,243,244,245,246,247,248,575,249,250,251,576,252,577,578,344,253,254,255,256,579,580,257,581,258,259,260,261,262,582,583,263,264,584,585,265,586,266,587,588,267,589,268,269,270,271,590,591,592,593,594,272,273,274,275,276,278,279,280,281,595,596,597,282,283,284,285,286,598,599,287,600,601,288,289,602,290,291,603,292,604,293,294,295,296,297,298,299,300,301,302,303,304,605,305,306,307,606,308,309,310,311,312,313,314,348,607,608,349,350,351,352,609,353,354,610,611,612,315,316,317,318,613,319,320,321,355,356],"tindex":"1e31b57e-3e3d-11e6-9075-75736a71b477","method":{"position":"com.google.gson.Gson:249","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> doubleAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return in.nextDouble();\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    double double = value.doubleValue();\n                    checkValidFloatingPoint(doubleValue);\n                    out.value(value);\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233795833/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[303],"tindex":"1e31dc8f-3e3d-11e6-9075-bfdf0653525a","method":{"position":"com.google.gson.Gson:136","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        {\n            return toJsonTree(src, typeOfSrc);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233795833/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:109","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonPrimitive"},"failures":[2,3,363,364,4,365,5,366,367,6,369,371,7,8,10,11,376,378,13,380,381,17,19,20,23,384,25,27,358,32,37,40,399,47,48,49,326,327,328,50,52,329,330,403,53,54,331,55,56,404,57,58,59,60,61,405,406,62,63,64,407,408,409,65,410,66,411,67,412,68,413,69,414,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,86,90,91,92,423,332,105,107,109,433,111,434,112,113,115,117,118,120,438,440,122,123,444,124,125,126,127,128,129,447,130,448,449,450,131,132,133,451,134,135,136,452,137,453,138,139,140,141,454,455,142,143,144,456,457,145,458,459,147,149,467,468,152,153,154,471,157,475,476,479,162,489,490,164,165,166,168,169,506,170,171,173,176,178,179,180,181,532,186,189,190,191,536,192,193,194,196,544,197,198,337,338,339,340,341,200,202,204,548,554,559,560,561,208,562,209,564,211,565,212,214,215,342,343,216,217,218,219,220,221,222,223,224,567,225,568,226,227,228,230,232,233,234,235,236,237,238,239,240,573,241,242,243,244,245,246,248,249,250,251,577,578,255,256,257,581,258,259,262,582,583,264,265,268,269,591,592,593,272,273,274,275,276,278,279,280,281,283,284,286,287,600,288,290,292,293,294,295,296,298,303,304,305,306,307,606,308,309,310,311,312,313,345,346,348,349,610,611,612,315,316,317,318,319,320,321,614,615],"tindex":"1e3203a0-3e3d-11e6-9075-db7b1f56dc12","method":{"position":"com.google.gson.reflect.TypeToken:283","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic final boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonPrimitive) {\n        {\n            return (o instanceof com.google.gson.reflect.TypeToken<?>) && (com.google.gson.internal.$Gson$Types.equals(java.lang.reflect.Type, ((com.google.gson.reflect.TypeToken<?>)(o)).java.lang.reflect.Type));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233795833/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:305","type":"CtBinaryOperatorImpl","sourcecode":"node != null"},"failures":[],"tindex":"1e3203a1-3e3d-11e6-9075-af0b3d2e617e","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:686","type":"CtMethodImpl","sourcecode":"void add(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node) {\n    if (node != null) {\n        {\n            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            node.int = 1;\n            if (((int) > 0) && (((int) & 1) == 0)) {\n                (int)++;\n                (int)--;\n                (int)++;\n            } \n            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node;\n            (int)++;\n            if (((int) > 0) && (((int) & 1) == 0)) {\n                (int)++;\n                (int)--;\n                (int)++;\n            } \n            for (int int = 4 ; ((int) & (scale - 1)) == (scale - 1) ; scale *= 2) {\n                if ((int) == 0) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                    center.int = (right.int) + 1;\n                    left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                } else if ((int) == 1) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                    center.int = (right.int) + 1;\n                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    int = 0;\n                } else if ((int) == 2) {\n                    int = 0;\n                } \n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233795833/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"node"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:109","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonPrimitive"},"failures":[],"tindex":"1e322ab2-3e3d-11e6-9075-4db37a8c86b9","method":{"position":"com.google.gson.internal.LinkedTreeMap:574","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonPrimitive) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233795833/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (!(o instanceof java.util.Map.Entry)) {\n                return false;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n            if (node == null) {\n                return false;\n            } \n            removeInternal(node, true);\n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:726","type":"CtBinaryOperatorImpl","sourcecode":"value == 0"},"failures":[616,617],"tindex":"1e3251c3-3e3d-11e6-9075-dfb464b20ba7","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:170","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(long value) throws java.io.IOException {\n    if (value == 0) {\n        {\n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233795833/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"1e3251c4-3e3d-11e6-9075-e56a7bbbd770","method":{"position":"com.google.gson.Gson:552","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        {\n            if (src != null) {\n                toJson(src, src.getClass(), writer);\n            } else {\n                toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull, writer);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233795833/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"1e3251c5-3e3d-11e6-9075-6f545e3355e9","method":{"position":"com.google.gson.Gson:491","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233795833/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.bind.JsonTreeWriter com.google.gson.internal.bind.JsonTreeWriter = new com.google.gson.internal.bind.JsonTreeWriter();\n            toJson(src, typeOfSrc, writer);\n            return writer.get();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[179,191,193,352],"tindex":"1e3251c6-3e3d-11e6-9075-5df290a6704f","method":{"position":"com.google.gson.internal.bind.TypeAdapters:297","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233795833/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:305","type":"CtBinaryOperatorImpl","sourcecode":"node != null"},"failures":[],"tindex":"1e3251c7-3e3d-11e6-9075-2d534ba2faac","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:245","type":"CtMethodImpl","sourcecode":"void removeInternal(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node, boolean unlink) {\n    if (node != null) {\n        {\n            if (unlink) {\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            if ((left != null) && (right != null)) {\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = (left.int) > (right.int) ? left.last() : right.first();\n                removeInternal(adjacent, false);\n                int int = 0;\n                left = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                if (left != null) {\n                    leftHeight = left.int;\n                    adjacent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left;\n                    left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                } \n                int int = 0;\n                right = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                if (right != null) {\n                    rightHeight = right.int;\n                    adjacent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                } \n                adjacent.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                replaceInParent(node, adjacent);\n                return ;\n            } else if (left != null) {\n                replaceInParent(node, left);\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } else if (right != null) {\n                replaceInParent(node, right);\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } else {\n                replaceInParent(node, null);\n            }\n            rebalance(originalParent, false);\n            (int)--;\n            (int)++;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233795833/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"node"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.TreeTypeAdapter:55","type":"CtInvocationImpl","sourcecode":"value.isJsonNull()"},"failures":[360,322,110,333,334,445,336,339,226,230,570,350,618],"tindex":"1e3278d8-3e3d-11e6-9075-6b56d96b3ec6","method":{"position":"com.google.gson.internal.bind.TypeAdapters:680","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, com.google.gson.JsonElement value) throws java.io.IOException {\n    if (value.isJsonNull()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233795833/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if ((value == null) || (value.isJsonNull())) {\n                out.nullValue();\n            } else if (value.isJsonPrimitive()) {\n                com.google.gson.JsonPrimitive com.google.gson.JsonPrimitive = value.getAsJsonPrimitive();\n                if (primitive.isNumber()) {\n                    out.value(primitive.getAsNumber());\n                } else if (primitive.isBoolean()) {\n                    out.value(primitive.getAsBoolean());\n                } else {\n                    out.value(primitive.getAsString());\n                }\n            } else if (value.isJsonArray()) {\n                out.beginArray();\n                for (com.google.gson.JsonElement com.google.gson.JsonElement : value.getAsJsonArray()) {\n                    write(out, e);\n                }\n                out.endArray();\n            } else if (value.isJsonObject()) {\n                out.beginObject();\n                for (java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> : value.getAsJsonObject().entrySet()) {\n                    out.name(e.getKey());\n                    write(out, e.getValue());\n                }\n                out.endObject();\n            } else {\n                throw new java.lang.IllegalArgumentException((\"Couldn't write \" + (value.getClass())));\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[75,76,77,78,79,148,159,480,300,301,615],"tindex":"1e329fe9-3e3d-11e6-9075-297a95a22be8","method":{"position":"com.google.gson.internal.Excluder:149","type":"CtMethodImpl","sourcecode":"public boolean excludeField(java.lang.reflect.Field field, boolean serialize) {\n    if (field.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233795833/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (((int) & (field.getModifiers())) != 0) {\n                return true;\n            } \n            if (((double) != (com.google.gson.internal.Excluder.com.google.gson.internal.Excluder.double)) && (!(isValidVersion(field.getAnnotation(com.google.gson.annotations.Since.com.google.gson.annotations.Since.java.lang.Class), field.getAnnotation(com.google.gson.annotations.Until.com.google.gson.annotations.Until.java.lang.Class))))) {\n                return true;\n            } \n            if (field.isSynthetic()) {\n                return true;\n            } \n            if (boolean) {\n                com.google.gson.annotations.Expose com.google.gson.annotations.Expose = field.getAnnotation(com.google.gson.annotations.Expose.com.google.gson.annotations.Expose.java.lang.Class);\n                if ((annotation == null) || (serialize ? !(annotation.serialize()) : !(annotation.deserialize()))) {\n                    return true;\n                } \n            } \n            if ((!(boolean)) && (isInnerClass(field.getType()))) {\n                return true;\n            } \n            if (isAnonymousOrLocal(field.getType())) {\n                return true;\n            } \n            java.util.List<com.google.gson.ExclusionStrategy> java.util.List<com.google.gson.ExclusionStrategy> = serialize ? java.util.List<com.google.gson.ExclusionStrategy> : java.util.List<com.google.gson.ExclusionStrategy>;\n            if (!(list.isEmpty())) {\n                com.google.gson.FieldAttributes com.google.gson.FieldAttributes = new com.google.gson.FieldAttributes(field);\n                for (com.google.gson.ExclusionStrategy com.google.gson.ExclusionStrategy : list) {\n                    if (exclusionStrategy.shouldSkipField(fieldAttributes)) {\n                        return true;\n                    } \n                }\n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"field"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:94","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.Class"},"failures":[],"tindex":"1e329fea-3e3d-11e6-9075-d128d1436352","method":{"position":"com.google.gson.internal.$Gson$Types:431","type":"CtMethodImpl","sourcecode":"private static void checkNotPrimitive(java.lang.reflect.Type type) {\n    com.google.gson.internal.$Gson$Preconditions.checkArgument(((!(type instanceof java.lang.Class<?>)) || (!(((java.lang.Class<?>)(type)).isPrimitive()))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"1e329feb-3e3d-11e6-9075-af952a351bdf","method":{"position":"com.google.gson.internal.bind.DateTypeAdapter:69","type":"CtMethodImpl","sourcecode":"private synchronized java.util.Date deserializeToDate(java.lang.String json) {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233795833/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (json == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233795833/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    try {\n                        return java.text.DateFormat.parse(json);\n                    } catch (java.text.ParseException ignored) {\n                    }\n                    try {\n                        return java.text.DateFormat.parse(json);\n                    } catch (java.text.ParseException ignored) {\n                    }\n                    try {\n                        return java.text.DateFormat.parse(json);\n                    } catch (java.text.ParseException e) {\n                        throw new com.google.gson.JsonSyntaxException(json , e);\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:137","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonObject"},"failures":[],"tindex":"1e32c6fc-3e3d-11e6-9075-771c40434007","method":{"position":"com.google.gson.JsonArray:81","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement set(int index, com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233795833/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return java.util.List<com.google.gson.JsonElement>.set(index, element);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[332],"tindex":"1e32c6fd-3e3d-11e6-9075-0fdc3030b7ea","method":{"position":"com.google.gson.internal.bind.TypeAdapters:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233795833/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"1e32c6fe-3e3d-11e6-9075-d1ddb3abe544","method":{"position":"com.google.gson.JsonObject:111","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Character value) {\n    if (property == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233795833/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            add(property, createJsonElement(value));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:94","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.Class"},"failures":[619,620,621,368,371,372,373,9,374,10,375,11,377,378,379,14,380,381,15,382,17,18,19,20,21,383,23,24,384,25,385,386,26,27,327,51,402,64,408,75,76,77,78,79,80,82,84,91,440,444,130,449,452,140,144,464,156,159,477,528,196,543,544,197,198,559,560,208,562,563,212,213,215,342,343,218,223,224,227,228,232,242,244,245,246,249,250,251,252,344,253,254,255,256,579,258,269,278,279,595,596,282,283,285,598,599,287,601,602,291,604,305,606,309,311,312,345,346,352,353,613],"tindex":"1e32c6ff-3e3d-11e6-9075-75e7b09ce61a","method":{"position":"com.google.gson.internal.ConstructorConstructor:128","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nprivate <T>com.google.gson.internal.ObjectConstructor<T> newDefaultImplementationConstructor(final java.lang.reflect.Type type, java.lang.Class<? super T> rawType) {\n    if (type instanceof java.lang.Class) {\n        {\n            if (java.util.Collection.java.util.Collection.java.lang.Class.isAssignableFrom(rawType)) {\n                if (java.util.SortedSet.java.util.SortedSet.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.TreeSet<java.lang.Object>()));\n                        }\n                    };\n                } else if (java.util.EnumSet.java.util.EnumSet.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        @java.lang.SuppressWarnings(value = \"rawtypes\")\n                        public T construct() {\n                            if (type instanceof java.lang.reflect.ParameterizedType) {\n                                java.lang.reflect.Type java.lang.reflect.Type = ((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0];\n                                if (elementType instanceof java.lang.Class) {\n                                    return ((T)(java.util.EnumSet.noneOf(((java.lang.Class)(elementType)))));\n                                } else {\n                                    throw new com.google.gson.JsonIOException((\"Invalid EnumSet type: \" + (type.toString())));\n                                }\n                            } else {\n                                throw new com.google.gson.JsonIOException((\"Invalid EnumSet type: \" + (type.toString())));\n                            }\n                        }\n                    };\n                } else if (java.util.Set.java.util.Set.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedHashSet<java.lang.Object>()));\n                        }\n                    };\n                } else if (java.util.Queue.java.util.Queue.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedList<java.lang.Object>()));\n                        }\n                    };\n                } else {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.ArrayList<java.lang.Object>()));\n                        }\n                    };\n                }\n            } \n            if (java.util.Map.java.util.Map.java.lang.Class.isAssignableFrom(rawType)) {\n                if (java.util.SortedMap.java.util.SortedMap.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.TreeMap<java.lang.Object, java.lang.Object>()));\n                        }\n                    };\n                } else if ((type instanceof java.lang.reflect.ParameterizedType) && (!(java.lang.String.java.lang.String.java.lang.Class.isAssignableFrom(com.google.gson.reflect.TypeToken.get(((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0]).getRawType())))) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedHashMap<java.lang.Object, java.lang.Object>()));\n                        }\n                    };\n                } else {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new com.google.gson.internal.LinkedTreeMap<java.lang.String, java.lang.Object>()));\n                        }\n                    };\n                }\n            } \n            return null;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233795833/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"1e32ee10-3e3d-11e6-9075-45b11671cee3","method":{"position":"com.google.gson.internal.bind.DateTypeAdapter:69","type":"CtMethodImpl","sourcecode":"private synchronized java.util.Date deserializeToDate(java.lang.String json) {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233795833/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (json == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233795833/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    try {\n                        return java.text.DateFormat.parse(json);\n                    } catch (java.text.ParseException ignored) {\n                    }\n                    try {\n                        return java.text.DateFormat.parse(json);\n                    } catch (java.text.ParseException ignored) {\n                    }\n                    try {\n                        return java.text.DateFormat.parse(json);\n                    } catch (java.text.ParseException e) {\n                        throw new com.google.gson.JsonSyntaxException(json , e);\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:154","type":"CtUnaryOperatorImpl","sourcecode":"!create"},"failures":[4,365,5,371,372,373,375,378,380,383,384,358,48,324,326,327,328,329,330,331,416,448,449,198,337,338,340,341,557,564,342,343,577,622,303,311,312,623,624,345,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639],"tindex":"1e32ee11-3e3d-11e6-9075-27f77a86ee37","method":{"position":"com.google.gson.internal.LinkedTreeMap:121","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedTreeMap.Node<K, V> find(K key, boolean create) {\n    if (!create) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233795833/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.util.Comparator<? super K> java.util.Comparator<? super K> = com.google.gson.internal.LinkedTreeMap.this.java.util.Comparator<? super K>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            int int = 0;\n            if (nearest != null) {\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                java.lang.Comparable<java.lang.Object> java.lang.Comparable<java.lang.Object> = comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>) ? ((java.lang.Comparable<java.lang.Object>)(key)) : null;\n                while (true) {\n                    comparison = comparableKey != null ? comparableKey.compareTo(nearest.K) : comparator.compare(key, nearest.K);\n                    if (comparison == 0) {\n                        return nearest;\n                    } \n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = comparison < 0 ? nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> : nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    if (child == null) {\n                        break;\n                    } \n                    nearest = child;\n                }\n            } \n            if (!create) {\n                return null;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.this.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            if (nearest == null) {\n                if ((comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>)) && (!(key instanceof java.lang.Comparable))) {\n                    throw new java.lang.ClassCastException(((key.getClass().getName()) + \" is not Comparable\"));\n                } \n                created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n            } else {\n                created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                if (comparison < 0) {\n                    nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                } else {\n                    nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                }\n                rebalance(nearest, true);\n            }\n            (int)++;\n            (int)++;\n            return created;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"create":"create"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1529","type":"CtBinaryOperatorImpl","sourcecode":"(c >= 'a') && (c <= 'f')"},"failures":[],"tindex":"1e333c32-3e3d-11e6-9075-c7ef61d1e25c","method":{"position":"com.google.gson.stream.JsonReader:755","type":"CtMethodImpl","sourcecode":"private boolean isLiteral(char c) throws java.io.IOException {\n    if ((c >= 'a') && (c <= 'f')) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467233795833/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            switch (c) {\n                case '/' :\n                case '\\\\' :\n                case ';' :\n                case '#' :\n                case '=' :\n                    checkLenient();\n                case '{' :\n                case '}' :\n                case '[' :\n                case ']' :\n                case ':' :\n                case ',' :\n                case ' ' :\n                case '\\t' :\n                case '\\f' :\n                case '\\r' :\n                case '\\n' :\n                    return false;\n                default :\n                    return true;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"c"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":29,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
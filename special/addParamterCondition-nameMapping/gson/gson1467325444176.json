{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":112,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":301,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":90,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":26,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":290,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":363,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":31,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":307,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":289,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":316,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":373,"com.google.gson.internal.bind.JsonElementReaderTest.testStrictNansAndInfinities":13,"com.google.gson.JsonObjectTest.testAddingNullPropertyValue":67,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":342,"com.google.gson.functional.ObjectTest.testSingletonLists":287,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":268,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":388,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":114,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":115,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":294,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":184,"com.google.gson.internal.bind.JsonElementReaderTest.testNulls":11,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":337,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":91,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":160,"com.google.gson.internal.LinkedTreeMapTest.testContainsNullKeyIsAlwaysFalse":56,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":233,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":188,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":224,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":86,"com.google.gson.functional.EnumTest.testEnumCaseMapping":200,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":129,"com.google.gson.functional.JsonTreeTest.testToJsonTree":79,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":163,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":369,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":97,"com.google.gson.JsonObjectTest.testEqualsNonEmptyObject":68,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":354,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":209,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":269,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":343,"com.google.gson.internal.LinkedTreeMapTest.testLargeSetOfRandomKeys":51,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":320,"com.google.gson.internal.bind.JsonElementReaderTest.testNestedObjects":59,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":71,"com.google.gson.internal.bind.JsonElementReaderTest.testLenientNansAndInfinities":9,"com.google.gson.internal.LinkedTreeMapTest.testContainsNonComparableKeyReturnsFalse":52,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":222,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":378,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":296,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":65,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":371,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":122,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":249,"com.google.gson.JsonParserTest.testParseString":47,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":279,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":276,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":29,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":144,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":297,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":358,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":37,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":231,"com.google.gson.functional.StreamingTypeAdaptersTest.testFromJsonTree":103,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":121,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":20,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":380,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":237,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":280,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":330,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":140,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":48,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":87,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":271,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":239,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":124,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":304,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":110,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":361,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":348,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":182,"com.google.gson.JsonArrayTest.testEqualsNonEmptyArray":3,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":374,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":253,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":381,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":178,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":157,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":187,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":350,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":219,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":360,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":119,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":306,"com.google.gson.internal.bind.JsonElementReaderTest.testObject":60,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":106,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":211,"com.google.gson.functional.MapTest.testSerializeMaps":152,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":334,"com.google.gson.functional.MapTest.testComplexKeysSerialization":236,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":89,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":396,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":151,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":198,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":322,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":346,"com.google.gson.internal.LinkedTreeMapTest.testRemoveRootDoesNotDoubleUnlink":58,"com.google.gson.internal.bind.JsonElementReaderTest.testWrongType":14,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":69,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":161,"com.google.gson.functional.MapTest.testStringKeyDeserialization":88,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":213,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":126,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":284,"com.google.gson.functional.PrettyPrintingTest.testMap":260,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":326,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":310,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":183,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":214,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":70,"com.google.gson.functional.MapTest.testMapOfMapSerialization":232,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":275,"com.google.gson.JavaSerializationTest.testMapIsSerializable":42,"com.google.gson.internal.LinkedTreeMapTest.testPutNonComparableKeyFails":55,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":135,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":277,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":389,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":302,"com.google.gson.functional.FieldNamingTest.testIdentity":335,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":125,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":216,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":298,"com.google.gson.internal.bind.JsonElementReaderTest.testNestedArrays":17,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":78,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":136,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":175,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":251,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":189,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":40,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":202,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":134,"com.google.gson.functional.MapTest.testMapSubclassSerialization":228,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":283,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":73,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":255,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":393,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":27,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":252,"com.google.gson.functional.EnumTest.testEnumSubclass":196,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":185,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":293,"com.google.gson.internal.bind.JsonElementReaderTest.testArray":10,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":375,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":41,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":204,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":203,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":93,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":208,"com.google.gson.internal.LinkedTreeMapTest.testEqualsAndHashCode":57,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":288,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":227,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":146,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":116,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":142,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":321,"com.google.gson.JsonObjectTest.testReadPropertyWithEmptyStringName":64,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":176,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":385,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":212,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":265,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":105,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":180,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":370,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":169,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":367,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":107,"com.google.gson.ObjectTypeAdapterTest.testSerializeObject":192,"com.google.gson.internal.bind.JsonElementReaderTest.testEarlyClose":12,"com.google.gson.JsonParserTest.testParseMixedArray":4,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":270,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":215,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":263,"com.google.gson.internal.bind.JsonTreeWriterTest.testWriteAfterClose":22,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":272,"com.google.gson.JsonArrayTest.testRemove":2,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":133,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":357,"com.google.gson.functional.MapTest.testMapDeserialization":84,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":207,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":164,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":25,"com.google.gson.internal.bind.JsonElementReaderTest.testStringsFromNumbers":16,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":229,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":242,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":345,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":181,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeMap":104,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":77,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":328,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":94,"com.google.gson.internal.bind.JsonElementReaderTest.testNumbersFromStrings":15,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":201,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":246,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":261,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":191,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":368,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":387,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":118,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":226,"com.google.gson.internal.LinkedTreeMapTest.testIterationOrder":54,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":168,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":356,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":331,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":195,"com.google.gson.internal.LinkedTreeMapTest.testEmptyStringValues":53,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":309,"com.google.gson.internal.LinkedTreeMapTest.testPutOverrides":49,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":194,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":81,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":170,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":318,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":38,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":23,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":362,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":61,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":395,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":241,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":382,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":63,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":336,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":257,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":127,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":199,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":313,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":324,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":383,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":341,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":120,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":95,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":281,"com.google.gson.JsonArrayTest.testSet":0,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":286,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":344,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":113,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":108,"com.google.gson.functional.MapTest.testGeneralMapField":153,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":291,"com.google.gson.internal.bind.JsonElementReaderTest.testNumbers":18,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":139,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":148,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":325,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":376,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":364,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":154,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":351,"com.google.gson.ObjectTypeAdapterTest.testDeserializeNullValue":44,"com.google.gson.MixedStreamTest.testReadMixedStreamed":394,"com.google.gson.JsonObjectTest.testDeepCopy":24,"com.google.gson.internal.bind.JsonElementReaderTest.testBooleans":7,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":167,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":355,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":190,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":347,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":225,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":349,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":85,"com.google.gson.JsonArrayTest.testDeepCopy":1,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":259,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":80,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":171,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":386,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":266,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":339,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":62,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":329,"com.google.gson.functional.ObjectTest.testNestedDeserialization":300,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":391,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":238,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":92,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":223,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":264,"com.google.gson.JsonParserTest.testParseUnquotedStringArrayFails":5,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":156,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":282,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":34,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":39,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":258,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":82,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":235,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":267,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":210,"com.google.gson.functional.MapTest.testInterfaceTypeMap":234,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":327,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":240,"com.google.gson.JsonObjectTest.testAddingNullOrEmptyPropertyName":72,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":197,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":245,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":221,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":312,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":158,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":102,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":243,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":292,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":311,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":340,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":314,"com.google.gson.internal.bind.JsonElementReaderTest.testSkipValue":8,"com.google.gson.internal.bind.JsonElementReaderTest.testStrings":19,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":359,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":75,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":131,"com.google.gson.JsonParserTest.testParseInvalidJson":6,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":76,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":137,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":323,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":101,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":274,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":366,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":230,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":250,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":308,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":392,"com.google.gson.JsonParserTest.testParseReader":46,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":179,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":244,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":111,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":43,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":141,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":305,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":35,"com.google.gson.ObjectTypeAdapterTest.testSerialize":193,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":247,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":32,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":147,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":332,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":159,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":186,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":303,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":352,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":379,"com.google.gson.JsonObjectTest.testEqualsOnEmptyObject":397,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":390,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":98,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":28,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":372,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":117,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":155,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":299,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":262,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":278,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":150,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":353,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":33,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":315,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":206,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":99,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":138,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":365,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":217,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":74,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":100,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":128,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":172,"com.google.gson.JsonObjectTest.testAddingStringProperties":30,"com.google.gson.internal.LinkedTreeMapTest.testClear":50,"com.google.gson.functional.ObjectTest.testNestedSerialization":295,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":166,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":248,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":165,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":109,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":256,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":177,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":285,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":96,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":130,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":338,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":173,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":145,"com.google.gson.functional.CollectionTest.testSetSerialization":317,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":377,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":162,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":384,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":174,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":132,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":205,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":149,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":273,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":123,"com.google.gson.ObjectTypeAdapterTest.testDeserialize":45,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":333,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":319,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":66,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":218,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":21,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":220,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":254,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":36,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":83,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":143},"transformations":[{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:198","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"5a389415-3f11-11e6-a9fc-11f2c5c7acb5","method":{"position":"com.google.gson.TypeAdapter:140","type":"CtMethodImpl","sourcecode":"public final void toJson(java.io.Writer out, T value) throws java.io.IOException {\n    if (out == null) {\n        {\n            if (out == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324739094/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = new com.google.gson.stream.JsonWriter(out);\n                    write(writer, value);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324739094/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"5a390946-3f11-11e6-a9fc-cd3914135d67","method":{"position":"com.google.gson.JsonObject:100","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Boolean value) {\n    if (property == null) {\n        {\n            if (property == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324739094/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    add(property, createJsonElement(value));\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324739094/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:137","type":"CtBinaryOperatorImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29],"tindex":"5a390947-3f11-11e6-a9fc-e9bdf33facf6","method":{"position":"com.google.gson.JsonArray:57","type":"CtMethodImpl","sourcecode":"public void add(com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonObject) {\n        {\n            if (element == null) {\n                element = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            java.util.List<com.google.gson.JsonElement>.add(element);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324739094/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl"},"failures":[30,31,32,33,34,35,36,26,37,27,38,39,40,41],"tindex":"5a393058-3f11-11e6-a9fc-2d05d7e0a91a","method":{"position":"com.google.gson.JsonObject:78","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.String value) {\n    if (value == null) {\n        {\n            add(property, createJsonElement(value));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324739094/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:325","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"5a393059-3f11-11e6-a9fc-c501e08e5e61","method":{"position":"com.google.gson.internal.$Gson$Types:226","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type getGenericSupertype(java.lang.reflect.Type context, java.lang.Class<?> rawType, java.lang.Class<?> toResolve) {\n    if (toResolve == rawType) {\n        return context;\n    } \n    if (toResolve.isInterface()) {\n        java.lang.Class<?>[] java.lang.Class<?>[] = rawType.getInterfaces();\n        for (int int = 0, int int = interfaces.int ; i < length ; i++) {\n            if ((interfaces[i]) == toResolve) {\n                return rawType.getGenericInterfaces()[i];\n            } else if (toResolve.isAssignableFrom(interfaces[i])) {\n                return com.google.gson.internal.$Gson$Types.getGenericSupertype(rawType.getGenericInterfaces()[i], interfaces[i], toResolve);\n            } \n        }\n    } \n    if (!(rawType.isInterface())) {\n        while (rawType != (java.lang.Object.java.lang.Object.java.lang.Class)) {\n            java.lang.Class<?> java.lang.Class<?> = rawType.getSuperclass();\n            if (rawSupertype == toResolve) {\n                return rawType.getGenericSuperclass();\n            } else if (toResolve.isAssignableFrom(rawSupertype)) {\n                return com.google.gson.internal.$Gson$Types.getGenericSupertype(rawType.getGenericSuperclass(), rawSupertype, toResolve);\n            } \n            rawType = rawSupertype;\n        }\n    } \n    return toResolve;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"context"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:137","type":"CtBinaryOperatorImpl"},"failures":[0],"tindex":"5a39576a-3f11-11e6-a9fc-dd9af6b110cd","method":{"position":"com.google.gson.JsonArray:81","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement set(int index, com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonObject) {\n        {\n            return java.util.List<com.google.gson.JsonElement>.set(index, element);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324739094/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:240","type":"CtInvocationImpl"},"failures":[],"tindex":"5a397e7b-3f11-11e6-a9fc-cd62e7c01ce9","method":{"position":"com.google.gson.reflect.TypeToken:238","type":"CtMethodImpl","sourcecode":"private static boolean typeEquals(java.lang.reflect.ParameterizedType from, java.lang.reflect.ParameterizedType to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeVarMap) {\n    if (from.getRawType().equals(from.getRawType())) {\n        {\n            if (from.getRawType().equals(to.getRawType())) {\n                java.lang.reflect.Type[] java.lang.reflect.Type[] = from.getActualTypeArguments();\n                java.lang.reflect.Type[] java.lang.reflect.Type[] = to.getActualTypeArguments();\n                for (int int = 0 ; i < (fromArgs.int) ; i++) {\n                    if (!(com.google.gson.reflect.TypeToken.matches(fromArgs[i], toArgs[i], typeVarMap))) {\n                        return false;\n                    } \n                }\n                return true;\n            } \n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324739094/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from","to":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:167","type":"CtUnaryOperatorImpl"},"failures":[42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,8,60,61,62,63,64,65,66,67,68,69,70,24,30,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,31,32,33,34,99,100,101,102,103,104,105,106,107,108,109,110,111,35,36,112,113,114,115,26,37,27,38,39,116,117,118,119,120,121,122,123,40,124,125,41,126,127,128],"tindex":"5a397e7c-3f11-11e6-a9fc-6b48c2f41e25","method":{"position":"com.google.gson.internal.LinkedTreeMap:121","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedTreeMap.Node<K, V> find(K key, boolean create) {\n    if (!create) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324739094/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (!create) {\n                {\n                    java.util.Comparator<? super K> java.util.Comparator<? super K> = com.google.gson.internal.LinkedTreeMap.this.java.util.Comparator<? super K>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    int int = 0;\n                    if (nearest != null) {\n                        @java.lang.SuppressWarnings(value = \"unchecked\")\n                        java.lang.Comparable<java.lang.Object> java.lang.Comparable<java.lang.Object> = comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>) ? ((java.lang.Comparable<java.lang.Object>)(key)) : null;\n                        while (true) {\n                            comparison = comparableKey != null ? comparableKey.compareTo(nearest.K) : comparator.compare(key, nearest.K);\n                            if (comparison == 0) {\n                                return nearest;\n                            } \n                            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = comparison < 0 ? nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> : nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                            if (child == null) {\n                                break;\n                            } \n                            nearest = child;\n                        }\n                    } \n                    if (!create) {\n                        return null;\n                    } \n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.this.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    if (nearest == null) {\n                        if ((comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>)) && (!(key instanceof java.lang.Comparable))) {\n                            throw new java.lang.ClassCastException(((key.getClass().getName()) + \" is not Comparable\"));\n                        } \n                        created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                        com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                    } else {\n                        created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                        if (comparison < 0) {\n                            nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                        } else {\n                            nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                        }\n                        rebalance(nearest, true);\n                    }\n                    (int)++;\n                    (int)++;\n                    return created;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324739094/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"create":"create"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:198","type":"CtBinaryOperatorImpl"},"failures":[129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,91,95,154,31,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182],"tindex":"5a39cc9d-3f11-11e6-a9fc-f39b9e3241de","method":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:84","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Object array) throws java.io.IOException {\n    if (array == null) {\n        {\n            if (array == null) {\n                out.nullValue();\n                return ;\n            } \n            out.beginArray();\n            for (int int = 0, int int = java.lang.reflect.Array.getLength(array) ; i < length ; i++) {\n                E E = ((E)(java.lang.reflect.Array.get(array, i)));\n                com.google.gson.TypeAdapter<E>.write(out, value);\n            }\n            out.endArray();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324739094/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"5a39f3ae-3f11-11e6-a9fc-f3b00cba85ac","method":{"position":"com.google.gson.Gson:695","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.lang.String json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324739094/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:198","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"5a3a1abf-3f11-11e6-a9fc-ad8b52beeaf0","method":{"position":"com.google.gson.TypeAdapter:140","type":"CtMethodImpl","sourcecode":"public final void toJson(java.io.Writer out, T value) throws java.io.IOException {\n    if (out == null) {\n        {\n            if (out == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324739094/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = new com.google.gson.stream.JsonWriter(out);\n                    write(writer, value);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324739094/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl"},"failures":[],"tindex":"5a3a8ff0-3f11-11e6-a9fc-bd23ab1df6f2","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:86","type":"CtMethodImpl","sourcecode":"private com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField createBoundField(final com.google.gson.Gson context, final java.lang.reflect.Field field, final java.lang.String name, final com.google.gson.reflect.TypeToken<?> fieldType, boolean serialize, boolean deserialize) {\n    if (field.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324739094/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final boolean boolean = com.google.gson.internal.Primitives.isPrimitive(fieldType.getRawType());\n            return new com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField(name, serialize, deserialize) {\n                final com.google.gson.TypeAdapter<?> typeAdapter = getFieldAdapter(context, field, fieldType);\n\n                @java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n                @java.lang.Override\n                void write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                    java.lang.Object java.lang.Object = field.get(value);\n                    com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n                    t.write(writer, fieldValue);\n                }\n\n                @java.lang.Override\n                void read(com.google.gson.stream.JsonReader reader, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                    java.lang.Object java.lang.Object = com.google.gson.TypeAdapter<?>.read(reader);\n                    if ((fieldValue != null) || (!isPrimitive)) {\n                        field.set(value, fieldValue);\n                    } \n                }\n\n                public boolean writeField(java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                    if (!(boolean))\n                        return false;\n                    \n                    java.lang.Object java.lang.Object = field.get(value);\n                    return fieldValue != value;\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"field"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:109","type":"CtBinaryOperatorImpl"},"failures":[129,130,183,184,185,186,187,188,189,190,43,191,192,193,48,194,73,74,195,196,197,198,199,200,131,132,133,134,135,201,202,203,204,136,137,138,205,139,140,141,142,143,206,207,144,145,146,208,209,210,147,211,148,212,149,213,150,214,151,215,216,75,217,218,219,220,221,222,223,224,225,226,77,25,227,80,228,152,229,230,231,85,232,86,233,234,235,153,236,88,237,90,91,238,92,93,94,239,240,95,96,241,242,243,97,98,244,245,246,247,248,154,249,250,31,32,251,33,34,155,99,156,252,157,253,158,159,254,100,255,256,257,258,259,160,260,261,161,162,163,164,262,263,264,265,101,102,165,266,267,268,269,270,271,166,272,167,273,274,275,276,277,278,279,280,168,281,282,169,283,284,285,170,286,171,105,106,107,108,109,110,111,174,175,287,288,289,176,290,291,292,177,293,294,178,179,295,296,297,298,299,300,112,301,302,180,303,304,305,114,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,26,116,329,330,331,332,333,334,335,336,337,338,339,340,341,342,181,117,343,344,345,118,346,119,347,120,121,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,40,376,377,182,378,379,380,381,124,125,382,41,126,127,383,384,385,386,387,128,388,389,390,391,392,393,394,395],"tindex":"5a3ade11-3f11-11e6-a9fc-530943006b89","method":{"position":"com.google.gson.reflect.TypeToken:283","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic final boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonPrimitive) {\n        {\n            return (o instanceof com.google.gson.reflect.TypeToken<?>) && (com.google.gson.internal.$Gson$Types.equals(java.lang.reflect.Type, ((com.google.gson.reflect.TypeToken<?>)(o)).java.lang.reflect.Type));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324739094/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl"},"failures":[43,396,61,62,63,76,77,78,79,90,91,92,93,94,95,96,97,31,32,33,34,101,102,112,119,120,121],"tindex":"5a3b0522-3f11-11e6-a9fc-93a93f6205ef","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:132","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter name(java.lang.String name) throws java.io.IOException {\n    if (name == null) {\n        {\n            if ((java.util.List<com.google.gson.JsonElement>.isEmpty()) || ((java.lang.String) != null)) {\n                throw new java.lang.IllegalStateException();\n            } \n            com.google.gson.JsonElement com.google.gson.JsonElement = peek();\n            if (element instanceof com.google.gson.JsonObject) {\n                java.lang.String = name;\n                return com.google.gson.internal.bind.JsonTreeWriter.this;\n            } \n            throw new java.lang.IllegalStateException();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324739094/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl"},"failures":[79,93,95,96,97,31,32,251,33,34,99,101,102,112,40],"tindex":"5a3b2c33-3f11-11e6-a9fc-8d61e6747984","method":{"position":"com.google.gson.Gson:468","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src) {\n    if (src == null) {\n        {\n            if (src == null) {\n                return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            return toJsonTree(src, src.getClass());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324739094/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:105","type":"CtBinaryOperatorImpl"},"failures":[3,397,68],"tindex":"5a3b2c34-3f11-11e6-a9fc-8f99acafab1b","method":{"position":"com.google.gson.JsonObject:186","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonObject) {\n        {\n            return (o == (com.google.gson.JsonObject.this)) || ((o instanceof com.google.gson.JsonObject) && (((com.google.gson.JsonObject)(o)).com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.equals(com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324739094/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:199","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"5a3b5345-3f11-11e6-a9fc-d966d1d533ff","method":{"position":"com.google.gson.internal.LinkedTreeMap:207","type":"CtMethodImpl","sourcecode":"private boolean equal(java.lang.Object a, java.lang.Object b) {\n    if (!(b instanceof java.lang.reflect.TypeVariable)) {\n        {\n            return (a == b) || ((a != null) && (a.equals(b)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324739094/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:554","type":"CtBinaryOperatorImpl"},"failures":[351,353,354,363,365,368],"tindex":"5a3b5346-3f11-11e6-a9fc-9f629e2a3189","method":{"position":"com.google.gson.GsonBuilder:551","type":"CtMethodImpl","sourcecode":"private void addTypeAdaptersForDate(java.lang.String datePattern, int dateStyle, int timeStyle, java.util.List<com.google.gson.TypeAdapterFactory> factories) {\n    if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n        {\n            if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324739094/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    com.google.gson.DefaultDateTypeAdapter com.google.gson.DefaultDateTypeAdapter;\n                    if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n                        dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(datePattern);\n                    } else if ((dateStyle != (java.text.DateFormat.java.text.DateFormat.int)) && (timeStyle != (java.text.DateFormat.java.text.DateFormat.int))) {\n                        dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(dateStyle , timeStyle);\n                    } else {\n                        return ;\n                    }\n                    factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.util.Date.java.util.Date.java.lang.Class), dateTypeAdapter));\n                    factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Timestamp.java.sql.Timestamp.java.lang.Class), dateTypeAdapter));\n                    factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Date.java.sql.Date.java.lang.Class), dateTypeAdapter));\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324739094/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"datePattern":"datePattern"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl"},"failures":[72],"tindex":"5a3b7a57-3f11-11e6-a9fc-fb54f1406582","method":{"position":"com.google.gson.JsonObject:53","type":"CtMethodImpl","sourcecode":"public void add(java.lang.String property, com.google.gson.JsonElement value) {\n    if (property == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324739094/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (value == null) {\n                value = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.put(property, value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:111","type":"CtInvocationImpl"},"failures":[],"tindex":"5a3b7a58-3f11-11e6-a9fc-59a956d150e7","method":{"position":"com.google.gson.JsonPrimitive:93","type":"CtMethodImpl","sourcecode":"void setValue(java.lang.Object primitive) {\n    if (primitive.isString()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324739094/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (primitive instanceof java.lang.Character) {\n                char char = ((java.lang.Character)(primitive)).charValue();\n                com.google.gson.JsonPrimitive.this.java.lang.Object = java.lang.String.valueOf(c);\n            } else {\n                com.google.gson.internal.$Gson$Preconditions.checkArgument(((primitive instanceof java.lang.Number) || (com.google.gson.JsonPrimitive.isPrimitiveOrString(primitive))));\n                com.google.gson.JsonPrimitive.this.java.lang.Object = primitive;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"primitive"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:167","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"5a3ba169-3f11-11e6-a9fc-b7ab1ebe1143","method":{"position":"com.google.gson.internal.LinkedTreeMap:121","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedTreeMap.Node<K, V> find(K key, boolean create) {\n    if (!create) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324739094/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (!create) {\n                {\n                    java.util.Comparator<? super K> java.util.Comparator<? super K> = com.google.gson.internal.LinkedTreeMap.this.java.util.Comparator<? super K>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    int int = 0;\n                    if (nearest != null) {\n                        @java.lang.SuppressWarnings(value = \"unchecked\")\n                        java.lang.Comparable<java.lang.Object> java.lang.Comparable<java.lang.Object> = comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>) ? ((java.lang.Comparable<java.lang.Object>)(key)) : null;\n                        while (true) {\n                            comparison = comparableKey != null ? comparableKey.compareTo(nearest.K) : comparator.compare(key, nearest.K);\n                            if (comparison == 0) {\n                                return nearest;\n                            } \n                            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = comparison < 0 ? nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> : nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                            if (child == null) {\n                                break;\n                            } \n                            nearest = child;\n                        }\n                    } \n                    if (!create) {\n                        return null;\n                    } \n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.this.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    if (nearest == null) {\n                        if ((comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>)) && (!(key instanceof java.lang.Comparable))) {\n                            throw new java.lang.ClassCastException(((key.getClass().getName()) + \" is not Comparable\"));\n                        } \n                        created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                        com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                    } else {\n                        created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                        if (comparison < 0) {\n                            nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                        } else {\n                            nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                        }\n                        rebalance(nearest, true);\n                    }\n                    (int)++;\n                    (int)++;\n                    return created;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324739094/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"create":"create"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"5a3bef8a-3f11-11e6-a9fc-3d82ac709806","method":{"position":"com.google.gson.JsonObject:100","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Boolean value) {\n    if (property == null) {\n        {\n            if (property == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324739094/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    add(property, createJsonElement(value));\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324739094/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:554","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"5a3c169b-3f11-11e6-a9fc-cfad86de2aa1","method":{"position":"com.google.gson.GsonBuilder:551","type":"CtMethodImpl","sourcecode":"private void addTypeAdaptersForDate(java.lang.String datePattern, int dateStyle, int timeStyle, java.util.List<com.google.gson.TypeAdapterFactory> factories) {\n    if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n        {\n            if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324739094/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    com.google.gson.DefaultDateTypeAdapter com.google.gson.DefaultDateTypeAdapter;\n                    if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n                        dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(datePattern);\n                    } else if ((dateStyle != (java.text.DateFormat.java.text.DateFormat.int)) && (timeStyle != (java.text.DateFormat.java.text.DateFormat.int))) {\n                        dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(dateStyle , timeStyle);\n                    } else {\n                        return ;\n                    }\n                    factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.util.Date.java.util.Date.java.lang.Class), dateTypeAdapter));\n                    factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Timestamp.java.sql.Timestamp.java.lang.Class), dateTypeAdapter));\n                    factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Date.java.sql.Date.java.lang.Class), dateTypeAdapter));\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324739094/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"datePattern":"datePattern"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:105","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"5a3c3dac-3f11-11e6-a9fc-1b18ed94079a","method":{"position":"com.google.gson.internal.LinkedTreeMap:570","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324739094/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (o instanceof java.util.Map.Entry) && ((findByEntry(((java.util.Map.Entry<?, ?>)(o)))) != null);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"5a3c3dad-3f11-11e6-a9fc-6385b38380f1","method":{"position":"com.google.gson.internal.bind.DateTypeAdapter:69","type":"CtMethodImpl","sourcecode":"private synchronized java.util.Date deserializeToDate(java.lang.String json) {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324739094/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            try {\n                return java.text.DateFormat.parse(json);\n            } catch (java.text.ParseException ignored) {\n            }\n            try {\n                return java.text.DateFormat.parse(json);\n            } catch (java.text.ParseException ignored) {\n            }\n            try {\n                return java.text.DateFormat.parse(json);\n            } catch (java.text.ParseException e) {\n                throw new com.google.gson.JsonSyntaxException(json , e);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:602","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"5a3c64be-3f11-11e6-a9fc-f1a149ce99f0","method":{"position":"com.google.gson.stream.JsonReader:325","type":"CtMethodImpl","sourcecode":"public final void setLenient(boolean lenient) {\n    if (!lenient) {\n        {\n            com.google.gson.stream.JsonReader.this.boolean = lenient;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324739094/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"lenient"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.internal.bind.ObjectTypeAdapter:95","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"5a3c64bf-3f11-11e6-a9fc-2b15ecb55bd8","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:108","type":"CtMethodImpl","sourcecode":"public boolean writeField(java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324739094/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    } else {\n        {\n            if (!(boolean))\n                return false;\n            \n            java.lang.Object java.lang.Object = field.get(value);\n            return fieldValue != value;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:305","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"5a3c64c0-3f11-11e6-a9fc-732f9f4bb037","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:311","type":"CtMethodImpl","sourcecode":"private void replaceInParent(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node, com.google.gson.internal.LinkedHashTreeMap.Node<K, V> replacement) {\n    if (node != null) {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            if (replacement != null) {\n                replacement.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = parent;\n            } \n            if (parent != null) {\n                if ((parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) == node) {\n                    parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = replacement;\n                } else {\n                    assert (parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) == node;\n                    parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = replacement;\n                }\n            } else {\n                int int = (node.int) & ((com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[].int) - 1);\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[][index] = replacement;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324739094/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"node"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl"},"failures":[],"tindex":"5a3c8bd1-3f11-11e6-a9fc-e17feb04c1eb","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:116","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<?> getFieldAdapter(com.google.gson.Gson gson, java.lang.reflect.Field field, com.google.gson.reflect.TypeToken<?> fieldType) {\n    if (field.isSynthetic()) {\n        {\n            com.google.gson.annotations.JsonAdapter com.google.gson.annotations.JsonAdapter = field.getAnnotation(com.google.gson.annotations.JsonAdapter.com.google.gson.annotations.JsonAdapter.java.lang.Class);\n            if (annotation != null) {\n                com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory.getTypeAdapter(com.google.gson.internal.ConstructorConstructor, gson, fieldType, annotation);\n                if (adapter != null)\n                    return adapter;\n                \n            } \n            return gson.getAdapter(fieldType);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324739094/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"field"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"5a3cb2e2-3f11-11e6-a9fc-cd235c841d3d","method":{"position":"com.google.gson.stream.JsonWriter:532","type":"CtMethodImpl","sourcecode":"private void string(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        {\n            java.lang.String[] java.lang.String[] = boolean ? com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[] : com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[];\n            java.io.Writer.write(\"\\\"\");\n            int int = 0;\n            int int = value.length();\n            for (int int = 0 ; i < length ; i++) {\n                char char = value.charAt(i);\n                java.lang.String java.lang.String;\n                if (c < 128) {\n                    replacement = replacements[c];\n                    if (replacement == null) {\n                        continue;\n                    } \n                } else if (c == '\\u2028') {\n                    replacement = \"\\\\u2028\";\n                } else if (c == '\\u2029') {\n                    replacement = \"\\\\u2029\";\n                } else {\n                    continue;\n                }\n                if (last < i) {\n                    java.io.Writer.write(value, last, (i - last));\n                } \n                java.io.Writer.write(replacement);\n                last = i + 1;\n            }\n            if (last < length) {\n                java.io.Writer.write(value, last, (length - last));\n            } \n            java.io.Writer.write(\"\\\"\");\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324739094/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":30,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
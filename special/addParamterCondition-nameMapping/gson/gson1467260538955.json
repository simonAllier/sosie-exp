{"failureDictionary":{"com.google.gson.JsonStreamParserTest.testNoSideEffectForHasNext":248,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":15,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":13,"com.google.gson.JsonPrimitiveTest.testDeepCopy":338,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":22,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":141,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":151,"com.google.gson.internal.bind.JsonTreeWriterTest.testPrematureClose":356,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":110,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":273,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":147,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":219,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":108,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":223,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":77,"com.google.gson.internal.bind.JsonElementReaderTest.testStrictNansAndInfinities":373,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":173,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":188,"com.google.gson.JsonParserTest.testParseUnquotedMultiWordStringFails":309,"com.google.gson.functional.ObjectTest.testSingletonLists":106,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":208,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":288,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":88,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":121,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":199,"com.google.gson.DefaultDateTypeAdapterTest.testDatePattern":251,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":228,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":8,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":347,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":299,"com.google.gson.functional.JsonTreeTest.testToJsonTree":48,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":276,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":61,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":195,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":271,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":380,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":385,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":91,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":118,"com.google.gson.JsonPrimitiveTest.testParsingStringAsBoolean":327,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":355,"com.google.gson.internal.bind.JsonElementReaderTest.testLenientNansAndInfinities":370,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":298,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":233,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":129,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":350,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":266,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":217,"com.google.gson.JsonParserTest.testParseString":311,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":270,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":132,"com.google.gson.DefaultDateTypeAdapterTest.testFormatUsesDefaultTimezone":255,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":152,"com.google.gson.functional.StreamingTypeAdaptersTest.testFromJsonTree":303,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":39,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":146,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":358,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":96,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":128,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":114,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":227,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":237,"com.google.gson.JsonPrimitiveTest.testEqualsAcrossTypes":342,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":29,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":209,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":52,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":186,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":280,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":260,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":213,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":232,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":94,"com.google.gson.functional.CollectionTest.testSetDeserialization":222,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":78,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":117,"com.google.gson.JsonStreamParserTest.testIterator":249,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":187,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":279,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":122,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":185,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":244,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":215,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":89,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":296,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":14,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":30,"com.google.gson.DefaultDateTypeAdapterTest.testParsingDatesFormattedWithSystemLocale":253,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":143,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":16,"com.google.gson.internal.bind.JsonElementReaderTest.testObject":377,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":2,"com.google.gson.JsonPrimitiveTest.testByteEqualsShort":339,"com.google.gson.JsonPrimitiveTest.testByteEqualsBigInteger":328,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":68,"com.google.gson.functional.MapTest.testComplexKeysSerialization":12,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":262,"com.google.gson.JsonPrimitiveTest.testLongEqualsBigInteger":330,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":357,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":93,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":197,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":179,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":42,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":169,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":351,"com.google.gson.internal.bind.JsonElementReaderTest.testWrongType":374,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":24,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":131,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":282,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":18,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":352,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":74,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":289,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictBoxedNansAndInfinities":362,"com.google.gson.functional.FieldNamingTest.testIdentity":69,"com.google.gson.JsonStreamParserTest.testCallingNextBeyondAvailableInput":246,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":281,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":158,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":133,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":28,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":47,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":105,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":293,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":348,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":308,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":102,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":1,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":73,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":194,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":235,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":225,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":239,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":153,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":87,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":184,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":120,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":229,"com.google.gson.internal.bind.JsonElementReaderTest.testArray":371,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":98,"com.google.gson.JsonPrimitiveTest.testShortEqualsInteger":334,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":37,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":104,"com.google.gson.JsonPrimitiveTest.testByteEqualsLong":321,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":103,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":50,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":0,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":27,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":107,"com.google.gson.MixedStreamTest.testWriteNulls":343,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":92,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":182,"com.google.gson.JsonObjectTest.testReadPropertyWithEmptyStringName":349,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":109,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":176,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":284,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":63,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":165,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":259,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":75,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":193,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":3,"com.google.gson.internal.bind.JsonElementReaderTest.testEarlyClose":372,"com.google.gson.JsonParserTest.testParseMixedArray":313,"com.google.gson.DefaultDateTypeAdapterTest.testParsingDatesFormattedWithUsLocale":256,"com.google.gson.JsonPrimitiveTest.testDoubleEqualsBigDecimal":323,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":162,"com.google.gson.internal.bind.JsonTreeWriterTest.testWriteAfterClose":363,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":72,"com.google.gson.JsonArrayTest.testRemove":346,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":261,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":172,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":326,"com.google.gson.internal.bind.JsonElementReaderTest.testStringsFromNumbers":376,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":59,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":175,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":383,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":43,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":46,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":80,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":134,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":32,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":51,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":192,"com.google.gson.internal.bind.JsonElementReaderTest.testNumbersFromStrings":375,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":41,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":101,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":168,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":317,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":275,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":286,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictNansAndInfinities":360,"com.google.gson.JsonParserTest.testParseEmptyString":314,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":82,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":65,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":302,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":220,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":234,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":304,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":154,"com.google.gson.DefaultDateTypeAdapterTest.testFormattingInFr":254,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":366,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":180,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":243,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":364,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":26,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":58,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":97,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":135,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":198,"com.google.gson.JsonPrimitiveTest.testStringsAndChar":335,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":367,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":142,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":157,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":99,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":139,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":113,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":34,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":81,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":221,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":283,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":171,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":177,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":145,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":178,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":55,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":292,"com.google.gson.JsonArrayTest.testSet":344,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":211,"com.google.gson.JsonPrimitiveTest.testEquals":337,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":174,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":20,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":4,"com.google.gson.functional.MapTest.testGeneralMapField":11,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":111,"com.google.gson.internal.bind.JsonElementReaderTest.testNumbers":378,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":62,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":230,"com.google.gson.DefaultDateTypeAdapterTest.testDateSerialization":250,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":305,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":265,"com.google.gson.MixedStreamTest.testReadMixedStreamed":242,"com.google.gson.JsonObjectTest.testDeepCopy":353,"com.google.gson.internal.bind.JsonElementReaderTest.testBooleans":368,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":144,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":207,"com.google.gson.internal.bind.JsonTreeWriterTest.testEmptyWriter":361,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":214,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":84,"com.google.gson.JsonArrayTest.testDeepCopy":345,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":285,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":210,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":202,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":365,"com.google.gson.JsonPrimitiveTest.testEqualsDoesNotEquateStringAndNonStringTypes":336,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":159,"com.google.gson.JsonPrimitiveTest.testFloatEqualsDouble":329,"com.google.gson.functional.ObjectTest.testNestedDeserialization":140,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":291,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":126,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":307,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":17,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":49,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":164,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":23,"com.google.gson.JsonParserTest.testParseUnquotedStringArrayFails":315,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":183,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":33,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":150,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":155,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":36,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerialization":258,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":10,"com.google.gson.functional.MapTest.testInterfaceTypeMap":9,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":306,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":54,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":196,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":40,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":297,"com.google.gson.JsonPrimitiveTest.testIntegerEqualsLong":332,"com.google.gson.MixedStreamTest.testWriteClosed":241,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":19,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":57,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":112,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":189,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":53,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":167,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":137,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":163,"com.google.gson.LongSerializationPolicyTest.testStringLongSerialization":257,"com.google.gson.JsonPrimitiveTest.testShortEqualsLong":325,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":86,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":60,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":115,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":203,"com.google.gson.JsonPrimitiveTest.testShortEqualsBigInteger":320,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":205,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":38,"com.google.gson.DefaultDateTypeAdapterTest.testFormattingInEnUs":252,"com.google.gson.internal.bind.JsonElementReaderTest.testSkipValue":369,"com.google.gson.internal.bind.JsonElementReaderTest.testStrings":379,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":294,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":70,"com.google.gson.JsonPrimitiveTest.testParsingStringAsNumber":341,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":45,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":95,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":166,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":204,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":7,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":130,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":138,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":218,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":238,"com.google.gson.JsonParserTest.testParseReader":310,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":31,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":124,"com.google.gson.JsonPrimitiveTest.testExponential":340,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":6,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":384,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":316,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":277,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":318,"com.google.gson.ObjectTypeAdapterTest.testSerialize":245,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":263,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":216,"com.google.gson.JsonPrimitiveTest.testEqualsIntegerAndBigInteger":322,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":148,"com.google.gson.JsonPrimitiveTest.testFloatEqualsBigDecimal":319,"com.google.gson.JsonPrimitiveTest.testByteEqualsInteger":331,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":66,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":190,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":268,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":278,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":290,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":44,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":267,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":76,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":295,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":181,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":136,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":170,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":116,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":382,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":85,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":269,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":149,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":201,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":274,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":300,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":35,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":160,"com.google.gson.JsonPrimitiveTest.testIntegerEqualsBigInteger":333,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":236,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":301,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":287,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":123,"com.google.gson.functional.ObjectTest.testNestedSerialization":125,"com.google.gson.JsonObjectTest.testAddingStringProperties":354,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":212,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":5,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":156,"com.google.gson.JsonParserTest.testParseUnquotedSingleWordStringFails":312,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":119,"com.google.gson.JsonPrimitiveTest.testBoolean":324,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":56,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":206,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":83,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":79,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":127,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":200,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":381,"com.google.gson.functional.CollectionTest.testSetSerialization":224,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":231,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":100,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":21,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":25,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":71,"com.google.gson.MixedStreamTest.testWriteInvalidState":240,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":64,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":226,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":272,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":67,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":90,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":161,"com.google.gson.JsonStreamParserTest.testParseTwoStrings":247,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":359,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":191,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":264},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:192","type":"CtInvocationImpl","sourcecode":"to.equals(from)"},"failures":[],"tindex":"3bb04a4b-3e7a-11e6-a494-698e7e660384","method":{"position":"com.google.gson.reflect.TypeToken:272","type":"CtMethodImpl","sourcecode":"private static boolean matches(java.lang.reflect.Type from, java.lang.reflect.Type to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeMap) {\n    if (from.equals(from)) {\n        {\n            return (to.equals(from)) || ((from instanceof java.lang.reflect.TypeVariable) && (to.equals(typeMap.get(((java.lang.reflect.TypeVariable<?>)(from)).getName()))));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260296100/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from","to":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"3bb0715c-3e7a-11e6-a494-9d6c02b8fc20","method":{"position":"com.google.gson.Gson:576","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        {\n            try {\n                com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                toJson(src, typeOfSrc, jsonWriter);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260296100/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:127","type":"CtInvocationImpl","sourcecode":"raw.isInterface()"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245],"tindex":"3bb0986d-3e7a-11e6-a494-b9b866ba3997","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:125","type":"CtMethodImpl","sourcecode":"private java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> getBoundFields(com.google.gson.Gson context, com.google.gson.reflect.TypeToken<?> type, java.lang.Class<?> raw) {\n    if (raw.isInterface()) {\n        {\n            java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> = new java.util.LinkedHashMap<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField>();\n            if (raw.isInterface()) {\n                return result;\n            } \n            java.lang.reflect.Type java.lang.reflect.Type = type.getType();\n            while (raw != (java.lang.Object.java.lang.Object.java.lang.Class)) {\n                java.lang.reflect.Field[] java.lang.reflect.Field[] = raw.getDeclaredFields();\n                for (java.lang.reflect.Field java.lang.reflect.Field : fields) {\n                    boolean boolean = excludeField(field, true);\n                    boolean boolean = excludeField(field, false);\n                    if ((!serialize) && (!deserialize)) {\n                        continue;\n                    } \n                    field.setAccessible(true);\n                    java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, field.getGenericType());\n                    com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = createBoundField(context, field, getFieldName(field), com.google.gson.reflect.TypeToken.get(fieldType), serialize, deserialize);\n                    com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = result.put(boundField.java.lang.String, boundField);\n                    if (previous != null) {\n                        throw new java.lang.IllegalArgumentException(((declaredType + \" declares multiple JSON fields named \") + (previous.java.lang.String)));\n                    } \n                }\n                type = com.google.gson.reflect.TypeToken.get(com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, raw.getGenericSuperclass()));\n                raw = type.getRawType();\n            }\n            return result;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260296100/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"raw"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:94","type":"CtBinaryOperatorImpl","sourcecode":"primitive instanceof java.lang.Character"},"failures":[246,247,248,249,250,251,252,253,254,255,256,257,258,259,2,3,4,5,260,6,261,9,11,262,13,15,20,263,264,44,45,46,47,48,49,50,51,55,56,61,265,266,267,268,269,270,271,272,273,274,275,276,277,88,278,279,280,281,97,98,282,99,283,100,284,285,286,287,288,289,290,291,292,143,145,146,147,148,293,149,150,151,152,153,154,155,156,157,294,166,167,295,296,297,298,299,300,301,302,303,304,305,306,228,307,308,309,310,311,237,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379],"tindex":"3bb0e68e-3e7a-11e6-a494-91bc0bb5c7a3","method":{"position":"com.google.gson.JsonPrimitive:93","type":"CtMethodImpl","sourcecode":"void setValue(java.lang.Object primitive) {\n    if (primitive instanceof java.lang.Character) {\n        {\n            if (primitive instanceof java.lang.Character) {\n                char char = ((java.lang.Character)(primitive)).charValue();\n                com.google.gson.JsonPrimitive.this.java.lang.Object = java.lang.String.valueOf(c);\n            } else {\n                com.google.gson.internal.$Gson$Preconditions.checkArgument(((primitive instanceof java.lang.Number) || (com.google.gson.JsonPrimitive.isPrimitiveOrString(primitive))));\n                com.google.gson.JsonPrimitive.this.java.lang.Object = primitive;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260296100/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"primitive"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"3bb0e68f-3e7a-11e6-a494-1542a80f0d79","method":{"position":"com.google.gson.JsonObject:78","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.String value) {\n    if (property == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260296100/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            add(property, createJsonElement(value));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[380],"tindex":"3bb10da0-3e7a-11e6-a494-c1d24985c894","method":{"position":"com.google.gson.Gson:468","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260296100/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src == null) {\n                return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            return toJsonTree(src, src.getClass());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:179","type":"CtBinaryOperatorImpl","sourcecode":"a instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"3bb10da1-3e7a-11e6-a494-db3ce708da33","method":{"position":"com.google.gson.internal.$Gson$Types:151","type":"CtMethodImpl","sourcecode":"static boolean equal(java.lang.Object a, java.lang.Object b) {\n    return (a == b) || ((a != null) && (a.equals(b)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[7,9,10,13,47,49,50,51,52,54,55,56,60,61,381,382,71,82,171,383,174,175,384,179,385],"tindex":"3bb10da2-3e7a-11e6-a494-e3aa1f1c8399","method":{"position":"com.google.gson.internal.bind.TypeAdapters:361","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260296100/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[13,15,45,46,47,48,49,50,51,55,56,61,147,148,293,149,150,166,167,300,228,308,316,317,318],"tindex":"3bb134b3-3e7a-11e6-a494-377d5c8322e2","method":{"position":"com.google.gson.Gson:491","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260296100/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.bind.JsonTreeWriter com.google.gson.internal.bind.JsonTreeWriter = new com.google.gson.internal.bind.JsonTreeWriter();\n            toJson(src, typeOfSrc, writer);\n            return writer.get();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:109","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonPrimitive"},"failures":[],"tindex":"3bb134b4-3e7a-11e6-a494-ef85987505d8","method":{"position":"com.google.gson.internal.$Gson$Types:511","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    return (o instanceof java.lang.reflect.GenericArrayType) && (com.google.gson.internal.$Gson$Types.equals(com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl.this, ((java.lang.reflect.GenericArrayType)(o))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1529","type":"CtBinaryOperatorImpl","sourcecode":"(c >= 'a') && (c <= 'f')"},"failures":[],"tindex":"3bb15bc5-3e7a-11e6-a494-a521ca22fa97","method":{"position":"com.google.gson.stream.JsonReader:755","type":"CtMethodImpl","sourcecode":"private boolean isLiteral(char c) throws java.io.IOException {\n    if ((c >= 'a') && (c <= 'f')) {\n        {\n            switch (c) {\n                case '/' :\n                case '\\\\' :\n                case ';' :\n                case '#' :\n                case '=' :\n                    checkLenient();\n                case '{' :\n                case '}' :\n                case '[' :\n                case ']' :\n                case ':' :\n                case ',' :\n                case ' ' :\n                case '\\t' :\n                case '\\f' :\n                case '\\r' :\n                case '\\n' :\n                    return false;\n                default :\n                    return true;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260296100/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"c"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"3bb15bc6-3e7a-11e6-a494-bb941026dd10","method":{"position":"com.google.gson.stream.JsonWriter:490","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260296100/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            writeDeferredName();\n            java.lang.String java.lang.String = value.toString();\n            if ((!(boolean)) && (((string.equals(\"-Infinity\")) || (string.equals(\"Infinity\"))) || (string.equals(\"NaN\")))) {\n                throw new java.lang.IllegalArgumentException((\"Numeric values must be finite, but was \" + value));\n            } \n            beforeValue(false);\n            java.io.Writer.append(string);\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:213","type":"CtBinaryOperatorImpl","sourcecode":"(indent.length()) == 0"},"failures":[],"tindex":"3bb15bc7-3e7a-11e6-a494-b5f2786ce2ef","method":{"position":"com.google.gson.stream.JsonWriter:212","type":"CtMethodImpl","sourcecode":"public final void setIndent(java.lang.String indent) {\n    if ((indent.length()) == 0) {\n        {\n            if ((indent.length()) == 0) {\n                com.google.gson.stream.JsonWriter.this.java.lang.String = null;\n                com.google.gson.stream.JsonWriter.this.java.lang.String = \":\";\n            } else {\n                com.google.gson.stream.JsonWriter.this.java.lang.String = indent;\n                com.google.gson.stream.JsonWriter.this.java.lang.String = \": \";\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260296100/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"indent"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":13,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}